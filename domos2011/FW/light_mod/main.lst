CCS PCH C Compiler, Version 4.106, 23932               23-Abr-13 22:19

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 37592 bytes (38%)
                         Largest free fragment is 32768
               RAM used: 1609 (48%) at main() level
                         1804 (54%) worst case
               Stack:    9 worst case (5 in main + 4 for interrupts)

*
00000:  GOTO   8DB2
*
00008:  GOTO   0FA8
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   0EB6
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   0F56
00084:  BTFSS  F9D.1
00086:  GOTO   0090
0008A:  BTFSC  F9E.1
0008C:  GOTO   0F7E
00090:  BTFSS  F9D.5
00092:  GOTO   009C
00096:  BTFSC  F9E.5
00098:  GOTO   1232
0009C:  BTFSS  F9D.4
0009E:  GOTO   00A8
000A2:  BTFSC  F9E.4
000A4:  GOTO   1238
000A8:  BTFSS  F9D.2
000AA:  GOTO   00B4
000AE:  BTFSC  F9E.2
000B0:  GOTO   10F6
000B4:  BTFSS  FA0.3
000B6:  GOTO   00C0
000BA:  BTFSC  FA1.3
000BC:  GOTO   123E
000C0:  BTFSS  FA3.7
000C2:  GOTO   00CC
000C6:  BTFSC  FA4.7
000C8:  GOTO   1C8A
000CC:  BTFSS  FA3.5
000CE:  GOTO   00D8
000D2:  BTFSC  FA4.5
000D4:  GOTO   1C90
000D8:  BTFSS  FA3.4
000DA:  GOTO   00E4
000DE:  BTFSC  FA4.4
000E0:  GOTO   1C82
000E4:  BTFSS  FA3.3
000E6:  GOTO   00F0
000EA:  BTFSC  FA4.3
000EC:  GOTO   1C7A
000F0:  BTFSS  FA3.2
000F2:  GOTO   00FC
000F6:  BTFSC  FA4.2
000F8:  GOTO   1C72
000FC:  BTFSS  FA3.1
000FE:  GOTO   0108
00102:  BTFSC  FA4.1
00104:  GOTO   182E
00108:  BTFSS  FA3.0
0010A:  GOTO   0114
0010E:  BTFSC  FA4.0
00110:  GOTO   1826
00114:  BTFSS  FA0.7
00116:  GOTO   0120
0011A:  BTFSC  FA1.7
0011C:  GOTO   1244
00120:  MOVFF  0E,00
00124:  MOVFF  0F,01
00128:  MOVFF  10,02
0012C:  MOVFF  11,03
00130:  MOVFF  0C,FE9
00134:  MOVFF  07,FEA
00138:  BSF    07.7
0013A:  MOVFF  08,FE1
0013E:  MOVFF  09,FE2
00142:  MOVFF  0A,FD9
00146:  MOVFF  0B,FDA
0014A:  MOVFF  12,FF3
0014E:  MOVFF  13,FF4
00152:  MOVFF  14,FFA
00156:  MOVFF  15,FF5
0015A:  MOVFF  16,FF6
0015E:  MOVFF  17,FF7
00162:  MOVFF  18,FF8
00166:  MOVFF  19,FFB
0016A:  MOVF   04,W
0016C:  MOVFF  06,FE0
00170:  MOVFF  05,FD8
00174:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
.................... #device high_ints=true 
.................... #FUSES WDT256                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV45                   //Brownout reset at 2.0V 
.................... #FUSES PUT                    //No Power Up Timer 
.................... #FUSES CPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOLPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... //#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
00EDA:  BCF    F93.5
00EDC:  BCF    F8A.5
00EDE:  MOVLW  08
00EE0:  MOVWF  01
00EE2:  BRA    0EE4
00EE4:  NOP   
00EE6:  BSF    01.7
00EE8:  BRA    0F0A
00EEA:  BCF    01.7
00EEC:  MOVLB  6
00EEE:  RRCF   xDC,F
00EF0:  MOVLB  0
00EF2:  BTFSC  FD8.0
00EF4:  BSF    F8A.5
00EF6:  BTFSS  FD8.0
00EF8:  BCF    F8A.5
00EFA:  BSF    01.6
00EFC:  BRA    0F0A
00EFE:  BCF    01.6
00F00:  DECFSZ 01,F
00F02:  BRA    0EEC
00F04:  BRA    0F06
00F06:  NOP   
00F08:  BSF    F8A.5
00F0A:  MOVLW  01
00F0C:  MOVWF  00
00F0E:  CLRF   FE9
00F10:  DECFSZ FE9,F
00F12:  BRA    0F10
00F14:  DECFSZ 00,F
00F16:  BRA    0F0E
00F18:  MOVLW  53
00F1A:  MOVWF  FE9
00F1C:  DECFSZ FE9,F
00F1E:  BRA    0F1C
00F20:  BRA    0F22
00F22:  CLRWDT
00F24:  BTFSC  01.7
00F26:  BRA    0EEA
00F28:  BTFSC  01.6
00F2A:  BRA    0EFE
00F2C:  RETLW  00
*
05656:  BSF    F93.4
05658:  CLRWDT
0565A:  BTFSC  F81.4
0565C:  BRA    5658
0565E:  MOVLW  08
05660:  MOVWF  00
05662:  MOVLB  6
05664:  CLRF   x64
05666:  BSF    00.7
05668:  BRA    5686
0566A:  BCF    00.7
0566C:  BRA    5686
0566E:  BCF    FD8.0
05670:  BTFSC  F81.4
05672:  BSF    FD8.0
05674:  RRCF   x64,F
05676:  BSF    00.6
05678:  BRA    5686
0567A:  BCF    00.6
0567C:  DECFSZ 00,F
0567E:  BRA    566E
05680:  MOVFF  664,01
05684:  BRA    56B2
05686:  MOVLW  01
05688:  MOVWF  FE9
0568A:  MOVLW  00
0568C:  BTFSC  00.7
0568E:  MOVLW  55
05690:  MOVWF  01
05692:  DECFSZ 01,F
05694:  BRA    5692
05696:  DECFSZ FE9,F
05698:  BRA    568A
0569A:  MOVLW  52
0569C:  BTFSC  00.7
0569E:  MOVLW  16
056A0:  MOVWF  01
056A2:  DECFSZ 01,F
056A4:  BRA    56A2
056A6:  BRA    56A8
056A8:  BTFSC  00.7
056AA:  BRA    566A
056AC:  BTFSC  00.6
056AE:  BRA    567A
056B0:  BRA    566E
056B2:  MOVLB  0
056B4:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01D0A:  MOVLW  04
01D0C:  MOVLB  6
01D0E:  MOVWF  x61
01D10:  MOVLB  0
01D12:  RCALL  1CB4
....................    can_set_baud(); 
01D14:  BRA    1CDA
....................  
....................    RXB0CON=0; 
01D16:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01D18:  MOVLW  9F
01D1A:  ANDWF  F60,W
01D1C:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01D1E:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01D20:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01D24:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01D26:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01D28:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01D2A:  BCF    F73.6
01D2C:  CLRF   1B
01D2E:  BTFSC  FF2.6
01D30:  BSF    1B.6
01D32:  BCF    FF2.6
01D34:  BTFSC  FF2.7
01D36:  BSF    1B.7
01D38:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01D3A:  MOVLW  0F
01D3C:  MOVLB  6
01D3E:  MOVWF  xFA
01D40:  MOVLW  1B
01D42:  MOVWF  xF9
01D44:  CLRF   xFE
01D46:  CLRF   xFD
01D48:  CLRF   xFC
01D4A:  CLRF   xFB
01D4C:  CLRF   xFF
01D4E:  MOVLB  0
01D50:  RCALL  1836
01D52:  BTFSC  1B.6
01D54:  BSF    FF2.6
01D56:  BTFSC  1B.7
01D58:  BSF    FF2.7
01D5A:  CLRF   1B
01D5C:  BTFSC  FF2.6
01D5E:  BSF    1B.6
01D60:  BCF    FF2.6
01D62:  BTFSC  FF2.7
01D64:  BSF    1B.7
01D66:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01D68:  MOVLW  0F
01D6A:  MOVLB  6
01D6C:  MOVWF  xFA
01D6E:  MOVLW  03
01D70:  MOVWF  xF9
01D72:  CLRF   xFE
01D74:  CLRF   xFD
01D76:  CLRF   xFC
01D78:  CLRF   xFB
01D7A:  CLRF   xFF
01D7C:  MOVLB  0
01D7E:  RCALL  1836
01D80:  BTFSC  1B.6
01D82:  BSF    FF2.6
01D84:  BTFSC  1B.7
01D86:  BSF    FF2.7
01D88:  CLRF   1B
01D8A:  BTFSC  FF2.6
01D8C:  BSF    1B.6
01D8E:  BCF    FF2.6
01D90:  BTFSC  FF2.7
01D92:  BSF    1B.7
01D94:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01D96:  MOVLW  0F
01D98:  MOVLB  6
01D9A:  MOVWF  xFA
01D9C:  MOVLW  07
01D9E:  MOVWF  xF9
01DA0:  CLRF   xFE
01DA2:  CLRF   xFD
01DA4:  CLRF   xFC
01DA6:  CLRF   xFB
01DA8:  CLRF   xFF
01DAA:  MOVLB  0
01DAC:  RCALL  1836
01DAE:  BTFSC  1B.6
01DB0:  BSF    FF2.6
01DB2:  BTFSC  1B.7
01DB4:  BSF    FF2.7
01DB6:  CLRF   1B
01DB8:  BTFSC  FF2.6
01DBA:  BSF    1B.6
01DBC:  BCF    FF2.6
01DBE:  BTFSC  FF2.7
01DC0:  BSF    1B.7
01DC2:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01DC4:  MOVLW  0F
01DC6:  MOVLB  6
01DC8:  MOVWF  xFA
01DCA:  MOVLW  1F
01DCC:  MOVWF  xF9
01DCE:  CLRF   xFE
01DD0:  CLRF   xFD
01DD2:  CLRF   xFC
01DD4:  CLRF   xFB
01DD6:  CLRF   xFF
01DD8:  MOVLB  0
01DDA:  RCALL  1836
01DDC:  BTFSC  1B.6
01DDE:  BSF    FF2.6
01DE0:  BTFSC  1B.7
01DE2:  BSF    FF2.7
01DE4:  CLRF   1B
01DE6:  BTFSC  FF2.6
01DE8:  BSF    1B.6
01DEA:  BCF    FF2.6
01DEC:  BTFSC  FF2.7
01DEE:  BSF    1B.7
01DF0:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01DF2:  MOVLW  0F
01DF4:  MOVLB  6
01DF6:  MOVWF  xFA
01DF8:  MOVLW  0B
01DFA:  MOVWF  xF9
01DFC:  CLRF   xFE
01DFE:  CLRF   xFD
01E00:  CLRF   xFC
01E02:  CLRF   xFB
01E04:  CLRF   xFF
01E06:  MOVLB  0
01E08:  RCALL  1836
01E0A:  BTFSC  1B.6
01E0C:  BSF    FF2.6
01E0E:  BTFSC  1B.7
01E10:  BSF    FF2.7
01E12:  CLRF   1B
01E14:  BTFSC  FF2.6
01E16:  BSF    1B.6
01E18:  BCF    FF2.6
01E1A:  BTFSC  FF2.7
01E1C:  BSF    1B.7
01E1E:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01E20:  MOVLW  0F
01E22:  MOVLB  6
01E24:  MOVWF  xFA
01E26:  MOVWF  xF9
01E28:  CLRF   xFE
01E2A:  CLRF   xFD
01E2C:  CLRF   xFC
01E2E:  CLRF   xFB
01E30:  CLRF   xFF
01E32:  MOVLB  0
01E34:  RCALL  1836
01E36:  BTFSC  1B.6
01E38:  BSF    FF2.6
01E3A:  BTFSC  1B.7
01E3C:  BSF    FF2.7
01E3E:  CLRF   1B
01E40:  BTFSC  FF2.6
01E42:  BSF    1B.6
01E44:  BCF    FF2.6
01E46:  BTFSC  FF2.7
01E48:  BSF    1B.7
01E4A:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01E4C:  MOVLW  0F
01E4E:  MOVLB  6
01E50:  MOVWF  xFA
01E52:  MOVLW  13
01E54:  MOVWF  xF9
01E56:  CLRF   xFE
01E58:  CLRF   xFD
01E5A:  CLRF   xFC
01E5C:  CLRF   xFB
01E5E:  CLRF   xFF
01E60:  MOVLB  0
01E62:  RCALL  1836
01E64:  BTFSC  1B.6
01E66:  BSF    FF2.6
01E68:  BTFSC  1B.7
01E6A:  BSF    FF2.7
01E6C:  CLRF   1B
01E6E:  BTFSC  FF2.6
01E70:  BSF    1B.6
01E72:  BCF    FF2.6
01E74:  BTFSC  FF2.7
01E76:  BSF    1B.7
01E78:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01E7A:  MOVLW  0F
01E7C:  MOVLB  6
01E7E:  MOVWF  xFA
01E80:  MOVLW  17
01E82:  MOVWF  xF9
01E84:  CLRF   xFE
01E86:  CLRF   xFD
01E88:  CLRF   xFC
01E8A:  CLRF   xFB
01E8C:  CLRF   xFF
01E8E:  MOVLB  0
01E90:  RCALL  1836
01E92:  BTFSC  1B.6
01E94:  BSF    FF2.6
01E96:  BTFSC  1B.7
01E98:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01E9A:  MOVF   F93,W
01E9C:  ANDLW  FB
01E9E:  IORLW  08
01EA0:  MOVLB  6
01EA2:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01EA4:  CLRF   x61
01EA6:  MOVLB  0
01EA8:  RCALL  1CB4
.................... } 
01EAA:  GOTO   1EB0 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01CDA:  MOVLW  C0
01CDC:  ANDWF  F70,W
01CDE:  IORLW  04
01CE0:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01CE2:  MOVLW  3F
01CE4:  ANDWF  F70,W
01CE6:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01CE8:  MOVLW  F8
01CEA:  ANDWF  F71,W
01CEC:  IORLW  02
01CEE:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01CF0:  MOVLW  C7
01CF2:  ANDWF  F71,W
01CF4:  IORLW  28
01CF6:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01CF8:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01CFA:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01CFC:  MOVLW  F8
01CFE:  ANDWF  F72,W
01D00:  IORLW  05
01D02:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01D04:  BCF    F72.6
.................... } 
01D06:  GOTO   1D16 (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01CB4:  MOVLB  6
01CB6:  SWAPF  x61,W
01CB8:  ANDLW  70
01CBA:  MOVWF  00
01CBC:  BCF    FD8.0
01CBE:  RLCF   00,F
01CC0:  MOVLW  1F
01CC2:  ANDWF  F6F,W
01CC4:  IORWF  00,W
01CC6:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01CC8:  MOVFF  F6E,00
01CCC:  SWAPF  00,F
01CCE:  RRCF   00,W
01CD0:  ANDLW  07
01CD2:  SUBWF  x61,W
01CD4:  BNZ   1CC8
.................... } 
01CD6:  MOVLB  0
01CD8:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
01836:  MOVFF  6FA,701
0183A:  MOVFF  6F9,700
....................  
....................    if (ext) {  //extended 
0183E:  MOVLB  6
01840:  MOVF   xFF,F
01842:  BZ    18FA
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
01844:  MOVFF  700,FE9
01848:  MOVFF  701,FEA
0184C:  MOVLB  6
0184E:  MOVFF  6FB,FEF
....................  
....................       //eidh 
....................       ptr--; 
01852:  MOVLB  7
01854:  MOVF   x00,W
01856:  BTFSC  FD8.2
01858:  DECF   x01,F
0185A:  DECF   x00,F
....................       *ptr=make8(id,1); //8:15 
0185C:  MOVFF  700,FE9
01860:  MOVFF  701,FEA
01864:  MOVLB  6
01866:  MOVFF  6FC,FEF
....................  
....................       //sidl 
....................       ptr--; 
0186A:  MOVLB  7
0186C:  MOVF   x00,W
0186E:  BTFSC  FD8.2
01870:  DECF   x01,F
01872:  DECF   x00,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
01874:  MOVFF  700,FE9
01878:  MOVFF  701,FEA
0187C:  MOVLB  6
0187E:  MOVF   xFD,W
01880:  ANDLW  03
01882:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
01884:  MOVFF  700,FE9
01888:  MOVFF  701,FEA
0188C:  MOVLB  6
0188E:  MOVFF  6FD,00
01892:  RLCF   00,F
01894:  RLCF   00,F
01896:  RLCF   00,F
01898:  MOVLW  F8
0189A:  ANDWF  00,F
0189C:  MOVF   00,W
0189E:  ANDLW  E0
018A0:  IORWF  FEF,W
018A2:  MOVWF  FEF
....................       *ptr|=0x08; 
018A4:  MOVLB  7
018A6:  MOVFF  700,FE9
018AA:  MOVFF  701,FEA
018AE:  MOVF   FEF,W
018B0:  IORLW  08
018B2:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
018B4:  MOVF   x00,W
018B6:  BTFSC  FD8.2
018B8:  DECF   x01,F
018BA:  DECF   x00,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
018BC:  MOVFF  700,FE9
018C0:  MOVFF  701,FEA
018C4:  MOVLB  6
018C6:  MOVFF  6FD,00
018CA:  SWAPF  00,F
018CC:  RRCF   00,F
018CE:  MOVLW  07
018D0:  ANDWF  00,F
018D2:  MOVF   00,W
018D4:  ANDLW  07
018D6:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
018D8:  MOVFF  700,FE9
018DC:  MOVFF  701,FEA
018E0:  MOVLB  6
018E2:  MOVFF  6FE,00
018E6:  RLCF   00,F
018E8:  RLCF   00,F
018EA:  RLCF   00,F
018EC:  MOVLW  F8
018EE:  ANDWF  00,F
018F0:  MOVF   00,W
018F2:  ANDLW  F8
018F4:  IORWF  FEF,W
018F6:  MOVWF  FEF
....................    } 
....................    else {   //standard 
018F8:  BRA    1982
....................       //eidl 
....................       *ptr=0; 
018FA:  MOVLB  7
018FC:  MOVFF  700,FE9
01900:  MOVFF  701,FEA
01904:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
01906:  MOVF   x00,W
01908:  BTFSC  FD8.2
0190A:  DECF   x01,F
0190C:  DECF   x00,F
....................       *ptr=0; 
0190E:  MOVFF  700,FE9
01912:  MOVFF  701,FEA
01916:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
01918:  MOVF   x00,W
0191A:  BTFSC  FD8.2
0191C:  DECF   x01,F
0191E:  DECF   x00,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
01920:  MOVFF  700,FE9
01924:  MOVFF  701,FEA
01928:  MOVLB  6
0192A:  MOVFF  6FB,00
0192E:  SWAPF  00,F
01930:  RLCF   00,F
01932:  MOVLW  E0
01934:  ANDWF  00,F
01936:  MOVF   00,W
01938:  ANDLW  E0
0193A:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
0193C:  MOVLB  7
0193E:  MOVF   x00,W
01940:  BTFSC  FD8.2
01942:  DECF   x01,F
01944:  DECF   x00,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01946:  MOVFF  700,FE9
0194A:  MOVFF  701,FEA
0194E:  MOVLB  6
01950:  MOVFF  6FB,00
01954:  RRCF   00,F
01956:  RRCF   00,F
01958:  RRCF   00,F
0195A:  MOVLW  1F
0195C:  ANDWF  00,F
0195E:  MOVF   00,W
01960:  ANDLW  1F
01962:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
01964:  MOVFF  700,FE9
01968:  MOVFF  701,FEA
0196C:  MOVLB  6
0196E:  MOVFF  6FC,00
01972:  SWAPF  00,F
01974:  RLCF   00,F
01976:  MOVLW  E0
01978:  ANDWF  00,F
0197A:  MOVF   00,W
0197C:  ANDLW  E0
0197E:  IORWF  FEF,W
01980:  MOVWF  FEF
....................    } 
.................... } 
01982:  MOVLB  0
01984:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
0124C:  MOVLB  6
0124E:  CLRF   xFB
01250:  CLRF   xFA
01252:  CLRF   xF9
01254:  CLRF   xF8
....................    ptr=addr; 
01256:  MOVFF  6F6,6FD
0125A:  MOVFF  6F5,6FC
....................  
....................    if (ext) { 
0125E:  MOVF   xF7,F
01260:  BTFSC  FD8.2
01262:  BRA    13A8
....................       ret=*ptr;  //eidl 
01264:  MOVFF  6FD,03
01268:  MOVFF  6FC,FE9
0126C:  MOVFF  6FD,FEA
01270:  MOVFF  FEF,00
01274:  CLRF   01
01276:  CLRF   02
01278:  CLRF   03
0127A:  MOVFF  03,6FB
0127E:  MOVFF  02,6FA
01282:  MOVFF  01,6F9
01286:  MOVFF  00,6F8
....................  
....................       ptr--;     //eidh 
0128A:  MOVF   xFC,W
0128C:  BTFSC  FD8.2
0128E:  DECF   xFD,F
01290:  DECF   xFC,F
....................       ret|=((int32)*ptr << 8); 
01292:  MOVFF  6FC,FE9
01296:  MOVFF  6FD,FEA
0129A:  MOVF   FEF,W
0129C:  MOVLB  7
0129E:  CLRF   x00
012A0:  MOVLB  6
012A2:  CLRF   xFF
012A4:  MOVWF  xFE
012A6:  MOVFF  700,03
012AA:  CLRF   00
012AC:  MOVF   00,W
012AE:  IORWF  xF8,F
012B0:  MOVF   xFE,W
012B2:  IORWF  xF9,F
012B4:  MOVF   xFF,W
012B6:  IORWF  xFA,F
012B8:  MOVF   03,W
012BA:  IORWF  xFB,F
....................  
....................       ptr--;     //sidl 
012BC:  MOVF   xFC,W
012BE:  BTFSC  FD8.2
012C0:  DECF   xFD,F
012C2:  DECF   xFC,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
012C4:  MOVFF  6FC,FE9
012C8:  MOVFF  6FD,FEA
012CC:  MOVF   FEF,W
012CE:  MOVLB  7
012D0:  CLRF   x01
012D2:  CLRF   x00
012D4:  MOVLB  6
012D6:  CLRF   xFF
012D8:  MOVWF  xFE
012DA:  MOVLW  03
012DC:  ANDWF  xFE,F
012DE:  CLRF   xFF
012E0:  MOVLB  7
012E2:  CLRF   x00
012E4:  CLRF   x01
012E6:  CLRF   00
012E8:  CLRF   01
012EA:  MOVF   00,W
012EC:  MOVLB  6
012EE:  IORWF  xF8,F
012F0:  MOVF   01,W
012F2:  IORWF  xF9,F
012F4:  MOVF   xFE,W
012F6:  IORWF  xFA,F
012F8:  MOVF   xFF,W
012FA:  IORWF  xFB,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
012FC:  MOVFF  6FC,FE9
01300:  MOVFF  6FD,FEA
01304:  MOVF   FEF,W
01306:  MOVLB  7
01308:  CLRF   x01
0130A:  CLRF   x00
0130C:  MOVLB  6
0130E:  CLRF   xFF
01310:  MOVWF  xFE
01312:  MOVLW  E0
01314:  ANDWF  xFE,F
01316:  CLRF   xFF
01318:  MOVLB  7
0131A:  CLRF   x00
0131C:  CLRF   x01
0131E:  CLRF   00
01320:  MOVLB  6
01322:  RLCF   xFE,W
01324:  MOVWF  01
01326:  RLCF   xFF,W
01328:  MOVWF  02
0132A:  MOVLB  7
0132C:  RLCF   x00,W
0132E:  MOVWF  03
01330:  RLCF   01,F
01332:  RLCF   02,F
01334:  RLCF   03,F
01336:  RLCF   01,F
01338:  RLCF   02,F
0133A:  RLCF   03,F
0133C:  RLCF   01,F
0133E:  RLCF   02,F
01340:  RLCF   03,F
01342:  RLCF   01,F
01344:  RLCF   02,F
01346:  RLCF   03,F
01348:  MOVLW  E0
0134A:  ANDWF  01,F
0134C:  MOVF   00,W
0134E:  MOVLB  6
01350:  IORWF  xF8,F
01352:  MOVF   01,W
01354:  IORWF  xF9,F
01356:  MOVF   02,W
01358:  IORWF  xFA,F
0135A:  MOVF   03,W
0135C:  IORWF  xFB,F
....................  
....................       ptr--;     //sidh 
0135E:  MOVF   xFC,W
01360:  BTFSC  FD8.2
01362:  DECF   xFD,F
01364:  DECF   xFC,F
....................       ret|=((int32)*ptr << 21); 
01366:  MOVFF  6FC,FE9
0136A:  MOVFF  6FD,FEA
0136E:  MOVF   FEF,W
01370:  MOVLB  6
01372:  CLRF   xFF
01374:  MOVWF  xFE
01376:  CLRF   00
01378:  CLRF   01
0137A:  RLCF   xFE,W
0137C:  MOVWF  02
0137E:  RLCF   xFF,W
01380:  MOVWF  03
01382:  RLCF   02,F
01384:  RLCF   03,F
01386:  RLCF   02,F
01388:  RLCF   03,F
0138A:  RLCF   02,F
0138C:  RLCF   03,F
0138E:  RLCF   02,F
01390:  RLCF   03,F
01392:  MOVLW  E0
01394:  ANDWF  02,F
01396:  MOVF   00,W
01398:  IORWF  xF8,F
0139A:  MOVF   01,W
0139C:  IORWF  xF9,F
0139E:  MOVF   02,W
013A0:  IORWF  xFA,F
013A2:  MOVF   03,W
013A4:  IORWF  xFB,F
....................  
....................    } 
....................    else { 
013A6:  BRA    1462
....................       ptr-=2;    //sidl 
013A8:  MOVLW  02
013AA:  SUBWF  xFC,F
013AC:  MOVLW  00
013AE:  SUBWFB xFD,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
013B0:  MOVFF  6FC,FE9
013B4:  MOVFF  6FD,FEA
013B8:  MOVF   FEF,W
013BA:  MOVLB  7
013BC:  CLRF   x01
013BE:  CLRF   x00
013C0:  MOVLB  6
013C2:  CLRF   xFF
013C4:  MOVWF  xFE
013C6:  MOVLW  E0
013C8:  ANDWF  xFE,F
013CA:  CLRF   xFF
013CC:  MOVLB  7
013CE:  CLRF   x00
013D0:  CLRF   x01
013D2:  RRCF   x01,W
013D4:  MOVLB  6
013D6:  MOVWF  xFB
013D8:  MOVLB  7
013DA:  RRCF   x00,W
013DC:  MOVLB  6
013DE:  MOVWF  xFA
013E0:  RRCF   xFF,W
013E2:  MOVWF  xF9
013E4:  RRCF   xFE,W
013E6:  MOVWF  xF8
013E8:  RRCF   xFB,F
013EA:  RRCF   xFA,F
013EC:  RRCF   xF9,F
013EE:  RRCF   xF8,F
013F0:  RRCF   xFB,F
013F2:  RRCF   xFA,F
013F4:  RRCF   xF9,F
013F6:  RRCF   xF8,F
013F8:  RRCF   xFB,F
013FA:  RRCF   xFA,F
013FC:  RRCF   xF9,F
013FE:  RRCF   xF8,F
01400:  RRCF   xFB,F
01402:  RRCF   xFA,F
01404:  RRCF   xF9,F
01406:  RRCF   xF8,F
01408:  MOVLW  07
0140A:  ANDWF  xFB,F
....................  
....................       ptr--;     //sidh 
0140C:  MOVF   xFC,W
0140E:  BTFSC  FD8.2
01410:  DECF   xFD,F
01412:  DECF   xFC,F
....................       ret|=((int32)*ptr << 3); 
01414:  MOVFF  6FC,FE9
01418:  MOVFF  6FD,FEA
0141C:  MOVF   FEF,W
0141E:  MOVLB  7
01420:  CLRF   x01
01422:  CLRF   x00
01424:  MOVLB  6
01426:  CLRF   xFF
01428:  MOVWF  xFE
0142A:  RLCF   xFE,W
0142C:  MOVWF  00
0142E:  RLCF   xFF,W
01430:  MOVWF  01
01432:  MOVLB  7
01434:  RLCF   x00,W
01436:  MOVWF  02
01438:  RLCF   x01,W
0143A:  MOVWF  03
0143C:  RLCF   00,F
0143E:  RLCF   01,F
01440:  RLCF   02,F
01442:  RLCF   03,F
01444:  RLCF   00,F
01446:  RLCF   01,F
01448:  RLCF   02,F
0144A:  RLCF   03,F
0144C:  MOVLW  F8
0144E:  ANDWF  00,F
01450:  MOVF   00,W
01452:  MOVLB  6
01454:  IORWF  xF8,F
01456:  MOVF   01,W
01458:  IORWF  xF9,F
0145A:  MOVF   02,W
0145C:  IORWF  xFA,F
0145E:  MOVF   03,W
01460:  IORWF  xFB,F
....................    } 
....................  
....................    return(ret); 
01462:  MOVFF  6F8,00
01466:  MOVFF  6F9,01
0146A:  MOVFF  6FA,02
0146E:  MOVFF  6FB,03
.................... } 
01472:  MOVLB  0
01474:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
01986:  MOVLW  0F
01988:  MOVLB  6
0198A:  MOVWF  xF7
0198C:  MOVLW  66
0198E:  MOVWF  xF6
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
01990:  MOVLB  F
01992:  BTFSC  x40.3
01994:  BRA    19A6
....................       CANCON.win=CAN_WIN_TX0; 
01996:  MOVLW  F1
01998:  ANDWF  F6F,W
0199A:  IORLW  08
0199C:  MOVWF  F6F
....................       port=0; 
0199E:  MOVLB  6
019A0:  CLRF   xF8
....................    } 
....................    else if (!TXB1CON.txreq) { 
019A2:  BRA    19DA
019A4:  MOVLB  F
019A6:  BTFSC  x30.3
019A8:  BRA    19BC
....................       CANCON.win=CAN_WIN_TX1; 
019AA:  MOVLW  F1
019AC:  ANDWF  F6F,W
019AE:  IORLW  06
019B0:  MOVWF  F6F
....................       port=1; 
019B2:  MOVLW  01
019B4:  MOVLB  6
019B6:  MOVWF  xF8
....................    } 
....................    else if (!TXB2CON.txreq) { 
019B8:  BRA    19DA
019BA:  MOVLB  F
019BC:  BTFSC  x20.3
019BE:  BRA    19D2
....................       CANCON.win=CAN_WIN_TX2; 
019C0:  MOVLW  F1
019C2:  ANDWF  F6F,W
019C4:  IORLW  04
019C6:  MOVWF  F6F
....................       port=2; 
019C8:  MOVLW  02
019CA:  MOVLB  6
019CC:  MOVWF  xF8
....................    } 
....................    else { 
019CE:  BRA    19DA
019D0:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
019D2:  MOVLW  00
019D4:  MOVWF  01
019D6:  BRA    1A52
019D8:  MOVLB  6
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
019DA:  MOVF   xF2,W
019DC:  ANDLW  03
019DE:  MOVWF  00
019E0:  MOVLW  FC
019E2:  ANDWF  F60,W
019E4:  IORWF  00,W
019E6:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
019E8:  MOVLW  0F
019EA:  MOVWF  xFA
019EC:  MOVLW  64
019EE:  MOVWF  xF9
019F0:  MOVFF  6EE,6FE
019F4:  MOVFF  6ED,6FD
019F8:  MOVFF  6EC,6FC
019FC:  MOVFF  6EB,6FB
01A00:  MOVFF  6F3,6FF
01A04:  MOVLB  0
01A06:  RCALL  1836
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
01A08:  MOVFF  6F1,F65
....................    TXBaDLC.rtr=rtr; 
01A0C:  BCF    F65.6
01A0E:  MOVLB  6
01A10:  BTFSC  xF4.0
01A12:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
01A14:  CLRF   xF5
01A16:  MOVF   xF1,W
01A18:  SUBWF  xF5,W
01A1A:  BC    1A44
....................       *txd0=*data; 
01A1C:  MOVFF  6EF,FE9
01A20:  MOVFF  6F0,FEA
01A24:  MOVFF  FEF,6FB
01A28:  MOVFF  6F7,FEA
01A2C:  MOVFF  6F6,FE9
01A30:  MOVFF  6FB,FEF
....................       txd0++; 
01A34:  INCF   xF6,F
01A36:  BTFSC  FD8.2
01A38:  INCF   xF7,F
....................       data++; 
01A3A:  INCF   xEF,F
01A3C:  BTFSC  FD8.2
01A3E:  INCF   xF0,F
....................     } 
01A40:  INCF   xF5,F
01A42:  BRA    1A16
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
01A44:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
01A46:  MOVLW  F1
01A48:  ANDWF  F6F,W
01A4A:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
01A4C:  MOVLW  01
01A4E:  MOVWF  01
01A50:  MOVLB  F
.................... } 
01A52:  MOVLB  0
01A54:  GOTO   1C6A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
01490:  BTFSS  F60.7
01492:  BRA    14C2
*
01718:  BTFSS  F60.7
0171A:  BRA    174A
....................         CANCON.win=CAN_WIN_RX0; 
*
01494:  MOVLW  F1
01496:  ANDWF  F6F,W
01498:  MOVWF  F6F
*
0171C:  MOVLW  F1
0171E:  ANDWF  F6F,W
01720:  MOVWF  F6F
....................         stat.buffer=0; 
*
0149A:  BCF    xDE.4
*
01722:  BCF    xDE.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
0149C:  BCF    FA4.0
*
01724:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
0149E:  BCF    xDE.0
014A0:  BTFSC  F74.7
014A2:  BSF    xDE.0
*
01726:  BCF    xDE.0
01728:  BTFSC  F74.7
0172A:  BSF    xDE.0
....................         COMSTAT.rx0ovfl=0; 
*
014A4:  BCF    F74.7
*
0172C:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
014A6:  BTFSS  F60.2
014A8:  BRA    14C0
*
0172E:  BTFSS  F60.2
01730:  BRA    1748
....................          stat.filthit=RXB0CON.filthit0; 
*
014AA:  MOVLW  00
014AC:  BTFSC  F60.0
014AE:  MOVLW  01
014B0:  ANDLW  07
014B2:  MOVWF  00
014B4:  BCF    FD8.0
014B6:  RLCF   00,F
014B8:  MOVLW  F1
014BA:  ANDWF  xDE,W
014BC:  IORWF  00,W
014BE:  MOVWF  xDE
*
01732:  MOVLW  00
01734:  BTFSC  F60.0
01736:  MOVLW  01
01738:  ANDLW  07
0173A:  MOVWF  00
0173C:  BCF    FD8.0
0173E:  RLCF   00,F
01740:  MOVLW  F1
01742:  ANDWF  xDE,W
01744:  IORWF  00,W
01746:  MOVWF  xDE
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
014C0:  BRA    1502
014C2:  MOVLB  F
014C4:  BTFSS  x50.7
014C6:  BRA    14FA
*
01748:  BRA    178A
0174A:  MOVLB  F
0174C:  BTFSS  x50.7
0174E:  BRA    1782
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
014C8:  MOVLW  F1
014CA:  ANDWF  F6F,W
014CC:  IORLW  0A
014CE:  MOVWF  F6F
*
01750:  MOVLW  F1
01752:  ANDWF  F6F,W
01754:  IORLW  0A
01756:  MOVWF  F6F
....................         stat.buffer=1; 
*
014D0:  MOVLB  6
014D2:  BSF    xDE.4
*
01758:  MOVLB  6
0175A:  BSF    xDE.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
014D4:  BCF    FA4.1
*
0175C:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
014D6:  BCF    xDE.0
014D8:  BTFSC  F74.6
014DA:  BSF    xDE.0
*
0175E:  BCF    xDE.0
01760:  BTFSC  F74.6
01762:  BSF    xDE.0
....................         COMSTAT.rx1ovfl=0; 
*
014DC:  BCF    F74.6
*
01764:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
014DE:  MOVLB  F
014E0:  MOVF   x50,W
014E2:  ANDLW  07
014E4:  ANDLW  07
014E6:  MOVWF  00
014E8:  BCF    FD8.0
014EA:  RLCF   00,F
014EC:  MOVLW  F1
014EE:  MOVLB  6
014F0:  ANDWF  xDE,W
014F2:  IORWF  00,W
014F4:  MOVWF  xDE
*
01766:  MOVLB  F
01768:  MOVF   x50,W
0176A:  ANDLW  07
0176C:  ANDLW  07
0176E:  MOVWF  00
01770:  BCF    FD8.0
01772:  RLCF   00,F
01774:  MOVLW  F1
01776:  MOVLB  6
01778:  ANDWF  xDE,W
0177A:  IORWF  00,W
0177C:  MOVWF  xDE
....................     } 
....................     else { 
*
014F6:  BRA    1502
014F8:  MOVLB  F
*
0177E:  BRA    178A
01780:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
014FA:  MOVLW  00
014FC:  MOVWF  01
014FE:  BRA    1598
01500:  MOVLB  6
*
01782:  MOVLW  00
01784:  MOVWF  01
01786:  BRA    1820
01788:  MOVLB  6
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
01502:  MOVF   F65,W
01504:  ANDLW  0F
01506:  MOVWF  xDD
*
0178A:  MOVF   F65,W
0178C:  ANDLW  0F
0178E:  MOVWF  xDD
....................     stat.rtr=RXBaDLC.rtr; 
*
01508:  BCF    xDE.5
0150A:  BTFSC  F65.6
0150C:  BSF    xDE.5
*
01790:  BCF    xDE.5
01792:  BTFSC  F65.6
01794:  BSF    xDE.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
0150E:  BCF    xDE.6
01510:  BTFSC  F62.3
01512:  BSF    xDE.6
*
01796:  BCF    xDE.6
01798:  BTFSC  F62.3
0179A:  BSF    xDE.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
01514:  MOVLW  00
01516:  BTFSC  xDE.6
01518:  MOVLW  01
0151A:  MOVWF  xEE
0151C:  MOVLW  0F
0151E:  MOVWF  xF6
01520:  MOVLW  64
01522:  MOVWF  xF5
01524:  MOVFF  6EE,6F7
01528:  MOVLB  0
0152A:  RCALL  124C
0152C:  MOVFF  03,6DC
01530:  MOVFF  02,6DB
01534:  MOVFF  01,6DA
01538:  MOVFF  00,6D9
*
0179C:  MOVLW  00
0179E:  BTFSC  xDE.6
017A0:  MOVLW  01
017A2:  MOVWF  xEE
017A4:  MOVLW  0F
017A6:  MOVWF  xF6
017A8:  MOVLW  64
017AA:  MOVWF  xF5
017AC:  MOVFF  6EE,6F7
017B0:  MOVLB  0
017B2:  RCALL  124C
017B4:  MOVFF  03,6DC
017B8:  MOVFF  02,6DB
017BC:  MOVFF  01,6DA
017C0:  MOVFF  00,6D9
....................  
....................     ptr = &TXRXBaD0; 
*
0153C:  MOVLW  0F
0153E:  MOVLB  6
01540:  MOVWF  xED
01542:  MOVLW  66
01544:  MOVWF  xEC
*
017C4:  MOVLW  0F
017C6:  MOVLB  6
017C8:  MOVWF  xED
017CA:  MOVLW  66
017CC:  MOVWF  xEC
....................     for ( i = 0; i < len; i++ ) { 
*
01546:  CLRF   xEB
01548:  MOVF   xDD,W
0154A:  SUBWF  xEB,W
0154C:  BC    1576
*
017CE:  CLRF   xEB
017D0:  MOVF   xDD,W
017D2:  SUBWF  xEB,W
017D4:  BC    17FE
....................         *data = *ptr; 
*
0154E:  MOVFF  6EC,FE9
01552:  MOVFF  6ED,FEA
01556:  MOVFF  FEF,6F0
0155A:  MOVFF  6EA,FEA
0155E:  MOVFF  6E9,FE9
01562:  MOVFF  6F0,FEF
*
017D6:  MOVFF  6EC,FE9
017DA:  MOVFF  6ED,FEA
017DE:  MOVFF  FEF,6F0
017E2:  MOVFF  6EA,FEA
017E6:  MOVFF  6E9,FE9
017EA:  MOVFF  6F0,FEF
....................         data++; 
*
01566:  INCF   xE9,F
01568:  BTFSC  FD8.2
0156A:  INCF   xEA,F
*
017EE:  INCF   xE9,F
017F0:  BTFSC  FD8.2
017F2:  INCF   xEA,F
....................         ptr++; 
*
0156C:  INCF   xEC,F
0156E:  BTFSC  FD8.2
01570:  INCF   xED,F
*
017F4:  INCF   xEC,F
017F6:  BTFSC  FD8.2
017F8:  INCF   xED,F
....................     } 
*
01572:  INCF   xEB,F
01574:  BRA    1548
*
017FA:  INCF   xEB,F
017FC:  BRA    17D0
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
01576:  MOVLW  F1
01578:  ANDWF  F6F,W
0157A:  MOVWF  F6F
*
017FE:  MOVLW  F1
01800:  ANDWF  F6F,W
01802:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
0157C:  BCF    xDE.7
0157E:  BTFSC  FA4.7
01580:  BSF    xDE.7
*
01804:  BCF    xDE.7
01806:  BTFSC  FA4.7
01808:  BSF    xDE.7
....................     CAN_INT_IRXIF = 0; 
*
01582:  BCF    FA4.7
*
0180A:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
01584:  BTFSS  xDE.4
01586:  BRA    1590
*
0180C:  BTFSS  xDE.4
0180E:  BRA    1818
....................       RXB1CON.rxful=0; 
*
01588:  MOVLB  F
0158A:  BCF    x50.7
*
01810:  MOVLB  F
01812:  BCF    x50.7
....................     } 
....................     else { 
*
0158C:  BRA    1594
0158E:  MOVLB  6
*
01814:  BRA    181C
01816:  MOVLB  6
....................       RXB0CON.rxful=0; 
*
01590:  BCF    F60.7
01592:  MOVLB  F
*
01818:  BCF    F60.7
0181A:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
01594:  MOVLW  01
01596:  MOVWF  01
*
0181C:  MOVLW  01
0181E:  MOVWF  01
01820:  MOVLB  6
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
01476:  MOVF   28,W
01478:  SUBLW  FF
0147A:  BNZ   147E
....................       can_rspoint++; 
0147C:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
0147E:  MOVF   28,W
01480:  SUBLW  09
01482:  BTFSS  FD8.0
01484:  BRA    170E
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01486:  MOVLW  06
01488:  MOVLB  6
0148A:  MOVWF  xEA
0148C:  MOVLW  DF
0148E:  MOVWF  xE9
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
01598:  MOVLB  6
0159A:  CLRF   xE8
0159C:  MOVF   xE8,F
0159E:  BNZ   15E0
....................          if(rx_id==can_filter[j]) 
015A0:  MOVF   xE8,W
015A2:  MULLW  04
015A4:  MOVF   FF3,W
015A6:  CLRF   03
015A8:  ADDLW  39
015AA:  MOVWF  FE9
015AC:  MOVLW  01
015AE:  ADDWFC 03,W
015B0:  MOVWF  FEA
015B2:  MOVFF  FEF,00
015B6:  MOVFF  FEC,01
015BA:  MOVFF  FEC,02
015BE:  MOVFF  FEC,03
015C2:  MOVF   00,W
015C4:  SUBWF  xD9,W
015C6:  BNZ   15DC
015C8:  MOVF   01,W
015CA:  SUBWF  xDA,W
015CC:  BNZ   15DC
015CE:  MOVF   02,W
015D0:  SUBWF  xDB,W
015D2:  BNZ   15DC
015D4:  MOVF   03,W
015D6:  SUBWF  xDC,W
015D8:  BNZ   15DC
....................             return; 
015DA:  BRA    1822
015DC:  INCF   xE8,F
015DE:  BRA    159C
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
015E0:  MOVF   28,W
015E2:  MULLW  0E
015E4:  MOVF   FF3,W
015E6:  CLRF   xEA
015E8:  MOVWF  xE9
015EA:  MOVLW  29
015EC:  ADDWF  xE9,W
015EE:  MOVWF  FE9
015F0:  MOVLW  00
015F2:  ADDWFC xEA,W
015F4:  MOVWF  FEA
015F6:  MOVFF  6DC,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
015FA:  MOVF   28,W
015FC:  MULLW  0E
015FE:  MOVF   FF3,W
01600:  CLRF   xEA
01602:  MOVWF  xE9
01604:  MOVLW  01
01606:  ADDWF  xE9,W
01608:  MOVWF  01
0160A:  MOVLW  00
0160C:  ADDWFC xEA,W
0160E:  MOVWF  03
01610:  MOVF   01,W
01612:  ADDLW  29
01614:  MOVWF  FE9
01616:  MOVLW  00
01618:  ADDWFC 03,W
0161A:  MOVWF  FEA
0161C:  MOVFF  6DB,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
01620:  MOVF   28,W
01622:  MULLW  0E
01624:  MOVF   FF3,W
01626:  CLRF   xEA
01628:  MOVWF  xE9
0162A:  MOVLW  02
0162C:  ADDWF  xE9,W
0162E:  MOVWF  01
01630:  MOVLW  00
01632:  ADDWFC xEA,W
01634:  MOVWF  03
01636:  MOVF   01,W
01638:  ADDLW  29
0163A:  MOVWF  FE9
0163C:  MOVLW  00
0163E:  ADDWFC 03,W
01640:  MOVWF  FEA
01642:  MOVFF  6DA,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
01646:  MOVF   28,W
01648:  MULLW  0E
0164A:  MOVF   FF3,W
0164C:  CLRF   xEA
0164E:  MOVWF  xE9
01650:  MOVLW  03
01652:  ADDWF  xE9,W
01654:  MOVWF  01
01656:  MOVLW  00
01658:  ADDWFC xEA,W
0165A:  MOVWF  03
0165C:  MOVF   01,W
0165E:  ADDLW  29
01660:  MOVWF  FE9
01662:  MOVLW  00
01664:  ADDWFC 03,W
01666:  MOVWF  FEA
01668:  MOVFF  6D9,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
0166C:  MOVF   28,W
0166E:  MULLW  0E
01670:  MOVF   FF3,W
01672:  CLRF   xEA
01674:  MOVWF  xE9
01676:  MOVLW  04
01678:  ADDWF  xE9,W
0167A:  MOVWF  01
0167C:  MOVLW  00
0167E:  ADDWFC xEA,W
01680:  MOVWF  03
01682:  MOVF   01,W
01684:  ADDLW  29
01686:  MOVWF  FE9
01688:  MOVLW  00
0168A:  ADDWFC 03,W
0168C:  MOVWF  FEA
0168E:  MOVFF  6DD,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
01692:  MOVF   28,W
01694:  MULLW  0E
01696:  MOVF   FF3,W
01698:  CLRF   xEA
0169A:  MOVWF  xE9
0169C:  MOVLW  05
0169E:  ADDWF  xE9,W
016A0:  MOVWF  01
016A2:  MOVLW  00
016A4:  ADDWFC xEA,W
016A6:  MOVWF  03
016A8:  MOVF   01,W
016AA:  ADDLW  29
016AC:  MOVWF  FE9
016AE:  MOVLW  00
016B0:  ADDWFC 03,W
016B2:  MOVWF  FEA
016B4:  MOVFF  6DE,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
016B8:  CLRF   xE7
016BA:  MOVF   xDD,W
016BC:  SUBWF  xE7,W
016BE:  BC    1708
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
016C0:  MOVF   28,W
016C2:  MULLW  0E
016C4:  MOVF   FF3,W
016C6:  CLRF   xEA
016C8:  MOVWF  xE9
016CA:  MOVLW  06
016CC:  ADDWF  xE7,W
016CE:  CLRF   03
016D0:  ADDWF  xE9,W
016D2:  MOVWF  01
016D4:  MOVF   xEA,W
016D6:  ADDWFC 03,F
016D8:  MOVF   01,W
016DA:  ADDLW  29
016DC:  MOVWF  01
016DE:  MOVLW  00
016E0:  ADDWFC 03,F
016E2:  MOVFF  03,6EA
016E6:  CLRF   03
016E8:  MOVF   xE7,W
016EA:  ADDLW  DF
016EC:  MOVWF  FE9
016EE:  MOVLW  06
016F0:  ADDWFC 03,W
016F2:  MOVWF  FEA
016F4:  MOVFF  FEF,6EB
016F8:  MOVFF  6EA,FEA
016FC:  MOVFF  01,FE9
01700:  MOVFF  6EB,FEF
....................       } 
01704:  INCF   xE7,F
01706:  BRA    16BA
....................  
....................       can_rspoint++; 
01708:  INCF   28,F
....................    } 
....................    else 
0170A:  BRA    1822
0170C:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
0170E:  MOVLW  06
01710:  MOVLB  6
01712:  MOVWF  xEA
01714:  MOVLW  DF
01716:  MOVWF  xE9
.................... } 
*
01822:  MOVLB  0
01824:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
01A58:  MOVF   xB6,W
01A5A:  SUBLW  0A
01A5C:  BNZ   1A60
....................    { 
....................       can_tspoint--; 
01A5E:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
01A60:  MOVF   xB6,W
01A62:  SUBLW  FF
01A64:  BTFSC  FD8.2
01A66:  BRA    1C6E
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
01A68:  MOVF   xB6,W
01A6A:  MULLW  0D
01A6C:  MOVF   FF3,W
01A6E:  MOVLB  6
01A70:  CLRF   xEA
01A72:  MOVWF  xE9
01A74:  MOVLW  B7
01A76:  ADDWF  xE9,W
01A78:  MOVWF  FE9
01A7A:  MOVLW  00
01A7C:  ADDWFC xEA,W
01A7E:  MOVWF  FEA
01A80:  MOVFF  FEF,6E9
01A84:  MOVLB  0
01A86:  MOVF   xB6,W
01A88:  MULLW  0D
01A8A:  MOVF   FF3,W
01A8C:  MOVLB  6
01A8E:  CLRF   xEB
01A90:  MOVWF  xEA
01A92:  MOVLW  01
01A94:  ADDWF  xEA,W
01A96:  MOVWF  01
01A98:  MOVLW  00
01A9A:  ADDWFC xEB,W
01A9C:  MOVWF  03
01A9E:  MOVF   01,W
01AA0:  ADDLW  B7
01AA2:  MOVWF  FE9
01AA4:  MOVLW  00
01AA6:  ADDWFC 03,W
01AA8:  MOVWF  FEA
01AAA:  MOVFF  FEF,6EA
01AAE:  MOVLB  0
01AB0:  MOVF   xB6,W
01AB2:  MULLW  0D
01AB4:  MOVF   FF3,W
01AB6:  MOVLB  6
01AB8:  CLRF   xEC
01ABA:  MOVWF  xEB
01ABC:  MOVLW  02
01ABE:  ADDWF  xEB,W
01AC0:  MOVWF  01
01AC2:  MOVLW  00
01AC4:  ADDWFC xEC,W
01AC6:  MOVWF  03
01AC8:  MOVF   01,W
01ACA:  ADDLW  B7
01ACC:  MOVWF  FE9
01ACE:  MOVLW  00
01AD0:  ADDWFC 03,W
01AD2:  MOVWF  FEA
01AD4:  MOVFF  FEF,6EB
01AD8:  MOVLB  0
01ADA:  MOVF   xB6,W
01ADC:  MULLW  0D
01ADE:  MOVF   FF3,W
01AE0:  MOVLB  6
01AE2:  CLRF   xED
01AE4:  MOVWF  xEC
01AE6:  MOVLW  03
01AE8:  ADDWF  xEC,W
01AEA:  MOVWF  01
01AEC:  MOVLW  00
01AEE:  ADDWFC xED,W
01AF0:  MOVWF  03
01AF2:  MOVF   01,W
01AF4:  ADDLW  B7
01AF6:  MOVWF  FE9
01AF8:  MOVLW  00
01AFA:  ADDWFC 03,W
01AFC:  MOVWF  FEA
01AFE:  MOVFF  FEF,6EC
01B02:  MOVFF  6E9,6DC
01B06:  MOVFF  6EA,6DB
01B0A:  MOVFF  6EB,6DA
01B0E:  MOVFF  6EC,6D9
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
01B12:  MOVLB  0
01B14:  MOVF   xB6,W
01B16:  MULLW  0D
01B18:  MOVF   FF3,W
01B1A:  MOVLB  6
01B1C:  CLRF   xEA
01B1E:  MOVWF  xE9
01B20:  MOVLW  0C
01B22:  ADDWF  xE9,W
01B24:  MOVWF  01
01B26:  MOVLW  00
01B28:  ADDWFC xEA,W
01B2A:  MOVWF  03
01B2C:  MOVF   01,W
01B2E:  ADDLW  B7
01B30:  MOVWF  FE9
01B32:  MOVLW  00
01B34:  ADDWFC 03,W
01B36:  MOVWF  FEA
01B38:  SWAPF  FEF,W
01B3A:  MOVWF  xDD
01B3C:  MOVLW  0F
01B3E:  ANDWF  xDD,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
01B40:  MOVLB  0
01B42:  MOVF   xB6,W
01B44:  MULLW  0D
01B46:  MOVF   FF3,W
01B48:  MOVLB  6
01B4A:  CLRF   xEA
01B4C:  MOVWF  xE9
01B4E:  MOVLW  0C
01B50:  ADDWF  xE9,W
01B52:  MOVWF  01
01B54:  MOVLW  00
01B56:  ADDWFC xEA,W
01B58:  MOVWF  03
01B5A:  MOVF   01,W
01B5C:  ADDLW  B7
01B5E:  MOVWF  FE9
01B60:  MOVLW  00
01B62:  ADDWFC 03,W
01B64:  MOVWF  FEA
01B66:  MOVF   FEF,W
01B68:  ANDLW  0C
01B6A:  MOVWF  00
01B6C:  RRCF   00,W
01B6E:  MOVWF  xDE
01B70:  RRCF   xDE,F
01B72:  MOVLW  3F
01B74:  ANDWF  xDE,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
01B76:  MOVLB  0
01B78:  MOVF   xB6,W
01B7A:  MULLW  0D
01B7C:  MOVF   FF3,W
01B7E:  MOVLB  6
01B80:  CLRF   xEA
01B82:  MOVWF  xE9
01B84:  MOVLW  0C
01B86:  ADDWF  xE9,W
01B88:  MOVWF  01
01B8A:  MOVLW  00
01B8C:  ADDWFC xEA,W
01B8E:  MOVWF  03
01B90:  MOVF   01,W
01B92:  ADDLW  B7
01B94:  MOVWF  FE9
01B96:  MOVLW  00
01B98:  ADDWFC 03,W
01B9A:  MOVWF  FEA
01B9C:  MOVFF  FEF,6E9
01BA0:  BCF    xE7.0
01BA2:  BTFSC  xE9.1
01BA4:  BSF    xE7.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01BA6:  MOVLB  0
01BA8:  MOVF   xB6,W
01BAA:  MULLW  0D
01BAC:  MOVF   FF3,W
01BAE:  MOVLB  6
01BB0:  CLRF   xEA
01BB2:  MOVWF  xE9
01BB4:  MOVLW  0C
01BB6:  ADDWF  xE9,W
01BB8:  MOVWF  01
01BBA:  MOVLW  00
01BBC:  ADDWFC xEA,W
01BBE:  MOVWF  03
01BC0:  MOVF   01,W
01BC2:  ADDLW  B7
01BC4:  MOVWF  FE9
01BC6:  MOVLW  00
01BC8:  ADDWFC 03,W
01BCA:  MOVWF  FEA
01BCC:  MOVFF  FEF,6E9
01BD0:  BCF    xE7.1
01BD2:  BTFSC  xE9.0
01BD4:  BSF    xE7.1
....................  
....................       for(i=0;i<tx_length;i++) 
01BD6:  CLRF   xE8
01BD8:  MOVF   xDD,W
01BDA:  SUBWF  xE8,W
01BDC:  BC    1C2E
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01BDE:  CLRF   03
01BE0:  MOVF   xE8,W
01BE2:  ADDLW  DF
01BE4:  MOVWF  01
01BE6:  MOVLW  06
01BE8:  ADDWFC 03,F
01BEA:  MOVFF  01,6E9
01BEE:  MOVFF  03,6EA
01BF2:  MOVLB  0
01BF4:  MOVF   xB6,W
01BF6:  MULLW  0D
01BF8:  MOVF   FF3,W
01BFA:  MOVLB  6
01BFC:  CLRF   xEC
01BFE:  MOVWF  xEB
01C00:  MOVLW  04
01C02:  ADDWF  xE8,W
01C04:  CLRF   03
01C06:  ADDWF  xEB,W
01C08:  MOVWF  01
01C0A:  MOVF   xEC,W
01C0C:  ADDWFC 03,F
01C0E:  MOVF   01,W
01C10:  ADDLW  B7
01C12:  MOVWF  FE9
01C14:  MOVLW  00
01C16:  ADDWFC 03,W
01C18:  MOVWF  FEA
01C1A:  MOVFF  FEF,6EB
01C1E:  MOVFF  6EA,FEA
01C22:  MOVFF  6E9,FE9
01C26:  MOVFF  6EB,FEF
....................       } 
01C2A:  INCF   xE8,F
01C2C:  BRA    1BD8
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01C2E:  MOVLW  00
01C30:  BTFSC  xE7.0
01C32:  MOVLW  01
01C34:  MOVWF  xE9
01C36:  MOVLW  00
01C38:  BTFSC  xE7.1
01C3A:  MOVLW  01
01C3C:  MOVWF  xEA
01C3E:  MOVFF  6DC,6EE
01C42:  MOVFF  6DB,6ED
01C46:  MOVFF  6DA,6EC
01C4A:  MOVFF  6D9,6EB
01C4E:  MOVLW  06
01C50:  MOVWF  xF0
01C52:  MOVLW  DF
01C54:  MOVWF  xEF
01C56:  MOVFF  6DD,6F1
01C5A:  MOVFF  6DE,6F2
01C5E:  MOVFF  6E9,6F3
01C62:  MOVFF  6EA,6F4
01C66:  MOVLB  0
01C68:  BRA    1986
....................  
....................       can_tspoint--; 
01C6A:  DECF   xB6,F
....................    } 
....................    else 
01C6C:  BRA    1C70
....................       return; 
01C6E:  BRA    1C70
.................... } 
01C70:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... #define DEBUG TRUE 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
027BA:  MOVLB  6
027BC:  CLRF   xD5
027BE:  MOVF   xD4,W
027C0:  SUBWF  xD5,W
027C2:  BC    27F6
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
027C4:  CLRF   03
027C6:  MOVF   xD5,W
027C8:  ADDWF  xD2,W
027CA:  MOVWF  01
027CC:  MOVF   xD3,W
027CE:  ADDWFC 03,F
027D0:  MOVFF  03,6D7
027D4:  MOVFF  6D0,FE9
027D8:  MOVFF  6D1,FEA
027DC:  MOVFF  FEF,6D8
027E0:  MOVFF  6D7,FEA
027E4:  MOVFF  01,FE9
027E8:  MOVFF  6D8,FEF
....................       ++origin; 
027EC:  INCF   xD0,F
027EE:  BTFSC  FD8.2
027F0:  INCF   xD1,F
....................    } 
027F2:  INCF   xD5,F
027F4:  BRA    27BE
.................... } 
027F6:  MOVLB  0
027F8:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
02542:  MOVLB  6
02544:  MOVFF  6C1,FE9
02548:  MOVFF  6C2,FEA
0254C:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
0254E:  MOVLW  01
02550:  ADDWF  xC1,W
02552:  MOVWF  01
02554:  MOVLW  00
02556:  ADDWFC xC2,W
02558:  MOVFF  01,FE9
0255C:  MOVWF  FEA
0255E:  MOVFF  6BE,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
02562:  MOVLW  01
02564:  ADDWF  xC1,W
02566:  MOVWF  01
02568:  MOVLW  00
0256A:  ADDWFC xC2,W
0256C:  MOVWF  03
0256E:  MOVF   01,W
02570:  ADDLW  03
02572:  MOVWF  FE9
02574:  MOVLW  00
02576:  ADDWFC 03,W
02578:  MOVWF  FEA
0257A:  MOVFF  6BF,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
0257E:  MOVLW  01
02580:  ADDWF  xC1,W
02582:  MOVWF  01
02584:  MOVLW  00
02586:  ADDWFC xC2,W
02588:  MOVWF  03
0258A:  MOVF   01,W
0258C:  ADDLW  06
0258E:  MOVWF  FE9
02590:  MOVLW  00
02592:  ADDWFC 03,W
02594:  MOVWF  FEA
02596:  MOVFF  6C0,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
0259A:  MOVLW  01
0259C:  ADDWF  xC1,W
0259E:  MOVWF  01
025A0:  MOVLW  00
025A2:  ADDWFC xC2,W
025A4:  MOVWF  03
025A6:  MOVF   01,W
025A8:  ADDLW  0E
025AA:  MOVWF  FE9
025AC:  MOVLW  00
025AE:  ADDWFC 03,W
025B0:  MOVWF  FEA
025B2:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
025B4:  MOVLW  01
025B6:  ADDWF  xC1,W
025B8:  MOVWF  01
025BA:  MOVLW  00
025BC:  ADDWFC xC2,W
025BE:  MOVWF  03
025C0:  MOVF   01,W
025C2:  ADDLW  0F
025C4:  MOVWF  FE9
025C6:  MOVLW  00
025C8:  ADDWFC 03,W
025CA:  MOVWF  FEA
025CC:  MOVLW  01
025CE:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
025D0:  ADDWF  xC1,W
025D2:  MOVWF  01
025D4:  MOVLW  00
025D6:  ADDWFC xC2,W
025D8:  MOVWF  03
025DA:  MOVF   01,W
025DC:  ADDLW  09
025DE:  MOVWF  FE9
025E0:  MOVLW  00
025E2:  ADDWFC 03,W
025E4:  MOVWF  FEA
025E6:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
025E8:  MOVLW  01
025EA:  ADDWF  xC1,W
025EC:  MOVWF  01
025EE:  MOVLW  00
025F0:  ADDWFC xC2,W
025F2:  MOVWF  03
025F4:  MOVF   01,W
025F6:  ADDLW  0E
025F8:  MOVWF  FE9
025FA:  MOVLW  00
025FC:  ADDWFC 03,W
025FE:  MOVWF  FEA
02600:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
02602:  MOVLW  01
02604:  ADDWF  xC1,W
02606:  MOVWF  01
02608:  MOVLW  00
0260A:  ADDWFC xC2,W
0260C:  MOVWF  03
0260E:  MOVF   01,W
02610:  ADDLW  02
02612:  MOVWF  FE9
02614:  MOVLW  00
02616:  ADDWFC 03,W
02618:  MOVWF  FEA
0261A:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
0261C:  MOVLW  01
0261E:  ADDWF  xC1,W
02620:  MOVWF  01
02622:  MOVLW  00
02624:  ADDWFC xC2,W
02626:  MOVWF  03
02628:  MOVF   01,W
0262A:  ADDLW  05
0262C:  MOVWF  FE9
0262E:  MOVLW  00
02630:  ADDWFC 03,W
02632:  MOVWF  FEA
02634:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
02636:  MOVLW  01
02638:  ADDWF  xC1,W
0263A:  MOVWF  01
0263C:  MOVLW  00
0263E:  ADDWFC xC2,W
02640:  MOVWF  03
02642:  MOVF   01,W
02644:  ADDLW  08
02646:  MOVWF  FE9
02648:  MOVLW  00
0264A:  ADDWFC 03,W
0264C:  MOVWF  FEA
0264E:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
02650:  MOVLW  01
02652:  ADDWF  xC1,W
02654:  MOVWF  01
02656:  MOVLW  00
02658:  ADDWFC xC2,W
0265A:  MOVWF  03
0265C:  MOVF   01,W
0265E:  ADDLW  01
02660:  MOVWF  FE9
02662:  MOVLW  00
02664:  ADDWFC 03,W
02666:  MOVWF  FEA
02668:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
0266A:  MOVLW  01
0266C:  ADDWF  xC1,W
0266E:  MOVWF  01
02670:  MOVLW  00
02672:  ADDWFC xC2,W
02674:  MOVWF  03
02676:  MOVF   01,W
02678:  ADDLW  04
0267A:  MOVWF  FE9
0267C:  MOVLW  00
0267E:  ADDWFC 03,W
02680:  MOVWF  FEA
02682:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
02684:  MOVLW  01
02686:  ADDWF  xC1,W
02688:  MOVWF  01
0268A:  MOVLW  00
0268C:  ADDWFC xC2,W
0268E:  MOVWF  03
02690:  MOVF   01,W
02692:  ADDLW  07
02694:  MOVWF  FE9
02696:  MOVLW  00
02698:  ADDWFC 03,W
0269A:  MOVWF  FEA
0269C:  MOVLW  01
0269E:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
026A0:  ADDWF  xC1,W
026A2:  MOVWF  01
026A4:  MOVLW  00
026A6:  ADDWFC xC2,W
026A8:  MOVWF  03
026AA:  MOVF   01,W
026AC:  ADDLW  10
026AE:  MOVWF  01
026B0:  MOVLW  00
026B2:  ADDWFC 03,F
026B4:  MOVFF  03,6C7
026B8:  CLRF   03
026BA:  MOVF   xC3,W
026BC:  ADDLW  1C
026BE:  MOVWF  FE9
026C0:  MOVLW  00
026C2:  ADDWFC 03,W
026C4:  MOVWF  FEA
026C6:  MOVFF  FEF,6C8
026CA:  MOVFF  6C7,FEA
026CE:  MOVFF  01,FE9
026D2:  MOVFF  6C8,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
026D6:  MOVLW  01
026D8:  ADDWF  xC1,W
026DA:  MOVWF  01
026DC:  MOVLW  00
026DE:  ADDWFC xC2,W
026E0:  MOVWF  03
026E2:  MOVF   01,W
026E4:  ADDLW  0A
026E6:  MOVWF  FE9
026E8:  MOVLW  00
026EA:  ADDWFC 03,W
026EC:  MOVWF  FEA
026EE:  MOVF   FEE,F
026F0:  MOVF   FEE,F
026F2:  CLRF   FEC
026F4:  MOVF   FED,F
026F6:  CLRF   FEF
026F8:  MOVF   FED,F
026FA:  CLRF   FEF
026FC:  MOVF   FED,F
026FE:  CLRF   FEF
.................... } 
02700:  MOVLB  0
02702:  GOTO   315A (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
024E8:  MOVLB  6
024EA:  MOVFF  6C0,FE9
024EE:  MOVFF  6C1,FEA
024F2:  MOVLW  01
024F4:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
024F6:  MOVFF  6BE,6C3
....................       sw.off.adress=off_adr; 
024FA:  MOVFF  6BF,6C6
....................       sw.previous_state=button_depressed; 
024FE:  BSF    xC9.1
....................       sw.outstate=off; 
02500:  MOVWF  xCE
....................       sw.on.needs_update=0; 
02502:  BCF    xC5.0
....................       sw.off.needs_update=0; 
02504:  BCF    xC8.0
....................       sw.on.value=0; 
02506:  CLRF   xC4
....................       sw.off.value=0; 
02508:  CLRF   xC7
....................       sw.realbutton=inputs[real_button]; 
0250A:  CLRF   03
0250C:  MOVF   xC2,W
0250E:  ADDLW  1C
02510:  MOVWF  FE9
02512:  MOVLW  00
02514:  ADDWFC 03,W
02516:  MOVWF  FEA
02518:  MOVFF  FEF,6CF
....................       input->device=sw; 
0251C:  MOVLW  01
0251E:  ADDWF  xC0,W
02520:  MOVWF  FE9
02522:  MOVLW  00
02524:  ADDWFC xC1,W
02526:  MOVWF  FEA
02528:  MOVLW  06
0252A:  MOVWF  FE2
0252C:  MOVLW  C3
0252E:  MOVWF  FE1
02530:  MOVLW  20
02532:  MOVWF  01
02534:  MOVFF  FE6,FEE
02538:  DECFSZ 01,F
0253A:  BRA    2534
.................... } 
0253C:  MOVLB  0
0253E:  GOTO   3026 (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
02706:  MOVLB  6
02708:  MOVFF  6C1,FE9
0270C:  MOVFF  6C2,FEA
02710:  MOVLW  02
02712:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
02714:  MOVFF  6BF,6C5
....................       sw.off.adress=off_adr; 
02718:  MOVFF  6C0,6C8
....................       sw.previous_state=button_depressed; 
0271C:  BSF    xCB.1
....................       sw.outstate=off; 
0271E:  MOVLW  01
02720:  MOVWF  xCC
....................       sw.on.needs_update=0; 
02722:  BCF    xC7.0
....................       sw.off.needs_update=0; 
02724:  BCF    xCA.0
....................       sw.on.value=0; 
02726:  CLRF   xC6
....................       sw.off.value=0; 
02728:  CLRF   xC9
....................       sw.repeat=repeat; 
0272A:  BCF    xCD.0
0272C:  BTFSC  xC4.0
0272E:  BSF    xCD.0
....................       sw.realbutton=inputs[real_button]; 
02730:  CLRF   03
02732:  MOVF   xC3,W
02734:  ADDLW  1C
02736:  MOVWF  FE9
02738:  MOVLW  00
0273A:  ADDWFC 03,W
0273C:  MOVWF  FEA
0273E:  MOVFF  FEF,6CE
....................       input->device=sw; 
02742:  MOVLW  01
02744:  ADDWF  xC1,W
02746:  MOVWF  FE9
02748:  MOVLW  00
0274A:  ADDWFC xC2,W
0274C:  MOVWF  FEA
0274E:  MOVLW  06
02750:  MOVWF  FE2
02752:  MOVLW  C5
02754:  MOVWF  FE1
02756:  MOVLW  20
02758:  MOVWF  01
0275A:  MOVFF  FE6,FEE
0275E:  DECFSZ 01,F
02760:  BRA    275A
.................... } 
02762:  MOVLB  0
02764:  GOTO   3298 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
029F0:  MOVLB  6
029F2:  MOVFF  6C4,FE9
029F6:  MOVFF  6C5,FEA
029FA:  MOVLW  65
029FC:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
029FE:  MOVLW  01
02A00:  ADDWF  xC4,W
02A02:  MOVWF  01
02A04:  MOVLW  00
02A06:  ADDWFC xC5,W
02A08:  MOVWF  03
02A0A:  MOVF   01,W
02A0C:  ADDLW  1D
02A0E:  MOVWF  FE9
02A10:  MOVLW  00
02A12:  ADDWFC 03,W
02A14:  MOVWF  FEA
02A16:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
02A18:  MOVLW  01
02A1A:  ADDWF  xC4,W
02A1C:  MOVWF  01
02A1E:  MOVLW  00
02A20:  ADDWFC xC5,W
02A22:  MOVWF  03
02A24:  MOVF   01,W
02A26:  ADDLW  09
02A28:  MOVWF  FE9
02A2A:  MOVLW  00
02A2C:  ADDWFC 03,W
02A2E:  MOVWF  FEA
02A30:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02A32:  MOVLW  01
02A34:  ADDWF  xC4,W
02A36:  MOVWF  01
02A38:  MOVLW  00
02A3A:  ADDWFC xC5,W
02A3C:  MOVWF  03
02A3E:  MOVF   01,W
02A40:  ADDLW  13
02A42:  MOVWF  FE9
02A44:  MOVLW  00
02A46:  ADDWFC 03,W
02A48:  MOVWF  FEA
02A4A:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
02A4C:  MOVLW  01
02A4E:  ADDWF  xC4,W
02A50:  MOVWF  01
02A52:  MOVLW  00
02A54:  ADDWFC xC5,W
02A56:  MOVWF  03
02A58:  MOVF   01,W
02A5A:  ADDLW  1C
02A5C:  MOVWF  FE9
02A5E:  MOVLW  00
02A60:  ADDWFC 03,W
02A62:  MOVWF  FEA
02A64:  MOVLW  7F
02A66:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
02A68:  MOVLW  01
02A6A:  ADDWF  xC4,W
02A6C:  MOVWF  01
02A6E:  MOVLW  00
02A70:  ADDWFC xC5,W
02A72:  MOVWF  03
02A74:  MOVF   01,W
02A76:  ADDLW  08
02A78:  MOVWF  FE9
02A7A:  MOVLW  00
02A7C:  ADDWFC 03,W
02A7E:  MOVWF  FEA
02A80:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
02A82:  MOVLW  01
02A84:  ADDWF  xC4,W
02A86:  MOVWF  01
02A88:  MOVLW  00
02A8A:  ADDWFC xC5,W
02A8C:  MOVWF  03
02A8E:  MOVF   01,W
02A90:  ADDLW  12
02A92:  MOVWF  FE9
02A94:  MOVLW  00
02A96:  ADDWFC 03,W
02A98:  MOVWF  FEA
02A9A:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
02A9C:  MOVLW  01
02A9E:  ADDWF  xC4,W
02AA0:  MOVWF  01
02AA2:  MOVLW  00
02AA4:  ADDWFC xC5,W
02AA6:  MOVWF  03
02AA8:  MOVF   01,W
02AAA:  ADDLW  1F
02AAC:  MOVWF  FE9
02AAE:  MOVLW  00
02AB0:  ADDWFC 03,W
02AB2:  MOVWF  FEA
02AB4:  MOVFF  6C6,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
02AB8:  MOVLW  01
02ABA:  ADDWF  xC4,W
02ABC:  MOVWF  01
02ABE:  MOVLW  00
02AC0:  ADDWFC xC5,W
02AC2:  MOVWF  03
02AC4:  MOVF   01,W
02AC6:  ADDLW  14
02AC8:  MOVWF  01
02ACA:  MOVLW  00
02ACC:  ADDWFC 03,F
02ACE:  MOVFF  01,6C9
02AD2:  MOVFF  03,6CA
02AD6:  MOVFF  6BF,6D1
02ADA:  MOVFF  6BE,6D0
02ADE:  MOVFF  03,6D3
02AE2:  MOVFF  01,6D2
02AE6:  MOVLW  08
02AE8:  MOVWF  xD4
02AEA:  MOVLB  0
02AEC:  RCALL  27BA
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
02AEE:  MOVLW  01
02AF0:  MOVLB  6
02AF2:  ADDWF  xC4,W
02AF4:  MOVWF  01
02AF6:  MOVLW  00
02AF8:  ADDWFC xC5,W
02AFA:  MOVWF  03
02AFC:  MOVFF  01,6C9
02B00:  MOVWF  xCA
02B02:  MOVFF  6C1,6D1
02B06:  MOVFF  6C0,6D0
02B0A:  MOVWF  xD3
02B0C:  MOVFF  01,6D2
02B10:  MOVLW  08
02B12:  MOVWF  xD4
02B14:  MOVLB  0
02B16:  RCALL  27BA
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
02B18:  MOVLW  01
02B1A:  MOVLB  6
02B1C:  ADDWF  xC4,W
02B1E:  MOVWF  01
02B20:  MOVLW  00
02B22:  ADDWFC xC5,W
02B24:  MOVWF  03
02B26:  MOVF   01,W
02B28:  ADDLW  0A
02B2A:  MOVWF  01
02B2C:  MOVLW  00
02B2E:  ADDWFC 03,F
02B30:  MOVFF  01,6C9
02B34:  MOVFF  03,6CA
02B38:  MOVFF  6C3,6D1
02B3C:  MOVFF  6C2,6D0
02B40:  MOVFF  03,6D3
02B44:  MOVFF  01,6D2
02B48:  MOVLW  08
02B4A:  MOVWF  xD4
02B4C:  MOVLB  0
02B4E:  RCALL  27BA
....................    ((struct light)output->device).out_state=_off; 
02B50:  MOVLW  01
02B52:  MOVLB  6
02B54:  ADDWF  xC4,W
02B56:  MOVWF  01
02B58:  MOVLW  00
02B5A:  ADDWFC xC5,W
02B5C:  MOVWF  03
02B5E:  MOVF   01,W
02B60:  ADDLW  1E
02B62:  MOVWF  FE9
02B64:  MOVLW  00
02B66:  ADDWFC 03,W
02B68:  MOVWF  FEA
02B6A:  MOVLW  01
02B6C:  MOVWF  FEF
.................... } 
02B6E:  MOVLB  0
02B70:  GOTO   358C (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02DB6:  MOVLB  6
02DB8:  MOVFF  6C2,FE9
02DBC:  MOVFF  6C3,FEA
02DC0:  MOVLW  64
02DC2:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
02DC4:  MOVLW  01
02DC6:  ADDWF  xC2,W
02DC8:  MOVWF  01
02DCA:  MOVLW  00
02DCC:  ADDWFC xC3,W
02DCE:  MOVWF  03
02DD0:  MOVF   01,W
02DD2:  ADDLW  09
02DD4:  MOVWF  FE9
02DD6:  MOVLW  00
02DD8:  ADDWFC 03,W
02DDA:  MOVWF  FEA
02DDC:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
02DDE:  MOVLW  01
02DE0:  ADDWF  xC2,W
02DE2:  MOVWF  01
02DE4:  MOVLW  00
02DE6:  ADDWFC xC3,W
02DE8:  MOVWF  03
02DEA:  MOVF   01,W
02DEC:  ADDLW  13
02DEE:  MOVWF  FE9
02DF0:  MOVLW  00
02DF2:  ADDWFC 03,W
02DF4:  MOVWF  FEA
02DF6:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
02DF8:  MOVLW  01
02DFA:  ADDWF  xC2,W
02DFC:  MOVWF  01
02DFE:  MOVLW  00
02E00:  ADDWFC xC3,W
02E02:  MOVWF  03
02E04:  MOVF   01,W
02E06:  ADDLW  08
02E08:  MOVWF  FE9
02E0A:  MOVLW  00
02E0C:  ADDWFC 03,W
02E0E:  MOVWF  FEA
02E10:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
02E12:  MOVLW  01
02E14:  ADDWF  xC2,W
02E16:  MOVWF  01
02E18:  MOVLW  00
02E1A:  ADDWFC xC3,W
02E1C:  MOVWF  03
02E1E:  MOVF   01,W
02E20:  ADDLW  12
02E22:  MOVWF  FE9
02E24:  MOVLW  00
02E26:  ADDWFC 03,W
02E28:  MOVWF  FEA
02E2A:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02E2C:  MOVLW  01
02E2E:  ADDWF  xC2,W
02E30:  MOVWF  01
02E32:  MOVLW  00
02E34:  ADDWFC xC3,W
02E36:  MOVWF  03
02E38:  MOVF   01,W
02E3A:  ADDLW  14
02E3C:  MOVWF  FE9
02E3E:  MOVLW  00
02E40:  ADDWFC 03,W
02E42:  MOVWF  FEA
02E44:  MOVFF  6C4,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02E48:  MOVLW  01
02E4A:  ADDWF  xC2,W
02E4C:  MOVWF  01
02E4E:  MOVLW  00
02E50:  ADDWFC xC3,W
02E52:  MOVWF  03
02E54:  MOVFF  01,6C7
02E58:  MOVWF  xC8
02E5A:  MOVFF  6BF,6D1
02E5E:  MOVFF  6BE,6D0
02E62:  MOVWF  xD3
02E64:  MOVFF  01,6D2
02E68:  MOVLW  08
02E6A:  MOVWF  xD4
02E6C:  MOVLB  0
02E6E:  RCALL  27BA
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02E70:  MOVLW  01
02E72:  MOVLB  6
02E74:  ADDWF  xC2,W
02E76:  MOVWF  01
02E78:  MOVLW  00
02E7A:  ADDWFC xC3,W
02E7C:  MOVWF  03
02E7E:  MOVF   01,W
02E80:  ADDLW  0A
02E82:  MOVWF  01
02E84:  MOVLW  00
02E86:  ADDWFC 03,F
02E88:  MOVFF  01,6C7
02E8C:  MOVFF  03,6C8
02E90:  MOVFF  6C1,6D1
02E94:  MOVFF  6C0,6D0
02E98:  MOVFF  03,6D3
02E9C:  MOVFF  01,6D2
02EA0:  MOVLW  08
02EA2:  MOVWF  xD4
02EA4:  MOVLB  0
02EA6:  RCALL  27BA
.................... } 
02EA8:  GOTO   3878 (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
02B74:  MOVLB  6
02B76:  MOVFF  6C6,FE9
02B7A:  MOVFF  6C7,FEA
02B7E:  MOVLW  66
02B80:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
02B82:  MOVLW  01
02B84:  ADDWF  xC6,W
02B86:  MOVWF  01
02B88:  MOVLW  00
02B8A:  ADDWFC xC7,W
02B8C:  MOVWF  03
02B8E:  MOVF   01,W
02B90:  ADDLW  09
02B92:  MOVWF  FE9
02B94:  MOVLW  00
02B96:  ADDWFC 03,W
02B98:  MOVWF  FEA
02B9A:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
02B9C:  MOVLW  01
02B9E:  ADDWF  xC6,W
02BA0:  MOVWF  01
02BA2:  MOVLW  00
02BA4:  ADDWFC xC7,W
02BA6:  MOVWF  03
02BA8:  MOVF   01,W
02BAA:  ADDLW  13
02BAC:  MOVWF  FE9
02BAE:  MOVLW  00
02BB0:  ADDWFC 03,W
02BB2:  MOVWF  FEA
02BB4:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
02BB6:  MOVLW  01
02BB8:  ADDWF  xC6,W
02BBA:  MOVWF  01
02BBC:  MOVLW  00
02BBE:  ADDWFC xC7,W
02BC0:  MOVWF  03
02BC2:  MOVF   01,W
02BC4:  ADDLW  08
02BC6:  MOVWF  FE9
02BC8:  MOVLW  00
02BCA:  ADDWFC 03,W
02BCC:  MOVWF  FEA
02BCE:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
02BD0:  MOVLW  01
02BD2:  ADDWF  xC6,W
02BD4:  MOVWF  01
02BD6:  MOVLW  00
02BD8:  ADDWFC xC7,W
02BDA:  MOVWF  03
02BDC:  MOVF   01,W
02BDE:  ADDLW  12
02BE0:  MOVWF  FE9
02BE2:  MOVLW  00
02BE4:  ADDWFC 03,W
02BE6:  MOVWF  FEA
02BE8:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
02BEA:  MOVLW  01
02BEC:  ADDWF  xC6,W
02BEE:  MOVWF  01
02BF0:  MOVLW  00
02BF2:  ADDWFC xC7,W
02BF4:  MOVWF  03
02BF6:  MOVF   01,W
02BF8:  ADDLW  1D
02BFA:  MOVWF  FE9
02BFC:  MOVLW  00
02BFE:  ADDWFC 03,W
02C00:  MOVWF  FEA
02C02:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
02C04:  MOVLW  01
02C06:  ADDWF  xC6,W
02C08:  MOVWF  01
02C0A:  MOVLW  00
02C0C:  ADDWFC xC7,W
02C0E:  MOVWF  03
02C10:  MOVF   01,W
02C12:  ADDLW  27
02C14:  MOVWF  FE9
02C16:  MOVLW  00
02C18:  ADDWFC 03,W
02C1A:  MOVWF  FEA
02C1C:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
02C1E:  MOVLW  01
02C20:  ADDWF  xC6,W
02C22:  MOVWF  01
02C24:  MOVLW  00
02C26:  ADDWFC xC7,W
02C28:  MOVWF  03
02C2A:  MOVF   01,W
02C2C:  ADDLW  1C
02C2E:  MOVWF  FE9
02C30:  MOVLW  00
02C32:  ADDWFC 03,W
02C34:  MOVWF  FEA
02C36:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
02C38:  MOVLW  01
02C3A:  ADDWF  xC6,W
02C3C:  MOVWF  01
02C3E:  MOVLW  00
02C40:  ADDWFC xC7,W
02C42:  MOVWF  03
02C44:  MOVF   01,W
02C46:  ADDLW  26
02C48:  MOVWF  FE9
02C4A:  MOVLW  00
02C4C:  ADDWFC 03,W
02C4E:  MOVWF  FEA
02C50:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
02C52:  MOVLW  01
02C54:  ADDWF  xC6,W
02C56:  MOVWF  01
02C58:  MOVLW  00
02C5A:  ADDWFC xC7,W
02C5C:  MOVWF  03
02C5E:  MOVF   01,W
02C60:  ADDLW  28
02C62:  MOVWF  FE9
02C64:  MOVLW  00
02C66:  ADDWFC 03,W
02C68:  MOVWF  FEA
02C6A:  MOVFF  6C8,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
02C6E:  MOVLW  01
02C70:  ADDWF  xC6,W
02C72:  MOVWF  01
02C74:  MOVLW  00
02C76:  ADDWFC xC7,W
02C78:  MOVWF  03
02C7A:  MOVF   01,W
02C7C:  ADDLW  29
02C7E:  MOVWF  FE9
02C80:  MOVLW  00
02C82:  ADDWFC 03,W
02C84:  MOVWF  FEA
02C86:  MOVFF  6C9,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
02C8A:  MOVLW  01
02C8C:  ADDWF  xC6,W
02C8E:  MOVWF  01
02C90:  MOVLW  00
02C92:  ADDWFC xC7,W
02C94:  MOVWF  03
02C96:  MOVF   01,W
02C98:  ADDLW  2B
02C9A:  MOVWF  FE9
02C9C:  MOVLW  00
02C9E:  ADDWFC 03,W
02CA0:  MOVWF  FEA
02CA2:  MOVFF  6CB,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
02CA6:  MOVLW  01
02CA8:  ADDWF  xC6,W
02CAA:  MOVWF  01
02CAC:  MOVLW  00
02CAE:  ADDWFC xC7,W
02CB0:  MOVWF  03
02CB2:  MOVF   01,W
02CB4:  ADDLW  2C
02CB6:  MOVWF  FE9
02CB8:  MOVLW  00
02CBA:  ADDWFC 03,W
02CBC:  MOVWF  FEA
02CBE:  MOVFF  6CA,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
02CC2:  MOVLW  01
02CC4:  ADDWF  xC6,W
02CC6:  MOVWF  01
02CC8:  MOVLW  00
02CCA:  ADDWFC xC7,W
02CCC:  MOVWF  03
02CCE:  MOVFF  01,6CE
02CD2:  MOVWF  xCF
02CD4:  MOVFF  6BF,6D1
02CD8:  MOVFF  6BE,6D0
02CDC:  MOVWF  xD3
02CDE:  MOVFF  01,6D2
02CE2:  MOVLW  08
02CE4:  MOVWF  xD4
02CE6:  MOVLB  0
02CE8:  RCALL  27BA
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
02CEA:  MOVLW  01
02CEC:  MOVLB  6
02CEE:  ADDWF  xC6,W
02CF0:  MOVWF  01
02CF2:  MOVLW  00
02CF4:  ADDWFC xC7,W
02CF6:  MOVWF  03
02CF8:  MOVF   01,W
02CFA:  ADDLW  0A
02CFC:  MOVWF  01
02CFE:  MOVLW  00
02D00:  ADDWFC 03,F
02D02:  MOVFF  01,6CE
02D06:  MOVFF  03,6CF
02D0A:  MOVFF  6C1,6D1
02D0E:  MOVFF  6C0,6D0
02D12:  MOVFF  03,6D3
02D16:  MOVFF  01,6D2
02D1A:  MOVLW  08
02D1C:  MOVWF  xD4
02D1E:  MOVLB  0
02D20:  RCALL  27BA
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02D22:  MOVLW  01
02D24:  MOVLB  6
02D26:  ADDWF  xC6,W
02D28:  MOVWF  01
02D2A:  MOVLW  00
02D2C:  ADDWFC xC7,W
02D2E:  MOVWF  03
02D30:  MOVF   01,W
02D32:  ADDLW  14
02D34:  MOVWF  01
02D36:  MOVLW  00
02D38:  ADDWFC 03,F
02D3A:  MOVFF  01,6CE
02D3E:  MOVFF  03,6CF
02D42:  MOVFF  6C3,6D1
02D46:  MOVFF  6C2,6D0
02D4A:  MOVFF  03,6D3
02D4E:  MOVFF  01,6D2
02D52:  MOVLW  08
02D54:  MOVWF  xD4
02D56:  MOVLB  0
02D58:  RCALL  27BA
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
02D5A:  MOVLW  01
02D5C:  MOVLB  6
02D5E:  ADDWF  xC6,W
02D60:  MOVWF  01
02D62:  MOVLW  00
02D64:  ADDWFC xC7,W
02D66:  MOVWF  03
02D68:  MOVF   01,W
02D6A:  ADDLW  1E
02D6C:  MOVWF  01
02D6E:  MOVLW  00
02D70:  ADDWFC 03,F
02D72:  MOVFF  01,6CE
02D76:  MOVFF  03,6CF
02D7A:  MOVFF  6C5,6D1
02D7E:  MOVFF  6C4,6D0
02D82:  MOVFF  03,6D3
02D86:  MOVFF  01,6D2
02D8A:  MOVLW  08
02D8C:  MOVWF  xD4
02D8E:  MOVLB  0
02D90:  RCALL  27BA
....................    ((struct shutter)output->device).state=idle; 
02D92:  MOVLW  01
02D94:  MOVLB  6
02D96:  ADDWF  xC6,W
02D98:  MOVWF  01
02D9A:  MOVLW  00
02D9C:  ADDWFC xC7,W
02D9E:  MOVWF  03
02DA0:  MOVF   01,W
02DA2:  ADDLW  2D
02DA4:  MOVWF  FE9
02DA6:  MOVLW  00
02DA8:  ADDWFC 03,W
02DAA:  MOVWF  FEA
02DAC:  MOVLW  04
02DAE:  MOVWF  FEF
.................... } 
02DB0:  MOVLB  0
02DB2:  GOTO   3770 (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
027FA:  MOVLB  6
027FC:  MOVFF  6C4,FE9
02800:  MOVFF  6C5,FEA
02804:  MOVLW  03
02806:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
02808:  MOVLW  01
0280A:  ADDWF  xC4,W
0280C:  MOVWF  01
0280E:  MOVLW  00
02810:  ADDWFC xC5,W
02812:  MOVWF  03
02814:  MOVF   01,W
02816:  ADDLW  05
02818:  MOVWF  FE9
0281A:  MOVLW  00
0281C:  ADDWFC 03,W
0281E:  MOVWF  FEA
02820:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02822:  MOVLW  01
02824:  ADDWF  xC4,W
02826:  MOVWF  01
02828:  MOVLW  00
0282A:  ADDWFC xC5,W
0282C:  MOVWF  03
0282E:  MOVF   01,W
02830:  ADDLW  08
02832:  MOVWF  FE9
02834:  MOVLW  00
02836:  ADDWFC 03,W
02838:  MOVWF  FEA
0283A:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
0283C:  MOVLW  01
0283E:  ADDWF  xC4,W
02840:  MOVWF  01
02842:  MOVLW  00
02844:  ADDWFC xC5,W
02846:  MOVWF  03
02848:  MOVF   01,W
0284A:  ADDLW  04
0284C:  MOVWF  FE9
0284E:  MOVLW  00
02850:  ADDWFC 03,W
02852:  MOVWF  FEA
02854:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
02856:  MOVLW  01
02858:  ADDWF  xC4,W
0285A:  MOVWF  01
0285C:  MOVLW  00
0285E:  ADDWFC xC5,W
02860:  MOVWF  03
02862:  MOVF   01,W
02864:  ADDLW  07
02866:  MOVWF  FE9
02868:  MOVLW  00
0286A:  ADDWFC 03,W
0286C:  MOVWF  FEA
0286E:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
02870:  MOVLW  01
02872:  ADDWF  xC4,W
02874:  MOVWF  01
02876:  MOVLW  00
02878:  ADDWFC xC5,W
0287A:  MOVWF  03
0287C:  MOVF   01,W
0287E:  ADDLW  12
02880:  MOVWF  FE9
02882:  MOVLW  00
02884:  ADDWFC 03,W
02886:  MOVWF  FEA
02888:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
0288A:  MOVLW  01
0288C:  ADDWF  xC4,W
0288E:  MOVWF  01
02890:  MOVLW  00
02892:  ADDWFC xC5,W
02894:  MOVWF  03
02896:  MOVF   01,W
02898:  ADDLW  1C
0289A:  MOVWF  FE9
0289C:  MOVLW  00
0289E:  ADDWFC 03,W
028A0:  MOVWF  FEA
028A2:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
028A4:  MOVLW  01
028A6:  ADDWF  xC4,W
028A8:  MOVWF  01
028AA:  MOVLW  00
028AC:  ADDWFC xC5,W
028AE:  MOVWF  03
028B0:  MOVF   01,W
028B2:  ADDLW  11
028B4:  MOVWF  FE9
028B6:  MOVLW  00
028B8:  ADDWFC 03,W
028BA:  MOVWF  FEA
028BC:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
028BE:  MOVLW  01
028C0:  ADDWF  xC4,W
028C2:  MOVWF  01
028C4:  MOVLW  00
028C6:  ADDWFC xC5,W
028C8:  MOVWF  03
028CA:  MOVF   01,W
028CC:  ADDLW  1B
028CE:  MOVWF  FE9
028D0:  MOVLW  00
028D2:  ADDWFC 03,W
028D4:  MOVWF  FEA
028D6:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
028D8:  MOVLW  01
028DA:  ADDWF  xC4,W
028DC:  MOVWF  01
028DE:  MOVLW  00
028E0:  ADDWFC xC5,W
028E2:  MOVWF  03
028E4:  MOVF   01,W
028E6:  ADDLW  1D
028E8:  MOVWF  FE9
028EA:  MOVLW  00
028EC:  ADDWFC 03,W
028EE:  MOVWF  FEA
028F0:  CLRF   FEC
028F2:  MOVF   FED,F
028F4:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
028F6:  MOVLW  01
028F8:  ADDWF  xC4,W
028FA:  MOVWF  01
028FC:  MOVLW  00
028FE:  ADDWFC xC5,W
02900:  MOVFF  01,FE9
02904:  MOVWF  FEA
02906:  MOVFF  6C6,FEF
....................    ((struct timer)input->device).active=false; 
0290A:  MOVLW  01
0290C:  ADDWF  xC4,W
0290E:  MOVWF  01
02910:  MOVLW  00
02912:  ADDWFC xC5,W
02914:  MOVWF  03
02916:  MOVF   01,W
02918:  ADDLW  1F
0291A:  MOVWF  FE9
0291C:  MOVLW  00
0291E:  ADDWFC 03,W
02920:  MOVWF  FEA
02922:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02924:  MOVLW  01
02926:  ADDWF  xC4,W
02928:  MOVWF  01
0292A:  MOVLW  00
0292C:  ADDWFC xC5,W
0292E:  MOVWF  03
02930:  MOVF   01,W
02932:  ADDLW  01
02934:  MOVWF  FE9
02936:  MOVLW  00
02938:  ADDWFC 03,W
0293A:  MOVWF  FEA
0293C:  MOVFF  6C8,FEC
02940:  MOVF   FED,F
02942:  MOVFF  6C7,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
02946:  MOVLW  01
02948:  ADDWF  xC4,W
0294A:  MOVWF  01
0294C:  MOVLW  00
0294E:  ADDWFC xC5,W
02950:  MOVWF  03
02952:  MOVF   01,W
02954:  ADDLW  03
02956:  MOVWF  FE9
02958:  MOVLW  00
0295A:  ADDWFC 03,W
0295C:  MOVWF  FEA
0295E:  MOVFF  6C2,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
02962:  MOVLW  01
02964:  ADDWF  xC4,W
02966:  MOVWF  01
02968:  MOVLW  00
0296A:  ADDWFC xC5,W
0296C:  MOVWF  03
0296E:  MOVF   01,W
02970:  ADDLW  06
02972:  MOVWF  FE9
02974:  MOVLW  00
02976:  ADDWFC 03,W
02978:  MOVWF  FEA
0297A:  MOVFF  6C3,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
0297E:  MOVLW  01
02980:  ADDWF  xC4,W
02982:  MOVWF  01
02984:  MOVLW  00
02986:  ADDWFC xC5,W
02988:  MOVWF  03
0298A:  MOVF   01,W
0298C:  ADDLW  09
0298E:  MOVWF  01
02990:  MOVLW  00
02992:  ADDWFC 03,F
02994:  MOVFF  01,6CB
02998:  MOVFF  03,6CC
0299C:  MOVFF  6BF,6D1
029A0:  MOVFF  6BE,6D0
029A4:  MOVFF  03,6D3
029A8:  MOVFF  01,6D2
029AC:  MOVLW  08
029AE:  MOVWF  xD4
029B0:  MOVLB  0
029B2:  RCALL  27BA
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
029B4:  MOVLW  01
029B6:  MOVLB  6
029B8:  ADDWF  xC4,W
029BA:  MOVWF  01
029BC:  MOVLW  00
029BE:  ADDWFC xC5,W
029C0:  MOVWF  03
029C2:  MOVF   01,W
029C4:  ADDLW  13
029C6:  MOVWF  01
029C8:  MOVLW  00
029CA:  ADDWFC 03,F
029CC:  MOVFF  01,6CB
029D0:  MOVFF  03,6CC
029D4:  MOVFF  6C1,6D1
029D8:  MOVFF  6C0,6D0
029DC:  MOVFF  03,6D3
029E0:  MOVFF  01,6D2
029E4:  MOVLW  08
029E6:  MOVWF  xD4
029E8:  MOVLB  0
029EA:  RCALL  27BA
....................   // printf("start %d stop %d outon %d outoff %d type %d time %Lu",((struct timer)input->device).start.adress[0],((struct timer)input->device).stop.adress[0],out_on,out_off,type,timeToAct); 
.................... } 
029EC:  GOTO   3458 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... volatile int used_dimmers=0; 
....................  
.................... //#define printf_ printf 
.................... #define printf_ // 
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00FE4:  BCF    FD8.0
00FE6:  RLCF   x06,W
00FE8:  MOVWF  00
00FEA:  BCF    FD8.0
00FEC:  RLCF   00,F
00FEE:  MOVF   00,W
00FF0:  MOVLB  5
00FF2:  ADDWF  x7B,W
00FF4:  MOVLB  7
00FF6:  MOVWF  x0A
00FF8:  MOVLW  00
00FFA:  MOVLB  5
00FFC:  ADDWFC x7C,W
00FFE:  MOVLB  7
01000:  MOVWF  x0B
01002:  BCF    FD8.0
01004:  RLCF   x07,W
01006:  ADDWF  x0A,W
01008:  MOVWF  x08
0100A:  MOVLW  00
0100C:  ADDWFC x0B,W
0100E:  MOVWF  x09
*
0107C:  BCF    FD8.0
0107E:  RLCF   x06,W
01080:  MOVWF  00
01082:  BCF    FD8.0
01084:  RLCF   00,F
01086:  MOVF   00,W
01088:  MOVLB  5
0108A:  ADDWF  x7B,W
0108C:  MOVLB  7
0108E:  MOVWF  x0A
01090:  MOVLW  00
01092:  MOVLB  5
01094:  ADDWFC x7C,W
01096:  MOVLB  7
01098:  MOVWF  x0B
0109A:  BCF    FD8.0
0109C:  RLCF   x07,W
0109E:  ADDWF  x0A,W
010A0:  MOVWF  x08
010A2:  MOVLW  00
010A4:  ADDWFC x0B,W
010A6:  MOVWF  x09
*
01108:  BCF    FD8.0
0110A:  RLCF   x06,W
0110C:  MOVWF  00
0110E:  BCF    FD8.0
01110:  RLCF   00,F
01112:  MOVF   00,W
01114:  MOVLB  5
01116:  ADDWF  x7B,W
01118:  MOVLB  7
0111A:  MOVWF  x0A
0111C:  MOVLW  00
0111E:  MOVLB  5
01120:  ADDWFC x7C,W
01122:  MOVLB  7
01124:  MOVWF  x0B
01126:  BCF    FD8.0
01128:  RLCF   x07,W
0112A:  ADDWF  x0A,W
0112C:  MOVWF  x08
0112E:  MOVLW  00
01130:  ADDWFC x0B,W
01132:  MOVWF  x09
*
01196:  BCF    FD8.0
01198:  RLCF   x06,W
0119A:  MOVWF  00
0119C:  BCF    FD8.0
0119E:  RLCF   00,F
011A0:  MOVF   00,W
011A2:  MOVLB  5
011A4:  ADDWF  x7B,W
011A6:  MOVLB  7
011A8:  MOVWF  x0A
011AA:  MOVLW  00
011AC:  MOVLB  5
011AE:  ADDWFC x7C,W
011B0:  MOVLB  7
011B2:  MOVWF  x0B
011B4:  BCF    FD8.0
011B6:  RLCF   x07,W
011B8:  ADDWF  x0A,W
011BA:  MOVWF  x08
011BC:  MOVLW  00
011BE:  ADDWFC x0B,W
011C0:  MOVWF  x09
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
01010:  BCF    FD8.0
01012:  RLCF   x06,W
01014:  MOVWF  00
01016:  BCF    FD8.0
01018:  RLCF   00,F
0101A:  MOVF   00,W
0101C:  MOVLB  5
0101E:  ADDWF  x7B,W
01020:  MOVLB  7
01022:  MOVWF  x0A
01024:  MOVLW  00
01026:  MOVLB  5
01028:  ADDWFC x7C,W
0102A:  MOVLB  7
0102C:  MOVWF  x0B
0102E:  BCF    FD8.0
01030:  RLCF   x07,W
01032:  ADDWF  x0A,W
01034:  MOVWF  01
01036:  MOVLW  00
01038:  ADDWFC x0B,W
0103A:  MOVWF  03
0103C:  MOVFF  01,FE9
01040:  MOVWF  FEA
01042:  MOVFF  FEF,01
01046:  INCF   FE9,F
01048:  MOVF   FEF,W
0104A:  DECF   FE9,F
0104C:  MOVWF  02
*
010A8:  BCF    FD8.0
010AA:  RLCF   x06,W
010AC:  MOVWF  00
010AE:  BCF    FD8.0
010B0:  RLCF   00,F
010B2:  MOVF   00,W
010B4:  MOVLB  5
010B6:  ADDWF  x7B,W
010B8:  MOVLB  7
010BA:  MOVWF  x0A
010BC:  MOVLW  00
010BE:  MOVLB  5
010C0:  ADDWFC x7C,W
010C2:  MOVLB  7
010C4:  MOVWF  x0B
010C6:  BCF    FD8.0
010C8:  RLCF   x07,W
010CA:  ADDWF  x0A,W
010CC:  MOVWF  01
010CE:  MOVLW  00
010D0:  ADDWFC x0B,W
010D2:  MOVWF  03
010D4:  MOVFF  01,FE9
010D8:  MOVWF  FEA
010DA:  MOVFF  FEF,01
010DE:  INCF   FE9,F
010E0:  MOVF   FEF,W
010E2:  DECF   FE9,F
010E4:  MOVWF  02
*
01134:  BCF    FD8.0
01136:  RLCF   x06,W
01138:  MOVWF  00
0113A:  BCF    FD8.0
0113C:  RLCF   00,F
0113E:  MOVF   00,W
01140:  MOVLB  5
01142:  ADDWF  x7B,W
01144:  MOVLB  7
01146:  MOVWF  x0A
01148:  MOVLW  00
0114A:  MOVLB  5
0114C:  ADDWFC x7C,W
0114E:  MOVLB  7
01150:  MOVWF  x0B
01152:  BCF    FD8.0
01154:  RLCF   x07,W
01156:  ADDWF  x0A,W
01158:  MOVWF  01
0115A:  MOVLW  00
0115C:  ADDWFC x0B,W
0115E:  MOVWF  03
01160:  MOVFF  01,FE9
01164:  MOVWF  FEA
01166:  MOVFF  FEF,01
0116A:  INCF   FE9,F
0116C:  MOVF   FEF,W
0116E:  DECF   FE9,F
01170:  MOVWF  02
*
011C2:  BCF    FD8.0
011C4:  RLCF   x06,W
011C6:  MOVWF  00
011C8:  BCF    FD8.0
011CA:  RLCF   00,F
011CC:  MOVF   00,W
011CE:  MOVLB  5
011D0:  ADDWF  x7B,W
011D2:  MOVLB  7
011D4:  MOVWF  x0A
011D6:  MOVLW  00
011D8:  MOVLB  5
011DA:  ADDWFC x7C,W
011DC:  MOVLB  7
011DE:  MOVWF  x0B
011E0:  BCF    FD8.0
011E2:  RLCF   x07,W
011E4:  ADDWF  x0A,W
011E6:  MOVWF  01
011E8:  MOVLW  00
011EA:  ADDWFC x0B,W
011EC:  MOVWF  03
011EE:  MOVFF  01,FE9
011F2:  MOVWF  FEA
011F4:  MOVFF  FEF,01
011F8:  INCF   FE9,F
011FA:  MOVF   FEF,W
011FC:  DECF   FE9,F
011FE:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
0389A:  MOVLB  6
0389C:  CLRF   xA3
0389E:  BSF    xA4.0
....................     // printf("org "); 
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
038A0:  CLRF   xA5
038A2:  MOVLB  5
038A4:  MOVF   x7A,W
038A6:  MOVLB  6
038A8:  SUBWF  xA5,W
038AA:  BC    393A
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
038AC:  MOVF   xA5,W
038AE:  MULLW  04
038B0:  MOVF   FF3,W
038B2:  CLRF   xAA
038B4:  MOVWF  xA9
038B6:  MOVLW  63
038B8:  ADDWF  xA9,W
038BA:  MOVWF  01
038BC:  MOVLW  06
038BE:  ADDWFC xAA,W
038C0:  MOVWF  03
038C2:  MOVWF  xAA
038C4:  CLRF   03
038C6:  MOVF   xA5,W
038C8:  ADDLW  81
038CA:  MOVWF  FE9
038CC:  MOVLW  05
038CE:  ADDWFC 03,W
038D0:  MOVWF  FEA
038D2:  MOVF   FEF,W
038D4:  CLRF   03
038D6:  MOVFF  6AA,FEA
038DA:  MOVFF  01,FE9
038DE:  MOVFF  03,FEC
038E2:  MOVF   FED,F
038E4:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
038E6:  MOVF   xA5,W
038E8:  MULLW  04
038EA:  MOVF   FF3,W
038EC:  CLRF   xAA
038EE:  MOVWF  xA9
038F0:  MOVLW  02
038F2:  ADDWF  xA9,W
038F4:  MOVWF  01
038F6:  MOVLW  00
038F8:  ADDWFC xAA,W
038FA:  MOVWF  03
038FC:  MOVF   01,W
038FE:  ADDLW  63
03900:  MOVWF  01
03902:  MOVLW  06
03904:  ADDWFC 03,F
03906:  MOVFF  03,6AA
0390A:  BCF    FD8.0
0390C:  RLCF   xA5,W
0390E:  CLRF   03
03910:  ADDLW  19
03912:  MOVWF  FE9
03914:  MOVLW  06
03916:  ADDWFC 03,W
03918:  MOVWF  FEA
0391A:  MOVFF  FEC,03
0391E:  MOVF   FED,F
03920:  MOVFF  FEF,6AB
03924:  MOVFF  6AA,FEA
03928:  MOVFF  01,FE9
0392C:  MOVFF  03,FEC
03930:  MOVF   FED,F
03932:  MOVFF  6AB,FEF
....................      } 
03936:  INCF   xA5,F
03938:  BRA    38A2
....................  
....................      WHILE(again) 
....................      { 
0393A:  BTFSS  xA4.0
0393C:  BRA    3B04
....................         again = 0; 
0393E:  BCF    xA4.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
03940:  CLRF   xA5
03942:  MOVLW  01
03944:  MOVLB  5
03946:  SUBWF  x7A,W
03948:  MOVLB  6
0394A:  SUBWF  xA5,W
0394C:  BTFSC  FD8.0
0394E:  BRA    3B02
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
03950:  MOVF   xA5,W
03952:  MULLW  04
03954:  MOVF   FF3,W
03956:  CLRF   xAA
03958:  MOVWF  xA9
0395A:  MOVLW  63
0395C:  ADDWF  xA9,W
0395E:  MOVWF  FE9
03960:  MOVLW  06
03962:  ADDWFC xAA,W
03964:  MOVWF  FEA
03966:  MOVFF  FEC,6AA
0396A:  MOVF   FED,F
0396C:  MOVFF  FEF,6A9
03970:  MOVLW  01
03972:  ADDWF  xA5,W
03974:  MULLW  04
03976:  MOVF   FF3,W
03978:  CLRF   xAC
0397A:  MOVWF  xAB
0397C:  MOVLW  63
0397E:  ADDWF  xAB,W
03980:  MOVWF  FE9
03982:  MOVLW  06
03984:  ADDWFC xAC,W
03986:  MOVWF  FEA
03988:  MOVFF  FEC,03
0398C:  MOVF   FED,F
0398E:  MOVFF  FEF,01
03992:  MOVF   xAA,W
03994:  SUBWF  03,W
03996:  BTFSS  FD8.0
03998:  BRA    3AFE
0399A:  BNZ   39A4
0399C:  MOVF   01,W
0399E:  SUBWF  xA9,W
039A0:  BTFSC  FD8.0
039A2:  BRA    3AFE
....................            { 
....................               again = 1; 
039A4:  BSF    xA4.0
....................               fl = tempd[fa][0]; 
039A6:  MOVF   xA5,W
039A8:  MULLW  04
039AA:  MOVF   FF3,W
039AC:  CLRF   xAA
039AE:  MOVWF  xA9
039B0:  MOVLW  63
039B2:  ADDWF  xA9,W
039B4:  MOVWF  FE9
039B6:  MOVLW  06
039B8:  ADDWFC xAA,W
039BA:  MOVWF  FEA
039BC:  MOVFF  FEC,03
039C0:  MOVF   FED,F
039C2:  MOVFF  FEF,6A6
039C6:  MOVFF  03,6A7
....................               tempd[fa][0] = tempd[fa + 1][0]; 
039CA:  MOVF   xA5,W
039CC:  MULLW  04
039CE:  MOVF   FF3,W
039D0:  CLRF   xAA
039D2:  MOVWF  xA9
039D4:  MOVLW  63
039D6:  ADDWF  xA9,W
039D8:  MOVWF  01
039DA:  MOVLW  06
039DC:  ADDWFC xAA,W
039DE:  MOVWF  03
039E0:  MOVWF  xAA
039E2:  MOVLW  01
039E4:  ADDWF  xA5,W
039E6:  MULLW  04
039E8:  MOVF   FF3,W
039EA:  CLRF   xAC
039EC:  MOVWF  xAB
039EE:  MOVLW  63
039F0:  ADDWF  xAB,W
039F2:  MOVWF  FE9
039F4:  MOVLW  06
039F6:  ADDWFC xAC,W
039F8:  MOVWF  FEA
039FA:  MOVFF  FEC,03
039FE:  MOVF   FED,F
03A00:  MOVFF  FEF,6AB
03A04:  MOVFF  6AA,FEA
03A08:  MOVFF  01,FE9
03A0C:  MOVFF  03,FEC
03A10:  MOVF   FED,F
03A12:  MOVFF  6AB,FEF
....................               tempd[fa + 1][0] = fl; 
03A16:  MOVLW  01
03A18:  ADDWF  xA5,W
03A1A:  MULLW  04
03A1C:  MOVF   FF3,W
03A1E:  CLRF   xAA
03A20:  MOVWF  xA9
03A22:  MOVLW  63
03A24:  ADDWF  xA9,W
03A26:  MOVWF  FE9
03A28:  MOVLW  06
03A2A:  ADDWFC xAA,W
03A2C:  MOVWF  FEA
03A2E:  MOVFF  6A7,FEC
03A32:  MOVF   FED,F
03A34:  MOVFF  6A6,FEF
....................               fl = tempd[fa][1]; 
03A38:  MOVF   xA5,W
03A3A:  MULLW  04
03A3C:  MOVF   FF3,W
03A3E:  CLRF   xAA
03A40:  MOVWF  xA9
03A42:  MOVLW  02
03A44:  ADDWF  xA9,W
03A46:  MOVWF  01
03A48:  MOVLW  00
03A4A:  ADDWFC xAA,W
03A4C:  MOVWF  03
03A4E:  MOVF   01,W
03A50:  ADDLW  63
03A52:  MOVWF  FE9
03A54:  MOVLW  06
03A56:  ADDWFC 03,W
03A58:  MOVWF  FEA
03A5A:  MOVFF  FEC,03
03A5E:  MOVF   FED,F
03A60:  MOVFF  FEF,6A6
03A64:  MOVFF  03,6A7
....................               tempd[fa][1] = tempd[fa + 1][1]; 
03A68:  MOVF   xA5,W
03A6A:  MULLW  04
03A6C:  MOVF   FF3,W
03A6E:  CLRF   xAA
03A70:  MOVWF  xA9
03A72:  MOVLW  02
03A74:  ADDWF  xA9,W
03A76:  MOVWF  01
03A78:  MOVLW  00
03A7A:  ADDWFC xAA,W
03A7C:  MOVWF  03
03A7E:  MOVF   01,W
03A80:  ADDLW  63
03A82:  MOVWF  01
03A84:  MOVLW  06
03A86:  ADDWFC 03,F
03A88:  MOVFF  01,6A9
03A8C:  MOVFF  03,6AA
03A90:  MOVLW  01
03A92:  ADDWF  xA5,W
03A94:  MULLW  04
03A96:  MOVF   FF3,W
03A98:  CLRF   xAC
03A9A:  MOVWF  xAB
03A9C:  MOVLW  02
03A9E:  ADDWF  xAB,W
03AA0:  MOVWF  01
03AA2:  MOVLW  00
03AA4:  ADDWFC xAC,W
03AA6:  MOVWF  03
03AA8:  MOVF   01,W
03AAA:  ADDLW  63
03AAC:  MOVWF  FE9
03AAE:  MOVLW  06
03AB0:  ADDWFC 03,W
03AB2:  MOVWF  FEA
03AB4:  MOVFF  FEC,03
03AB8:  MOVF   FED,F
03ABA:  MOVFF  FEF,6AB
03ABE:  MOVFF  6AA,FEA
03AC2:  MOVFF  6A9,FE9
03AC6:  MOVFF  03,FEC
03ACA:  MOVF   FED,F
03ACC:  MOVFF  6AB,FEF
....................               tempd[fa + 1][1] = fl; 
03AD0:  MOVLW  01
03AD2:  ADDWF  xA5,W
03AD4:  MULLW  04
03AD6:  MOVF   FF3,W
03AD8:  CLRF   xAA
03ADA:  MOVWF  xA9
03ADC:  MOVLW  02
03ADE:  ADDWF  xA9,W
03AE0:  MOVWF  01
03AE2:  MOVLW  00
03AE4:  ADDWFC xAA,W
03AE6:  MOVWF  03
03AE8:  MOVF   01,W
03AEA:  ADDLW  63
03AEC:  MOVWF  FE9
03AEE:  MOVLW  06
03AF0:  ADDWFC 03,W
03AF2:  MOVWF  FEA
03AF4:  MOVFF  6A7,FEC
03AF8:  MOVF   FED,F
03AFA:  MOVFF  6A6,FEF
....................            } 
....................         } 
03AFE:  INCF   xA5,F
03B00:  BRA    3942
....................      } 
03B02:  BRA    393A
....................    /*   for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0) 
03B04:  MOVF   x63,F
03B06:  BNZ   3B10
03B08:  MOVF   x64,F
03B0A:  BNZ   3B10
....................      { 
....................          numluzes = 0; 
03B0C:  CLRF   xA3
....................          //luzes todas off 
....................          //printf("TUDO OFF"); 
....................      } 
....................      ELSE 
03B0E:  BRA    3EB0
....................      { 
....................         numluzes = 1; 
03B10:  MOVLW  01
03B12:  MOVWF  xA3
....................         afa = 0; 
03B14:  CLRF   xA8
....................         IF(actmat) 
03B16:  MOVLB  0
03B18:  BTFSS  xB5.3
03B1A:  BRA    3B2E
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
03B1C:  MOVFF  664,592
03B20:  MOVFF  663,591
....................            delays1[0][1] = tempd[0][1]; 
03B24:  MOVFF  666,594
03B28:  MOVFF  665,593
....................         } 
....................  
....................         ELSE 
03B2C:  BRA    3B3E
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
03B2E:  MOVFF  664,5D6
03B32:  MOVFF  663,5D5
....................            delays2[0][1] = tempd[0][1]; 
03B36:  MOVFF  666,5D8
03B3A:  MOVFF  665,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
03B3E:  MOVLW  01
03B40:  MOVLB  6
03B42:  MOVWF  xA5
03B44:  MOVLB  5
03B46:  MOVF   x7A,W
03B48:  MOVLB  6
03B4A:  SUBWF  xA5,W
03B4C:  BTFSC  FD8.0
03B4E:  BRA    3EB0
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
03B50:  MOVF   xA5,W
03B52:  MULLW  04
03B54:  MOVF   FF3,W
03B56:  CLRF   xAA
03B58:  MOVWF  xA9
03B5A:  MOVLW  63
03B5C:  ADDWF  xA9,W
03B5E:  MOVWF  FE9
03B60:  MOVLW  06
03B62:  ADDWFC xAA,W
03B64:  MOVWF  FEA
03B66:  MOVFF  FEC,6AA
03B6A:  MOVF   FED,F
03B6C:  MOVFF  FEF,6A9
03B70:  MOVLW  01
03B72:  SUBWF  xA5,W
03B74:  MULLW  04
03B76:  MOVF   FF3,W
03B78:  CLRF   xAC
03B7A:  MOVWF  xAB
03B7C:  MOVLW  63
03B7E:  ADDWF  xAB,W
03B80:  MOVWF  FE9
03B82:  MOVLW  06
03B84:  ADDWFC xAC,W
03B86:  MOVWF  FEA
03B88:  MOVFF  FEC,03
03B8C:  MOVF   FED,F
03B8E:  MOVF   FEF,W
03B90:  SUBWF  xA9,W
03B92:  BNZ   3B9A
03B94:  MOVF   03,W
03B96:  SUBWF  xAA,W
03B98:  BZ    3B9E
03B9A:  MOVLW  00
03B9C:  BRA    3BA0
03B9E:  MOVLW  01
03BA0:  MOVWF  xA9
03BA2:  MOVF   xA5,W
03BA4:  MULLW  04
03BA6:  MOVF   FF3,W
03BA8:  CLRF   xAB
03BAA:  MOVWF  xAA
03BAC:  MOVLW  63
03BAE:  ADDWF  xAA,W
03BB0:  MOVWF  FE9
03BB2:  MOVLW  06
03BB4:  ADDWFC xAB,W
03BB6:  MOVWF  FEA
03BB8:  MOVF   FEF,F
03BBA:  BNZ   3BC0
03BBC:  MOVF   FEC,F
03BBE:  BZ    3BC4
03BC0:  MOVLW  00
03BC2:  BRA    3BC6
03BC4:  MOVLW  01
03BC6:  XORLW  00
03BC8:  BZ    3BCE
03BCA:  MOVLW  00
03BCC:  BRA    3BD0
03BCE:  MOVLW  01
03BD0:  ANDWF  xA9,W
03BD2:  BTFSC  FD8.2
03BD4:  BRA    3D10
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
03BD6:  MOVLB  0
03BD8:  BTFSS  xB5.3
03BDA:  BRA    3C76
03BDC:  MOVLB  6
03BDE:  MOVF   xA8,W
03BE0:  MULLW  04
03BE2:  MOVF   FF3,W
03BE4:  CLRF   xAA
03BE6:  MOVWF  xA9
03BE8:  MOVLW  02
03BEA:  ADDWF  xA9,W
03BEC:  MOVWF  01
03BEE:  MOVLW  00
03BF0:  ADDWFC xAA,W
03BF2:  MOVWF  03
03BF4:  MOVF   01,W
03BF6:  ADDLW  91
03BF8:  MOVWF  01
03BFA:  MOVLW  05
03BFC:  ADDWFC 03,F
03BFE:  MOVFF  01,6A9
03C02:  MOVFF  03,6AA
03C06:  MOVF   xA8,W
03C08:  MULLW  04
03C0A:  MOVF   FF3,W
03C0C:  CLRF   xAC
03C0E:  MOVWF  xAB
03C10:  MOVLW  02
03C12:  ADDWF  xAB,W
03C14:  MOVWF  01
03C16:  MOVLW  00
03C18:  ADDWFC xAC,W
03C1A:  MOVWF  03
03C1C:  MOVF   01,W
03C1E:  ADDLW  91
03C20:  MOVWF  FE9
03C22:  MOVLW  05
03C24:  ADDWFC 03,W
03C26:  MOVWF  FEA
03C28:  MOVFF  FEC,6AC
03C2C:  MOVF   FED,F
03C2E:  MOVFF  FEF,6AB
03C32:  MOVF   xA5,W
03C34:  MULLW  04
03C36:  MOVF   FF3,W
03C38:  CLRF   xAE
03C3A:  MOVWF  xAD
03C3C:  MOVLW  02
03C3E:  ADDWF  xAD,W
03C40:  MOVWF  01
03C42:  MOVLW  00
03C44:  ADDWFC xAE,W
03C46:  MOVWF  03
03C48:  MOVF   01,W
03C4A:  ADDLW  63
03C4C:  MOVWF  FE9
03C4E:  MOVLW  06
03C50:  ADDWFC 03,W
03C52:  MOVWF  FEA
03C54:  MOVFF  FEC,03
03C58:  MOVF   FED,F
03C5A:  MOVF   FEF,W
03C5C:  ANDWF  xAB,W
03C5E:  MOVWF  00
03C60:  MOVF   03,W
03C62:  ANDWF  xAC,W
03C64:  MOVFF  6AA,FEA
03C68:  MOVFF  6A9,FE9
03C6C:  MOVWF  FEC
03C6E:  MOVF   FED,F
03C70:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
03C74:  BRA    3D0E
03C76:  MOVLB  6
03C78:  MOVF   xA8,W
03C7A:  MULLW  04
03C7C:  MOVF   FF3,W
03C7E:  CLRF   xAA
03C80:  MOVWF  xA9
03C82:  MOVLW  02
03C84:  ADDWF  xA9,W
03C86:  MOVWF  01
03C88:  MOVLW  00
03C8A:  ADDWFC xAA,W
03C8C:  MOVWF  03
03C8E:  MOVF   01,W
03C90:  ADDLW  D5
03C92:  MOVWF  01
03C94:  MOVLW  05
03C96:  ADDWFC 03,F
03C98:  MOVFF  01,6A9
03C9C:  MOVFF  03,6AA
03CA0:  MOVF   xA8,W
03CA2:  MULLW  04
03CA4:  MOVF   FF3,W
03CA6:  CLRF   xAC
03CA8:  MOVWF  xAB
03CAA:  MOVLW  02
03CAC:  ADDWF  xAB,W
03CAE:  MOVWF  01
03CB0:  MOVLW  00
03CB2:  ADDWFC xAC,W
03CB4:  MOVWF  03
03CB6:  MOVF   01,W
03CB8:  ADDLW  D5
03CBA:  MOVWF  FE9
03CBC:  MOVLW  05
03CBE:  ADDWFC 03,W
03CC0:  MOVWF  FEA
03CC2:  MOVFF  FEC,6AC
03CC6:  MOVF   FED,F
03CC8:  MOVFF  FEF,6AB
03CCC:  MOVF   xA5,W
03CCE:  MULLW  04
03CD0:  MOVF   FF3,W
03CD2:  CLRF   xAE
03CD4:  MOVWF  xAD
03CD6:  MOVLW  02
03CD8:  ADDWF  xAD,W
03CDA:  MOVWF  01
03CDC:  MOVLW  00
03CDE:  ADDWFC xAE,W
03CE0:  MOVWF  03
03CE2:  MOVF   01,W
03CE4:  ADDLW  63
03CE6:  MOVWF  FE9
03CE8:  MOVLW  06
03CEA:  ADDWFC 03,W
03CEC:  MOVWF  FEA
03CEE:  MOVFF  FEC,03
03CF2:  MOVF   FED,F
03CF4:  MOVF   FEF,W
03CF6:  ANDWF  xAB,W
03CF8:  MOVWF  00
03CFA:  MOVF   03,W
03CFC:  ANDWF  xAC,W
03CFE:  MOVFF  6AA,FEA
03D02:  MOVFF  6A9,FE9
03D06:  MOVWF  FEC
03D08:  MOVF   FED,F
03D0A:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
03D0E:  BRA    3EAC
03D10:  MOVF   xA5,W
03D12:  MULLW  04
03D14:  MOVF   FF3,W
03D16:  CLRF   xAA
03D18:  MOVWF  xA9
03D1A:  MOVLW  63
03D1C:  ADDWF  xA9,W
03D1E:  MOVWF  FE9
03D20:  MOVLW  06
03D22:  ADDWFC xAA,W
03D24:  MOVWF  FEA
03D26:  MOVF   FEF,F
03D28:  BNZ   3D2E
03D2A:  MOVF   FEC,F
03D2C:  BZ    3D32
03D2E:  MOVLW  00
03D30:  BRA    3D34
03D32:  MOVLW  01
03D34:  XORLW  00
03D36:  BTFSS  FD8.2
03D38:  BRA    3EAC
....................            { 
....................               ++afa; 
03D3A:  INCF   xA8,F
....................               IF(actmat) 
03D3C:  MOVLB  0
03D3E:  BTFSS  xB5.3
03D40:  BRA    3DF8
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
03D42:  MOVLB  6
03D44:  MOVF   xA8,W
03D46:  MULLW  04
03D48:  MOVF   FF3,W
03D4A:  CLRF   xAA
03D4C:  MOVWF  xA9
03D4E:  MOVLW  91
03D50:  ADDWF  xA9,W
03D52:  MOVWF  01
03D54:  MOVLW  05
03D56:  ADDWFC xAA,W
03D58:  MOVWF  03
03D5A:  MOVWF  xAA
03D5C:  MOVF   xA5,W
03D5E:  MULLW  04
03D60:  MOVF   FF3,W
03D62:  CLRF   xAC
03D64:  MOVWF  xAB
03D66:  MOVLW  63
03D68:  ADDWF  xAB,W
03D6A:  MOVWF  FE9
03D6C:  MOVLW  06
03D6E:  ADDWFC xAC,W
03D70:  MOVWF  FEA
03D72:  MOVFF  FEC,03
03D76:  MOVF   FED,F
03D78:  MOVFF  FEF,6AB
03D7C:  MOVFF  6AA,FEA
03D80:  MOVFF  01,FE9
03D84:  MOVFF  03,FEC
03D88:  MOVF   FED,F
03D8A:  MOVFF  6AB,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
03D8E:  MOVF   xA8,W
03D90:  MULLW  04
03D92:  MOVF   FF3,W
03D94:  CLRF   xAA
03D96:  MOVWF  xA9
03D98:  MOVLW  02
03D9A:  ADDWF  xA9,W
03D9C:  MOVWF  01
03D9E:  MOVLW  00
03DA0:  ADDWFC xAA,W
03DA2:  MOVWF  03
03DA4:  MOVF   01,W
03DA6:  ADDLW  91
03DA8:  MOVWF  01
03DAA:  MOVLW  05
03DAC:  ADDWFC 03,F
03DAE:  MOVFF  01,6A9
03DB2:  MOVFF  03,6AA
03DB6:  MOVF   xA5,W
03DB8:  MULLW  04
03DBA:  MOVF   FF3,W
03DBC:  CLRF   xAC
03DBE:  MOVWF  xAB
03DC0:  MOVLW  02
03DC2:  ADDWF  xAB,W
03DC4:  MOVWF  01
03DC6:  MOVLW  00
03DC8:  ADDWFC xAC,W
03DCA:  MOVWF  03
03DCC:  MOVF   01,W
03DCE:  ADDLW  63
03DD0:  MOVWF  FE9
03DD2:  MOVLW  06
03DD4:  ADDWFC 03,W
03DD6:  MOVWF  FEA
03DD8:  MOVFF  FEC,03
03DDC:  MOVF   FED,F
03DDE:  MOVFF  FEF,6AB
03DE2:  MOVFF  6AA,FEA
03DE6:  MOVFF  6A9,FE9
03DEA:  MOVFF  03,FEC
03DEE:  MOVF   FED,F
03DF0:  MOVFF  6AB,FEF
....................               } 
....................  
....................               ELSE 
03DF4:  BRA    3EAA
03DF6:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
03DF8:  MOVLB  6
03DFA:  MOVF   xA8,W
03DFC:  MULLW  04
03DFE:  MOVF   FF3,W
03E00:  CLRF   xAA
03E02:  MOVWF  xA9
03E04:  MOVLW  D5
03E06:  ADDWF  xA9,W
03E08:  MOVWF  01
03E0A:  MOVLW  05
03E0C:  ADDWFC xAA,W
03E0E:  MOVWF  03
03E10:  MOVWF  xAA
03E12:  MOVF   xA5,W
03E14:  MULLW  04
03E16:  MOVF   FF3,W
03E18:  CLRF   xAC
03E1A:  MOVWF  xAB
03E1C:  MOVLW  63
03E1E:  ADDWF  xAB,W
03E20:  MOVWF  FE9
03E22:  MOVLW  06
03E24:  ADDWFC xAC,W
03E26:  MOVWF  FEA
03E28:  MOVFF  FEC,03
03E2C:  MOVF   FED,F
03E2E:  MOVFF  FEF,6AB
03E32:  MOVFF  6AA,FEA
03E36:  MOVFF  01,FE9
03E3A:  MOVFF  03,FEC
03E3E:  MOVF   FED,F
03E40:  MOVFF  6AB,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
03E44:  MOVF   xA8,W
03E46:  MULLW  04
03E48:  MOVF   FF3,W
03E4A:  CLRF   xAA
03E4C:  MOVWF  xA9
03E4E:  MOVLW  02
03E50:  ADDWF  xA9,W
03E52:  MOVWF  01
03E54:  MOVLW  00
03E56:  ADDWFC xAA,W
03E58:  MOVWF  03
03E5A:  MOVF   01,W
03E5C:  ADDLW  D5
03E5E:  MOVWF  01
03E60:  MOVLW  05
03E62:  ADDWFC 03,F
03E64:  MOVFF  01,6A9
03E68:  MOVFF  03,6AA
03E6C:  MOVF   xA5,W
03E6E:  MULLW  04
03E70:  MOVF   FF3,W
03E72:  CLRF   xAC
03E74:  MOVWF  xAB
03E76:  MOVLW  02
03E78:  ADDWF  xAB,W
03E7A:  MOVWF  01
03E7C:  MOVLW  00
03E7E:  ADDWFC xAC,W
03E80:  MOVWF  03
03E82:  MOVF   01,W
03E84:  ADDLW  63
03E86:  MOVWF  FE9
03E88:  MOVLW  06
03E8A:  ADDWFC 03,W
03E8C:  MOVWF  FEA
03E8E:  MOVFF  FEC,03
03E92:  MOVF   FED,F
03E94:  MOVFF  FEF,6AB
03E98:  MOVFF  6AA,FEA
03E9C:  MOVFF  6A9,FE9
03EA0:  MOVFF  03,FEC
03EA4:  MOVF   FED,F
03EA6:  MOVFF  6AB,FEF
....................               } 
....................      //          printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03EAA:  INCF   xA3,F
....................            } 
....................         } 
03EAC:  INCF   xA5,F
03EAE:  BRA    3B44
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03EB0:  MOVLB  0
03EB2:  BTFSS  xB5.3
03EB4:  BRA    3EC0
03EB6:  MOVLB  5
03EB8:  CLRF   xD2
03EBA:  MOVFF  6A3,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03EBE:  BRA    3EC8
03EC0:  MOVLB  6
03EC2:  CLRF   x16
03EC4:  MOVFF  6A3,615
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays2[0][0],delays2[0][1]); 
....................     // delays2[0][1]=27498; 
....................     // delays1[0][1]=27498; 
....................      organizado=1; 
03EC8:  MOVLB  0
03ECA:  BSF    xB5.2
....................   } 
03ECC:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03ECE:  MOVLB  5
03ED0:  CLRF   xD2
03ED2:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
03ED4:  MOVLB  6
03ED6:  CLRF   x16
03ED8:  CLRF   x15
....................    pointer=delays1; 
03EDA:  MOVLW  05
03EDC:  MOVLB  5
03EDE:  MOVWF  x7C
03EE0:  MOVLW  91
03EE2:  MOVWF  x7B
....................    actmat=0; 
03EE4:  MOVLB  0
03EE6:  BCF    xB5.3
....................    portc=0xFF; 
03EE8:  MOVLW  FF
03EEA:  MOVWF  F82
....................    portd=0xFF; 
03EEC:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03EEE:  MOVLW  00
03EF0:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
03EF2:  MOVWF  F95
....................    portc=0xFF; 
03EF4:  MOVLW  FF
03EF6:  MOVWF  F82
....................    portd=0xFF; 
03EF8:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03EFA:  MOVLB  6
03EFC:  CLRF   x61
03EFE:  MOVLB  1
03F00:  MOVF   x3F,W
03F02:  MOVLB  6
03F04:  SUBWF  x61,W
03F06:  BTFSC  FD8.0
03F08:  BRA    4076
03F0A:  CLRF   1B
03F0C:  BTFSC  FF2.6
03F0E:  BSF    1B.6
03F10:  BCF    FF2.6
03F12:  BTFSC  FF2.7
03F14:  BSF    1B.7
03F16:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03F18:  CLRF   xDB
03F1A:  MOVFF  661,6DA
03F1E:  CLRF   xDD
03F20:  MOVLW  2F
03F22:  MOVWF  xDC
03F24:  MOVLB  0
03F26:  CALL   0420
03F2A:  BTFSC  1B.6
03F2C:  BSF    FF2.6
03F2E:  BTFSC  1B.7
03F30:  BSF    FF2.7
03F32:  MOVFF  02,03
03F36:  MOVF   01,W
03F38:  ADDLW  8A
03F3A:  MOVWF  01
03F3C:  MOVLW  02
03F3E:  ADDWFC 03,F
03F40:  MOVFF  01,FE9
03F44:  MOVFF  03,FEA
03F48:  MOVF   FEF,W
03F4A:  XORLW  65
03F4C:  BZ    3F50
03F4E:  BRA    4070
....................          case dimmer: 
.................... #ifdef DEBUG 
....................          printf("used dimmer!!!\n\r"); 
03F50:  MOVLW  BE
03F52:  MOVWF  FF6
03F54:  MOVLW  02
03F56:  MOVWF  FF7
03F58:  MOVLW  00
03F5A:  MOVWF  FF8
03F5C:  CLRF   1B
03F5E:  BTFSC  FF2.6
03F60:  BSF    1B.6
03F62:  BCF    FF2.6
03F64:  BTFSC  FF2.7
03F66:  BSF    1B.7
03F68:  BCF    FF2.7
03F6A:  CALL   0F2E
03F6E:  BTFSC  1B.6
03F70:  BSF    FF2.6
03F72:  BTFSC  1B.7
03F74:  BSF    FF2.7
.................... #endif 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
03F76:  BCF    FD8.0
03F78:  MOVLB  5
03F7A:  RLCF   x7A,W
03F7C:  CLRF   03
03F7E:  ADDLW  19
03F80:  MOVWF  01
03F82:  MOVLW  06
03F84:  ADDWFC 03,F
03F86:  MOVFF  01,662
03F8A:  MOVLB  6
03F8C:  MOVFF  03,663
03F90:  CLRF   1B
03F92:  BTFSC  FF2.6
03F94:  BSF    1B.6
03F96:  BCF    FF2.6
03F98:  BTFSC  FF2.7
03F9A:  BSF    1B.7
03F9C:  BCF    FF2.7
03F9E:  CLRF   xDB
03FA0:  MOVFF  661,6DA
03FA4:  CLRF   xDD
03FA6:  MOVLW  2F
03FA8:  MOVWF  xDC
03FAA:  MOVLB  0
03FAC:  CALL   0420
03FB0:  BTFSC  1B.6
03FB2:  BSF    FF2.6
03FB4:  BTFSC  1B.7
03FB6:  BSF    FF2.7
03FB8:  MOVF   01,W
03FBA:  ADDLW  4C
03FBC:  MOVLB  6
03FBE:  MOVWF  x64
03FC0:  MOVLW  01
03FC2:  ADDWFC 02,W
03FC4:  MOVWF  x65
03FC6:  MOVLW  01
03FC8:  ADDWF  x64,W
03FCA:  MOVWF  01
03FCC:  MOVLW  00
03FCE:  ADDWFC x65,W
03FD0:  MOVWF  03
03FD2:  MOVF   01,W
03FD4:  ADDLW  3E
03FD6:  MOVWF  01
03FD8:  MOVLW  01
03FDA:  ADDWFC 03,F
03FDC:  MOVF   01,W
03FDE:  ADDLW  1F
03FE0:  MOVWF  FE9
03FE2:  MOVLW  00
03FE4:  ADDWFC 03,W
03FE6:  MOVWF  FEA
03FE8:  BCF    FD8.0
03FEA:  RLCF   FEF,W
03FEC:  CLRF   03
03FEE:  MOVLB  0
03FF0:  CALL   0176
03FF4:  TBLRD*+
03FF6:  MOVFF  FF5,03
03FFA:  MOVLB  6
03FFC:  MOVFF  663,FEA
04000:  MOVFF  662,FE9
04004:  MOVFF  03,FEC
04008:  MOVF   FED,F
0400A:  MOVWF  FEF
0400C:  CLRF   1B
0400E:  BTFSC  FF2.6
04010:  BSF    1B.6
04012:  BCF    FF2.6
04014:  BTFSC  FF2.7
04016:  BSF    1B.7
04018:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
0401A:  CLRF   xDB
0401C:  MOVFF  661,6DA
04020:  CLRF   xDD
04022:  MOVLW  2F
04024:  MOVWF  xDC
04026:  MOVLB  0
04028:  CALL   0420
0402C:  BTFSC  1B.6
0402E:  BSF    FF2.6
04030:  BTFSC  1B.7
04032:  BSF    FF2.7
04034:  MOVF   01,W
04036:  ADDLW  4C
04038:  MOVLB  6
0403A:  MOVWF  x62
0403C:  MOVLW  01
0403E:  ADDWFC 02,W
04040:  MOVWF  x63
04042:  MOVLW  01
04044:  ADDWF  x62,W
04046:  MOVWF  01
04048:  MOVLW  00
0404A:  ADDWFC x63,W
0404C:  MOVWF  03
0404E:  MOVF   01,W
04050:  ADDLW  3E
04052:  MOVWF  01
04054:  MOVLW  01
04056:  ADDWFC 03,F
04058:  MOVF   01,W
0405A:  ADDLW  20
0405C:  MOVWF  FE9
0405E:  MOVLW  00
04060:  ADDWFC 03,W
04062:  MOVWF  FEA
04064:  MOVFF  57A,FEF
....................             ++used_dimmers;           
04068:  MOVLB  5
0406A:  INCF   x7A,F
....................          break; 
0406C:  MOVLB  0
0406E:  BRA    4070
....................       } 
....................    } 
04070:  MOVLB  6
04072:  INCF   x61,F
04074:  BRA    3EFE
....................    if(used_dimmers>0) 
04076:  MOVLB  5
04078:  MOVF   x7A,F
0407A:  BZ    40A2
....................    { 
....................    actmat=0; 
0407C:  MOVLB  0
0407E:  BCF    xB5.3
....................    pointer=delays1; 
04080:  MOVLW  05
04082:  MOVLB  5
04084:  MOVWF  x7C
04086:  MOVLW  91
04088:  MOVWF  x7B
....................    org(); 
0408A:  MOVLB  0
0408C:  RCALL  389A
....................    pointer=delays2; 
0408E:  MOVLW  05
04090:  MOVLB  5
04092:  MOVWF  x7C
04094:  MOVLW  D5
04096:  MOVWF  x7B
....................    actmat=1; 
04098:  MOVLB  0
0409A:  BSF    xB5.3
....................    org(); 
0409C:  CALL   389A
040A0:  MOVLB  5
....................    } 
.................... } 
040A2:  MOVLB  0
040A4:  GOTO   9274 (RETURN)
....................  
.................... void write_outputs() 
.................... { 
040A8:  MOVLB  6
040AA:  BCF    x62.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
040AC:  CLRF   x61
040AE:  MOVLB  1
040B0:  MOVF   x3F,W
040B2:  MOVLB  6
040B4:  SUBWF  x61,W
040B6:  BTFSC  FD8.0
040B8:  GOTO   5634
040BC:  CLRF   1B
040BE:  BTFSC  FF2.6
040C0:  BSF    1B.6
040C2:  BCF    FF2.6
040C4:  BTFSC  FF2.7
040C6:  BSF    1B.7
040C8:  BCF    FF2.7
....................    { 
....................      // printf_("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
040CA:  CLRF   xDB
040CC:  MOVFF  661,6DA
040D0:  CLRF   xDD
040D2:  MOVLW  2F
040D4:  MOVWF  xDC
040D6:  MOVLB  0
040D8:  CALL   0420
040DC:  BTFSC  1B.6
040DE:  BSF    FF2.6
040E0:  BTFSC  1B.7
040E2:  BSF    FF2.7
040E4:  MOVFF  02,03
040E8:  MOVF   01,W
040EA:  ADDLW  8A
040EC:  MOVWF  01
040EE:  MOVLW  02
040F0:  ADDWFC 03,F
040F2:  MOVFF  01,FE9
040F6:  MOVFF  03,FEA
040FA:  MOVF   FEF,W
040FC:  XORLW  65
040FE:  BZ    4112
04100:  XORLW  01
04102:  BTFSC  FD8.2
04104:  BRA    471E
04106:  XORLW  02
04108:  BTFSC  FD8.2
0410A:  GOTO   4A3E
0410E:  GOTO   562C
....................          case dimmer: 
04112:  CLRF   1B
04114:  BTFSC  FF2.6
04116:  BSF    1B.6
04118:  BCF    FF2.6
0411A:  BTFSC  FF2.7
0411C:  BSF    1B.7
0411E:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
04120:  MOVLB  6
04122:  CLRF   xDB
04124:  MOVFF  661,6DA
04128:  CLRF   xDD
0412A:  MOVLW  2F
0412C:  MOVWF  xDC
0412E:  MOVLB  0
04130:  CALL   0420
04134:  BTFSC  1B.6
04136:  BSF    FF2.6
04138:  BTFSC  1B.7
0413A:  BSF    FF2.7
0413C:  MOVF   01,W
0413E:  ADDLW  4C
04140:  MOVLB  6
04142:  MOVWF  x63
04144:  MOVLW  01
04146:  ADDWFC 02,W
04148:  MOVWF  x64
0414A:  MOVLW  01
0414C:  ADDWF  x63,W
0414E:  MOVWF  01
04150:  MOVLW  00
04152:  ADDWFC x64,W
04154:  MOVWF  03
04156:  MOVF   01,W
04158:  ADDLW  3E
0415A:  MOVWF  01
0415C:  MOVLW  01
0415E:  ADDWFC 03,F
04160:  MOVF   01,W
04162:  ADDLW  1D
04164:  MOVWF  FE9
04166:  MOVLW  00
04168:  ADDWFC 03,W
0416A:  MOVWF  FEA
0416C:  BTFSS  FEF.0
0416E:  BRA    42FC
04170:  CLRF   1B
04172:  BTFSC  FF2.6
04174:  BSF    1B.6
04176:  BCF    FF2.6
04178:  BTFSC  FF2.7
0417A:  BSF    1B.7
0417C:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
0417E:  CLRF   xDB
04180:  MOVFF  661,6DA
04184:  CLRF   xDD
04186:  MOVLW  2F
04188:  MOVWF  xDC
0418A:  MOVLB  0
0418C:  CALL   0420
04190:  BTFSC  1B.6
04192:  BSF    FF2.6
04194:  BTFSC  1B.7
04196:  BSF    FF2.7
04198:  MOVF   01,W
0419A:  ADDLW  4C
0419C:  MOVLB  6
0419E:  MOVWF  x63
041A0:  MOVLW  01
041A2:  ADDWFC 02,W
041A4:  MOVWF  x64
041A6:  MOVLW  01
041A8:  ADDWF  x63,W
041AA:  MOVWF  01
041AC:  MOVLW  00
041AE:  ADDWFC x64,W
041B0:  MOVWF  03
041B2:  MOVF   01,W
041B4:  ADDLW  3E
041B6:  MOVWF  01
041B8:  MOVLW  01
041BA:  ADDWFC 03,F
041BC:  MOVF   01,W
041BE:  ADDLW  1E
041C0:  MOVWF  FE9
041C2:  MOVLW  00
041C4:  ADDWFC 03,W
041C6:  MOVWF  FEA
041C8:  MOVF   FEF,F
041CA:  BNZ   42A2
041CC:  CLRF   1B
041CE:  BTFSC  FF2.6
041D0:  BSF    1B.6
041D2:  BCF    FF2.6
041D4:  BTFSC  FF2.7
041D6:  BSF    1B.7
041D8:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
041DA:  CLRF   xDB
041DC:  MOVFF  661,6DA
041E0:  CLRF   xDD
041E2:  MOVLW  2F
041E4:  MOVWF  xDC
041E6:  MOVLB  0
041E8:  CALL   0420
041EC:  BTFSC  1B.6
041EE:  BSF    FF2.6
041F0:  BTFSC  1B.7
041F2:  BSF    FF2.7
041F4:  MOVF   01,W
041F6:  ADDLW  4C
041F8:  MOVLB  6
041FA:  MOVWF  x63
041FC:  MOVLW  01
041FE:  ADDWFC 02,W
04200:  MOVWF  x64
04202:  MOVLW  01
04204:  ADDWF  x63,W
04206:  MOVWF  01
04208:  MOVLW  00
0420A:  ADDWFC x64,W
0420C:  MOVWF  03
0420E:  MOVF   01,W
04210:  ADDLW  3E
04212:  MOVWF  01
04214:  MOVLW  01
04216:  ADDWFC 03,F
04218:  MOVF   01,W
0421A:  ADDLW  20
0421C:  MOVWF  FE9
0421E:  MOVLW  00
04220:  ADDWFC 03,W
04222:  MOVWF  FEA
04224:  CLRF   03
04226:  MOVF   FEF,W
04228:  ADDLW  81
0422A:  MOVWF  01
0422C:  MOVLW  05
0422E:  ADDWFC 03,F
04230:  MOVFF  01,665
04234:  MOVFF  03,666
04238:  CLRF   1B
0423A:  BTFSC  FF2.6
0423C:  BSF    1B.6
0423E:  BCF    FF2.6
04240:  BTFSC  FF2.7
04242:  BSF    1B.7
04244:  BCF    FF2.7
04246:  CLRF   xDB
04248:  MOVFF  661,6DA
0424C:  CLRF   xDD
0424E:  MOVLW  2F
04250:  MOVWF  xDC
04252:  MOVLB  0
04254:  CALL   0420
04258:  BTFSC  1B.6
0425A:  BSF    FF2.6
0425C:  BTFSC  1B.7
0425E:  BSF    FF2.7
04260:  MOVF   01,W
04262:  ADDLW  4C
04264:  MOVLB  6
04266:  MOVWF  x67
04268:  MOVLW  01
0426A:  ADDWFC 02,W
0426C:  MOVWF  x68
0426E:  MOVLW  01
04270:  ADDWF  x67,W
04272:  MOVWF  01
04274:  MOVLW  00
04276:  ADDWFC x68,W
04278:  MOVWF  03
0427A:  MOVF   01,W
0427C:  ADDLW  3E
0427E:  MOVWF  01
04280:  MOVLW  01
04282:  ADDWFC 03,F
04284:  MOVF   01,W
04286:  ADDLW  1C
04288:  MOVWF  FE9
0428A:  MOVLW  00
0428C:  ADDWFC 03,W
0428E:  MOVWF  FEA
04290:  MOVFF  FEF,669
04294:  MOVFF  666,FEA
04298:  MOVFF  665,FE9
0429C:  MOVFF  669,FEF
....................                 //  printf_("ltlevel[%d]=%d\n\r",((struct light)mydevices.myoutputs[x].device).internal_order,((struct light)mydevices.myoutputs[x].device).dim_value.value); 
....................                   update_dimmers=true; 
042A0:  BSF    x62.0
042A2:  CLRF   1B
042A4:  BTFSC  FF2.6
042A6:  BSF    1B.6
042A8:  BCF    FF2.6
042AA:  BTFSC  FF2.7
042AC:  BSF    1B.7
042AE:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
042B0:  CLRF   xDB
042B2:  MOVFF  661,6DA
042B6:  CLRF   xDD
042B8:  MOVLW  2F
042BA:  MOVWF  xDC
042BC:  MOVLB  0
042BE:  CALL   0420
042C2:  BTFSC  1B.6
042C4:  BSF    FF2.6
042C6:  BTFSC  1B.7
042C8:  BSF    FF2.7
042CA:  MOVF   01,W
042CC:  ADDLW  4C
042CE:  MOVLB  6
042D0:  MOVWF  x63
042D2:  MOVLW  01
042D4:  ADDWFC 02,W
042D6:  MOVWF  x64
042D8:  MOVLW  01
042DA:  ADDWF  x63,W
042DC:  MOVWF  01
042DE:  MOVLW  00
042E0:  ADDWFC x64,W
042E2:  MOVWF  03
042E4:  MOVF   01,W
042E6:  ADDLW  3E
042E8:  MOVWF  01
042EA:  MOVLW  01
042EC:  ADDWFC 03,F
042EE:  MOVF   01,W
042F0:  ADDLW  1D
042F2:  MOVWF  FE9
042F4:  MOVLW  00
042F6:  ADDWFC 03,W
042F8:  MOVWF  FEA
042FA:  BCF    FEF.0
042FC:  CLRF   1B
042FE:  BTFSC  FF2.6
04300:  BSF    1B.6
04302:  BCF    FF2.6
04304:  BTFSC  FF2.7
04306:  BSF    1B.7
04308:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
0430A:  CLRF   xDB
0430C:  MOVFF  661,6DA
04310:  CLRF   xDD
04312:  MOVLW  2F
04314:  MOVWF  xDC
04316:  MOVLB  0
04318:  CALL   0420
0431C:  BTFSC  1B.6
0431E:  BSF    FF2.6
04320:  BTFSC  1B.7
04322:  BSF    FF2.7
04324:  MOVF   01,W
04326:  ADDLW  4C
04328:  MOVLB  6
0432A:  MOVWF  x63
0432C:  MOVLW  01
0432E:  ADDWFC 02,W
04330:  MOVWF  x64
04332:  MOVLW  01
04334:  ADDWF  x63,W
04336:  MOVWF  01
04338:  MOVLW  00
0433A:  ADDWFC x64,W
0433C:  MOVWF  03
0433E:  MOVF   01,W
04340:  ADDLW  3E
04342:  MOVWF  01
04344:  MOVLW  01
04346:  ADDWFC 03,F
04348:  MOVF   01,W
0434A:  ADDLW  13
0434C:  MOVWF  FE9
0434E:  MOVLW  00
04350:  ADDWFC 03,W
04352:  MOVWF  FEA
04354:  BTFSS  FEF.0
04356:  BRA    44D4
04358:  CLRF   1B
0435A:  BTFSC  FF2.6
0435C:  BSF    1B.6
0435E:  BCF    FF2.6
04360:  BTFSC  FF2.7
04362:  BSF    1B.7
04364:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
04366:  CLRF   xDB
04368:  MOVFF  661,6DA
0436C:  CLRF   xDD
0436E:  MOVLW  2F
04370:  MOVWF  xDC
04372:  MOVLB  0
04374:  CALL   0420
04378:  BTFSC  1B.6
0437A:  BSF    FF2.6
0437C:  BTFSC  1B.7
0437E:  BSF    FF2.7
04380:  MOVF   01,W
04382:  ADDLW  4C
04384:  MOVLB  6
04386:  MOVWF  x63
04388:  MOVLW  01
0438A:  ADDWFC 02,W
0438C:  MOVWF  x64
0438E:  MOVLW  01
04390:  ADDWF  x63,W
04392:  MOVWF  01
04394:  MOVLW  00
04396:  ADDWFC x64,W
04398:  MOVWF  03
0439A:  MOVF   01,W
0439C:  ADDLW  3E
0439E:  MOVWF  01
043A0:  MOVLW  01
043A2:  ADDWFC 03,F
043A4:  MOVF   01,W
043A6:  ADDLW  12
043A8:  MOVWF  FE9
043AA:  MOVLW  00
043AC:  ADDWFC 03,W
043AE:  MOVWF  FEA
043B0:  MOVF   FEF,F
043B2:  BZ    447A
043B4:  CLRF   1B
043B6:  BTFSC  FF2.6
043B8:  BSF    1B.6
043BA:  BCF    FF2.6
043BC:  BTFSC  FF2.7
043BE:  BSF    1B.7
043C0:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
043C2:  CLRF   xDB
043C4:  MOVFF  661,6DA
043C8:  CLRF   xDD
043CA:  MOVLW  2F
043CC:  MOVWF  xDC
043CE:  MOVLB  0
043D0:  CALL   0420
043D4:  BTFSC  1B.6
043D6:  BSF    FF2.6
043D8:  BTFSC  1B.7
043DA:  BSF    FF2.7
043DC:  MOVF   01,W
043DE:  ADDLW  4C
043E0:  MOVLB  6
043E2:  MOVWF  x63
043E4:  MOVLW  01
043E6:  ADDWFC 02,W
043E8:  MOVWF  x64
043EA:  MOVLW  01
043EC:  ADDWF  x63,W
043EE:  MOVWF  01
043F0:  MOVLW  00
043F2:  ADDWFC x64,W
043F4:  MOVWF  03
043F6:  MOVF   01,W
043F8:  ADDLW  3E
043FA:  MOVWF  01
043FC:  MOVLW  01
043FE:  ADDWFC 03,F
04400:  MOVF   01,W
04402:  ADDLW  1E
04404:  MOVWF  FE9
04406:  MOVLW  00
04408:  ADDWFC 03,W
0440A:  MOVWF  FEA
0440C:  MOVLW  01
0440E:  MOVWF  FEF
04410:  CLRF   1B
04412:  BTFSC  FF2.6
04414:  BSF    1B.6
04416:  BCF    FF2.6
04418:  BTFSC  FF2.7
0441A:  BSF    1B.7
0441C:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
0441E:  CLRF   xDB
04420:  MOVFF  661,6DA
04424:  CLRF   xDD
04426:  MOVLW  2F
04428:  MOVWF  xDC
0442A:  MOVLB  0
0442C:  CALL   0420
04430:  BTFSC  1B.6
04432:  BSF    FF2.6
04434:  BTFSC  1B.7
04436:  BSF    FF2.7
04438:  MOVF   01,W
0443A:  ADDLW  4C
0443C:  MOVLB  6
0443E:  MOVWF  x63
04440:  MOVLW  01
04442:  ADDWFC 02,W
04444:  MOVWF  x64
04446:  MOVLW  01
04448:  ADDWF  x63,W
0444A:  MOVWF  01
0444C:  MOVLW  00
0444E:  ADDWFC x64,W
04450:  MOVWF  03
04452:  MOVF   01,W
04454:  ADDLW  3E
04456:  MOVWF  01
04458:  MOVLW  01
0445A:  ADDWFC 03,F
0445C:  MOVF   01,W
0445E:  ADDLW  20
04460:  MOVWF  FE9
04462:  MOVLW  00
04464:  ADDWFC 03,W
04466:  MOVWF  FEA
04468:  CLRF   03
0446A:  MOVF   FEF,W
0446C:  ADDLW  81
0446E:  MOVWF  FE9
04470:  MOVLW  05
04472:  ADDWFC 03,W
04474:  MOVWF  FEA
04476:  CLRF   FEF
....................                   update_dimmers=true; 
04478:  BSF    x62.0
0447A:  CLRF   1B
0447C:  BTFSC  FF2.6
0447E:  BSF    1B.6
04480:  BCF    FF2.6
04482:  BTFSC  FF2.7
04484:  BSF    1B.7
04486:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
04488:  CLRF   xDB
0448A:  MOVFF  661,6DA
0448E:  CLRF   xDD
04490:  MOVLW  2F
04492:  MOVWF  xDC
04494:  MOVLB  0
04496:  CALL   0420
0449A:  BTFSC  1B.6
0449C:  BSF    FF2.6
0449E:  BTFSC  1B.7
044A0:  BSF    FF2.7
044A2:  MOVF   01,W
044A4:  ADDLW  4C
044A6:  MOVLB  6
044A8:  MOVWF  x63
044AA:  MOVLW  01
044AC:  ADDWFC 02,W
044AE:  MOVWF  x64
044B0:  MOVLW  01
044B2:  ADDWF  x63,W
044B4:  MOVWF  01
044B6:  MOVLW  00
044B8:  ADDWFC x64,W
044BA:  MOVWF  03
044BC:  MOVF   01,W
044BE:  ADDLW  3E
044C0:  MOVWF  01
044C2:  MOVLW  01
044C4:  ADDWFC 03,F
044C6:  MOVF   01,W
044C8:  ADDLW  13
044CA:  MOVWF  FE9
044CC:  MOVLW  00
044CE:  ADDWFC 03,W
044D0:  MOVWF  FEA
044D2:  BCF    FEF.0
044D4:  CLRF   1B
044D6:  BTFSC  FF2.6
044D8:  BSF    1B.6
044DA:  BCF    FF2.6
044DC:  BTFSC  FF2.7
044DE:  BSF    1B.7
044E0:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
044E2:  CLRF   xDB
044E4:  MOVFF  661,6DA
044E8:  CLRF   xDD
044EA:  MOVLW  2F
044EC:  MOVWF  xDC
044EE:  MOVLB  0
044F0:  CALL   0420
044F4:  BTFSC  1B.6
044F6:  BSF    FF2.6
044F8:  BTFSC  1B.7
044FA:  BSF    FF2.7
044FC:  MOVF   01,W
044FE:  ADDLW  4C
04500:  MOVLB  6
04502:  MOVWF  x63
04504:  MOVLW  01
04506:  ADDWFC 02,W
04508:  MOVWF  x64
0450A:  MOVLW  01
0450C:  ADDWF  x63,W
0450E:  MOVWF  01
04510:  MOVLW  00
04512:  ADDWFC x64,W
04514:  MOVWF  03
04516:  MOVF   01,W
04518:  ADDLW  3E
0451A:  MOVWF  01
0451C:  MOVLW  01
0451E:  ADDWFC 03,F
04520:  MOVF   01,W
04522:  ADDLW  09
04524:  MOVWF  FE9
04526:  MOVLW  00
04528:  ADDWFC 03,W
0452A:  MOVWF  FEA
0452C:  BTFSS  FEF.0
0452E:  BRA    4718
04530:  CLRF   1B
04532:  BTFSC  FF2.6
04534:  BSF    1B.6
04536:  BCF    FF2.6
04538:  BTFSC  FF2.7
0453A:  BSF    1B.7
0453C:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
0453E:  CLRF   xDB
04540:  MOVFF  661,6DA
04544:  CLRF   xDD
04546:  MOVLW  2F
04548:  MOVWF  xDC
0454A:  MOVLB  0
0454C:  CALL   0420
04550:  BTFSC  1B.6
04552:  BSF    FF2.6
04554:  BTFSC  1B.7
04556:  BSF    FF2.7
04558:  MOVF   01,W
0455A:  ADDLW  4C
0455C:  MOVLB  6
0455E:  MOVWF  x63
04560:  MOVLW  01
04562:  ADDWFC 02,W
04564:  MOVWF  x64
04566:  MOVLW  01
04568:  ADDWF  x63,W
0456A:  MOVWF  01
0456C:  MOVLW  00
0456E:  ADDWFC x64,W
04570:  MOVWF  03
04572:  MOVF   01,W
04574:  ADDLW  3E
04576:  MOVWF  01
04578:  MOVLW  01
0457A:  ADDWFC 03,F
0457C:  MOVF   01,W
0457E:  ADDLW  08
04580:  MOVWF  FE9
04582:  MOVLW  00
04584:  ADDWFC 03,W
04586:  MOVWF  FEA
04588:  MOVF   FEF,F
0458A:  BTFSC  FD8.2
0458C:  BRA    46BE
0458E:  CLRF   1B
04590:  BTFSC  FF2.6
04592:  BSF    1B.6
04594:  BCF    FF2.6
04596:  BTFSC  FF2.7
04598:  BSF    1B.7
0459A:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
0459C:  CLRF   xDB
0459E:  MOVFF  661,6DA
045A2:  CLRF   xDD
045A4:  MOVLW  2F
045A6:  MOVWF  xDC
045A8:  MOVLB  0
045AA:  CALL   0420
045AE:  BTFSC  1B.6
045B0:  BSF    FF2.6
045B2:  BTFSC  1B.7
045B4:  BSF    FF2.7
045B6:  MOVF   01,W
045B8:  ADDLW  4C
045BA:  MOVLB  6
045BC:  MOVWF  x63
045BE:  MOVLW  01
045C0:  ADDWFC 02,W
045C2:  MOVWF  x64
045C4:  MOVLW  01
045C6:  ADDWF  x63,W
045C8:  MOVWF  01
045CA:  MOVLW  00
045CC:  ADDWFC x64,W
045CE:  MOVWF  03
045D0:  MOVF   01,W
045D2:  ADDLW  3E
045D4:  MOVWF  01
045D6:  MOVLW  01
045D8:  ADDWFC 03,F
045DA:  MOVF   01,W
045DC:  ADDLW  1E
045DE:  MOVWF  FE9
045E0:  MOVLW  00
045E2:  ADDWFC 03,W
045E4:  MOVWF  FEA
045E6:  CLRF   FEF
045E8:  CLRF   1B
045EA:  BTFSC  FF2.6
045EC:  BSF    1B.6
045EE:  BCF    FF2.6
045F0:  BTFSC  FF2.7
045F2:  BSF    1B.7
045F4:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
045F6:  CLRF   xDB
045F8:  MOVFF  661,6DA
045FC:  CLRF   xDD
045FE:  MOVLW  2F
04600:  MOVWF  xDC
04602:  MOVLB  0
04604:  CALL   0420
04608:  BTFSC  1B.6
0460A:  BSF    FF2.6
0460C:  BTFSC  1B.7
0460E:  BSF    FF2.7
04610:  MOVF   01,W
04612:  ADDLW  4C
04614:  MOVLB  6
04616:  MOVWF  x63
04618:  MOVLW  01
0461A:  ADDWFC 02,W
0461C:  MOVWF  x64
0461E:  MOVLW  01
04620:  ADDWF  x63,W
04622:  MOVWF  01
04624:  MOVLW  00
04626:  ADDWFC x64,W
04628:  MOVWF  03
0462A:  MOVF   01,W
0462C:  ADDLW  3E
0462E:  MOVWF  01
04630:  MOVLW  01
04632:  ADDWFC 03,F
04634:  MOVF   01,W
04636:  ADDLW  20
04638:  MOVWF  FE9
0463A:  MOVLW  00
0463C:  ADDWFC 03,W
0463E:  MOVWF  FEA
04640:  CLRF   03
04642:  MOVF   FEF,W
04644:  ADDLW  81
04646:  MOVWF  01
04648:  MOVLW  05
0464A:  ADDWFC 03,F
0464C:  MOVFF  01,665
04650:  MOVFF  03,666
04654:  CLRF   1B
04656:  BTFSC  FF2.6
04658:  BSF    1B.6
0465A:  BCF    FF2.6
0465C:  BTFSC  FF2.7
0465E:  BSF    1B.7
04660:  BCF    FF2.7
04662:  CLRF   xDB
04664:  MOVFF  661,6DA
04668:  CLRF   xDD
0466A:  MOVLW  2F
0466C:  MOVWF  xDC
0466E:  MOVLB  0
04670:  CALL   0420
04674:  BTFSC  1B.6
04676:  BSF    FF2.6
04678:  BTFSC  1B.7
0467A:  BSF    FF2.7
0467C:  MOVF   01,W
0467E:  ADDLW  4C
04680:  MOVLB  6
04682:  MOVWF  x67
04684:  MOVLW  01
04686:  ADDWFC 02,W
04688:  MOVWF  x68
0468A:  MOVLW  01
0468C:  ADDWF  x67,W
0468E:  MOVWF  01
04690:  MOVLW  00
04692:  ADDWFC x68,W
04694:  MOVWF  03
04696:  MOVF   01,W
04698:  ADDLW  3E
0469A:  MOVWF  01
0469C:  MOVLW  01
0469E:  ADDWFC 03,F
046A0:  MOVF   01,W
046A2:  ADDLW  1C
046A4:  MOVWF  FE9
046A6:  MOVLW  00
046A8:  ADDWFC 03,W
046AA:  MOVWF  FEA
046AC:  MOVFF  FEF,669
046B0:  MOVFF  666,FEA
046B4:  MOVFF  665,FE9
046B8:  MOVFF  669,FEF
....................                   update_dimmers=true; 
046BC:  BSF    x62.0
046BE:  CLRF   1B
046C0:  BTFSC  FF2.6
046C2:  BSF    1B.6
046C4:  BCF    FF2.6
046C6:  BTFSC  FF2.7
046C8:  BSF    1B.7
046CA:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
046CC:  CLRF   xDB
046CE:  MOVFF  661,6DA
046D2:  CLRF   xDD
046D4:  MOVLW  2F
046D6:  MOVWF  xDC
046D8:  MOVLB  0
046DA:  CALL   0420
046DE:  BTFSC  1B.6
046E0:  BSF    FF2.6
046E2:  BTFSC  1B.7
046E4:  BSF    FF2.7
046E6:  MOVF   01,W
046E8:  ADDLW  4C
046EA:  MOVLB  6
046EC:  MOVWF  x63
046EE:  MOVLW  01
046F0:  ADDWFC 02,W
046F2:  MOVWF  x64
046F4:  MOVLW  01
046F6:  ADDWF  x63,W
046F8:  MOVWF  01
046FA:  MOVLW  00
046FC:  ADDWFC x64,W
046FE:  MOVWF  03
04700:  MOVF   01,W
04702:  ADDLW  3E
04704:  MOVWF  01
04706:  MOVLW  01
04708:  ADDWFC 03,F
0470A:  MOVF   01,W
0470C:  ADDLW  09
0470E:  MOVWF  FE9
04710:  MOVLW  00
04712:  ADDWFC 03,W
04714:  MOVWF  FEA
04716:  BCF    FEF.0
....................             } 
....................          break; 
04718:  MOVLB  0
0471A:  GOTO   562C
....................          case _on_off: 
0471E:  CLRF   1B
04720:  BTFSC  FF2.6
04722:  BSF    1B.6
04724:  BCF    FF2.6
04726:  BTFSC  FF2.7
04728:  BSF    1B.7
0472A:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
0472C:  MOVLB  6
0472E:  CLRF   xDB
04730:  MOVFF  661,6DA
04734:  CLRF   xDD
04736:  MOVLW  2F
04738:  MOVWF  xDC
0473A:  MOVLB  0
0473C:  CALL   0420
04740:  BTFSC  1B.6
04742:  BSF    FF2.6
04744:  BTFSC  1B.7
04746:  BSF    FF2.7
04748:  MOVF   01,W
0474A:  ADDLW  4C
0474C:  MOVLB  6
0474E:  MOVWF  x63
04750:  MOVLW  01
04752:  ADDWFC 02,W
04754:  MOVWF  x64
04756:  MOVLW  01
04758:  ADDWF  x63,W
0475A:  MOVWF  01
0475C:  MOVLW  00
0475E:  ADDWFC x64,W
04760:  MOVWF  03
04762:  MOVF   01,W
04764:  ADDLW  3E
04766:  MOVWF  01
04768:  MOVLW  01
0476A:  ADDWFC 03,F
0476C:  MOVF   01,W
0476E:  ADDLW  13
04770:  MOVWF  FE9
04772:  MOVLW  00
04774:  ADDWFC 03,W
04776:  MOVWF  FEA
04778:  BTFSS  FEF.0
0477A:  BRA    48B2
0477C:  CLRF   1B
0477E:  BTFSC  FF2.6
04780:  BSF    1B.6
04782:  BCF    FF2.6
04784:  BTFSC  FF2.7
04786:  BSF    1B.7
04788:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
0478A:  CLRF   xDB
0478C:  MOVFF  661,6DA
04790:  CLRF   xDD
04792:  MOVLW  2F
04794:  MOVWF  xDC
04796:  MOVLB  0
04798:  CALL   0420
0479C:  BTFSC  1B.6
0479E:  BSF    FF2.6
047A0:  BTFSC  1B.7
047A2:  BSF    FF2.7
047A4:  MOVF   01,W
047A6:  ADDLW  4C
047A8:  MOVLB  6
047AA:  MOVWF  x63
047AC:  MOVLW  01
047AE:  ADDWFC 02,W
047B0:  MOVWF  x64
047B2:  MOVLW  01
047B4:  ADDWF  x63,W
047B6:  MOVWF  01
047B8:  MOVLW  00
047BA:  ADDWFC x64,W
047BC:  MOVWF  03
047BE:  MOVF   01,W
047C0:  ADDLW  3E
047C2:  MOVWF  01
047C4:  MOVLW  01
047C6:  ADDWFC 03,F
047C8:  MOVF   01,W
047CA:  ADDLW  12
047CC:  MOVWF  FE9
047CE:  MOVLW  00
047D0:  ADDWFC 03,W
047D2:  MOVWF  FEA
047D4:  MOVF   FEF,F
047D6:  BZ    4858
047D8:  CLRF   1B
047DA:  BTFSC  FF2.6
047DC:  BSF    1B.6
047DE:  BCF    FF2.6
047E0:  BTFSC  FF2.7
047E2:  BSF    1B.7
047E4:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
047E6:  CLRF   xDB
047E8:  MOVFF  661,6DA
047EC:  CLRF   xDD
047EE:  MOVLW  2F
047F0:  MOVWF  xDC
047F2:  MOVLB  0
047F4:  CALL   0420
047F8:  BTFSC  1B.6
047FA:  BSF    FF2.6
047FC:  BTFSC  1B.7
047FE:  BSF    FF2.7
04800:  MOVF   01,W
04802:  ADDLW  4C
04804:  MOVLB  6
04806:  MOVWF  x63
04808:  MOVLW  01
0480A:  ADDWFC 02,W
0480C:  MOVWF  x64
0480E:  MOVLW  01
04810:  ADDWF  x63,W
04812:  MOVWF  01
04814:  MOVLW  00
04816:  ADDWFC x64,W
04818:  MOVWF  03
0481A:  MOVF   01,W
0481C:  ADDLW  3E
0481E:  MOVWF  01
04820:  MOVLW  01
04822:  ADDWFC 03,F
04824:  MOVF   01,W
04826:  ADDLW  14
04828:  MOVWF  FE9
0482A:  MOVLW  00
0482C:  ADDWFC 03,W
0482E:  MOVWF  FEA
04830:  BCF    FD8.0
04832:  RLCF   FEF,W
04834:  CLRF   03
04836:  MOVLB  0
04838:  CALL   0176
0483C:  TBLRD*+
0483E:  MOVFF  FF5,03
04842:  CLRF   00
04844:  DECF   00,F
04846:  XORWF  00,F
04848:  MOVLW  FF
0484A:  XORWF  03,F
0484C:  MOVF   00,W
0484E:  MOVLB  5
04850:  IORWF  x7F,F
04852:  MOVF   03,W
04854:  IORWF  x80,F
04856:  MOVLB  6
04858:  CLRF   1B
0485A:  BTFSC  FF2.6
0485C:  BSF    1B.6
0485E:  BCF    FF2.6
04860:  BTFSC  FF2.7
04862:  BSF    1B.7
04864:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
04866:  CLRF   xDB
04868:  MOVFF  661,6DA
0486C:  CLRF   xDD
0486E:  MOVLW  2F
04870:  MOVWF  xDC
04872:  MOVLB  0
04874:  CALL   0420
04878:  BTFSC  1B.6
0487A:  BSF    FF2.6
0487C:  BTFSC  1B.7
0487E:  BSF    FF2.7
04880:  MOVF   01,W
04882:  ADDLW  4C
04884:  MOVLB  6
04886:  MOVWF  x63
04888:  MOVLW  01
0488A:  ADDWFC 02,W
0488C:  MOVWF  x64
0488E:  MOVLW  01
04890:  ADDWF  x63,W
04892:  MOVWF  01
04894:  MOVLW  00
04896:  ADDWFC x64,W
04898:  MOVWF  03
0489A:  MOVF   01,W
0489C:  ADDLW  3E
0489E:  MOVWF  01
048A0:  MOVLW  01
048A2:  ADDWFC 03,F
048A4:  MOVF   01,W
048A6:  ADDLW  13
048A8:  MOVWF  FE9
048AA:  MOVLW  00
048AC:  ADDWFC 03,W
048AE:  MOVWF  FEA
048B0:  BCF    FEF.0
048B2:  CLRF   1B
048B4:  BTFSC  FF2.6
048B6:  BSF    1B.6
048B8:  BCF    FF2.6
048BA:  BTFSC  FF2.7
048BC:  BSF    1B.7
048BE:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
048C0:  CLRF   xDB
048C2:  MOVFF  661,6DA
048C6:  CLRF   xDD
048C8:  MOVLW  2F
048CA:  MOVWF  xDC
048CC:  MOVLB  0
048CE:  CALL   0420
048D2:  BTFSC  1B.6
048D4:  BSF    FF2.6
048D6:  BTFSC  1B.7
048D8:  BSF    FF2.7
048DA:  MOVF   01,W
048DC:  ADDLW  4C
048DE:  MOVLB  6
048E0:  MOVWF  x63
048E2:  MOVLW  01
048E4:  ADDWFC 02,W
048E6:  MOVWF  x64
048E8:  MOVLW  01
048EA:  ADDWF  x63,W
048EC:  MOVWF  01
048EE:  MOVLW  00
048F0:  ADDWFC x64,W
048F2:  MOVWF  03
048F4:  MOVF   01,W
048F6:  ADDLW  3E
048F8:  MOVWF  01
048FA:  MOVLW  01
048FC:  ADDWFC 03,F
048FE:  MOVF   01,W
04900:  ADDLW  09
04902:  MOVWF  FE9
04904:  MOVLW  00
04906:  ADDWFC 03,W
04908:  MOVWF  FEA
0490A:  BTFSS  FEF.0
0490C:  BRA    4A38
0490E:  CLRF   1B
04910:  BTFSC  FF2.6
04912:  BSF    1B.6
04914:  BCF    FF2.6
04916:  BTFSC  FF2.7
04918:  BSF    1B.7
0491A:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
0491C:  CLRF   xDB
0491E:  MOVFF  661,6DA
04922:  CLRF   xDD
04924:  MOVLW  2F
04926:  MOVWF  xDC
04928:  MOVLB  0
0492A:  CALL   0420
0492E:  BTFSC  1B.6
04930:  BSF    FF2.6
04932:  BTFSC  1B.7
04934:  BSF    FF2.7
04936:  MOVF   01,W
04938:  ADDLW  4C
0493A:  MOVLB  6
0493C:  MOVWF  x63
0493E:  MOVLW  01
04940:  ADDWFC 02,W
04942:  MOVWF  x64
04944:  MOVLW  01
04946:  ADDWF  x63,W
04948:  MOVWF  01
0494A:  MOVLW  00
0494C:  ADDWFC x64,W
0494E:  MOVWF  03
04950:  MOVF   01,W
04952:  ADDLW  3E
04954:  MOVWF  01
04956:  MOVLW  01
04958:  ADDWFC 03,F
0495A:  MOVF   01,W
0495C:  ADDLW  08
0495E:  MOVWF  FE9
04960:  MOVLW  00
04962:  ADDWFC 03,W
04964:  MOVWF  FEA
04966:  MOVF   FEF,F
04968:  BZ    49DE
0496A:  CLRF   1B
0496C:  BTFSC  FF2.6
0496E:  BSF    1B.6
04970:  BCF    FF2.6
04972:  BTFSC  FF2.7
04974:  BSF    1B.7
04976:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04978:  CLRF   xDB
0497A:  MOVFF  661,6DA
0497E:  CLRF   xDD
04980:  MOVLW  2F
04982:  MOVWF  xDC
04984:  MOVLB  0
04986:  CALL   0420
0498A:  BTFSC  1B.6
0498C:  BSF    FF2.6
0498E:  BTFSC  1B.7
04990:  BSF    FF2.7
04992:  MOVF   01,W
04994:  ADDLW  4C
04996:  MOVLB  6
04998:  MOVWF  x63
0499A:  MOVLW  01
0499C:  ADDWFC 02,W
0499E:  MOVWF  x64
049A0:  MOVLW  01
049A2:  ADDWF  x63,W
049A4:  MOVWF  01
049A6:  MOVLW  00
049A8:  ADDWFC x64,W
049AA:  MOVWF  03
049AC:  MOVF   01,W
049AE:  ADDLW  3E
049B0:  MOVWF  01
049B2:  MOVLW  01
049B4:  ADDWFC 03,F
049B6:  MOVF   01,W
049B8:  ADDLW  14
049BA:  MOVWF  FE9
049BC:  MOVLW  00
049BE:  ADDWFC 03,W
049C0:  MOVWF  FEA
049C2:  BCF    FD8.0
049C4:  RLCF   FEF,W
049C6:  CLRF   03
049C8:  MOVLB  0
049CA:  CALL   0176
049CE:  TBLRD*+
049D0:  MOVFF  FF5,03
049D4:  MOVLB  5
049D6:  ANDWF  x7F,F
049D8:  MOVF   03,W
049DA:  ANDWF  x80,F
049DC:  MOVLB  6
049DE:  CLRF   1B
049E0:  BTFSC  FF2.6
049E2:  BSF    1B.6
049E4:  BCF    FF2.6
049E6:  BTFSC  FF2.7
049E8:  BSF    1B.7
049EA:  BCF    FF2.7
....................                   
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
049EC:  CLRF   xDB
049EE:  MOVFF  661,6DA
049F2:  CLRF   xDD
049F4:  MOVLW  2F
049F6:  MOVWF  xDC
049F8:  MOVLB  0
049FA:  CALL   0420
049FE:  BTFSC  1B.6
04A00:  BSF    FF2.6
04A02:  BTFSC  1B.7
04A04:  BSF    FF2.7
04A06:  MOVF   01,W
04A08:  ADDLW  4C
04A0A:  MOVLB  6
04A0C:  MOVWF  x63
04A0E:  MOVLW  01
04A10:  ADDWFC 02,W
04A12:  MOVWF  x64
04A14:  MOVLW  01
04A16:  ADDWF  x63,W
04A18:  MOVWF  01
04A1A:  MOVLW  00
04A1C:  ADDWFC x64,W
04A1E:  MOVWF  03
04A20:  MOVF   01,W
04A22:  ADDLW  3E
04A24:  MOVWF  01
04A26:  MOVLW  01
04A28:  ADDWFC 03,F
04A2A:  MOVF   01,W
04A2C:  ADDLW  09
04A2E:  MOVWF  FE9
04A30:  MOVLW  00
04A32:  ADDWFC 03,W
04A34:  MOVWF  FEA
04A36:  BCF    FEF.0
....................             } 
....................          break; 
04A38:  MOVLB  0
04A3A:  GOTO   562C
....................            case shutter: 
04A3E:  CLRF   1B
04A40:  BTFSC  FF2.6
04A42:  BSF    1B.6
04A44:  BCF    FF2.6
04A46:  BTFSC  FF2.7
04A48:  BSF    1B.7
04A4A:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
04A4C:  MOVLB  6
04A4E:  CLRF   xDB
04A50:  MOVFF  661,6DA
04A54:  CLRF   xDD
04A56:  MOVLW  2F
04A58:  MOVWF  xDC
04A5A:  MOVLB  0
04A5C:  CALL   0420
04A60:  BTFSC  1B.6
04A62:  BSF    FF2.6
04A64:  BTFSC  1B.7
04A66:  BSF    FF2.7
04A68:  MOVF   01,W
04A6A:  ADDLW  4C
04A6C:  MOVLB  6
04A6E:  MOVWF  x63
04A70:  MOVLW  01
04A72:  ADDWFC 02,W
04A74:  MOVWF  x64
04A76:  MOVLW  01
04A78:  ADDWF  x63,W
04A7A:  MOVWF  01
04A7C:  MOVLW  00
04A7E:  ADDWFC x64,W
04A80:  MOVWF  03
04A82:  MOVF   01,W
04A84:  ADDLW  3E
04A86:  MOVWF  01
04A88:  MOVLW  01
04A8A:  ADDWFC 03,F
04A8C:  MOVF   01,W
04A8E:  ADDLW  09
04A90:  MOVWF  FE9
04A92:  MOVLW  00
04A94:  ADDWFC 03,W
04A96:  MOVWF  FEA
04A98:  BTFSS  FEF.0
04A9A:  BRA    4D38
04A9C:  CLRF   1B
04A9E:  BTFSC  FF2.6
04AA0:  BSF    1B.6
04AA2:  BCF    FF2.6
04AA4:  BTFSC  FF2.7
04AA6:  BSF    1B.7
04AA8:  BCF    FF2.7
04AAA:  CLRF   xDB
04AAC:  MOVFF  661,6DA
04AB0:  CLRF   xDD
04AB2:  MOVLW  2F
04AB4:  MOVWF  xDC
04AB6:  MOVLB  0
04AB8:  CALL   0420
04ABC:  BTFSC  1B.6
04ABE:  BSF    FF2.6
04AC0:  BTFSC  1B.7
04AC2:  BSF    FF2.7
04AC4:  MOVF   01,W
04AC6:  ADDLW  4C
04AC8:  MOVLB  6
04ACA:  MOVWF  x65
04ACC:  MOVLW  01
04ACE:  ADDWFC 02,W
04AD0:  MOVWF  x66
04AD2:  MOVLW  01
04AD4:  ADDWF  x65,W
04AD6:  MOVWF  01
04AD8:  MOVLW  00
04ADA:  ADDWFC x66,W
04ADC:  MOVWF  03
04ADE:  MOVF   01,W
04AE0:  ADDLW  3E
04AE2:  MOVWF  01
04AE4:  MOVLW  01
04AE6:  ADDWFC 03,F
04AE8:  MOVF   01,W
04AEA:  ADDLW  2D
04AEC:  MOVWF  FE9
04AEE:  MOVLW  00
04AF0:  ADDWFC 03,W
04AF2:  MOVWF  FEA
04AF4:  MOVF   FEF,W
04AF6:  SUBLW  04
04AF8:  BZ    4B58
04AFA:  CLRF   1B
04AFC:  BTFSC  FF2.6
04AFE:  BSF    1B.6
04B00:  BCF    FF2.6
04B02:  BTFSC  FF2.7
04B04:  BSF    1B.7
04B06:  BCF    FF2.7
04B08:  CLRF   xDB
04B0A:  MOVFF  661,6DA
04B0E:  CLRF   xDD
04B10:  MOVLW  2F
04B12:  MOVWF  xDC
04B14:  MOVLB  0
04B16:  CALL   0420
04B1A:  BTFSC  1B.6
04B1C:  BSF    FF2.6
04B1E:  BTFSC  1B.7
04B20:  BSF    FF2.7
04B22:  MOVF   01,W
04B24:  ADDLW  4C
04B26:  MOVLB  6
04B28:  MOVWF  x67
04B2A:  MOVLW  01
04B2C:  ADDWFC 02,W
04B2E:  MOVWF  x68
04B30:  MOVLW  01
04B32:  ADDWF  x67,W
04B34:  MOVWF  01
04B36:  MOVLW  00
04B38:  ADDWFC x68,W
04B3A:  MOVWF  03
04B3C:  MOVF   01,W
04B3E:  ADDLW  3E
04B40:  MOVWF  01
04B42:  MOVLW  01
04B44:  ADDWFC 03,F
04B46:  MOVF   01,W
04B48:  ADDLW  2D
04B4A:  MOVWF  FE9
04B4C:  MOVLW  00
04B4E:  ADDWFC 03,W
04B50:  MOVWF  FEA
04B52:  MOVF   FEF,F
04B54:  BTFSS  FD8.2
04B56:  BRA    4D38
04B58:  CLRF   1B
04B5A:  BTFSC  FF2.6
04B5C:  BSF    1B.6
04B5E:  BCF    FF2.6
04B60:  BTFSC  FF2.7
04B62:  BSF    1B.7
04B64:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
04B66:  CLRF   xDB
04B68:  MOVFF  661,6DA
04B6C:  CLRF   xDD
04B6E:  MOVLW  2F
04B70:  MOVWF  xDC
04B72:  MOVLB  0
04B74:  CALL   0420
04B78:  BTFSC  1B.6
04B7A:  BSF    FF2.6
04B7C:  BTFSC  1B.7
04B7E:  BSF    FF2.7
04B80:  MOVF   01,W
04B82:  ADDLW  4C
04B84:  MOVLB  6
04B86:  MOVWF  x63
04B88:  MOVLW  01
04B8A:  ADDWFC 02,W
04B8C:  MOVWF  x64
04B8E:  MOVLW  01
04B90:  ADDWF  x63,W
04B92:  MOVWF  01
04B94:  MOVLW  00
04B96:  ADDWFC x64,W
04B98:  MOVWF  03
04B9A:  MOVF   01,W
04B9C:  ADDLW  3E
04B9E:  MOVWF  01
04BA0:  MOVLW  01
04BA2:  ADDWFC 03,F
04BA4:  MOVF   01,W
04BA6:  ADDLW  08
04BA8:  MOVWF  FE9
04BAA:  MOVLW  00
04BAC:  ADDWFC 03,W
04BAE:  MOVWF  FEA
04BB0:  MOVF   FEF,F
04BB2:  BTFSC  FD8.2
04BB4:  BRA    4CDE
04BB6:  CLRF   1B
04BB8:  BTFSC  FF2.6
04BBA:  BSF    1B.6
04BBC:  BCF    FF2.6
04BBE:  BTFSC  FF2.7
04BC0:  BSF    1B.7
04BC2:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04BC4:  CLRF   xDB
04BC6:  MOVFF  661,6DA
04BCA:  CLRF   xDD
04BCC:  MOVLW  2F
04BCE:  MOVWF  xDC
04BD0:  MOVLB  0
04BD2:  CALL   0420
04BD6:  BTFSC  1B.6
04BD8:  BSF    FF2.6
04BDA:  BTFSC  1B.7
04BDC:  BSF    FF2.7
04BDE:  MOVF   01,W
04BE0:  ADDLW  4C
04BE2:  MOVLB  6
04BE4:  MOVWF  x63
04BE6:  MOVLW  01
04BE8:  ADDWFC 02,W
04BEA:  MOVWF  x64
04BEC:  MOVLW  01
04BEE:  ADDWF  x63,W
04BF0:  MOVWF  01
04BF2:  MOVLW  00
04BF4:  ADDWFC x64,W
04BF6:  MOVWF  03
04BF8:  MOVF   01,W
04BFA:  ADDLW  3E
04BFC:  MOVWF  01
04BFE:  MOVLW  01
04C00:  ADDWFC 03,F
04C02:  MOVF   01,W
04C04:  ADDLW  2A
04C06:  MOVWF  FE9
04C08:  MOVLW  00
04C0A:  ADDWFC 03,W
04C0C:  MOVWF  FEA
04C0E:  CLRF   FEF
04C10:  CLRF   1B
04C12:  BTFSC  FF2.6
04C14:  BSF    1B.6
04C16:  BCF    FF2.6
04C18:  BTFSC  FF2.7
04C1A:  BSF    1B.7
04C1C:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
04C1E:  CLRF   xDB
04C20:  MOVFF  661,6DA
04C24:  CLRF   xDD
04C26:  MOVLW  2F
04C28:  MOVWF  xDC
04C2A:  MOVLB  0
04C2C:  CALL   0420
04C30:  BTFSC  1B.6
04C32:  BSF    FF2.6
04C34:  BTFSC  1B.7
04C36:  BSF    FF2.7
04C38:  MOVF   01,W
04C3A:  ADDLW  4C
04C3C:  MOVLB  6
04C3E:  MOVWF  x63
04C40:  MOVLW  01
04C42:  ADDWFC 02,W
04C44:  MOVWF  x64
04C46:  MOVLW  01
04C48:  ADDWF  x63,W
04C4A:  MOVWF  01
04C4C:  MOVLW  00
04C4E:  ADDWFC x64,W
04C50:  MOVWF  03
04C52:  MOVF   01,W
04C54:  ADDLW  3E
04C56:  MOVWF  01
04C58:  MOVLW  01
04C5A:  ADDWFC 03,F
04C5C:  MOVF   01,W
04C5E:  ADDLW  2D
04C60:  MOVWF  FE9
04C62:  MOVLW  00
04C64:  ADDWFC 03,W
04C66:  MOVWF  FEA
04C68:  CLRF   FEF
04C6A:  CLRF   1B
04C6C:  BTFSC  FF2.6
04C6E:  BSF    1B.6
04C70:  BCF    FF2.6
04C72:  BTFSC  FF2.7
04C74:  BSF    1B.7
04C76:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04C78:  CLRF   xDB
04C7A:  MOVFF  661,6DA
04C7E:  CLRF   xDD
04C80:  MOVLW  2F
04C82:  MOVWF  xDC
04C84:  MOVLB  0
04C86:  CALL   0420
04C8A:  BTFSC  1B.6
04C8C:  BSF    FF2.6
04C8E:  BTFSC  1B.7
04C90:  BSF    FF2.7
04C92:  MOVF   01,W
04C94:  ADDLW  4C
04C96:  MOVLB  6
04C98:  MOVWF  x63
04C9A:  MOVLW  01
04C9C:  ADDWFC 02,W
04C9E:  MOVWF  x64
04CA0:  MOVLW  01
04CA2:  ADDWF  x63,W
04CA4:  MOVWF  01
04CA6:  MOVLW  00
04CA8:  ADDWFC x64,W
04CAA:  MOVWF  03
04CAC:  MOVF   01,W
04CAE:  ADDLW  3E
04CB0:  MOVWF  01
04CB2:  MOVLW  01
04CB4:  ADDWFC 03,F
04CB6:  MOVF   01,W
04CB8:  ADDLW  28
04CBA:  MOVWF  FE9
04CBC:  MOVLW  00
04CBE:  ADDWFC 03,W
04CC0:  MOVWF  FEA
04CC2:  BCF    FD8.0
04CC4:  RLCF   FEF,W
04CC6:  CLRF   03
04CC8:  MOVLB  0
04CCA:  CALL   0176
04CCE:  TBLRD*+
04CD0:  MOVFF  FF5,03
04CD4:  MOVLB  5
04CD6:  ANDWF  x7F,F
04CD8:  MOVF   03,W
04CDA:  ANDWF  x80,F
04CDC:  MOVLB  6
04CDE:  CLRF   1B
04CE0:  BTFSC  FF2.6
04CE2:  BSF    1B.6
04CE4:  BCF    FF2.6
04CE6:  BTFSC  FF2.7
04CE8:  BSF    1B.7
04CEA:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
04CEC:  CLRF   xDB
04CEE:  MOVFF  661,6DA
04CF2:  CLRF   xDD
04CF4:  MOVLW  2F
04CF6:  MOVWF  xDC
04CF8:  MOVLB  0
04CFA:  CALL   0420
04CFE:  BTFSC  1B.6
04D00:  BSF    FF2.6
04D02:  BTFSC  1B.7
04D04:  BSF    FF2.7
04D06:  MOVF   01,W
04D08:  ADDLW  4C
04D0A:  MOVLB  6
04D0C:  MOVWF  x63
04D0E:  MOVLW  01
04D10:  ADDWFC 02,W
04D12:  MOVWF  x64
04D14:  MOVLW  01
04D16:  ADDWF  x63,W
04D18:  MOVWF  01
04D1A:  MOVLW  00
04D1C:  ADDWFC x64,W
04D1E:  MOVWF  03
04D20:  MOVF   01,W
04D22:  ADDLW  3E
04D24:  MOVWF  01
04D26:  MOVLW  01
04D28:  ADDWFC 03,F
04D2A:  MOVF   01,W
04D2C:  ADDLW  09
04D2E:  MOVWF  FE9
04D30:  MOVLW  00
04D32:  ADDWFC 03,W
04D34:  MOVWF  FEA
04D36:  BCF    FEF.0
04D38:  CLRF   1B
04D3A:  BTFSC  FF2.6
04D3C:  BSF    1B.6
04D3E:  BCF    FF2.6
04D40:  BTFSC  FF2.7
04D42:  BSF    1B.7
04D44:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
04D46:  CLRF   xDB
04D48:  MOVFF  661,6DA
04D4C:  CLRF   xDD
04D4E:  MOVLW  2F
04D50:  MOVWF  xDC
04D52:  MOVLB  0
04D54:  CALL   0420
04D58:  BTFSC  1B.6
04D5A:  BSF    FF2.6
04D5C:  BTFSC  1B.7
04D5E:  BSF    FF2.7
04D60:  MOVF   01,W
04D62:  ADDLW  4C
04D64:  MOVLB  6
04D66:  MOVWF  x63
04D68:  MOVLW  01
04D6A:  ADDWFC 02,W
04D6C:  MOVWF  x64
04D6E:  MOVLW  01
04D70:  ADDWF  x63,W
04D72:  MOVWF  01
04D74:  MOVLW  00
04D76:  ADDWFC x64,W
04D78:  MOVWF  03
04D7A:  MOVF   01,W
04D7C:  ADDLW  3E
04D7E:  MOVWF  01
04D80:  MOVLW  01
04D82:  ADDWFC 03,F
04D84:  MOVF   01,W
04D86:  ADDLW  13
04D88:  MOVWF  FE9
04D8A:  MOVLW  00
04D8C:  ADDWFC 03,W
04D8E:  MOVWF  FEA
04D90:  BTFSS  FEF.0
04D92:  BRA    5030
04D94:  CLRF   1B
04D96:  BTFSC  FF2.6
04D98:  BSF    1B.6
04D9A:  BCF    FF2.6
04D9C:  BTFSC  FF2.7
04D9E:  BSF    1B.7
04DA0:  BCF    FF2.7
04DA2:  CLRF   xDB
04DA4:  MOVFF  661,6DA
04DA8:  CLRF   xDD
04DAA:  MOVLW  2F
04DAC:  MOVWF  xDC
04DAE:  MOVLB  0
04DB0:  CALL   0420
04DB4:  BTFSC  1B.6
04DB6:  BSF    FF2.6
04DB8:  BTFSC  1B.7
04DBA:  BSF    FF2.7
04DBC:  MOVF   01,W
04DBE:  ADDLW  4C
04DC0:  MOVLB  6
04DC2:  MOVWF  x65
04DC4:  MOVLW  01
04DC6:  ADDWFC 02,W
04DC8:  MOVWF  x66
04DCA:  MOVLW  01
04DCC:  ADDWF  x65,W
04DCE:  MOVWF  01
04DD0:  MOVLW  00
04DD2:  ADDWFC x66,W
04DD4:  MOVWF  03
04DD6:  MOVF   01,W
04DD8:  ADDLW  3E
04DDA:  MOVWF  01
04DDC:  MOVLW  01
04DDE:  ADDWFC 03,F
04DE0:  MOVF   01,W
04DE2:  ADDLW  2D
04DE4:  MOVWF  FE9
04DE6:  MOVLW  00
04DE8:  ADDWFC 03,W
04DEA:  MOVWF  FEA
04DEC:  MOVF   FEF,W
04DEE:  SUBLW  04
04DF0:  BZ    4E4E
04DF2:  CLRF   1B
04DF4:  BTFSC  FF2.6
04DF6:  BSF    1B.6
04DF8:  BCF    FF2.6
04DFA:  BTFSC  FF2.7
04DFC:  BSF    1B.7
04DFE:  BCF    FF2.7
04E00:  CLRF   xDB
04E02:  MOVFF  661,6DA
04E06:  CLRF   xDD
04E08:  MOVLW  2F
04E0A:  MOVWF  xDC
04E0C:  MOVLB  0
04E0E:  CALL   0420
04E12:  BTFSC  1B.6
04E14:  BSF    FF2.6
04E16:  BTFSC  1B.7
04E18:  BSF    FF2.7
04E1A:  MOVF   01,W
04E1C:  ADDLW  4C
04E1E:  MOVLB  6
04E20:  MOVWF  x67
04E22:  MOVLW  01
04E24:  ADDWFC 02,W
04E26:  MOVWF  x68
04E28:  MOVLW  01
04E2A:  ADDWF  x67,W
04E2C:  MOVWF  01
04E2E:  MOVLW  00
04E30:  ADDWFC x68,W
04E32:  MOVWF  03
04E34:  MOVF   01,W
04E36:  ADDLW  3E
04E38:  MOVWF  01
04E3A:  MOVLW  01
04E3C:  ADDWFC 03,F
04E3E:  MOVF   01,W
04E40:  ADDLW  2D
04E42:  MOVWF  FE9
04E44:  MOVLW  00
04E46:  ADDWFC 03,W
04E48:  MOVWF  FEA
04E4A:  DECFSZ FEF,W
04E4C:  BRA    5030
04E4E:  CLRF   1B
04E50:  BTFSC  FF2.6
04E52:  BSF    1B.6
04E54:  BCF    FF2.6
04E56:  BTFSC  FF2.7
04E58:  BSF    1B.7
04E5A:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
04E5C:  CLRF   xDB
04E5E:  MOVFF  661,6DA
04E62:  CLRF   xDD
04E64:  MOVLW  2F
04E66:  MOVWF  xDC
04E68:  MOVLB  0
04E6A:  CALL   0420
04E6E:  BTFSC  1B.6
04E70:  BSF    FF2.6
04E72:  BTFSC  1B.7
04E74:  BSF    FF2.7
04E76:  MOVF   01,W
04E78:  ADDLW  4C
04E7A:  MOVLB  6
04E7C:  MOVWF  x63
04E7E:  MOVLW  01
04E80:  ADDWFC 02,W
04E82:  MOVWF  x64
04E84:  MOVLW  01
04E86:  ADDWF  x63,W
04E88:  MOVWF  01
04E8A:  MOVLW  00
04E8C:  ADDWFC x64,W
04E8E:  MOVWF  03
04E90:  MOVF   01,W
04E92:  ADDLW  3E
04E94:  MOVWF  01
04E96:  MOVLW  01
04E98:  ADDWFC 03,F
04E9A:  MOVF   01,W
04E9C:  ADDLW  12
04E9E:  MOVWF  FE9
04EA0:  MOVLW  00
04EA2:  ADDWFC 03,W
04EA4:  MOVWF  FEA
04EA6:  MOVF   FEF,F
04EA8:  BTFSC  FD8.2
04EAA:  BRA    4FD6
04EAC:  CLRF   1B
04EAE:  BTFSC  FF2.6
04EB0:  BSF    1B.6
04EB2:  BCF    FF2.6
04EB4:  BTFSC  FF2.7
04EB6:  BSF    1B.7
04EB8:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04EBA:  CLRF   xDB
04EBC:  MOVFF  661,6DA
04EC0:  CLRF   xDD
04EC2:  MOVLW  2F
04EC4:  MOVWF  xDC
04EC6:  MOVLB  0
04EC8:  CALL   0420
04ECC:  BTFSC  1B.6
04ECE:  BSF    FF2.6
04ED0:  BTFSC  1B.7
04ED2:  BSF    FF2.7
04ED4:  MOVF   01,W
04ED6:  ADDLW  4C
04ED8:  MOVLB  6
04EDA:  MOVWF  x63
04EDC:  MOVLW  01
04EDE:  ADDWFC 02,W
04EE0:  MOVWF  x64
04EE2:  MOVLW  01
04EE4:  ADDWF  x63,W
04EE6:  MOVWF  01
04EE8:  MOVLW  00
04EEA:  ADDWFC x64,W
04EEC:  MOVWF  03
04EEE:  MOVF   01,W
04EF0:  ADDLW  3E
04EF2:  MOVWF  01
04EF4:  MOVLW  01
04EF6:  ADDWFC 03,F
04EF8:  MOVF   01,W
04EFA:  ADDLW  2A
04EFC:  MOVWF  FE9
04EFE:  MOVLW  00
04F00:  ADDWFC 03,W
04F02:  MOVWF  FEA
04F04:  CLRF   FEF
04F06:  CLRF   1B
04F08:  BTFSC  FF2.6
04F0A:  BSF    1B.6
04F0C:  BCF    FF2.6
04F0E:  BTFSC  FF2.7
04F10:  BSF    1B.7
04F12:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
04F14:  CLRF   xDB
04F16:  MOVFF  661,6DA
04F1A:  CLRF   xDD
04F1C:  MOVLW  2F
04F1E:  MOVWF  xDC
04F20:  MOVLB  0
04F22:  CALL   0420
04F26:  BTFSC  1B.6
04F28:  BSF    FF2.6
04F2A:  BTFSC  1B.7
04F2C:  BSF    FF2.7
04F2E:  MOVF   01,W
04F30:  ADDLW  4C
04F32:  MOVLB  6
04F34:  MOVWF  x63
04F36:  MOVLW  01
04F38:  ADDWFC 02,W
04F3A:  MOVWF  x64
04F3C:  MOVLW  01
04F3E:  ADDWF  x63,W
04F40:  MOVWF  01
04F42:  MOVLW  00
04F44:  ADDWFC x64,W
04F46:  MOVWF  03
04F48:  MOVF   01,W
04F4A:  ADDLW  3E
04F4C:  MOVWF  01
04F4E:  MOVLW  01
04F50:  ADDWFC 03,F
04F52:  MOVF   01,W
04F54:  ADDLW  2D
04F56:  MOVWF  FE9
04F58:  MOVLW  00
04F5A:  ADDWFC 03,W
04F5C:  MOVWF  FEA
04F5E:  MOVLW  01
04F60:  MOVWF  FEF
04F62:  CLRF   1B
04F64:  BTFSC  FF2.6
04F66:  BSF    1B.6
04F68:  BCF    FF2.6
04F6A:  BTFSC  FF2.7
04F6C:  BSF    1B.7
04F6E:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04F70:  CLRF   xDB
04F72:  MOVFF  661,6DA
04F76:  CLRF   xDD
04F78:  MOVLW  2F
04F7A:  MOVWF  xDC
04F7C:  MOVLB  0
04F7E:  CALL   0420
04F82:  BTFSC  1B.6
04F84:  BSF    FF2.6
04F86:  BTFSC  1B.7
04F88:  BSF    FF2.7
04F8A:  MOVF   01,W
04F8C:  ADDLW  4C
04F8E:  MOVLB  6
04F90:  MOVWF  x63
04F92:  MOVLW  01
04F94:  ADDWFC 02,W
04F96:  MOVWF  x64
04F98:  MOVLW  01
04F9A:  ADDWF  x63,W
04F9C:  MOVWF  01
04F9E:  MOVLW  00
04FA0:  ADDWFC x64,W
04FA2:  MOVWF  03
04FA4:  MOVF   01,W
04FA6:  ADDLW  3E
04FA8:  MOVWF  01
04FAA:  MOVLW  01
04FAC:  ADDWFC 03,F
04FAE:  MOVF   01,W
04FB0:  ADDLW  29
04FB2:  MOVWF  FE9
04FB4:  MOVLW  00
04FB6:  ADDWFC 03,W
04FB8:  MOVWF  FEA
04FBA:  BCF    FD8.0
04FBC:  RLCF   FEF,W
04FBE:  CLRF   03
04FC0:  MOVLB  0
04FC2:  CALL   0176
04FC6:  TBLRD*+
04FC8:  MOVFF  FF5,03
04FCC:  MOVLB  5
04FCE:  ANDWF  x7F,F
04FD0:  MOVF   03,W
04FD2:  ANDWF  x80,F
04FD4:  MOVLB  6
04FD6:  CLRF   1B
04FD8:  BTFSC  FF2.6
04FDA:  BSF    1B.6
04FDC:  BCF    FF2.6
04FDE:  BTFSC  FF2.7
04FE0:  BSF    1B.7
04FE2:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04FE4:  CLRF   xDB
04FE6:  MOVFF  661,6DA
04FEA:  CLRF   xDD
04FEC:  MOVLW  2F
04FEE:  MOVWF  xDC
04FF0:  MOVLB  0
04FF2:  CALL   0420
04FF6:  BTFSC  1B.6
04FF8:  BSF    FF2.6
04FFA:  BTFSC  1B.7
04FFC:  BSF    FF2.7
04FFE:  MOVF   01,W
05000:  ADDLW  4C
05002:  MOVLB  6
05004:  MOVWF  x63
05006:  MOVLW  01
05008:  ADDWFC 02,W
0500A:  MOVWF  x64
0500C:  MOVLW  01
0500E:  ADDWF  x63,W
05010:  MOVWF  01
05012:  MOVLW  00
05014:  ADDWFC x64,W
05016:  MOVWF  03
05018:  MOVF   01,W
0501A:  ADDLW  3E
0501C:  MOVWF  01
0501E:  MOVLW  01
05020:  ADDWFC 03,F
05022:  MOVF   01,W
05024:  ADDLW  13
05026:  MOVWF  FE9
05028:  MOVLW  00
0502A:  ADDWFC 03,W
0502C:  MOVWF  FEA
0502E:  BCF    FEF.0
05030:  CLRF   1B
05032:  BTFSC  FF2.6
05034:  BSF    1B.6
05036:  BCF    FF2.6
05038:  BTFSC  FF2.7
0503A:  BSF    1B.7
0503C:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
0503E:  CLRF   xDB
05040:  MOVFF  661,6DA
05044:  CLRF   xDD
05046:  MOVLW  2F
05048:  MOVWF  xDC
0504A:  MOVLB  0
0504C:  CALL   0420
05050:  BTFSC  1B.6
05052:  BSF    FF2.6
05054:  BTFSC  1B.7
05056:  BSF    FF2.7
05058:  MOVF   01,W
0505A:  ADDLW  4C
0505C:  MOVLB  6
0505E:  MOVWF  x63
05060:  MOVLW  01
05062:  ADDWFC 02,W
05064:  MOVWF  x64
05066:  MOVLW  01
05068:  ADDWF  x63,W
0506A:  MOVWF  01
0506C:  MOVLW  00
0506E:  ADDWFC x64,W
05070:  MOVWF  03
05072:  MOVF   01,W
05074:  ADDLW  3E
05076:  MOVWF  01
05078:  MOVLW  01
0507A:  ADDWFC 03,F
0507C:  MOVF   01,W
0507E:  ADDLW  1D
05080:  MOVWF  FE9
05082:  MOVLW  00
05084:  ADDWFC 03,W
05086:  MOVWF  FEA
05088:  BTFSS  FEF.0
0508A:  BRA    532C
0508C:  CLRF   1B
0508E:  BTFSC  FF2.6
05090:  BSF    1B.6
05092:  BCF    FF2.6
05094:  BTFSC  FF2.7
05096:  BSF    1B.7
05098:  BCF    FF2.7
0509A:  CLRF   xDB
0509C:  MOVFF  661,6DA
050A0:  CLRF   xDD
050A2:  MOVLW  2F
050A4:  MOVWF  xDC
050A6:  MOVLB  0
050A8:  CALL   0420
050AC:  BTFSC  1B.6
050AE:  BSF    FF2.6
050B0:  BTFSC  1B.7
050B2:  BSF    FF2.7
050B4:  MOVF   01,W
050B6:  ADDLW  4C
050B8:  MOVLB  6
050BA:  MOVWF  x65
050BC:  MOVLW  01
050BE:  ADDWFC 02,W
050C0:  MOVWF  x66
050C2:  MOVLW  01
050C4:  ADDWF  x65,W
050C6:  MOVWF  01
050C8:  MOVLW  00
050CA:  ADDWFC x66,W
050CC:  MOVWF  03
050CE:  MOVF   01,W
050D0:  ADDLW  3E
050D2:  MOVWF  01
050D4:  MOVLW  01
050D6:  ADDWFC 03,F
050D8:  MOVF   01,W
050DA:  ADDLW  2D
050DC:  MOVWF  FE9
050DE:  MOVLW  00
050E0:  ADDWFC 03,W
050E2:  MOVWF  FEA
050E4:  MOVF   FEF,W
050E6:  SUBLW  04
050E8:  BZ    514A
050EA:  CLRF   1B
050EC:  BTFSC  FF2.6
050EE:  BSF    1B.6
050F0:  BCF    FF2.6
050F2:  BTFSC  FF2.7
050F4:  BSF    1B.7
050F6:  BCF    FF2.7
050F8:  CLRF   xDB
050FA:  MOVFF  661,6DA
050FE:  CLRF   xDD
05100:  MOVLW  2F
05102:  MOVWF  xDC
05104:  MOVLB  0
05106:  CALL   0420
0510A:  BTFSC  1B.6
0510C:  BSF    FF2.6
0510E:  BTFSC  1B.7
05110:  BSF    FF2.7
05112:  MOVF   01,W
05114:  ADDLW  4C
05116:  MOVLB  6
05118:  MOVWF  x67
0511A:  MOVLW  01
0511C:  ADDWFC 02,W
0511E:  MOVWF  x68
05120:  MOVLW  01
05122:  ADDWF  x67,W
05124:  MOVWF  01
05126:  MOVLW  00
05128:  ADDWFC x68,W
0512A:  MOVWF  03
0512C:  MOVF   01,W
0512E:  ADDLW  3E
05130:  MOVWF  01
05132:  MOVLW  01
05134:  ADDWFC 03,F
05136:  MOVF   01,W
05138:  ADDLW  2D
0513A:  MOVWF  FE9
0513C:  MOVLW  00
0513E:  ADDWFC 03,W
05140:  MOVWF  FEA
05142:  MOVF   FEF,W
05144:  SUBLW  02
05146:  BTFSS  FD8.2
05148:  BRA    532C
0514A:  CLRF   1B
0514C:  BTFSC  FF2.6
0514E:  BSF    1B.6
05150:  BCF    FF2.6
05152:  BTFSC  FF2.7
05154:  BSF    1B.7
05156:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
05158:  CLRF   xDB
0515A:  MOVFF  661,6DA
0515E:  CLRF   xDD
05160:  MOVLW  2F
05162:  MOVWF  xDC
05164:  MOVLB  0
05166:  CALL   0420
0516A:  BTFSC  1B.6
0516C:  BSF    FF2.6
0516E:  BTFSC  1B.7
05170:  BSF    FF2.7
05172:  MOVF   01,W
05174:  ADDLW  4C
05176:  MOVLB  6
05178:  MOVWF  x63
0517A:  MOVLW  01
0517C:  ADDWFC 02,W
0517E:  MOVWF  x64
05180:  MOVLW  01
05182:  ADDWF  x63,W
05184:  MOVWF  01
05186:  MOVLW  00
05188:  ADDWFC x64,W
0518A:  MOVWF  03
0518C:  MOVF   01,W
0518E:  ADDLW  3E
05190:  MOVWF  01
05192:  MOVLW  01
05194:  ADDWFC 03,F
05196:  MOVF   01,W
05198:  ADDLW  1C
0519A:  MOVWF  FE9
0519C:  MOVLW  00
0519E:  ADDWFC 03,W
051A0:  MOVWF  FEA
051A2:  MOVF   FEF,F
051A4:  BTFSC  FD8.2
051A6:  BRA    52D2
051A8:  CLRF   1B
051AA:  BTFSC  FF2.6
051AC:  BSF    1B.6
051AE:  BCF    FF2.6
051B0:  BTFSC  FF2.7
051B2:  BSF    1B.7
051B4:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
051B6:  CLRF   xDB
051B8:  MOVFF  661,6DA
051BC:  CLRF   xDD
051BE:  MOVLW  2F
051C0:  MOVWF  xDC
051C2:  MOVLB  0
051C4:  CALL   0420
051C8:  BTFSC  1B.6
051CA:  BSF    FF2.6
051CC:  BTFSC  1B.7
051CE:  BSF    FF2.7
051D0:  MOVF   01,W
051D2:  ADDLW  4C
051D4:  MOVLB  6
051D6:  MOVWF  x63
051D8:  MOVLW  01
051DA:  ADDWFC 02,W
051DC:  MOVWF  x64
051DE:  MOVLW  01
051E0:  ADDWF  x63,W
051E2:  MOVWF  01
051E4:  MOVLW  00
051E6:  ADDWFC x64,W
051E8:  MOVWF  03
051EA:  MOVF   01,W
051EC:  ADDLW  3E
051EE:  MOVWF  01
051F0:  MOVLW  01
051F2:  ADDWFC 03,F
051F4:  MOVF   01,W
051F6:  ADDLW  2A
051F8:  MOVWF  FE9
051FA:  MOVLW  00
051FC:  ADDWFC 03,W
051FE:  MOVWF  FEA
05200:  CLRF   FEF
05202:  CLRF   1B
05204:  BTFSC  FF2.6
05206:  BSF    1B.6
05208:  BCF    FF2.6
0520A:  BTFSC  FF2.7
0520C:  BSF    1B.7
0520E:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
05210:  CLRF   xDB
05212:  MOVFF  661,6DA
05216:  CLRF   xDD
05218:  MOVLW  2F
0521A:  MOVWF  xDC
0521C:  MOVLB  0
0521E:  CALL   0420
05222:  BTFSC  1B.6
05224:  BSF    FF2.6
05226:  BTFSC  1B.7
05228:  BSF    FF2.7
0522A:  MOVF   01,W
0522C:  ADDLW  4C
0522E:  MOVLB  6
05230:  MOVWF  x63
05232:  MOVLW  01
05234:  ADDWFC 02,W
05236:  MOVWF  x64
05238:  MOVLW  01
0523A:  ADDWF  x63,W
0523C:  MOVWF  01
0523E:  MOVLW  00
05240:  ADDWFC x64,W
05242:  MOVWF  03
05244:  MOVF   01,W
05246:  ADDLW  3E
05248:  MOVWF  01
0524A:  MOVLW  01
0524C:  ADDWFC 03,F
0524E:  MOVF   01,W
05250:  ADDLW  2D
05252:  MOVWF  FE9
05254:  MOVLW  00
05256:  ADDWFC 03,W
05258:  MOVWF  FEA
0525A:  MOVLW  02
0525C:  MOVWF  FEF
0525E:  CLRF   1B
05260:  BTFSC  FF2.6
05262:  BSF    1B.6
05264:  BCF    FF2.6
05266:  BTFSC  FF2.7
05268:  BSF    1B.7
0526A:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
0526C:  CLRF   xDB
0526E:  MOVFF  661,6DA
05272:  CLRF   xDD
05274:  MOVLW  2F
05276:  MOVWF  xDC
05278:  MOVLB  0
0527A:  CALL   0420
0527E:  BTFSC  1B.6
05280:  BSF    FF2.6
05282:  BTFSC  1B.7
05284:  BSF    FF2.7
05286:  MOVF   01,W
05288:  ADDLW  4C
0528A:  MOVLB  6
0528C:  MOVWF  x63
0528E:  MOVLW  01
05290:  ADDWFC 02,W
05292:  MOVWF  x64
05294:  MOVLW  01
05296:  ADDWF  x63,W
05298:  MOVWF  01
0529A:  MOVLW  00
0529C:  ADDWFC x64,W
0529E:  MOVWF  03
052A0:  MOVF   01,W
052A2:  ADDLW  3E
052A4:  MOVWF  01
052A6:  MOVLW  01
052A8:  ADDWFC 03,F
052AA:  MOVF   01,W
052AC:  ADDLW  28
052AE:  MOVWF  FE9
052B0:  MOVLW  00
052B2:  ADDWFC 03,W
052B4:  MOVWF  FEA
052B6:  BCF    FD8.0
052B8:  RLCF   FEF,W
052BA:  CLRF   03
052BC:  MOVLB  0
052BE:  CALL   0176
052C2:  TBLRD*+
052C4:  MOVFF  FF5,03
052C8:  MOVLB  5
052CA:  ANDWF  x7F,F
052CC:  MOVF   03,W
052CE:  ANDWF  x80,F
052D0:  MOVLB  6
052D2:  CLRF   1B
052D4:  BTFSC  FF2.6
052D6:  BSF    1B.6
052D8:  BCF    FF2.6
052DA:  BTFSC  FF2.7
052DC:  BSF    1B.7
052DE:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
052E0:  CLRF   xDB
052E2:  MOVFF  661,6DA
052E6:  CLRF   xDD
052E8:  MOVLW  2F
052EA:  MOVWF  xDC
052EC:  MOVLB  0
052EE:  CALL   0420
052F2:  BTFSC  1B.6
052F4:  BSF    FF2.6
052F6:  BTFSC  1B.7
052F8:  BSF    FF2.7
052FA:  MOVF   01,W
052FC:  ADDLW  4C
052FE:  MOVLB  6
05300:  MOVWF  x63
05302:  MOVLW  01
05304:  ADDWFC 02,W
05306:  MOVWF  x64
05308:  MOVLW  01
0530A:  ADDWF  x63,W
0530C:  MOVWF  01
0530E:  MOVLW  00
05310:  ADDWFC x64,W
05312:  MOVWF  03
05314:  MOVF   01,W
05316:  ADDLW  3E
05318:  MOVWF  01
0531A:  MOVLW  01
0531C:  ADDWFC 03,F
0531E:  MOVF   01,W
05320:  ADDLW  1D
05322:  MOVWF  FE9
05324:  MOVLW  00
05326:  ADDWFC 03,W
05328:  MOVWF  FEA
0532A:  BCF    FEF.0
0532C:  CLRF   1B
0532E:  BTFSC  FF2.6
05330:  BSF    1B.6
05332:  BCF    FF2.6
05334:  BTFSC  FF2.7
05336:  BSF    1B.7
05338:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
0533A:  CLRF   xDB
0533C:  MOVFF  661,6DA
05340:  CLRF   xDD
05342:  MOVLW  2F
05344:  MOVWF  xDC
05346:  MOVLB  0
05348:  CALL   0420
0534C:  BTFSC  1B.6
0534E:  BSF    FF2.6
05350:  BTFSC  1B.7
05352:  BSF    FF2.7
05354:  MOVF   01,W
05356:  ADDLW  4C
05358:  MOVLB  6
0535A:  MOVWF  x63
0535C:  MOVLW  01
0535E:  ADDWFC 02,W
05360:  MOVWF  x64
05362:  MOVLW  01
05364:  ADDWF  x63,W
05366:  MOVWF  01
05368:  MOVLW  00
0536A:  ADDWFC x64,W
0536C:  MOVWF  03
0536E:  MOVF   01,W
05370:  ADDLW  3E
05372:  MOVWF  01
05374:  MOVLW  01
05376:  ADDWFC 03,F
05378:  MOVF   01,W
0537A:  ADDLW  27
0537C:  MOVWF  FE9
0537E:  MOVLW  00
05380:  ADDWFC 03,W
05382:  MOVWF  FEA
05384:  BTFSS  FEF.0
05386:  BRA    5628
05388:  CLRF   1B
0538A:  BTFSC  FF2.6
0538C:  BSF    1B.6
0538E:  BCF    FF2.6
05390:  BTFSC  FF2.7
05392:  BSF    1B.7
05394:  BCF    FF2.7
05396:  CLRF   xDB
05398:  MOVFF  661,6DA
0539C:  CLRF   xDD
0539E:  MOVLW  2F
053A0:  MOVWF  xDC
053A2:  MOVLB  0
053A4:  CALL   0420
053A8:  BTFSC  1B.6
053AA:  BSF    FF2.6
053AC:  BTFSC  1B.7
053AE:  BSF    FF2.7
053B0:  MOVF   01,W
053B2:  ADDLW  4C
053B4:  MOVLB  6
053B6:  MOVWF  x65
053B8:  MOVLW  01
053BA:  ADDWFC 02,W
053BC:  MOVWF  x66
053BE:  MOVLW  01
053C0:  ADDWF  x65,W
053C2:  MOVWF  01
053C4:  MOVLW  00
053C6:  ADDWFC x66,W
053C8:  MOVWF  03
053CA:  MOVF   01,W
053CC:  ADDLW  3E
053CE:  MOVWF  01
053D0:  MOVLW  01
053D2:  ADDWFC 03,F
053D4:  MOVF   01,W
053D6:  ADDLW  2D
053D8:  MOVWF  FE9
053DA:  MOVLW  00
053DC:  ADDWFC 03,W
053DE:  MOVWF  FEA
053E0:  MOVF   FEF,W
053E2:  SUBLW  04
053E4:  BZ    5446
053E6:  CLRF   1B
053E8:  BTFSC  FF2.6
053EA:  BSF    1B.6
053EC:  BCF    FF2.6
053EE:  BTFSC  FF2.7
053F0:  BSF    1B.7
053F2:  BCF    FF2.7
053F4:  CLRF   xDB
053F6:  MOVFF  661,6DA
053FA:  CLRF   xDD
053FC:  MOVLW  2F
053FE:  MOVWF  xDC
05400:  MOVLB  0
05402:  CALL   0420
05406:  BTFSC  1B.6
05408:  BSF    FF2.6
0540A:  BTFSC  1B.7
0540C:  BSF    FF2.7
0540E:  MOVF   01,W
05410:  ADDLW  4C
05412:  MOVLB  6
05414:  MOVWF  x67
05416:  MOVLW  01
05418:  ADDWFC 02,W
0541A:  MOVWF  x68
0541C:  MOVLW  01
0541E:  ADDWF  x67,W
05420:  MOVWF  01
05422:  MOVLW  00
05424:  ADDWFC x68,W
05426:  MOVWF  03
05428:  MOVF   01,W
0542A:  ADDLW  3E
0542C:  MOVWF  01
0542E:  MOVLW  01
05430:  ADDWFC 03,F
05432:  MOVF   01,W
05434:  ADDLW  2D
05436:  MOVWF  FE9
05438:  MOVLW  00
0543A:  ADDWFC 03,W
0543C:  MOVWF  FEA
0543E:  MOVF   FEF,W
05440:  SUBLW  03
05442:  BTFSS  FD8.2
05444:  BRA    5628
05446:  CLRF   1B
05448:  BTFSC  FF2.6
0544A:  BSF    1B.6
0544C:  BCF    FF2.6
0544E:  BTFSC  FF2.7
05450:  BSF    1B.7
05452:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
05454:  CLRF   xDB
05456:  MOVFF  661,6DA
0545A:  CLRF   xDD
0545C:  MOVLW  2F
0545E:  MOVWF  xDC
05460:  MOVLB  0
05462:  CALL   0420
05466:  BTFSC  1B.6
05468:  BSF    FF2.6
0546A:  BTFSC  1B.7
0546C:  BSF    FF2.7
0546E:  MOVF   01,W
05470:  ADDLW  4C
05472:  MOVLB  6
05474:  MOVWF  x63
05476:  MOVLW  01
05478:  ADDWFC 02,W
0547A:  MOVWF  x64
0547C:  MOVLW  01
0547E:  ADDWF  x63,W
05480:  MOVWF  01
05482:  MOVLW  00
05484:  ADDWFC x64,W
05486:  MOVWF  03
05488:  MOVF   01,W
0548A:  ADDLW  3E
0548C:  MOVWF  01
0548E:  MOVLW  01
05490:  ADDWFC 03,F
05492:  MOVF   01,W
05494:  ADDLW  26
05496:  MOVWF  FE9
05498:  MOVLW  00
0549A:  ADDWFC 03,W
0549C:  MOVWF  FEA
0549E:  MOVF   FEF,F
054A0:  BTFSC  FD8.2
054A2:  BRA    55CE
054A4:  CLRF   1B
054A6:  BTFSC  FF2.6
054A8:  BSF    1B.6
054AA:  BCF    FF2.6
054AC:  BTFSC  FF2.7
054AE:  BSF    1B.7
054B0:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
054B2:  CLRF   xDB
054B4:  MOVFF  661,6DA
054B8:  CLRF   xDD
054BA:  MOVLW  2F
054BC:  MOVWF  xDC
054BE:  MOVLB  0
054C0:  CALL   0420
054C4:  BTFSC  1B.6
054C6:  BSF    FF2.6
054C8:  BTFSC  1B.7
054CA:  BSF    FF2.7
054CC:  MOVF   01,W
054CE:  ADDLW  4C
054D0:  MOVLB  6
054D2:  MOVWF  x63
054D4:  MOVLW  01
054D6:  ADDWFC 02,W
054D8:  MOVWF  x64
054DA:  MOVLW  01
054DC:  ADDWF  x63,W
054DE:  MOVWF  01
054E0:  MOVLW  00
054E2:  ADDWFC x64,W
054E4:  MOVWF  03
054E6:  MOVF   01,W
054E8:  ADDLW  3E
054EA:  MOVWF  01
054EC:  MOVLW  01
054EE:  ADDWFC 03,F
054F0:  MOVF   01,W
054F2:  ADDLW  2A
054F4:  MOVWF  FE9
054F6:  MOVLW  00
054F8:  ADDWFC 03,W
054FA:  MOVWF  FEA
054FC:  CLRF   FEF
054FE:  CLRF   1B
05500:  BTFSC  FF2.6
05502:  BSF    1B.6
05504:  BCF    FF2.6
05506:  BTFSC  FF2.7
05508:  BSF    1B.7
0550A:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
0550C:  CLRF   xDB
0550E:  MOVFF  661,6DA
05512:  CLRF   xDD
05514:  MOVLW  2F
05516:  MOVWF  xDC
05518:  MOVLB  0
0551A:  CALL   0420
0551E:  BTFSC  1B.6
05520:  BSF    FF2.6
05522:  BTFSC  1B.7
05524:  BSF    FF2.7
05526:  MOVF   01,W
05528:  ADDLW  4C
0552A:  MOVLB  6
0552C:  MOVWF  x63
0552E:  MOVLW  01
05530:  ADDWFC 02,W
05532:  MOVWF  x64
05534:  MOVLW  01
05536:  ADDWF  x63,W
05538:  MOVWF  01
0553A:  MOVLW  00
0553C:  ADDWFC x64,W
0553E:  MOVWF  03
05540:  MOVF   01,W
05542:  ADDLW  3E
05544:  MOVWF  01
05546:  MOVLW  01
05548:  ADDWFC 03,F
0554A:  MOVF   01,W
0554C:  ADDLW  2D
0554E:  MOVWF  FE9
05550:  MOVLW  00
05552:  ADDWFC 03,W
05554:  MOVWF  FEA
05556:  MOVLW  03
05558:  MOVWF  FEF
0555A:  CLRF   1B
0555C:  BTFSC  FF2.6
0555E:  BSF    1B.6
05560:  BCF    FF2.6
05562:  BTFSC  FF2.7
05564:  BSF    1B.7
05566:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
05568:  CLRF   xDB
0556A:  MOVFF  661,6DA
0556E:  CLRF   xDD
05570:  MOVLW  2F
05572:  MOVWF  xDC
05574:  MOVLB  0
05576:  CALL   0420
0557A:  BTFSC  1B.6
0557C:  BSF    FF2.6
0557E:  BTFSC  1B.7
05580:  BSF    FF2.7
05582:  MOVF   01,W
05584:  ADDLW  4C
05586:  MOVLB  6
05588:  MOVWF  x63
0558A:  MOVLW  01
0558C:  ADDWFC 02,W
0558E:  MOVWF  x64
05590:  MOVLW  01
05592:  ADDWF  x63,W
05594:  MOVWF  01
05596:  MOVLW  00
05598:  ADDWFC x64,W
0559A:  MOVWF  03
0559C:  MOVF   01,W
0559E:  ADDLW  3E
055A0:  MOVWF  01
055A2:  MOVLW  01
055A4:  ADDWFC 03,F
055A6:  MOVF   01,W
055A8:  ADDLW  29
055AA:  MOVWF  FE9
055AC:  MOVLW  00
055AE:  ADDWFC 03,W
055B0:  MOVWF  FEA
055B2:  BCF    FD8.0
055B4:  RLCF   FEF,W
055B6:  CLRF   03
055B8:  MOVLB  0
055BA:  CALL   0176
055BE:  TBLRD*+
055C0:  MOVFF  FF5,03
055C4:  MOVLB  5
055C6:  ANDWF  x7F,F
055C8:  MOVF   03,W
055CA:  ANDWF  x80,F
055CC:  MOVLB  6
055CE:  CLRF   1B
055D0:  BTFSC  FF2.6
055D2:  BSF    1B.6
055D4:  BCF    FF2.6
055D6:  BTFSC  FF2.7
055D8:  BSF    1B.7
055DA:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
055DC:  CLRF   xDB
055DE:  MOVFF  661,6DA
055E2:  CLRF   xDD
055E4:  MOVLW  2F
055E6:  MOVWF  xDC
055E8:  MOVLB  0
055EA:  CALL   0420
055EE:  BTFSC  1B.6
055F0:  BSF    FF2.6
055F2:  BTFSC  1B.7
055F4:  BSF    FF2.7
055F6:  MOVF   01,W
055F8:  ADDLW  4C
055FA:  MOVLB  6
055FC:  MOVWF  x63
055FE:  MOVLW  01
05600:  ADDWFC 02,W
05602:  MOVWF  x64
05604:  MOVLW  01
05606:  ADDWF  x63,W
05608:  MOVWF  01
0560A:  MOVLW  00
0560C:  ADDWFC x64,W
0560E:  MOVWF  03
05610:  MOVF   01,W
05612:  ADDLW  3E
05614:  MOVWF  01
05616:  MOVLW  01
05618:  ADDWFC 03,F
0561A:  MOVF   01,W
0561C:  ADDLW  27
0561E:  MOVWF  FE9
05620:  MOVLW  00
05622:  ADDWFC 03,W
05624:  MOVWF  FEA
05626:  BCF    FEF.0
....................             } 
....................             
....................             break; 
05628:  MOVLB  0
0562A:  BRA    562C
....................    } 
....................    } 
0562C:  MOVLB  6
0562E:  INCF   x61,F
05630:  GOTO   40AE
....................    if(update_dimmers) 
05634:  BTFSS  x62.0
05636:  BRA    5640
....................       org(); 
05638:  MOVLB  0
0563A:  CALL   389A
0563E:  MOVLB  6
.................... } 
05640:  MOVLB  0
05642:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
05DD6:  MOVLB  6
05DD8:  CLRF   x74
05DDA:  MOVF   x74,W
05DDC:  SUBLW  07
05DDE:  BNC   5DFE
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
05DE0:  CLRF   03
05DE2:  MOVF   x74,W
05DE4:  ADDWF  x71,W
05DE6:  MOVWF  FE9
05DE8:  MOVF   x72,W
05DEA:  ADDWFC 03,W
05DEC:  MOVWF  FEA
05DEE:  MOVF   x73,W
05DF0:  SUBWF  FEF,W
05DF2:  BNZ   5DFA
05DF4:  MOVLW  01
05DF6:  MOVWF  01
05DF8:  BRA    5E02
....................    } 
05DFA:  INCF   x74,F
05DFC:  BRA    5DDA
....................  
....................    return false; 
05DFE:  MOVLW  00
05E00:  MOVWF  01
.................... } 
05E02:  MOVLB  0
05E04:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
05E06:  MOVLB  6
05E08:  CLRF   x6C
05E0A:  MOVLB  1
05E0C:  MOVF   x3F,W
05E0E:  MOVLB  6
05E10:  SUBWF  x6C,W
05E12:  BTFSC  FD8.0
05E14:  GOTO   690E
05E18:  CLRF   1B
05E1A:  BTFSC  FF2.6
05E1C:  BSF    1B.6
05E1E:  BCF    FF2.6
05E20:  BTFSC  FF2.7
05E22:  BSF    1B.7
05E24:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
05E26:  CLRF   xDB
05E28:  MOVFF  66C,6DA
05E2C:  CLRF   xDD
05E2E:  MOVLW  2F
05E30:  MOVWF  xDC
05E32:  MOVLB  0
05E34:  CALL   0420
05E38:  BTFSC  1B.6
05E3A:  BSF    FF2.6
05E3C:  BTFSC  1B.7
05E3E:  BSF    FF2.7
05E40:  MOVFF  02,03
05E44:  MOVF   01,W
05E46:  ADDLW  8A
05E48:  MOVWF  01
05E4A:  MOVLW  02
05E4C:  ADDWFC 03,F
05E4E:  MOVFF  01,FE9
05E52:  MOVFF  03,FEA
05E56:  MOVF   FEF,W
05E58:  XORLW  65
05E5A:  BZ    5E6C
05E5C:  XORLW  01
05E5E:  BTFSC  FD8.2
05E60:  BRA    61F2
05E62:  XORLW  02
05E64:  BTFSC  FD8.2
05E66:  BRA    6448
05E68:  GOTO   6904
....................          case dimmer: 
05E6C:  CLRF   1B
05E6E:  BTFSC  FF2.6
05E70:  BSF    1B.6
05E72:  BCF    FF2.6
05E74:  BTFSC  FF2.7
05E76:  BSF    1B.7
05E78:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
05E7A:  MOVLB  6
05E7C:  CLRF   xDB
05E7E:  MOVFF  66C,6DA
05E82:  CLRF   xDD
05E84:  MOVLW  2F
05E86:  MOVWF  xDC
05E88:  MOVLB  0
05E8A:  CALL   0420
05E8E:  BTFSC  1B.6
05E90:  BSF    FF2.6
05E92:  BTFSC  1B.7
05E94:  BSF    FF2.7
05E96:  MOVF   01,W
05E98:  ADDLW  4C
05E9A:  MOVLB  6
05E9C:  MOVWF  x6D
05E9E:  MOVLW  01
05EA0:  ADDWFC 02,W
05EA2:  MOVWF  x6E
05EA4:  MOVLW  01
05EA6:  ADDWF  x6D,W
05EA8:  MOVWF  01
05EAA:  MOVLW  00
05EAC:  ADDWFC x6E,W
05EAE:  MOVWF  03
05EB0:  MOVF   01,W
05EB2:  ADDLW  3E
05EB4:  MOVWF  01
05EB6:  MOVLW  01
05EB8:  ADDWFC 03,F
05EBA:  MOVF   01,W
05EBC:  ADDLW  14
05EBE:  MOVWF  01
05EC0:  MOVLW  00
05EC2:  ADDWFC 03,F
05EC4:  MOVFF  01,66F
05EC8:  MOVFF  03,670
05ECC:  MOVFF  03,672
05ED0:  MOVFF  01,671
05ED4:  MOVFF  66A,673
05ED8:  MOVLB  0
05EDA:  RCALL  5DD6
05EDC:  MOVF   01,F
05EDE:  BZ    5F9C
05EE0:  CLRF   1B
05EE2:  BTFSC  FF2.6
05EE4:  BSF    1B.6
05EE6:  BCF    FF2.6
05EE8:  BTFSC  FF2.7
05EEA:  BSF    1B.7
05EEC:  BCF    FF2.7
....................          { 
....................           //  printf("DIM"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
05EEE:  MOVLB  6
05EF0:  CLRF   xDB
05EF2:  MOVFF  66C,6DA
05EF6:  CLRF   xDD
05EF8:  MOVLW  2F
05EFA:  MOVWF  xDC
05EFC:  MOVLB  0
05EFE:  CALL   0420
05F02:  BTFSC  1B.6
05F04:  BSF    FF2.6
05F06:  BTFSC  1B.7
05F08:  BSF    FF2.7
05F0A:  MOVF   01,W
05F0C:  ADDLW  4C
05F0E:  MOVLB  6
05F10:  MOVWF  x6D
05F12:  MOVLW  01
05F14:  ADDWFC 02,W
05F16:  MOVWF  x6E
05F18:  MOVLW  01
05F1A:  ADDWF  x6D,W
05F1C:  MOVWF  01
05F1E:  MOVLW  00
05F20:  ADDWFC x6E,W
05F22:  MOVWF  03
05F24:  MOVF   01,W
05F26:  ADDLW  3E
05F28:  MOVWF  01
05F2A:  MOVLW  01
05F2C:  ADDWFC 03,F
05F2E:  MOVF   01,W
05F30:  ADDLW  1C
05F32:  MOVWF  FE9
05F34:  MOVLW  00
05F36:  ADDWFC 03,W
05F38:  MOVWF  FEA
05F3A:  MOVFF  66B,FEF
05F3E:  CLRF   1B
05F40:  BTFSC  FF2.6
05F42:  BSF    1B.6
05F44:  BCF    FF2.6
05F46:  BTFSC  FF2.7
05F48:  BSF    1B.7
05F4A:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
05F4C:  CLRF   xDB
05F4E:  MOVFF  66C,6DA
05F52:  CLRF   xDD
05F54:  MOVLW  2F
05F56:  MOVWF  xDC
05F58:  MOVLB  0
05F5A:  CALL   0420
05F5E:  BTFSC  1B.6
05F60:  BSF    FF2.6
05F62:  BTFSC  1B.7
05F64:  BSF    FF2.7
05F66:  MOVF   01,W
05F68:  ADDLW  4C
05F6A:  MOVLB  6
05F6C:  MOVWF  x6D
05F6E:  MOVLW  01
05F70:  ADDWFC 02,W
05F72:  MOVWF  x6E
05F74:  MOVLW  01
05F76:  ADDWF  x6D,W
05F78:  MOVWF  01
05F7A:  MOVLW  00
05F7C:  ADDWFC x6E,W
05F7E:  MOVWF  03
05F80:  MOVF   01,W
05F82:  ADDLW  3E
05F84:  MOVWF  01
05F86:  MOVLW  01
05F88:  ADDWFC 03,F
05F8A:  MOVF   01,W
05F8C:  ADDLW  1D
05F8E:  MOVWF  FE9
05F90:  MOVLW  00
05F92:  ADDWFC 03,W
05F94:  MOVWF  FEA
05F96:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
05F98:  BRA    61EE
05F9A:  MOVLB  0
05F9C:  CLRF   1B
05F9E:  BTFSC  FF2.6
05FA0:  BSF    1B.6
05FA2:  BCF    FF2.6
05FA4:  BTFSC  FF2.7
05FA6:  BSF    1B.7
05FA8:  BCF    FF2.7
05FAA:  MOVLB  6
05FAC:  CLRF   xDB
05FAE:  MOVFF  66C,6DA
05FB2:  CLRF   xDD
05FB4:  MOVLW  2F
05FB6:  MOVWF  xDC
05FB8:  MOVLB  0
05FBA:  CALL   0420
05FBE:  BTFSC  1B.6
05FC0:  BSF    FF2.6
05FC2:  BTFSC  1B.7
05FC4:  BSF    FF2.7
05FC6:  MOVF   01,W
05FC8:  ADDLW  4C
05FCA:  MOVLB  6
05FCC:  MOVWF  x6D
05FCE:  MOVLW  01
05FD0:  ADDWFC 02,W
05FD2:  MOVWF  x6E
05FD4:  MOVLW  01
05FD6:  ADDWF  x6D,W
05FD8:  MOVWF  01
05FDA:  MOVLW  00
05FDC:  ADDWFC x6E,W
05FDE:  MOVWF  03
05FE0:  MOVF   01,W
05FE2:  ADDLW  3E
05FE4:  MOVWF  01
05FE6:  MOVLW  01
05FE8:  ADDWFC 03,F
05FEA:  MOVFF  01,66F
05FEE:  MOVFF  03,670
05FF2:  MOVFF  03,672
05FF6:  MOVFF  01,671
05FFA:  MOVFF  66A,673
05FFE:  MOVLB  0
06000:  RCALL  5DD6
06002:  MOVF   01,F
06004:  BZ    60C2
06006:  CLRF   1B
06008:  BTFSC  FF2.6
0600A:  BSF    1B.6
0600C:  BCF    FF2.6
0600E:  BTFSC  FF2.7
06010:  BSF    1B.7
06012:  BCF    FF2.7
....................          { 
....................         // printf("DIM ON"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
06014:  MOVLB  6
06016:  CLRF   xDB
06018:  MOVFF  66C,6DA
0601C:  CLRF   xDD
0601E:  MOVLW  2F
06020:  MOVWF  xDC
06022:  MOVLB  0
06024:  CALL   0420
06028:  BTFSC  1B.6
0602A:  BSF    FF2.6
0602C:  BTFSC  1B.7
0602E:  BSF    FF2.7
06030:  MOVF   01,W
06032:  ADDLW  4C
06034:  MOVLB  6
06036:  MOVWF  x6D
06038:  MOVLW  01
0603A:  ADDWFC 02,W
0603C:  MOVWF  x6E
0603E:  MOVLW  01
06040:  ADDWF  x6D,W
06042:  MOVWF  01
06044:  MOVLW  00
06046:  ADDWFC x6E,W
06048:  MOVWF  03
0604A:  MOVF   01,W
0604C:  ADDLW  3E
0604E:  MOVWF  01
06050:  MOVLW  01
06052:  ADDWFC 03,F
06054:  MOVF   01,W
06056:  ADDLW  08
06058:  MOVWF  FE9
0605A:  MOVLW  00
0605C:  ADDWFC 03,W
0605E:  MOVWF  FEA
06060:  MOVFF  66B,FEF
06064:  CLRF   1B
06066:  BTFSC  FF2.6
06068:  BSF    1B.6
0606A:  BCF    FF2.6
0606C:  BTFSC  FF2.7
0606E:  BSF    1B.7
06070:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
06072:  CLRF   xDB
06074:  MOVFF  66C,6DA
06078:  CLRF   xDD
0607A:  MOVLW  2F
0607C:  MOVWF  xDC
0607E:  MOVLB  0
06080:  CALL   0420
06084:  BTFSC  1B.6
06086:  BSF    FF2.6
06088:  BTFSC  1B.7
0608A:  BSF    FF2.7
0608C:  MOVF   01,W
0608E:  ADDLW  4C
06090:  MOVLB  6
06092:  MOVWF  x6D
06094:  MOVLW  01
06096:  ADDWFC 02,W
06098:  MOVWF  x6E
0609A:  MOVLW  01
0609C:  ADDWF  x6D,W
0609E:  MOVWF  01
060A0:  MOVLW  00
060A2:  ADDWFC x6E,W
060A4:  MOVWF  03
060A6:  MOVF   01,W
060A8:  ADDLW  3E
060AA:  MOVWF  01
060AC:  MOVLW  01
060AE:  ADDWFC 03,F
060B0:  MOVF   01,W
060B2:  ADDLW  09
060B4:  MOVWF  FE9
060B6:  MOVLW  00
060B8:  ADDWFC 03,W
060BA:  MOVWF  FEA
060BC:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
060BE:  BRA    61EE
060C0:  MOVLB  0
060C2:  CLRF   1B
060C4:  BTFSC  FF2.6
060C6:  BSF    1B.6
060C8:  BCF    FF2.6
060CA:  BTFSC  FF2.7
060CC:  BSF    1B.7
060CE:  BCF    FF2.7
060D0:  MOVLB  6
060D2:  CLRF   xDB
060D4:  MOVFF  66C,6DA
060D8:  CLRF   xDD
060DA:  MOVLW  2F
060DC:  MOVWF  xDC
060DE:  MOVLB  0
060E0:  CALL   0420
060E4:  BTFSC  1B.6
060E6:  BSF    FF2.6
060E8:  BTFSC  1B.7
060EA:  BSF    FF2.7
060EC:  MOVF   01,W
060EE:  ADDLW  4C
060F0:  MOVLB  6
060F2:  MOVWF  x6D
060F4:  MOVLW  01
060F6:  ADDWFC 02,W
060F8:  MOVWF  x6E
060FA:  MOVLW  01
060FC:  ADDWF  x6D,W
060FE:  MOVWF  01
06100:  MOVLW  00
06102:  ADDWFC x6E,W
06104:  MOVWF  03
06106:  MOVF   01,W
06108:  ADDLW  3E
0610A:  MOVWF  01
0610C:  MOVLW  01
0610E:  ADDWFC 03,F
06110:  MOVF   01,W
06112:  ADDLW  0A
06114:  MOVWF  01
06116:  MOVLW  00
06118:  ADDWFC 03,F
0611A:  MOVFF  01,66F
0611E:  MOVFF  03,670
06122:  MOVFF  03,672
06126:  MOVFF  01,671
0612A:  MOVFF  66A,673
0612E:  MOVLB  0
06130:  RCALL  5DD6
06132:  MOVF   01,F
06134:  BZ    61F0
06136:  CLRF   1B
06138:  BTFSC  FF2.6
0613A:  BSF    1B.6
0613C:  BCF    FF2.6
0613E:  BTFSC  FF2.7
06140:  BSF    1B.7
06142:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
06144:  MOVLB  6
06146:  CLRF   xDB
06148:  MOVFF  66C,6DA
0614C:  CLRF   xDD
0614E:  MOVLW  2F
06150:  MOVWF  xDC
06152:  MOVLB  0
06154:  CALL   0420
06158:  BTFSC  1B.6
0615A:  BSF    FF2.6
0615C:  BTFSC  1B.7
0615E:  BSF    FF2.7
06160:  MOVF   01,W
06162:  ADDLW  4C
06164:  MOVLB  6
06166:  MOVWF  x6D
06168:  MOVLW  01
0616A:  ADDWFC 02,W
0616C:  MOVWF  x6E
0616E:  MOVLW  01
06170:  ADDWF  x6D,W
06172:  MOVWF  01
06174:  MOVLW  00
06176:  ADDWFC x6E,W
06178:  MOVWF  03
0617A:  MOVF   01,W
0617C:  ADDLW  3E
0617E:  MOVWF  01
06180:  MOVLW  01
06182:  ADDWFC 03,F
06184:  MOVF   01,W
06186:  ADDLW  12
06188:  MOVWF  FE9
0618A:  MOVLW  00
0618C:  ADDWFC 03,W
0618E:  MOVWF  FEA
06190:  MOVFF  66B,FEF
06194:  CLRF   1B
06196:  BTFSC  FF2.6
06198:  BSF    1B.6
0619A:  BCF    FF2.6
0619C:  BTFSC  FF2.7
0619E:  BSF    1B.7
061A0:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
061A2:  CLRF   xDB
061A4:  MOVFF  66C,6DA
061A8:  CLRF   xDD
061AA:  MOVLW  2F
061AC:  MOVWF  xDC
061AE:  MOVLB  0
061B0:  CALL   0420
061B4:  BTFSC  1B.6
061B6:  BSF    FF2.6
061B8:  BTFSC  1B.7
061BA:  BSF    FF2.7
061BC:  MOVF   01,W
061BE:  ADDLW  4C
061C0:  MOVLB  6
061C2:  MOVWF  x6D
061C4:  MOVLW  01
061C6:  ADDWFC 02,W
061C8:  MOVWF  x6E
061CA:  MOVLW  01
061CC:  ADDWF  x6D,W
061CE:  MOVWF  01
061D0:  MOVLW  00
061D2:  ADDWFC x6E,W
061D4:  MOVWF  03
061D6:  MOVF   01,W
061D8:  ADDLW  3E
061DA:  MOVWF  01
061DC:  MOVLW  01
061DE:  ADDWFC 03,F
061E0:  MOVF   01,W
061E2:  ADDLW  13
061E4:  MOVWF  FE9
061E6:  MOVLW  00
061E8:  ADDWFC 03,W
061EA:  MOVWF  FEA
061EC:  BSF    FEF.0
061EE:  MOVLB  0
....................          } 
....................  
....................          break; 
061F0:  BRA    6906
....................          case _on_off: 
061F2:  CLRF   1B
061F4:  BTFSC  FF2.6
061F6:  BSF    1B.6
061F8:  BCF    FF2.6
061FA:  BTFSC  FF2.7
061FC:  BSF    1B.7
061FE:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
06200:  MOVLB  6
06202:  CLRF   xDB
06204:  MOVFF  66C,6DA
06208:  CLRF   xDD
0620A:  MOVLW  2F
0620C:  MOVWF  xDC
0620E:  MOVLB  0
06210:  CALL   0420
06214:  BTFSC  1B.6
06216:  BSF    FF2.6
06218:  BTFSC  1B.7
0621A:  BSF    FF2.7
0621C:  MOVF   01,W
0621E:  ADDLW  4C
06220:  MOVLB  6
06222:  MOVWF  x6D
06224:  MOVLW  01
06226:  ADDWFC 02,W
06228:  MOVWF  x6E
0622A:  MOVLW  01
0622C:  ADDWF  x6D,W
0622E:  MOVWF  01
06230:  MOVLW  00
06232:  ADDWFC x6E,W
06234:  MOVWF  03
06236:  MOVF   01,W
06238:  ADDLW  3E
0623A:  MOVWF  01
0623C:  MOVLW  01
0623E:  ADDWFC 03,F
06240:  MOVFF  01,66F
06244:  MOVFF  03,670
06248:  MOVFF  03,672
0624C:  MOVFF  01,671
06250:  MOVFF  66A,673
06254:  MOVLB  0
06256:  RCALL  5DD6
06258:  MOVF   01,F
0625A:  BZ    6318
0625C:  CLRF   1B
0625E:  BTFSC  FF2.6
06260:  BSF    1B.6
06262:  BCF    FF2.6
06264:  BTFSC  FF2.7
06266:  BSF    1B.7
06268:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
0626A:  MOVLB  6
0626C:  CLRF   xDB
0626E:  MOVFF  66C,6DA
06272:  CLRF   xDD
06274:  MOVLW  2F
06276:  MOVWF  xDC
06278:  MOVLB  0
0627A:  CALL   0420
0627E:  BTFSC  1B.6
06280:  BSF    FF2.6
06282:  BTFSC  1B.7
06284:  BSF    FF2.7
06286:  MOVF   01,W
06288:  ADDLW  4C
0628A:  MOVLB  6
0628C:  MOVWF  x6D
0628E:  MOVLW  01
06290:  ADDWFC 02,W
06292:  MOVWF  x6E
06294:  MOVLW  01
06296:  ADDWF  x6D,W
06298:  MOVWF  01
0629A:  MOVLW  00
0629C:  ADDWFC x6E,W
0629E:  MOVWF  03
062A0:  MOVF   01,W
062A2:  ADDLW  3E
062A4:  MOVWF  01
062A6:  MOVLW  01
062A8:  ADDWFC 03,F
062AA:  MOVF   01,W
062AC:  ADDLW  08
062AE:  MOVWF  FE9
062B0:  MOVLW  00
062B2:  ADDWFC 03,W
062B4:  MOVWF  FEA
062B6:  MOVFF  66B,FEF
062BA:  CLRF   1B
062BC:  BTFSC  FF2.6
062BE:  BSF    1B.6
062C0:  BCF    FF2.6
062C2:  BTFSC  FF2.7
062C4:  BSF    1B.7
062C6:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
062C8:  CLRF   xDB
062CA:  MOVFF  66C,6DA
062CE:  CLRF   xDD
062D0:  MOVLW  2F
062D2:  MOVWF  xDC
062D4:  MOVLB  0
062D6:  CALL   0420
062DA:  BTFSC  1B.6
062DC:  BSF    FF2.6
062DE:  BTFSC  1B.7
062E0:  BSF    FF2.7
062E2:  MOVF   01,W
062E4:  ADDLW  4C
062E6:  MOVLB  6
062E8:  MOVWF  x6D
062EA:  MOVLW  01
062EC:  ADDWFC 02,W
062EE:  MOVWF  x6E
062F0:  MOVLW  01
062F2:  ADDWF  x6D,W
062F4:  MOVWF  01
062F6:  MOVLW  00
062F8:  ADDWFC x6E,W
062FA:  MOVWF  03
062FC:  MOVF   01,W
062FE:  ADDLW  3E
06300:  MOVWF  01
06302:  MOVLW  01
06304:  ADDWFC 03,F
06306:  MOVF   01,W
06308:  ADDLW  09
0630A:  MOVWF  FE9
0630C:  MOVLW  00
0630E:  ADDWFC 03,W
06310:  MOVWF  FEA
06312:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
06314:  BRA    6444
06316:  MOVLB  0
06318:  CLRF   1B
0631A:  BTFSC  FF2.6
0631C:  BSF    1B.6
0631E:  BCF    FF2.6
06320:  BTFSC  FF2.7
06322:  BSF    1B.7
06324:  BCF    FF2.7
06326:  MOVLB  6
06328:  CLRF   xDB
0632A:  MOVFF  66C,6DA
0632E:  CLRF   xDD
06330:  MOVLW  2F
06332:  MOVWF  xDC
06334:  MOVLB  0
06336:  CALL   0420
0633A:  BTFSC  1B.6
0633C:  BSF    FF2.6
0633E:  BTFSC  1B.7
06340:  BSF    FF2.7
06342:  MOVF   01,W
06344:  ADDLW  4C
06346:  MOVLB  6
06348:  MOVWF  x6D
0634A:  MOVLW  01
0634C:  ADDWFC 02,W
0634E:  MOVWF  x6E
06350:  MOVLW  01
06352:  ADDWF  x6D,W
06354:  MOVWF  01
06356:  MOVLW  00
06358:  ADDWFC x6E,W
0635A:  MOVWF  03
0635C:  MOVF   01,W
0635E:  ADDLW  3E
06360:  MOVWF  01
06362:  MOVLW  01
06364:  ADDWFC 03,F
06366:  MOVF   01,W
06368:  ADDLW  0A
0636A:  MOVWF  01
0636C:  MOVLW  00
0636E:  ADDWFC 03,F
06370:  MOVFF  01,66F
06374:  MOVFF  03,670
06378:  MOVFF  03,672
0637C:  MOVFF  01,671
06380:  MOVFF  66A,673
06384:  MOVLB  0
06386:  RCALL  5DD6
06388:  MOVF   01,F
0638A:  BZ    6446
0638C:  CLRF   1B
0638E:  BTFSC  FF2.6
06390:  BSF    1B.6
06392:  BCF    FF2.6
06394:  BTFSC  FF2.7
06396:  BSF    1B.7
06398:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
0639A:  MOVLB  6
0639C:  CLRF   xDB
0639E:  MOVFF  66C,6DA
063A2:  CLRF   xDD
063A4:  MOVLW  2F
063A6:  MOVWF  xDC
063A8:  MOVLB  0
063AA:  CALL   0420
063AE:  BTFSC  1B.6
063B0:  BSF    FF2.6
063B2:  BTFSC  1B.7
063B4:  BSF    FF2.7
063B6:  MOVF   01,W
063B8:  ADDLW  4C
063BA:  MOVLB  6
063BC:  MOVWF  x6D
063BE:  MOVLW  01
063C0:  ADDWFC 02,W
063C2:  MOVWF  x6E
063C4:  MOVLW  01
063C6:  ADDWF  x6D,W
063C8:  MOVWF  01
063CA:  MOVLW  00
063CC:  ADDWFC x6E,W
063CE:  MOVWF  03
063D0:  MOVF   01,W
063D2:  ADDLW  3E
063D4:  MOVWF  01
063D6:  MOVLW  01
063D8:  ADDWFC 03,F
063DA:  MOVF   01,W
063DC:  ADDLW  12
063DE:  MOVWF  FE9
063E0:  MOVLW  00
063E2:  ADDWFC 03,W
063E4:  MOVWF  FEA
063E6:  MOVFF  66B,FEF
063EA:  CLRF   1B
063EC:  BTFSC  FF2.6
063EE:  BSF    1B.6
063F0:  BCF    FF2.6
063F2:  BTFSC  FF2.7
063F4:  BSF    1B.7
063F6:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
063F8:  CLRF   xDB
063FA:  MOVFF  66C,6DA
063FE:  CLRF   xDD
06400:  MOVLW  2F
06402:  MOVWF  xDC
06404:  MOVLB  0
06406:  CALL   0420
0640A:  BTFSC  1B.6
0640C:  BSF    FF2.6
0640E:  BTFSC  1B.7
06410:  BSF    FF2.7
06412:  MOVF   01,W
06414:  ADDLW  4C
06416:  MOVLB  6
06418:  MOVWF  x6D
0641A:  MOVLW  01
0641C:  ADDWFC 02,W
0641E:  MOVWF  x6E
06420:  MOVLW  01
06422:  ADDWF  x6D,W
06424:  MOVWF  01
06426:  MOVLW  00
06428:  ADDWFC x6E,W
0642A:  MOVWF  03
0642C:  MOVF   01,W
0642E:  ADDLW  3E
06430:  MOVWF  01
06432:  MOVLW  01
06434:  ADDWFC 03,F
06436:  MOVF   01,W
06438:  ADDLW  13
0643A:  MOVWF  FE9
0643C:  MOVLW  00
0643E:  ADDWFC 03,W
06440:  MOVWF  FEA
06442:  BSF    FEF.0
06444:  MOVLB  0
....................          } 
....................  
....................          break; 
06446:  BRA    6906
....................          case shutter: 
06448:  CLRF   1B
0644A:  BTFSC  FF2.6
0644C:  BSF    1B.6
0644E:  BCF    FF2.6
06450:  BTFSC  FF2.7
06452:  BSF    1B.7
06454:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
06456:  MOVLB  6
06458:  CLRF   xDB
0645A:  MOVFF  66C,6DA
0645E:  CLRF   xDD
06460:  MOVLW  2F
06462:  MOVWF  xDC
06464:  MOVLB  0
06466:  CALL   0420
0646A:  BTFSC  1B.6
0646C:  BSF    FF2.6
0646E:  BTFSC  1B.7
06470:  BSF    FF2.7
06472:  MOVF   01,W
06474:  ADDLW  4C
06476:  MOVLB  6
06478:  MOVWF  x6D
0647A:  MOVLW  01
0647C:  ADDWFC 02,W
0647E:  MOVWF  x6E
06480:  MOVLW  01
06482:  ADDWF  x6D,W
06484:  MOVWF  01
06486:  MOVLW  00
06488:  ADDWFC x6E,W
0648A:  MOVWF  03
0648C:  MOVF   01,W
0648E:  ADDLW  3E
06490:  MOVWF  01
06492:  MOVLW  01
06494:  ADDWFC 03,F
06496:  MOVFF  01,66F
0649A:  MOVFF  03,670
0649E:  MOVFF  03,672
064A2:  MOVFF  01,671
064A6:  MOVFF  66A,673
064AA:  MOVLB  0
064AC:  RCALL  5DD6
064AE:  MOVF   01,F
064B0:  BZ    656E
064B2:  CLRF   1B
064B4:  BTFSC  FF2.6
064B6:  BSF    1B.6
064B8:  BCF    FF2.6
064BA:  BTFSC  FF2.7
064BC:  BSF    1B.7
064BE:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
064C0:  MOVLB  6
064C2:  CLRF   xDB
064C4:  MOVFF  66C,6DA
064C8:  CLRF   xDD
064CA:  MOVLW  2F
064CC:  MOVWF  xDC
064CE:  MOVLB  0
064D0:  CALL   0420
064D4:  BTFSC  1B.6
064D6:  BSF    FF2.6
064D8:  BTFSC  1B.7
064DA:  BSF    FF2.7
064DC:  MOVF   01,W
064DE:  ADDLW  4C
064E0:  MOVLB  6
064E2:  MOVWF  x6D
064E4:  MOVLW  01
064E6:  ADDWFC 02,W
064E8:  MOVWF  x6E
064EA:  MOVLW  01
064EC:  ADDWF  x6D,W
064EE:  MOVWF  01
064F0:  MOVLW  00
064F2:  ADDWFC x6E,W
064F4:  MOVWF  03
064F6:  MOVF   01,W
064F8:  ADDLW  3E
064FA:  MOVWF  01
064FC:  MOVLW  01
064FE:  ADDWFC 03,F
06500:  MOVF   01,W
06502:  ADDLW  08
06504:  MOVWF  FE9
06506:  MOVLW  00
06508:  ADDWFC 03,W
0650A:  MOVWF  FEA
0650C:  MOVFF  66B,FEF
06510:  CLRF   1B
06512:  BTFSC  FF2.6
06514:  BSF    1B.6
06516:  BCF    FF2.6
06518:  BTFSC  FF2.7
0651A:  BSF    1B.7
0651C:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
0651E:  CLRF   xDB
06520:  MOVFF  66C,6DA
06524:  CLRF   xDD
06526:  MOVLW  2F
06528:  MOVWF  xDC
0652A:  MOVLB  0
0652C:  CALL   0420
06530:  BTFSC  1B.6
06532:  BSF    FF2.6
06534:  BTFSC  1B.7
06536:  BSF    FF2.7
06538:  MOVF   01,W
0653A:  ADDLW  4C
0653C:  MOVLB  6
0653E:  MOVWF  x6D
06540:  MOVLW  01
06542:  ADDWFC 02,W
06544:  MOVWF  x6E
06546:  MOVLW  01
06548:  ADDWF  x6D,W
0654A:  MOVWF  01
0654C:  MOVLW  00
0654E:  ADDWFC x6E,W
06550:  MOVWF  03
06552:  MOVF   01,W
06554:  ADDLW  3E
06556:  MOVWF  01
06558:  MOVLW  01
0655A:  ADDWFC 03,F
0655C:  MOVF   01,W
0655E:  ADDLW  09
06560:  MOVWF  FE9
06562:  MOVLW  00
06564:  ADDWFC 03,W
06566:  MOVWF  FEA
06568:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
0656A:  BRA    6900
0656C:  MOVLB  0
0656E:  CLRF   1B
06570:  BTFSC  FF2.6
06572:  BSF    1B.6
06574:  BCF    FF2.6
06576:  BTFSC  FF2.7
06578:  BSF    1B.7
0657A:  BCF    FF2.7
0657C:  MOVLB  6
0657E:  CLRF   xDB
06580:  MOVFF  66C,6DA
06584:  CLRF   xDD
06586:  MOVLW  2F
06588:  MOVWF  xDC
0658A:  MOVLB  0
0658C:  CALL   0420
06590:  BTFSC  1B.6
06592:  BSF    FF2.6
06594:  BTFSC  1B.7
06596:  BSF    FF2.7
06598:  MOVF   01,W
0659A:  ADDLW  4C
0659C:  MOVLB  6
0659E:  MOVWF  x6D
065A0:  MOVLW  01
065A2:  ADDWFC 02,W
065A4:  MOVWF  x6E
065A6:  MOVLW  01
065A8:  ADDWF  x6D,W
065AA:  MOVWF  01
065AC:  MOVLW  00
065AE:  ADDWFC x6E,W
065B0:  MOVWF  03
065B2:  MOVF   01,W
065B4:  ADDLW  3E
065B6:  MOVWF  01
065B8:  MOVLW  01
065BA:  ADDWFC 03,F
065BC:  MOVF   01,W
065BE:  ADDLW  0A
065C0:  MOVWF  01
065C2:  MOVLW  00
065C4:  ADDWFC 03,F
065C6:  MOVFF  01,66F
065CA:  MOVFF  03,670
065CE:  MOVFF  03,672
065D2:  MOVFF  01,671
065D6:  MOVFF  66A,673
065DA:  MOVLB  0
065DC:  CALL   5DD6
065E0:  MOVF   01,F
065E2:  BZ    66A0
065E4:  CLRF   1B
065E6:  BTFSC  FF2.6
065E8:  BSF    1B.6
065EA:  BCF    FF2.6
065EC:  BTFSC  FF2.7
065EE:  BSF    1B.7
065F0:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
065F2:  MOVLB  6
065F4:  CLRF   xDB
065F6:  MOVFF  66C,6DA
065FA:  CLRF   xDD
065FC:  MOVLW  2F
065FE:  MOVWF  xDC
06600:  MOVLB  0
06602:  CALL   0420
06606:  BTFSC  1B.6
06608:  BSF    FF2.6
0660A:  BTFSC  1B.7
0660C:  BSF    FF2.7
0660E:  MOVF   01,W
06610:  ADDLW  4C
06612:  MOVLB  6
06614:  MOVWF  x6D
06616:  MOVLW  01
06618:  ADDWFC 02,W
0661A:  MOVWF  x6E
0661C:  MOVLW  01
0661E:  ADDWF  x6D,W
06620:  MOVWF  01
06622:  MOVLW  00
06624:  ADDWFC x6E,W
06626:  MOVWF  03
06628:  MOVF   01,W
0662A:  ADDLW  3E
0662C:  MOVWF  01
0662E:  MOVLW  01
06630:  ADDWFC 03,F
06632:  MOVF   01,W
06634:  ADDLW  12
06636:  MOVWF  FE9
06638:  MOVLW  00
0663A:  ADDWFC 03,W
0663C:  MOVWF  FEA
0663E:  MOVFF  66B,FEF
06642:  CLRF   1B
06644:  BTFSC  FF2.6
06646:  BSF    1B.6
06648:  BCF    FF2.6
0664A:  BTFSC  FF2.7
0664C:  BSF    1B.7
0664E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
06650:  CLRF   xDB
06652:  MOVFF  66C,6DA
06656:  CLRF   xDD
06658:  MOVLW  2F
0665A:  MOVWF  xDC
0665C:  MOVLB  0
0665E:  CALL   0420
06662:  BTFSC  1B.6
06664:  BSF    FF2.6
06666:  BTFSC  1B.7
06668:  BSF    FF2.7
0666A:  MOVF   01,W
0666C:  ADDLW  4C
0666E:  MOVLB  6
06670:  MOVWF  x6D
06672:  MOVLW  01
06674:  ADDWFC 02,W
06676:  MOVWF  x6E
06678:  MOVLW  01
0667A:  ADDWF  x6D,W
0667C:  MOVWF  01
0667E:  MOVLW  00
06680:  ADDWFC x6E,W
06682:  MOVWF  03
06684:  MOVF   01,W
06686:  ADDLW  3E
06688:  MOVWF  01
0668A:  MOVLW  01
0668C:  ADDWFC 03,F
0668E:  MOVF   01,W
06690:  ADDLW  13
06692:  MOVWF  FE9
06694:  MOVLW  00
06696:  ADDWFC 03,W
06698:  MOVWF  FEA
0669A:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
0669C:  BRA    6900
0669E:  MOVLB  0
066A0:  CLRF   1B
066A2:  BTFSC  FF2.6
066A4:  BSF    1B.6
066A6:  BCF    FF2.6
066A8:  BTFSC  FF2.7
066AA:  BSF    1B.7
066AC:  BCF    FF2.7
066AE:  MOVLB  6
066B0:  CLRF   xDB
066B2:  MOVFF  66C,6DA
066B6:  CLRF   xDD
066B8:  MOVLW  2F
066BA:  MOVWF  xDC
066BC:  MOVLB  0
066BE:  CALL   0420
066C2:  BTFSC  1B.6
066C4:  BSF    FF2.6
066C6:  BTFSC  1B.7
066C8:  BSF    FF2.7
066CA:  MOVF   01,W
066CC:  ADDLW  4C
066CE:  MOVLB  6
066D0:  MOVWF  x6D
066D2:  MOVLW  01
066D4:  ADDWFC 02,W
066D6:  MOVWF  x6E
066D8:  MOVLW  01
066DA:  ADDWF  x6D,W
066DC:  MOVWF  01
066DE:  MOVLW  00
066E0:  ADDWFC x6E,W
066E2:  MOVWF  03
066E4:  MOVF   01,W
066E6:  ADDLW  3E
066E8:  MOVWF  01
066EA:  MOVLW  01
066EC:  ADDWFC 03,F
066EE:  MOVF   01,W
066F0:  ADDLW  14
066F2:  MOVWF  01
066F4:  MOVLW  00
066F6:  ADDWFC 03,F
066F8:  MOVFF  01,66F
066FC:  MOVFF  03,670
06700:  MOVFF  03,672
06704:  MOVFF  01,671
06708:  MOVFF  66A,673
0670C:  MOVLB  0
0670E:  CALL   5DD6
06712:  MOVF   01,F
06714:  BZ    67D2
06716:  CLRF   1B
06718:  BTFSC  FF2.6
0671A:  BSF    1B.6
0671C:  BCF    FF2.6
0671E:  BTFSC  FF2.7
06720:  BSF    1B.7
06722:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
06724:  MOVLB  6
06726:  CLRF   xDB
06728:  MOVFF  66C,6DA
0672C:  CLRF   xDD
0672E:  MOVLW  2F
06730:  MOVWF  xDC
06732:  MOVLB  0
06734:  CALL   0420
06738:  BTFSC  1B.6
0673A:  BSF    FF2.6
0673C:  BTFSC  1B.7
0673E:  BSF    FF2.7
06740:  MOVF   01,W
06742:  ADDLW  4C
06744:  MOVLB  6
06746:  MOVWF  x6D
06748:  MOVLW  01
0674A:  ADDWFC 02,W
0674C:  MOVWF  x6E
0674E:  MOVLW  01
06750:  ADDWF  x6D,W
06752:  MOVWF  01
06754:  MOVLW  00
06756:  ADDWFC x6E,W
06758:  MOVWF  03
0675A:  MOVF   01,W
0675C:  ADDLW  3E
0675E:  MOVWF  01
06760:  MOVLW  01
06762:  ADDWFC 03,F
06764:  MOVF   01,W
06766:  ADDLW  1C
06768:  MOVWF  FE9
0676A:  MOVLW  00
0676C:  ADDWFC 03,W
0676E:  MOVWF  FEA
06770:  MOVFF  66B,FEF
06774:  CLRF   1B
06776:  BTFSC  FF2.6
06778:  BSF    1B.6
0677A:  BCF    FF2.6
0677C:  BTFSC  FF2.7
0677E:  BSF    1B.7
06780:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
06782:  CLRF   xDB
06784:  MOVFF  66C,6DA
06788:  CLRF   xDD
0678A:  MOVLW  2F
0678C:  MOVWF  xDC
0678E:  MOVLB  0
06790:  CALL   0420
06794:  BTFSC  1B.6
06796:  BSF    FF2.6
06798:  BTFSC  1B.7
0679A:  BSF    FF2.7
0679C:  MOVF   01,W
0679E:  ADDLW  4C
067A0:  MOVLB  6
067A2:  MOVWF  x6D
067A4:  MOVLW  01
067A6:  ADDWFC 02,W
067A8:  MOVWF  x6E
067AA:  MOVLW  01
067AC:  ADDWF  x6D,W
067AE:  MOVWF  01
067B0:  MOVLW  00
067B2:  ADDWFC x6E,W
067B4:  MOVWF  03
067B6:  MOVF   01,W
067B8:  ADDLW  3E
067BA:  MOVWF  01
067BC:  MOVLW  01
067BE:  ADDWFC 03,F
067C0:  MOVF   01,W
067C2:  ADDLW  1D
067C4:  MOVWF  FE9
067C6:  MOVLW  00
067C8:  ADDWFC 03,W
067CA:  MOVWF  FEA
067CC:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
067CE:  BRA    6900
067D0:  MOVLB  0
067D2:  CLRF   1B
067D4:  BTFSC  FF2.6
067D6:  BSF    1B.6
067D8:  BCF    FF2.6
067DA:  BTFSC  FF2.7
067DC:  BSF    1B.7
067DE:  BCF    FF2.7
067E0:  MOVLB  6
067E2:  CLRF   xDB
067E4:  MOVFF  66C,6DA
067E8:  CLRF   xDD
067EA:  MOVLW  2F
067EC:  MOVWF  xDC
067EE:  MOVLB  0
067F0:  CALL   0420
067F4:  BTFSC  1B.6
067F6:  BSF    FF2.6
067F8:  BTFSC  1B.7
067FA:  BSF    FF2.7
067FC:  MOVF   01,W
067FE:  ADDLW  4C
06800:  MOVLB  6
06802:  MOVWF  x6D
06804:  MOVLW  01
06806:  ADDWFC 02,W
06808:  MOVWF  x6E
0680A:  MOVLW  01
0680C:  ADDWF  x6D,W
0680E:  MOVWF  01
06810:  MOVLW  00
06812:  ADDWFC x6E,W
06814:  MOVWF  03
06816:  MOVF   01,W
06818:  ADDLW  3E
0681A:  MOVWF  01
0681C:  MOVLW  01
0681E:  ADDWFC 03,F
06820:  MOVF   01,W
06822:  ADDLW  1E
06824:  MOVWF  01
06826:  MOVLW  00
06828:  ADDWFC 03,F
0682A:  MOVFF  01,66F
0682E:  MOVFF  03,670
06832:  MOVFF  03,672
06836:  MOVFF  01,671
0683A:  MOVFF  66A,673
0683E:  MOVLB  0
06840:  CALL   5DD6
06844:  MOVF   01,F
06846:  BZ    6902
06848:  CLRF   1B
0684A:  BTFSC  FF2.6
0684C:  BSF    1B.6
0684E:  BCF    FF2.6
06850:  BTFSC  FF2.7
06852:  BSF    1B.7
06854:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
06856:  MOVLB  6
06858:  CLRF   xDB
0685A:  MOVFF  66C,6DA
0685E:  CLRF   xDD
06860:  MOVLW  2F
06862:  MOVWF  xDC
06864:  MOVLB  0
06866:  CALL   0420
0686A:  BTFSC  1B.6
0686C:  BSF    FF2.6
0686E:  BTFSC  1B.7
06870:  BSF    FF2.7
06872:  MOVF   01,W
06874:  ADDLW  4C
06876:  MOVLB  6
06878:  MOVWF  x6D
0687A:  MOVLW  01
0687C:  ADDWFC 02,W
0687E:  MOVWF  x6E
06880:  MOVLW  01
06882:  ADDWF  x6D,W
06884:  MOVWF  01
06886:  MOVLW  00
06888:  ADDWFC x6E,W
0688A:  MOVWF  03
0688C:  MOVF   01,W
0688E:  ADDLW  3E
06890:  MOVWF  01
06892:  MOVLW  01
06894:  ADDWFC 03,F
06896:  MOVF   01,W
06898:  ADDLW  26
0689A:  MOVWF  FE9
0689C:  MOVLW  00
0689E:  ADDWFC 03,W
068A0:  MOVWF  FEA
068A2:  MOVFF  66B,FEF
068A6:  CLRF   1B
068A8:  BTFSC  FF2.6
068AA:  BSF    1B.6
068AC:  BCF    FF2.6
068AE:  BTFSC  FF2.7
068B0:  BSF    1B.7
068B2:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
068B4:  CLRF   xDB
068B6:  MOVFF  66C,6DA
068BA:  CLRF   xDD
068BC:  MOVLW  2F
068BE:  MOVWF  xDC
068C0:  MOVLB  0
068C2:  CALL   0420
068C6:  BTFSC  1B.6
068C8:  BSF    FF2.6
068CA:  BTFSC  1B.7
068CC:  BSF    FF2.7
068CE:  MOVF   01,W
068D0:  ADDLW  4C
068D2:  MOVLB  6
068D4:  MOVWF  x6D
068D6:  MOVLW  01
068D8:  ADDWFC 02,W
068DA:  MOVWF  x6E
068DC:  MOVLW  01
068DE:  ADDWF  x6D,W
068E0:  MOVWF  01
068E2:  MOVLW  00
068E4:  ADDWFC x6E,W
068E6:  MOVWF  03
068E8:  MOVF   01,W
068EA:  ADDLW  3E
068EC:  MOVWF  01
068EE:  MOVLW  01
068F0:  ADDWFC 03,F
068F2:  MOVF   01,W
068F4:  ADDLW  27
068F6:  MOVWF  FE9
068F8:  MOVLW  00
068FA:  ADDWFC 03,W
068FC:  MOVWF  FEA
068FE:  BSF    FEF.0
06900:  MOVLB  0
....................          } 
....................  
....................          break; 
06902:  BRA    6906
....................          default: 
....................          break; 
06904:  BRA    6906
....................       } 
....................    } 
06906:  MOVLB  6
06908:  INCF   x6C,F
0690A:  GOTO   5E0A
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
0690E:  CLRF   x6C
06910:  MOVLB  1
06912:  MOVF   x3E,W
06914:  MOVLB  6
06916:  SUBWF  x6C,W
06918:  BTFSC  FD8.0
0691A:  BRA    6BD4
0691C:  CLRF   1B
0691E:  BTFSC  FF2.6
06920:  BSF    1B.6
06922:  BCF    FF2.6
06924:  BTFSC  FF2.7
06926:  BSF    1B.7
06928:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
0692A:  CLRF   xDB
0692C:  MOVFF  66C,6DA
06930:  CLRF   xDD
06932:  MOVLW  21
06934:  MOVWF  xDC
06936:  MOVLB  0
06938:  CALL   0420
0693C:  BTFSC  1B.6
0693E:  BSF    FF2.6
06940:  BTFSC  1B.7
06942:  BSF    FF2.7
06944:  MOVFF  02,03
06948:  MOVF   01,W
0694A:  ADDLW  40
0694C:  MOVWF  01
0694E:  MOVLW  01
06950:  ADDWFC 03,F
06952:  MOVFF  01,FE9
06956:  MOVFF  03,FEA
0695A:  MOVF   FEF,W
0695C:  XORLW  03
0695E:  BZ    6962
06960:  BRA    6BCE
....................          
....................           
....................          case timer: 
....................           if(value==1) 
06962:  MOVLB  6
06964:  DECFSZ x6B,W
06966:  BRA    6BCA
06968:  CLRF   1B
0696A:  BTFSC  FF2.6
0696C:  BSF    1B.6
0696E:  BCF    FF2.6
06970:  BTFSC  FF2.7
06972:  BSF    1B.7
06974:  BCF    FF2.7
....................           { 
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
06976:  CLRF   xDB
06978:  MOVFF  66C,6DA
0697C:  CLRF   xDD
0697E:  MOVLW  21
06980:  MOVWF  xDC
06982:  MOVLB  0
06984:  CALL   0420
06988:  BTFSC  1B.6
0698A:  BSF    FF2.6
0698C:  BTFSC  1B.7
0698E:  BSF    FF2.7
06990:  MOVF   01,W
06992:  ADDLW  02
06994:  MOVLB  6
06996:  MOVWF  x6D
06998:  MOVLW  00
0699A:  ADDWFC 02,W
0699C:  MOVWF  x6E
0699E:  MOVLW  01
069A0:  ADDWF  x6D,W
069A2:  MOVWF  01
069A4:  MOVLW  00
069A6:  ADDWFC x6E,W
069A8:  MOVWF  03
069AA:  MOVF   01,W
069AC:  ADDLW  3E
069AE:  MOVWF  01
069B0:  MOVLW  01
069B2:  ADDWFC 03,F
069B4:  MOVF   01,W
069B6:  ADDLW  09
069B8:  MOVWF  01
069BA:  MOVLW  00
069BC:  ADDWFC 03,F
069BE:  MOVFF  01,66F
069C2:  MOVFF  03,670
069C6:  MOVFF  03,672
069CA:  MOVFF  01,671
069CE:  MOVFF  66A,673
069D2:  MOVLB  0
069D4:  CALL   5DD6
069D8:  MOVF   01,F
069DA:  BZ    6A9A
069DC:  CLRF   1B
069DE:  BTFSC  FF2.6
069E0:  BSF    1B.6
069E2:  BCF    FF2.6
069E4:  BTFSC  FF2.7
069E6:  BSF    1B.7
069E8:  BCF    FF2.7
....................          {//printf("AKI1"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
069EA:  MOVLB  6
069EC:  CLRF   xDB
069EE:  MOVFF  66C,6DA
069F2:  CLRF   xDD
069F4:  MOVLW  21
069F6:  MOVWF  xDC
069F8:  MOVLB  0
069FA:  CALL   0420
069FE:  BTFSC  1B.6
06A00:  BSF    FF2.6
06A02:  BTFSC  1B.7
06A04:  BSF    FF2.7
06A06:  MOVF   01,W
06A08:  ADDLW  02
06A0A:  MOVLB  6
06A0C:  MOVWF  x6D
06A0E:  MOVLW  00
06A10:  ADDWFC 02,W
06A12:  MOVWF  x6E
06A14:  MOVLW  01
06A16:  ADDWF  x6D,W
06A18:  MOVWF  01
06A1A:  MOVLW  00
06A1C:  ADDWFC x6E,W
06A1E:  MOVWF  03
06A20:  MOVF   01,W
06A22:  ADDLW  3E
06A24:  MOVWF  01
06A26:  MOVLW  01
06A28:  ADDWFC 03,F
06A2A:  MOVF   01,W
06A2C:  ADDLW  1D
06A2E:  MOVWF  FE9
06A30:  MOVLW  00
06A32:  ADDWFC 03,W
06A34:  MOVWF  FEA
06A36:  CLRF   FEC
06A38:  MOVF   FED,F
06A3A:  CLRF   FEF
06A3C:  CLRF   1B
06A3E:  BTFSC  FF2.6
06A40:  BSF    1B.6
06A42:  BCF    FF2.6
06A44:  BTFSC  FF2.7
06A46:  BSF    1B.7
06A48:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
06A4A:  CLRF   xDB
06A4C:  MOVFF  66C,6DA
06A50:  CLRF   xDD
06A52:  MOVLW  21
06A54:  MOVWF  xDC
06A56:  MOVLB  0
06A58:  CALL   0420
06A5C:  BTFSC  1B.6
06A5E:  BSF    FF2.6
06A60:  BTFSC  1B.7
06A62:  BSF    FF2.7
06A64:  MOVF   01,W
06A66:  ADDLW  02
06A68:  MOVLB  6
06A6A:  MOVWF  x6D
06A6C:  MOVLW  00
06A6E:  ADDWFC 02,W
06A70:  MOVWF  x6E
06A72:  MOVLW  01
06A74:  ADDWF  x6D,W
06A76:  MOVWF  01
06A78:  MOVLW  00
06A7A:  ADDWFC x6E,W
06A7C:  MOVWF  03
06A7E:  MOVF   01,W
06A80:  ADDLW  3E
06A82:  MOVWF  01
06A84:  MOVLW  01
06A86:  ADDWFC 03,F
06A88:  MOVF   01,W
06A8A:  ADDLW  1F
06A8C:  MOVWF  FE9
06A8E:  MOVLW  00
06A90:  ADDWFC 03,W
06A92:  MOVWF  FEA
06A94:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
06A96:  BRA    6BCA
06A98:  MOVLB  0
06A9A:  CLRF   1B
06A9C:  BTFSC  FF2.6
06A9E:  BSF    1B.6
06AA0:  BCF    FF2.6
06AA2:  BTFSC  FF2.7
06AA4:  BSF    1B.7
06AA6:  BCF    FF2.7
06AA8:  MOVLB  6
06AAA:  CLRF   xDB
06AAC:  MOVFF  66C,6DA
06AB0:  CLRF   xDD
06AB2:  MOVLW  21
06AB4:  MOVWF  xDC
06AB6:  MOVLB  0
06AB8:  CALL   0420
06ABC:  BTFSC  1B.6
06ABE:  BSF    FF2.6
06AC0:  BTFSC  1B.7
06AC2:  BSF    FF2.7
06AC4:  MOVF   01,W
06AC6:  ADDLW  02
06AC8:  MOVLB  6
06ACA:  MOVWF  x6D
06ACC:  MOVLW  00
06ACE:  ADDWFC 02,W
06AD0:  MOVWF  x6E
06AD2:  MOVLW  01
06AD4:  ADDWF  x6D,W
06AD6:  MOVWF  01
06AD8:  MOVLW  00
06ADA:  ADDWFC x6E,W
06ADC:  MOVWF  03
06ADE:  MOVF   01,W
06AE0:  ADDLW  3E
06AE2:  MOVWF  01
06AE4:  MOVLW  01
06AE6:  ADDWFC 03,F
06AE8:  MOVF   01,W
06AEA:  ADDLW  13
06AEC:  MOVWF  01
06AEE:  MOVLW  00
06AF0:  ADDWFC 03,F
06AF2:  MOVFF  01,66F
06AF6:  MOVFF  03,670
06AFA:  MOVFF  03,672
06AFE:  MOVFF  01,671
06B02:  MOVFF  66A,673
06B06:  MOVLB  0
06B08:  CALL   5DD6
06B0C:  MOVF   01,F
06B0E:  BZ    6BCC
06B10:  CLRF   1B
06B12:  BTFSC  FF2.6
06B14:  BSF    1B.6
06B16:  BCF    FF2.6
06B18:  BTFSC  FF2.7
06B1A:  BSF    1B.7
06B1C:  BCF    FF2.7
....................          {//printf("AKI2"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
06B1E:  MOVLB  6
06B20:  CLRF   xDB
06B22:  MOVFF  66C,6DA
06B26:  CLRF   xDD
06B28:  MOVLW  21
06B2A:  MOVWF  xDC
06B2C:  MOVLB  0
06B2E:  CALL   0420
06B32:  BTFSC  1B.6
06B34:  BSF    FF2.6
06B36:  BTFSC  1B.7
06B38:  BSF    FF2.7
06B3A:  MOVF   01,W
06B3C:  ADDLW  02
06B3E:  MOVLB  6
06B40:  MOVWF  x6D
06B42:  MOVLW  00
06B44:  ADDWFC 02,W
06B46:  MOVWF  x6E
06B48:  MOVLW  01
06B4A:  ADDWF  x6D,W
06B4C:  MOVWF  01
06B4E:  MOVLW  00
06B50:  ADDWFC x6E,W
06B52:  MOVWF  03
06B54:  MOVF   01,W
06B56:  ADDLW  3E
06B58:  MOVWF  01
06B5A:  MOVLW  01
06B5C:  ADDWFC 03,F
06B5E:  MOVF   01,W
06B60:  ADDLW  1D
06B62:  MOVWF  FE9
06B64:  MOVLW  00
06B66:  ADDWFC 03,W
06B68:  MOVWF  FEA
06B6A:  CLRF   FEC
06B6C:  MOVF   FED,F
06B6E:  CLRF   FEF
06B70:  CLRF   1B
06B72:  BTFSC  FF2.6
06B74:  BSF    1B.6
06B76:  BCF    FF2.6
06B78:  BTFSC  FF2.7
06B7A:  BSF    1B.7
06B7C:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
06B7E:  CLRF   xDB
06B80:  MOVFF  66C,6DA
06B84:  CLRF   xDD
06B86:  MOVLW  21
06B88:  MOVWF  xDC
06B8A:  MOVLB  0
06B8C:  CALL   0420
06B90:  BTFSC  1B.6
06B92:  BSF    FF2.6
06B94:  BTFSC  1B.7
06B96:  BSF    FF2.7
06B98:  MOVF   01,W
06B9A:  ADDLW  02
06B9C:  MOVLB  6
06B9E:  MOVWF  x6D
06BA0:  MOVLW  00
06BA2:  ADDWFC 02,W
06BA4:  MOVWF  x6E
06BA6:  MOVLW  01
06BA8:  ADDWF  x6D,W
06BAA:  MOVWF  01
06BAC:  MOVLW  00
06BAE:  ADDWFC x6E,W
06BB0:  MOVWF  03
06BB2:  MOVF   01,W
06BB4:  ADDLW  3E
06BB6:  MOVWF  01
06BB8:  MOVLW  01
06BBA:  ADDWFC 03,F
06BBC:  MOVF   01,W
06BBE:  ADDLW  1F
06BC0:  MOVWF  FE9
06BC2:  MOVLW  00
06BC4:  ADDWFC 03,W
06BC6:  MOVWF  FEA
06BC8:  BCF    FEF.0
06BCA:  MOVLB  0
....................          } 
....................          } 
....................          break; 
06BCC:  BRA    6BCE
....................       } 
....................    } 
06BCE:  MOVLB  6
06BD0:  INCF   x6C,F
06BD2:  BRA    6910
....................           
.................... } 
06BD4:  MOVLB  0
06BD6:  GOTO   6BE6 (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
06BDA:  MOVFF  668,66A
06BDE:  MOVFF  669,66B
06BE2:  GOTO   5E06
....................    //TODO CAN Sending of values 
.................... } 
06BE6:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
06BE8:  MOVLB  6
06BEA:  CLRF   x61
06BEC:  MOVLB  1
06BEE:  MOVF   x3E,W
06BF0:  MOVLB  6
06BF2:  SUBWF  x61,W
06BF4:  BTFSC  FD8.0
06BF6:  GOTO   7CF6
06BFA:  CLRF   1B
06BFC:  BTFSC  FF2.6
06BFE:  BSF    1B.6
06C00:  BCF    FF2.6
06C02:  BTFSC  FF2.7
06C04:  BSF    1B.7
06C06:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
06C08:  CLRF   xDB
06C0A:  MOVFF  661,6DA
06C0E:  CLRF   xDD
06C10:  MOVLW  21
06C12:  MOVWF  xDC
06C14:  MOVLB  0
06C16:  CALL   0420
06C1A:  BTFSC  1B.6
06C1C:  BSF    FF2.6
06C1E:  BTFSC  1B.7
06C20:  BSF    FF2.7
06C22:  MOVFF  02,03
06C26:  MOVF   01,W
06C28:  ADDLW  40
06C2A:  MOVWF  01
06C2C:  MOVLW  01
06C2E:  ADDWFC 03,F
06C30:  MOVFF  01,FE9
06C34:  MOVFF  03,FEA
06C38:  MOVF   FEF,W
06C3A:  BZ    6C56
06C3C:  XORLW  02
06C3E:  BTFSC  FD8.2
06C40:  BRA    71DA
06C42:  XORLW  03
06C44:  BTFSC  FD8.2
06C46:  GOTO   7588
06C4A:  XORLW  02
06C4C:  BTFSC  FD8.2
06C4E:  GOTO   7938
06C52:  GOTO   7CEC
....................          case dimmer_switch: 
06C56:  CLRF   1B
06C58:  BTFSC  FF2.6
06C5A:  BSF    1B.6
06C5C:  BCF    FF2.6
06C5E:  BTFSC  FF2.7
06C60:  BSF    1B.7
06C62:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
06C64:  MOVLB  6
06C66:  CLRF   xDB
06C68:  MOVFF  661,6DA
06C6C:  CLRF   xDD
06C6E:  MOVLW  21
06C70:  MOVWF  xDC
06C72:  MOVLB  0
06C74:  CALL   0420
06C78:  BTFSC  1B.6
06C7A:  BSF    FF2.6
06C7C:  BTFSC  1B.7
06C7E:  BSF    FF2.7
06C80:  MOVF   01,W
06C82:  ADDLW  02
06C84:  MOVLB  6
06C86:  MOVWF  x62
06C88:  MOVLW  00
06C8A:  ADDWFC 02,W
06C8C:  MOVWF  x63
06C8E:  MOVLW  01
06C90:  ADDWF  x62,W
06C92:  MOVWF  01
06C94:  MOVLW  00
06C96:  ADDWFC x63,W
06C98:  MOVWF  03
06C9A:  MOVF   01,W
06C9C:  ADDLW  3E
06C9E:  MOVWF  01
06CA0:  MOVLW  01
06CA2:  ADDWFC 03,F
06CA4:  MOVF   01,W
06CA6:  ADDLW  02
06CA8:  MOVWF  FE9
06CAA:  MOVLW  00
06CAC:  ADDWFC 03,W
06CAE:  MOVWF  FEA
06CB0:  BTFSS  FEF.0
06CB2:  BRA    6E2A
06CB4:  CLRF   1B
06CB6:  BTFSC  FF2.6
06CB8:  BSF    1B.6
06CBA:  BCF    FF2.6
06CBC:  BTFSC  FF2.7
06CBE:  BSF    1B.7
06CC0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
06CC2:  CLRF   xDB
06CC4:  MOVFF  661,6DA
06CC8:  CLRF   xDD
06CCA:  MOVLW  21
06CCC:  MOVWF  xDC
06CCE:  MOVLB  0
06CD0:  CALL   0420
06CD4:  BTFSC  1B.6
06CD6:  BSF    FF2.6
06CD8:  BTFSC  1B.7
06CDA:  BSF    FF2.7
06CDC:  MOVF   01,W
06CDE:  ADDLW  02
06CE0:  MOVLB  6
06CE2:  MOVWF  x62
06CE4:  MOVLW  00
06CE6:  ADDWFC 02,W
06CE8:  MOVWF  x63
06CEA:  MOVLW  01
06CEC:  ADDWF  x62,W
06CEE:  MOVWF  01
06CF0:  MOVLW  00
06CF2:  ADDWFC x63,W
06CF4:  MOVWF  03
06CF6:  MOVF   01,W
06CF8:  ADDLW  3E
06CFA:  MOVWF  01
06CFC:  MOVLW  01
06CFE:  ADDWFC 03,F
06D00:  MOVFF  01,FE9
06D04:  MOVFF  03,FEA
06D08:  MOVFF  FEF,664
06D0C:  CLRF   1B
06D0E:  BTFSC  FF2.6
06D10:  BSF    1B.6
06D12:  BCF    FF2.6
06D14:  BTFSC  FF2.7
06D16:  BSF    1B.7
06D18:  BCF    FF2.7
06D1A:  CLRF   xDB
06D1C:  MOVFF  661,6DA
06D20:  CLRF   xDD
06D22:  MOVLW  21
06D24:  MOVWF  xDC
06D26:  MOVLB  0
06D28:  CALL   0420
06D2C:  BTFSC  1B.6
06D2E:  BSF    FF2.6
06D30:  BTFSC  1B.7
06D32:  BSF    FF2.7
06D34:  MOVF   01,W
06D36:  ADDLW  02
06D38:  MOVLB  6
06D3A:  MOVWF  x65
06D3C:  MOVLW  00
06D3E:  ADDWFC 02,W
06D40:  MOVWF  x66
06D42:  MOVLW  01
06D44:  ADDWF  x65,W
06D46:  MOVWF  01
06D48:  MOVLW  00
06D4A:  ADDWFC x66,W
06D4C:  MOVWF  03
06D4E:  MOVF   01,W
06D50:  ADDLW  3E
06D52:  MOVWF  01
06D54:  MOVLW  01
06D56:  ADDWFC 03,F
06D58:  MOVF   01,W
06D5A:  ADDLW  01
06D5C:  MOVWF  FE9
06D5E:  MOVLW  00
06D60:  ADDWFC 03,W
06D62:  MOVWF  FEA
06D64:  MOVFF  FEF,667
06D68:  MOVFF  664,668
06D6C:  MOVFF  667,669
06D70:  MOVLB  0
06D72:  RCALL  6BDA
06D74:  CLRF   1B
06D76:  BTFSC  FF2.6
06D78:  BSF    1B.6
06D7A:  BCF    FF2.6
06D7C:  BTFSC  FF2.7
06D7E:  BSF    1B.7
06D80:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
06D82:  MOVLB  6
06D84:  CLRF   xDB
06D86:  MOVFF  661,6DA
06D8A:  CLRF   xDD
06D8C:  MOVLW  21
06D8E:  MOVWF  xDC
06D90:  MOVLB  0
06D92:  CALL   0420
06D96:  BTFSC  1B.6
06D98:  BSF    FF2.6
06D9A:  BTFSC  1B.7
06D9C:  BSF    FF2.7
06D9E:  MOVF   01,W
06DA0:  ADDLW  02
06DA2:  MOVLB  6
06DA4:  MOVWF  x62
06DA6:  MOVLW  00
06DA8:  ADDWFC 02,W
06DAA:  MOVWF  x63
06DAC:  MOVLW  01
06DAE:  ADDWF  x62,W
06DB0:  MOVWF  01
06DB2:  MOVLW  00
06DB4:  ADDWFC x63,W
06DB6:  MOVWF  03
06DB8:  MOVF   01,W
06DBA:  ADDLW  3E
06DBC:  MOVWF  01
06DBE:  MOVLW  01
06DC0:  ADDWFC 03,F
06DC2:  MOVF   01,W
06DC4:  ADDLW  02
06DC6:  MOVWF  FE9
06DC8:  MOVLW  00
06DCA:  ADDWFC 03,W
06DCC:  MOVWF  FEA
06DCE:  BCF    FEF.0
06DD0:  CLRF   1B
06DD2:  BTFSC  FF2.6
06DD4:  BSF    1B.6
06DD6:  BCF    FF2.6
06DD8:  BTFSC  FF2.7
06DDA:  BSF    1B.7
06DDC:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
06DDE:  CLRF   xDB
06DE0:  MOVFF  661,6DA
06DE4:  CLRF   xDD
06DE6:  MOVLW  21
06DE8:  MOVWF  xDC
06DEA:  MOVLB  0
06DEC:  CALL   0420
06DF0:  BTFSC  1B.6
06DF2:  BSF    FF2.6
06DF4:  BTFSC  1B.7
06DF6:  BSF    FF2.7
06DF8:  MOVF   01,W
06DFA:  ADDLW  02
06DFC:  MOVLB  6
06DFE:  MOVWF  x62
06E00:  MOVLW  00
06E02:  ADDWFC 02,W
06E04:  MOVWF  x63
06E06:  MOVLW  01
06E08:  ADDWF  x62,W
06E0A:  MOVWF  01
06E0C:  MOVLW  00
06E0E:  ADDWFC x63,W
06E10:  MOVWF  03
06E12:  MOVF   01,W
06E14:  ADDLW  3E
06E16:  MOVWF  01
06E18:  MOVLW  01
06E1A:  ADDWFC 03,F
06E1C:  MOVF   01,W
06E1E:  ADDLW  01
06E20:  MOVWF  FE9
06E22:  MOVLW  00
06E24:  ADDWFC 03,W
06E26:  MOVWF  FEA
06E28:  CLRF   FEF
06E2A:  CLRF   1B
06E2C:  BTFSC  FF2.6
06E2E:  BSF    1B.6
06E30:  BCF    FF2.6
06E32:  BTFSC  FF2.7
06E34:  BSF    1B.7
06E36:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
06E38:  CLRF   xDB
06E3A:  MOVFF  661,6DA
06E3E:  CLRF   xDD
06E40:  MOVLW  21
06E42:  MOVWF  xDC
06E44:  MOVLB  0
06E46:  CALL   0420
06E4A:  BTFSC  1B.6
06E4C:  BSF    FF2.6
06E4E:  BTFSC  1B.7
06E50:  BSF    FF2.7
06E52:  MOVF   01,W
06E54:  ADDLW  02
06E56:  MOVLB  6
06E58:  MOVWF  x62
06E5A:  MOVLW  00
06E5C:  ADDWFC 02,W
06E5E:  MOVWF  x63
06E60:  MOVLW  01
06E62:  ADDWF  x62,W
06E64:  MOVWF  01
06E66:  MOVLW  00
06E68:  ADDWFC x63,W
06E6A:  MOVWF  03
06E6C:  MOVF   01,W
06E6E:  ADDLW  3E
06E70:  MOVWF  01
06E72:  MOVLW  01
06E74:  ADDWFC 03,F
06E76:  MOVF   01,W
06E78:  ADDLW  05
06E7A:  MOVWF  FE9
06E7C:  MOVLW  00
06E7E:  ADDWFC 03,W
06E80:  MOVWF  FEA
06E82:  BTFSS  FEF.0
06E84:  BRA    7000
06E86:  CLRF   1B
06E88:  BTFSC  FF2.6
06E8A:  BSF    1B.6
06E8C:  BCF    FF2.6
06E8E:  BTFSC  FF2.7
06E90:  BSF    1B.7
06E92:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
06E94:  CLRF   xDB
06E96:  MOVFF  661,6DA
06E9A:  CLRF   xDD
06E9C:  MOVLW  21
06E9E:  MOVWF  xDC
06EA0:  MOVLB  0
06EA2:  CALL   0420
06EA6:  BTFSC  1B.6
06EA8:  BSF    FF2.6
06EAA:  BTFSC  1B.7
06EAC:  BSF    FF2.7
06EAE:  MOVF   01,W
06EB0:  ADDLW  02
06EB2:  MOVLB  6
06EB4:  MOVWF  x62
06EB6:  MOVLW  00
06EB8:  ADDWFC 02,W
06EBA:  MOVWF  x63
06EBC:  MOVLW  01
06EBE:  ADDWF  x62,W
06EC0:  MOVWF  01
06EC2:  MOVLW  00
06EC4:  ADDWFC x63,W
06EC6:  MOVWF  03
06EC8:  MOVF   01,W
06ECA:  ADDLW  3E
06ECC:  MOVWF  01
06ECE:  MOVLW  01
06ED0:  ADDWFC 03,F
06ED2:  MOVF   01,W
06ED4:  ADDLW  03
06ED6:  MOVWF  FE9
06ED8:  MOVLW  00
06EDA:  ADDWFC 03,W
06EDC:  MOVWF  FEA
06EDE:  MOVFF  FEF,664
06EE2:  CLRF   1B
06EE4:  BTFSC  FF2.6
06EE6:  BSF    1B.6
06EE8:  BCF    FF2.6
06EEA:  BTFSC  FF2.7
06EEC:  BSF    1B.7
06EEE:  BCF    FF2.7
06EF0:  CLRF   xDB
06EF2:  MOVFF  661,6DA
06EF6:  CLRF   xDD
06EF8:  MOVLW  21
06EFA:  MOVWF  xDC
06EFC:  MOVLB  0
06EFE:  CALL   0420
06F02:  BTFSC  1B.6
06F04:  BSF    FF2.6
06F06:  BTFSC  1B.7
06F08:  BSF    FF2.7
06F0A:  MOVF   01,W
06F0C:  ADDLW  02
06F0E:  MOVLB  6
06F10:  MOVWF  x65
06F12:  MOVLW  00
06F14:  ADDWFC 02,W
06F16:  MOVWF  x66
06F18:  MOVLW  01
06F1A:  ADDWF  x65,W
06F1C:  MOVWF  01
06F1E:  MOVLW  00
06F20:  ADDWFC x66,W
06F22:  MOVWF  03
06F24:  MOVF   01,W
06F26:  ADDLW  3E
06F28:  MOVWF  01
06F2A:  MOVLW  01
06F2C:  ADDWFC 03,F
06F2E:  MOVF   01,W
06F30:  ADDLW  04
06F32:  MOVWF  FE9
06F34:  MOVLW  00
06F36:  ADDWFC 03,W
06F38:  MOVWF  FEA
06F3A:  MOVFF  FEF,667
06F3E:  MOVFF  664,668
06F42:  MOVFF  667,669
06F46:  MOVLB  0
06F48:  RCALL  6BDA
06F4A:  CLRF   1B
06F4C:  BTFSC  FF2.6
06F4E:  BSF    1B.6
06F50:  BCF    FF2.6
06F52:  BTFSC  FF2.7
06F54:  BSF    1B.7
06F56:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06F58:  MOVLB  6
06F5A:  CLRF   xDB
06F5C:  MOVFF  661,6DA
06F60:  CLRF   xDD
06F62:  MOVLW  21
06F64:  MOVWF  xDC
06F66:  MOVLB  0
06F68:  CALL   0420
06F6C:  BTFSC  1B.6
06F6E:  BSF    FF2.6
06F70:  BTFSC  1B.7
06F72:  BSF    FF2.7
06F74:  MOVF   01,W
06F76:  ADDLW  02
06F78:  MOVLB  6
06F7A:  MOVWF  x62
06F7C:  MOVLW  00
06F7E:  ADDWFC 02,W
06F80:  MOVWF  x63
06F82:  MOVLW  01
06F84:  ADDWF  x62,W
06F86:  MOVWF  01
06F88:  MOVLW  00
06F8A:  ADDWFC x63,W
06F8C:  MOVWF  03
06F8E:  MOVF   01,W
06F90:  ADDLW  3E
06F92:  MOVWF  01
06F94:  MOVLW  01
06F96:  ADDWFC 03,F
06F98:  MOVF   01,W
06F9A:  ADDLW  05
06F9C:  MOVWF  FE9
06F9E:  MOVLW  00
06FA0:  ADDWFC 03,W
06FA2:  MOVWF  FEA
06FA4:  BCF    FEF.0
06FA6:  CLRF   1B
06FA8:  BTFSC  FF2.6
06FAA:  BSF    1B.6
06FAC:  BCF    FF2.6
06FAE:  BTFSC  FF2.7
06FB0:  BSF    1B.7
06FB2:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
06FB4:  CLRF   xDB
06FB6:  MOVFF  661,6DA
06FBA:  CLRF   xDD
06FBC:  MOVLW  21
06FBE:  MOVWF  xDC
06FC0:  MOVLB  0
06FC2:  CALL   0420
06FC6:  BTFSC  1B.6
06FC8:  BSF    FF2.6
06FCA:  BTFSC  1B.7
06FCC:  BSF    FF2.7
06FCE:  MOVF   01,W
06FD0:  ADDLW  02
06FD2:  MOVLB  6
06FD4:  MOVWF  x62
06FD6:  MOVLW  00
06FD8:  ADDWFC 02,W
06FDA:  MOVWF  x63
06FDC:  MOVLW  01
06FDE:  ADDWF  x62,W
06FE0:  MOVWF  01
06FE2:  MOVLW  00
06FE4:  ADDWFC x63,W
06FE6:  MOVWF  03
06FE8:  MOVF   01,W
06FEA:  ADDLW  3E
06FEC:  MOVWF  01
06FEE:  MOVLW  01
06FF0:  ADDWFC 03,F
06FF2:  MOVF   01,W
06FF4:  ADDLW  04
06FF6:  MOVWF  FE9
06FF8:  MOVLW  00
06FFA:  ADDWFC 03,W
06FFC:  MOVWF  FEA
06FFE:  CLRF   FEF
07000:  CLRF   1B
07002:  BTFSC  FF2.6
07004:  BSF    1B.6
07006:  BCF    FF2.6
07008:  BTFSC  FF2.7
0700A:  BSF    1B.7
0700C:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
0700E:  CLRF   xDB
07010:  MOVFF  661,6DA
07014:  CLRF   xDD
07016:  MOVLW  21
07018:  MOVWF  xDC
0701A:  MOVLB  0
0701C:  CALL   0420
07020:  BTFSC  1B.6
07022:  BSF    FF2.6
07024:  BTFSC  1B.7
07026:  BSF    FF2.7
07028:  MOVF   01,W
0702A:  ADDLW  02
0702C:  MOVLB  6
0702E:  MOVWF  x62
07030:  MOVLW  00
07032:  ADDWFC 02,W
07034:  MOVWF  x63
07036:  MOVLW  01
07038:  ADDWF  x62,W
0703A:  MOVWF  01
0703C:  MOVLW  00
0703E:  ADDWFC x63,W
07040:  MOVWF  03
07042:  MOVF   01,W
07044:  ADDLW  3E
07046:  MOVWF  01
07048:  MOVLW  01
0704A:  ADDWFC 03,F
0704C:  MOVF   01,W
0704E:  ADDLW  08
07050:  MOVWF  FE9
07052:  MOVLW  00
07054:  ADDWFC 03,W
07056:  MOVWF  FEA
07058:  BTFSS  FEF.0
0705A:  BRA    71D6
0705C:  CLRF   1B
0705E:  BTFSC  FF2.6
07060:  BSF    1B.6
07062:  BCF    FF2.6
07064:  BTFSC  FF2.7
07066:  BSF    1B.7
07068:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
0706A:  CLRF   xDB
0706C:  MOVFF  661,6DA
07070:  CLRF   xDD
07072:  MOVLW  21
07074:  MOVWF  xDC
07076:  MOVLB  0
07078:  CALL   0420
0707C:  BTFSC  1B.6
0707E:  BSF    FF2.6
07080:  BTFSC  1B.7
07082:  BSF    FF2.7
07084:  MOVF   01,W
07086:  ADDLW  02
07088:  MOVLB  6
0708A:  MOVWF  x62
0708C:  MOVLW  00
0708E:  ADDWFC 02,W
07090:  MOVWF  x63
07092:  MOVLW  01
07094:  ADDWF  x62,W
07096:  MOVWF  01
07098:  MOVLW  00
0709A:  ADDWFC x63,W
0709C:  MOVWF  03
0709E:  MOVF   01,W
070A0:  ADDLW  3E
070A2:  MOVWF  01
070A4:  MOVLW  01
070A6:  ADDWFC 03,F
070A8:  MOVF   01,W
070AA:  ADDLW  06
070AC:  MOVWF  FE9
070AE:  MOVLW  00
070B0:  ADDWFC 03,W
070B2:  MOVWF  FEA
070B4:  MOVFF  FEF,664
070B8:  CLRF   1B
070BA:  BTFSC  FF2.6
070BC:  BSF    1B.6
070BE:  BCF    FF2.6
070C0:  BTFSC  FF2.7
070C2:  BSF    1B.7
070C4:  BCF    FF2.7
070C6:  CLRF   xDB
070C8:  MOVFF  661,6DA
070CC:  CLRF   xDD
070CE:  MOVLW  21
070D0:  MOVWF  xDC
070D2:  MOVLB  0
070D4:  CALL   0420
070D8:  BTFSC  1B.6
070DA:  BSF    FF2.6
070DC:  BTFSC  1B.7
070DE:  BSF    FF2.7
070E0:  MOVF   01,W
070E2:  ADDLW  02
070E4:  MOVLB  6
070E6:  MOVWF  x65
070E8:  MOVLW  00
070EA:  ADDWFC 02,W
070EC:  MOVWF  x66
070EE:  MOVLW  01
070F0:  ADDWF  x65,W
070F2:  MOVWF  01
070F4:  MOVLW  00
070F6:  ADDWFC x66,W
070F8:  MOVWF  03
070FA:  MOVF   01,W
070FC:  ADDLW  3E
070FE:  MOVWF  01
07100:  MOVLW  01
07102:  ADDWFC 03,F
07104:  MOVF   01,W
07106:  ADDLW  07
07108:  MOVWF  FE9
0710A:  MOVLW  00
0710C:  ADDWFC 03,W
0710E:  MOVWF  FEA
07110:  MOVFF  FEF,667
07114:  MOVFF  664,668
07118:  MOVFF  667,669
0711C:  MOVLB  0
0711E:  RCALL  6BDA
07120:  CLRF   1B
07122:  BTFSC  FF2.6
07124:  BSF    1B.6
07126:  BCF    FF2.6
07128:  BTFSC  FF2.7
0712A:  BSF    1B.7
0712C:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0712E:  MOVLB  6
07130:  CLRF   xDB
07132:  MOVFF  661,6DA
07136:  CLRF   xDD
07138:  MOVLW  21
0713A:  MOVWF  xDC
0713C:  MOVLB  0
0713E:  CALL   0420
07142:  BTFSC  1B.6
07144:  BSF    FF2.6
07146:  BTFSC  1B.7
07148:  BSF    FF2.7
0714A:  MOVF   01,W
0714C:  ADDLW  02
0714E:  MOVLB  6
07150:  MOVWF  x62
07152:  MOVLW  00
07154:  ADDWFC 02,W
07156:  MOVWF  x63
07158:  MOVLW  01
0715A:  ADDWF  x62,W
0715C:  MOVWF  01
0715E:  MOVLW  00
07160:  ADDWFC x63,W
07162:  MOVWF  03
07164:  MOVF   01,W
07166:  ADDLW  3E
07168:  MOVWF  01
0716A:  MOVLW  01
0716C:  ADDWFC 03,F
0716E:  MOVF   01,W
07170:  ADDLW  08
07172:  MOVWF  FE9
07174:  MOVLW  00
07176:  ADDWFC 03,W
07178:  MOVWF  FEA
0717A:  BCF    FEF.0
0717C:  CLRF   1B
0717E:  BTFSC  FF2.6
07180:  BSF    1B.6
07182:  BCF    FF2.6
07184:  BTFSC  FF2.7
07186:  BSF    1B.7
07188:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
0718A:  CLRF   xDB
0718C:  MOVFF  661,6DA
07190:  CLRF   xDD
07192:  MOVLW  21
07194:  MOVWF  xDC
07196:  MOVLB  0
07198:  CALL   0420
0719C:  BTFSC  1B.6
0719E:  BSF    FF2.6
071A0:  BTFSC  1B.7
071A2:  BSF    FF2.7
071A4:  MOVF   01,W
071A6:  ADDLW  02
071A8:  MOVLB  6
071AA:  MOVWF  x62
071AC:  MOVLW  00
071AE:  ADDWFC 02,W
071B0:  MOVWF  x63
071B2:  MOVLW  01
071B4:  ADDWF  x62,W
071B6:  MOVWF  01
071B8:  MOVLW  00
071BA:  ADDWFC x63,W
071BC:  MOVWF  03
071BE:  MOVF   01,W
071C0:  ADDLW  3E
071C2:  MOVWF  01
071C4:  MOVLW  01
071C6:  ADDWFC 03,F
071C8:  MOVF   01,W
071CA:  ADDLW  07
071CC:  MOVWF  FE9
071CE:  MOVLW  00
071D0:  ADDWFC 03,W
071D2:  MOVWF  FEA
071D4:  CLRF   FEF
....................          } 
....................  
....................          break; 
071D6:  GOTO   7CF0
....................          case button_switch: 
071DA:  CLRF   1B
071DC:  BTFSC  FF2.6
071DE:  BSF    1B.6
071E0:  BCF    FF2.6
071E2:  BTFSC  FF2.7
071E4:  BSF    1B.7
071E6:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
071E8:  MOVLB  6
071EA:  CLRF   xDB
071EC:  MOVFF  661,6DA
071F0:  CLRF   xDD
071F2:  MOVLW  21
071F4:  MOVWF  xDC
071F6:  MOVLB  0
071F8:  CALL   0420
071FC:  BTFSC  1B.6
071FE:  BSF    FF2.6
07200:  BTFSC  1B.7
07202:  BSF    FF2.7
07204:  MOVF   01,W
07206:  ADDLW  02
07208:  MOVLB  6
0720A:  MOVWF  x62
0720C:  MOVLW  00
0720E:  ADDWFC 02,W
07210:  MOVWF  x63
07212:  MOVLW  01
07214:  ADDWF  x62,W
07216:  MOVWF  01
07218:  MOVLW  00
0721A:  ADDWFC x63,W
0721C:  MOVWF  03
0721E:  MOVF   01,W
07220:  ADDLW  3E
07222:  MOVWF  01
07224:  MOVLW  01
07226:  ADDWFC 03,F
07228:  MOVF   01,W
0722A:  ADDLW  02
0722C:  MOVWF  FE9
0722E:  MOVLW  00
07230:  ADDWFC 03,W
07232:  MOVWF  FEA
07234:  BTFSS  FEF.0
07236:  BRA    73AE
07238:  CLRF   1B
0723A:  BTFSC  FF2.6
0723C:  BSF    1B.6
0723E:  BCF    FF2.6
07240:  BTFSC  FF2.7
07242:  BSF    1B.7
07244:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
07246:  CLRF   xDB
07248:  MOVFF  661,6DA
0724C:  CLRF   xDD
0724E:  MOVLW  21
07250:  MOVWF  xDC
07252:  MOVLB  0
07254:  CALL   0420
07258:  BTFSC  1B.6
0725A:  BSF    FF2.6
0725C:  BTFSC  1B.7
0725E:  BSF    FF2.7
07260:  MOVF   01,W
07262:  ADDLW  02
07264:  MOVLB  6
07266:  MOVWF  x62
07268:  MOVLW  00
0726A:  ADDWFC 02,W
0726C:  MOVWF  x63
0726E:  MOVLW  01
07270:  ADDWF  x62,W
07272:  MOVWF  01
07274:  MOVLW  00
07276:  ADDWFC x63,W
07278:  MOVWF  03
0727A:  MOVF   01,W
0727C:  ADDLW  3E
0727E:  MOVWF  01
07280:  MOVLW  01
07282:  ADDWFC 03,F
07284:  MOVFF  01,FE9
07288:  MOVFF  03,FEA
0728C:  MOVFF  FEF,664
07290:  CLRF   1B
07292:  BTFSC  FF2.6
07294:  BSF    1B.6
07296:  BCF    FF2.6
07298:  BTFSC  FF2.7
0729A:  BSF    1B.7
0729C:  BCF    FF2.7
0729E:  CLRF   xDB
072A0:  MOVFF  661,6DA
072A4:  CLRF   xDD
072A6:  MOVLW  21
072A8:  MOVWF  xDC
072AA:  MOVLB  0
072AC:  CALL   0420
072B0:  BTFSC  1B.6
072B2:  BSF    FF2.6
072B4:  BTFSC  1B.7
072B6:  BSF    FF2.7
072B8:  MOVF   01,W
072BA:  ADDLW  02
072BC:  MOVLB  6
072BE:  MOVWF  x65
072C0:  MOVLW  00
072C2:  ADDWFC 02,W
072C4:  MOVWF  x66
072C6:  MOVLW  01
072C8:  ADDWF  x65,W
072CA:  MOVWF  01
072CC:  MOVLW  00
072CE:  ADDWFC x66,W
072D0:  MOVWF  03
072D2:  MOVF   01,W
072D4:  ADDLW  3E
072D6:  MOVWF  01
072D8:  MOVLW  01
072DA:  ADDWFC 03,F
072DC:  MOVF   01,W
072DE:  ADDLW  01
072E0:  MOVWF  FE9
072E2:  MOVLW  00
072E4:  ADDWFC 03,W
072E6:  MOVWF  FEA
072E8:  MOVFF  FEF,667
072EC:  MOVFF  664,668
072F0:  MOVFF  667,669
072F4:  MOVLB  0
072F6:  RCALL  6BDA
072F8:  CLRF   1B
072FA:  BTFSC  FF2.6
072FC:  BSF    1B.6
072FE:  BCF    FF2.6
07300:  BTFSC  FF2.7
07302:  BSF    1B.7
07304:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
07306:  MOVLB  6
07308:  CLRF   xDB
0730A:  MOVFF  661,6DA
0730E:  CLRF   xDD
07310:  MOVLW  21
07312:  MOVWF  xDC
07314:  MOVLB  0
07316:  CALL   0420
0731A:  BTFSC  1B.6
0731C:  BSF    FF2.6
0731E:  BTFSC  1B.7
07320:  BSF    FF2.7
07322:  MOVF   01,W
07324:  ADDLW  02
07326:  MOVLB  6
07328:  MOVWF  x62
0732A:  MOVLW  00
0732C:  ADDWFC 02,W
0732E:  MOVWF  x63
07330:  MOVLW  01
07332:  ADDWF  x62,W
07334:  MOVWF  01
07336:  MOVLW  00
07338:  ADDWFC x63,W
0733A:  MOVWF  03
0733C:  MOVF   01,W
0733E:  ADDLW  3E
07340:  MOVWF  01
07342:  MOVLW  01
07344:  ADDWFC 03,F
07346:  MOVF   01,W
07348:  ADDLW  02
0734A:  MOVWF  FE9
0734C:  MOVLW  00
0734E:  ADDWFC 03,W
07350:  MOVWF  FEA
07352:  BCF    FEF.0
07354:  CLRF   1B
07356:  BTFSC  FF2.6
07358:  BSF    1B.6
0735A:  BCF    FF2.6
0735C:  BTFSC  FF2.7
0735E:  BSF    1B.7
07360:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
07362:  CLRF   xDB
07364:  MOVFF  661,6DA
07368:  CLRF   xDD
0736A:  MOVLW  21
0736C:  MOVWF  xDC
0736E:  MOVLB  0
07370:  CALL   0420
07374:  BTFSC  1B.6
07376:  BSF    FF2.6
07378:  BTFSC  1B.7
0737A:  BSF    FF2.7
0737C:  MOVF   01,W
0737E:  ADDLW  02
07380:  MOVLB  6
07382:  MOVWF  x62
07384:  MOVLW  00
07386:  ADDWFC 02,W
07388:  MOVWF  x63
0738A:  MOVLW  01
0738C:  ADDWF  x62,W
0738E:  MOVWF  01
07390:  MOVLW  00
07392:  ADDWFC x63,W
07394:  MOVWF  03
07396:  MOVF   01,W
07398:  ADDLW  3E
0739A:  MOVWF  01
0739C:  MOVLW  01
0739E:  ADDWFC 03,F
073A0:  MOVF   01,W
073A2:  ADDLW  01
073A4:  MOVWF  FE9
073A6:  MOVLW  00
073A8:  ADDWFC 03,W
073AA:  MOVWF  FEA
073AC:  CLRF   FEF
073AE:  CLRF   1B
073B0:  BTFSC  FF2.6
073B2:  BSF    1B.6
073B4:  BCF    FF2.6
073B6:  BTFSC  FF2.7
073B8:  BSF    1B.7
073BA:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
073BC:  CLRF   xDB
073BE:  MOVFF  661,6DA
073C2:  CLRF   xDD
073C4:  MOVLW  21
073C6:  MOVWF  xDC
073C8:  MOVLB  0
073CA:  CALL   0420
073CE:  BTFSC  1B.6
073D0:  BSF    FF2.6
073D2:  BTFSC  1B.7
073D4:  BSF    FF2.7
073D6:  MOVF   01,W
073D8:  ADDLW  02
073DA:  MOVLB  6
073DC:  MOVWF  x62
073DE:  MOVLW  00
073E0:  ADDWFC 02,W
073E2:  MOVWF  x63
073E4:  MOVLW  01
073E6:  ADDWF  x62,W
073E8:  MOVWF  01
073EA:  MOVLW  00
073EC:  ADDWFC x63,W
073EE:  MOVWF  03
073F0:  MOVF   01,W
073F2:  ADDLW  3E
073F4:  MOVWF  01
073F6:  MOVLW  01
073F8:  ADDWFC 03,F
073FA:  MOVF   01,W
073FC:  ADDLW  05
073FE:  MOVWF  FE9
07400:  MOVLW  00
07402:  ADDWFC 03,W
07404:  MOVWF  FEA
07406:  BTFSS  FEF.0
07408:  BRA    7586
0740A:  CLRF   1B
0740C:  BTFSC  FF2.6
0740E:  BSF    1B.6
07410:  BCF    FF2.6
07412:  BTFSC  FF2.7
07414:  BSF    1B.7
07416:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
07418:  CLRF   xDB
0741A:  MOVFF  661,6DA
0741E:  CLRF   xDD
07420:  MOVLW  21
07422:  MOVWF  xDC
07424:  MOVLB  0
07426:  CALL   0420
0742A:  BTFSC  1B.6
0742C:  BSF    FF2.6
0742E:  BTFSC  1B.7
07430:  BSF    FF2.7
07432:  MOVF   01,W
07434:  ADDLW  02
07436:  MOVLB  6
07438:  MOVWF  x62
0743A:  MOVLW  00
0743C:  ADDWFC 02,W
0743E:  MOVWF  x63
07440:  MOVLW  01
07442:  ADDWF  x62,W
07444:  MOVWF  01
07446:  MOVLW  00
07448:  ADDWFC x63,W
0744A:  MOVWF  03
0744C:  MOVF   01,W
0744E:  ADDLW  3E
07450:  MOVWF  01
07452:  MOVLW  01
07454:  ADDWFC 03,F
07456:  MOVF   01,W
07458:  ADDLW  03
0745A:  MOVWF  FE9
0745C:  MOVLW  00
0745E:  ADDWFC 03,W
07460:  MOVWF  FEA
07462:  MOVFF  FEF,664
07466:  CLRF   1B
07468:  BTFSC  FF2.6
0746A:  BSF    1B.6
0746C:  BCF    FF2.6
0746E:  BTFSC  FF2.7
07470:  BSF    1B.7
07472:  BCF    FF2.7
07474:  CLRF   xDB
07476:  MOVFF  661,6DA
0747A:  CLRF   xDD
0747C:  MOVLW  21
0747E:  MOVWF  xDC
07480:  MOVLB  0
07482:  CALL   0420
07486:  BTFSC  1B.6
07488:  BSF    FF2.6
0748A:  BTFSC  1B.7
0748C:  BSF    FF2.7
0748E:  MOVF   01,W
07490:  ADDLW  02
07492:  MOVLB  6
07494:  MOVWF  x65
07496:  MOVLW  00
07498:  ADDWFC 02,W
0749A:  MOVWF  x66
0749C:  MOVLW  01
0749E:  ADDWF  x65,W
074A0:  MOVWF  01
074A2:  MOVLW  00
074A4:  ADDWFC x66,W
074A6:  MOVWF  03
074A8:  MOVF   01,W
074AA:  ADDLW  3E
074AC:  MOVWF  01
074AE:  MOVLW  01
074B0:  ADDWFC 03,F
074B2:  MOVF   01,W
074B4:  ADDLW  04
074B6:  MOVWF  FE9
074B8:  MOVLW  00
074BA:  ADDWFC 03,W
074BC:  MOVWF  FEA
074BE:  MOVFF  FEF,667
074C2:  MOVFF  664,668
074C6:  MOVFF  667,669
074CA:  MOVLB  0
074CC:  CALL   6BDA
074D0:  CLRF   1B
074D2:  BTFSC  FF2.6
074D4:  BSF    1B.6
074D6:  BCF    FF2.6
074D8:  BTFSC  FF2.7
074DA:  BSF    1B.7
074DC:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
074DE:  MOVLB  6
074E0:  CLRF   xDB
074E2:  MOVFF  661,6DA
074E6:  CLRF   xDD
074E8:  MOVLW  21
074EA:  MOVWF  xDC
074EC:  MOVLB  0
074EE:  CALL   0420
074F2:  BTFSC  1B.6
074F4:  BSF    FF2.6
074F6:  BTFSC  1B.7
074F8:  BSF    FF2.7
074FA:  MOVF   01,W
074FC:  ADDLW  02
074FE:  MOVLB  6
07500:  MOVWF  x62
07502:  MOVLW  00
07504:  ADDWFC 02,W
07506:  MOVWF  x63
07508:  MOVLW  01
0750A:  ADDWF  x62,W
0750C:  MOVWF  01
0750E:  MOVLW  00
07510:  ADDWFC x63,W
07512:  MOVWF  03
07514:  MOVF   01,W
07516:  ADDLW  3E
07518:  MOVWF  01
0751A:  MOVLW  01
0751C:  ADDWFC 03,F
0751E:  MOVF   01,W
07520:  ADDLW  05
07522:  MOVWF  FE9
07524:  MOVLW  00
07526:  ADDWFC 03,W
07528:  MOVWF  FEA
0752A:  BCF    FEF.0
0752C:  CLRF   1B
0752E:  BTFSC  FF2.6
07530:  BSF    1B.6
07532:  BCF    FF2.6
07534:  BTFSC  FF2.7
07536:  BSF    1B.7
07538:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
0753A:  CLRF   xDB
0753C:  MOVFF  661,6DA
07540:  CLRF   xDD
07542:  MOVLW  21
07544:  MOVWF  xDC
07546:  MOVLB  0
07548:  CALL   0420
0754C:  BTFSC  1B.6
0754E:  BSF    FF2.6
07550:  BTFSC  1B.7
07552:  BSF    FF2.7
07554:  MOVF   01,W
07556:  ADDLW  02
07558:  MOVLB  6
0755A:  MOVWF  x62
0755C:  MOVLW  00
0755E:  ADDWFC 02,W
07560:  MOVWF  x63
07562:  MOVLW  01
07564:  ADDWF  x62,W
07566:  MOVWF  01
07568:  MOVLW  00
0756A:  ADDWFC x63,W
0756C:  MOVWF  03
0756E:  MOVF   01,W
07570:  ADDLW  3E
07572:  MOVWF  01
07574:  MOVLW  01
07576:  ADDWFC 03,F
07578:  MOVF   01,W
0757A:  ADDLW  04
0757C:  MOVWF  FE9
0757E:  MOVLW  00
07580:  ADDWFC 03,W
07582:  MOVWF  FEA
07584:  CLRF   FEF
....................          } 
....................  
....................          break; 
07586:  BRA    7CF0
....................          case on_off_switch: 
07588:  CLRF   1B
0758A:  BTFSC  FF2.6
0758C:  BSF    1B.6
0758E:  BCF    FF2.6
07590:  BTFSC  FF2.7
07592:  BSF    1B.7
07594:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
07596:  MOVLB  6
07598:  CLRF   xDB
0759A:  MOVFF  661,6DA
0759E:  CLRF   xDD
075A0:  MOVLW  21
075A2:  MOVWF  xDC
075A4:  MOVLB  0
075A6:  CALL   0420
075AA:  BTFSC  1B.6
075AC:  BSF    FF2.6
075AE:  BTFSC  1B.7
075B0:  BSF    FF2.7
075B2:  MOVF   01,W
075B4:  ADDLW  02
075B6:  MOVLB  6
075B8:  MOVWF  x62
075BA:  MOVLW  00
075BC:  ADDWFC 02,W
075BE:  MOVWF  x63
075C0:  MOVLW  01
075C2:  ADDWF  x62,W
075C4:  MOVWF  01
075C6:  MOVLW  00
075C8:  ADDWFC x63,W
075CA:  MOVWF  03
075CC:  MOVF   01,W
075CE:  ADDLW  3E
075D0:  MOVWF  01
075D2:  MOVLW  01
075D4:  ADDWFC 03,F
075D6:  MOVF   01,W
075D8:  ADDLW  02
075DA:  MOVWF  FE9
075DC:  MOVLW  00
075DE:  ADDWFC 03,W
075E0:  MOVWF  FEA
075E2:  BTFSS  FEF.0
075E4:  BRA    775E
075E6:  CLRF   1B
075E8:  BTFSC  FF2.6
075EA:  BSF    1B.6
075EC:  BCF    FF2.6
075EE:  BTFSC  FF2.7
075F0:  BSF    1B.7
075F2:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
075F4:  CLRF   xDB
075F6:  MOVFF  661,6DA
075FA:  CLRF   xDD
075FC:  MOVLW  21
075FE:  MOVWF  xDC
07600:  MOVLB  0
07602:  CALL   0420
07606:  BTFSC  1B.6
07608:  BSF    FF2.6
0760A:  BTFSC  1B.7
0760C:  BSF    FF2.7
0760E:  MOVF   01,W
07610:  ADDLW  02
07612:  MOVLB  6
07614:  MOVWF  x62
07616:  MOVLW  00
07618:  ADDWFC 02,W
0761A:  MOVWF  x63
0761C:  MOVLW  01
0761E:  ADDWF  x62,W
07620:  MOVWF  01
07622:  MOVLW  00
07624:  ADDWFC x63,W
07626:  MOVWF  03
07628:  MOVF   01,W
0762A:  ADDLW  3E
0762C:  MOVWF  01
0762E:  MOVLW  01
07630:  ADDWFC 03,F
07632:  MOVFF  01,FE9
07636:  MOVFF  03,FEA
0763A:  MOVFF  FEF,664
0763E:  CLRF   1B
07640:  BTFSC  FF2.6
07642:  BSF    1B.6
07644:  BCF    FF2.6
07646:  BTFSC  FF2.7
07648:  BSF    1B.7
0764A:  BCF    FF2.7
0764C:  CLRF   xDB
0764E:  MOVFF  661,6DA
07652:  CLRF   xDD
07654:  MOVLW  21
07656:  MOVWF  xDC
07658:  MOVLB  0
0765A:  CALL   0420
0765E:  BTFSC  1B.6
07660:  BSF    FF2.6
07662:  BTFSC  1B.7
07664:  BSF    FF2.7
07666:  MOVF   01,W
07668:  ADDLW  02
0766A:  MOVLB  6
0766C:  MOVWF  x65
0766E:  MOVLW  00
07670:  ADDWFC 02,W
07672:  MOVWF  x66
07674:  MOVLW  01
07676:  ADDWF  x65,W
07678:  MOVWF  01
0767A:  MOVLW  00
0767C:  ADDWFC x66,W
0767E:  MOVWF  03
07680:  MOVF   01,W
07682:  ADDLW  3E
07684:  MOVWF  01
07686:  MOVLW  01
07688:  ADDWFC 03,F
0768A:  MOVF   01,W
0768C:  ADDLW  01
0768E:  MOVWF  FE9
07690:  MOVLW  00
07692:  ADDWFC 03,W
07694:  MOVWF  FEA
07696:  MOVFF  FEF,667
0769A:  MOVFF  664,668
0769E:  MOVFF  667,669
076A2:  MOVLB  0
076A4:  CALL   6BDA
076A8:  CLRF   1B
076AA:  BTFSC  FF2.6
076AC:  BSF    1B.6
076AE:  BCF    FF2.6
076B0:  BTFSC  FF2.7
076B2:  BSF    1B.7
076B4:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
076B6:  MOVLB  6
076B8:  CLRF   xDB
076BA:  MOVFF  661,6DA
076BE:  CLRF   xDD
076C0:  MOVLW  21
076C2:  MOVWF  xDC
076C4:  MOVLB  0
076C6:  CALL   0420
076CA:  BTFSC  1B.6
076CC:  BSF    FF2.6
076CE:  BTFSC  1B.7
076D0:  BSF    FF2.7
076D2:  MOVF   01,W
076D4:  ADDLW  02
076D6:  MOVLB  6
076D8:  MOVWF  x62
076DA:  MOVLW  00
076DC:  ADDWFC 02,W
076DE:  MOVWF  x63
076E0:  MOVLW  01
076E2:  ADDWF  x62,W
076E4:  MOVWF  01
076E6:  MOVLW  00
076E8:  ADDWFC x63,W
076EA:  MOVWF  03
076EC:  MOVF   01,W
076EE:  ADDLW  3E
076F0:  MOVWF  01
076F2:  MOVLW  01
076F4:  ADDWFC 03,F
076F6:  MOVF   01,W
076F8:  ADDLW  02
076FA:  MOVWF  FE9
076FC:  MOVLW  00
076FE:  ADDWFC 03,W
07700:  MOVWF  FEA
07702:  BCF    FEF.0
07704:  CLRF   1B
07706:  BTFSC  FF2.6
07708:  BSF    1B.6
0770A:  BCF    FF2.6
0770C:  BTFSC  FF2.7
0770E:  BSF    1B.7
07710:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
07712:  CLRF   xDB
07714:  MOVFF  661,6DA
07718:  CLRF   xDD
0771A:  MOVLW  21
0771C:  MOVWF  xDC
0771E:  MOVLB  0
07720:  CALL   0420
07724:  BTFSC  1B.6
07726:  BSF    FF2.6
07728:  BTFSC  1B.7
0772A:  BSF    FF2.7
0772C:  MOVF   01,W
0772E:  ADDLW  02
07730:  MOVLB  6
07732:  MOVWF  x62
07734:  MOVLW  00
07736:  ADDWFC 02,W
07738:  MOVWF  x63
0773A:  MOVLW  01
0773C:  ADDWF  x62,W
0773E:  MOVWF  01
07740:  MOVLW  00
07742:  ADDWFC x63,W
07744:  MOVWF  03
07746:  MOVF   01,W
07748:  ADDLW  3E
0774A:  MOVWF  01
0774C:  MOVLW  01
0774E:  ADDWFC 03,F
07750:  MOVF   01,W
07752:  ADDLW  01
07754:  MOVWF  FE9
07756:  MOVLW  00
07758:  ADDWFC 03,W
0775A:  MOVWF  FEA
0775C:  CLRF   FEF
0775E:  CLRF   1B
07760:  BTFSC  FF2.6
07762:  BSF    1B.6
07764:  BCF    FF2.6
07766:  BTFSC  FF2.7
07768:  BSF    1B.7
0776A:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
0776C:  CLRF   xDB
0776E:  MOVFF  661,6DA
07772:  CLRF   xDD
07774:  MOVLW  21
07776:  MOVWF  xDC
07778:  MOVLB  0
0777A:  CALL   0420
0777E:  BTFSC  1B.6
07780:  BSF    FF2.6
07782:  BTFSC  1B.7
07784:  BSF    FF2.7
07786:  MOVF   01,W
07788:  ADDLW  02
0778A:  MOVLB  6
0778C:  MOVWF  x62
0778E:  MOVLW  00
07790:  ADDWFC 02,W
07792:  MOVWF  x63
07794:  MOVLW  01
07796:  ADDWF  x62,W
07798:  MOVWF  01
0779A:  MOVLW  00
0779C:  ADDWFC x63,W
0779E:  MOVWF  03
077A0:  MOVF   01,W
077A2:  ADDLW  3E
077A4:  MOVWF  01
077A6:  MOVLW  01
077A8:  ADDWFC 03,F
077AA:  MOVF   01,W
077AC:  ADDLW  05
077AE:  MOVWF  FE9
077B0:  MOVLW  00
077B2:  ADDWFC 03,W
077B4:  MOVWF  FEA
077B6:  BTFSS  FEF.0
077B8:  BRA    7936
077BA:  CLRF   1B
077BC:  BTFSC  FF2.6
077BE:  BSF    1B.6
077C0:  BCF    FF2.6
077C2:  BTFSC  FF2.7
077C4:  BSF    1B.7
077C6:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
077C8:  CLRF   xDB
077CA:  MOVFF  661,6DA
077CE:  CLRF   xDD
077D0:  MOVLW  21
077D2:  MOVWF  xDC
077D4:  MOVLB  0
077D6:  CALL   0420
077DA:  BTFSC  1B.6
077DC:  BSF    FF2.6
077DE:  BTFSC  1B.7
077E0:  BSF    FF2.7
077E2:  MOVF   01,W
077E4:  ADDLW  02
077E6:  MOVLB  6
077E8:  MOVWF  x62
077EA:  MOVLW  00
077EC:  ADDWFC 02,W
077EE:  MOVWF  x63
077F0:  MOVLW  01
077F2:  ADDWF  x62,W
077F4:  MOVWF  01
077F6:  MOVLW  00
077F8:  ADDWFC x63,W
077FA:  MOVWF  03
077FC:  MOVF   01,W
077FE:  ADDLW  3E
07800:  MOVWF  01
07802:  MOVLW  01
07804:  ADDWFC 03,F
07806:  MOVF   01,W
07808:  ADDLW  03
0780A:  MOVWF  FE9
0780C:  MOVLW  00
0780E:  ADDWFC 03,W
07810:  MOVWF  FEA
07812:  MOVFF  FEF,664
07816:  CLRF   1B
07818:  BTFSC  FF2.6
0781A:  BSF    1B.6
0781C:  BCF    FF2.6
0781E:  BTFSC  FF2.7
07820:  BSF    1B.7
07822:  BCF    FF2.7
07824:  CLRF   xDB
07826:  MOVFF  661,6DA
0782A:  CLRF   xDD
0782C:  MOVLW  21
0782E:  MOVWF  xDC
07830:  MOVLB  0
07832:  CALL   0420
07836:  BTFSC  1B.6
07838:  BSF    FF2.6
0783A:  BTFSC  1B.7
0783C:  BSF    FF2.7
0783E:  MOVF   01,W
07840:  ADDLW  02
07842:  MOVLB  6
07844:  MOVWF  x65
07846:  MOVLW  00
07848:  ADDWFC 02,W
0784A:  MOVWF  x66
0784C:  MOVLW  01
0784E:  ADDWF  x65,W
07850:  MOVWF  01
07852:  MOVLW  00
07854:  ADDWFC x66,W
07856:  MOVWF  03
07858:  MOVF   01,W
0785A:  ADDLW  3E
0785C:  MOVWF  01
0785E:  MOVLW  01
07860:  ADDWFC 03,F
07862:  MOVF   01,W
07864:  ADDLW  04
07866:  MOVWF  FE9
07868:  MOVLW  00
0786A:  ADDWFC 03,W
0786C:  MOVWF  FEA
0786E:  MOVFF  FEF,667
07872:  MOVFF  664,668
07876:  MOVFF  667,669
0787A:  MOVLB  0
0787C:  CALL   6BDA
07880:  CLRF   1B
07882:  BTFSC  FF2.6
07884:  BSF    1B.6
07886:  BCF    FF2.6
07888:  BTFSC  FF2.7
0788A:  BSF    1B.7
0788C:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0788E:  MOVLB  6
07890:  CLRF   xDB
07892:  MOVFF  661,6DA
07896:  CLRF   xDD
07898:  MOVLW  21
0789A:  MOVWF  xDC
0789C:  MOVLB  0
0789E:  CALL   0420
078A2:  BTFSC  1B.6
078A4:  BSF    FF2.6
078A6:  BTFSC  1B.7
078A8:  BSF    FF2.7
078AA:  MOVF   01,W
078AC:  ADDLW  02
078AE:  MOVLB  6
078B0:  MOVWF  x62
078B2:  MOVLW  00
078B4:  ADDWFC 02,W
078B6:  MOVWF  x63
078B8:  MOVLW  01
078BA:  ADDWF  x62,W
078BC:  MOVWF  01
078BE:  MOVLW  00
078C0:  ADDWFC x63,W
078C2:  MOVWF  03
078C4:  MOVF   01,W
078C6:  ADDLW  3E
078C8:  MOVWF  01
078CA:  MOVLW  01
078CC:  ADDWFC 03,F
078CE:  MOVF   01,W
078D0:  ADDLW  05
078D2:  MOVWF  FE9
078D4:  MOVLW  00
078D6:  ADDWFC 03,W
078D8:  MOVWF  FEA
078DA:  BCF    FEF.0
078DC:  CLRF   1B
078DE:  BTFSC  FF2.6
078E0:  BSF    1B.6
078E2:  BCF    FF2.6
078E4:  BTFSC  FF2.7
078E6:  BSF    1B.7
078E8:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
078EA:  CLRF   xDB
078EC:  MOVFF  661,6DA
078F0:  CLRF   xDD
078F2:  MOVLW  21
078F4:  MOVWF  xDC
078F6:  MOVLB  0
078F8:  CALL   0420
078FC:  BTFSC  1B.6
078FE:  BSF    FF2.6
07900:  BTFSC  1B.7
07902:  BSF    FF2.7
07904:  MOVF   01,W
07906:  ADDLW  02
07908:  MOVLB  6
0790A:  MOVWF  x62
0790C:  MOVLW  00
0790E:  ADDWFC 02,W
07910:  MOVWF  x63
07912:  MOVLW  01
07914:  ADDWF  x62,W
07916:  MOVWF  01
07918:  MOVLW  00
0791A:  ADDWFC x63,W
0791C:  MOVWF  03
0791E:  MOVF   01,W
07920:  ADDLW  3E
07922:  MOVWF  01
07924:  MOVLW  01
07926:  ADDWFC 03,F
07928:  MOVF   01,W
0792A:  ADDLW  04
0792C:  MOVWF  FE9
0792E:  MOVLW  00
07930:  ADDWFC 03,W
07932:  MOVWF  FEA
07934:  CLRF   FEF
....................          } 
....................  
....................          break; 
07936:  BRA    7CF0
....................          case timer: 
07938:  CLRF   1B
0793A:  BTFSC  FF2.6
0793C:  BSF    1B.6
0793E:  BCF    FF2.6
07940:  BTFSC  FF2.7
07942:  BSF    1B.7
07944:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
07946:  MOVLB  6
07948:  CLRF   xDB
0794A:  MOVFF  661,6DA
0794E:  CLRF   xDD
07950:  MOVLW  21
07952:  MOVWF  xDC
07954:  MOVLB  0
07956:  CALL   0420
0795A:  BTFSC  1B.6
0795C:  BSF    FF2.6
0795E:  BTFSC  1B.7
07960:  BSF    FF2.7
07962:  MOVF   01,W
07964:  ADDLW  02
07966:  MOVLB  6
07968:  MOVWF  x62
0796A:  MOVLW  00
0796C:  ADDWFC 02,W
0796E:  MOVWF  x63
07970:  MOVLW  01
07972:  ADDWF  x62,W
07974:  MOVWF  01
07976:  MOVLW  00
07978:  ADDWFC x63,W
0797A:  MOVWF  03
0797C:  MOVF   01,W
0797E:  ADDLW  3E
07980:  MOVWF  01
07982:  MOVLW  01
07984:  ADDWFC 03,F
07986:  MOVF   01,W
07988:  ADDLW  05
0798A:  MOVWF  FE9
0798C:  MOVLW  00
0798E:  ADDWFC 03,W
07990:  MOVWF  FEA
07992:  BTFSS  FEF.0
07994:  BRA    7B12
07996:  CLRF   1B
07998:  BTFSC  FF2.6
0799A:  BSF    1B.6
0799C:  BCF    FF2.6
0799E:  BTFSC  FF2.7
079A0:  BSF    1B.7
079A2:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
079A4:  CLRF   xDB
079A6:  MOVFF  661,6DA
079AA:  CLRF   xDD
079AC:  MOVLW  21
079AE:  MOVWF  xDC
079B0:  MOVLB  0
079B2:  CALL   0420
079B6:  BTFSC  1B.6
079B8:  BSF    FF2.6
079BA:  BTFSC  1B.7
079BC:  BSF    FF2.7
079BE:  MOVF   01,W
079C0:  ADDLW  02
079C2:  MOVLB  6
079C4:  MOVWF  x62
079C6:  MOVLW  00
079C8:  ADDWFC 02,W
079CA:  MOVWF  x63
079CC:  MOVLW  01
079CE:  ADDWF  x62,W
079D0:  MOVWF  01
079D2:  MOVLW  00
079D4:  ADDWFC x63,W
079D6:  MOVWF  03
079D8:  MOVF   01,W
079DA:  ADDLW  3E
079DC:  MOVWF  01
079DE:  MOVLW  01
079E0:  ADDWFC 03,F
079E2:  MOVF   01,W
079E4:  ADDLW  03
079E6:  MOVWF  FE9
079E8:  MOVLW  00
079EA:  ADDWFC 03,W
079EC:  MOVWF  FEA
079EE:  MOVFF  FEF,664
079F2:  CLRF   1B
079F4:  BTFSC  FF2.6
079F6:  BSF    1B.6
079F8:  BCF    FF2.6
079FA:  BTFSC  FF2.7
079FC:  BSF    1B.7
079FE:  BCF    FF2.7
07A00:  CLRF   xDB
07A02:  MOVFF  661,6DA
07A06:  CLRF   xDD
07A08:  MOVLW  21
07A0A:  MOVWF  xDC
07A0C:  MOVLB  0
07A0E:  CALL   0420
07A12:  BTFSC  1B.6
07A14:  BSF    FF2.6
07A16:  BTFSC  1B.7
07A18:  BSF    FF2.7
07A1A:  MOVF   01,W
07A1C:  ADDLW  02
07A1E:  MOVLB  6
07A20:  MOVWF  x65
07A22:  MOVLW  00
07A24:  ADDWFC 02,W
07A26:  MOVWF  x66
07A28:  MOVLW  01
07A2A:  ADDWF  x65,W
07A2C:  MOVWF  01
07A2E:  MOVLW  00
07A30:  ADDWFC x66,W
07A32:  MOVWF  03
07A34:  MOVF   01,W
07A36:  ADDLW  3E
07A38:  MOVWF  01
07A3A:  MOVLW  01
07A3C:  ADDWFC 03,F
07A3E:  MOVF   01,W
07A40:  ADDLW  04
07A42:  MOVWF  FE9
07A44:  MOVLW  00
07A46:  ADDWFC 03,W
07A48:  MOVWF  FEA
07A4A:  MOVFF  FEF,667
07A4E:  MOVFF  664,668
07A52:  MOVFF  667,669
07A56:  MOVLB  0
07A58:  CALL   6BDA
07A5C:  CLRF   1B
07A5E:  BTFSC  FF2.6
07A60:  BSF    1B.6
07A62:  BCF    FF2.6
07A64:  BTFSC  FF2.7
07A66:  BSF    1B.7
07A68:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
07A6A:  MOVLB  6
07A6C:  CLRF   xDB
07A6E:  MOVFF  661,6DA
07A72:  CLRF   xDD
07A74:  MOVLW  21
07A76:  MOVWF  xDC
07A78:  MOVLB  0
07A7A:  CALL   0420
07A7E:  BTFSC  1B.6
07A80:  BSF    FF2.6
07A82:  BTFSC  1B.7
07A84:  BSF    FF2.7
07A86:  MOVF   01,W
07A88:  ADDLW  02
07A8A:  MOVLB  6
07A8C:  MOVWF  x62
07A8E:  MOVLW  00
07A90:  ADDWFC 02,W
07A92:  MOVWF  x63
07A94:  MOVLW  01
07A96:  ADDWF  x62,W
07A98:  MOVWF  01
07A9A:  MOVLW  00
07A9C:  ADDWFC x63,W
07A9E:  MOVWF  03
07AA0:  MOVF   01,W
07AA2:  ADDLW  3E
07AA4:  MOVWF  01
07AA6:  MOVLW  01
07AA8:  ADDWFC 03,F
07AAA:  MOVF   01,W
07AAC:  ADDLW  05
07AAE:  MOVWF  FE9
07AB0:  MOVLW  00
07AB2:  ADDWFC 03,W
07AB4:  MOVWF  FEA
07AB6:  BCF    FEF.0
07AB8:  CLRF   1B
07ABA:  BTFSC  FF2.6
07ABC:  BSF    1B.6
07ABE:  BCF    FF2.6
07AC0:  BTFSC  FF2.7
07AC2:  BSF    1B.7
07AC4:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
07AC6:  CLRF   xDB
07AC8:  MOVFF  661,6DA
07ACC:  CLRF   xDD
07ACE:  MOVLW  21
07AD0:  MOVWF  xDC
07AD2:  MOVLB  0
07AD4:  CALL   0420
07AD8:  BTFSC  1B.6
07ADA:  BSF    FF2.6
07ADC:  BTFSC  1B.7
07ADE:  BSF    FF2.7
07AE0:  MOVF   01,W
07AE2:  ADDLW  02
07AE4:  MOVLB  6
07AE6:  MOVWF  x62
07AE8:  MOVLW  00
07AEA:  ADDWFC 02,W
07AEC:  MOVWF  x63
07AEE:  MOVLW  01
07AF0:  ADDWF  x62,W
07AF2:  MOVWF  01
07AF4:  MOVLW  00
07AF6:  ADDWFC x63,W
07AF8:  MOVWF  03
07AFA:  MOVF   01,W
07AFC:  ADDLW  3E
07AFE:  MOVWF  01
07B00:  MOVLW  01
07B02:  ADDWFC 03,F
07B04:  MOVF   01,W
07B06:  ADDLW  04
07B08:  MOVWF  FE9
07B0A:  MOVLW  00
07B0C:  ADDWFC 03,W
07B0E:  MOVWF  FEA
07B10:  CLRF   FEF
07B12:  CLRF   1B
07B14:  BTFSC  FF2.6
07B16:  BSF    1B.6
07B18:  BCF    FF2.6
07B1A:  BTFSC  FF2.7
07B1C:  BSF    1B.7
07B1E:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
07B20:  CLRF   xDB
07B22:  MOVFF  661,6DA
07B26:  CLRF   xDD
07B28:  MOVLW  21
07B2A:  MOVWF  xDC
07B2C:  MOVLB  0
07B2E:  CALL   0420
07B32:  BTFSC  1B.6
07B34:  BSF    FF2.6
07B36:  BTFSC  1B.7
07B38:  BSF    FF2.7
07B3A:  MOVF   01,W
07B3C:  ADDLW  02
07B3E:  MOVLB  6
07B40:  MOVWF  x62
07B42:  MOVLW  00
07B44:  ADDWFC 02,W
07B46:  MOVWF  x63
07B48:  MOVLW  01
07B4A:  ADDWF  x62,W
07B4C:  MOVWF  01
07B4E:  MOVLW  00
07B50:  ADDWFC x63,W
07B52:  MOVWF  03
07B54:  MOVF   01,W
07B56:  ADDLW  3E
07B58:  MOVWF  01
07B5A:  MOVLW  01
07B5C:  ADDWFC 03,F
07B5E:  MOVF   01,W
07B60:  ADDLW  08
07B62:  MOVWF  FE9
07B64:  MOVLW  00
07B66:  ADDWFC 03,W
07B68:  MOVWF  FEA
07B6A:  BTFSS  FEF.0
07B6C:  BRA    7CEA
07B6E:  CLRF   1B
07B70:  BTFSC  FF2.6
07B72:  BSF    1B.6
07B74:  BCF    FF2.6
07B76:  BTFSC  FF2.7
07B78:  BSF    1B.7
07B7A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
07B7C:  CLRF   xDB
07B7E:  MOVFF  661,6DA
07B82:  CLRF   xDD
07B84:  MOVLW  21
07B86:  MOVWF  xDC
07B88:  MOVLB  0
07B8A:  CALL   0420
07B8E:  BTFSC  1B.6
07B90:  BSF    FF2.6
07B92:  BTFSC  1B.7
07B94:  BSF    FF2.7
07B96:  MOVF   01,W
07B98:  ADDLW  02
07B9A:  MOVLB  6
07B9C:  MOVWF  x62
07B9E:  MOVLW  00
07BA0:  ADDWFC 02,W
07BA2:  MOVWF  x63
07BA4:  MOVLW  01
07BA6:  ADDWF  x62,W
07BA8:  MOVWF  01
07BAA:  MOVLW  00
07BAC:  ADDWFC x63,W
07BAE:  MOVWF  03
07BB0:  MOVF   01,W
07BB2:  ADDLW  3E
07BB4:  MOVWF  01
07BB6:  MOVLW  01
07BB8:  ADDWFC 03,F
07BBA:  MOVF   01,W
07BBC:  ADDLW  06
07BBE:  MOVWF  FE9
07BC0:  MOVLW  00
07BC2:  ADDWFC 03,W
07BC4:  MOVWF  FEA
07BC6:  MOVFF  FEF,664
07BCA:  CLRF   1B
07BCC:  BTFSC  FF2.6
07BCE:  BSF    1B.6
07BD0:  BCF    FF2.6
07BD2:  BTFSC  FF2.7
07BD4:  BSF    1B.7
07BD6:  BCF    FF2.7
07BD8:  CLRF   xDB
07BDA:  MOVFF  661,6DA
07BDE:  CLRF   xDD
07BE0:  MOVLW  21
07BE2:  MOVWF  xDC
07BE4:  MOVLB  0
07BE6:  CALL   0420
07BEA:  BTFSC  1B.6
07BEC:  BSF    FF2.6
07BEE:  BTFSC  1B.7
07BF0:  BSF    FF2.7
07BF2:  MOVF   01,W
07BF4:  ADDLW  02
07BF6:  MOVLB  6
07BF8:  MOVWF  x65
07BFA:  MOVLW  00
07BFC:  ADDWFC 02,W
07BFE:  MOVWF  x66
07C00:  MOVLW  01
07C02:  ADDWF  x65,W
07C04:  MOVWF  01
07C06:  MOVLW  00
07C08:  ADDWFC x66,W
07C0A:  MOVWF  03
07C0C:  MOVF   01,W
07C0E:  ADDLW  3E
07C10:  MOVWF  01
07C12:  MOVLW  01
07C14:  ADDWFC 03,F
07C16:  MOVF   01,W
07C18:  ADDLW  07
07C1A:  MOVWF  FE9
07C1C:  MOVLW  00
07C1E:  ADDWFC 03,W
07C20:  MOVWF  FEA
07C22:  MOVFF  FEF,667
07C26:  MOVFF  664,668
07C2A:  MOVFF  667,669
07C2E:  MOVLB  0
07C30:  CALL   6BDA
07C34:  CLRF   1B
07C36:  BTFSC  FF2.6
07C38:  BSF    1B.6
07C3A:  BCF    FF2.6
07C3C:  BTFSC  FF2.7
07C3E:  BSF    1B.7
07C40:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
07C42:  MOVLB  6
07C44:  CLRF   xDB
07C46:  MOVFF  661,6DA
07C4A:  CLRF   xDD
07C4C:  MOVLW  21
07C4E:  MOVWF  xDC
07C50:  MOVLB  0
07C52:  CALL   0420
07C56:  BTFSC  1B.6
07C58:  BSF    FF2.6
07C5A:  BTFSC  1B.7
07C5C:  BSF    FF2.7
07C5E:  MOVF   01,W
07C60:  ADDLW  02
07C62:  MOVLB  6
07C64:  MOVWF  x62
07C66:  MOVLW  00
07C68:  ADDWFC 02,W
07C6A:  MOVWF  x63
07C6C:  MOVLW  01
07C6E:  ADDWF  x62,W
07C70:  MOVWF  01
07C72:  MOVLW  00
07C74:  ADDWFC x63,W
07C76:  MOVWF  03
07C78:  MOVF   01,W
07C7A:  ADDLW  3E
07C7C:  MOVWF  01
07C7E:  MOVLW  01
07C80:  ADDWFC 03,F
07C82:  MOVF   01,W
07C84:  ADDLW  08
07C86:  MOVWF  FE9
07C88:  MOVLW  00
07C8A:  ADDWFC 03,W
07C8C:  MOVWF  FEA
07C8E:  BCF    FEF.0
07C90:  CLRF   1B
07C92:  BTFSC  FF2.6
07C94:  BSF    1B.6
07C96:  BCF    FF2.6
07C98:  BTFSC  FF2.7
07C9A:  BSF    1B.7
07C9C:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
07C9E:  CLRF   xDB
07CA0:  MOVFF  661,6DA
07CA4:  CLRF   xDD
07CA6:  MOVLW  21
07CA8:  MOVWF  xDC
07CAA:  MOVLB  0
07CAC:  CALL   0420
07CB0:  BTFSC  1B.6
07CB2:  BSF    FF2.6
07CB4:  BTFSC  1B.7
07CB6:  BSF    FF2.7
07CB8:  MOVF   01,W
07CBA:  ADDLW  02
07CBC:  MOVLB  6
07CBE:  MOVWF  x62
07CC0:  MOVLW  00
07CC2:  ADDWFC 02,W
07CC4:  MOVWF  x63
07CC6:  MOVLW  01
07CC8:  ADDWF  x62,W
07CCA:  MOVWF  01
07CCC:  MOVLW  00
07CCE:  ADDWFC x63,W
07CD0:  MOVWF  03
07CD2:  MOVF   01,W
07CD4:  ADDLW  3E
07CD6:  MOVWF  01
07CD8:  MOVLW  01
07CDA:  ADDWFC 03,F
07CDC:  MOVF   01,W
07CDE:  ADDLW  07
07CE0:  MOVWF  FE9
07CE2:  MOVLW  00
07CE4:  ADDWFC 03,W
07CE6:  MOVWF  FEA
07CE8:  CLRF   FEF
....................          } 
....................          break; 
07CEA:  BRA    7CF0
....................          default: 
....................          break; 
07CEC:  MOVLB  6
07CEE:  BRA    7CF0
....................       } 
....................    } 
07CF0:  INCF   x61,F
07CF2:  GOTO   6BEC
.................... } 
07CF6:  MOVLB  0
07CF8:  GOTO   92BE (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
07CFC:  MOVLB  6
07CFE:  CLRF   x61
07D00:  MOVLB  1
07D02:  MOVF   x3F,W
07D04:  MOVLB  6
07D06:  SUBWF  x61,W
07D08:  BTFSC  FD8.0
07D0A:  GOTO   85FA
07D0E:  CLRF   1B
07D10:  BTFSC  FF2.6
07D12:  BSF    1B.6
07D14:  BCF    FF2.6
07D16:  BTFSC  FF2.7
07D18:  BSF    1B.7
07D1A:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
07D1C:  CLRF   xDB
07D1E:  MOVFF  661,6DA
07D22:  CLRF   xDD
07D24:  MOVLW  2F
07D26:  MOVWF  xDC
07D28:  MOVLB  0
07D2A:  CALL   0420
07D2E:  BTFSC  1B.6
07D30:  BSF    FF2.6
07D32:  BTFSC  1B.7
07D34:  BSF    FF2.7
07D36:  MOVFF  02,03
07D3A:  MOVF   01,W
07D3C:  ADDLW  8A
07D3E:  MOVWF  01
07D40:  MOVLW  02
07D42:  ADDWFC 03,F
07D44:  MOVFF  01,FE9
07D48:  MOVFF  03,FEA
07D4C:  MOVF   FEF,W
07D4E:  XORLW  66
07D50:  BZ    7D56
07D52:  GOTO   85F2
....................            case shutter: 
07D56:  CLRF   1B
07D58:  BTFSC  FF2.6
07D5A:  BSF    1B.6
07D5C:  BCF    FF2.6
07D5E:  BTFSC  FF2.7
07D60:  BSF    1B.7
07D62:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
07D64:  MOVLB  6
07D66:  CLRF   xDB
07D68:  MOVFF  661,6DA
07D6C:  CLRF   xDD
07D6E:  MOVLW  2F
07D70:  MOVWF  xDC
07D72:  MOVLB  0
07D74:  CALL   0420
07D78:  BTFSC  1B.6
07D7A:  BSF    FF2.6
07D7C:  BTFSC  1B.7
07D7E:  BSF    FF2.7
07D80:  MOVF   01,W
07D82:  ADDLW  4C
07D84:  MOVLB  6
07D86:  MOVWF  x62
07D88:  MOVLW  01
07D8A:  ADDWFC 02,W
07D8C:  MOVWF  x63
07D8E:  MOVLW  01
07D90:  ADDWF  x62,W
07D92:  MOVWF  01
07D94:  MOVLW  00
07D96:  ADDWFC x63,W
07D98:  MOVWF  03
07D9A:  MOVF   01,W
07D9C:  ADDLW  3E
07D9E:  MOVWF  01
07DA0:  MOVLW  01
07DA2:  ADDWFC 03,F
07DA4:  MOVF   01,W
07DA6:  ADDLW  2D
07DA8:  MOVWF  FE9
07DAA:  MOVLW  00
07DAC:  ADDWFC 03,W
07DAE:  MOVWF  FEA
07DB0:  MOVF   FEF,W
07DB2:  SUBLW  04
07DB4:  BTFSC  FD8.2
07DB6:  GOTO   85EE
07DBA:  CLRF   1B
07DBC:  BTFSC  FF2.6
07DBE:  BSF    1B.6
07DC0:  BCF    FF2.6
07DC2:  BTFSC  FF2.7
07DC4:  BSF    1B.7
07DC6:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
07DC8:  CLRF   xDB
07DCA:  MOVFF  661,6DA
07DCE:  CLRF   xDD
07DD0:  MOVLW  2F
07DD2:  MOVWF  xDC
07DD4:  MOVLB  0
07DD6:  CALL   0420
07DDA:  BTFSC  1B.6
07DDC:  BSF    FF2.6
07DDE:  BTFSC  1B.7
07DE0:  BSF    FF2.7
07DE2:  MOVF   01,W
07DE4:  ADDLW  4C
07DE6:  MOVLB  6
07DE8:  MOVWF  x62
07DEA:  MOVLW  01
07DEC:  ADDWFC 02,W
07DEE:  MOVWF  x63
07DF0:  MOVLW  01
07DF2:  ADDWF  x62,W
07DF4:  MOVWF  01
07DF6:  MOVLW  00
07DF8:  ADDWFC x63,W
07DFA:  MOVWF  03
07DFC:  MOVF   01,W
07DFE:  ADDLW  3E
07E00:  MOVWF  01
07E02:  MOVLW  01
07E04:  ADDWFC 03,F
07E06:  MOVF   01,W
07E08:  ADDLW  2A
07E0A:  MOVWF  FE9
07E0C:  MOVLW  00
07E0E:  ADDWFC 03,W
07E10:  MOVWF  FEA
07E12:  INCF   FEF,F
07E14:  CLRF   1B
07E16:  BTFSC  FF2.6
07E18:  BSF    1B.6
07E1A:  BCF    FF2.6
07E1C:  BTFSC  FF2.7
07E1E:  BSF    1B.7
07E20:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
07E22:  CLRF   xDB
07E24:  MOVFF  661,6DA
07E28:  CLRF   xDD
07E2A:  MOVLW  2F
07E2C:  MOVWF  xDC
07E2E:  MOVLB  0
07E30:  CALL   0420
07E34:  BTFSC  1B.6
07E36:  BSF    FF2.6
07E38:  BTFSC  1B.7
07E3A:  BSF    FF2.7
07E3C:  MOVF   01,W
07E3E:  ADDLW  4C
07E40:  MOVLB  6
07E42:  MOVWF  x62
07E44:  MOVLW  01
07E46:  ADDWFC 02,W
07E48:  MOVWF  x63
07E4A:  MOVLW  01
07E4C:  ADDWF  x62,W
07E4E:  MOVWF  01
07E50:  MOVLW  00
07E52:  ADDWFC x63,W
07E54:  MOVWF  03
07E56:  MOVF   01,W
07E58:  ADDLW  3E
07E5A:  MOVWF  01
07E5C:  MOVLW  01
07E5E:  ADDWFC 03,F
07E60:  MOVF   01,W
07E62:  ADDLW  2D
07E64:  MOVWF  FE9
07E66:  MOVLW  00
07E68:  ADDWFC 03,W
07E6A:  MOVWF  FEA
07E6C:  MOVF   FEF,F
07E6E:  BTFSS  FD8.2
07E70:  BRA    800A
07E72:  CLRF   1B
07E74:  BTFSC  FF2.6
07E76:  BSF    1B.6
07E78:  BCF    FF2.6
07E7A:  BTFSC  FF2.7
07E7C:  BSF    1B.7
07E7E:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
07E80:  CLRF   xDB
07E82:  MOVFF  661,6DA
07E86:  CLRF   xDD
07E88:  MOVLW  2F
07E8A:  MOVWF  xDC
07E8C:  MOVLB  0
07E8E:  CALL   0420
07E92:  BTFSC  1B.6
07E94:  BSF    FF2.6
07E96:  BTFSC  1B.7
07E98:  BSF    FF2.7
07E9A:  MOVF   01,W
07E9C:  ADDLW  4C
07E9E:  MOVLB  6
07EA0:  MOVWF  x62
07EA2:  MOVLW  01
07EA4:  ADDWFC 02,W
07EA6:  MOVWF  x63
07EA8:  MOVLW  01
07EAA:  ADDWF  x62,W
07EAC:  MOVWF  01
07EAE:  MOVLW  00
07EB0:  ADDWFC x63,W
07EB2:  MOVWF  03
07EB4:  MOVF   01,W
07EB6:  ADDLW  3E
07EB8:  MOVWF  01
07EBA:  MOVLW  01
07EBC:  ADDWFC 03,F
07EBE:  MOVF   01,W
07EC0:  ADDLW  2A
07EC2:  MOVWF  FE9
07EC4:  MOVLW  00
07EC6:  ADDWFC 03,W
07EC8:  MOVWF  FEA
07ECA:  MOVFF  FEF,664
07ECE:  CLRF   1B
07ED0:  BTFSC  FF2.6
07ED2:  BSF    1B.6
07ED4:  BCF    FF2.6
07ED6:  BTFSC  FF2.7
07ED8:  BSF    1B.7
07EDA:  BCF    FF2.7
07EDC:  CLRF   xDB
07EDE:  MOVFF  661,6DA
07EE2:  CLRF   xDD
07EE4:  MOVLW  2F
07EE6:  MOVWF  xDC
07EE8:  MOVLB  0
07EEA:  CALL   0420
07EEE:  BTFSC  1B.6
07EF0:  BSF    FF2.6
07EF2:  BTFSC  1B.7
07EF4:  BSF    FF2.7
07EF6:  MOVF   01,W
07EF8:  ADDLW  4C
07EFA:  MOVLB  6
07EFC:  MOVWF  x65
07EFE:  MOVLW  01
07F00:  ADDWFC 02,W
07F02:  MOVWF  x66
07F04:  MOVLW  01
07F06:  ADDWF  x65,W
07F08:  MOVWF  01
07F0A:  MOVLW  00
07F0C:  ADDWFC x66,W
07F0E:  MOVWF  03
07F10:  MOVF   01,W
07F12:  ADDLW  3E
07F14:  MOVWF  01
07F16:  MOVLW  01
07F18:  ADDWFC 03,F
07F1A:  MOVF   01,W
07F1C:  ADDLW  2C
07F1E:  MOVWF  FE9
07F20:  MOVLW  00
07F22:  ADDWFC 03,W
07F24:  MOVWF  FEA
07F26:  MOVF   FEF,W
07F28:  SUBWF  x64,W
07F2A:  BZ    800A
07F2C:  BNC   800A
07F2E:  CLRF   1B
07F30:  BTFSC  FF2.6
07F32:  BSF    1B.6
07F34:  BCF    FF2.6
07F36:  BTFSC  FF2.7
07F38:  BSF    1B.7
07F3A:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07F3C:  CLRF   xDB
07F3E:  MOVFF  661,6DA
07F42:  CLRF   xDD
07F44:  MOVLW  2F
07F46:  MOVWF  xDC
07F48:  MOVLB  0
07F4A:  CALL   0420
07F4E:  BTFSC  1B.6
07F50:  BSF    FF2.6
07F52:  BTFSC  1B.7
07F54:  BSF    FF2.7
07F56:  MOVF   01,W
07F58:  ADDLW  4C
07F5A:  MOVLB  6
07F5C:  MOVWF  x62
07F5E:  MOVLW  01
07F60:  ADDWFC 02,W
07F62:  MOVWF  x63
07F64:  MOVLW  01
07F66:  ADDWF  x62,W
07F68:  MOVWF  01
07F6A:  MOVLW  00
07F6C:  ADDWFC x63,W
07F6E:  MOVWF  03
07F70:  MOVF   01,W
07F72:  ADDLW  3E
07F74:  MOVWF  01
07F76:  MOVLW  01
07F78:  ADDWFC 03,F
07F7A:  MOVF   01,W
07F7C:  ADDLW  2D
07F7E:  MOVWF  FE9
07F80:  MOVLW  00
07F82:  ADDWFC 03,W
07F84:  MOVWF  FEA
07F86:  MOVLW  04
07F88:  MOVWF  FEF
07F8A:  CLRF   1B
07F8C:  BTFSC  FF2.6
07F8E:  BSF    1B.6
07F90:  BCF    FF2.6
07F92:  BTFSC  FF2.7
07F94:  BSF    1B.7
07F96:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
07F98:  CLRF   xDB
07F9A:  MOVFF  661,6DA
07F9E:  CLRF   xDD
07FA0:  MOVLW  2F
07FA2:  MOVWF  xDC
07FA4:  MOVLB  0
07FA6:  CALL   0420
07FAA:  BTFSC  1B.6
07FAC:  BSF    FF2.6
07FAE:  BTFSC  1B.7
07FB0:  BSF    FF2.7
07FB2:  MOVF   01,W
07FB4:  ADDLW  4C
07FB6:  MOVLB  6
07FB8:  MOVWF  x62
07FBA:  MOVLW  01
07FBC:  ADDWFC 02,W
07FBE:  MOVWF  x63
07FC0:  MOVLW  01
07FC2:  ADDWF  x62,W
07FC4:  MOVWF  01
07FC6:  MOVLW  00
07FC8:  ADDWFC x63,W
07FCA:  MOVWF  03
07FCC:  MOVF   01,W
07FCE:  ADDLW  3E
07FD0:  MOVWF  01
07FD2:  MOVLW  01
07FD4:  ADDWFC 03,F
07FD6:  MOVF   01,W
07FD8:  ADDLW  28
07FDA:  MOVWF  FE9
07FDC:  MOVLW  00
07FDE:  ADDWFC 03,W
07FE0:  MOVWF  FEA
07FE2:  BCF    FD8.0
07FE4:  RLCF   FEF,W
07FE6:  CLRF   03
07FE8:  MOVLB  0
07FEA:  CALL   0176
07FEE:  TBLRD*+
07FF0:  MOVFF  FF5,03
07FF4:  CLRF   00
07FF6:  DECF   00,F
07FF8:  XORWF  00,F
07FFA:  MOVLW  FF
07FFC:  XORWF  03,F
07FFE:  MOVF   00,W
08000:  MOVLB  5
08002:  IORWF  x7F,F
08004:  MOVF   03,W
08006:  IORWF  x80,F
08008:  MOVLB  6
0800A:  CLRF   1B
0800C:  BTFSC  FF2.6
0800E:  BSF    1B.6
08010:  BCF    FF2.6
08012:  BTFSC  FF2.7
08014:  BSF    1B.7
08016:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
08018:  CLRF   xDB
0801A:  MOVFF  661,6DA
0801E:  CLRF   xDD
08020:  MOVLW  2F
08022:  MOVWF  xDC
08024:  MOVLB  0
08026:  CALL   0420
0802A:  BTFSC  1B.6
0802C:  BSF    FF2.6
0802E:  BTFSC  1B.7
08030:  BSF    FF2.7
08032:  MOVF   01,W
08034:  ADDLW  4C
08036:  MOVLB  6
08038:  MOVWF  x62
0803A:  MOVLW  01
0803C:  ADDWFC 02,W
0803E:  MOVWF  x63
08040:  MOVLW  01
08042:  ADDWF  x62,W
08044:  MOVWF  01
08046:  MOVLW  00
08048:  ADDWFC x63,W
0804A:  MOVWF  03
0804C:  MOVF   01,W
0804E:  ADDLW  3E
08050:  MOVWF  01
08052:  MOVLW  01
08054:  ADDWFC 03,F
08056:  MOVF   01,W
08058:  ADDLW  2D
0805A:  MOVWF  FE9
0805C:  MOVLW  00
0805E:  ADDWFC 03,W
08060:  MOVWF  FEA
08062:  DECFSZ FEF,W
08064:  BRA    81FE
08066:  CLRF   1B
08068:  BTFSC  FF2.6
0806A:  BSF    1B.6
0806C:  BCF    FF2.6
0806E:  BTFSC  FF2.7
08070:  BSF    1B.7
08072:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
08074:  CLRF   xDB
08076:  MOVFF  661,6DA
0807A:  CLRF   xDD
0807C:  MOVLW  2F
0807E:  MOVWF  xDC
08080:  MOVLB  0
08082:  CALL   0420
08086:  BTFSC  1B.6
08088:  BSF    FF2.6
0808A:  BTFSC  1B.7
0808C:  BSF    FF2.7
0808E:  MOVF   01,W
08090:  ADDLW  4C
08092:  MOVLB  6
08094:  MOVWF  x62
08096:  MOVLW  01
08098:  ADDWFC 02,W
0809A:  MOVWF  x63
0809C:  MOVLW  01
0809E:  ADDWF  x62,W
080A0:  MOVWF  01
080A2:  MOVLW  00
080A4:  ADDWFC x63,W
080A6:  MOVWF  03
080A8:  MOVF   01,W
080AA:  ADDLW  3E
080AC:  MOVWF  01
080AE:  MOVLW  01
080B0:  ADDWFC 03,F
080B2:  MOVF   01,W
080B4:  ADDLW  2A
080B6:  MOVWF  FE9
080B8:  MOVLW  00
080BA:  ADDWFC 03,W
080BC:  MOVWF  FEA
080BE:  MOVFF  FEF,664
080C2:  CLRF   1B
080C4:  BTFSC  FF2.6
080C6:  BSF    1B.6
080C8:  BCF    FF2.6
080CA:  BTFSC  FF2.7
080CC:  BSF    1B.7
080CE:  BCF    FF2.7
080D0:  CLRF   xDB
080D2:  MOVFF  661,6DA
080D6:  CLRF   xDD
080D8:  MOVLW  2F
080DA:  MOVWF  xDC
080DC:  MOVLB  0
080DE:  CALL   0420
080E2:  BTFSC  1B.6
080E4:  BSF    FF2.6
080E6:  BTFSC  1B.7
080E8:  BSF    FF2.7
080EA:  MOVF   01,W
080EC:  ADDLW  4C
080EE:  MOVLB  6
080F0:  MOVWF  x65
080F2:  MOVLW  01
080F4:  ADDWFC 02,W
080F6:  MOVWF  x66
080F8:  MOVLW  01
080FA:  ADDWF  x65,W
080FC:  MOVWF  01
080FE:  MOVLW  00
08100:  ADDWFC x66,W
08102:  MOVWF  03
08104:  MOVF   01,W
08106:  ADDLW  3E
08108:  MOVWF  01
0810A:  MOVLW  01
0810C:  ADDWFC 03,F
0810E:  MOVF   01,W
08110:  ADDLW  2C
08112:  MOVWF  FE9
08114:  MOVLW  00
08116:  ADDWFC 03,W
08118:  MOVWF  FEA
0811A:  MOVF   FEF,W
0811C:  SUBWF  x64,W
0811E:  BZ    81FE
08120:  BNC   81FE
08122:  CLRF   1B
08124:  BTFSC  FF2.6
08126:  BSF    1B.6
08128:  BCF    FF2.6
0812A:  BTFSC  FF2.7
0812C:  BSF    1B.7
0812E:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
08130:  CLRF   xDB
08132:  MOVFF  661,6DA
08136:  CLRF   xDD
08138:  MOVLW  2F
0813A:  MOVWF  xDC
0813C:  MOVLB  0
0813E:  CALL   0420
08142:  BTFSC  1B.6
08144:  BSF    FF2.6
08146:  BTFSC  1B.7
08148:  BSF    FF2.7
0814A:  MOVF   01,W
0814C:  ADDLW  4C
0814E:  MOVLB  6
08150:  MOVWF  x62
08152:  MOVLW  01
08154:  ADDWFC 02,W
08156:  MOVWF  x63
08158:  MOVLW  01
0815A:  ADDWF  x62,W
0815C:  MOVWF  01
0815E:  MOVLW  00
08160:  ADDWFC x63,W
08162:  MOVWF  03
08164:  MOVF   01,W
08166:  ADDLW  3E
08168:  MOVWF  01
0816A:  MOVLW  01
0816C:  ADDWFC 03,F
0816E:  MOVF   01,W
08170:  ADDLW  2D
08172:  MOVWF  FE9
08174:  MOVLW  00
08176:  ADDWFC 03,W
08178:  MOVWF  FEA
0817A:  MOVLW  04
0817C:  MOVWF  FEF
0817E:  CLRF   1B
08180:  BTFSC  FF2.6
08182:  BSF    1B.6
08184:  BCF    FF2.6
08186:  BTFSC  FF2.7
08188:  BSF    1B.7
0818A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
0818C:  CLRF   xDB
0818E:  MOVFF  661,6DA
08192:  CLRF   xDD
08194:  MOVLW  2F
08196:  MOVWF  xDC
08198:  MOVLB  0
0819A:  CALL   0420
0819E:  BTFSC  1B.6
081A0:  BSF    FF2.6
081A2:  BTFSC  1B.7
081A4:  BSF    FF2.7
081A6:  MOVF   01,W
081A8:  ADDLW  4C
081AA:  MOVLB  6
081AC:  MOVWF  x62
081AE:  MOVLW  01
081B0:  ADDWFC 02,W
081B2:  MOVWF  x63
081B4:  MOVLW  01
081B6:  ADDWF  x62,W
081B8:  MOVWF  01
081BA:  MOVLW  00
081BC:  ADDWFC x63,W
081BE:  MOVWF  03
081C0:  MOVF   01,W
081C2:  ADDLW  3E
081C4:  MOVWF  01
081C6:  MOVLW  01
081C8:  ADDWFC 03,F
081CA:  MOVF   01,W
081CC:  ADDLW  29
081CE:  MOVWF  FE9
081D0:  MOVLW  00
081D2:  ADDWFC 03,W
081D4:  MOVWF  FEA
081D6:  BCF    FD8.0
081D8:  RLCF   FEF,W
081DA:  CLRF   03
081DC:  MOVLB  0
081DE:  CALL   0176
081E2:  TBLRD*+
081E4:  MOVFF  FF5,03
081E8:  CLRF   00
081EA:  DECF   00,F
081EC:  XORWF  00,F
081EE:  MOVLW  FF
081F0:  XORWF  03,F
081F2:  MOVF   00,W
081F4:  MOVLB  5
081F6:  IORWF  x7F,F
081F8:  MOVF   03,W
081FA:  IORWF  x80,F
081FC:  MOVLB  6
081FE:  CLRF   1B
08200:  BTFSC  FF2.6
08202:  BSF    1B.6
08204:  BCF    FF2.6
08206:  BTFSC  FF2.7
08208:  BSF    1B.7
0820A:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
0820C:  CLRF   xDB
0820E:  MOVFF  661,6DA
08212:  CLRF   xDD
08214:  MOVLW  2F
08216:  MOVWF  xDC
08218:  MOVLB  0
0821A:  CALL   0420
0821E:  BTFSC  1B.6
08220:  BSF    FF2.6
08222:  BTFSC  1B.7
08224:  BSF    FF2.7
08226:  MOVF   01,W
08228:  ADDLW  4C
0822A:  MOVLB  6
0822C:  MOVWF  x62
0822E:  MOVLW  01
08230:  ADDWFC 02,W
08232:  MOVWF  x63
08234:  MOVLW  01
08236:  ADDWF  x62,W
08238:  MOVWF  01
0823A:  MOVLW  00
0823C:  ADDWFC x63,W
0823E:  MOVWF  03
08240:  MOVF   01,W
08242:  ADDLW  3E
08244:  MOVWF  01
08246:  MOVLW  01
08248:  ADDWFC 03,F
0824A:  MOVF   01,W
0824C:  ADDLW  2D
0824E:  MOVWF  FE9
08250:  MOVLW  00
08252:  ADDWFC 03,W
08254:  MOVWF  FEA
08256:  MOVF   FEF,W
08258:  SUBLW  02
0825A:  BTFSS  FD8.2
0825C:  BRA    83F6
0825E:  CLRF   1B
08260:  BTFSC  FF2.6
08262:  BSF    1B.6
08264:  BCF    FF2.6
08266:  BTFSC  FF2.7
08268:  BSF    1B.7
0826A:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
0826C:  CLRF   xDB
0826E:  MOVFF  661,6DA
08272:  CLRF   xDD
08274:  MOVLW  2F
08276:  MOVWF  xDC
08278:  MOVLB  0
0827A:  CALL   0420
0827E:  BTFSC  1B.6
08280:  BSF    FF2.6
08282:  BTFSC  1B.7
08284:  BSF    FF2.7
08286:  MOVF   01,W
08288:  ADDLW  4C
0828A:  MOVLB  6
0828C:  MOVWF  x62
0828E:  MOVLW  01
08290:  ADDWFC 02,W
08292:  MOVWF  x63
08294:  MOVLW  01
08296:  ADDWF  x62,W
08298:  MOVWF  01
0829A:  MOVLW  00
0829C:  ADDWFC x63,W
0829E:  MOVWF  03
082A0:  MOVF   01,W
082A2:  ADDLW  3E
082A4:  MOVWF  01
082A6:  MOVLW  01
082A8:  ADDWFC 03,F
082AA:  MOVF   01,W
082AC:  ADDLW  2A
082AE:  MOVWF  FE9
082B0:  MOVLW  00
082B2:  ADDWFC 03,W
082B4:  MOVWF  FEA
082B6:  MOVFF  FEF,664
082BA:  CLRF   1B
082BC:  BTFSC  FF2.6
082BE:  BSF    1B.6
082C0:  BCF    FF2.6
082C2:  BTFSC  FF2.7
082C4:  BSF    1B.7
082C6:  BCF    FF2.7
082C8:  CLRF   xDB
082CA:  MOVFF  661,6DA
082CE:  CLRF   xDD
082D0:  MOVLW  2F
082D2:  MOVWF  xDC
082D4:  MOVLB  0
082D6:  CALL   0420
082DA:  BTFSC  1B.6
082DC:  BSF    FF2.6
082DE:  BTFSC  1B.7
082E0:  BSF    FF2.7
082E2:  MOVF   01,W
082E4:  ADDLW  4C
082E6:  MOVLB  6
082E8:  MOVWF  x65
082EA:  MOVLW  01
082EC:  ADDWFC 02,W
082EE:  MOVWF  x66
082F0:  MOVLW  01
082F2:  ADDWF  x65,W
082F4:  MOVWF  01
082F6:  MOVLW  00
082F8:  ADDWFC x66,W
082FA:  MOVWF  03
082FC:  MOVF   01,W
082FE:  ADDLW  3E
08300:  MOVWF  01
08302:  MOVLW  01
08304:  ADDWFC 03,F
08306:  MOVF   01,W
08308:  ADDLW  2B
0830A:  MOVWF  FE9
0830C:  MOVLW  00
0830E:  ADDWFC 03,W
08310:  MOVWF  FEA
08312:  MOVF   FEF,W
08314:  SUBWF  x64,W
08316:  BZ    83F6
08318:  BNC   83F6
0831A:  CLRF   1B
0831C:  BTFSC  FF2.6
0831E:  BSF    1B.6
08320:  BCF    FF2.6
08322:  BTFSC  FF2.7
08324:  BSF    1B.7
08326:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
08328:  CLRF   xDB
0832A:  MOVFF  661,6DA
0832E:  CLRF   xDD
08330:  MOVLW  2F
08332:  MOVWF  xDC
08334:  MOVLB  0
08336:  CALL   0420
0833A:  BTFSC  1B.6
0833C:  BSF    FF2.6
0833E:  BTFSC  1B.7
08340:  BSF    FF2.7
08342:  MOVF   01,W
08344:  ADDLW  4C
08346:  MOVLB  6
08348:  MOVWF  x62
0834A:  MOVLW  01
0834C:  ADDWFC 02,W
0834E:  MOVWF  x63
08350:  MOVLW  01
08352:  ADDWF  x62,W
08354:  MOVWF  01
08356:  MOVLW  00
08358:  ADDWFC x63,W
0835A:  MOVWF  03
0835C:  MOVF   01,W
0835E:  ADDLW  3E
08360:  MOVWF  01
08362:  MOVLW  01
08364:  ADDWFC 03,F
08366:  MOVF   01,W
08368:  ADDLW  2D
0836A:  MOVWF  FE9
0836C:  MOVLW  00
0836E:  ADDWFC 03,W
08370:  MOVWF  FEA
08372:  MOVLW  04
08374:  MOVWF  FEF
08376:  CLRF   1B
08378:  BTFSC  FF2.6
0837A:  BSF    1B.6
0837C:  BCF    FF2.6
0837E:  BTFSC  FF2.7
08380:  BSF    1B.7
08382:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
08384:  CLRF   xDB
08386:  MOVFF  661,6DA
0838A:  CLRF   xDD
0838C:  MOVLW  2F
0838E:  MOVWF  xDC
08390:  MOVLB  0
08392:  CALL   0420
08396:  BTFSC  1B.6
08398:  BSF    FF2.6
0839A:  BTFSC  1B.7
0839C:  BSF    FF2.7
0839E:  MOVF   01,W
083A0:  ADDLW  4C
083A2:  MOVLB  6
083A4:  MOVWF  x62
083A6:  MOVLW  01
083A8:  ADDWFC 02,W
083AA:  MOVWF  x63
083AC:  MOVLW  01
083AE:  ADDWF  x62,W
083B0:  MOVWF  01
083B2:  MOVLW  00
083B4:  ADDWFC x63,W
083B6:  MOVWF  03
083B8:  MOVF   01,W
083BA:  ADDLW  3E
083BC:  MOVWF  01
083BE:  MOVLW  01
083C0:  ADDWFC 03,F
083C2:  MOVF   01,W
083C4:  ADDLW  28
083C6:  MOVWF  FE9
083C8:  MOVLW  00
083CA:  ADDWFC 03,W
083CC:  MOVWF  FEA
083CE:  BCF    FD8.0
083D0:  RLCF   FEF,W
083D2:  CLRF   03
083D4:  MOVLB  0
083D6:  CALL   0176
083DA:  TBLRD*+
083DC:  MOVFF  FF5,03
083E0:  CLRF   00
083E2:  DECF   00,F
083E4:  XORWF  00,F
083E6:  MOVLW  FF
083E8:  XORWF  03,F
083EA:  MOVF   00,W
083EC:  MOVLB  5
083EE:  IORWF  x7F,F
083F0:  MOVF   03,W
083F2:  IORWF  x80,F
083F4:  MOVLB  6
083F6:  CLRF   1B
083F8:  BTFSC  FF2.6
083FA:  BSF    1B.6
083FC:  BCF    FF2.6
083FE:  BTFSC  FF2.7
08400:  BSF    1B.7
08402:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
08404:  CLRF   xDB
08406:  MOVFF  661,6DA
0840A:  CLRF   xDD
0840C:  MOVLW  2F
0840E:  MOVWF  xDC
08410:  MOVLB  0
08412:  CALL   0420
08416:  BTFSC  1B.6
08418:  BSF    FF2.6
0841A:  BTFSC  1B.7
0841C:  BSF    FF2.7
0841E:  MOVF   01,W
08420:  ADDLW  4C
08422:  MOVLB  6
08424:  MOVWF  x62
08426:  MOVLW  01
08428:  ADDWFC 02,W
0842A:  MOVWF  x63
0842C:  MOVLW  01
0842E:  ADDWF  x62,W
08430:  MOVWF  01
08432:  MOVLW  00
08434:  ADDWFC x63,W
08436:  MOVWF  03
08438:  MOVF   01,W
0843A:  ADDLW  3E
0843C:  MOVWF  01
0843E:  MOVLW  01
08440:  ADDWFC 03,F
08442:  MOVF   01,W
08444:  ADDLW  2D
08446:  MOVWF  FE9
08448:  MOVLW  00
0844A:  ADDWFC 03,W
0844C:  MOVWF  FEA
0844E:  MOVF   FEF,W
08450:  SUBLW  03
08452:  BTFSS  FD8.2
08454:  BRA    85EE
08456:  CLRF   1B
08458:  BTFSC  FF2.6
0845A:  BSF    1B.6
0845C:  BCF    FF2.6
0845E:  BTFSC  FF2.7
08460:  BSF    1B.7
08462:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
08464:  CLRF   xDB
08466:  MOVFF  661,6DA
0846A:  CLRF   xDD
0846C:  MOVLW  2F
0846E:  MOVWF  xDC
08470:  MOVLB  0
08472:  CALL   0420
08476:  BTFSC  1B.6
08478:  BSF    FF2.6
0847A:  BTFSC  1B.7
0847C:  BSF    FF2.7
0847E:  MOVF   01,W
08480:  ADDLW  4C
08482:  MOVLB  6
08484:  MOVWF  x62
08486:  MOVLW  01
08488:  ADDWFC 02,W
0848A:  MOVWF  x63
0848C:  MOVLW  01
0848E:  ADDWF  x62,W
08490:  MOVWF  01
08492:  MOVLW  00
08494:  ADDWFC x63,W
08496:  MOVWF  03
08498:  MOVF   01,W
0849A:  ADDLW  3E
0849C:  MOVWF  01
0849E:  MOVLW  01
084A0:  ADDWFC 03,F
084A2:  MOVF   01,W
084A4:  ADDLW  2A
084A6:  MOVWF  FE9
084A8:  MOVLW  00
084AA:  ADDWFC 03,W
084AC:  MOVWF  FEA
084AE:  MOVFF  FEF,664
084B2:  CLRF   1B
084B4:  BTFSC  FF2.6
084B6:  BSF    1B.6
084B8:  BCF    FF2.6
084BA:  BTFSC  FF2.7
084BC:  BSF    1B.7
084BE:  BCF    FF2.7
084C0:  CLRF   xDB
084C2:  MOVFF  661,6DA
084C6:  CLRF   xDD
084C8:  MOVLW  2F
084CA:  MOVWF  xDC
084CC:  MOVLB  0
084CE:  CALL   0420
084D2:  BTFSC  1B.6
084D4:  BSF    FF2.6
084D6:  BTFSC  1B.7
084D8:  BSF    FF2.7
084DA:  MOVF   01,W
084DC:  ADDLW  4C
084DE:  MOVLB  6
084E0:  MOVWF  x65
084E2:  MOVLW  01
084E4:  ADDWFC 02,W
084E6:  MOVWF  x66
084E8:  MOVLW  01
084EA:  ADDWF  x65,W
084EC:  MOVWF  01
084EE:  MOVLW  00
084F0:  ADDWFC x66,W
084F2:  MOVWF  03
084F4:  MOVF   01,W
084F6:  ADDLW  3E
084F8:  MOVWF  01
084FA:  MOVLW  01
084FC:  ADDWFC 03,F
084FE:  MOVF   01,W
08500:  ADDLW  2B
08502:  MOVWF  FE9
08504:  MOVLW  00
08506:  ADDWFC 03,W
08508:  MOVWF  FEA
0850A:  MOVF   FEF,W
0850C:  SUBWF  x64,W
0850E:  BZ    85EE
08510:  BNC   85EE
08512:  CLRF   1B
08514:  BTFSC  FF2.6
08516:  BSF    1B.6
08518:  BCF    FF2.6
0851A:  BTFSC  FF2.7
0851C:  BSF    1B.7
0851E:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
08520:  CLRF   xDB
08522:  MOVFF  661,6DA
08526:  CLRF   xDD
08528:  MOVLW  2F
0852A:  MOVWF  xDC
0852C:  MOVLB  0
0852E:  CALL   0420
08532:  BTFSC  1B.6
08534:  BSF    FF2.6
08536:  BTFSC  1B.7
08538:  BSF    FF2.7
0853A:  MOVF   01,W
0853C:  ADDLW  4C
0853E:  MOVLB  6
08540:  MOVWF  x62
08542:  MOVLW  01
08544:  ADDWFC 02,W
08546:  MOVWF  x63
08548:  MOVLW  01
0854A:  ADDWF  x62,W
0854C:  MOVWF  01
0854E:  MOVLW  00
08550:  ADDWFC x63,W
08552:  MOVWF  03
08554:  MOVF   01,W
08556:  ADDLW  3E
08558:  MOVWF  01
0855A:  MOVLW  01
0855C:  ADDWFC 03,F
0855E:  MOVF   01,W
08560:  ADDLW  2D
08562:  MOVWF  FE9
08564:  MOVLW  00
08566:  ADDWFC 03,W
08568:  MOVWF  FEA
0856A:  MOVLW  04
0856C:  MOVWF  FEF
0856E:  CLRF   1B
08570:  BTFSC  FF2.6
08572:  BSF    1B.6
08574:  BCF    FF2.6
08576:  BTFSC  FF2.7
08578:  BSF    1B.7
0857A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
0857C:  CLRF   xDB
0857E:  MOVFF  661,6DA
08582:  CLRF   xDD
08584:  MOVLW  2F
08586:  MOVWF  xDC
08588:  MOVLB  0
0858A:  CALL   0420
0858E:  BTFSC  1B.6
08590:  BSF    FF2.6
08592:  BTFSC  1B.7
08594:  BSF    FF2.7
08596:  MOVF   01,W
08598:  ADDLW  4C
0859A:  MOVLB  6
0859C:  MOVWF  x62
0859E:  MOVLW  01
085A0:  ADDWFC 02,W
085A2:  MOVWF  x63
085A4:  MOVLW  01
085A6:  ADDWF  x62,W
085A8:  MOVWF  01
085AA:  MOVLW  00
085AC:  ADDWFC x63,W
085AE:  MOVWF  03
085B0:  MOVF   01,W
085B2:  ADDLW  3E
085B4:  MOVWF  01
085B6:  MOVLW  01
085B8:  ADDWFC 03,F
085BA:  MOVF   01,W
085BC:  ADDLW  29
085BE:  MOVWF  FE9
085C0:  MOVLW  00
085C2:  ADDWFC 03,W
085C4:  MOVWF  FEA
085C6:  BCF    FD8.0
085C8:  RLCF   FEF,W
085CA:  CLRF   03
085CC:  MOVLB  0
085CE:  CALL   0176
085D2:  TBLRD*+
085D4:  MOVFF  FF5,03
085D8:  CLRF   00
085DA:  DECF   00,F
085DC:  XORWF  00,F
085DE:  MOVLW  FF
085E0:  XORWF  03,F
085E2:  MOVF   00,W
085E4:  MOVLB  5
085E6:  IORWF  x7F,F
085E8:  MOVF   03,W
085EA:  IORWF  x80,F
085EC:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
085EE:  MOVLB  0
085F0:  BRA    85F2
....................       } 
....................    } 
085F2:  MOVLB  6
085F4:  INCF   x61,F
085F6:  GOTO   7D00
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
085FA:  CLRF   x61
085FC:  MOVLB  1
085FE:  MOVF   x3E,W
08600:  MOVLB  6
08602:  SUBWF  x61,W
08604:  BTFSC  FD8.0
08606:  BRA    8DAC
08608:  CLRF   1B
0860A:  BTFSC  FF2.6
0860C:  BSF    1B.6
0860E:  BCF    FF2.6
08610:  BTFSC  FF2.7
08612:  BSF    1B.7
08614:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
08616:  CLRF   xDB
08618:  MOVFF  661,6DA
0861C:  CLRF   xDD
0861E:  MOVLW  21
08620:  MOVWF  xDC
08622:  MOVLB  0
08624:  CALL   0420
08628:  BTFSC  1B.6
0862A:  BSF    FF2.6
0862C:  BTFSC  1B.7
0862E:  BSF    FF2.7
08630:  MOVFF  02,03
08634:  MOVF   01,W
08636:  ADDLW  40
08638:  MOVWF  01
0863A:  MOVLW  01
0863C:  ADDWFC 03,F
0863E:  MOVFF  01,FE9
08642:  MOVFF  03,FEA
08646:  MOVF   FEF,W
08648:  XORLW  02
0864A:  BZ    8654
0864C:  XORLW  01
0864E:  BTFSC  FD8.2
08650:  BRA    87C8
08652:  BRA    8DA6
....................          case button_switch: 
08654:  CLRF   1B
08656:  BTFSC  FF2.6
08658:  BSF    1B.6
0865A:  BCF    FF2.6
0865C:  BTFSC  FF2.7
0865E:  BSF    1B.7
08660:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
08662:  MOVLB  6
08664:  CLRF   xDB
08666:  MOVFF  661,6DA
0866A:  CLRF   xDD
0866C:  MOVLW  21
0866E:  MOVWF  xDC
08670:  MOVLB  0
08672:  CALL   0420
08676:  BTFSC  1B.6
08678:  BSF    FF2.6
0867A:  BTFSC  1B.7
0867C:  BSF    FF2.7
0867E:  MOVF   01,W
08680:  ADDLW  02
08682:  MOVLB  6
08684:  MOVWF  x62
08686:  MOVLW  00
08688:  ADDWFC 02,W
0868A:  MOVWF  x63
0868C:  MOVLW  01
0868E:  ADDWF  x62,W
08690:  MOVWF  01
08692:  MOVLW  00
08694:  ADDWFC x63,W
08696:  MOVWF  03
08698:  MOVF   01,W
0869A:  ADDLW  3E
0869C:  MOVWF  01
0869E:  MOVLW  01
086A0:  ADDWFC 03,F
086A2:  MOVF   01,W
086A4:  ADDLW  08
086A6:  MOVWF  FE9
086A8:  MOVLW  00
086AA:  ADDWFC 03,W
086AC:  MOVWF  FEA
086AE:  BTFSS  FEF.0
086B0:  BRA    87C4
086B2:  CLRF   1B
086B4:  BTFSC  FF2.6
086B6:  BSF    1B.6
086B8:  BCF    FF2.6
086BA:  BTFSC  FF2.7
086BC:  BSF    1B.7
086BE:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
086C0:  CLRF   xDB
086C2:  MOVFF  661,6DA
086C6:  CLRF   xDD
086C8:  MOVLW  21
086CA:  MOVWF  xDC
086CC:  MOVLB  0
086CE:  CALL   0420
086D2:  BTFSC  1B.6
086D4:  BSF    FF2.6
086D6:  BTFSC  1B.7
086D8:  BSF    FF2.7
086DA:  MOVF   01,W
086DC:  ADDLW  02
086DE:  MOVLB  6
086E0:  MOVWF  x62
086E2:  MOVLW  00
086E4:  ADDWFC 02,W
086E6:  MOVWF  x63
086E8:  MOVLW  01
086EA:  ADDWF  x62,W
086EC:  MOVWF  01
086EE:  MOVLW  00
086F0:  ADDWFC x63,W
086F2:  MOVWF  03
086F4:  MOVF   01,W
086F6:  ADDLW  3E
086F8:  MOVWF  01
086FA:  MOVLW  01
086FC:  ADDWFC 03,F
086FE:  MOVF   01,W
08700:  ADDLW  07
08702:  MOVWF  FE9
08704:  MOVLW  00
08706:  ADDWFC 03,W
08708:  MOVWF  FEA
0870A:  MOVF   FEF,F
0870C:  BNZ   87C4
0870E:  CLRF   1B
08710:  BTFSC  FF2.6
08712:  BSF    1B.6
08714:  BCF    FF2.6
08716:  BTFSC  FF2.7
08718:  BSF    1B.7
0871A:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
0871C:  CLRF   xDB
0871E:  MOVFF  661,6DA
08722:  CLRF   xDD
08724:  MOVLW  21
08726:  MOVWF  xDC
08728:  MOVLB  0
0872A:  CALL   0420
0872E:  BTFSC  1B.6
08730:  BSF    FF2.6
08732:  BTFSC  1B.7
08734:  BSF    FF2.7
08736:  MOVF   01,W
08738:  ADDLW  02
0873A:  MOVLB  6
0873C:  MOVWF  x62
0873E:  MOVLW  00
08740:  ADDWFC 02,W
08742:  MOVWF  x63
08744:  MOVLW  01
08746:  ADDWF  x62,W
08748:  MOVWF  01
0874A:  MOVLW  00
0874C:  ADDWFC x63,W
0874E:  MOVWF  03
08750:  MOVF   01,W
08752:  ADDLW  3E
08754:  MOVWF  01
08756:  MOVLW  01
08758:  ADDWFC 03,F
0875A:  MOVF   01,W
0875C:  ADDLW  01
0875E:  MOVWF  FE9
08760:  MOVLW  00
08762:  ADDWFC 03,W
08764:  MOVWF  FEA
08766:  MOVLW  01
08768:  MOVWF  FEF
0876A:  CLRF   1B
0876C:  BTFSC  FF2.6
0876E:  BSF    1B.6
08770:  BCF    FF2.6
08772:  BTFSC  FF2.7
08774:  BSF    1B.7
08776:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
08778:  CLRF   xDB
0877A:  MOVFF  661,6DA
0877E:  CLRF   xDD
08780:  MOVLW  21
08782:  MOVWF  xDC
08784:  MOVLB  0
08786:  CALL   0420
0878A:  BTFSC  1B.6
0878C:  BSF    FF2.6
0878E:  BTFSC  1B.7
08790:  BSF    FF2.7
08792:  MOVF   01,W
08794:  ADDLW  02
08796:  MOVLB  6
08798:  MOVWF  x62
0879A:  MOVLW  00
0879C:  ADDWFC 02,W
0879E:  MOVWF  x63
087A0:  MOVLW  01
087A2:  ADDWF  x62,W
087A4:  MOVWF  01
087A6:  MOVLW  00
087A8:  ADDWFC x63,W
087AA:  MOVWF  03
087AC:  MOVF   01,W
087AE:  ADDLW  3E
087B0:  MOVWF  01
087B2:  MOVLW  01
087B4:  ADDWFC 03,F
087B6:  MOVF   01,W
087B8:  ADDLW  02
087BA:  MOVWF  FE9
087BC:  MOVLW  00
087BE:  ADDWFC 03,W
087C0:  MOVWF  FEA
087C2:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
087C4:  MOVLB  0
087C6:  BRA    8DA6
....................          case timer: 
087C8:  CLRF   1B
087CA:  BTFSC  FF2.6
087CC:  BSF    1B.6
087CE:  BCF    FF2.6
087D0:  BTFSC  FF2.7
087D2:  BSF    1B.7
087D4:  BCF    FF2.7
....................           
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
087D6:  MOVLB  6
087D8:  CLRF   xDB
087DA:  MOVFF  661,6DA
087DE:  CLRF   xDD
087E0:  MOVLW  21
087E2:  MOVWF  xDC
087E4:  MOVLB  0
087E6:  CALL   0420
087EA:  BTFSC  1B.6
087EC:  BSF    FF2.6
087EE:  BTFSC  1B.7
087F0:  BSF    FF2.7
087F2:  MOVF   01,W
087F4:  ADDLW  02
087F6:  MOVLB  6
087F8:  MOVWF  x62
087FA:  MOVLW  00
087FC:  ADDWFC 02,W
087FE:  MOVWF  x63
08800:  MOVLW  01
08802:  ADDWF  x62,W
08804:  MOVWF  01
08806:  MOVLW  00
08808:  ADDWFC x63,W
0880A:  MOVWF  03
0880C:  MOVF   01,W
0880E:  ADDLW  3E
08810:  MOVWF  01
08812:  MOVLW  01
08814:  ADDWFC 03,F
08816:  MOVF   01,W
08818:  ADDLW  1F
0881A:  MOVWF  FE9
0881C:  MOVLW  00
0881E:  ADDWFC 03,W
08820:  MOVWF  FEA
08822:  BTFSS  FEF.0
08824:  BRA    8DA2
08826:  CLRF   1B
08828:  BTFSC  FF2.6
0882A:  BSF    1B.6
0882C:  BCF    FF2.6
0882E:  BTFSC  FF2.7
08830:  BSF    1B.7
08832:  BCF    FF2.7
....................           { 
....................          // printf("ACTIVE"); 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
08834:  CLRF   xDB
08836:  MOVFF  661,6DA
0883A:  CLRF   xDD
0883C:  MOVLW  21
0883E:  MOVWF  xDC
08840:  MOVLB  0
08842:  CALL   0420
08846:  BTFSC  1B.6
08848:  BSF    FF2.6
0884A:  BTFSC  1B.7
0884C:  BSF    FF2.7
0884E:  MOVF   01,W
08850:  ADDLW  02
08852:  MOVLB  6
08854:  MOVWF  x62
08856:  MOVLW  00
08858:  ADDWFC 02,W
0885A:  MOVWF  x63
0885C:  MOVLW  01
0885E:  ADDWF  x62,W
08860:  MOVWF  01
08862:  MOVLW  00
08864:  ADDWFC x63,W
08866:  MOVWF  03
08868:  MOVF   01,W
0886A:  ADDLW  3E
0886C:  MOVWF  01
0886E:  MOVLW  01
08870:  ADDWFC 03,F
08872:  MOVF   01,W
08874:  ADDLW  1D
08876:  MOVWF  FE9
08878:  MOVLW  00
0887A:  ADDWFC 03,W
0887C:  MOVWF  FEA
0887E:  MOVLW  01
08880:  ADDWF  FEE,F
08882:  BNC   8886
08884:  INCF   FEF,F
08886:  CLRF   1B
08888:  BTFSC  FF2.6
0888A:  BSF    1B.6
0888C:  BCF    FF2.6
0888E:  BTFSC  FF2.7
08890:  BSF    1B.7
08892:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
08894:  CLRF   xDB
08896:  MOVFF  661,6DA
0889A:  CLRF   xDD
0889C:  MOVLW  21
0889E:  MOVWF  xDC
088A0:  MOVLB  0
088A2:  CALL   0420
088A6:  BTFSC  1B.6
088A8:  BSF    FF2.6
088AA:  BTFSC  1B.7
088AC:  BSF    FF2.7
088AE:  MOVF   01,W
088B0:  ADDLW  02
088B2:  MOVLB  6
088B4:  MOVWF  x62
088B6:  MOVLW  00
088B8:  ADDWFC 02,W
088BA:  MOVWF  x63
088BC:  MOVLW  01
088BE:  ADDWF  x62,W
088C0:  MOVWF  01
088C2:  MOVLW  00
088C4:  ADDWFC x63,W
088C6:  MOVWF  03
088C8:  MOVF   01,W
088CA:  ADDLW  3E
088CC:  MOVWF  01
088CE:  MOVLW  01
088D0:  ADDWFC 03,F
088D2:  MOVF   01,W
088D4:  ADDLW  1D
088D6:  MOVWF  FE9
088D8:  MOVLW  00
088DA:  ADDWFC 03,W
088DC:  MOVWF  FEA
088DE:  MOVFF  FEC,665
088E2:  MOVF   FED,F
088E4:  MOVFF  FEF,664
088E8:  CLRF   1B
088EA:  BTFSC  FF2.6
088EC:  BSF    1B.6
088EE:  BCF    FF2.6
088F0:  BTFSC  FF2.7
088F2:  BSF    1B.7
088F4:  BCF    FF2.7
088F6:  CLRF   xDB
088F8:  MOVFF  661,6DA
088FC:  CLRF   xDD
088FE:  MOVLW  21
08900:  MOVWF  xDC
08902:  MOVLB  0
08904:  CALL   0420
08908:  BTFSC  1B.6
0890A:  BSF    FF2.6
0890C:  BTFSC  1B.7
0890E:  BSF    FF2.7
08910:  MOVF   01,W
08912:  ADDLW  02
08914:  MOVLB  6
08916:  MOVWF  x66
08918:  MOVLW  00
0891A:  ADDWFC 02,W
0891C:  MOVWF  x67
0891E:  MOVLW  01
08920:  ADDWF  x66,W
08922:  MOVWF  01
08924:  MOVLW  00
08926:  ADDWFC x67,W
08928:  MOVWF  03
0892A:  MOVF   01,W
0892C:  ADDLW  3E
0892E:  MOVWF  01
08930:  MOVLW  01
08932:  ADDWFC 03,F
08934:  MOVF   01,W
08936:  ADDLW  01
08938:  MOVWF  FE9
0893A:  MOVLW  00
0893C:  ADDWFC 03,W
0893E:  MOVWF  FEA
08940:  MOVFF  FEC,03
08944:  MOVF   FED,F
08946:  MOVFF  FEF,01
0894A:  MOVF   03,W
0894C:  SUBWF  x65,W
0894E:  BTFSS  FD8.0
08950:  BRA    8DA2
08952:  BNZ   895C
08954:  MOVF   x64,W
08956:  SUBWF  01,W
08958:  BTFSC  FD8.0
0895A:  BRA    8DA2
0895C:  CLRF   1B
0895E:  BTFSC  FF2.6
08960:  BSF    1B.6
08962:  BCF    FF2.6
08964:  BTFSC  FF2.7
08966:  BSF    1B.7
08968:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
0896A:  CLRF   xDB
0896C:  MOVFF  661,6DA
08970:  CLRF   xDD
08972:  MOVLW  21
08974:  MOVWF  xDC
08976:  MOVLB  0
08978:  CALL   0420
0897C:  BTFSC  1B.6
0897E:  BSF    FF2.6
08980:  BTFSC  1B.7
08982:  BSF    FF2.7
08984:  MOVF   01,W
08986:  ADDLW  02
08988:  MOVLB  6
0898A:  MOVWF  x62
0898C:  MOVLW  00
0898E:  ADDWFC 02,W
08990:  MOVWF  x63
08992:  MOVLW  01
08994:  ADDWF  x62,W
08996:  MOVWF  01
08998:  MOVLW  00
0899A:  ADDWFC x63,W
0899C:  MOVWF  03
0899E:  MOVF   01,W
089A0:  ADDLW  3E
089A2:  MOVWF  01
089A4:  MOVLW  01
089A6:  ADDWFC 03,F
089A8:  MOVFF  01,FE9
089AC:  MOVFF  03,FEA
089B0:  MOVF   FEF,F
089B2:  BTFSS  FD8.2
089B4:  BRA    8AC8
089B6:  CLRF   1B
089B8:  BTFSC  FF2.6
089BA:  BSF    1B.6
089BC:  BCF    FF2.6
089BE:  BTFSC  FF2.7
089C0:  BSF    1B.7
089C2:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
089C4:  CLRF   xDB
089C6:  MOVFF  661,6DA
089CA:  CLRF   xDD
089CC:  MOVLW  21
089CE:  MOVWF  xDC
089D0:  MOVLB  0
089D2:  CALL   0420
089D6:  BTFSC  1B.6
089D8:  BSF    FF2.6
089DA:  BTFSC  1B.7
089DC:  BSF    FF2.7
089DE:  MOVF   01,W
089E0:  ADDLW  02
089E2:  MOVLB  6
089E4:  MOVWF  x62
089E6:  MOVLW  00
089E8:  ADDWFC 02,W
089EA:  MOVWF  x63
089EC:  MOVLW  01
089EE:  ADDWF  x62,W
089F0:  MOVWF  01
089F2:  MOVLW  00
089F4:  ADDWFC x63,W
089F6:  MOVWF  03
089F8:  MOVF   01,W
089FA:  ADDLW  3E
089FC:  MOVWF  01
089FE:  MOVLW  01
08A00:  ADDWFC 03,F
08A02:  MOVF   01,W
08A04:  ADDLW  04
08A06:  MOVWF  FE9
08A08:  MOVLW  00
08A0A:  ADDWFC 03,W
08A0C:  MOVWF  FEA
08A0E:  MOVLW  01
08A10:  MOVWF  FEF
08A12:  CLRF   1B
08A14:  BTFSC  FF2.6
08A16:  BSF    1B.6
08A18:  BCF    FF2.6
08A1A:  BTFSC  FF2.7
08A1C:  BSF    1B.7
08A1E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
08A20:  CLRF   xDB
08A22:  MOVFF  661,6DA
08A26:  CLRF   xDD
08A28:  MOVLW  21
08A2A:  MOVWF  xDC
08A2C:  MOVLB  0
08A2E:  CALL   0420
08A32:  BTFSC  1B.6
08A34:  BSF    FF2.6
08A36:  BTFSC  1B.7
08A38:  BSF    FF2.7
08A3A:  MOVF   01,W
08A3C:  ADDLW  02
08A3E:  MOVLB  6
08A40:  MOVWF  x62
08A42:  MOVLW  00
08A44:  ADDWFC 02,W
08A46:  MOVWF  x63
08A48:  MOVLW  01
08A4A:  ADDWF  x62,W
08A4C:  MOVWF  01
08A4E:  MOVLW  00
08A50:  ADDWFC x63,W
08A52:  MOVWF  03
08A54:  MOVF   01,W
08A56:  ADDLW  3E
08A58:  MOVWF  01
08A5A:  MOVLW  01
08A5C:  ADDWFC 03,F
08A5E:  MOVF   01,W
08A60:  ADDLW  05
08A62:  MOVWF  FE9
08A64:  MOVLW  00
08A66:  ADDWFC 03,W
08A68:  MOVWF  FEA
08A6A:  BSF    FEF.0
08A6C:  CLRF   1B
08A6E:  BTFSC  FF2.6
08A70:  BSF    1B.6
08A72:  BCF    FF2.6
08A74:  BTFSC  FF2.7
08A76:  BSF    1B.7
08A78:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
08A7A:  CLRF   xDB
08A7C:  MOVFF  661,6DA
08A80:  CLRF   xDD
08A82:  MOVLW  21
08A84:  MOVWF  xDC
08A86:  MOVLB  0
08A88:  CALL   0420
08A8C:  BTFSC  1B.6
08A8E:  BSF    FF2.6
08A90:  BTFSC  1B.7
08A92:  BSF    FF2.7
08A94:  MOVF   01,W
08A96:  ADDLW  02
08A98:  MOVLB  6
08A9A:  MOVWF  x62
08A9C:  MOVLW  00
08A9E:  ADDWFC 02,W
08AA0:  MOVWF  x63
08AA2:  MOVLW  01
08AA4:  ADDWF  x62,W
08AA6:  MOVWF  01
08AA8:  MOVLW  00
08AAA:  ADDWFC x63,W
08AAC:  MOVWF  03
08AAE:  MOVF   01,W
08AB0:  ADDLW  3E
08AB2:  MOVWF  01
08AB4:  MOVLW  01
08AB6:  ADDWFC 03,F
08AB8:  MOVF   01,W
08ABA:  ADDLW  1F
08ABC:  MOVWF  FE9
08ABE:  MOVLW  00
08AC0:  ADDWFC 03,W
08AC2:  MOVWF  FEA
08AC4:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
08AC6:  BRA    8DA2
08AC8:  CLRF   1B
08ACA:  BTFSC  FF2.6
08ACC:  BSF    1B.6
08ACE:  BCF    FF2.6
08AD0:  BTFSC  FF2.7
08AD2:  BSF    1B.7
08AD4:  BCF    FF2.7
08AD6:  CLRF   xDB
08AD8:  MOVFF  661,6DA
08ADC:  CLRF   xDD
08ADE:  MOVLW  21
08AE0:  MOVWF  xDC
08AE2:  MOVLB  0
08AE4:  CALL   0420
08AE8:  BTFSC  1B.6
08AEA:  BSF    FF2.6
08AEC:  BTFSC  1B.7
08AEE:  BSF    FF2.7
08AF0:  MOVF   01,W
08AF2:  ADDLW  02
08AF4:  MOVLB  6
08AF6:  MOVWF  x62
08AF8:  MOVLW  00
08AFA:  ADDWFC 02,W
08AFC:  MOVWF  x63
08AFE:  MOVLW  01
08B00:  ADDWF  x62,W
08B02:  MOVWF  01
08B04:  MOVLW  00
08B06:  ADDWFC x63,W
08B08:  MOVWF  03
08B0A:  MOVF   01,W
08B0C:  ADDLW  3E
08B0E:  MOVWF  01
08B10:  MOVLW  01
08B12:  ADDWFC 03,F
08B14:  MOVFF  01,FE9
08B18:  MOVFF  03,FEA
08B1C:  DECFSZ FEF,W
08B1E:  BRA    8C32
08B20:  CLRF   1B
08B22:  BTFSC  FF2.6
08B24:  BSF    1B.6
08B26:  BCF    FF2.6
08B28:  BTFSC  FF2.7
08B2A:  BSF    1B.7
08B2C:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
08B2E:  CLRF   xDB
08B30:  MOVFF  661,6DA
08B34:  CLRF   xDD
08B36:  MOVLW  21
08B38:  MOVWF  xDC
08B3A:  MOVLB  0
08B3C:  CALL   0420
08B40:  BTFSC  1B.6
08B42:  BSF    FF2.6
08B44:  BTFSC  1B.7
08B46:  BSF    FF2.7
08B48:  MOVF   01,W
08B4A:  ADDLW  02
08B4C:  MOVLB  6
08B4E:  MOVWF  x62
08B50:  MOVLW  00
08B52:  ADDWFC 02,W
08B54:  MOVWF  x63
08B56:  MOVLW  01
08B58:  ADDWF  x62,W
08B5A:  MOVWF  01
08B5C:  MOVLW  00
08B5E:  ADDWFC x63,W
08B60:  MOVWF  03
08B62:  MOVF   01,W
08B64:  ADDLW  3E
08B66:  MOVWF  01
08B68:  MOVLW  01
08B6A:  ADDWFC 03,F
08B6C:  MOVF   01,W
08B6E:  ADDLW  07
08B70:  MOVWF  FE9
08B72:  MOVLW  00
08B74:  ADDWFC 03,W
08B76:  MOVWF  FEA
08B78:  MOVLW  01
08B7A:  MOVWF  FEF
08B7C:  CLRF   1B
08B7E:  BTFSC  FF2.6
08B80:  BSF    1B.6
08B82:  BCF    FF2.6
08B84:  BTFSC  FF2.7
08B86:  BSF    1B.7
08B88:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
08B8A:  CLRF   xDB
08B8C:  MOVFF  661,6DA
08B90:  CLRF   xDD
08B92:  MOVLW  21
08B94:  MOVWF  xDC
08B96:  MOVLB  0
08B98:  CALL   0420
08B9C:  BTFSC  1B.6
08B9E:  BSF    FF2.6
08BA0:  BTFSC  1B.7
08BA2:  BSF    FF2.7
08BA4:  MOVF   01,W
08BA6:  ADDLW  02
08BA8:  MOVLB  6
08BAA:  MOVWF  x62
08BAC:  MOVLW  00
08BAE:  ADDWFC 02,W
08BB0:  MOVWF  x63
08BB2:  MOVLW  01
08BB4:  ADDWF  x62,W
08BB6:  MOVWF  01
08BB8:  MOVLW  00
08BBA:  ADDWFC x63,W
08BBC:  MOVWF  03
08BBE:  MOVF   01,W
08BC0:  ADDLW  3E
08BC2:  MOVWF  01
08BC4:  MOVLW  01
08BC6:  ADDWFC 03,F
08BC8:  MOVF   01,W
08BCA:  ADDLW  08
08BCC:  MOVWF  FE9
08BCE:  MOVLW  00
08BD0:  ADDWFC 03,W
08BD2:  MOVWF  FEA
08BD4:  BSF    FEF.0
08BD6:  CLRF   1B
08BD8:  BTFSC  FF2.6
08BDA:  BSF    1B.6
08BDC:  BCF    FF2.6
08BDE:  BTFSC  FF2.7
08BE0:  BSF    1B.7
08BE2:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
08BE4:  CLRF   xDB
08BE6:  MOVFF  661,6DA
08BEA:  CLRF   xDD
08BEC:  MOVLW  21
08BEE:  MOVWF  xDC
08BF0:  MOVLB  0
08BF2:  CALL   0420
08BF6:  BTFSC  1B.6
08BF8:  BSF    FF2.6
08BFA:  BTFSC  1B.7
08BFC:  BSF    FF2.7
08BFE:  MOVF   01,W
08C00:  ADDLW  02
08C02:  MOVLB  6
08C04:  MOVWF  x62
08C06:  MOVLW  00
08C08:  ADDWFC 02,W
08C0A:  MOVWF  x63
08C0C:  MOVLW  01
08C0E:  ADDWF  x62,W
08C10:  MOVWF  01
08C12:  MOVLW  00
08C14:  ADDWFC x63,W
08C16:  MOVWF  03
08C18:  MOVF   01,W
08C1A:  ADDLW  3E
08C1C:  MOVWF  01
08C1E:  MOVLW  01
08C20:  ADDWFC 03,F
08C22:  MOVF   01,W
08C24:  ADDLW  1F
08C26:  MOVWF  FE9
08C28:  MOVLW  00
08C2A:  ADDWFC 03,W
08C2C:  MOVWF  FEA
08C2E:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
08C30:  BRA    8DA2
08C32:  CLRF   1B
08C34:  BTFSC  FF2.6
08C36:  BSF    1B.6
08C38:  BCF    FF2.6
08C3A:  BTFSC  FF2.7
08C3C:  BSF    1B.7
08C3E:  BCF    FF2.7
08C40:  CLRF   xDB
08C42:  MOVFF  661,6DA
08C46:  CLRF   xDD
08C48:  MOVLW  21
08C4A:  MOVWF  xDC
08C4C:  MOVLB  0
08C4E:  CALL   0420
08C52:  BTFSC  1B.6
08C54:  BSF    FF2.6
08C56:  BTFSC  1B.7
08C58:  BSF    FF2.7
08C5A:  MOVF   01,W
08C5C:  ADDLW  02
08C5E:  MOVLB  6
08C60:  MOVWF  x62
08C62:  MOVLW  00
08C64:  ADDWFC 02,W
08C66:  MOVWF  x63
08C68:  MOVLW  01
08C6A:  ADDWF  x62,W
08C6C:  MOVWF  01
08C6E:  MOVLW  00
08C70:  ADDWFC x63,W
08C72:  MOVWF  03
08C74:  MOVF   01,W
08C76:  ADDLW  3E
08C78:  MOVWF  01
08C7A:  MOVLW  01
08C7C:  ADDWFC 03,F
08C7E:  MOVFF  01,FE9
08C82:  MOVFF  03,FEA
08C86:  MOVF   FEF,W
08C88:  SUBLW  02
08C8A:  BTFSS  FD8.2
08C8C:  BRA    8DA2
08C8E:  CLRF   1B
08C90:  BTFSC  FF2.6
08C92:  BSF    1B.6
08C94:  BCF    FF2.6
08C96:  BTFSC  FF2.7
08C98:  BSF    1B.7
08C9A:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
08C9C:  CLRF   xDB
08C9E:  MOVFF  661,6DA
08CA2:  CLRF   xDD
08CA4:  MOVLW  21
08CA6:  MOVWF  xDC
08CA8:  MOVLB  0
08CAA:  CALL   0420
08CAE:  BTFSC  1B.6
08CB0:  BSF    FF2.6
08CB2:  BTFSC  1B.7
08CB4:  BSF    FF2.7
08CB6:  MOVF   01,W
08CB8:  ADDLW  02
08CBA:  MOVLB  6
08CBC:  MOVWF  x62
08CBE:  MOVLW  00
08CC0:  ADDWFC 02,W
08CC2:  MOVWF  x63
08CC4:  MOVLW  01
08CC6:  ADDWF  x62,W
08CC8:  MOVWF  01
08CCA:  MOVLW  00
08CCC:  ADDWFC x63,W
08CCE:  MOVWF  03
08CD0:  MOVF   01,W
08CD2:  ADDLW  3E
08CD4:  MOVWF  01
08CD6:  MOVLW  01
08CD8:  ADDWFC 03,F
08CDA:  MOVF   01,W
08CDC:  ADDLW  04
08CDE:  MOVWF  FE9
08CE0:  MOVLW  00
08CE2:  ADDWFC 03,W
08CE4:  MOVWF  FEA
08CE6:  MOVLW  01
08CE8:  MOVWF  FEF
08CEA:  CLRF   1B
08CEC:  BTFSC  FF2.6
08CEE:  BSF    1B.6
08CF0:  BCF    FF2.6
08CF2:  BTFSC  FF2.7
08CF4:  BSF    1B.7
08CF6:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
08CF8:  CLRF   xDB
08CFA:  MOVFF  661,6DA
08CFE:  CLRF   xDD
08D00:  MOVLW  21
08D02:  MOVWF  xDC
08D04:  MOVLB  0
08D06:  CALL   0420
08D0A:  BTFSC  1B.6
08D0C:  BSF    FF2.6
08D0E:  BTFSC  1B.7
08D10:  BSF    FF2.7
08D12:  MOVF   01,W
08D14:  ADDLW  02
08D16:  MOVLB  6
08D18:  MOVWF  x62
08D1A:  MOVLW  00
08D1C:  ADDWFC 02,W
08D1E:  MOVWF  x63
08D20:  MOVLW  01
08D22:  ADDWF  x62,W
08D24:  MOVWF  01
08D26:  MOVLW  00
08D28:  ADDWFC x63,W
08D2A:  MOVWF  03
08D2C:  MOVF   01,W
08D2E:  ADDLW  3E
08D30:  MOVWF  01
08D32:  MOVLW  01
08D34:  ADDWFC 03,F
08D36:  MOVF   01,W
08D38:  ADDLW  05
08D3A:  MOVWF  FE9
08D3C:  MOVLW  00
08D3E:  ADDWFC 03,W
08D40:  MOVWF  FEA
08D42:  BSF    FEF.0
08D44:  CLRF   1B
08D46:  BTFSC  FF2.6
08D48:  BSF    1B.6
08D4A:  BCF    FF2.6
08D4C:  BTFSC  FF2.7
08D4E:  BSF    1B.7
08D50:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
08D52:  CLRF   xDB
08D54:  MOVFF  661,6DA
08D58:  CLRF   xDD
08D5A:  MOVLW  21
08D5C:  MOVWF  xDC
08D5E:  MOVLB  0
08D60:  CALL   0420
08D64:  BTFSC  1B.6
08D66:  BSF    FF2.6
08D68:  BTFSC  1B.7
08D6A:  BSF    FF2.7
08D6C:  MOVF   01,W
08D6E:  ADDLW  02
08D70:  MOVLB  6
08D72:  MOVWF  x62
08D74:  MOVLW  00
08D76:  ADDWFC 02,W
08D78:  MOVWF  x63
08D7A:  MOVLW  01
08D7C:  ADDWF  x62,W
08D7E:  MOVWF  01
08D80:  MOVLW  00
08D82:  ADDWFC x63,W
08D84:  MOVWF  03
08D86:  MOVF   01,W
08D88:  ADDLW  3E
08D8A:  MOVWF  01
08D8C:  MOVLW  01
08D8E:  ADDWFC 03,F
08D90:  MOVF   01,W
08D92:  ADDLW  1D
08D94:  MOVWF  FE9
08D96:  MOVLW  00
08D98:  ADDWFC 03,W
08D9A:  MOVWF  FEA
08D9C:  CLRF   FEC
08D9E:  MOVF   FED,F
08DA0:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
08DA2:  MOVLB  0
08DA4:  BRA    8DA6
....................       } 
....................    } 
08DA6:  MOVLB  6
08DA8:  INCF   x61,F
08DAA:  BRA    85FC
.................... } 
08DAC:  MOVLB  0
08DAE:  GOTO   92CC (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
*
056B6:  MOVLW  D0
056B8:  MOVWF  FF6
056BA:  MOVLW  02
056BC:  MOVWF  FF7
056BE:  MOVLW  00
056C0:  MOVWF  FF8
056C2:  CLRF   1B
056C4:  BTFSC  FF2.6
056C6:  BSF    1B.6
056C8:  BCF    FF2.6
056CA:  BTFSC  FF2.7
056CC:  BSF    1B.7
056CE:  BCF    FF2.7
056D0:  CALL   0F2E
056D4:  BTFSC  1B.6
056D6:  BSF    FF2.6
056D8:  BTFSC  1B.7
056DA:  BSF    FF2.7
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
056DC:  MOVLW  DA
056DE:  MOVWF  FF6
056E0:  MOVLW  02
056E2:  MOVWF  FF7
056E4:  MOVLW  00
056E6:  MOVWF  FF8
056E8:  CLRF   1B
056EA:  BTFSC  FF2.6
056EC:  BSF    1B.6
056EE:  BCF    FF2.6
056F0:  BTFSC  FF2.7
056F2:  BSF    1B.7
056F4:  BCF    FF2.7
056F6:  CALL   0F2E
056FA:  BTFSC  1B.6
056FC:  BSF    FF2.6
056FE:  BTFSC  1B.7
05700:  BSF    FF2.7
....................    while(!kbhit()) 
....................    { 
05702:  BTFSS  F81.4
05704:  BRA    5BD4
05706:  CLRF   1B
05708:  BTFSC  FF2.6
0570A:  BSF    1B.6
0570C:  BCF    FF2.6
0570E:  BTFSC  FF2.7
05710:  BSF    1B.7
05712:  BCF    FF2.7
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
05714:  MOVFF  1C,6DD
05718:  MOVLW  01
0571A:  MOVLB  6
0571C:  MOVWF  xDE
0571E:  MOVLW  0F
05720:  MOVWF  xE0
05722:  MOVLW  92
05724:  MOVWF  xDF
05726:  MOVLB  0
05728:  CALL   0442
0572C:  BTFSC  1B.6
0572E:  BSF    FF2.6
05730:  BTFSC  1B.7
05732:  BSF    FF2.7
05734:  CLRF   1B
05736:  BTFSC  FF2.6
05738:  BSF    1B.6
0573A:  BCF    FF2.6
0573C:  BTFSC  FF2.7
0573E:  BSF    1B.7
05740:  BCF    FF2.7
05742:  MOVFF  1C,6DD
05746:  MOVLW  0F
05748:  MOVLB  6
0574A:  MOVWF  xDF
0574C:  MOVLW  80
0574E:  MOVWF  xDE
05750:  MOVLB  0
05752:  CALL   0484
05756:  BTFSC  1B.6
05758:  BSF    FF2.6
0575A:  BTFSC  1B.7
0575C:  BSF    FF2.7
0575E:  MOVLB  6
05760:  BCF    x62.0
05762:  BTFSC  01.0
05764:  BSF    x62.0
05766:  CLRF   1B
05768:  BTFSC  FF2.6
0576A:  BSF    1B.6
0576C:  BCF    FF2.6
0576E:  BTFSC  FF2.7
05770:  BSF    1B.7
05772:  BCF    FF2.7
05774:  MOVFF  1D,6DD
05778:  MOVLW  01
0577A:  MOVWF  xDE
0577C:  MOVLW  0F
0577E:  MOVWF  xE0
05780:  MOVLW  92
05782:  MOVWF  xDF
05784:  MOVLB  0
05786:  CALL   0442
0578A:  BTFSC  1B.6
0578C:  BSF    FF2.6
0578E:  BTFSC  1B.7
05790:  BSF    FF2.7
05792:  CLRF   1B
05794:  BTFSC  FF2.6
05796:  BSF    1B.6
05798:  BCF    FF2.6
0579A:  BTFSC  FF2.7
0579C:  BSF    1B.7
0579E:  BCF    FF2.7
057A0:  MOVFF  1D,6DD
057A4:  MOVLW  0F
057A6:  MOVLB  6
057A8:  MOVWF  xDF
057AA:  MOVLW  80
057AC:  MOVWF  xDE
057AE:  MOVLB  0
057B0:  CALL   0484
057B4:  BTFSC  1B.6
057B6:  BSF    FF2.6
057B8:  BTFSC  1B.7
057BA:  BSF    FF2.7
057BC:  MOVLB  6
057BE:  BCF    x62.1
057C0:  BTFSC  01.0
057C2:  BSF    x62.1
057C4:  CLRF   1B
057C6:  BTFSC  FF2.6
057C8:  BSF    1B.6
057CA:  BCF    FF2.6
057CC:  BTFSC  FF2.7
057CE:  BSF    1B.7
057D0:  BCF    FF2.7
057D2:  MOVFF  1E,6DD
057D6:  MOVLW  01
057D8:  MOVWF  xDE
057DA:  MOVLW  0F
057DC:  MOVWF  xE0
057DE:  MOVLW  92
057E0:  MOVWF  xDF
057E2:  MOVLB  0
057E4:  CALL   0442
057E8:  BTFSC  1B.6
057EA:  BSF    FF2.6
057EC:  BTFSC  1B.7
057EE:  BSF    FF2.7
057F0:  CLRF   1B
057F2:  BTFSC  FF2.6
057F4:  BSF    1B.6
057F6:  BCF    FF2.6
057F8:  BTFSC  FF2.7
057FA:  BSF    1B.7
057FC:  BCF    FF2.7
057FE:  MOVFF  1E,6DD
05802:  MOVLW  0F
05804:  MOVLB  6
05806:  MOVWF  xDF
05808:  MOVLW  80
0580A:  MOVWF  xDE
0580C:  MOVLB  0
0580E:  CALL   0484
05812:  BTFSC  1B.6
05814:  BSF    FF2.6
05816:  BTFSC  1B.7
05818:  BSF    FF2.7
0581A:  MOVLB  6
0581C:  BCF    x62.2
0581E:  BTFSC  01.0
05820:  BSF    x62.2
05822:  CLRF   1B
05824:  BTFSC  FF2.6
05826:  BSF    1B.6
05828:  BCF    FF2.6
0582A:  BTFSC  FF2.7
0582C:  BSF    1B.7
0582E:  BCF    FF2.7
05830:  MOVFF  1F,6DD
05834:  MOVLW  01
05836:  MOVWF  xDE
05838:  MOVLW  0F
0583A:  MOVWF  xE0
0583C:  MOVLW  92
0583E:  MOVWF  xDF
05840:  MOVLB  0
05842:  CALL   0442
05846:  BTFSC  1B.6
05848:  BSF    FF2.6
0584A:  BTFSC  1B.7
0584C:  BSF    FF2.7
0584E:  CLRF   1B
05850:  BTFSC  FF2.6
05852:  BSF    1B.6
05854:  BCF    FF2.6
05856:  BTFSC  FF2.7
05858:  BSF    1B.7
0585A:  BCF    FF2.7
0585C:  MOVFF  1F,6DD
05860:  MOVLW  0F
05862:  MOVLB  6
05864:  MOVWF  xDF
05866:  MOVLW  80
05868:  MOVWF  xDE
0586A:  MOVLB  0
0586C:  CALL   0484
05870:  BTFSC  1B.6
05872:  BSF    FF2.6
05874:  BTFSC  1B.7
05876:  BSF    FF2.7
05878:  MOVLB  6
0587A:  BCF    x62.3
0587C:  BTFSC  01.0
0587E:  BSF    x62.3
05880:  CLRF   1B
05882:  BTFSC  FF2.6
05884:  BSF    1B.6
05886:  BCF    FF2.6
05888:  BTFSC  FF2.7
0588A:  BSF    1B.7
0588C:  BCF    FF2.7
0588E:  MOVFF  20,6DD
05892:  MOVLW  01
05894:  MOVWF  xDE
05896:  MOVLW  0F
05898:  MOVWF  xE0
0589A:  MOVLW  92
0589C:  MOVWF  xDF
0589E:  MOVLB  0
058A0:  CALL   0442
058A4:  BTFSC  1B.6
058A6:  BSF    FF2.6
058A8:  BTFSC  1B.7
058AA:  BSF    FF2.7
058AC:  CLRF   1B
058AE:  BTFSC  FF2.6
058B0:  BSF    1B.6
058B2:  BCF    FF2.6
058B4:  BTFSC  FF2.7
058B6:  BSF    1B.7
058B8:  BCF    FF2.7
058BA:  MOVFF  20,6DD
058BE:  MOVLW  0F
058C0:  MOVLB  6
058C2:  MOVWF  xDF
058C4:  MOVLW  80
058C6:  MOVWF  xDE
058C8:  MOVLB  0
058CA:  CALL   0484
058CE:  BTFSC  1B.6
058D0:  BSF    FF2.6
058D2:  BTFSC  1B.7
058D4:  BSF    FF2.7
058D6:  MOVLB  6
058D8:  BCF    x62.4
058DA:  BTFSC  01.0
058DC:  BSF    x62.4
058DE:  CLRF   1B
058E0:  BTFSC  FF2.6
058E2:  BSF    1B.6
058E4:  BCF    FF2.6
058E6:  BTFSC  FF2.7
058E8:  BSF    1B.7
058EA:  BCF    FF2.7
058EC:  MOVFF  21,6DD
058F0:  MOVLW  01
058F2:  MOVWF  xDE
058F4:  MOVLW  0F
058F6:  MOVWF  xE0
058F8:  MOVLW  92
058FA:  MOVWF  xDF
058FC:  MOVLB  0
058FE:  CALL   0442
05902:  BTFSC  1B.6
05904:  BSF    FF2.6
05906:  BTFSC  1B.7
05908:  BSF    FF2.7
0590A:  CLRF   1B
0590C:  BTFSC  FF2.6
0590E:  BSF    1B.6
05910:  BCF    FF2.6
05912:  BTFSC  FF2.7
05914:  BSF    1B.7
05916:  BCF    FF2.7
05918:  MOVFF  21,6DD
0591C:  MOVLW  0F
0591E:  MOVLB  6
05920:  MOVWF  xDF
05922:  MOVLW  80
05924:  MOVWF  xDE
05926:  MOVLB  0
05928:  CALL   0484
0592C:  BTFSC  1B.6
0592E:  BSF    FF2.6
05930:  BTFSC  1B.7
05932:  BSF    FF2.7
05934:  MOVLB  6
05936:  BCF    x62.5
05938:  BTFSC  01.0
0593A:  BSF    x62.5
0593C:  CLRF   1B
0593E:  BTFSC  FF2.6
05940:  BSF    1B.6
05942:  BCF    FF2.6
05944:  BTFSC  FF2.7
05946:  BSF    1B.7
05948:  BCF    FF2.7
0594A:  MOVFF  22,6DD
0594E:  MOVLW  01
05950:  MOVWF  xDE
05952:  MOVLW  0F
05954:  MOVWF  xE0
05956:  MOVLW  92
05958:  MOVWF  xDF
0595A:  MOVLB  0
0595C:  CALL   0442
05960:  BTFSC  1B.6
05962:  BSF    FF2.6
05964:  BTFSC  1B.7
05966:  BSF    FF2.7
05968:  CLRF   1B
0596A:  BTFSC  FF2.6
0596C:  BSF    1B.6
0596E:  BCF    FF2.6
05970:  BTFSC  FF2.7
05972:  BSF    1B.7
05974:  BCF    FF2.7
05976:  MOVFF  22,6DD
0597A:  MOVLW  0F
0597C:  MOVLB  6
0597E:  MOVWF  xDF
05980:  MOVLW  80
05982:  MOVWF  xDE
05984:  MOVLB  0
05986:  CALL   0484
0598A:  BTFSC  1B.6
0598C:  BSF    FF2.6
0598E:  BTFSC  1B.7
05990:  BSF    FF2.7
05992:  MOVLB  6
05994:  BCF    x62.6
05996:  BTFSC  01.0
05998:  BSF    x62.6
0599A:  CLRF   1B
0599C:  BTFSC  FF2.6
0599E:  BSF    1B.6
059A0:  BCF    FF2.6
059A2:  BTFSC  FF2.7
059A4:  BSF    1B.7
059A6:  BCF    FF2.7
059A8:  MOVFF  23,6DD
059AC:  MOVLW  01
059AE:  MOVWF  xDE
059B0:  MOVLW  0F
059B2:  MOVWF  xE0
059B4:  MOVLW  92
059B6:  MOVWF  xDF
059B8:  MOVLB  0
059BA:  CALL   0442
059BE:  BTFSC  1B.6
059C0:  BSF    FF2.6
059C2:  BTFSC  1B.7
059C4:  BSF    FF2.7
059C6:  CLRF   1B
059C8:  BTFSC  FF2.6
059CA:  BSF    1B.6
059CC:  BCF    FF2.6
059CE:  BTFSC  FF2.7
059D0:  BSF    1B.7
059D2:  BCF    FF2.7
059D4:  MOVFF  23,6DD
059D8:  MOVLW  0F
059DA:  MOVLB  6
059DC:  MOVWF  xDF
059DE:  MOVLW  80
059E0:  MOVWF  xDE
059E2:  MOVLB  0
059E4:  CALL   0484
059E8:  BTFSC  1B.6
059EA:  BSF    FF2.6
059EC:  BTFSC  1B.7
059EE:  BSF    FF2.7
059F0:  MOVLB  6
059F2:  BCF    x62.7
059F4:  BTFSC  01.0
059F6:  BSF    x62.7
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
059F8:  MOVLW  00
059FA:  BTFSC  x62.0
059FC:  MOVLW  01
059FE:  MOVWF  x63
05A00:  MOVLW  00
05A02:  BTFSC  x62.1
05A04:  MOVLW  01
05A06:  MOVWF  x64
05A08:  MOVLW  00
05A0A:  BTFSC  x62.2
05A0C:  MOVLW  01
05A0E:  MOVWF  x65
05A10:  MOVLW  00
05A12:  BTFSC  x62.3
05A14:  MOVLW  01
05A16:  MOVWF  x66
05A18:  MOVLW  00
05A1A:  BTFSC  x62.4
05A1C:  MOVLW  01
05A1E:  MOVWF  x67
05A20:  MOVLW  00
05A22:  BTFSC  x62.5
05A24:  MOVLW  01
05A26:  MOVWF  x68
05A28:  MOVLW  00
05A2A:  BTFSC  x62.6
05A2C:  MOVLW  01
05A2E:  MOVWF  x69
05A30:  MOVLW  00
05A32:  BTFSC  x62.7
05A34:  MOVLW  01
05A36:  MOVWF  x6A
05A38:  MOVFF  663,674
05A3C:  MOVLW  1F
05A3E:  MOVWF  x75
05A40:  MOVLB  0
05A42:  CALL   20AA
05A46:  CLRF   1B
05A48:  BTFSC  FF2.6
05A4A:  BSF    1B.6
05A4C:  BCF    FF2.6
05A4E:  BTFSC  FF2.7
05A50:  BSF    1B.7
05A52:  BCF    FF2.7
05A54:  MOVLW  20
05A56:  MOVLB  6
05A58:  MOVWF  xDC
05A5A:  MOVLB  0
05A5C:  CALL   0EDA
05A60:  BTFSC  1B.6
05A62:  BSF    FF2.6
05A64:  BTFSC  1B.7
05A66:  BSF    FF2.7
05A68:  MOVFF  664,674
05A6C:  MOVLW  1F
05A6E:  MOVLB  6
05A70:  MOVWF  x75
05A72:  MOVLB  0
05A74:  CALL   20AA
05A78:  CLRF   1B
05A7A:  BTFSC  FF2.6
05A7C:  BSF    1B.6
05A7E:  BCF    FF2.6
05A80:  BTFSC  FF2.7
05A82:  BSF    1B.7
05A84:  BCF    FF2.7
05A86:  MOVLW  20
05A88:  MOVLB  6
05A8A:  MOVWF  xDC
05A8C:  MOVLB  0
05A8E:  CALL   0EDA
05A92:  BTFSC  1B.6
05A94:  BSF    FF2.6
05A96:  BTFSC  1B.7
05A98:  BSF    FF2.7
05A9A:  MOVFF  665,674
05A9E:  MOVLW  1F
05AA0:  MOVLB  6
05AA2:  MOVWF  x75
05AA4:  MOVLB  0
05AA6:  CALL   20AA
05AAA:  CLRF   1B
05AAC:  BTFSC  FF2.6
05AAE:  BSF    1B.6
05AB0:  BCF    FF2.6
05AB2:  BTFSC  FF2.7
05AB4:  BSF    1B.7
05AB6:  BCF    FF2.7
05AB8:  MOVLW  20
05ABA:  MOVLB  6
05ABC:  MOVWF  xDC
05ABE:  MOVLB  0
05AC0:  CALL   0EDA
05AC4:  BTFSC  1B.6
05AC6:  BSF    FF2.6
05AC8:  BTFSC  1B.7
05ACA:  BSF    FF2.7
05ACC:  MOVFF  666,674
05AD0:  MOVLW  1F
05AD2:  MOVLB  6
05AD4:  MOVWF  x75
05AD6:  MOVLB  0
05AD8:  CALL   20AA
05ADC:  CLRF   1B
05ADE:  BTFSC  FF2.6
05AE0:  BSF    1B.6
05AE2:  BCF    FF2.6
05AE4:  BTFSC  FF2.7
05AE6:  BSF    1B.7
05AE8:  BCF    FF2.7
05AEA:  MOVLW  20
05AEC:  MOVLB  6
05AEE:  MOVWF  xDC
05AF0:  MOVLB  0
05AF2:  CALL   0EDA
05AF6:  BTFSC  1B.6
05AF8:  BSF    FF2.6
05AFA:  BTFSC  1B.7
05AFC:  BSF    FF2.7
05AFE:  MOVFF  667,674
05B02:  MOVLW  1F
05B04:  MOVLB  6
05B06:  MOVWF  x75
05B08:  MOVLB  0
05B0A:  CALL   20AA
05B0E:  CLRF   1B
05B10:  BTFSC  FF2.6
05B12:  BSF    1B.6
05B14:  BCF    FF2.6
05B16:  BTFSC  FF2.7
05B18:  BSF    1B.7
05B1A:  BCF    FF2.7
05B1C:  MOVLW  20
05B1E:  MOVLB  6
05B20:  MOVWF  xDC
05B22:  MOVLB  0
05B24:  CALL   0EDA
05B28:  BTFSC  1B.6
05B2A:  BSF    FF2.6
05B2C:  BTFSC  1B.7
05B2E:  BSF    FF2.7
05B30:  MOVFF  668,674
05B34:  MOVLW  1F
05B36:  MOVLB  6
05B38:  MOVWF  x75
05B3A:  MOVLB  0
05B3C:  CALL   20AA
05B40:  CLRF   1B
05B42:  BTFSC  FF2.6
05B44:  BSF    1B.6
05B46:  BCF    FF2.6
05B48:  BTFSC  FF2.7
05B4A:  BSF    1B.7
05B4C:  BCF    FF2.7
05B4E:  MOVLW  20
05B50:  MOVLB  6
05B52:  MOVWF  xDC
05B54:  MOVLB  0
05B56:  CALL   0EDA
05B5A:  BTFSC  1B.6
05B5C:  BSF    FF2.6
05B5E:  BTFSC  1B.7
05B60:  BSF    FF2.7
05B62:  MOVFF  669,674
05B66:  MOVLW  1F
05B68:  MOVLB  6
05B6A:  MOVWF  x75
05B6C:  MOVLB  0
05B6E:  CALL   20AA
05B72:  CLRF   1B
05B74:  BTFSC  FF2.6
05B76:  BSF    1B.6
05B78:  BCF    FF2.6
05B7A:  BTFSC  FF2.7
05B7C:  BSF    1B.7
05B7E:  BCF    FF2.7
05B80:  MOVLW  20
05B82:  MOVLB  6
05B84:  MOVWF  xDC
05B86:  MOVLB  0
05B88:  CALL   0EDA
05B8C:  BTFSC  1B.6
05B8E:  BSF    FF2.6
05B90:  BTFSC  1B.7
05B92:  BSF    FF2.7
05B94:  MOVFF  66A,674
05B98:  MOVLW  1F
05B9A:  MOVLB  6
05B9C:  MOVWF  x75
05B9E:  MOVLB  0
05BA0:  CALL   20AA
05BA4:  CLRF   1B
05BA6:  BTFSC  FF2.6
05BA8:  BSF    1B.6
05BAA:  BCF    FF2.6
05BAC:  BTFSC  FF2.7
05BAE:  BSF    1B.7
05BB0:  BCF    FF2.7
05BB2:  MOVLW  0D
05BB4:  MOVLB  6
05BB6:  MOVWF  xDC
05BB8:  MOVLB  0
05BBA:  CALL   0EDA
05BBE:  BTFSC  1B.6
05BC0:  BSF    FF2.6
05BC2:  BTFSC  1B.7
05BC4:  BSF    FF2.7
....................       delay_us(10); 
05BC6:  CLRWDT
05BC8:  MOVLW  20
05BCA:  MOVWF  00
05BCC:  DECFSZ 00,F
05BCE:  BRA    5BCC
05BD0:  BRA    5BD2
....................    } 
05BD2:  BRA    5702
.................... } 
05BD4:  GOTO   5DCC (RETURN)
.................... void testOutputs() 
.................... { 
05BD8:  MOVLB  6
05BDA:  BSF    x62.0
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
05BDC:  MOVLW  EC
05BDE:  MOVWF  FF6
05BE0:  MOVLW  02
05BE2:  MOVWF  FF7
05BE4:  MOVLW  00
05BE6:  MOVWF  FF8
05BE8:  CLRF   1B
05BEA:  BTFSC  FF2.6
05BEC:  BSF    1B.6
05BEE:  BCF    FF2.6
05BF0:  BTFSC  FF2.7
05BF2:  BSF    1B.7
05BF4:  BCF    FF2.7
05BF6:  MOVLB  0
05BF8:  CALL   0F2E
05BFC:  BTFSC  1B.6
05BFE:  BSF    FF2.6
05C00:  BTFSC  1B.7
05C02:  BSF    FF2.7
....................    while(loop) 
....................    { 
05C04:  MOVLB  6
05C06:  BTFSS  x62.0
05C08:  BRA    5D16
....................    while(!kbhit()){} 
05C0A:  BTFSS  F81.4
05C0C:  BRA    5C10
05C0E:  BRA    5C0A
....................    char c=getc(); 
05C10:  MOVLB  0
05C12:  RCALL  5656
05C14:  MOVFF  01,663
....................    switch(c) 
....................    { 
05C18:  MOVLB  6
05C1A:  MOVF   x63,W
05C1C:  XORLW  30
05C1E:  MOVLB  0
05C20:  BZ    5C64
05C22:  XORLW  01
05C24:  BZ    5C6E
05C26:  XORLW  03
05C28:  BZ    5C78
05C2A:  XORLW  01
05C2C:  BZ    5C82
05C2E:  XORLW  07
05C30:  BZ    5C8C
05C32:  XORLW  01
05C34:  BZ    5C96
05C36:  XORLW  03
05C38:  BZ    5CA0
05C3A:  XORLW  01
05C3C:  BZ    5CAA
05C3E:  XORLW  0F
05C40:  BZ    5CB4
05C42:  XORLW  01
05C44:  BZ    5CBE
05C46:  XORLW  58
05C48:  BZ    5CC8
05C4A:  XORLW  03
05C4C:  BZ    5CD2
05C4E:  XORLW  01
05C50:  BZ    5CDC
05C52:  XORLW  07
05C54:  BZ    5CE6
05C56:  XORLW  01
05C58:  BZ    5CF0
05C5A:  XORLW  03
05C5C:  BZ    5CFA
05C5E:  XORLW  1E
05C60:  BZ    5D04
05C62:  BRA    5D12
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
05C64:  MOVLW  FF
05C66:  MOVWF  F82
....................          portd=(MAKE8(light_pins[0],0)); 
05C68:  MOVLW  EF
05C6A:  MOVWF  F83
....................       break; 
05C6C:  BRA    5D12
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
05C6E:  MOVLW  FF
05C70:  MOVWF  F82
....................          portd=(MAKE8(light_pins[1],0)); 
05C72:  MOVLW  DF
05C74:  MOVWF  F83
....................       break; 
05C76:  BRA    5D12
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
05C78:  MOVLW  FF
05C7A:  MOVWF  F82
....................          portd=(MAKE8(light_pins[2],0)); 
05C7C:  MOVLW  BF
05C7E:  MOVWF  F83
....................       break; 
05C80:  BRA    5D12
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
05C82:  MOVLW  FF
05C84:  MOVWF  F82
....................          portd=(MAKE8(light_pins[3],0)); 
05C86:  MOVLW  7F
05C88:  MOVWF  F83
....................       break; 
05C8A:  BRA    5D12
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
05C8C:  MOVLW  FF
05C8E:  MOVWF  F82
....................          portd=(MAKE8(light_pins[4],0)); 
05C90:  MOVLW  F7
05C92:  MOVWF  F83
....................       break; 
05C94:  BRA    5D12
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
05C96:  MOVLW  FF
05C98:  MOVWF  F82
....................          portd=(MAKE8(light_pins[5],0)); 
05C9A:  MOVLW  FB
05C9C:  MOVWF  F83
....................       break; 
05C9E:  BRA    5D12
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
05CA0:  MOVLW  FF
05CA2:  MOVWF  F82
....................          portd=(MAKE8(light_pins[6],0)); 
05CA4:  MOVLW  FE
05CA6:  MOVWF  F83
....................       break; 
05CA8:  BRA    5D12
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
05CAA:  MOVLW  FF
05CAC:  MOVWF  F82
....................          portd=(MAKE8(light_pins[7],0)); 
05CAE:  MOVLW  FD
05CB0:  MOVWF  F83
....................       break; 
05CB2:  BRA    5D12
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
05CB4:  MOVLW  7F
05CB6:  MOVWF  F82
....................          portd=(MAKE8(light_pins[8],0)); 
05CB8:  MOVLW  FF
05CBA:  MOVWF  F83
....................       break; 
05CBC:  BRA    5D12
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
05CBE:  MOVLW  BF
05CC0:  MOVWF  F82
....................          portd=(MAKE8(light_pins[9],0)); 
05CC2:  MOVLW  FF
05CC4:  MOVWF  F83
....................       break; 
05CC6:  BRA    5D12
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
05CC8:  MOVLW  DF
05CCA:  MOVWF  F82
....................          portd=(MAKE8(light_pins[10],0)); 
05CCC:  MOVLW  FF
05CCE:  MOVWF  F83
....................       break; 
05CD0:  BRA    5D12
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
05CD2:  MOVLW  EF
05CD4:  MOVWF  F82
....................          portd=(MAKE8(light_pins[11],0)); 
05CD6:  MOVLW  FF
05CD8:  MOVWF  F83
....................       break; 
05CDA:  BRA    5D12
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
05CDC:  MOVLW  F7
05CDE:  MOVWF  F82
....................          portd=(MAKE8(light_pins[12],0)); 
05CE0:  MOVLW  FF
05CE2:  MOVWF  F83
....................       break; 
05CE4:  BRA    5D12
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
05CE6:  MOVLW  FB
05CE8:  MOVWF  F82
....................          portd=(MAKE8(light_pins[13],0)); 
05CEA:  MOVLW  FF
05CEC:  MOVWF  F83
....................       break; 
05CEE:  BRA    5D12
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
05CF0:  MOVLW  FD
05CF2:  MOVWF  F82
....................          portd=(MAKE8(light_pins[14],0)); 
05CF4:  MOVLW  FF
05CF6:  MOVWF  F83
....................       break; 
05CF8:  BRA    5D12
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
05CFA:  MOVLW  FE
05CFC:  MOVWF  F82
....................          portd=(MAKE8(light_pins[15],0)); 
05CFE:  MOVLW  FF
05D00:  MOVWF  F83
....................       break; 
05D02:  BRA    5D12
....................       case 'x': 
....................          loop=false; 
05D04:  MOVLB  6
05D06:  BCF    x62.0
....................          portc=0xFF; 
05D08:  MOVLW  FF
05D0A:  MOVWF  F82
....................          portd=0xFF; 
05D0C:  MOVWF  F83
....................       break; 
05D0E:  MOVLB  0
05D10:  BRA    5D12
....................    } 
....................    } 
05D12:  BRA    5C04
05D14:  MOVLB  6
.................... } 
05D16:  MOVLB  0
05D18:  GOTO   5DCC (RETURN)
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
05D1C:  MOVLW  0C
05D1E:  MOVWF  FF6
05D20:  MOVLW  03
05D22:  MOVWF  FF7
05D24:  MOVLW  00
05D26:  MOVWF  FF8
05D28:  CLRF   1B
05D2A:  BTFSC  FF2.6
05D2C:  BSF    1B.6
05D2E:  BCF    FF2.6
05D30:  BTFSC  FF2.7
05D32:  BSF    1B.7
05D34:  BCF    FF2.7
05D36:  CALL   0F2E
05D3A:  BTFSC  1B.6
05D3C:  BSF    FF2.6
05D3E:  BTFSC  1B.7
05D40:  BSF    FF2.7
....................       printf("1-Test inputs\n\r"); 
05D42:  MOVLW  20
05D44:  MOVWF  FF6
05D46:  MOVLW  03
05D48:  MOVWF  FF7
05D4A:  MOVLW  00
05D4C:  MOVWF  FF8
05D4E:  CLRF   1B
05D50:  BTFSC  FF2.6
05D52:  BSF    1B.6
05D54:  BCF    FF2.6
05D56:  BTFSC  FF2.7
05D58:  BSF    1B.7
05D5A:  BCF    FF2.7
05D5C:  CALL   0F2E
05D60:  BTFSC  1B.6
05D62:  BSF    FF2.6
05D64:  BTFSC  1B.7
05D66:  BSF    FF2.7
....................       printf("2-Test outputs\n\r"); 
05D68:  MOVLW  30
05D6A:  MOVWF  FF6
05D6C:  MOVLW  03
05D6E:  MOVWF  FF7
05D70:  MOVLW  00
05D72:  MOVWF  FF8
05D74:  CLRF   1B
05D76:  BTFSC  FF2.6
05D78:  BSF    1B.6
05D7A:  BCF    FF2.6
05D7C:  BTFSC  FF2.7
05D7E:  BSF    1B.7
05D80:  BCF    FF2.7
05D82:  CALL   0F2E
05D86:  BTFSC  1B.6
05D88:  BSF    FF2.6
05D8A:  BTFSC  1B.7
05D8C:  BSF    FF2.7
....................       while(!kbhit()){} 
05D8E:  BTFSS  F81.4
05D90:  BRA    5D94
05D92:  BRA    5D8E
....................       char c=getc(); 
05D94:  RCALL  5656
05D96:  MOVFF  01,661
....................       if(c=='1') 
05D9A:  MOVLB  6
05D9C:  MOVF   x61,W
05D9E:  SUBLW  31
05DA0:  BNZ   5DAC
....................          testInputs(); 
05DA2:  MOVLB  0
05DA4:  BRA    56B6
....................       else if(c=='2') 
05DA6:  MOVLB  0
05DA8:  BRA    5DCC
05DAA:  MOVLB  6
05DAC:  MOVF   x61,W
05DAE:  SUBLW  32
05DB0:  BNZ   5DBC
....................          testOutputs(); 
05DB2:  MOVLB  0
05DB4:  BRA    5BD8
....................       else if(c=='x') 
05DB6:  MOVLB  0
05DB8:  BRA    5DCC
05DBA:  MOVLB  6
05DBC:  MOVF   x61,W
05DBE:  SUBLW  78
05DC0:  BNZ   5DCA
....................       { 
....................          setup_wdt(WDT_ON); 
05DC2:  BSF    FD1.0
....................          enable_interrupts (GLOBAL) ; 
05DC4:  MOVLW  C0
05DC6:  IORWF  FF2,F
....................          return; 
05DC8:  BRA    5DD0
05DCA:  MOVLB  0
....................       } 
....................    } 
05DCC:  BRA    5D1C
05DCE:  MOVLB  6
.................... } 
05DD0:  MOVLB  0
05DD2:  GOTO   92BA (RETURN)
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
....................  
....................  
.................... _write_eeprom(unsigned int16 adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%Lu value=%d\n\r",adress,value); 
*
021EA:  MOVLW  42
021EC:  MOVWF  FF6
021EE:  MOVLW  03
021F0:  MOVWF  FF7
021F2:  MOVLW  00
021F4:  MOVWF  FF8
021F6:  MOVLW  07
021F8:  MOVLB  6
021FA:  MOVWF  x74
021FC:  MOVLB  0
021FE:  RCALL  1F60
02200:  MOVLW  10
02202:  MOVWF  FE9
02204:  MOVFF  672,675
02208:  MOVFF  671,674
0220C:  BRA    1FA8
0220E:  MOVLW  4C
02210:  MOVWF  FF6
02212:  MOVLW  03
02214:  MOVWF  FF7
02216:  MOVLW  00
02218:  MOVWF  FF8
0221A:  MOVLW  07
0221C:  MOVLB  6
0221E:  MOVWF  x74
02220:  MOVLB  0
02222:  RCALL  1F60
02224:  MOVFF  673,674
02228:  MOVLW  1F
0222A:  MOVLB  6
0222C:  MOVWF  x75
0222E:  MOVLB  0
02230:  RCALL  20AA
02232:  CLRF   1B
02234:  BTFSC  FF2.6
02236:  BSF    1B.6
02238:  BCF    FF2.6
0223A:  BTFSC  FF2.7
0223C:  BSF    1B.7
0223E:  BCF    FF2.7
02240:  MOVLW  0A
02242:  MOVLB  6
02244:  MOVWF  xDC
02246:  MOVLB  0
02248:  CALL   0EDA
0224C:  BTFSC  1B.6
0224E:  BSF    FF2.6
02250:  BTFSC  1B.7
02252:  BSF    FF2.7
02254:  CLRF   1B
02256:  BTFSC  FF2.6
02258:  BSF    1B.6
0225A:  BCF    FF2.6
0225C:  BTFSC  FF2.7
0225E:  BSF    1B.7
02260:  BCF    FF2.7
02262:  MOVLW  0D
02264:  MOVLB  6
02266:  MOVWF  xDC
02268:  MOVLB  0
0226A:  CALL   0EDA
0226E:  BTFSC  1B.6
02270:  BSF    FF2.6
02272:  BTFSC  1B.7
02274:  BSF    FF2.7
.................... #endif 
....................    write_eeprom(adress,value); 
02276:  MOVFF  672,FAA
0227A:  MOVFF  671,FA9
0227E:  MOVFF  673,FA8
02282:  BCF    FA6.6
02284:  BCF    FA6.7
02286:  BSF    FA6.2
02288:  MOVF   FF2,W
0228A:  MOVWF  00
0228C:  BCF    FF2.6
0228E:  BCF    FF2.7
02290:  MOVLB  F
02292:  MOVLW  55
02294:  MOVWF  FA7
02296:  MOVLW  AA
02298:  MOVWF  FA7
0229A:  BSF    FA6.1
0229C:  BTFSC  FA6.1
0229E:  BRA    229C
022A0:  BCF    FA6.2
022A2:  MOVF   00,W
022A4:  IORWF  FF2,F
.................... } 
022A6:  MOVLB  0
022A8:  RETLW  00
....................  
.................... unsigned int16 writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
02768:  MOVLB  6
0276A:  CLRF   xC1
0276C:  MOVF   xC0,W
0276E:  SUBWF  xC1,W
02770:  BC    27B6
....................    { 
....................       *array=read_eeprom(memAdress+x); 
02772:  MOVFF  6BD,03
02776:  MOVF   xBC,W
02778:  MOVWF  FE9
0277A:  MOVFF  03,FEA
0277E:  MOVF   xC1,W
02780:  ADDWF  xBE,W
02782:  MOVWF  xC4
02784:  MOVLW  00
02786:  ADDWFC xBF,W
02788:  MOVWF  xC5
0278A:  MOVFF  FF2,6C6
0278E:  BCF    FF2.6
02790:  BCF    FF2.7
02792:  MOVFF  6C5,FAA
02796:  MOVFF  6C4,FA9
0279A:  BCF    FA6.6
0279C:  BCF    FA6.7
0279E:  BSF    FA6.0
027A0:  MOVF   FA8,W
027A2:  BTFSC  xC6.6
027A4:  BSF    FF2.6
027A6:  BTFSC  xC6.7
027A8:  BSF    FF2.7
027AA:  MOVWF  FEF
....................       ++array; 
027AC:  INCF   xBC,F
027AE:  BTFSC  FD8.2
027B0:  INCF   xBD,F
....................    } 
027B2:  INCF   xC1,F
027B4:  BRA    276C
.................... } 
027B6:  MOVLB  0
027B8:  RETLW  00
.................... void ArrayToMem(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
0238E:  MOVLB  6
02390:  CLRF   x6D
02392:  MOVF   x6C,W
02394:  SUBWF  x6D,W
02396:  BC    23CE
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
02398:  MOVF   x6D,W
0239A:  ADDWF  x6A,W
0239C:  MOVWF  x6E
0239E:  MOVLW  00
023A0:  ADDWFC x6B,W
023A2:  MOVWF  x6F
023A4:  MOVFF  669,03
023A8:  MOVFF  668,FE9
023AC:  MOVFF  669,FEA
023B0:  MOVFF  FEF,670
023B4:  MOVWF  x72
023B6:  MOVFF  66E,671
023BA:  MOVFF  670,673
023BE:  MOVLB  0
023C0:  RCALL  21EA
....................       ++array; 
023C2:  MOVLB  6
023C4:  INCF   x68,F
023C6:  BTFSC  FD8.2
023C8:  INCF   x69,F
....................    } 
023CA:  INCF   x6D,F
023CC:  BRA    2392
.................... } 
023CE:  MOVLB  0
023D0:  RETLW  00
.................... void readDevices() 
.................... { 
*
02EAC:  MOVLB  6
02EAE:  CLRF   x62
02EB0:  CLRF   x61
02EB2:  CLRF   x63
02EB4:  CLRF   x64
....................    unsigned int16 mempointer=MEM_OFFSET; 
....................    unsigned int inputNumber=0; 
....................    unsigned int outputNumber=0; 
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02EB6:  MOVFF  FF2,6BC
02EBA:  BCF    FF2.6
02EBC:  BCF    FF2.7
02EBE:  MOVFF  662,FAA
02EC2:  MOVFF  661,FA9
02EC6:  BCF    FA6.6
02EC8:  BCF    FA6.7
02ECA:  BSF    FA6.0
02ECC:  MOVF   FA8,W
02ECE:  BTFSC  xBC.6
02ED0:  BSF    FF2.6
02ED2:  BTFSC  xBC.7
02ED4:  BSF    FF2.7
02ED6:  SUBLW  FF
02ED8:  BTFSC  FD8.2
02EDA:  GOTO   388C
....................       switch(read_eeprom(mempointer)) 
....................       { 
02EDE:  MOVFF  FF2,6BC
02EE2:  BCF    FF2.6
02EE4:  BCF    FF2.7
02EE6:  MOVFF  662,FAA
02EEA:  MOVFF  661,FA9
02EEE:  BCF    FA6.6
02EF0:  BCF    FA6.7
02EF2:  BSF    FA6.0
02EF4:  MOVF   FA8,W
02EF6:  BTFSC  xBC.6
02EF8:  BSF    FF2.6
02EFA:  BTFSC  xBC.7
02EFC:  BSF    FF2.7
02EFE:  XORLW  01
02F00:  MOVLB  0
02F02:  BZ    2F2E
02F04:  XORLW  01
02F06:  BTFSC  FD8.2
02F08:  BRA    3036
02F0A:  XORLW  02
02F0C:  BTFSC  FD8.2
02F0E:  BRA    3168
02F10:  XORLW  01
02F12:  BTFSC  FD8.2
02F14:  BRA    32A6
02F16:  XORLW  66
02F18:  BTFSC  FD8.2
02F1A:  BRA    3466
02F1C:  XORLW  03
02F1E:  BTFSC  FD8.2
02F20:  BRA    359A
02F22:  XORLW  02
02F24:  BTFSC  FD8.2
02F26:  GOTO   377E
02F2A:  GOTO   3886
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
02F2E:  MOVLW  58
02F30:  MOVWF  FF6
02F32:  MOVLW  03
02F34:  MOVWF  FF7
02F36:  MOVLW  00
02F38:  MOVWF  FF8
02F3A:  CLRF   1B
02F3C:  BTFSC  FF2.6
02F3E:  BSF    1B.6
02F40:  BCF    FF2.6
02F42:  BTFSC  FF2.7
02F44:  BSF    1B.7
02F46:  BCF    FF2.7
02F48:  CALL   0F2E
02F4C:  BTFSC  1B.6
02F4E:  BSF    FF2.6
02F50:  BTFSC  1B.7
02F52:  BSF    FF2.7
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02F54:  MOVLB  6
02F56:  INCF   x61,F
02F58:  BTFSC  FD8.2
02F5A:  INCF   x62,F
02F5C:  MOVFF  FF2,6BC
02F60:  BCF    FF2.6
02F62:  BCF    FF2.7
02F64:  MOVFF  662,FAA
02F68:  MOVFF  661,FA9
02F6C:  BCF    FA6.6
02F6E:  BCF    FA6.7
02F70:  BSF    FA6.0
02F72:  MOVF   FA8,W
02F74:  BTFSC  xBC.6
02F76:  BSF    FF2.6
02F78:  BTFSC  xBC.7
02F7A:  BSF    FF2.7
02F7C:  MOVWF  x65
02F7E:  INCF   x61,F
02F80:  BTFSC  FD8.2
02F82:  INCF   x62,F
02F84:  MOVFF  FF2,6BD
02F88:  BCF    FF2.6
02F8A:  BCF    FF2.7
02F8C:  MOVFF  662,FAA
02F90:  MOVFF  661,FA9
02F94:  BCF    FA6.6
02F96:  BCF    FA6.7
02F98:  BSF    FA6.0
02F9A:  MOVF   FA8,W
02F9C:  BTFSC  xBD.6
02F9E:  BSF    FF2.6
02FA0:  BTFSC  xBD.7
02FA2:  BSF    FF2.7
02FA4:  MOVWF  x66
02FA6:  INCF   x61,F
02FA8:  BTFSC  FD8.2
02FAA:  INCF   x62,F
02FAC:  MOVFF  FF2,6BE
02FB0:  BCF    FF2.6
02FB2:  BCF    FF2.7
02FB4:  MOVFF  662,FAA
02FB8:  MOVFF  661,FA9
02FBC:  BCF    FA6.6
02FBE:  BCF    FA6.7
02FC0:  BSF    FA6.0
02FC2:  MOVF   FA8,W
02FC4:  BTFSC  xBE.6
02FC6:  BSF    FF2.6
02FC8:  BTFSC  xBE.7
02FCA:  BSF    FF2.7
02FCC:  MOVWF  x67
02FCE:  CLRF   1B
02FD0:  BTFSC  FF2.6
02FD2:  BSF    1B.6
02FD4:  BCF    FF2.6
02FD6:  BTFSC  FF2.7
02FD8:  BSF    1B.7
02FDA:  BCF    FF2.7
....................             //printf("on/off %d %d %d",on_adr,off_adr,real_button); 
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02FDC:  CLRF   xDB
02FDE:  MOVFF  663,6DA
02FE2:  CLRF   xDD
02FE4:  MOVLW  21
02FE6:  MOVWF  xDC
02FE8:  MOVLB  0
02FEA:  CALL   0420
02FEE:  BTFSC  1B.6
02FF0:  BSF    FF2.6
02FF2:  BTFSC  1B.7
02FF4:  BSF    FF2.7
02FF6:  MOVFF  02,03
02FFA:  MOVF   01,W
02FFC:  ADDLW  40
02FFE:  MOVWF  01
03000:  MOVLW  01
03002:  ADDWFC 03,F
03004:  MOVFF  01,6BC
03008:  MOVFF  03,6BD
0300C:  MOVFF  665,6BE
03010:  MOVFF  666,6BF
03014:  MOVFF  03,6C1
03018:  MOVFF  01,6C0
0301C:  MOVFF  667,6C2
03020:  MOVLB  0
03022:  GOTO   24E8
....................             ++inputNumber; 
03026:  MOVLB  6
03028:  INCF   x63,F
....................             ++mempointer; 
0302A:  INCF   x61,F
0302C:  BTFSC  FD8.2
0302E:  INCF   x62,F
....................          break; 
03030:  MOVLB  0
03032:  GOTO   3886
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
03036:  MOVLW  70
03038:  MOVWF  FF6
0303A:  MOVLW  03
0303C:  MOVWF  FF7
0303E:  MOVLW  00
03040:  MOVWF  FF8
03042:  CLRF   1B
03044:  BTFSC  FF2.6
03046:  BSF    1B.6
03048:  BCF    FF2.6
0304A:  BTFSC  FF2.7
0304C:  BSF    1B.7
0304E:  BCF    FF2.7
03050:  CALL   0F2E
03054:  BTFSC  1B.6
03056:  BSF    FF2.6
03058:  BTFSC  1B.7
0305A:  BSF    FF2.7
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
0305C:  MOVLB  6
0305E:  INCF   x61,F
03060:  BTFSC  FD8.2
03062:  INCF   x62,F
03064:  MOVFF  FF2,6BC
03068:  BCF    FF2.6
0306A:  BCF    FF2.7
0306C:  MOVFF  662,FAA
03070:  MOVFF  661,FA9
03074:  BCF    FA6.6
03076:  BCF    FA6.7
03078:  BSF    FA6.0
0307A:  MOVF   FA8,W
0307C:  BTFSC  xBC.6
0307E:  BSF    FF2.6
03080:  BTFSC  xBC.7
03082:  BSF    FF2.7
03084:  MOVWF  x68
....................             on_adr=read_eeprom(++mempointer); 
03086:  INCF   x61,F
03088:  BTFSC  FD8.2
0308A:  INCF   x62,F
0308C:  MOVFF  FF2,6BC
03090:  BCF    FF2.6
03092:  BCF    FF2.7
03094:  MOVFF  662,FAA
03098:  MOVFF  661,FA9
0309C:  BCF    FA6.6
0309E:  BCF    FA6.7
030A0:  BSF    FA6.0
030A2:  MOVF   FA8,W
030A4:  BTFSC  xBC.6
030A6:  BSF    FF2.6
030A8:  BTFSC  xBC.7
030AA:  BSF    FF2.7
030AC:  MOVWF  x65
....................             off_adr=read_eeprom(++mempointer); 
030AE:  INCF   x61,F
030B0:  BTFSC  FD8.2
030B2:  INCF   x62,F
030B4:  MOVFF  FF2,6BC
030B8:  BCF    FF2.6
030BA:  BCF    FF2.7
030BC:  MOVFF  662,FAA
030C0:  MOVFF  661,FA9
030C4:  BCF    FA6.6
030C6:  BCF    FA6.7
030C8:  BSF    FA6.0
030CA:  MOVF   FA8,W
030CC:  BTFSC  xBC.6
030CE:  BSF    FF2.6
030D0:  BTFSC  xBC.7
030D2:  BSF    FF2.7
030D4:  MOVWF  x66
....................             real_button=read_eeprom(++mempointer); 
030D6:  INCF   x61,F
030D8:  BTFSC  FD8.2
030DA:  INCF   x62,F
030DC:  MOVFF  FF2,6BC
030E0:  BCF    FF2.6
030E2:  BCF    FF2.7
030E4:  MOVFF  662,FAA
030E8:  MOVFF  661,FA9
030EC:  BCF    FA6.6
030EE:  BCF    FA6.7
030F0:  BSF    FA6.0
030F2:  MOVF   FA8,W
030F4:  BTFSC  xBC.6
030F6:  BSF    FF2.6
030F8:  BTFSC  xBC.7
030FA:  BSF    FF2.7
030FC:  MOVWF  x67
030FE:  CLRF   1B
03100:  BTFSC  FF2.6
03102:  BSF    1B.6
03104:  BCF    FF2.6
03106:  BTFSC  FF2.7
03108:  BSF    1B.7
0310A:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
0310C:  CLRF   xDB
0310E:  MOVFF  663,6DA
03112:  CLRF   xDD
03114:  MOVLW  21
03116:  MOVWF  xDC
03118:  MOVLB  0
0311A:  CALL   0420
0311E:  BTFSC  1B.6
03120:  BSF    FF2.6
03122:  BTFSC  1B.7
03124:  BSF    FF2.7
03126:  MOVFF  02,03
0312A:  MOVF   01,W
0312C:  ADDLW  40
0312E:  MOVWF  01
03130:  MOVLW  01
03132:  ADDWFC 03,F
03134:  MOVFF  01,6BC
03138:  MOVFF  03,6BD
0313C:  MOVFF  668,6BE
03140:  MOVFF  665,6BF
03144:  MOVFF  666,6C0
03148:  MOVFF  03,6C2
0314C:  MOVFF  01,6C1
03150:  MOVFF  667,6C3
03154:  MOVLB  0
03156:  GOTO   2542
....................             ++inputNumber; 
0315A:  MOVLB  6
0315C:  INCF   x63,F
....................             ++mempointer; 
0315E:  INCF   x61,F
03160:  BTFSC  FD8.2
03162:  INCF   x62,F
....................          break; 
03164:  MOVLB  0
03166:  BRA    3886
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
03168:  MOVLW  88
0316A:  MOVWF  FF6
0316C:  MOVLW  03
0316E:  MOVWF  FF7
03170:  MOVLW  00
03172:  MOVWF  FF8
03174:  CLRF   1B
03176:  BTFSC  FF2.6
03178:  BSF    1B.6
0317A:  BCF    FF2.6
0317C:  BTFSC  FF2.7
0317E:  BSF    1B.7
03180:  BCF    FF2.7
03182:  CALL   0F2E
03186:  BTFSC  1B.6
03188:  BSF    FF2.6
0318A:  BTFSC  1B.7
0318C:  BSF    FF2.7
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
0318E:  MOVLB  6
03190:  INCF   x61,F
03192:  BTFSC  FD8.2
03194:  INCF   x62,F
03196:  MOVFF  FF2,6BC
0319A:  BCF    FF2.6
0319C:  BCF    FF2.7
0319E:  MOVFF  662,FAA
031A2:  MOVFF  661,FA9
031A6:  BCF    FA6.6
031A8:  BCF    FA6.7
031AA:  BSF    FA6.0
031AC:  MOVF   FA8,W
031AE:  BTFSC  xBC.6
031B0:  BSF    FF2.6
031B2:  BTFSC  xBC.7
031B4:  BSF    FF2.7
031B6:  MOVWF  x65
....................             off_adr=read_eeprom(++mempointer); 
031B8:  INCF   x61,F
031BA:  BTFSC  FD8.2
031BC:  INCF   x62,F
031BE:  MOVFF  FF2,6BC
031C2:  BCF    FF2.6
031C4:  BCF    FF2.7
031C6:  MOVFF  662,FAA
031CA:  MOVFF  661,FA9
031CE:  BCF    FA6.6
031D0:  BCF    FA6.7
031D2:  BSF    FA6.0
031D4:  MOVF   FA8,W
031D6:  BTFSC  xBC.6
031D8:  BSF    FF2.6
031DA:  BTFSC  xBC.7
031DC:  BSF    FF2.7
031DE:  MOVWF  x66
....................             real_button=read_eeprom(++mempointer); 
031E0:  INCF   x61,F
031E2:  BTFSC  FD8.2
031E4:  INCF   x62,F
031E6:  MOVFF  FF2,6BC
031EA:  BCF    FF2.6
031EC:  BCF    FF2.7
031EE:  MOVFF  662,FAA
031F2:  MOVFF  661,FA9
031F6:  BCF    FA6.6
031F8:  BCF    FA6.7
031FA:  BSF    FA6.0
031FC:  MOVF   FA8,W
031FE:  BTFSC  xBC.6
03200:  BSF    FF2.6
03202:  BTFSC  xBC.7
03204:  BSF    FF2.7
03206:  MOVWF  x67
....................             int1 repeat=read_eeprom(++mempointer); 
03208:  INCF   x61,F
0320A:  BTFSC  FD8.2
0320C:  INCF   x62,F
0320E:  MOVFF  FF2,6BC
03212:  BCF    FF2.6
03214:  BCF    FF2.7
03216:  MOVFF  662,FAA
0321A:  MOVFF  661,FA9
0321E:  BCF    FA6.6
03220:  BCF    FA6.7
03222:  BSF    FA6.0
03224:  MOVF   FA8,W
03226:  BTFSC  xBC.6
03228:  BSF    FF2.6
0322A:  BTFSC  xBC.7
0322C:  BSF    FF2.7
0322E:  MOVWF  01
03230:  BCF    x69.0
03232:  BTFSC  01.0
03234:  BSF    x69.0
03236:  CLRF   1B
03238:  BTFSC  FF2.6
0323A:  BSF    1B.6
0323C:  BCF    FF2.6
0323E:  BTFSC  FF2.7
03240:  BSF    1B.7
03242:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
03244:  CLRF   xDB
03246:  MOVFF  663,6DA
0324A:  CLRF   xDD
0324C:  MOVLW  21
0324E:  MOVWF  xDC
03250:  MOVLB  0
03252:  CALL   0420
03256:  BTFSC  1B.6
03258:  BSF    FF2.6
0325A:  BTFSC  1B.7
0325C:  BSF    FF2.7
0325E:  MOVFF  02,03
03262:  MOVF   01,W
03264:  ADDLW  40
03266:  MOVWF  01
03268:  MOVLW  01
0326A:  ADDWFC 03,F
0326C:  MOVFF  01,6BC
03270:  MOVLB  6
03272:  MOVFF  03,6BD
03276:  MOVLW  00
03278:  BTFSC  x69.0
0327A:  MOVLW  01
0327C:  MOVFF  665,6BF
03280:  MOVFF  666,6C0
03284:  MOVFF  03,6C2
03288:  MOVFF  01,6C1
0328C:  MOVFF  667,6C3
03290:  MOVWF  xC4
03292:  MOVLB  0
03294:  GOTO   2706
....................             ++inputNumber; 
03298:  MOVLB  6
0329A:  INCF   x63,F
....................             ++mempointer; 
0329C:  INCF   x61,F
0329E:  BTFSC  FD8.2
032A0:  INCF   x62,F
....................          break; 
032A2:  MOVLB  0
032A4:  BRA    3886
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
032A6:  MOVLW  A0
032A8:  MOVWF  FF6
032AA:  MOVLW  03
032AC:  MOVWF  FF7
032AE:  MOVLW  00
032B0:  MOVWF  FF8
032B2:  CLRF   1B
032B4:  BTFSC  FF2.6
032B6:  BSF    1B.6
032B8:  BCF    FF2.6
032BA:  BTFSC  FF2.7
032BC:  BSF    1B.7
032BE:  BCF    FF2.7
032C0:  CALL   0F2E
032C4:  BTFSC  1B.6
032C6:  BSF    FF2.6
032C8:  BTFSC  1B.7
032CA:  BSF    FF2.7
.................... #endif 
....................             ++mempointer; 
032CC:  MOVLB  6
032CE:  INCF   x61,F
032D0:  BTFSC  FD8.2
032D2:  INCF   x62,F
....................             unsigned int start_adr[8]; 
....................           //  printf("EEPROM start %d %Lu\n\r",read_eeprom(mempointer),mempointer); 
....................             memToArray(start_adr,mempointer,8); 
032D4:  MOVLW  06
032D6:  MOVWF  xBD
032D8:  MOVLW  6A
032DA:  MOVWF  xBC
032DC:  MOVFF  662,6BF
032E0:  MOVFF  661,6BE
032E4:  MOVLW  08
032E6:  MOVWF  xC0
032E8:  MOVLB  0
032EA:  CALL   2768
....................             mempointer+=8; 
032EE:  MOVLW  08
032F0:  MOVLB  6
032F2:  ADDWF  x61,F
032F4:  MOVLW  00
032F6:  ADDWFC x62,F
....................             unsigned int stop_adr[8]; 
....................           //  printf("EEPROM stop %d\n\r",read_eeprom(mempointer)); 
....................             memToArray(stop_adr,mempointer,8); 
032F8:  MOVLW  06
032FA:  MOVWF  xBD
032FC:  MOVLW  72
032FE:  MOVWF  xBC
03300:  MOVFF  662,6BF
03304:  MOVFF  661,6BE
03308:  MOVLW  08
0330A:  MOVWF  xC0
0330C:  MOVLB  0
0330E:  CALL   2768
....................             mempointer+=8;           
03312:  MOVLW  08
03314:  MOVLB  6
03316:  ADDWF  x61,F
03318:  MOVLW  00
0331A:  ADDWFC x62,F
....................             unsigned int out_on=read_eeprom(mempointer); 
....................           //  printf("EEPROM on %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................           //  printf("EEPROM off %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
0331C:  MOVFF  FF2,6BC
03320:  BCF    FF2.6
03322:  BCF    FF2.7
03324:  MOVFF  662,FAA
03328:  MOVFF  661,FA9
0332C:  BCF    FA6.6
0332E:  BCF    FA6.7
03330:  BSF    FA6.0
03332:  MOVF   FA8,W
03334:  BTFSC  xBC.6
03336:  BSF    FF2.6
03338:  BTFSC  xBC.7
0333A:  BSF    FF2.7
0333C:  MOVWF  x7A
0333E:  INCF   x61,F
03340:  BTFSC  FD8.2
03342:  INCF   x62,F
03344:  MOVFF  FF2,6BD
03348:  BCF    FF2.6
0334A:  BCF    FF2.7
0334C:  MOVFF  662,FAA
03350:  MOVFF  661,FA9
03354:  BCF    FA6.6
03356:  BCF    FA6.7
03358:  BSF    FA6.0
0335A:  MOVF   FA8,W
0335C:  BTFSC  xBD.6
0335E:  BSF    FF2.6
03360:  BTFSC  xBD.7
03362:  BSF    FF2.7
03364:  MOVWF  x7B
03366:  INCF   x61,F
03368:  BTFSC  FD8.2
0336A:  INCF   x62,F
0336C:  MOVFF  FF2,6BE
03370:  BCF    FF2.6
03372:  BCF    FF2.7
03374:  MOVFF  662,FAA
03378:  MOVFF  661,FA9
0337C:  BCF    FA6.6
0337E:  BCF    FA6.7
03380:  BSF    FA6.0
03382:  MOVF   FA8,W
03384:  BTFSC  xBE.6
03386:  BSF    FF2.6
03388:  BTFSC  xBE.7
0338A:  BSF    FF2.7
0338C:  MOVWF  x7C
0338E:  INCF   x61,F
03390:  BTFSC  FD8.2
03392:  INCF   x62,F
03394:  MOVFF  FF2,6BF
03398:  BCF    FF2.6
0339A:  BCF    FF2.7
0339C:  MOVFF  662,FAA
033A0:  MOVFF  661,FA9
033A4:  BCF    FA6.6
033A6:  BCF    FA6.7
033A8:  BSF    FA6.0
033AA:  MOVF   FA8,W
033AC:  BTFSC  xBF.6
033AE:  BSF    FF2.6
033B0:  BTFSC  xBF.7
033B2:  BSF    FF2.7
033B4:  CLRF   x7E
033B6:  MOVWF  x7D
....................             timeToAct<<=8; 
033B8:  MOVFF  67D,67E
033BC:  CLRF   x7D
....................             timeToAct|=read_eeprom(++mempointer); 
033BE:  INCF   x61,F
033C0:  BTFSC  FD8.2
033C2:  INCF   x62,F
033C4:  MOVFF  FF2,6BC
033C8:  BCF    FF2.6
033CA:  BCF    FF2.7
033CC:  MOVFF  662,FAA
033D0:  MOVFF  661,FA9
033D4:  BCF    FA6.6
033D6:  BCF    FA6.7
033D8:  BSF    FA6.0
033DA:  MOVF   FA8,W
033DC:  BTFSC  xBC.6
033DE:  BSF    FF2.6
033E0:  BTFSC  xBC.7
033E2:  BSF    FF2.7
033E4:  IORWF  x7D,F
033E6:  CLRF   1B
033E8:  BTFSC  FF2.6
033EA:  BSF    1B.6
033EC:  BCF    FF2.6
033EE:  BTFSC  FF2.7
033F0:  BSF    1B.7
033F2:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
033F4:  CLRF   xDB
033F6:  MOVFF  663,6DA
033FA:  CLRF   xDD
033FC:  MOVLW  21
033FE:  MOVWF  xDC
03400:  MOVLB  0
03402:  CALL   0420
03406:  BTFSC  1B.6
03408:  BSF    FF2.6
0340A:  BTFSC  1B.7
0340C:  BSF    FF2.7
0340E:  MOVFF  02,03
03412:  MOVF   01,W
03414:  ADDLW  40
03416:  MOVWF  01
03418:  MOVLW  01
0341A:  ADDWFC 03,F
0341C:  MOVFF  01,6BC
03420:  MOVLB  6
03422:  MOVFF  03,6BD
03426:  MOVLW  06
03428:  MOVWF  xBF
0342A:  MOVLW  6A
0342C:  MOVWF  xBE
0342E:  MOVLW  06
03430:  MOVWF  xC1
03432:  MOVLW  72
03434:  MOVWF  xC0
03436:  MOVFF  67A,6C2
0343A:  MOVFF  67B,6C3
0343E:  MOVFF  03,6C5
03442:  MOVFF  01,6C4
03446:  MOVFF  67C,6C6
0344A:  MOVFF  67E,6C8
0344E:  MOVFF  67D,6C7
03452:  MOVLB  0
03454:  GOTO   27FA
....................             ++inputNumber; 
03458:  MOVLB  6
0345A:  INCF   x63,F
....................             ++mempointer; 
0345C:  INCF   x61,F
0345E:  BTFSC  FD8.2
03460:  INCF   x62,F
....................          break; 
03462:  MOVLB  0
03464:  BRA    3886
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
03466:  MOVLW  B0
03468:  MOVWF  FF6
0346A:  MOVLW  03
0346C:  MOVWF  FF7
0346E:  MOVLW  00
03470:  MOVWF  FF8
03472:  CLRF   1B
03474:  BTFSC  FF2.6
03476:  BSF    1B.6
03478:  BCF    FF2.6
0347A:  BTFSC  FF2.7
0347C:  BSF    1B.7
0347E:  BCF    FF2.7
03480:  CALL   0F2E
03484:  BTFSC  1B.6
03486:  BSF    FF2.6
03488:  BTFSC  1B.7
0348A:  BSF    FF2.7
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(_dim_adr,mempointer,8); 
0348C:  MOVLW  06
0348E:  MOVLB  6
03490:  MOVWF  xBD
03492:  MOVLW  7F
03494:  MOVWF  xBC
03496:  MOVFF  662,6BF
0349A:  MOVFF  661,6BE
0349E:  MOVLW  08
034A0:  MOVWF  xC0
034A2:  MOVLB  0
034A4:  CALL   2768
....................             mempointer+=8; 
034A8:  MOVLW  08
034AA:  MOVLB  6
034AC:  ADDWF  x61,F
034AE:  MOVLW  00
034B0:  ADDWFC x62,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(_on_adr,mempointer,8); 
034B2:  MOVLW  06
034B4:  MOVWF  xBD
034B6:  MOVLW  87
034B8:  MOVWF  xBC
034BA:  MOVFF  662,6BF
034BE:  MOVFF  661,6BE
034C2:  MOVLW  08
034C4:  MOVWF  xC0
034C6:  MOVLB  0
034C8:  CALL   2768
....................             mempointer+=8;   
034CC:  MOVLW  08
034CE:  MOVLB  6
034D0:  ADDWF  x61,F
034D2:  MOVLW  00
034D4:  ADDWFC x62,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(_off_adr,mempointer,8); 
034D6:  MOVLW  06
034D8:  MOVWF  xBD
034DA:  MOVLW  8F
034DC:  MOVWF  xBC
034DE:  MOVFF  662,6BF
034E2:  MOVFF  661,6BE
034E6:  MOVLW  08
034E8:  MOVWF  xC0
034EA:  MOVLB  0
034EC:  CALL   2768
....................             mempointer+=8;   
034F0:  MOVLW  08
034F2:  MOVLB  6
034F4:  ADDWF  x61,F
034F6:  MOVLW  00
034F8:  ADDWFC x62,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
034FA:  INCF   x61,F
034FC:  BTFSC  FD8.2
034FE:  INCF   x62,F
03500:  MOVFF  FF2,6BC
03504:  BCF    FF2.6
03506:  BCF    FF2.7
03508:  MOVFF  662,FAA
0350C:  MOVFF  661,FA9
03510:  BCF    FA6.6
03512:  BCF    FA6.7
03514:  BSF    FA6.0
03516:  MOVF   FA8,W
03518:  BTFSC  xBC.6
0351A:  BSF    FF2.6
0351C:  BTFSC  xBC.7
0351E:  BSF    FF2.7
03520:  MOVWF  x97
03522:  CLRF   1B
03524:  BTFSC  FF2.6
03526:  BSF    1B.6
03528:  BCF    FF2.6
0352A:  BTFSC  FF2.7
0352C:  BSF    1B.7
0352E:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
03530:  CLRF   xDB
03532:  MOVFF  664,6DA
03536:  CLRF   xDD
03538:  MOVLW  2F
0353A:  MOVWF  xDC
0353C:  MOVLB  0
0353E:  CALL   0420
03542:  BTFSC  1B.6
03544:  BSF    FF2.6
03546:  BTFSC  1B.7
03548:  BSF    FF2.7
0354A:  MOVFF  02,03
0354E:  MOVF   01,W
03550:  ADDLW  8A
03552:  MOVWF  01
03554:  MOVLW  02
03556:  ADDWFC 03,F
03558:  MOVFF  01,6BC
0355C:  MOVLB  6
0355E:  MOVFF  03,6BD
03562:  MOVLW  06
03564:  MOVWF  xBF
03566:  MOVLW  7F
03568:  MOVWF  xBE
0356A:  MOVLW  06
0356C:  MOVWF  xC1
0356E:  MOVLW  87
03570:  MOVWF  xC0
03572:  MOVLW  06
03574:  MOVWF  xC3
03576:  MOVLW  8F
03578:  MOVWF  xC2
0357A:  MOVFF  03,6C5
0357E:  MOVFF  01,6C4
03582:  MOVFF  697,6C6
03586:  MOVLB  0
03588:  GOTO   29F0
....................             ++outputNumber; 
0358C:  MOVLB  6
0358E:  INCF   x64,F
....................             ++mempointer; 
03590:  INCF   x61,F
03592:  BTFSC  FD8.2
03594:  INCF   x62,F
....................          break; 
03596:  MOVLB  0
03598:  BRA    3886
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
0359A:  MOVLW  C4
0359C:  MOVWF  FF6
0359E:  MOVLW  03
035A0:  MOVWF  FF7
035A2:  MOVLW  00
035A4:  MOVWF  FF8
035A6:  CLRF   1B
035A8:  BTFSC  FF2.6
035AA:  BSF    1B.6
035AC:  BCF    FF2.6
035AE:  BTFSC  FF2.7
035B0:  BSF    1B.7
035B2:  BCF    FF2.7
035B4:  CALL   0F2E
035B8:  BTFSC  1B.6
035BA:  BSF    FF2.6
035BC:  BTFSC  1B.7
035BE:  BSF    FF2.7
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
035C0:  MOVLW  06
035C2:  MOVLB  6
035C4:  MOVWF  xBD
035C6:  MOVLW  98
035C8:  MOVWF  xBC
035CA:  MOVFF  662,6BF
035CE:  MOVFF  661,6BE
035D2:  MOVLW  08
035D4:  MOVWF  xC0
035D6:  MOVLB  0
035D8:  CALL   2768
....................             mempointer+=8; 
035DC:  MOVLW  08
035DE:  MOVLB  6
035E0:  ADDWF  x61,F
035E2:  MOVLW  00
035E4:  ADDWFC x62,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
035E6:  MOVLW  06
035E8:  MOVWF  xBD
035EA:  MOVLW  A0
035EC:  MOVWF  xBC
035EE:  MOVFF  662,6BF
035F2:  MOVFF  661,6BE
035F6:  MOVLW  08
035F8:  MOVWF  xC0
035FA:  MOVLB  0
035FC:  CALL   2768
....................             mempointer+=8;   
03600:  MOVLW  08
03602:  MOVLB  6
03604:  ADDWF  x61,F
03606:  MOVLW  00
03608:  ADDWFC x62,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
0360A:  MOVLW  06
0360C:  MOVWF  xBD
0360E:  MOVLW  A8
03610:  MOVWF  xBC
03612:  MOVFF  662,6BF
03616:  MOVFF  661,6BE
0361A:  MOVLW  08
0361C:  MOVWF  xC0
0361E:  MOVLB  0
03620:  CALL   2768
....................             mempointer+=8;   
03624:  MOVLW  08
03626:  MOVLB  6
03628:  ADDWF  x61,F
0362A:  MOVLW  00
0362C:  ADDWFC x62,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
0362E:  MOVLW  06
03630:  MOVWF  xBD
03632:  MOVLW  B0
03634:  MOVWF  xBC
03636:  MOVFF  662,6BF
0363A:  MOVFF  661,6BE
0363E:  MOVLW  08
03640:  MOVWF  xC0
03642:  MOVLB  0
03644:  CALL   2768
....................             mempointer+=8; 
03648:  MOVLW  08
0364A:  MOVLB  6
0364C:  ADDWF  x61,F
0364E:  MOVLW  00
03650:  ADDWFC x62,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
03652:  INCF   x61,F
03654:  BTFSC  FD8.2
03656:  INCF   x62,F
03658:  MOVFF  FF2,6BC
0365C:  BCF    FF2.6
0365E:  BCF    FF2.7
03660:  MOVFF  662,FAA
03664:  MOVFF  661,FA9
03668:  BCF    FA6.6
0366A:  BCF    FA6.7
0366C:  BSF    FA6.0
0366E:  MOVF   FA8,W
03670:  BTFSC  xBC.6
03672:  BSF    FF2.6
03674:  BTFSC  xBC.7
03676:  BSF    FF2.7
03678:  MOVWF  xB8
0367A:  INCF   x61,F
0367C:  BTFSC  FD8.2
0367E:  INCF   x62,F
03680:  MOVFF  FF2,6BD
03684:  BCF    FF2.6
03686:  BCF    FF2.7
03688:  MOVFF  662,FAA
0368C:  MOVFF  661,FA9
03690:  BCF    FA6.6
03692:  BCF    FA6.7
03694:  BSF    FA6.0
03696:  MOVF   FA8,W
03698:  BTFSC  xBD.6
0369A:  BSF    FF2.6
0369C:  BTFSC  xBD.7
0369E:  BSF    FF2.7
036A0:  MOVWF  xB9
036A2:  INCF   x61,F
036A4:  BTFSC  FD8.2
036A6:  INCF   x62,F
036A8:  MOVFF  FF2,6BE
036AC:  BCF    FF2.6
036AE:  BCF    FF2.7
036B0:  MOVFF  662,FAA
036B4:  MOVFF  661,FA9
036B8:  BCF    FA6.6
036BA:  BCF    FA6.7
036BC:  BSF    FA6.0
036BE:  MOVF   FA8,W
036C0:  BTFSC  xBE.6
036C2:  BSF    FF2.6
036C4:  BTFSC  xBE.7
036C6:  BSF    FF2.7
036C8:  MOVWF  xBA
036CA:  INCF   x61,F
036CC:  BTFSC  FD8.2
036CE:  INCF   x62,F
036D0:  MOVFF  FF2,6BF
036D4:  BCF    FF2.6
036D6:  BCF    FF2.7
036D8:  MOVFF  662,FAA
036DC:  MOVFF  661,FA9
036E0:  BCF    FA6.6
036E2:  BCF    FA6.7
036E4:  BSF    FA6.0
036E6:  MOVF   FA8,W
036E8:  BTFSC  xBF.6
036EA:  BSF    FF2.6
036EC:  BTFSC  xBF.7
036EE:  BSF    FF2.7
036F0:  MOVWF  xBB
036F2:  CLRF   1B
036F4:  BTFSC  FF2.6
036F6:  BSF    1B.6
036F8:  BCF    FF2.6
036FA:  BTFSC  FF2.7
036FC:  BSF    1B.7
036FE:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
03700:  CLRF   xDB
03702:  MOVFF  664,6DA
03706:  CLRF   xDD
03708:  MOVLW  2F
0370A:  MOVWF  xDC
0370C:  MOVLB  0
0370E:  CALL   0420
03712:  BTFSC  1B.6
03714:  BSF    FF2.6
03716:  BTFSC  1B.7
03718:  BSF    FF2.7
0371A:  MOVFF  02,03
0371E:  MOVF   01,W
03720:  ADDLW  8A
03722:  MOVWF  01
03724:  MOVLW  02
03726:  ADDWFC 03,F
03728:  MOVFF  01,6BC
0372C:  MOVLB  6
0372E:  MOVFF  03,6BD
03732:  MOVLW  06
03734:  MOVWF  xBF
03736:  MOVLW  98
03738:  MOVWF  xBE
0373A:  MOVLW  06
0373C:  MOVWF  xC1
0373E:  MOVLW  A0
03740:  MOVWF  xC0
03742:  MOVLW  06
03744:  MOVWF  xC3
03746:  MOVLW  A8
03748:  MOVWF  xC2
0374A:  MOVLW  06
0374C:  MOVWF  xC5
0374E:  MOVLW  B0
03750:  MOVWF  xC4
03752:  MOVFF  03,6C7
03756:  MOVFF  01,6C6
0375A:  MOVFF  6B8,6C8
0375E:  MOVFF  6B9,6C9
03762:  MOVFF  6BA,6CA
03766:  MOVFF  6BB,6CB
0376A:  MOVLB  0
0376C:  GOTO   2B74
....................             ++outputNumber; 
03770:  MOVLB  6
03772:  INCF   x64,F
....................             ++mempointer; 
03774:  INCF   x61,F
03776:  BTFSC  FD8.2
03778:  INCF   x62,F
....................          break; 
0377A:  MOVLB  0
0377C:  BRA    3886
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
0377E:  MOVLW  DA
03780:  MOVWF  FF6
03782:  MOVLW  03
03784:  MOVWF  FF7
03786:  MOVLW  00
03788:  MOVWF  FF8
0378A:  CLRF   1B
0378C:  BTFSC  FF2.6
0378E:  BSF    1B.6
03790:  BCF    FF2.6
03792:  BTFSC  FF2.7
03794:  BSF    1B.7
03796:  BCF    FF2.7
03798:  CALL   0F2E
0379C:  BTFSC  1B.6
0379E:  BSF    FF2.6
037A0:  BTFSC  1B.7
037A2:  BSF    FF2.7
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
037A4:  MOVLW  06
037A6:  MOVLB  6
037A8:  MOVWF  xBD
037AA:  MOVLW  87
037AC:  MOVWF  xBC
037AE:  MOVFF  662,6BF
037B2:  MOVFF  661,6BE
037B6:  MOVLW  08
037B8:  MOVWF  xC0
037BA:  MOVLB  0
037BC:  CALL   2768
....................             mempointer+=8;   
037C0:  MOVLW  08
037C2:  MOVLB  6
037C4:  ADDWF  x61,F
037C6:  MOVLW  00
037C8:  ADDWFC x62,F
....................             memToArray(_off_adr,mempointer,8); 
037CA:  MOVLW  06
037CC:  MOVWF  xBD
037CE:  MOVLW  8F
037D0:  MOVWF  xBC
037D2:  MOVFF  662,6BF
037D6:  MOVFF  661,6BE
037DA:  MOVLW  08
037DC:  MOVWF  xC0
037DE:  MOVLB  0
037E0:  CALL   2768
....................             mempointer+=8;   
037E4:  MOVLW  08
037E6:  MOVLB  6
037E8:  ADDWF  x61,F
037EA:  MOVLW  00
037EC:  ADDWFC x62,F
....................             output_pin=read_eeprom(++mempointer); 
037EE:  INCF   x61,F
037F0:  BTFSC  FD8.2
037F2:  INCF   x62,F
037F4:  MOVFF  FF2,6BC
037F8:  BCF    FF2.6
037FA:  BCF    FF2.7
037FC:  MOVFF  662,FAA
03800:  MOVFF  661,FA9
03804:  BCF    FA6.6
03806:  BCF    FA6.7
03808:  BSF    FA6.0
0380A:  MOVF   FA8,W
0380C:  BTFSC  xBC.6
0380E:  BSF    FF2.6
03810:  BTFSC  xBC.7
03812:  BSF    FF2.7
03814:  MOVWF  x97
03816:  CLRF   1B
03818:  BTFSC  FF2.6
0381A:  BSF    1B.6
0381C:  BCF    FF2.6
0381E:  BTFSC  FF2.7
03820:  BSF    1B.7
03822:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
03824:  CLRF   xDB
03826:  MOVFF  664,6DA
0382A:  CLRF   xDD
0382C:  MOVLW  2F
0382E:  MOVWF  xDC
03830:  MOVLB  0
03832:  CALL   0420
03836:  BTFSC  1B.6
03838:  BSF    FF2.6
0383A:  BTFSC  1B.7
0383C:  BSF    FF2.7
0383E:  MOVFF  02,03
03842:  MOVF   01,W
03844:  ADDLW  8A
03846:  MOVWF  01
03848:  MOVLW  02
0384A:  ADDWFC 03,F
0384C:  MOVFF  01,6BC
03850:  MOVLB  6
03852:  MOVFF  03,6BD
03856:  MOVLW  06
03858:  MOVWF  xBF
0385A:  MOVLW  87
0385C:  MOVWF  xBE
0385E:  MOVLW  06
03860:  MOVWF  xC1
03862:  MOVLW  8F
03864:  MOVWF  xC0
03866:  MOVFF  03,6C3
0386A:  MOVFF  01,6C2
0386E:  MOVFF  697,6C4
03872:  MOVLB  0
03874:  GOTO   2DB6
....................             ++outputNumber; 
03878:  MOVLB  6
0387A:  INCF   x64,F
....................             ++mempointer; 
0387C:  INCF   x61,F
0387E:  BTFSC  FD8.2
03880:  INCF   x62,F
....................          break; 
03882:  MOVLB  0
03884:  BRA    3886
....................       } 
....................     
....................    } 
03886:  MOVLB  6
03888:  GOTO   2EB6
....................    mydevices.numberOfInputs=inputNumber; 
0388C:  MOVFF  663,13E
....................    mydevices.numberOfOutputs=outputNumber; 
03890:  MOVFF  664,13F
....................     
.................... } 
03894:  MOVLB  0
03896:  GOTO   9178 (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
*
02310:  MOVFF  63A,672
02314:  MOVFF  639,671
02318:  MOVLB  6
0231A:  CLRF   x73
0231C:  MOVLB  0
0231E:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,dim_adr); 
02320:  MOVLB  6
02322:  INCF   x39,F
02324:  BTFSC  FD8.2
02326:  INCF   x3A,F
02328:  MOVFF  63A,672
0232C:  MOVFF  639,671
02330:  MOVFF  661,673
02334:  MOVLB  0
02336:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,on_adr); 
02338:  MOVLB  6
0233A:  INCF   x39,F
0233C:  BTFSC  FD8.2
0233E:  INCF   x3A,F
02340:  MOVFF  63A,672
02344:  MOVFF  639,671
02348:  MOVFF  662,673
0234C:  MOVLB  0
0234E:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,off_adr); 
02350:  MOVLB  6
02352:  INCF   x39,F
02354:  BTFSC  FD8.2
02356:  INCF   x3A,F
02358:  MOVFF  63A,672
0235C:  MOVFF  639,671
02360:  MOVFF  663,673
02364:  MOVLB  0
02366:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,real_button); 
02368:  MOVLB  6
0236A:  INCF   x39,F
0236C:  BTFSC  FD8.2
0236E:  INCF   x3A,F
02370:  MOVFF  63A,672
02374:  MOVFF  639,671
02378:  MOVFF  664,673
0237C:  MOVLB  0
0237E:  RCALL  21EA
....................    ++writeMemPointer; 
02380:  MOVLB  6
02382:  INCF   x39,F
02384:  BTFSC  FD8.2
02386:  INCF   x3A,F
....................     
.................... } 
02388:  MOVLB  0
0238A:  GOTO   902E (RETURN)
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
022AA:  MOVFF  63A,672
022AE:  MOVFF  639,671
022B2:  MOVLW  01
022B4:  MOVLB  6
022B6:  MOVWF  x73
022B8:  MOVLB  0
022BA:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,on_adr); 
022BC:  MOVLB  6
022BE:  INCF   x39,F
022C0:  BTFSC  FD8.2
022C2:  INCF   x3A,F
022C4:  MOVFF  63A,672
022C8:  MOVFF  639,671
022CC:  MOVFF  661,673
022D0:  MOVLB  0
022D2:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,off_adr); 
022D4:  MOVLB  6
022D6:  INCF   x39,F
022D8:  BTFSC  FD8.2
022DA:  INCF   x3A,F
022DC:  MOVFF  63A,672
022E0:  MOVFF  639,671
022E4:  MOVFF  662,673
022E8:  MOVLB  0
022EA:  RCALL  21EA
....................    _write_eeprom(++writeMemPointer,real_button); 
022EC:  MOVLB  6
022EE:  INCF   x39,F
022F0:  BTFSC  FD8.2
022F2:  INCF   x3A,F
022F4:  MOVFF  63A,672
022F8:  MOVFF  639,671
022FC:  MOVFF  663,673
02300:  MOVLB  0
02302:  RCALL  21EA
....................    ++writeMemPointer; 
02304:  MOVLB  6
02306:  INCF   x39,F
02308:  BTFSC  FD8.2
0230A:  INCF   x3A,F
.................... } 
0230C:  MOVLB  0
0230E:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    _write_eeprom(++writeMemPointer,repeat); 
....................     
....................    ++writeMemPointer; 
.................... } 
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
*
0244C:  MOVFF  63A,672
02450:  MOVFF  639,671
02454:  MOVLW  65
02456:  MOVLB  6
02458:  MOVWF  x73
0245A:  MOVLB  0
0245C:  RCALL  21EA
....................    ++writeMemPointer; 
0245E:  MOVLB  6
02460:  INCF   x39,F
02462:  BTFSC  FD8.2
02464:  INCF   x3A,F
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
02466:  MOVFF  662,669
0246A:  MOVFF  661,668
0246E:  MOVFF  63A,66B
02472:  MOVFF  639,66A
02476:  MOVLW  08
02478:  MOVWF  x6C
0247A:  MOVLB  0
0247C:  RCALL  238E
....................    writeMemPointer+=8; 
0247E:  MOVLW  08
02480:  MOVLB  6
02482:  ADDWF  x39,F
02484:  MOVLW  00
02486:  ADDWFC x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
02488:  MOVFF  664,669
0248C:  MOVFF  663,668
02490:  MOVFF  63A,66B
02494:  MOVFF  639,66A
02498:  MOVLW  08
0249A:  MOVWF  x6C
0249C:  MOVLB  0
0249E:  RCALL  238E
....................    writeMemPointer+=8; 
024A0:  MOVLW  08
024A2:  MOVLB  6
024A4:  ADDWF  x39,F
024A6:  MOVLW  00
024A8:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
024AA:  MOVFF  666,669
024AE:  MOVFF  665,668
024B2:  MOVFF  63A,66B
024B6:  MOVFF  639,66A
024BA:  MOVLW  08
024BC:  MOVWF  x6C
024BE:  MOVLB  0
024C0:  RCALL  238E
....................    writeMemPointer+=8; 
024C2:  MOVLW  08
024C4:  MOVLB  6
024C6:  ADDWF  x39,F
024C8:  MOVLW  00
024CA:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
024CC:  MOVFF  63A,672
024D0:  MOVFF  639,671
024D4:  MOVFF  667,673
024D8:  MOVLB  0
024DA:  RCALL  21EA
....................    ++writeMemPointer; 
024DC:  MOVLB  6
024DE:  INCF   x39,F
024E0:  BTFSC  FD8.2
024E2:  INCF   x3A,F
.................... } 
024E4:  MOVLB  0
024E6:  RETLW  00
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
023D2:  MOVFF  63A,672
023D6:  MOVFF  639,671
023DA:  MOVLW  64
023DC:  MOVLB  6
023DE:  MOVWF  x73
023E0:  MOVLB  0
023E2:  RCALL  21EA
....................    ++writeMemPointer; 
023E4:  MOVLB  6
023E6:  INCF   x39,F
023E8:  BTFSC  FD8.2
023EA:  INCF   x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
023EC:  MOVFF  662,669
023F0:  MOVFF  661,668
023F4:  MOVFF  63A,66B
023F8:  MOVFF  639,66A
023FC:  MOVLW  08
023FE:  MOVWF  x6C
02400:  MOVLB  0
02402:  RCALL  238E
....................    writeMemPointer+=8; 
02404:  MOVLW  08
02406:  MOVLB  6
02408:  ADDWF  x39,F
0240A:  MOVLW  00
0240C:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
0240E:  MOVFF  664,669
02412:  MOVFF  663,668
02416:  MOVFF  63A,66B
0241A:  MOVFF  639,66A
0241E:  MOVLW  08
02420:  MOVWF  x6C
02422:  MOVLB  0
02424:  RCALL  238E
....................    writeMemPointer+=8; 
02426:  MOVLW  08
02428:  MOVLB  6
0242A:  ADDWF  x39,F
0242C:  MOVLW  00
0242E:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
02430:  MOVFF  63A,672
02434:  MOVFF  639,671
02438:  MOVFF  665,673
0243C:  MOVLB  0
0243E:  RCALL  21EA
....................    ++writeMemPointer; 
02440:  MOVLB  6
02442:  INCF   x39,F
02444:  BTFSC  FD8.2
02446:  INCF   x3A,F
.................... } 
02448:  MOVLB  0
0244A:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
....................    ++writeMemPointer; 
....................    ArrayToMem(up_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(down_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,up_output_pin); 
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    _write_eeprom(writeMemPointer,timer); 
....................       ++writeMemPointer; 
....................    ArrayToMem(start_adr,writeMemPointer,8); 
....................    printf("Start adr=%d",start_adr[0]); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,out_on); 
....................    _write_eeprom(++writeMemPointer,out_off); 
....................    _write_eeprom(++writeMemPointer,type); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
....................    ++writeMemPointer; 
.................... } 
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... volatile unsigned int1 oscError=0; 
.................... volatile unsigned long misscounter; 
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
....................  
....................  
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
00868:  MOVLW  06
0086A:  MOVLB  6
0086C:  ADDWF  xDC,W
0086E:  MOVWF  FE9
00870:  MOVLW  00
00872:  ADDWFC xDD,W
00874:  MOVWF  FEA
00876:  MOVLW  00
00878:  BTFSC  FEF.0
0087A:  MOVLW  01
0087C:  ANDLW  01
0087E:  BNZ   095C
00880:  MOVLW  06
00882:  ADDWF  xDC,W
00884:  MOVWF  FE9
00886:  MOVLW  00
00888:  ADDWFC xDD,W
0088A:  MOVWF  FEA
0088C:  MOVLW  00
0088E:  BTFSC  FEF.1
00890:  MOVLW  01
00892:  ANDLW  01
00894:  SUBLW  01
00896:  BNZ   095C
....................    { 
....................       printf_("STATE %u",sw->current_state); 
....................       sw-> previous_state = button_pressed; 
00898:  MOVLW  06
0089A:  ADDWF  xDC,W
0089C:  MOVWF  FE9
0089E:  MOVLW  00
008A0:  ADDWFC xDD,W
008A2:  MOVWF  FEA
008A4:  BCF    FEF.1
....................       if(sw->outstate==off) 
008A6:  MOVLW  0B
008A8:  ADDWF  xDC,W
008AA:  MOVWF  FE9
008AC:  MOVLW  00
008AE:  ADDWFC xDD,W
008B0:  MOVWF  FEA
008B2:  DECFSZ FEF,W
008B4:  BRA    0900
....................       { 
....................          sw->outstate=on; 
008B6:  MOVLW  0B
008B8:  ADDWF  xDC,W
008BA:  MOVWF  FE9
008BC:  MOVLW  00
008BE:  ADDWFC xDD,W
008C0:  MOVWF  FEA
008C2:  CLRF   FEF
....................          sw->on.value=1; 
008C4:  MOVLW  01
008C6:  ADDWF  xDC,W
008C8:  MOVWF  FE9
008CA:  MOVLW  00
008CC:  ADDWFC xDD,W
008CE:  MOVWF  FEA
008D0:  MOVLW  01
008D2:  MOVWF  FEF
....................          sw->on.needs_update=true; 
008D4:  MOVLW  02
008D6:  ADDWF  xDC,W
008D8:  MOVWF  FE9
008DA:  MOVLW  00
008DC:  ADDWFC xDD,W
008DE:  MOVWF  FEA
008E0:  BSF    FEF.0
....................          sw->off.value=0; 
008E2:  MOVLW  04
008E4:  ADDWF  xDC,W
008E6:  MOVWF  FE9
008E8:  MOVLW  00
008EA:  ADDWFC xDD,W
008EC:  MOVWF  FEA
008EE:  CLRF   FEF
....................          sw->off.needs_update=true; 
008F0:  MOVLW  05
008F2:  ADDWF  xDC,W
008F4:  MOVWF  FE9
008F6:  MOVLW  00
008F8:  ADDWFC xDD,W
008FA:  MOVWF  FEA
008FC:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
008FE:  BRA    095A
00900:  MOVLW  0B
00902:  ADDWF  xDC,W
00904:  MOVWF  FE9
00906:  MOVLW  00
00908:  ADDWFC xDD,W
0090A:  MOVWF  FEA
0090C:  MOVF   FEF,F
0090E:  BNZ   095A
....................       { 
....................          sw->outstate=off; 
00910:  MOVLW  0B
00912:  ADDWF  xDC,W
00914:  MOVWF  FE9
00916:  MOVLW  00
00918:  ADDWFC xDD,W
0091A:  MOVWF  FEA
0091C:  MOVLW  01
0091E:  MOVWF  FEF
....................          sw->off.value=1; 
00920:  MOVLW  04
00922:  ADDWF  xDC,W
00924:  MOVWF  FE9
00926:  MOVLW  00
00928:  ADDWFC xDD,W
0092A:  MOVWF  FEA
0092C:  MOVLW  01
0092E:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00930:  MOVLW  05
00932:  ADDWF  xDC,W
00934:  MOVWF  FE9
00936:  MOVLW  00
00938:  ADDWFC xDD,W
0093A:  MOVWF  FEA
0093C:  BSF    FEF.0
....................          sw->on.value=0; 
0093E:  MOVLW  01
00940:  ADDWF  xDC,W
00942:  MOVWF  FE9
00944:  MOVLW  00
00946:  ADDWFC xDD,W
00948:  MOVWF  FEA
0094A:  CLRF   FEF
....................          sw->on.needs_update=true; 
0094C:  MOVLW  02
0094E:  ADDWF  xDC,W
00950:  MOVWF  FE9
00952:  MOVLW  00
00954:  ADDWFC xDD,W
00956:  MOVWF  FEA
00958:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
0095A:  BRA    0982
0095C:  MOVLW  06
0095E:  ADDWF  xDC,W
00960:  MOVWF  FE9
00962:  MOVLW  00
00964:  ADDWFC xDD,W
00966:  MOVWF  FEA
00968:  MOVLW  00
0096A:  BTFSC  FEF.0
0096C:  MOVLW  01
0096E:  ANDLW  01
00970:  SUBLW  01
00972:  BNZ   0982
....................       sw-> previous_state = button_depressed; 
00974:  MOVLW  06
00976:  ADDWF  xDC,W
00978:  MOVWF  FE9
0097A:  MOVLW  00
0097C:  ADDWFC xDD,W
0097E:  MOVWF  FEA
00980:  BSF    FEF.1
.................... } 
00982:  MOVLB  0
00984:  GOTO   0EAA (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
00988:  MOVLW  06
0098A:  MOVLB  6
0098C:  ADDWF  xDC,W
0098E:  MOVWF  FE9
00990:  MOVLW  00
00992:  ADDWFC xDD,W
00994:  MOVWF  FEA
00996:  MOVLW  00
00998:  BTFSC  FEF.0
0099A:  MOVLW  01
0099C:  ANDLW  01
0099E:  BNZ   09FA
009A0:  MOVLW  07
009A2:  ADDWF  xDC,W
009A4:  MOVWF  FE9
009A6:  MOVLW  00
009A8:  ADDWFC xDD,W
009AA:  MOVWF  FEA
009AC:  DECFSZ FEF,W
009AE:  BRA    09FA
....................    { 
....................          sw->outstate=on; 
009B0:  MOVLW  07
009B2:  ADDWF  xDC,W
009B4:  MOVWF  FE9
009B6:  MOVLW  00
009B8:  ADDWFC xDD,W
009BA:  MOVWF  FEA
009BC:  CLRF   FEF
....................          sw->on.value=1; 
009BE:  MOVLW  01
009C0:  ADDWF  xDC,W
009C2:  MOVWF  FE9
009C4:  MOVLW  00
009C6:  ADDWFC xDD,W
009C8:  MOVWF  FEA
009CA:  MOVLW  01
009CC:  MOVWF  FEF
....................          sw->on.needs_update=true; 
009CE:  MOVLW  02
009D0:  ADDWF  xDC,W
009D2:  MOVWF  FE9
009D4:  MOVLW  00
009D6:  ADDWFC xDD,W
009D8:  MOVWF  FEA
009DA:  BSF    FEF.0
....................          sw->off.value=0; 
009DC:  MOVLW  04
009DE:  ADDWF  xDC,W
009E0:  MOVWF  FE9
009E2:  MOVLW  00
009E4:  ADDWFC xDD,W
009E6:  MOVWF  FEA
009E8:  CLRF   FEF
....................          sw->off.needs_update=true; 
009EA:  MOVLW  05
009EC:  ADDWF  xDC,W
009EE:  MOVWF  FE9
009F0:  MOVLW  00
009F2:  ADDWFC xDD,W
009F4:  MOVWF  FEA
009F6:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
009F8:  BRA    0A6C
009FA:  MOVLW  06
009FC:  ADDWF  xDC,W
009FE:  MOVWF  FE9
00A00:  MOVLW  00
00A02:  ADDWFC xDD,W
00A04:  MOVWF  FEA
00A06:  MOVLW  00
00A08:  BTFSC  FEF.0
00A0A:  MOVLW  01
00A0C:  ANDLW  01
00A0E:  SUBLW  01
00A10:  BNZ   0A6C
00A12:  MOVLW  07
00A14:  ADDWF  xDC,W
00A16:  MOVWF  FE9
00A18:  MOVLW  00
00A1A:  ADDWFC xDD,W
00A1C:  MOVWF  FEA
00A1E:  MOVF   FEF,F
00A20:  BNZ   0A6C
....................    { 
....................          sw->outstate=off; 
00A22:  MOVLW  07
00A24:  ADDWF  xDC,W
00A26:  MOVWF  FE9
00A28:  MOVLW  00
00A2A:  ADDWFC xDD,W
00A2C:  MOVWF  FEA
00A2E:  MOVLW  01
00A30:  MOVWF  FEF
....................          sw->off.value=1; 
00A32:  MOVLW  04
00A34:  ADDWF  xDC,W
00A36:  MOVWF  FE9
00A38:  MOVLW  00
00A3A:  ADDWFC xDD,W
00A3C:  MOVWF  FEA
00A3E:  MOVLW  01
00A40:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00A42:  MOVLW  05
00A44:  ADDWF  xDC,W
00A46:  MOVWF  FE9
00A48:  MOVLW  00
00A4A:  ADDWFC xDD,W
00A4C:  MOVWF  FEA
00A4E:  BSF    FEF.0
....................          sw->on.value=0; 
00A50:  MOVLW  01
00A52:  ADDWF  xDC,W
00A54:  MOVWF  FE9
00A56:  MOVLW  00
00A58:  ADDWFC xDD,W
00A5A:  MOVWF  FEA
00A5C:  CLRF   FEF
....................          sw->on.needs_update=true; 
00A5E:  MOVLW  02
00A60:  ADDWF  xDC,W
00A62:  MOVWF  FE9
00A64:  MOVLW  00
00A66:  ADDWFC xDD,W
00A68:  MOVWF  FEA
00A6A:  BSF    FEF.0
....................    } 
.................... } 
00A6C:  MOVLB  0
00A6E:  GOTO   0EAA (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
004B6:  MOVLW  09
004B8:  MOVLB  6
004BA:  ADDWF  xDC,W
004BC:  MOVWF  FE9
004BE:  MOVLW  00
004C0:  ADDWFC xDD,W
004C2:  MOVWF  FEA
004C4:  MOVFF  FEF,6DE
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
004C8:  MOVLW  0E
004CA:  ADDWF  xDC,W
004CC:  MOVWF  FE9
004CE:  MOVLW  00
004D0:  ADDWFC xDD,W
004D2:  MOVWF  FEA
004D4:  MOVLW  00
004D6:  BTFSC  FEF.0
004D8:  MOVLW  01
004DA:  ANDLW  01
004DC:  BTFSS  FD8.2
004DE:  BRA    06BA
....................    { 
....................       printf_("STATE %u",sw->current_state); 
....................       printf_("DIF %LU",clock - sw->timer); 
004E0:  MOVLW  0A
004E2:  ADDWF  xDC,W
004E4:  MOVWF  FE9
004E6:  MOVLW  00
004E8:  ADDWFC xDD,W
004EA:  MOVWF  FEA
....................       sw->previous_state = button_pressed; 
004EC:  MOVLW  0E
004EE:  ADDWF  xDC,W
004F0:  MOVWF  FE9
004F2:  MOVLW  00
004F4:  ADDWFC xDD,W
004F6:  MOVWF  FEA
004F8:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
004FA:  MOVLW  0A
004FC:  ADDWF  xDC,W
004FE:  MOVWF  FE9
00500:  MOVLW  00
00502:  ADDWFC xDD,W
00504:  MOVWF  FEA
00506:  MOVFF  FEF,00
0050A:  MOVFF  FEC,01
0050E:  MOVFF  FEC,02
00512:  MOVFF  FEC,03
00516:  MOVF   00,W
00518:  SUBWF  x3B,W
0051A:  MOVWF  xDF
0051C:  MOVF   01,W
0051E:  SUBWFB x3C,W
00520:  MOVWF  xE0
00522:  MOVF   02,W
00524:  SUBWFB x3D,W
00526:  MOVWF  xE1
00528:  MOVF   03,W
0052A:  SUBWFB x3E,W
0052C:  MOVWF  xE2
0052E:  MOVF   x45,W
00530:  SUBWF  xE2,W
00532:  BNC   054C
00534:  BNZ   0560
00536:  MOVF   x44,W
00538:  SUBWF  xE1,W
0053A:  BNC   054C
0053C:  BNZ   0560
0053E:  MOVF   x43,W
00540:  SUBWF  xE0,W
00542:  BNC   054C
00544:  BNZ   0560
00546:  MOVF   xDF,W
00548:  SUBWF  x42,W
0054A:  BNC   0560
0054C:  MOVLW  0F
0054E:  ADDWF  xDC,W
00550:  MOVWF  FE9
00552:  MOVLW  00
00554:  ADDWFC xDD,W
00556:  MOVWF  FEA
00558:  MOVF   FEF,W
0055A:  SUBLW  02
0055C:  BTFSS  FD8.2
0055E:  BRA    06B8
00560:  MOVLW  0F
00562:  ADDWF  xDC,W
00564:  MOVWF  FE9
00566:  MOVLW  00
00568:  ADDWFC xDD,W
0056A:  MOVWF  FEA
0056C:  MOVF   FEF,W
0056E:  SUBLW  04
00570:  BTFSC  FD8.2
00572:  BRA    06B8
....................       {  
....................          if(sw->outstate==off) 
00574:  MOVLW  0F
00576:  ADDWF  xDC,W
00578:  MOVWF  FE9
0057A:  MOVLW  00
0057C:  ADDWFC xDD,W
0057E:  MOVWF  FEA
00580:  DECFSZ FEF,W
00582:  BRA    05C2
....................          { 
....................             sw->outstate=maxed; 
00584:  MOVLW  0F
00586:  ADDWF  xDC,W
00588:  MOVWF  FE9
0058A:  MOVLW  00
0058C:  ADDWFC xDD,W
0058E:  MOVWF  FEA
00590:  MOVLW  04
00592:  MOVWF  FEF
....................             sw->on.value=1; 
00594:  ADDWF  xDC,W
00596:  MOVWF  FE9
00598:  MOVLW  00
0059A:  ADDWFC xDD,W
0059C:  MOVWF  FEA
0059E:  MOVLW  01
005A0:  MOVWF  FEF
....................             sw->current_level = 127; 
005A2:  MOVLW  09
005A4:  ADDWF  xDC,W
005A6:  MOVWF  FE9
005A8:  MOVLW  00
005AA:  ADDWFC xDD,W
005AC:  MOVWF  FEA
005AE:  MOVLW  7F
005B0:  MOVWF  FEF
....................             sw->on.needs_update=1; 
005B2:  MOVLW  05
005B4:  ADDWF  xDC,W
005B6:  MOVWF  FE9
005B8:  MOVLW  00
005BA:  ADDWFC xDD,W
005BC:  MOVWF  FEA
005BE:  BSF    FEF.0
....................          } 
....................         else 
005C0:  BRA    06B6
....................         { 
....................          sw->outstate = dimming; 
005C2:  MOVLW  0F
005C4:  ADDWF  xDC,W
005C6:  MOVWF  FE9
005C8:  MOVLW  00
005CA:  ADDWFC xDD,W
005CC:  MOVWF  FEA
005CE:  MOVLW  02
005D0:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
005D2:  MOVLW  0A
005D4:  ADDWF  xDC,W
005D6:  MOVWF  FE9
005D8:  MOVLW  00
005DA:  ADDWFC xDD,W
005DC:  MOVWF  FEA
005DE:  MOVFF  FEF,00
005E2:  MOVFF  FEC,01
005E6:  MOVFF  FEC,02
005EA:  MOVFF  FEC,03
005EE:  MOVF   00,W
005F0:  SUBWF  x3B,W
005F2:  MOVWF  xDF
005F4:  MOVF   01,W
005F6:  SUBWFB x3C,W
005F8:  MOVWF  xE0
005FA:  MOVF   02,W
005FC:  SUBWFB x3D,W
005FE:  MOVWF  xE1
00600:  MOVF   03,W
00602:  SUBWFB x3E,W
00604:  MOVWF  xE2
00606:  MOVF   xE2,F
00608:  BNZ   0618
0060A:  MOVF   xE1,F
0060C:  BNZ   0618
0060E:  MOVF   xE0,F
00610:  BNZ   0618
00612:  MOVF   xDF,W
00614:  SUBWF  x41,W
00616:  BC    069A
....................          { 
....................             if (sw->direction == up) //para cima 
00618:  MOVLW  0E
0061A:  ADDWF  xDC,W
0061C:  MOVWF  FE9
0061E:  MOVLW  00
00620:  ADDWFC xDD,W
00622:  MOVWF  FEA
00624:  MOVLW  00
00626:  BTFSC  FEF.2
00628:  MOVLW  01
0062A:  ANDLW  01
0062C:  BNZ   065E
....................             { 
....................                ++sw->current_level; 
0062E:  MOVLW  09
00630:  ADDWF  xDC,W
00632:  MOVWF  FE9
00634:  MOVLW  00
00636:  ADDWFC xDD,W
00638:  MOVWF  FEA
0063A:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
0063C:  MOVLW  09
0063E:  ADDWF  xDC,W
00640:  MOVWF  FE9
00642:  MOVLW  00
00644:  ADDWFC xDD,W
00646:  MOVWF  FEA
00648:  MOVF   FEF,W
0064A:  SUBLW  7F
0064C:  BNZ   065C
0064E:  MOVLW  0E
00650:  ADDWF  xDC,W
00652:  MOVWF  FE9
00654:  MOVLW  00
00656:  ADDWFC xDD,W
00658:  MOVWF  FEA
0065A:  BSF    FEF.2
....................             } 
....................             else//para baixo 
0065C:  BRA    069A
....................             { 
....................                --sw->current_level; 
0065E:  MOVLW  09
00660:  ADDWF  xDC,W
00662:  MOVWF  FE9
00664:  MOVLW  00
00666:  ADDWFC xDD,W
00668:  MOVWF  FEA
0066A:  DECF   FEF,F
....................                if (sw->current_level == 0)  
0066C:  MOVLW  09
0066E:  ADDWF  xDC,W
00670:  MOVWF  FE9
00672:  MOVLW  00
00674:  ADDWFC xDD,W
00676:  MOVWF  FEA
00678:  MOVF   FEF,F
0067A:  BNZ   069A
....................                {   
....................                   sw->direction = up; 
0067C:  MOVLW  0E
0067E:  ADDWF  xDC,W
00680:  MOVWF  FE9
00682:  MOVLW  00
00684:  ADDWFC xDD,W
00686:  MOVWF  FEA
00688:  BCF    FEF.2
....................                   sw->off.value=1; 
0068A:  MOVLW  07
0068C:  ADDWF  xDC,W
0068E:  MOVWF  FE9
00690:  MOVLW  00
00692:  ADDWFC xDD,W
00694:  MOVWF  FEA
00696:  MOVLW  01
00698:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
0069A:  MOVLW  0A
0069C:  ADDWF  xDC,W
0069E:  MOVWF  FE9
006A0:  MOVLW  00
006A2:  ADDWFC xDD,W
006A4:  MOVWF  FEA
006A6:  MOVFF  63B,FEF
006AA:  MOVFF  63C,FEC
006AE:  MOVFF  63D,FEC
006B2:  MOVFF  63E,FEC
....................       } 
....................       } 
....................       else 
006B6:  BRA    06B8
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
006B8:  BRA    081A
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
006BA:  MOVLW  0E
006BC:  ADDWF  xDC,W
006BE:  MOVWF  FE9
006C0:  MOVLW  00
006C2:  ADDWFC xDD,W
006C4:  MOVWF  FEA
006C6:  MOVLW  00
006C8:  BTFSC  FEF.1
006CA:  MOVLW  01
006CC:  ANDLW  01
006CE:  BTFSS  FD8.2
006D0:  BRA    07FE
....................       { 
....................          sw->previous_state = button_depressed; 
006D2:  MOVLW  0E
006D4:  ADDWF  xDC,W
006D6:  MOVWF  FE9
006D8:  MOVLW  00
006DA:  ADDWFC xDD,W
006DC:  MOVWF  FEA
006DE:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
006E0:  MOVLW  0F
006E2:  ADDWF  xDC,W
006E4:  MOVWF  FE9
006E6:  MOVLW  00
006E8:  ADDWFC xDD,W
006EA:  MOVWF  FEA
006EC:  MOVF   FEF,W
006EE:  SUBLW  02
006F0:  BNZ   0736
....................          { 
....................             sw-> outstate = on; 
006F2:  MOVLW  0F
006F4:  ADDWF  xDC,W
006F6:  MOVWF  FE9
006F8:  MOVLW  00
006FA:  ADDWFC xDD,W
006FC:  MOVWF  FEA
006FE:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
00700:  MOVLW  0E
00702:  ADDWF  xDC,W
00704:  MOVWF  FE9
00706:  MOVLW  00
00708:  ADDWFC xDD,W
0070A:  MOVWF  FEA
0070C:  MOVLW  00
0070E:  BTFSC  FEF.2
00710:  MOVLW  01
00712:  ANDLW  01
00714:  BNZ   0726
00716:  MOVLW  0E
00718:  ADDWF  xDC,W
0071A:  MOVWF  FE9
0071C:  MOVLW  00
0071E:  ADDWFC xDD,W
00720:  MOVWF  FEA
00722:  BSF    FEF.2
....................             else sw->direction = up; 
00724:  BRA    0734
00726:  MOVLW  0E
00728:  ADDWF  xDC,W
0072A:  MOVWF  FE9
0072C:  MOVLW  00
0072E:  ADDWFC xDD,W
00730:  MOVWF  FEA
00732:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
00734:  BRA    07FE
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
00736:  MOVLW  0F
00738:  ADDWF  xDC,W
0073A:  MOVWF  FE9
0073C:  MOVLW  00
0073E:  ADDWFC xDD,W
00740:  MOVWF  FEA
00742:  DECFSZ FEF,W
00744:  BRA    0782
....................             { 
....................                sw->outstate=on; 
00746:  MOVLW  0F
00748:  ADDWF  xDC,W
0074A:  MOVWF  FE9
0074C:  MOVLW  00
0074E:  ADDWFC xDD,W
00750:  MOVWF  FEA
00752:  CLRF   FEF
....................                sw->on.value=1; 
00754:  MOVLW  04
00756:  ADDWF  xDC,W
00758:  MOVWF  FE9
0075A:  MOVLW  00
0075C:  ADDWFC xDD,W
0075E:  MOVWF  FEA
00760:  MOVLW  01
00762:  MOVWF  FEF
....................                sw->direction = down; 
00764:  MOVLW  0E
00766:  ADDWF  xDC,W
00768:  MOVWF  FE9
0076A:  MOVLW  00
0076C:  ADDWFC xDD,W
0076E:  MOVWF  FEA
00770:  BSF    FEF.2
....................                sw->on.needs_update=true; 
00772:  MOVLW  05
00774:  ADDWF  xDC,W
00776:  MOVWF  FE9
00778:  MOVLW  00
0077A:  ADDWFC xDD,W
0077C:  MOVWF  FEA
0077E:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
00780:  BRA    07FE
00782:  MOVLW  0F
00784:  ADDWF  xDC,W
00786:  MOVWF  FE9
00788:  MOVLW  00
0078A:  ADDWFC xDD,W
0078C:  MOVWF  FEA
0078E:  MOVF   FEF,F
00790:  BNZ   07D0
....................             { 
....................                sw->outstate=off; 
00792:  MOVLW  0F
00794:  ADDWF  xDC,W
00796:  MOVWF  FE9
00798:  MOVLW  00
0079A:  ADDWFC xDD,W
0079C:  MOVWF  FEA
0079E:  MOVLW  01
007A0:  MOVWF  FEF
....................                sw->off.value=1; 
007A2:  MOVLW  07
007A4:  ADDWF  xDC,W
007A6:  MOVWF  FE9
007A8:  MOVLW  00
007AA:  ADDWFC xDD,W
007AC:  MOVWF  FEA
007AE:  MOVLW  01
007B0:  MOVWF  FEF
....................                sw->direction = up; 
007B2:  MOVLW  0E
007B4:  ADDWF  xDC,W
007B6:  MOVWF  FE9
007B8:  MOVLW  00
007BA:  ADDWFC xDD,W
007BC:  MOVWF  FEA
007BE:  BCF    FEF.2
....................                sw->off.needs_update=true; 
007C0:  MOVLW  08
007C2:  ADDWF  xDC,W
007C4:  MOVWF  FE9
007C6:  MOVLW  00
007C8:  ADDWFC xDD,W
007CA:  MOVWF  FEA
007CC:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
007CE:  BRA    07FE
007D0:  MOVLW  0F
007D2:  ADDWF  xDC,W
007D4:  MOVWF  FE9
007D6:  MOVLW  00
007D8:  ADDWFC xDD,W
007DA:  MOVWF  FEA
007DC:  MOVF   FEF,W
007DE:  SUBLW  04
007E0:  BNZ   07FE
....................             { 
....................                sw->outstate=on; 
007E2:  MOVLW  0F
007E4:  ADDWF  xDC,W
007E6:  MOVWF  FE9
007E8:  MOVLW  00
007EA:  ADDWFC xDD,W
007EC:  MOVWF  FEA
007EE:  CLRF   FEF
....................                sw->direction = down; 
007F0:  MOVLW  0E
007F2:  ADDWF  xDC,W
007F4:  MOVWF  FE9
007F6:  MOVLW  00
007F8:  ADDWFC xDD,W
007FA:  MOVWF  FEA
007FC:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
007FE:  MOVLW  0A
00800:  ADDWF  xDC,W
00802:  MOVWF  FE9
00804:  MOVLW  00
00806:  ADDWFC xDD,W
00808:  MOVWF  FEA
0080A:  MOVFF  63B,FEF
0080E:  MOVFF  63C,FEC
00812:  MOVFF  63D,FEC
00816:  MOVFF  63E,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
0081A:  MOVLW  09
0081C:  ADDWF  xDC,W
0081E:  MOVWF  FE9
00820:  MOVLW  00
00822:  ADDWFC xDD,W
00824:  MOVWF  FEA
00826:  MOVF   FEF,W
00828:  SUBWF  xDE,W
0082A:  BZ    0862
....................    { 
....................       sw->dim_level.value=sw->current_level; 
0082C:  MOVLW  01
0082E:  ADDWF  xDC,W
00830:  MOVWF  01
00832:  MOVLW  00
00834:  ADDWFC xDD,W
00836:  MOVWF  03
00838:  MOVLW  09
0083A:  ADDWF  xDC,W
0083C:  MOVWF  FE9
0083E:  MOVLW  00
00840:  ADDWFC xDD,W
00842:  MOVWF  FEA
00844:  MOVFF  FEF,6E1
00848:  MOVFF  03,FEA
0084C:  MOVFF  01,FE9
00850:  MOVFF  6E1,FEF
....................       sw->dim_level.needs_update=true; 
00854:  MOVLW  02
00856:  ADDWF  xDC,W
00858:  MOVWF  FE9
0085A:  MOVLW  00
0085C:  ADDWFC xDD,W
0085E:  MOVWF  FEA
00860:  BSF    FEF.0
....................    } 
.................... } 
00862:  MOVLB  0
00864:  GOTO   0EAA (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
00A72:  MOVLB  6
00A74:  CLRF   xD9
00A76:  MOVLB  1
00A78:  MOVF   x3E,W
00A7A:  MOVLB  6
00A7C:  SUBWF  xD9,W
00A7E:  BTFSC  FD8.0
00A80:  BRA    0EB0
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
00A82:  CLRF   xDB
00A84:  MOVFF  6D9,6DA
00A88:  CLRF   xDD
00A8A:  MOVLW  21
00A8C:  MOVWF  xDC
00A8E:  MOVLB  0
00A90:  RCALL  0420
00A92:  MOVFF  02,03
00A96:  MOVF   01,W
00A98:  ADDLW  40
00A9A:  MOVWF  01
00A9C:  MOVLW  01
00A9E:  ADDWFC 03,F
00AA0:  MOVFF  01,FE9
00AA4:  MOVFF  03,FEA
00AA8:  MOVF   FEF,W
00AAA:  BZ    0AC0
00AAC:  XORLW  03
00AAE:  BTFSC  FD8.2
00AB0:  BRA    0C06
00AB2:  XORLW  02
00AB4:  BTFSC  FD8.2
00AB6:  BRA    0C08
00AB8:  XORLW  03
00ABA:  BTFSC  FD8.2
00ABC:  BRA    0D56
00ABE:  BRA    0EA8
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00AC0:  MOVLB  6
00AC2:  CLRF   xDB
00AC4:  MOVFF  6D9,6DA
00AC8:  CLRF   xDD
00ACA:  MOVLW  21
00ACC:  MOVWF  xDC
00ACE:  MOVLB  0
00AD0:  RCALL  0420
00AD2:  MOVF   01,W
00AD4:  ADDLW  02
00AD6:  MOVLB  6
00AD8:  MOVWF  xDA
00ADA:  MOVLW  00
00ADC:  ADDWFC 02,W
00ADE:  MOVWF  xDB
00AE0:  MOVLW  01
00AE2:  ADDWF  xDA,W
00AE4:  MOVWF  01
00AE6:  MOVLW  00
00AE8:  ADDWFC xDB,W
00AEA:  MOVWF  03
00AEC:  MOVF   01,W
00AEE:  ADDLW  3E
00AF0:  MOVWF  01
00AF2:  MOVLW  01
00AF4:  ADDWFC 03,F
00AF6:  MOVF   01,W
00AF8:  ADDLW  10
00AFA:  MOVWF  FE9
00AFC:  MOVLW  00
00AFE:  ADDWFC 03,W
00B00:  MOVWF  FEA
00B02:  MOVFF  FEF,6DC
00B06:  MOVFF  6DC,6DD
00B0A:  MOVLW  01
00B0C:  MOVWF  xDE
00B0E:  MOVLW  0F
00B10:  MOVWF  xE0
00B12:  MOVLW  92
00B14:  MOVWF  xDF
00B16:  MOVLB  0
00B18:  RCALL  0442
00B1A:  MOVFF  6DC,6DD
00B1E:  MOVLW  0F
00B20:  MOVLB  6
00B22:  MOVWF  xDF
00B24:  MOVLW  80
00B26:  MOVWF  xDE
00B28:  MOVLB  0
00B2A:  RCALL  0484
00B2C:  BTFSS  01.0
00B2E:  BRA    0B78
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00B30:  MOVLB  6
00B32:  CLRF   xDB
00B34:  MOVFF  6D9,6DA
00B38:  CLRF   xDD
00B3A:  MOVLW  21
00B3C:  MOVWF  xDC
00B3E:  MOVLB  0
00B40:  RCALL  0420
00B42:  MOVF   01,W
00B44:  ADDLW  02
00B46:  MOVLB  6
00B48:  MOVWF  xDA
00B4A:  MOVLW  00
00B4C:  ADDWFC 02,W
00B4E:  MOVWF  xDB
00B50:  MOVLW  01
00B52:  ADDWF  xDA,W
00B54:  MOVWF  01
00B56:  MOVLW  00
00B58:  ADDWFC xDB,W
00B5A:  MOVWF  03
00B5C:  MOVF   01,W
00B5E:  ADDLW  3E
00B60:  MOVWF  01
00B62:  MOVLW  01
00B64:  ADDWFC 03,F
00B66:  MOVF   01,W
00B68:  ADDLW  0E
00B6A:  MOVWF  FE9
00B6C:  MOVLW  00
00B6E:  ADDWFC 03,W
00B70:  MOVWF  FEA
00B72:  BSF    FEF.0
....................             } 
....................             else  
00B74:  BRA    0BBC
00B76:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00B78:  MOVLB  6
00B7A:  CLRF   xDB
00B7C:  MOVFF  6D9,6DA
00B80:  CLRF   xDD
00B82:  MOVLW  21
00B84:  MOVWF  xDC
00B86:  MOVLB  0
00B88:  RCALL  0420
00B8A:  MOVF   01,W
00B8C:  ADDLW  02
00B8E:  MOVLB  6
00B90:  MOVWF  xDA
00B92:  MOVLW  00
00B94:  ADDWFC 02,W
00B96:  MOVWF  xDB
00B98:  MOVLW  01
00B9A:  ADDWF  xDA,W
00B9C:  MOVWF  01
00B9E:  MOVLW  00
00BA0:  ADDWFC xDB,W
00BA2:  MOVWF  03
00BA4:  MOVF   01,W
00BA6:  ADDLW  3E
00BA8:  MOVWF  01
00BAA:  MOVLW  01
00BAC:  ADDWFC 03,F
00BAE:  MOVF   01,W
00BB0:  ADDLW  0E
00BB2:  MOVWF  FE9
00BB4:  MOVLW  00
00BB6:  ADDWFC 03,W
00BB8:  MOVWF  FEA
00BBA:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00BBC:  CLRF   xDB
00BBE:  MOVFF  6D9,6DA
00BC2:  CLRF   xDD
00BC4:  MOVLW  21
00BC6:  MOVWF  xDC
00BC8:  MOVLB  0
00BCA:  RCALL  0420
00BCC:  MOVF   01,W
00BCE:  ADDLW  02
00BD0:  MOVLB  6
00BD2:  MOVWF  xDA
00BD4:  MOVLW  00
00BD6:  ADDWFC 02,W
00BD8:  MOVWF  xDB
00BDA:  MOVLW  01
00BDC:  ADDWF  xDA,W
00BDE:  MOVWF  01
00BE0:  MOVLW  00
00BE2:  ADDWFC xDB,W
00BE4:  MOVWF  03
00BE6:  MOVF   01,W
00BE8:  ADDLW  3E
00BEA:  MOVWF  01
00BEC:  MOVLW  01
00BEE:  ADDWFC 03,F
00BF0:  MOVFF  01,6DA
00BF4:  MOVFF  03,6DB
00BF8:  MOVFF  03,6DD
00BFC:  MOVFF  01,6DC
00C00:  MOVLB  0
00C02:  BRA    04B6
....................             break; 
00C04:  BRA    0EAA
....................     case timer: 
....................  
....................            break; 
00C06:  BRA    0EAA
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00C08:  MOVLB  6
00C0A:  CLRF   xDB
00C0C:  MOVFF  6D9,6DA
00C10:  CLRF   xDD
00C12:  MOVLW  21
00C14:  MOVWF  xDC
00C16:  MOVLB  0
00C18:  RCALL  0420
00C1A:  MOVF   01,W
00C1C:  ADDLW  02
00C1E:  MOVLB  6
00C20:  MOVWF  xDA
00C22:  MOVLW  00
00C24:  ADDWFC 02,W
00C26:  MOVWF  xDB
00C28:  MOVLW  01
00C2A:  ADDWF  xDA,W
00C2C:  MOVWF  01
00C2E:  MOVLW  00
00C30:  ADDWFC xDB,W
00C32:  MOVWF  03
00C34:  MOVF   01,W
00C36:  ADDLW  3E
00C38:  MOVWF  01
00C3A:  MOVLW  01
00C3C:  ADDWFC 03,F
00C3E:  MOVF   01,W
00C40:  ADDLW  0C
00C42:  MOVWF  FE9
00C44:  MOVLW  00
00C46:  ADDWFC 03,W
00C48:  MOVWF  FEA
00C4A:  MOVFF  FEF,6DC
00C4E:  MOVFF  6DC,6DD
00C52:  MOVLW  01
00C54:  MOVWF  xDE
00C56:  MOVLW  0F
00C58:  MOVWF  xE0
00C5A:  MOVLW  92
00C5C:  MOVWF  xDF
00C5E:  MOVLB  0
00C60:  CALL   0442
00C64:  MOVFF  6DC,6DD
00C68:  MOVLW  0F
00C6A:  MOVLB  6
00C6C:  MOVWF  xDF
00C6E:  MOVLW  80
00C70:  MOVWF  xDE
00C72:  MOVLB  0
00C74:  RCALL  0484
00C76:  BTFSS  01.0
00C78:  BRA    0CC4
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00C7A:  MOVLB  6
00C7C:  CLRF   xDB
00C7E:  MOVFF  6D9,6DA
00C82:  CLRF   xDD
00C84:  MOVLW  21
00C86:  MOVWF  xDC
00C88:  MOVLB  0
00C8A:  CALL   0420
00C8E:  MOVF   01,W
00C90:  ADDLW  02
00C92:  MOVLB  6
00C94:  MOVWF  xDA
00C96:  MOVLW  00
00C98:  ADDWFC 02,W
00C9A:  MOVWF  xDB
00C9C:  MOVLW  01
00C9E:  ADDWF  xDA,W
00CA0:  MOVWF  01
00CA2:  MOVLW  00
00CA4:  ADDWFC xDB,W
00CA6:  MOVWF  03
00CA8:  MOVF   01,W
00CAA:  ADDLW  3E
00CAC:  MOVWF  01
00CAE:  MOVLW  01
00CB0:  ADDWFC 03,F
00CB2:  MOVF   01,W
00CB4:  ADDLW  06
00CB6:  MOVWF  FE9
00CB8:  MOVLW  00
00CBA:  ADDWFC 03,W
00CBC:  MOVWF  FEA
00CBE:  BSF    FEF.0
....................             } 
....................             else  
00CC0:  BRA    0D0A
00CC2:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00CC4:  MOVLB  6
00CC6:  CLRF   xDB
00CC8:  MOVFF  6D9,6DA
00CCC:  CLRF   xDD
00CCE:  MOVLW  21
00CD0:  MOVWF  xDC
00CD2:  MOVLB  0
00CD4:  CALL   0420
00CD8:  MOVF   01,W
00CDA:  ADDLW  02
00CDC:  MOVLB  6
00CDE:  MOVWF  xDA
00CE0:  MOVLW  00
00CE2:  ADDWFC 02,W
00CE4:  MOVWF  xDB
00CE6:  MOVLW  01
00CE8:  ADDWF  xDA,W
00CEA:  MOVWF  01
00CEC:  MOVLW  00
00CEE:  ADDWFC xDB,W
00CF0:  MOVWF  03
00CF2:  MOVF   01,W
00CF4:  ADDLW  3E
00CF6:  MOVWF  01
00CF8:  MOVLW  01
00CFA:  ADDWFC 03,F
00CFC:  MOVF   01,W
00CFE:  ADDLW  06
00D00:  MOVWF  FE9
00D02:  MOVLW  00
00D04:  ADDWFC 03,W
00D06:  MOVWF  FEA
00D08:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00D0A:  CLRF   xDB
00D0C:  MOVFF  6D9,6DA
00D10:  CLRF   xDD
00D12:  MOVLW  21
00D14:  MOVWF  xDC
00D16:  MOVLB  0
00D18:  CALL   0420
00D1C:  MOVF   01,W
00D1E:  ADDLW  02
00D20:  MOVLB  6
00D22:  MOVWF  xDA
00D24:  MOVLW  00
00D26:  ADDWFC 02,W
00D28:  MOVWF  xDB
00D2A:  MOVLW  01
00D2C:  ADDWF  xDA,W
00D2E:  MOVWF  01
00D30:  MOVLW  00
00D32:  ADDWFC xDB,W
00D34:  MOVWF  03
00D36:  MOVF   01,W
00D38:  ADDLW  3E
00D3A:  MOVWF  01
00D3C:  MOVLW  01
00D3E:  ADDWFC 03,F
00D40:  MOVFF  01,6DA
00D44:  MOVFF  03,6DB
00D48:  MOVFF  03,6DD
00D4C:  MOVFF  01,6DC
00D50:  MOVLB  0
00D52:  BRA    0868
....................     break; 
00D54:  BRA    0EAA
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00D56:  MOVLB  6
00D58:  CLRF   xDB
00D5A:  MOVFF  6D9,6DA
00D5E:  CLRF   xDD
00D60:  MOVLW  21
00D62:  MOVWF  xDC
00D64:  MOVLB  0
00D66:  CALL   0420
00D6A:  MOVF   01,W
00D6C:  ADDLW  02
00D6E:  MOVLB  6
00D70:  MOVWF  xDA
00D72:  MOVLW  00
00D74:  ADDWFC 02,W
00D76:  MOVWF  xDB
00D78:  MOVLW  01
00D7A:  ADDWF  xDA,W
00D7C:  MOVWF  01
00D7E:  MOVLW  00
00D80:  ADDWFC xDB,W
00D82:  MOVWF  03
00D84:  MOVF   01,W
00D86:  ADDLW  3E
00D88:  MOVWF  01
00D8A:  MOVLW  01
00D8C:  ADDWFC 03,F
00D8E:  MOVF   01,W
00D90:  ADDLW  09
00D92:  MOVWF  FE9
00D94:  MOVLW  00
00D96:  ADDWFC 03,W
00D98:  MOVWF  FEA
00D9A:  MOVFF  FEF,6DC
00D9E:  MOVFF  6DC,6DD
00DA2:  MOVLW  01
00DA4:  MOVWF  xDE
00DA6:  MOVLW  0F
00DA8:  MOVWF  xE0
00DAA:  MOVLW  92
00DAC:  MOVWF  xDF
00DAE:  MOVLB  0
00DB0:  CALL   0442
00DB4:  MOVFF  6DC,6DD
00DB8:  MOVLW  0F
00DBA:  MOVLB  6
00DBC:  MOVWF  xDF
00DBE:  MOVLW  80
00DC0:  MOVWF  xDE
00DC2:  MOVLB  0
00DC4:  CALL   0484
00DC8:  BTFSS  01.0
00DCA:  BRA    0E16
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00DCC:  MOVLB  6
00DCE:  CLRF   xDB
00DD0:  MOVFF  6D9,6DA
00DD4:  CLRF   xDD
00DD6:  MOVLW  21
00DD8:  MOVWF  xDC
00DDA:  MOVLB  0
00DDC:  CALL   0420
00DE0:  MOVF   01,W
00DE2:  ADDLW  02
00DE4:  MOVLB  6
00DE6:  MOVWF  xDA
00DE8:  MOVLW  00
00DEA:  ADDWFC 02,W
00DEC:  MOVWF  xDB
00DEE:  MOVLW  01
00DF0:  ADDWF  xDA,W
00DF2:  MOVWF  01
00DF4:  MOVLW  00
00DF6:  ADDWFC xDB,W
00DF8:  MOVWF  03
00DFA:  MOVF   01,W
00DFC:  ADDLW  3E
00DFE:  MOVWF  01
00E00:  MOVLW  01
00E02:  ADDWFC 03,F
00E04:  MOVF   01,W
00E06:  ADDLW  06
00E08:  MOVWF  FE9
00E0A:  MOVLW  00
00E0C:  ADDWFC 03,W
00E0E:  MOVWF  FEA
00E10:  BSF    FEF.0
....................             } 
....................             else  
00E12:  BRA    0E5C
00E14:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00E16:  MOVLB  6
00E18:  CLRF   xDB
00E1A:  MOVFF  6D9,6DA
00E1E:  CLRF   xDD
00E20:  MOVLW  21
00E22:  MOVWF  xDC
00E24:  MOVLB  0
00E26:  CALL   0420
00E2A:  MOVF   01,W
00E2C:  ADDLW  02
00E2E:  MOVLB  6
00E30:  MOVWF  xDA
00E32:  MOVLW  00
00E34:  ADDWFC 02,W
00E36:  MOVWF  xDB
00E38:  MOVLW  01
00E3A:  ADDWF  xDA,W
00E3C:  MOVWF  01
00E3E:  MOVLW  00
00E40:  ADDWFC xDB,W
00E42:  MOVWF  03
00E44:  MOVF   01,W
00E46:  ADDLW  3E
00E48:  MOVWF  01
00E4A:  MOVLW  01
00E4C:  ADDWFC 03,F
00E4E:  MOVF   01,W
00E50:  ADDLW  06
00E52:  MOVWF  FE9
00E54:  MOVLW  00
00E56:  ADDWFC 03,W
00E58:  MOVWF  FEA
00E5A:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00E5C:  CLRF   xDB
00E5E:  MOVFF  6D9,6DA
00E62:  CLRF   xDD
00E64:  MOVLW  21
00E66:  MOVWF  xDC
00E68:  MOVLB  0
00E6A:  CALL   0420
00E6E:  MOVF   01,W
00E70:  ADDLW  02
00E72:  MOVLB  6
00E74:  MOVWF  xDA
00E76:  MOVLW  00
00E78:  ADDWFC 02,W
00E7A:  MOVWF  xDB
00E7C:  MOVLW  01
00E7E:  ADDWF  xDA,W
00E80:  MOVWF  01
00E82:  MOVLW  00
00E84:  ADDWFC xDB,W
00E86:  MOVWF  03
00E88:  MOVF   01,W
00E8A:  ADDLW  3E
00E8C:  MOVWF  01
00E8E:  MOVLW  01
00E90:  ADDWFC 03,F
00E92:  MOVFF  01,6DA
00E96:  MOVFF  03,6DB
00E9A:  MOVFF  03,6DD
00E9E:  MOVFF  01,6DC
00EA2:  MOVLB  0
00EA4:  BRA    0988
....................     break; 
00EA6:  BRA    0EAA
....................     default: 
....................  
....................             break;  
00EA8:  BRA    0EAA
....................             } 
....................  
....................    } 
00EAA:  MOVLB  6
00EAC:  INCF   xD9,F
00EAE:  BRA    0A76
.................... } 
00EB0:  MOVLB  0
00EB2:  GOTO   0ED0 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00EB6:  MOVLW  01
00EB8:  MOVLB  6
00EBA:  ADDWF  x3B,F
00EBC:  BTFSC  FD8.0
00EBE:  INCF   x3C,F
00EC0:  BTFSC  FD8.2
00EC2:  INCF   x3D,F
00EC4:  BTFSC  FD8.2
00EC6:  INCF   x3E,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00EC8:  BTFSS  x3B.1
00ECA:  BRA    0ED2
00ECC:  MOVLB  0
00ECE:  BRA    0A72
00ED0:  MOVLB  6
.................... } 
....................  
00ED2:  BCF    FF2.2
00ED4:  MOVLB  0
00ED6:  GOTO   0120
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
*
00F56:  BSF    xB5.5
....................       portc=MAKE8(onoffsvalue,1); 
00F58:  MOVLB  5
00F5A:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00F5E:  MOVFF  57F,F83
....................          printf("MISS"); 
00F62:  MOVLW  78
00F64:  MOVWF  FF6
00F66:  MOVLW  0F
00F68:  MOVWF  FF7
00F6A:  MOVLW  00
00F6C:  MOVWF  FF8
00F6E:  MOVLB  0
00F70:  RCALL  0F2E
.................... } 
00F72:  BCF    F9E.0
00F74:  GOTO   0120
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
*
00F7E:  MOVLB  6
00F80:  INCF   x48,F
....................    if(clockT2temp==200)//1 second call 
00F82:  MOVF   x48,W
00F84:  SUBLW  C8
00F86:  BNZ   0FA0
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00F88:  CLRF   x48
....................       ++secClock; 
00F8A:  MOVLW  01
00F8C:  ADDWF  24,F
00F8E:  BTFSC  FD8.0
00F90:  INCF   25,F
00F92:  BTFSC  FD8.2
00F94:  INCF   26,F
00F96:  BTFSC  FD8.2
00F98:  INCF   27,F
....................       secondFlag=true; 
00F9A:  MOVLB  0
00F9C:  BSF    xB5.4
00F9E:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00FA0:  BCF    F9E.1
00FA2:  MOVLB  0
00FA4:  GOTO   0120
.................... #int_EXT fast 
.................... void  EXT_isr(void)  
.................... { 
.................... /* 
.................... portc=MAKE8(onoffsvalue,1); 
.................... portd=MAKE8(onoffsvalue,0); 
.................... CCP_1=36819; 
.................... mnumluzes=0; 
.................... set_timer1(0); 
.................... return; 
.................... */ 
....................          portc=MAKE8(onoffsvalue,1); 
00FA8:  MOVLB  5
00FAA:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00FAE:  MOVFF  57F,F83
....................    { 
....................          if (organizado) 
00FB2:  MOVLB  0
00FB4:  BTFSS  xB5.2
00FB6:  BRA    0FDA
....................          { 
....................             organizado=0; 
00FB8:  BCF    xB5.2
....................             if (actmat)  
00FBA:  BTFSS  xB5.3
00FBC:  BRA    0FCE
....................             { 
....................                actmat=0; 
00FBE:  BCF    xB5.3
....................                pointer=delays1; 
00FC0:  MOVLW  05
00FC2:  MOVLB  5
00FC4:  MOVWF  x7C
00FC6:  MOVLW  91
00FC8:  MOVWF  x7B
....................             } 
....................             else 
00FCA:  BRA    0FDA
00FCC:  MOVLB  0
....................             { 
....................                actmat=1; 
00FCE:  BSF    xB5.3
....................                pointer=delays2; 
00FD0:  MOVLW  05
00FD2:  MOVLB  5
00FD4:  MOVWF  x7C
00FD6:  MOVLW  D5
00FD8:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00FDA:  MOVLB  5
00FDC:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00FDE:  MOVLB  7
00FE0:  CLRF   x06
00FE2:  CLRF   x07
*
0104E:  MOVFF  02,707
01052:  MOVFF  01,706
01056:  BCF    FD8.0
01058:  RLCF   01,W
0105A:  MOVWF  02
0105C:  RLCF   x07,W
0105E:  MOVWF  03
01060:  MOVF   02,W
01062:  MOVLB  0
01064:  CALL   01AA
01068:  TBLRD*+
0106A:  MOVFF  FF5,03
0106E:  MOVWF  FBE
01070:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
01074:  MOVLW  10
01076:  MOVLB  7
01078:  MOVWF  x06
0107A:  CLRF   x07
*
010E6:  MOVFF  01,57E
....................           
....................    } 
....................          set_timer1(0); 
010EA:  CLRF   FCF
010EC:  CLRF   FCE
....................          syncError=false; 
010EE:  MOVLB  0
010F0:  BCF    xB5.5
.................... } 
....................  
010F2:  BCF    FF2.1
010F4:  RETFIE 1
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {  /* 
.................... portc=(portc & MAKE8(0b1111111111111110,1)); 
.................... portd=(portd & MAKE8(0b1111111111111110,0)); 
.................... return;*/ 
....................     // while(true){}; 
....................    if(mnumluzes!=0) 
010F6:  MOVLB  5
010F8:  MOVF   x7E,F
010FA:  BTFSC  FD8.2
010FC:  BRA    122A
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
010FE:  MOVFF  57D,706
01102:  MOVLW  01
01104:  MOVLB  7
01106:  MOVWF  x07
*
01172:  MOVFF  02,6DA
01176:  MOVFF  01,6D9
....................       portc=(portc & MAKE8(auxccp,1)); 
0117A:  MOVLB  6
0117C:  MOVF   xDA,W
0117E:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
01180:  MOVF   xD9,W
01182:  ANDWF  F83,F
....................       ++vez; 
01184:  MOVLB  5
01186:  INCF   x7D,F
....................       --mnumluzes; 
01188:  DECF   x7E,F
....................       if(mnumluzes!=0) CCP_1=matrizluz[fpointer(vez,0)]; 
0118A:  MOVF   x7E,F
0118C:  BZ    122A
0118E:  MOVFF  57D,706
01192:  MOVLB  7
01194:  CLRF   x07
*
01200:  MOVFF  02,6DC
01204:  MOVFF  01,6DB
01208:  BCF    FD8.0
0120A:  MOVLB  6
0120C:  RLCF   01,W
0120E:  MOVWF  02
01210:  RLCF   xDC,W
01212:  MOVWF  03
01214:  MOVF   02,W
01216:  MOVLB  0
01218:  CALL   01AA
0121C:  TBLRD*+
0121E:  MOVFF  FF5,03
01222:  MOVWF  FBE
01224:  MOVFF  03,FBF
01228:  MOVLB  5
....................    } 
.................... } 
....................  
0122A:  BCF    F9E.2
0122C:  MOVLB  0
0122E:  GOTO   0120
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
01232:  BCF    F9E.5
01234:  GOTO   0120
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
01238:  BCF    F9E.4
0123A:  GOTO   0120
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
0123E:  BCF    FA1.3
01240:  GOTO   0120
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
....................    oscError=1; 
01244:  BSF    xB5.6
.................... } 
....................  
01246:  BCF    FA1.7
01248:  GOTO   0120
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
01826:  RCALL  1476
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01828:  BCF    FA4.0
0182A:  GOTO   0120
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
0182E:  RCALL  1476
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01830:  BCF    FA4.1
01832:  GOTO   0120
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01C72:  RCALL  1A58
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C74:  BCF    FA4.2
01C76:  GOTO   0120
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01C7A:  RCALL  1A58
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C7C:  BCF    FA4.3
01C7E:  GOTO   0120
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01C82:  RCALL  1A58
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C84:  BCF    FA4.4
01C86:  GOTO   0120
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01C8A:  BCF    FA4.7
01C8C:  GOTO   0120
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01C90:  BCF    FA4.5
01C92:  GOTO   0120
.................... void interrupts_enable() 
.................... { 
....................    //enable_interrupts (int_canrx0); 
....................    //enable_interrupts (int_canrx1); 
....................    //enable_interrupts (int_cantx0); 
....................    //enable_interrupts (int_cantx1); 
....................    //enable_interrupts (int_cantx2); 
....................    //enable_interrupts (int_canirx); 
....................    //enable_interrupts (int_canerr); 
....................    enable_interrupts(INT_CCP1); 
*
05644:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
05646:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
05648:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
0564A:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
0564C:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    //enable_interrupts (int_OSCF) ; 
....................    enable_interrupts (GLOBAL) ; 
0564E:  MOVLW  C0
05650:  IORWF  FF2,F
.................... } 
05652:  GOTO   927C (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01EAE:  BRA    1D0A
....................    can_set_mode (CAN_OP_CONFIG) ;   
01EB0:  MOVLW  04
01EB2:  MOVLB  6
01EB4:  MOVWF  x61
01EB6:  MOVLB  0
01EB8:  RCALL  1CB4
....................    BRGCON1.brp = 4; 
01EBA:  MOVLW  C0
01EBC:  ANDWF  F70,W
01EBE:  IORLW  04
01EC0:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01EC2:  MOVLW  3F
01EC4:  ANDWF  F70,W
01EC6:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01EC8:  MOVLW  F8
01ECA:  ANDWF  F71,W
01ECC:  IORLW  02
01ECE:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01ED0:  MOVLW  C7
01ED2:  ANDWF  F71,W
01ED4:  IORLW  28
01ED6:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01ED8:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01EDA:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01EDC:  MOVLW  F8
01EDE:  ANDWF  F72,W
01EE0:  IORLW  05
01EE2:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01EE4:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01EE6:  MOVLB  6
01EE8:  CLRF   x61
01EEA:  MOVLB  0
01EEC:  RCALL  1CB4
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow / input reading 
01EEE:  MOVLW  81
01EF0:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); //capture and compare and sync check  
01EF2:  MOVLW  95
01EF4:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13);//seconds counter 
01EF6:  MOVLW  60
01EF8:  IORLW  06
01EFA:  MOVWF  FCA
01EFC:  MOVLW  F1
01EFE:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01F00:  MOVLW  0A
01F02:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01F04:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01F06:  MOVF   FC1,W
01F08:  ANDLW  C0
01F0A:  IORLW  0F
01F0C:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01F0E:  MOVF   FC0,W
01F10:  ANDLW  C0
01F12:  MOVWF  FC0
01F14:  BCF    FC0.7
01F16:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01F18:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01F1A:  BCF    FC6.5
01F1C:  BCF    F94.5
01F1E:  BSF    F94.4
01F20:  BCF    F94.3
01F22:  MOVLW  01
01F24:  MOVWF  FC6
01F26:  MOVLW  00
01F28:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01F2A:  MOVLW  07
01F2C:  MOVWF  FB4
01F2E:  MOVF   F95,W
01F30:  MOVWF  F95
01F32:  MOVF   F96,W
01F34:  MOVWF  F96
01F36:  CLRWDT
01F38:  MOVLW  20
01F3A:  MOVWF  00
01F3C:  DECFSZ 00,F
01F3E:  BRA    1F3C
01F40:  BRA    1F42
01F42:  MOVF   FB4,W
01F44:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01F46:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01F48:  CLRF   FB1
....................    output_low(PIN_B1); 
01F4A:  BCF    F93.1
01F4C:  BCF    F8A.1
....................    output_low(PIN_B6); 
01F4E:  BCF    F93.6
01F50:  BCF    F8A.6
....................    output_low(PIN_B7); 
01F52:  BCF    F93.7
01F54:  BCF    F8A.7
....................    output_low(PIN_E3); 
01F56:  BCF    F96.3
01F58:  BCF    F8D.3
....................    #use fast_io(C) 
....................    #use fast_io(D) 
....................    setup_wdt (WDT_ON) ; 
01F5A:  BSF    FD1.0
....................    } 
01F5C:  GOTO   8FDC (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
08DB2:  CLRF   FF8
08DB4:  BCF    FF1.2
08DB6:  BCF    F9F.0
08DB8:  BCF    F9F.1
08DBA:  BCF    F9F.5
08DBC:  BCF    F9F.4
08DBE:  BCF    F9F.2
08DC0:  BCF    FA2.3
08DC2:  BCF    FA5.7
08DC4:  BCF    FA5.5
08DC6:  BCF    FA5.4
08DC8:  BCF    FA5.3
08DCA:  BCF    FA5.2
08DCC:  BCF    FA5.1
08DCE:  BCF    FA5.0
08DD0:  BCF    FA2.7
08DD2:  BSF    FD0.7
08DD4:  BSF    07.7
08DD6:  CLRF   FEA
08DD8:  CLRF   FE9
08DDA:  BCF    F93.5
08DDC:  BSF    F8A.5
08DDE:  CLRF   27
08DE0:  CLRF   26
08DE2:  CLRF   25
08DE4:  CLRF   24
08DE6:  CLRF   28
08DE8:  BCF    xB5.0
08DEA:  CLRF   xB6
08DEC:  BSF    xB5.1
08DEE:  MOVLB  5
08DF0:  CLRF   x7A
08DF2:  MOVLB  0
08DF4:  BCF    xB5.3
08DF6:  MOVLB  5
08DF8:  CLRF   x7E
08DFA:  MOVLW  FF
08DFC:  MOVWF  x80
08DFE:  MOVWF  x7F
08E00:  MOVLB  6
08E02:  CLRF   x3A
08E04:  CLRF   x39
08E06:  MOVLB  0
08E08:  BCF    xB5.6
08E0A:  MOVLB  6
08E0C:  CLRF   x41
08E0E:  CLRF   x45
08E10:  CLRF   x44
08E12:  CLRF   x43
08E14:  MOVLW  27
08E16:  MOVWF  x42
08E18:  MOVF   FC1,W
08E1A:  ANDLW  C0
08E1C:  IORLW  0F
08E1E:  MOVWF  FC1
08E20:  MOVLW  07
08E22:  MOVWF  FB4
08E24:  CLRF   1C
08E26:  MOVLW  01
08E28:  MOVWF  1D
08E2A:  MOVLW  02
08E2C:  MOVWF  1E
08E2E:  MOVLW  03
08E30:  MOVWF  1F
08E32:  MOVLW  04
08E34:  MOVWF  20
08E36:  MOVLW  05
08E38:  MOVWF  21
08E3A:  MOVLW  20
08E3C:  MOVWF  22
08E3E:  MOVLW  21
08E40:  MOVWF  23
08E42:  MOVLW  0B
08E44:  MOVLB  1
08E46:  MOVWF  x39
08E48:  CLRF   x3A
08E4A:  CLRF   x3B
08E4C:  CLRF   x3C
08E4E:  MOVLW  32
08E50:  MOVLB  5
08E52:  MOVWF  x81
08E54:  MOVWF  x82
08E56:  MOVWF  x83
08E58:  MOVWF  x84
08E5A:  MOVWF  x85
08E5C:  MOVWF  x86
08E5E:  MOVWF  x87
08E60:  MOVWF  x88
08E62:  MOVWF  x89
08E64:  MOVWF  x8A
08E66:  MOVWF  x8B
08E68:  MOVWF  x8C
08E6A:  MOVWF  x8D
08E6C:  MOVWF  x8E
08E6E:  MOVWF  x8F
08E70:  MOVWF  x90
08E72:  CLRF   x91
08E74:  CLRF   x92
08E76:  CLRF   x93
08E78:  CLRF   x94
08E7A:  CLRF   x95
08E7C:  CLRF   x96
08E7E:  MOVLW  01
08E80:  MOVWF  x97
08E82:  CLRF   x98
08E84:  CLRF   x99
08E86:  CLRF   x9A
08E88:  MOVLW  02
08E8A:  MOVWF  x9B
08E8C:  CLRF   x9C
08E8E:  CLRF   x9D
08E90:  CLRF   x9E
08E92:  MOVLW  03
08E94:  MOVWF  x9F
08E96:  CLRF   xA0
08E98:  CLRF   xA1
08E9A:  CLRF   xA2
08E9C:  MOVLW  04
08E9E:  MOVWF  xA3
08EA0:  CLRF   xA4
08EA2:  CLRF   xA5
08EA4:  CLRF   xA6
08EA6:  MOVLW  05
08EA8:  MOVWF  xA7
08EAA:  CLRF   xA8
08EAC:  CLRF   xA9
08EAE:  CLRF   xAA
08EB0:  MOVLW  06
08EB2:  MOVWF  xAB
08EB4:  CLRF   xAC
08EB6:  CLRF   xAD
08EB8:  CLRF   xAE
08EBA:  MOVLW  07
08EBC:  MOVWF  xAF
08EBE:  CLRF   xB0
08EC0:  CLRF   xB1
08EC2:  CLRF   xB2
08EC4:  MOVLW  08
08EC6:  MOVWF  xB3
08EC8:  CLRF   xB4
08ECA:  CLRF   xB5
08ECC:  CLRF   xB6
08ECE:  MOVLW  09
08ED0:  MOVWF  xB7
08ED2:  CLRF   xB8
08ED4:  CLRF   xB9
08ED6:  CLRF   xBA
08ED8:  MOVLW  0A
08EDA:  MOVWF  xBB
08EDC:  CLRF   xBC
08EDE:  CLRF   xBD
08EE0:  CLRF   xBE
08EE2:  MOVLW  0B
08EE4:  MOVWF  xBF
08EE6:  CLRF   xC0
08EE8:  CLRF   xC1
08EEA:  CLRF   xC2
08EEC:  MOVLW  0C
08EEE:  MOVWF  xC3
08EF0:  CLRF   xC4
08EF2:  CLRF   xC5
08EF4:  CLRF   xC6
08EF6:  MOVLW  0D
08EF8:  MOVWF  xC7
08EFA:  CLRF   xC8
08EFC:  CLRF   xC9
08EFE:  CLRF   xCA
08F00:  MOVLW  0E
08F02:  MOVWF  xCB
08F04:  CLRF   xCC
08F06:  CLRF   xCD
08F08:  CLRF   xCE
08F0A:  MOVLW  0F
08F0C:  MOVWF  xCF
08F0E:  CLRF   xD0
08F10:  CLRF   xD1
08F12:  CLRF   xD2
08F14:  CLRF   xD3
08F16:  CLRF   xD4
08F18:  CLRF   xD5
08F1A:  CLRF   xD6
08F1C:  CLRF   xD7
08F1E:  CLRF   xD8
08F20:  CLRF   xD9
08F22:  CLRF   xDA
08F24:  MOVLW  01
08F26:  MOVWF  xDB
08F28:  CLRF   xDC
08F2A:  CLRF   xDD
08F2C:  CLRF   xDE
08F2E:  MOVLW  02
08F30:  MOVWF  xDF
08F32:  CLRF   xE0
08F34:  CLRF   xE1
08F36:  CLRF   xE2
08F38:  MOVLW  03
08F3A:  MOVWF  xE3
08F3C:  CLRF   xE4
08F3E:  CLRF   xE5
08F40:  CLRF   xE6
08F42:  MOVLW  04
08F44:  MOVWF  xE7
08F46:  CLRF   xE8
08F48:  CLRF   xE9
08F4A:  CLRF   xEA
08F4C:  MOVLW  05
08F4E:  MOVWF  xEB
08F50:  CLRF   xEC
08F52:  CLRF   xED
08F54:  CLRF   xEE
08F56:  MOVLW  06
08F58:  MOVWF  xEF
08F5A:  CLRF   xF0
08F5C:  CLRF   xF1
08F5E:  CLRF   xF2
08F60:  MOVLW  07
08F62:  MOVWF  xF3
08F64:  CLRF   xF4
08F66:  CLRF   xF5
08F68:  CLRF   xF6
08F6A:  MOVLW  08
08F6C:  MOVWF  xF7
08F6E:  CLRF   xF8
08F70:  CLRF   xF9
08F72:  CLRF   xFA
08F74:  MOVLW  09
08F76:  MOVWF  xFB
08F78:  CLRF   xFC
08F7A:  CLRF   xFD
08F7C:  CLRF   xFE
08F7E:  MOVLW  0A
08F80:  MOVWF  xFF
08F82:  MOVLB  6
08F84:  CLRF   x00
08F86:  CLRF   x01
08F88:  CLRF   x02
08F8A:  MOVLW  0B
08F8C:  MOVWF  x03
08F8E:  CLRF   x04
08F90:  CLRF   x05
08F92:  CLRF   x06
08F94:  MOVLW  0C
08F96:  MOVWF  x07
08F98:  CLRF   x08
08F9A:  CLRF   x09
08F9C:  CLRF   x0A
08F9E:  MOVLW  0D
08FA0:  MOVWF  x0B
08FA2:  CLRF   x0C
08FA4:  CLRF   x0D
08FA6:  CLRF   x0E
08FA8:  MOVLW  0E
08FAA:  MOVWF  x0F
08FAC:  CLRF   x10
08FAE:  CLRF   x11
08FB0:  CLRF   x12
08FB2:  MOVLW  0F
08FB4:  MOVWF  x13
08FB6:  CLRF   x14
08FB8:  CLRF   x15
08FBA:  CLRF   x16
08FBC:  CLRF   x17
08FBE:  CLRF   x18
08FC0:  CLRF   x48
....................    mydevices.numberOfInputs=0; 
08FC2:  MOVLB  1
08FC4:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
08FC6:  CLRF   x3F
....................    clock = 0; 
08FC8:  MOVLB  6
08FCA:  CLRF   x3E
08FCC:  CLRF   x3D
08FCE:  CLRF   x3C
08FD0:  CLRF   x3B
....................    ledErrorCounter=0;    
08FD2:  CLRF   x47
08FD4:  CLRF   x46
....................    hw_setup(); 
08FD6:  MOVLB  0
08FD8:  GOTO   1EAE
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////SALA////////////////////////////// 
....................  /*  eeprom_on_off_init(20,21,6);//2 int Grande a comecar da esquerda 
....................    eeprom_on_off_init(22,23,0);//2  
....................    //eeprom_dimmer_init(40,41,42,7);//2 
....................    eeprom_on_off_init(41,42,7);//2 
....................    eeprom_on_off_init(26,27,3);//2 
....................     
....................     
....................     
....................    ///Sanca parede grande 
....................    unsigned int on_adr[8]={20,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={21,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,3);//Sanca parede grande 
....................    eeprom_onOff_out_init(on_adr,off_adr,5);//Sanca parede grande 
....................     
....................    ///Sanca parede rosa 
....................    unsigned int on_adrr[8]={22,255,255,255,255,255,255,255}; 
....................    unsigned int off_adrr[8]={23,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,7);//Sanca parede grande 
....................    on_adrr[1]=26; 
....................    off_adrr[1]=27; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,4);//Sanca parede grande 
....................     
....................     ///VARANDA 
....................    unsigned int dimmer_dim_adr[8]={40,255,255,255,255,255,255,255};  
....................    unsigned int dimmer_on_adr[8]={41,255,255,255,255,255,255,255}; 
....................    unsigned int dimmer_off_adr[8]={42,255,255,255,255,255,255,255}; 
....................    //eeprom_dimmer_out_init(dimmer_dim_adr,dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................    eeprom_onOff_out_init(dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................     
....................    eeprom_button_init(28,29,4,true);//estores down 
....................    eeprom_button_init(30,31,5,true);//estores up 
....................    unsigned int up_adr[8]={30,255,255,255,255,255,255,255}; 
....................    unsigned int down_adr[8]={28,255,255,255,255,255,255,255}; 
....................    unsigned int x_adr[8]={255,255,255,255,255,255,255,255}; 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,8,9,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,10,11,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,12,13,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,14,15,0,10); 
....................    */ 
....................    /////////////////////////////////////////////////7 
....................     
....................    /* 
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 on_adr off_adr real_button inicia botao 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={2,10,255,255,255,255,255,255}; 
....................   
....................    unsigned int nill_adr[8]={255,255,255,255,255,255,255,255};   
....................    unsigned int ventax_off_adr[8]={16,255,255,255,255,255,255,255}; 
....................  
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,4);//SANCA? 
....................     
....................    //outputs 4=sanca 3=casabanho 2=casa de banho 9=ventax 1=corredor 
....................    ///casa de banho 
....................    eeprom_on_off_init(3,4,4);//interruptor casa de banho??   
....................    off_adr[0]=4; 
....................    on_adr[0]=3; 
....................    eeprom_timer_init(off_adr,on_adr,15,16,time_off,60); 
....................    eeprom_onOff_out_init(on_adr,off_adr,3); //luz casa de banho 
....................    eeprom_onOff_out_init(on_adr,off_adr,2); //luz2 casa de banho 
....................    eeprom_onOff_out_init(on_adr,ventax_off_adr,9);//VENTAX 
....................    ///fim casa de banho 
....................     
....................    //corredor 
....................    eeprom_on_off_init(17,18,5);//interruptor luz corredor 
....................    unsigned int corredor_on_adr[8]={17,255,255,255,255,255,255,255}; 
....................    unsigned int corredor_off_adr[8]={18,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(corredor_on_adr,corredor_off_adr,1); //luz corredor 
....................    //fim corredor 
....................     
....................    eeprom_button_init(5,6,0,true);//2 //estores 
....................    eeprom_button_init(7,8,1,true);//2 
....................     
....................    off_adr[0]=255; 
....................    off_adr[1]=255; 
....................    on_adr[0]=5; 
....................    x_adr[0]=7; 
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,0,10);//up down fullup full down 
....................     
....................    eeprom_on_off_init(9,10,6); 
....................    eeprom_on_off_init(20,21,7); 
....................    unsigned int cama_on_adr[8]={9,255,255,255,255,255,255,255}; 
....................    unsigned int cama_off_adr[8]={10,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,7); 
....................    cama_on_adr[0]=20; 
....................    cama_off_adr[0]=21; 
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,6); 
....................    /////////////////////////////////////////////////7 
....................    */  
....................    /////////////////////QUARTO RENATA/////////////// 
....................    // 
....................    // INPUTS  
....................    // 0,1 cozinha 
....................    // 2,3 quarto 
....................    // 
....................    // OUTPUTS 
....................    // 5 quarto renata economica 
....................    // 6 janela hologeneo 
....................    // 7 entrada 
....................    // 2 cozinha fluorescente 
....................    // 3 cima balcao halogeneo 
....................    // 4 divisoria halogeneo 
....................    // 10 balcao baixo verde 
....................    // 11 balcao cima verde 
....................    // 12 balcao cima vermelho 
....................    // 13 balcao cima azul 
....................    // 14 balcao baixo azul 
....................    // 15 balcao baixo vermelho 
....................    //INPUT INIT 
....................    eeprom_on_off_init(60,61,0);//on_adr off_adr real_btn interruptor cozinha 1 
08FDC:  MOVLW  3C
08FDE:  MOVLB  6
08FE0:  MOVWF  x61
08FE2:  MOVLW  3D
08FE4:  MOVWF  x62
08FE6:  CLRF   x63
08FE8:  MOVLB  0
08FEA:  CALL   22AA
....................    eeprom_on_off_init(62,63,1);//on_adr off_adr real_btn interruptor cozinha 2   
08FEE:  MOVLW  3E
08FF0:  MOVLB  6
08FF2:  MOVWF  x61
08FF4:  MOVLW  3F
08FF6:  MOVWF  x62
08FF8:  MOVLW  01
08FFA:  MOVWF  x63
08FFC:  MOVLB  0
08FFE:  CALL   22AA
.................... // eeprom_dimmer_init(68,62,63,1);//dim_adr on_adr off_adr 
....................    eeprom_on_off_init(64,65,2);//on_adr off_adr real_btn interruptor quarto renata 1 
09002:  MOVLW  40
09004:  MOVLB  6
09006:  MOVWF  x61
09008:  MOVLW  41
0900A:  MOVWF  x62
0900C:  MOVLW  02
0900E:  MOVWF  x63
09010:  MOVLB  0
09012:  CALL   22AA
.................... //   eeprom_on_off_init(66,67,3);//on_adr off_adr real_btn interruptor quarto renata 2   
....................    eeprom_dimmer_init(68,66,67,3);//dim_adr on_adr off_adr 
09016:  MOVLW  44
09018:  MOVLB  6
0901A:  MOVWF  x61
0901C:  MOVLW  42
0901E:  MOVWF  x62
09020:  MOVLW  43
09022:  MOVWF  x63
09024:  MOVLW  03
09026:  MOVWF  x64
09028:  MOVLB  0
0902A:  GOTO   2310
....................    
....................    //OUTPUT INIT 
....................    unsigned int on_adr[8]={60,255,255,255,255,255,255,255}; 
0902E:  MOVLW  3C
09030:  MOVLB  6
09032:  MOVWF  x49
09034:  MOVLW  FF
09036:  MOVWF  x4A
09038:  MOVWF  x4B
0903A:  MOVWF  x4C
0903C:  MOVWF  x4D
0903E:  MOVWF  x4E
09040:  MOVWF  x4F
09042:  MOVWF  x50
....................    unsigned int off_adr[8]={61,10,255,255,255,255,255,255}; 
09044:  MOVLW  3D
09046:  MOVWF  x51
09048:  MOVLW  0A
0904A:  MOVWF  x52
0904C:  MOVLW  FF
0904E:  MOVWF  x53
09050:  MOVWF  x54
09052:  MOVWF  x55
09054:  MOVWF  x56
09056:  MOVWF  x57
09058:  MOVWF  x58
....................    unsigned int dim_adr[8]={68,255,255,255,255,255,255,255}; 
0905A:  MOVLW  44
0905C:  MOVWF  x59
0905E:  MOVLW  FF
09060:  MOVWF  x5A
09062:  MOVWF  x5B
09064:  MOVWF  x5C
09066:  MOVWF  x5D
09068:  MOVWF  x5E
0906A:  MOVWF  x5F
0906C:  MOVWF  x60
....................    eeprom_onOff_out_init(on_adr,off_adr,2); //luz cozinha fluorescente 
0906E:  MOVLW  06
09070:  MOVWF  x62
09072:  MOVLW  49
09074:  MOVWF  x61
09076:  MOVLW  06
09078:  MOVWF  x64
0907A:  MOVLW  51
0907C:  MOVWF  x63
0907E:  MOVLW  02
09080:  MOVWF  x65
09082:  MOVLB  0
09084:  CALL   23D2
....................    on_adr[0]=62; 
09088:  MOVLW  3E
0908A:  MOVLB  6
0908C:  MOVWF  x49
....................    off_adr[0]=63; 
0908E:  MOVLW  3F
09090:  MOVWF  x51
....................    eeprom_onOff_out_init(on_adr,off_adr,3); //luz cozinha cima balcao halogeneo 
09092:  MOVLW  06
09094:  MOVWF  x62
09096:  MOVLW  49
09098:  MOVWF  x61
0909A:  MOVLW  06
0909C:  MOVWF  x64
0909E:  MOVLW  51
090A0:  MOVWF  x63
090A2:  MOVLW  03
090A4:  MOVWF  x65
090A6:  MOVLB  0
090A8:  CALL   23D2
....................    eeprom_onOff_out_init(on_adr,off_adr,4); //luz cozinha divisoria 
090AC:  MOVLW  06
090AE:  MOVLB  6
090B0:  MOVWF  x62
090B2:  MOVLW  49
090B4:  MOVWF  x61
090B6:  MOVLW  06
090B8:  MOVWF  x64
090BA:  MOVLW  51
090BC:  MOVWF  x63
090BE:  MOVLW  04
090C0:  MOVWF  x65
090C2:  MOVLB  0
090C4:  CALL   23D2
....................    eeprom_onOff_out_init(on_adr,off_adr,15); //luz balcao baixo vermelho 
090C8:  MOVLW  06
090CA:  MOVLB  6
090CC:  MOVWF  x62
090CE:  MOVLW  49
090D0:  MOVWF  x61
090D2:  MOVLW  06
090D4:  MOVWF  x64
090D6:  MOVLW  51
090D8:  MOVWF  x63
090DA:  MOVLW  0F
090DC:  MOVWF  x65
090DE:  MOVLB  0
090E0:  CALL   23D2
....................    eeprom_onOff_out_init(on_adr,off_adr,12); //luz balcao cima vermelho 
090E4:  MOVLW  06
090E6:  MOVLB  6
090E8:  MOVWF  x62
090EA:  MOVLW  49
090EC:  MOVWF  x61
090EE:  MOVLW  06
090F0:  MOVWF  x64
090F2:  MOVLW  51
090F4:  MOVWF  x63
090F6:  MOVLW  0C
090F8:  MOVWF  x65
090FA:  MOVLB  0
090FC:  CALL   23D2
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,3); //luz cozinha cima balcao halogeneo 
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,4); //luz cozinha divisoria 
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,15); //luz cozinha divisoria 
....................     
....................    on_adr[0]=64; 
09100:  MOVLW  40
09102:  MOVLB  6
09104:  MOVWF  x49
....................    off_adr[0]=65; 
09106:  MOVLW  41
09108:  MOVWF  x51
....................    eeprom_onOff_out_init(on_adr,off_adr,5); //luz quarto renata economica 
0910A:  MOVLW  06
0910C:  MOVWF  x62
0910E:  MOVLW  49
09110:  MOVWF  x61
09112:  MOVLW  06
09114:  MOVWF  x64
09116:  MOVLW  51
09118:  MOVWF  x63
0911A:  MOVLW  05
0911C:  MOVWF  x65
0911E:  MOVLB  0
09120:  CALL   23D2
....................    on_adr[0]=66; 
09124:  MOVLW  42
09126:  MOVLB  6
09128:  MOVWF  x49
....................    off_adr[0]=67; 
0912A:  MOVLW  43
0912C:  MOVWF  x51
....................   // eeprom_onOff_out_init(on_adr,off_adr,7); //luz quarto renata entrada 
....................   // eeprom_onOff_out_init(on_adr,off_adr,6); //luz quarto renata janela 
....................    eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,7); //luz quarto renata entrada 
0912E:  MOVLW  06
09130:  MOVWF  x62
09132:  MOVLW  59
09134:  MOVWF  x61
09136:  MOVLW  06
09138:  MOVWF  x64
0913A:  MOVLW  49
0913C:  MOVWF  x63
0913E:  MOVLW  06
09140:  MOVWF  x66
09142:  MOVLW  51
09144:  MOVWF  x65
09146:  MOVLW  07
09148:  MOVWF  x67
0914A:  MOVLB  0
0914C:  CALL   244C
....................    eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,6); //luz quarto renata janela 
09150:  MOVLW  06
09152:  MOVLB  6
09154:  MOVWF  x62
09156:  MOVLW  59
09158:  MOVWF  x61
0915A:  MOVLW  06
0915C:  MOVWF  x64
0915E:  MOVLW  49
09160:  MOVWF  x63
09162:  MOVLW  06
09164:  MOVWF  x66
09166:  MOVLW  51
09168:  MOVWF  x65
0916A:  MOVLW  06
0916C:  MOVWF  x67
0916E:  MOVLB  0
09170:  CALL   244C
....................     
....................    
....................    readDevices(); 
09174:  GOTO   2EAC
.................... #ifdef DEBUG   
....................     printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
09178:  MOVLW  96
0917A:  MOVWF  FF6
0917C:  MOVLW  1C
0917E:  MOVWF  FF7
09180:  MOVLW  00
09182:  MOVWF  FF8
09184:  MOVLW  07
09186:  MOVLB  6
09188:  MOVWF  x74
0918A:  MOVLB  0
0918C:  CALL   1F60
09190:  MOVFF  13E,674
09194:  MOVLW  1F
09196:  MOVLB  6
09198:  MOVWF  x75
0919A:  MOVLB  0
0919C:  CALL   20AA
091A0:  MOVLW  9F
091A2:  MOVWF  FF6
091A4:  MOVLW  1C
091A6:  MOVWF  FF7
091A8:  MOVLW  00
091AA:  MOVWF  FF8
091AC:  MOVLW  09
091AE:  MOVLB  6
091B0:  MOVWF  x74
091B2:  MOVLB  0
091B4:  CALL   1F60
091B8:  MOVFF  13F,674
091BC:  MOVLW  1F
091BE:  MOVLB  6
091C0:  MOVWF  x75
091C2:  MOVLB  0
091C4:  CALL   20AA
091C8:  CLRF   1B
091CA:  BTFSC  FF2.6
091CC:  BSF    1B.6
091CE:  BCF    FF2.6
091D0:  BTFSC  FF2.7
091D2:  BSF    1B.7
091D4:  BCF    FF2.7
091D6:  MOVLW  20
091D8:  MOVLB  6
091DA:  MOVWF  xDC
091DC:  MOVLB  0
091DE:  CALL   0EDA
091E2:  BTFSC  1B.6
091E4:  BSF    FF2.6
091E6:  BTFSC  1B.7
091E8:  BSF    FF2.7
091EA:  MOVFF  28A,674
091EE:  MOVLW  1F
091F0:  MOVLB  6
091F2:  MOVWF  x75
091F4:  MOVLB  0
091F6:  CALL   20AA
091FA:  CLRF   1B
091FC:  BTFSC  FF2.6
091FE:  BSF    1B.6
09200:  BCF    FF2.6
09202:  BTFSC  FF2.7
09204:  BSF    1B.7
09206:  BCF    FF2.7
09208:  MOVLW  20
0920A:  MOVLB  6
0920C:  MOVWF  xDC
0920E:  MOVLB  0
09210:  CALL   0EDA
09214:  BTFSC  1B.6
09216:  BSF    FF2.6
09218:  BTFSC  1B.7
0921A:  BSF    FF2.7
0921C:  MOVFF  2B9,674
09220:  MOVLW  1F
09222:  MOVLB  6
09224:  MOVWF  x75
09226:  MOVLB  0
09228:  CALL   20AA
0922C:  CLRF   1B
0922E:  BTFSC  FF2.6
09230:  BSF    1B.6
09232:  BCF    FF2.6
09234:  BTFSC  FF2.7
09236:  BSF    1B.7
09238:  BCF    FF2.7
0923A:  MOVLW  0A
0923C:  MOVLB  6
0923E:  MOVWF  xDC
09240:  MOVLB  0
09242:  CALL   0EDA
09246:  BTFSC  1B.6
09248:  BSF    FF2.6
0924A:  BTFSC  1B.7
0924C:  BSF    FF2.7
0924E:  CLRF   1B
09250:  BTFSC  FF2.6
09252:  BSF    1B.6
09254:  BCF    FF2.6
09256:  BTFSC  FF2.7
09258:  BSF    1B.7
0925A:  BCF    FF2.7
0925C:  MOVLW  0D
0925E:  MOVLB  6
09260:  MOVWF  xDC
09262:  MOVLB  0
09264:  CALL   0EDA
09268:  BTFSC  1B.6
0926A:  BSF    FF2.6
0926C:  BTFSC  1B.7
0926E:  BSF    FF2.7
.................... #endif 
....................    dimmer_outputs_init(); 
09270:  GOTO   3ECE
....................    // printf("start %Lu %Lu %Lu\n\r",fpointer(N_LUZES,0),delays1[N_LUZES][0],delays2[N_LUZES][0]);  
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
09274:  CALL   40A8
.................... // printf("start %Lu\n\r",fpointer(N_LUZES,0));  
....................  interrupts_enable(); 
09278:  GOTO   5644
....................  
....................    while(true){ 
....................    restart_wdt(); 
0927C:  CLRWDT
....................    if(syncError || oscError) 
0927E:  BTFSC  xB5.5
09280:  BRA    9286
09282:  BTFSS  xB5.6
09284:  BRA    92A8
....................    {   
....................       ++ledErrorCounter; 
09286:  MOVLB  6
09288:  INCF   x46,F
0928A:  BTFSC  FD8.2
0928C:  INCF   x47,F
....................       if(ledErrorCounter>1000) 
0928E:  MOVF   x47,W
09290:  SUBLW  02
09292:  BC    92A6
09294:  XORLW  FF
09296:  BNZ   929E
09298:  MOVF   x46,W
0929A:  SUBLW  E8
0929C:  BC    92A6
....................       { 
....................          output_toggle(LED); 
0929E:  BCF    F96.2
092A0:  BTG    F8D.2
....................          ledErrorCounter=0; 
092A2:  CLRF   x47
092A4:  CLRF   x46
092A6:  MOVLB  0
....................       } 
....................    } 
.................... #ifdef DEBUG 
....................    if(kbhit()) 
092A8:  BTFSC  F81.4
092AA:  BRA    92BA
....................    { 
....................       setup_wdt(WDT_OFF); 
092AC:  BCF    FD1.0
....................       disable_interrupts (GLOBAL) ; 
092AE:  BCF    FF2.6
092B0:  BCF    FF2.7
092B2:  BTFSC  FF2.7
092B4:  BRA    92B0
....................       goDebug(); 
092B6:  GOTO   5D1C
....................    } 
.................... #endif 
....................    process_outpoints(); 
092BA:  GOTO   6BE8
....................    write_outputs(); 
092BE:  CALL   40A8
....................    if(secondFlag) 
092C2:  BTFSS  xB5.4
092C4:  BRA    92D8
....................    { 
....................       secondFlag=false; 
092C6:  BCF    xB5.4
....................       processTimedEvents(); 
092C8:  GOTO   7CFC
....................       if(!syncError && !oscError) output_toggle(LED); 
092CC:  BTFSC  xB5.5
092CE:  BRA    92D8
092D0:  BTFSC  xB5.6
092D2:  BRA    92D8
092D4:  BCF    F96.2
092D6:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
092D8:  BRA    927C
.................... } 
....................  
092DA:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 1106   BROWNOUT WDT BORV45 PUT WDT256
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 00B1   STVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: 403F   NOPROTECT CPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
