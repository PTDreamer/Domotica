CCS PCH C Compiler, Version 4.106, 32200               18-Set-11 20:05

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 33018 bytes (34%)
                         Largest free fragment is 32514
               RAM used: 1609 (49%) at main() level
                         1828 (55%) worst case
               Stack:    8 worst case (4 in main + 4 for interrupts)

*
00000:  GOTO   7BDC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0E2A
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0E4E
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0E56
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0E80
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   1104
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   110A
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   0FD0
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   1110
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1B44
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1B4A
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1B3C
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1B34
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1B2C
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   16FC
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   16F4
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   1116
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT1024                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV45                   //Brownout reset at 2.0V 
.................... #FUSES PUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOLPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... //#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
01F04:  BCF    F93.5
01F06:  BCF    F8A.5
01F08:  MOVLW  08
01F0A:  MOVWF  01
01F0C:  BRA    1F0E
01F0E:  NOP   
01F10:  BSF    01.7
01F12:  BRA    1F34
01F14:  BCF    01.7
01F16:  MOVLB  6
01F18:  RRCF   x8F,F
01F1A:  MOVLB  0
01F1C:  BTFSC  FD8.0
01F1E:  BSF    F8A.5
01F20:  BTFSS  FD8.0
01F22:  BCF    F8A.5
01F24:  BSF    01.6
01F26:  BRA    1F34
01F28:  BCF    01.6
01F2A:  DECFSZ 01,F
01F2C:  BRA    1F16
01F2E:  BRA    1F30
01F30:  NOP   
01F32:  BSF    F8A.5
01F34:  MOVLW  16
01F36:  MOVWF  FE9
01F38:  DECFSZ FE9,F
01F3A:  BRA    1F38
01F3C:  BRA    1F3E
01F3E:  CLRWDT
01F40:  BTFSC  01.7
01F42:  BRA    1F14
01F44:  BTFSC  01.6
01F46:  BRA    1F28
01F48:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01BB2:  MOVLW  04
01BB4:  MOVLB  6
01BB6:  MOVWF  x7F
01BB8:  MOVLB  0
01BBA:  RCALL  1B5C
....................    can_set_baud(); 
01BBC:  BRA    1B82
....................  
....................    RXB0CON=0; 
01BBE:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01BC0:  MOVLW  9F
01BC2:  ANDWF  F60,W
01BC4:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01BC6:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01BC8:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01BCC:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01BCE:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01BD0:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01BD2:  BCF    F73.6
01BD4:  CLRF   1B
01BD6:  BTFSC  FF2.7
01BD8:  BSF    1B.7
01BDA:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01BDC:  MOVLW  0F
01BDE:  MOVLB  7
01BE0:  MOVWF  x18
01BE2:  MOVLW  1B
01BE4:  MOVWF  x17
01BE6:  CLRF   x1C
01BE8:  CLRF   x1B
01BEA:  CLRF   x1A
01BEC:  CLRF   x19
01BEE:  CLRF   x1D
01BF0:  MOVLB  0
01BF2:  RCALL  1704
01BF4:  BTFSC  1B.7
01BF6:  BSF    FF2.7
01BF8:  CLRF   1B
01BFA:  BTFSC  FF2.7
01BFC:  BSF    1B.7
01BFE:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01C00:  MOVLW  0F
01C02:  MOVLB  7
01C04:  MOVWF  x18
01C06:  MOVLW  03
01C08:  MOVWF  x17
01C0A:  CLRF   x1C
01C0C:  CLRF   x1B
01C0E:  CLRF   x1A
01C10:  CLRF   x19
01C12:  CLRF   x1D
01C14:  MOVLB  0
01C16:  RCALL  1704
01C18:  BTFSC  1B.7
01C1A:  BSF    FF2.7
01C1C:  CLRF   1B
01C1E:  BTFSC  FF2.7
01C20:  BSF    1B.7
01C22:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01C24:  MOVLW  0F
01C26:  MOVLB  7
01C28:  MOVWF  x18
01C2A:  MOVLW  07
01C2C:  MOVWF  x17
01C2E:  CLRF   x1C
01C30:  CLRF   x1B
01C32:  CLRF   x1A
01C34:  CLRF   x19
01C36:  CLRF   x1D
01C38:  MOVLB  0
01C3A:  RCALL  1704
01C3C:  BTFSC  1B.7
01C3E:  BSF    FF2.7
01C40:  CLRF   1B
01C42:  BTFSC  FF2.7
01C44:  BSF    1B.7
01C46:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01C48:  MOVLW  0F
01C4A:  MOVLB  7
01C4C:  MOVWF  x18
01C4E:  MOVLW  1F
01C50:  MOVWF  x17
01C52:  CLRF   x1C
01C54:  CLRF   x1B
01C56:  CLRF   x1A
01C58:  CLRF   x19
01C5A:  CLRF   x1D
01C5C:  MOVLB  0
01C5E:  RCALL  1704
01C60:  BTFSC  1B.7
01C62:  BSF    FF2.7
01C64:  CLRF   1B
01C66:  BTFSC  FF2.7
01C68:  BSF    1B.7
01C6A:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01C6C:  MOVLW  0F
01C6E:  MOVLB  7
01C70:  MOVWF  x18
01C72:  MOVLW  0B
01C74:  MOVWF  x17
01C76:  CLRF   x1C
01C78:  CLRF   x1B
01C7A:  CLRF   x1A
01C7C:  CLRF   x19
01C7E:  CLRF   x1D
01C80:  MOVLB  0
01C82:  RCALL  1704
01C84:  BTFSC  1B.7
01C86:  BSF    FF2.7
01C88:  CLRF   1B
01C8A:  BTFSC  FF2.7
01C8C:  BSF    1B.7
01C8E:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01C90:  MOVLW  0F
01C92:  MOVLB  7
01C94:  MOVWF  x18
01C96:  MOVWF  x17
01C98:  CLRF   x1C
01C9A:  CLRF   x1B
01C9C:  CLRF   x1A
01C9E:  CLRF   x19
01CA0:  CLRF   x1D
01CA2:  MOVLB  0
01CA4:  RCALL  1704
01CA6:  BTFSC  1B.7
01CA8:  BSF    FF2.7
01CAA:  CLRF   1B
01CAC:  BTFSC  FF2.7
01CAE:  BSF    1B.7
01CB0:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01CB2:  MOVLW  0F
01CB4:  MOVLB  7
01CB6:  MOVWF  x18
01CB8:  MOVLW  13
01CBA:  MOVWF  x17
01CBC:  CLRF   x1C
01CBE:  CLRF   x1B
01CC0:  CLRF   x1A
01CC2:  CLRF   x19
01CC4:  CLRF   x1D
01CC6:  MOVLB  0
01CC8:  RCALL  1704
01CCA:  BTFSC  1B.7
01CCC:  BSF    FF2.7
01CCE:  CLRF   1B
01CD0:  BTFSC  FF2.7
01CD2:  BSF    1B.7
01CD4:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01CD6:  MOVLW  0F
01CD8:  MOVLB  7
01CDA:  MOVWF  x18
01CDC:  MOVLW  17
01CDE:  MOVWF  x17
01CE0:  CLRF   x1C
01CE2:  CLRF   x1B
01CE4:  CLRF   x1A
01CE6:  CLRF   x19
01CE8:  CLRF   x1D
01CEA:  MOVLB  0
01CEC:  RCALL  1704
01CEE:  BTFSC  1B.7
01CF0:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01CF2:  MOVF   F93,W
01CF4:  ANDLW  FB
01CF6:  IORLW  08
01CF8:  MOVLB  6
01CFA:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01CFC:  CLRF   x7F
01CFE:  MOVLB  0
01D00:  RCALL  1B5C
.................... } 
01D02:  GOTO   1D08 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01B82:  MOVLW  C0
01B84:  ANDWF  F70,W
01B86:  IORLW  04
01B88:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01B8A:  MOVLW  3F
01B8C:  ANDWF  F70,W
01B8E:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01B90:  MOVLW  F8
01B92:  ANDWF  F71,W
01B94:  IORLW  02
01B96:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01B98:  MOVLW  C7
01B9A:  ANDWF  F71,W
01B9C:  IORLW  28
01B9E:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01BA0:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01BA2:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01BA4:  MOVLW  F8
01BA6:  ANDWF  F72,W
01BA8:  IORLW  05
01BAA:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01BAC:  BCF    F72.6
.................... } 
01BAE:  GOTO   1BBE (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01B5C:  MOVLB  6
01B5E:  SWAPF  x7F,W
01B60:  ANDLW  70
01B62:  MOVWF  00
01B64:  BCF    FD8.0
01B66:  RLCF   00,F
01B68:  MOVLW  1F
01B6A:  ANDWF  F6F,W
01B6C:  IORWF  00,W
01B6E:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01B70:  MOVFF  F6E,00
01B74:  SWAPF  00,F
01B76:  RRCF   00,W
01B78:  ANDLW  07
01B7A:  SUBWF  x7F,W
01B7C:  BNZ   1B70
.................... } 
01B7E:  MOVLB  0
01B80:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
01704:  MOVFF  718,71F
01708:  MOVFF  717,71E
....................  
....................    if (ext) {  //extended 
0170C:  MOVLB  7
0170E:  MOVF   x1D,F
01710:  BZ    17B6
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
01712:  MOVFF  71E,FE9
01716:  MOVFF  71F,FEA
0171A:  MOVFF  719,FEF
....................  
....................       //eidh 
....................       ptr--; 
0171E:  MOVF   x1E,W
01720:  BTFSC  FD8.2
01722:  DECF   x1F,F
01724:  DECF   x1E,F
....................       *ptr=make8(id,1); //8:15 
01726:  MOVFF  71E,FE9
0172A:  MOVFF  71F,FEA
0172E:  MOVFF  71A,FEF
....................  
....................       //sidl 
....................       ptr--; 
01732:  MOVF   x1E,W
01734:  BTFSC  FD8.2
01736:  DECF   x1F,F
01738:  DECF   x1E,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
0173A:  MOVFF  71E,FE9
0173E:  MOVFF  71F,FEA
01742:  MOVF   x1B,W
01744:  ANDLW  03
01746:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
01748:  MOVFF  71E,FE9
0174C:  MOVFF  71F,FEA
01750:  MOVFF  71B,00
01754:  RLCF   00,F
01756:  RLCF   00,F
01758:  RLCF   00,F
0175A:  MOVLW  F8
0175C:  ANDWF  00,F
0175E:  MOVF   00,W
01760:  ANDLW  E0
01762:  IORWF  FEF,W
01764:  MOVWF  FEF
....................       *ptr|=0x08; 
01766:  MOVFF  71E,FE9
0176A:  MOVFF  71F,FEA
0176E:  MOVF   FEF,W
01770:  IORLW  08
01772:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
01774:  MOVF   x1E,W
01776:  BTFSC  FD8.2
01778:  DECF   x1F,F
0177A:  DECF   x1E,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
0177C:  MOVFF  71E,FE9
01780:  MOVFF  71F,FEA
01784:  MOVFF  71B,00
01788:  SWAPF  00,F
0178A:  RRCF   00,F
0178C:  MOVLW  07
0178E:  ANDWF  00,F
01790:  MOVF   00,W
01792:  ANDLW  07
01794:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
01796:  MOVFF  71E,FE9
0179A:  MOVFF  71F,FEA
0179E:  MOVFF  71C,00
017A2:  RLCF   00,F
017A4:  RLCF   00,F
017A6:  RLCF   00,F
017A8:  MOVLW  F8
017AA:  ANDWF  00,F
017AC:  MOVF   00,W
017AE:  ANDLW  F8
017B0:  IORWF  FEF,W
017B2:  MOVWF  FEF
....................    } 
....................    else {   //standard 
017B4:  BRA    1834
....................       //eidl 
....................       *ptr=0; 
017B6:  MOVFF  71E,FE9
017BA:  MOVFF  71F,FEA
017BE:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
017C0:  MOVF   x1E,W
017C2:  BTFSC  FD8.2
017C4:  DECF   x1F,F
017C6:  DECF   x1E,F
....................       *ptr=0; 
017C8:  MOVFF  71E,FE9
017CC:  MOVFF  71F,FEA
017D0:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
017D2:  MOVF   x1E,W
017D4:  BTFSC  FD8.2
017D6:  DECF   x1F,F
017D8:  DECF   x1E,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
017DA:  MOVFF  71E,FE9
017DE:  MOVFF  71F,FEA
017E2:  MOVFF  719,00
017E6:  SWAPF  00,F
017E8:  RLCF   00,F
017EA:  MOVLW  E0
017EC:  ANDWF  00,F
017EE:  MOVF   00,W
017F0:  ANDLW  E0
017F2:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
017F4:  MOVF   x1E,W
017F6:  BTFSC  FD8.2
017F8:  DECF   x1F,F
017FA:  DECF   x1E,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
017FC:  MOVFF  71E,FE9
01800:  MOVFF  71F,FEA
01804:  MOVFF  719,00
01808:  RRCF   00,F
0180A:  RRCF   00,F
0180C:  RRCF   00,F
0180E:  MOVLW  1F
01810:  ANDWF  00,F
01812:  MOVF   00,W
01814:  ANDLW  1F
01816:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
01818:  MOVFF  71E,FE9
0181C:  MOVFF  71F,FEA
01820:  MOVFF  71A,00
01824:  SWAPF  00,F
01826:  RLCF   00,F
01828:  MOVLW  E0
0182A:  ANDWF  00,F
0182C:  MOVF   00,W
0182E:  ANDLW  E0
01830:  IORWF  FEF,W
01832:  MOVWF  FEF
....................    } 
.................... } 
01834:  MOVLB  0
01836:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
0111E:  MOVLB  7
01120:  CLRF   x19
01122:  CLRF   x18
01124:  CLRF   x17
01126:  CLRF   x16
....................    ptr=addr; 
01128:  MOVFF  714,71B
0112C:  MOVFF  713,71A
....................  
....................    if (ext) { 
01130:  MOVF   x15,F
01132:  BTFSC  FD8.2
01134:  BRA    125C
....................       ret=*ptr;  //eidl 
01136:  MOVFF  71B,03
0113A:  MOVFF  71A,FE9
0113E:  MOVFF  71B,FEA
01142:  MOVFF  FEF,00
01146:  CLRF   01
01148:  CLRF   02
0114A:  CLRF   03
0114C:  MOVFF  03,719
01150:  MOVFF  02,718
01154:  MOVFF  01,717
01158:  MOVFF  00,716
....................  
....................       ptr--;     //eidh 
0115C:  MOVF   x1A,W
0115E:  BTFSC  FD8.2
01160:  DECF   x1B,F
01162:  DECF   x1A,F
....................       ret|=((int32)*ptr << 8); 
01164:  MOVFF  71A,FE9
01168:  MOVFF  71B,FEA
0116C:  MOVF   FEF,W
0116E:  CLRF   x1E
01170:  CLRF   x1D
01172:  MOVWF  x1C
01174:  CLRF   00
01176:  MOVF   00,W
01178:  IORWF  x16,F
0117A:  MOVF   x1C,W
0117C:  IORWF  x17,F
0117E:  MOVF   x1D,W
01180:  IORWF  x18,F
01182:  MOVF   x1E,W
01184:  IORWF  x19,F
....................  
....................       ptr--;     //sidl 
01186:  MOVF   x1A,W
01188:  BTFSC  FD8.2
0118A:  DECF   x1B,F
0118C:  DECF   x1A,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
0118E:  MOVFF  71A,FE9
01192:  MOVFF  71B,FEA
01196:  MOVF   FEF,W
01198:  CLRF   x1F
0119A:  CLRF   x1E
0119C:  CLRF   x1D
0119E:  MOVWF  x1C
011A0:  MOVLW  03
011A2:  ANDWF  x1C,F
011A4:  CLRF   x1D
011A6:  CLRF   x1E
011A8:  CLRF   x1F
011AA:  CLRF   00
011AC:  CLRF   01
011AE:  MOVF   00,W
011B0:  IORWF  x16,F
011B2:  MOVF   01,W
011B4:  IORWF  x17,F
011B6:  MOVF   x1C,W
011B8:  IORWF  x18,F
011BA:  MOVF   x1D,W
011BC:  IORWF  x19,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
011BE:  MOVFF  71A,FE9
011C2:  MOVFF  71B,FEA
011C6:  MOVF   FEF,W
011C8:  CLRF   x1F
011CA:  CLRF   x1E
011CC:  CLRF   x1D
011CE:  MOVWF  x1C
011D0:  MOVLW  E0
011D2:  ANDWF  x1C,F
011D4:  CLRF   x1D
011D6:  CLRF   x1E
011D8:  CLRF   x1F
011DA:  CLRF   00
011DC:  RLCF   x1C,W
011DE:  MOVWF  01
011E0:  RLCF   x1D,W
011E2:  MOVWF  02
011E4:  RLCF   x1E,W
011E6:  MOVWF  03
011E8:  RLCF   01,F
011EA:  RLCF   02,F
011EC:  RLCF   03,F
011EE:  RLCF   01,F
011F0:  RLCF   02,F
011F2:  RLCF   03,F
011F4:  RLCF   01,F
011F6:  RLCF   02,F
011F8:  RLCF   03,F
011FA:  RLCF   01,F
011FC:  RLCF   02,F
011FE:  RLCF   03,F
01200:  MOVLW  E0
01202:  ANDWF  01,F
01204:  MOVF   00,W
01206:  IORWF  x16,F
01208:  MOVF   01,W
0120A:  IORWF  x17,F
0120C:  MOVF   02,W
0120E:  IORWF  x18,F
01210:  MOVF   03,W
01212:  IORWF  x19,F
....................  
....................       ptr--;     //sidh 
01214:  MOVF   x1A,W
01216:  BTFSC  FD8.2
01218:  DECF   x1B,F
0121A:  DECF   x1A,F
....................       ret|=((int32)*ptr << 21); 
0121C:  MOVFF  71A,FE9
01220:  MOVFF  71B,FEA
01224:  MOVF   FEF,W
01226:  CLRF   x1D
01228:  MOVWF  x1C
0122A:  CLRF   00
0122C:  CLRF   01
0122E:  RLCF   x1C,W
01230:  MOVWF  02
01232:  RLCF   x1D,W
01234:  MOVWF  03
01236:  RLCF   02,F
01238:  RLCF   03,F
0123A:  RLCF   02,F
0123C:  RLCF   03,F
0123E:  RLCF   02,F
01240:  RLCF   03,F
01242:  RLCF   02,F
01244:  RLCF   03,F
01246:  MOVLW  E0
01248:  ANDWF  02,F
0124A:  MOVF   00,W
0124C:  IORWF  x16,F
0124E:  MOVF   01,W
01250:  IORWF  x17,F
01252:  MOVF   02,W
01254:  IORWF  x18,F
01256:  MOVF   03,W
01258:  IORWF  x19,F
....................  
....................    } 
....................    else { 
0125A:  BRA    1302
....................       ptr-=2;    //sidl 
0125C:  MOVLW  02
0125E:  SUBWF  x1A,F
01260:  MOVLW  00
01262:  SUBWFB x1B,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
01264:  MOVFF  71A,FE9
01268:  MOVFF  71B,FEA
0126C:  MOVF   FEF,W
0126E:  CLRF   x1F
01270:  CLRF   x1E
01272:  CLRF   x1D
01274:  MOVWF  x1C
01276:  MOVLW  E0
01278:  ANDWF  x1C,F
0127A:  CLRF   x1D
0127C:  CLRF   x1E
0127E:  CLRF   x1F
01280:  RRCF   x1F,W
01282:  MOVWF  x19
01284:  RRCF   x1E,W
01286:  MOVWF  x18
01288:  RRCF   x1D,W
0128A:  MOVWF  x17
0128C:  RRCF   x1C,W
0128E:  MOVWF  x16
01290:  RRCF   x19,F
01292:  RRCF   x18,F
01294:  RRCF   x17,F
01296:  RRCF   x16,F
01298:  RRCF   x19,F
0129A:  RRCF   x18,F
0129C:  RRCF   x17,F
0129E:  RRCF   x16,F
012A0:  RRCF   x19,F
012A2:  RRCF   x18,F
012A4:  RRCF   x17,F
012A6:  RRCF   x16,F
012A8:  RRCF   x19,F
012AA:  RRCF   x18,F
012AC:  RRCF   x17,F
012AE:  RRCF   x16,F
012B0:  MOVLW  07
012B2:  ANDWF  x19,F
....................  
....................       ptr--;     //sidh 
012B4:  MOVF   x1A,W
012B6:  BTFSC  FD8.2
012B8:  DECF   x1B,F
012BA:  DECF   x1A,F
....................       ret|=((int32)*ptr << 3); 
012BC:  MOVFF  71A,FE9
012C0:  MOVFF  71B,FEA
012C4:  MOVF   FEF,W
012C6:  CLRF   x1F
012C8:  CLRF   x1E
012CA:  CLRF   x1D
012CC:  MOVWF  x1C
012CE:  RLCF   x1C,W
012D0:  MOVWF  00
012D2:  RLCF   x1D,W
012D4:  MOVWF  01
012D6:  RLCF   x1E,W
012D8:  MOVWF  02
012DA:  RLCF   x1F,W
012DC:  MOVWF  03
012DE:  RLCF   00,F
012E0:  RLCF   01,F
012E2:  RLCF   02,F
012E4:  RLCF   03,F
012E6:  RLCF   00,F
012E8:  RLCF   01,F
012EA:  RLCF   02,F
012EC:  RLCF   03,F
012EE:  MOVLW  F8
012F0:  ANDWF  00,F
012F2:  MOVF   00,W
012F4:  IORWF  x16,F
012F6:  MOVF   01,W
012F8:  IORWF  x17,F
012FA:  MOVF   02,W
012FC:  IORWF  x18,F
012FE:  MOVF   03,W
01300:  IORWF  x19,F
....................    } 
....................  
....................    return(ret); 
01302:  MOVFF  716,00
01306:  MOVFF  717,01
0130A:  MOVFF  718,02
0130E:  MOVFF  719,03
.................... } 
01312:  MOVLB  0
01314:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
01838:  MOVLW  0F
0183A:  MOVLB  7
0183C:  MOVWF  x15
0183E:  MOVLW  66
01840:  MOVWF  x14
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
01842:  MOVLB  F
01844:  BTFSC  x40.3
01846:  BRA    1858
....................       CANCON.win=CAN_WIN_TX0; 
01848:  MOVLW  F1
0184A:  ANDWF  F6F,W
0184C:  IORLW  08
0184E:  MOVWF  F6F
....................       port=0; 
01850:  MOVLB  7
01852:  CLRF   x16
....................    } 
....................    else if (!TXB1CON.txreq) { 
01854:  BRA    188C
01856:  MOVLB  F
01858:  BTFSC  x30.3
0185A:  BRA    186E
....................       CANCON.win=CAN_WIN_TX1; 
0185C:  MOVLW  F1
0185E:  ANDWF  F6F,W
01860:  IORLW  06
01862:  MOVWF  F6F
....................       port=1; 
01864:  MOVLW  01
01866:  MOVLB  7
01868:  MOVWF  x16
....................    } 
....................    else if (!TXB2CON.txreq) { 
0186A:  BRA    188C
0186C:  MOVLB  F
0186E:  BTFSC  x20.3
01870:  BRA    1884
....................       CANCON.win=CAN_WIN_TX2; 
01872:  MOVLW  F1
01874:  ANDWF  F6F,W
01876:  IORLW  04
01878:  MOVWF  F6F
....................       port=2; 
0187A:  MOVLW  02
0187C:  MOVLB  7
0187E:  MOVWF  x16
....................    } 
....................    else { 
01880:  BRA    188C
01882:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
01884:  MOVLW  00
01886:  MOVWF  01
01888:  BRA    1904
0188A:  MOVLB  7
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
0188C:  MOVF   x10,W
0188E:  ANDLW  03
01890:  MOVWF  00
01892:  MOVLW  FC
01894:  ANDWF  F60,W
01896:  IORWF  00,W
01898:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
0189A:  MOVLW  0F
0189C:  MOVWF  x18
0189E:  MOVLW  64
018A0:  MOVWF  x17
018A2:  MOVFF  70C,71C
018A6:  MOVFF  70B,71B
018AA:  MOVFF  70A,71A
018AE:  MOVFF  709,719
018B2:  MOVFF  711,71D
018B6:  MOVLB  0
018B8:  RCALL  1704
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
018BA:  MOVFF  70F,F65
....................    TXBaDLC.rtr=rtr; 
018BE:  BCF    F65.6
018C0:  MOVLB  7
018C2:  BTFSC  x12.0
018C4:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
018C6:  CLRF   x13
018C8:  MOVF   x0F,W
018CA:  SUBWF  x13,W
018CC:  BC    18F6
....................       *txd0=*data; 
018CE:  MOVFF  70D,FE9
018D2:  MOVFF  70E,FEA
018D6:  MOVFF  FEF,719
018DA:  MOVFF  715,FEA
018DE:  MOVFF  714,FE9
018E2:  MOVFF  719,FEF
....................       txd0++; 
018E6:  INCF   x14,F
018E8:  BTFSC  FD8.2
018EA:  INCF   x15,F
....................       data++; 
018EC:  INCF   x0D,F
018EE:  BTFSC  FD8.2
018F0:  INCF   x0E,F
....................     } 
018F2:  INCF   x13,F
018F4:  BRA    18C8
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
018F6:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
018F8:  MOVLW  F1
018FA:  ANDWF  F6F,W
018FC:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
018FE:  MOVLW  01
01900:  MOVWF  01
01902:  MOVLB  F
.................... } 
01904:  MOVLB  0
01906:  GOTO   1B24 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
01330:  BTFSS  F60.7
01332:  BRA    1364
*
015DA:  BTFSS  F60.7
015DC:  BRA    160E
....................         CANCON.win=CAN_WIN_RX0; 
*
01334:  MOVLW  F1
01336:  ANDWF  F6F,W
01338:  MOVWF  F6F
*
015DE:  MOVLW  F1
015E0:  ANDWF  F6F,W
015E2:  MOVWF  F6F
....................         stat.buffer=0; 
*
0133A:  MOVLB  6
0133C:  BCF    xFC.4
*
015E4:  MOVLB  6
015E6:  BCF    xFC.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
0133E:  BCF    FA4.0
*
015E8:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
01340:  BCF    xFC.0
01342:  BTFSC  F74.7
01344:  BSF    xFC.0
*
015EA:  BCF    xFC.0
015EC:  BTFSC  F74.7
015EE:  BSF    xFC.0
....................         COMSTAT.rx0ovfl=0; 
*
01346:  BCF    F74.7
*
015F0:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
01348:  BTFSS  F60.2
0134A:  BRA    1362
*
015F2:  BTFSS  F60.2
015F4:  BRA    160C
....................          stat.filthit=RXB0CON.filthit0; 
*
0134C:  MOVLW  00
0134E:  BTFSC  F60.0
01350:  MOVLW  01
01352:  ANDLW  07
01354:  MOVWF  00
01356:  BCF    FD8.0
01358:  RLCF   00,F
0135A:  MOVLW  F1
0135C:  ANDWF  xFC,W
0135E:  IORWF  00,W
01360:  MOVWF  xFC
*
015F6:  MOVLW  00
015F8:  BTFSC  F60.0
015FA:  MOVLW  01
015FC:  ANDLW  07
015FE:  MOVWF  00
01600:  BCF    FD8.0
01602:  RLCF   00,F
01604:  MOVLW  F1
01606:  ANDWF  xFC,W
01608:  IORWF  00,W
0160A:  MOVWF  xFC
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
01362:  BRA    13A4
01364:  MOVLB  F
01366:  BTFSS  x50.7
01368:  BRA    139C
*
0160C:  BRA    164E
0160E:  MOVLB  F
01610:  BTFSS  x50.7
01612:  BRA    1646
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
0136A:  MOVLW  F1
0136C:  ANDWF  F6F,W
0136E:  IORLW  0A
01370:  MOVWF  F6F
*
01614:  MOVLW  F1
01616:  ANDWF  F6F,W
01618:  IORLW  0A
0161A:  MOVWF  F6F
....................         stat.buffer=1; 
*
01372:  MOVLB  6
01374:  BSF    xFC.4
*
0161C:  MOVLB  6
0161E:  BSF    xFC.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
01376:  BCF    FA4.1
*
01620:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
01378:  BCF    xFC.0
0137A:  BTFSC  F74.6
0137C:  BSF    xFC.0
*
01622:  BCF    xFC.0
01624:  BTFSC  F74.6
01626:  BSF    xFC.0
....................         COMSTAT.rx1ovfl=0; 
*
0137E:  BCF    F74.6
*
01628:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
01380:  MOVLB  F
01382:  MOVF   x50,W
01384:  ANDLW  07
01386:  ANDLW  07
01388:  MOVWF  00
0138A:  BCF    FD8.0
0138C:  RLCF   00,F
0138E:  MOVLW  F1
01390:  MOVLB  6
01392:  ANDWF  xFC,W
01394:  IORWF  00,W
01396:  MOVWF  xFC
*
0162A:  MOVLB  F
0162C:  MOVF   x50,W
0162E:  ANDLW  07
01630:  ANDLW  07
01632:  MOVWF  00
01634:  BCF    FD8.0
01636:  RLCF   00,F
01638:  MOVLW  F1
0163A:  MOVLB  6
0163C:  ANDWF  xFC,W
0163E:  IORWF  00,W
01640:  MOVWF  xFC
....................     } 
....................     else { 
*
01398:  BRA    13A4
0139A:  MOVLB  F
*
01642:  BRA    164E
01644:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
0139C:  MOVLW  00
0139E:  MOVWF  01
013A0:  BRA    1442
013A2:  MOVLB  6
*
01646:  MOVLW  00
01648:  MOVWF  01
0164A:  BRA    16EC
0164C:  MOVLB  6
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
013A4:  MOVF   F65,W
013A6:  ANDLW  0F
013A8:  MOVWF  xFB
*
0164E:  MOVF   F65,W
01650:  ANDLW  0F
01652:  MOVWF  xFB
....................     stat.rtr=RXBaDLC.rtr; 
*
013AA:  BCF    xFC.5
013AC:  BTFSC  F65.6
013AE:  BSF    xFC.5
*
01654:  BCF    xFC.5
01656:  BTFSC  F65.6
01658:  BSF    xFC.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
013B0:  BCF    xFC.6
013B2:  BTFSC  F62.3
013B4:  BSF    xFC.6
*
0165A:  BCF    xFC.6
0165C:  BTFSC  F62.3
0165E:  BSF    xFC.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
013B6:  MOVLW  00
013B8:  BTFSC  xFC.6
013BA:  MOVLW  01
013BC:  MOVLB  7
013BE:  MOVWF  x0C
013C0:  MOVLW  0F
013C2:  MOVWF  x14
013C4:  MOVLW  64
013C6:  MOVWF  x13
013C8:  MOVFF  70C,715
013CC:  MOVLB  0
013CE:  RCALL  111E
013D0:  MOVFF  03,6FA
013D4:  MOVFF  02,6F9
013D8:  MOVFF  01,6F8
013DC:  MOVFF  00,6F7
*
01660:  MOVLW  00
01662:  BTFSC  xFC.6
01664:  MOVLW  01
01666:  MOVLB  7
01668:  MOVWF  x0C
0166A:  MOVLW  0F
0166C:  MOVWF  x14
0166E:  MOVLW  64
01670:  MOVWF  x13
01672:  MOVFF  70C,715
01676:  MOVLB  0
01678:  RCALL  111E
0167A:  MOVFF  03,6FA
0167E:  MOVFF  02,6F9
01682:  MOVFF  01,6F8
01686:  MOVFF  00,6F7
....................  
....................     ptr = &TXRXBaD0; 
*
013E0:  MOVLW  0F
013E2:  MOVLB  7
013E4:  MOVWF  x0B
013E6:  MOVLW  66
013E8:  MOVWF  x0A
*
0168A:  MOVLW  0F
0168C:  MOVLB  7
0168E:  MOVWF  x0B
01690:  MOVLW  66
01692:  MOVWF  x0A
....................     for ( i = 0; i < len; i++ ) { 
*
013EA:  CLRF   x09
013EC:  MOVLB  6
013EE:  MOVF   xFB,W
013F0:  MOVLB  7
013F2:  SUBWF  x09,W
013F4:  BC    141E
*
01694:  CLRF   x09
01696:  MOVLB  6
01698:  MOVF   xFB,W
0169A:  MOVLB  7
0169C:  SUBWF  x09,W
0169E:  BC    16C8
....................         *data = *ptr; 
*
013F6:  MOVFF  70A,FE9
013FA:  MOVFF  70B,FEA
013FE:  MOVFF  FEF,70E
01402:  MOVFF  708,FEA
01406:  MOVFF  707,FE9
0140A:  MOVFF  70E,FEF
*
016A0:  MOVFF  70A,FE9
016A4:  MOVFF  70B,FEA
016A8:  MOVFF  FEF,70E
016AC:  MOVFF  708,FEA
016B0:  MOVFF  707,FE9
016B4:  MOVFF  70E,FEF
....................         data++; 
*
0140E:  INCF   x07,F
01410:  BTFSC  FD8.2
01412:  INCF   x08,F
*
016B8:  INCF   x07,F
016BA:  BTFSC  FD8.2
016BC:  INCF   x08,F
....................         ptr++; 
*
01414:  INCF   x0A,F
01416:  BTFSC  FD8.2
01418:  INCF   x0B,F
*
016BE:  INCF   x0A,F
016C0:  BTFSC  FD8.2
016C2:  INCF   x0B,F
....................     } 
*
0141A:  INCF   x09,F
0141C:  BRA    13EC
*
016C4:  INCF   x09,F
016C6:  BRA    1696
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
0141E:  MOVLW  F1
01420:  ANDWF  F6F,W
01422:  MOVWF  F6F
*
016C8:  MOVLW  F1
016CA:  ANDWF  F6F,W
016CC:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
01424:  MOVLB  6
01426:  BCF    xFC.7
01428:  BTFSC  FA4.7
0142A:  BSF    xFC.7
*
016CE:  MOVLB  6
016D0:  BCF    xFC.7
016D2:  BTFSC  FA4.7
016D4:  BSF    xFC.7
....................     CAN_INT_IRXIF = 0; 
*
0142C:  BCF    FA4.7
*
016D6:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
0142E:  BTFSS  xFC.4
01430:  BRA    143A
*
016D8:  BTFSS  xFC.4
016DA:  BRA    16E4
....................       RXB1CON.rxful=0; 
*
01432:  MOVLB  F
01434:  BCF    x50.7
*
016DC:  MOVLB  F
016DE:  BCF    x50.7
....................     } 
....................     else { 
*
01436:  BRA    143E
01438:  MOVLB  6
*
016E0:  BRA    16E8
016E2:  MOVLB  6
....................       RXB0CON.rxful=0; 
*
0143A:  BCF    F60.7
0143C:  MOVLB  F
*
016E4:  BCF    F60.7
016E6:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
0143E:  MOVLW  01
01440:  MOVWF  01
*
016E8:  MOVLW  01
016EA:  MOVWF  01
016EC:  MOVLB  7
016EE:  MOVLB  6
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
01316:  MOVF   28,W
01318:  SUBLW  FF
0131A:  BNZ   131E
....................       can_rspoint++; 
0131C:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
0131E:  MOVF   28,W
01320:  SUBLW  09
01322:  BTFSS  FD8.0
01324:  BRA    15D0
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01326:  MOVLW  06
01328:  MOVLB  7
0132A:  MOVWF  x08
0132C:  MOVLW  FD
0132E:  MOVWF  x07
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
01442:  MOVLB  7
01444:  CLRF   x06
01446:  MOVF   x06,F
01448:  BNZ   148E
....................          if(rx_id==can_filter[j]) 
0144A:  MOVF   x06,W
0144C:  MULLW  04
0144E:  MOVF   FF3,W
01450:  CLRF   03
01452:  ADDLW  39
01454:  MOVWF  FE9
01456:  MOVLW  01
01458:  ADDWFC 03,W
0145A:  MOVWF  FEA
0145C:  MOVFF  FEF,00
01460:  MOVFF  FEC,01
01464:  MOVFF  FEC,02
01468:  MOVFF  FEC,03
0146C:  MOVF   00,W
0146E:  MOVLB  6
01470:  SUBWF  xF7,W
01472:  BNZ   1488
01474:  MOVF   01,W
01476:  SUBWF  xF8,W
01478:  BNZ   1488
0147A:  MOVF   02,W
0147C:  SUBWF  xF9,W
0147E:  BNZ   1488
01480:  MOVF   03,W
01482:  SUBWF  xFA,W
01484:  BNZ   1488
....................             return; 
01486:  BRA    16F0
01488:  MOVLB  7
0148A:  INCF   x06,F
0148C:  BRA    1446
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
0148E:  MOVF   28,W
01490:  MULLW  0E
01492:  MOVF   FF3,W
01494:  CLRF   x08
01496:  MOVWF  x07
01498:  MOVLW  29
0149A:  ADDWF  x07,W
0149C:  MOVWF  FE9
0149E:  MOVLW  00
014A0:  ADDWFC x08,W
014A2:  MOVWF  FEA
014A4:  MOVLB  6
014A6:  MOVFF  6FA,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
014AA:  MOVF   28,W
014AC:  MULLW  0E
014AE:  MOVF   FF3,W
014B0:  MOVLB  7
014B2:  CLRF   x08
014B4:  MOVWF  x07
014B6:  MOVLW  01
014B8:  ADDWF  x07,W
014BA:  MOVWF  01
014BC:  MOVLW  00
014BE:  ADDWFC x08,W
014C0:  MOVWF  03
014C2:  MOVF   01,W
014C4:  ADDLW  29
014C6:  MOVWF  FE9
014C8:  MOVLW  00
014CA:  ADDWFC 03,W
014CC:  MOVWF  FEA
014CE:  MOVLB  6
014D0:  MOVFF  6F9,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
014D4:  MOVF   28,W
014D6:  MULLW  0E
014D8:  MOVF   FF3,W
014DA:  MOVLB  7
014DC:  CLRF   x08
014DE:  MOVWF  x07
014E0:  MOVLW  02
014E2:  ADDWF  x07,W
014E4:  MOVWF  01
014E6:  MOVLW  00
014E8:  ADDWFC x08,W
014EA:  MOVWF  03
014EC:  MOVF   01,W
014EE:  ADDLW  29
014F0:  MOVWF  FE9
014F2:  MOVLW  00
014F4:  ADDWFC 03,W
014F6:  MOVWF  FEA
014F8:  MOVLB  6
014FA:  MOVFF  6F8,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
014FE:  MOVF   28,W
01500:  MULLW  0E
01502:  MOVF   FF3,W
01504:  MOVLB  7
01506:  CLRF   x08
01508:  MOVWF  x07
0150A:  MOVLW  03
0150C:  ADDWF  x07,W
0150E:  MOVWF  01
01510:  MOVLW  00
01512:  ADDWFC x08,W
01514:  MOVWF  03
01516:  MOVF   01,W
01518:  ADDLW  29
0151A:  MOVWF  FE9
0151C:  MOVLW  00
0151E:  ADDWFC 03,W
01520:  MOVWF  FEA
01522:  MOVLB  6
01524:  MOVFF  6F7,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
01528:  MOVF   28,W
0152A:  MULLW  0E
0152C:  MOVF   FF3,W
0152E:  MOVLB  7
01530:  CLRF   x08
01532:  MOVWF  x07
01534:  MOVLW  04
01536:  ADDWF  x07,W
01538:  MOVWF  01
0153A:  MOVLW  00
0153C:  ADDWFC x08,W
0153E:  MOVWF  03
01540:  MOVF   01,W
01542:  ADDLW  29
01544:  MOVWF  FE9
01546:  MOVLW  00
01548:  ADDWFC 03,W
0154A:  MOVWF  FEA
0154C:  MOVFF  6FB,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
01550:  MOVF   28,W
01552:  MULLW  0E
01554:  MOVF   FF3,W
01556:  CLRF   x08
01558:  MOVWF  x07
0155A:  MOVLW  05
0155C:  ADDWF  x07,W
0155E:  MOVWF  01
01560:  MOVLW  00
01562:  ADDWFC x08,W
01564:  MOVWF  03
01566:  MOVF   01,W
01568:  ADDLW  29
0156A:  MOVWF  FE9
0156C:  MOVLW  00
0156E:  ADDWFC 03,W
01570:  MOVWF  FEA
01572:  MOVFF  6FC,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
01576:  CLRF   x05
01578:  MOVLB  6
0157A:  MOVF   xFB,W
0157C:  MOVLB  7
0157E:  SUBWF  x05,W
01580:  BC    15CA
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
01582:  MOVF   28,W
01584:  MULLW  0E
01586:  MOVF   FF3,W
01588:  CLRF   x08
0158A:  MOVWF  x07
0158C:  MOVLW  06
0158E:  ADDWF  x05,W
01590:  CLRF   03
01592:  ADDWF  x07,W
01594:  MOVWF  01
01596:  MOVF   x08,W
01598:  ADDWFC 03,F
0159A:  MOVF   01,W
0159C:  ADDLW  29
0159E:  MOVWF  01
015A0:  MOVLW  00
015A2:  ADDWFC 03,F
015A4:  MOVFF  03,708
015A8:  CLRF   03
015AA:  MOVF   x05,W
015AC:  ADDLW  FD
015AE:  MOVWF  FE9
015B0:  MOVLW  06
015B2:  ADDWFC 03,W
015B4:  MOVWF  FEA
015B6:  MOVFF  FEF,709
015BA:  MOVFF  708,FEA
015BE:  MOVFF  01,FE9
015C2:  MOVFF  709,FEF
....................       } 
015C6:  INCF   x05,F
015C8:  BRA    1578
....................  
....................       can_rspoint++; 
015CA:  INCF   28,F
....................    } 
....................    else 
015CC:  BRA    16EE
015CE:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
015D0:  MOVLW  06
015D2:  MOVLB  7
015D4:  MOVWF  x08
015D6:  MOVLW  FD
015D8:  MOVWF  x07
.................... } 
*
016F0:  MOVLB  0
016F2:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
0190A:  MOVF   xB6,W
0190C:  SUBLW  0A
0190E:  BNZ   1912
....................    { 
....................       can_tspoint--; 
01910:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
01912:  MOVF   xB6,W
01914:  SUBLW  FF
01916:  BTFSC  FD8.2
01918:  BRA    1B28
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
0191A:  MOVF   xB6,W
0191C:  MULLW  0D
0191E:  MOVF   FF3,W
01920:  MOVLB  7
01922:  CLRF   x08
01924:  MOVWF  x07
01926:  MOVLW  B7
01928:  ADDWF  x07,W
0192A:  MOVWF  FE9
0192C:  MOVLW  00
0192E:  ADDWFC x08,W
01930:  MOVWF  FEA
01932:  MOVFF  FEF,707
01936:  MOVLB  0
01938:  MOVF   xB6,W
0193A:  MULLW  0D
0193C:  MOVF   FF3,W
0193E:  MOVLB  7
01940:  CLRF   x09
01942:  MOVWF  x08
01944:  MOVLW  01
01946:  ADDWF  x08,W
01948:  MOVWF  01
0194A:  MOVLW  00
0194C:  ADDWFC x09,W
0194E:  MOVWF  03
01950:  MOVF   01,W
01952:  ADDLW  B7
01954:  MOVWF  FE9
01956:  MOVLW  00
01958:  ADDWFC 03,W
0195A:  MOVWF  FEA
0195C:  MOVFF  FEF,708
01960:  MOVLB  0
01962:  MOVF   xB6,W
01964:  MULLW  0D
01966:  MOVF   FF3,W
01968:  MOVLB  7
0196A:  CLRF   x0A
0196C:  MOVWF  x09
0196E:  MOVLW  02
01970:  ADDWF  x09,W
01972:  MOVWF  01
01974:  MOVLW  00
01976:  ADDWFC x0A,W
01978:  MOVWF  03
0197A:  MOVF   01,W
0197C:  ADDLW  B7
0197E:  MOVWF  FE9
01980:  MOVLW  00
01982:  ADDWFC 03,W
01984:  MOVWF  FEA
01986:  MOVFF  FEF,709
0198A:  MOVLB  0
0198C:  MOVF   xB6,W
0198E:  MULLW  0D
01990:  MOVF   FF3,W
01992:  MOVLB  7
01994:  CLRF   x0B
01996:  MOVWF  x0A
01998:  MOVLW  03
0199A:  ADDWF  x0A,W
0199C:  MOVWF  01
0199E:  MOVLW  00
019A0:  ADDWFC x0B,W
019A2:  MOVWF  03
019A4:  MOVF   01,W
019A6:  ADDLW  B7
019A8:  MOVWF  FE9
019AA:  MOVLW  00
019AC:  ADDWFC 03,W
019AE:  MOVWF  FEA
019B0:  MOVFF  FEF,70A
019B4:  MOVFF  707,6FA
019B8:  MOVFF  708,6F9
019BC:  MOVFF  709,6F8
019C0:  MOVFF  70A,6F7
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
019C4:  MOVLB  0
019C6:  MOVF   xB6,W
019C8:  MULLW  0D
019CA:  MOVF   FF3,W
019CC:  MOVLB  7
019CE:  CLRF   x08
019D0:  MOVWF  x07
019D2:  MOVLW  0C
019D4:  ADDWF  x07,W
019D6:  MOVWF  01
019D8:  MOVLW  00
019DA:  ADDWFC x08,W
019DC:  MOVWF  03
019DE:  MOVF   01,W
019E0:  ADDLW  B7
019E2:  MOVWF  FE9
019E4:  MOVLW  00
019E6:  ADDWFC 03,W
019E8:  MOVWF  FEA
019EA:  SWAPF  FEF,W
019EC:  MOVLB  6
019EE:  MOVWF  xFB
019F0:  MOVLW  0F
019F2:  ANDWF  xFB,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
019F4:  MOVLB  0
019F6:  MOVF   xB6,W
019F8:  MULLW  0D
019FA:  MOVF   FF3,W
019FC:  MOVLB  7
019FE:  CLRF   x08
01A00:  MOVWF  x07
01A02:  MOVLW  0C
01A04:  ADDWF  x07,W
01A06:  MOVWF  01
01A08:  MOVLW  00
01A0A:  ADDWFC x08,W
01A0C:  MOVWF  03
01A0E:  MOVF   01,W
01A10:  ADDLW  B7
01A12:  MOVWF  FE9
01A14:  MOVLW  00
01A16:  ADDWFC 03,W
01A18:  MOVWF  FEA
01A1A:  MOVF   FEF,W
01A1C:  ANDLW  0C
01A1E:  MOVWF  00
01A20:  RRCF   00,W
01A22:  MOVLB  6
01A24:  MOVWF  xFC
01A26:  RRCF   xFC,F
01A28:  MOVLW  3F
01A2A:  ANDWF  xFC,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
01A2C:  MOVLB  0
01A2E:  MOVF   xB6,W
01A30:  MULLW  0D
01A32:  MOVF   FF3,W
01A34:  MOVLB  7
01A36:  CLRF   x08
01A38:  MOVWF  x07
01A3A:  MOVLW  0C
01A3C:  ADDWF  x07,W
01A3E:  MOVWF  01
01A40:  MOVLW  00
01A42:  ADDWFC x08,W
01A44:  MOVWF  03
01A46:  MOVF   01,W
01A48:  ADDLW  B7
01A4A:  MOVWF  FE9
01A4C:  MOVLW  00
01A4E:  ADDWFC 03,W
01A50:  MOVWF  FEA
01A52:  MOVFF  FEF,707
01A56:  BCF    x05.0
01A58:  BTFSC  x07.1
01A5A:  BSF    x05.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01A5C:  MOVLB  0
01A5E:  MOVF   xB6,W
01A60:  MULLW  0D
01A62:  MOVF   FF3,W
01A64:  MOVLB  7
01A66:  CLRF   x08
01A68:  MOVWF  x07
01A6A:  MOVLW  0C
01A6C:  ADDWF  x07,W
01A6E:  MOVWF  01
01A70:  MOVLW  00
01A72:  ADDWFC x08,W
01A74:  MOVWF  03
01A76:  MOVF   01,W
01A78:  ADDLW  B7
01A7A:  MOVWF  FE9
01A7C:  MOVLW  00
01A7E:  ADDWFC 03,W
01A80:  MOVWF  FEA
01A82:  MOVFF  FEF,707
01A86:  BCF    x05.1
01A88:  BTFSC  x07.0
01A8A:  BSF    x05.1
....................  
....................       for(i=0;i<tx_length;i++) 
01A8C:  CLRF   x06
01A8E:  MOVLB  6
01A90:  MOVF   xFB,W
01A92:  MOVLB  7
01A94:  SUBWF  x06,W
01A96:  BC    1AE8
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01A98:  CLRF   03
01A9A:  MOVF   x06,W
01A9C:  ADDLW  FD
01A9E:  MOVWF  01
01AA0:  MOVLW  06
01AA2:  ADDWFC 03,F
01AA4:  MOVFF  01,707
01AA8:  MOVFF  03,708
01AAC:  MOVLB  0
01AAE:  MOVF   xB6,W
01AB0:  MULLW  0D
01AB2:  MOVF   FF3,W
01AB4:  MOVLB  7
01AB6:  CLRF   x0A
01AB8:  MOVWF  x09
01ABA:  MOVLW  04
01ABC:  ADDWF  x06,W
01ABE:  CLRF   03
01AC0:  ADDWF  x09,W
01AC2:  MOVWF  01
01AC4:  MOVF   x0A,W
01AC6:  ADDWFC 03,F
01AC8:  MOVF   01,W
01ACA:  ADDLW  B7
01ACC:  MOVWF  FE9
01ACE:  MOVLW  00
01AD0:  ADDWFC 03,W
01AD2:  MOVWF  FEA
01AD4:  MOVFF  FEF,709
01AD8:  MOVFF  708,FEA
01ADC:  MOVFF  707,FE9
01AE0:  MOVFF  709,FEF
....................       } 
01AE4:  INCF   x06,F
01AE6:  BRA    1A8E
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01AE8:  MOVLW  00
01AEA:  BTFSC  x05.0
01AEC:  MOVLW  01
01AEE:  MOVWF  x07
01AF0:  MOVLW  00
01AF2:  BTFSC  x05.1
01AF4:  MOVLW  01
01AF6:  MOVWF  x08
01AF8:  MOVFF  6FA,70C
01AFC:  MOVFF  6F9,70B
01B00:  MOVFF  6F8,70A
01B04:  MOVFF  6F7,709
01B08:  MOVLW  06
01B0A:  MOVWF  x0E
01B0C:  MOVLW  FD
01B0E:  MOVWF  x0D
01B10:  MOVFF  6FB,70F
01B14:  MOVFF  6FC,710
01B18:  MOVFF  707,711
01B1C:  MOVFF  708,712
01B20:  MOVLB  0
01B22:  BRA    1838
....................  
....................       can_tspoint--; 
01B24:  DECF   xB6,F
....................    } 
....................    else 
01B26:  BRA    1B2A
....................       return; 
01B28:  BRA    1B2A
.................... } 
01B2A:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... //#define DEBUG 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
025EC:  MOVLB  6
025EE:  CLRF   xF3
025F0:  MOVF   xF2,W
025F2:  SUBWF  xF3,W
025F4:  BC    2628
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
025F6:  CLRF   03
025F8:  MOVF   xF3,W
025FA:  ADDWF  xF0,W
025FC:  MOVWF  01
025FE:  MOVF   xF1,W
02600:  ADDWFC 03,F
02602:  MOVFF  03,6F5
02606:  MOVFF  6EE,FE9
0260A:  MOVFF  6EF,FEA
0260E:  MOVFF  FEF,6F6
02612:  MOVFF  6F5,FEA
02616:  MOVFF  01,FE9
0261A:  MOVFF  6F6,FEF
....................       ++origin; 
0261E:  INCF   xEE,F
02620:  BTFSC  FD8.2
02622:  INCF   xEF,F
....................    } 
02624:  INCF   xF3,F
02626:  BRA    25F0
.................... } 
02628:  MOVLB  0
0262A:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
0237A:  MOVLB  6
0237C:  MOVFF  6DF,FE9
02380:  MOVFF  6E0,FEA
02384:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
02386:  MOVLW  01
02388:  ADDWF  xDF,W
0238A:  MOVWF  01
0238C:  MOVLW  00
0238E:  ADDWFC xE0,W
02390:  MOVFF  01,FE9
02394:  MOVWF  FEA
02396:  MOVFF  6DC,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
0239A:  MOVLW  01
0239C:  ADDWF  xDF,W
0239E:  MOVWF  01
023A0:  MOVLW  00
023A2:  ADDWFC xE0,W
023A4:  MOVWF  03
023A6:  MOVF   01,W
023A8:  ADDLW  03
023AA:  MOVWF  FE9
023AC:  MOVLW  00
023AE:  ADDWFC 03,W
023B0:  MOVWF  FEA
023B2:  MOVFF  6DD,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
023B6:  MOVLW  01
023B8:  ADDWF  xDF,W
023BA:  MOVWF  01
023BC:  MOVLW  00
023BE:  ADDWFC xE0,W
023C0:  MOVWF  03
023C2:  MOVF   01,W
023C4:  ADDLW  06
023C6:  MOVWF  FE9
023C8:  MOVLW  00
023CA:  ADDWFC 03,W
023CC:  MOVWF  FEA
023CE:  MOVFF  6DE,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
023D2:  MOVLW  01
023D4:  ADDWF  xDF,W
023D6:  MOVWF  01
023D8:  MOVLW  00
023DA:  ADDWFC xE0,W
023DC:  MOVWF  03
023DE:  MOVF   01,W
023E0:  ADDLW  0E
023E2:  MOVWF  FE9
023E4:  MOVLW  00
023E6:  ADDWFC 03,W
023E8:  MOVWF  FEA
023EA:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
023EC:  MOVLW  01
023EE:  ADDWF  xDF,W
023F0:  MOVWF  01
023F2:  MOVLW  00
023F4:  ADDWFC xE0,W
023F6:  MOVWF  03
023F8:  MOVF   01,W
023FA:  ADDLW  0F
023FC:  MOVWF  FE9
023FE:  MOVLW  00
02400:  ADDWFC 03,W
02402:  MOVWF  FEA
02404:  MOVLW  01
02406:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
02408:  ADDWF  xDF,W
0240A:  MOVWF  01
0240C:  MOVLW  00
0240E:  ADDWFC xE0,W
02410:  MOVWF  03
02412:  MOVF   01,W
02414:  ADDLW  09
02416:  MOVWF  FE9
02418:  MOVLW  00
0241A:  ADDWFC 03,W
0241C:  MOVWF  FEA
0241E:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
02420:  MOVLW  01
02422:  ADDWF  xDF,W
02424:  MOVWF  01
02426:  MOVLW  00
02428:  ADDWFC xE0,W
0242A:  MOVWF  03
0242C:  MOVF   01,W
0242E:  ADDLW  0E
02430:  MOVWF  FE9
02432:  MOVLW  00
02434:  ADDWFC 03,W
02436:  MOVWF  FEA
02438:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
0243A:  MOVLW  01
0243C:  ADDWF  xDF,W
0243E:  MOVWF  01
02440:  MOVLW  00
02442:  ADDWFC xE0,W
02444:  MOVWF  03
02446:  MOVF   01,W
02448:  ADDLW  02
0244A:  MOVWF  FE9
0244C:  MOVLW  00
0244E:  ADDWFC 03,W
02450:  MOVWF  FEA
02452:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
02454:  MOVLW  01
02456:  ADDWF  xDF,W
02458:  MOVWF  01
0245A:  MOVLW  00
0245C:  ADDWFC xE0,W
0245E:  MOVWF  03
02460:  MOVF   01,W
02462:  ADDLW  05
02464:  MOVWF  FE9
02466:  MOVLW  00
02468:  ADDWFC 03,W
0246A:  MOVWF  FEA
0246C:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
0246E:  MOVLW  01
02470:  ADDWF  xDF,W
02472:  MOVWF  01
02474:  MOVLW  00
02476:  ADDWFC xE0,W
02478:  MOVWF  03
0247A:  MOVF   01,W
0247C:  ADDLW  08
0247E:  MOVWF  FE9
02480:  MOVLW  00
02482:  ADDWFC 03,W
02484:  MOVWF  FEA
02486:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
02488:  MOVLW  01
0248A:  ADDWF  xDF,W
0248C:  MOVWF  01
0248E:  MOVLW  00
02490:  ADDWFC xE0,W
02492:  MOVWF  03
02494:  MOVF   01,W
02496:  ADDLW  01
02498:  MOVWF  FE9
0249A:  MOVLW  00
0249C:  ADDWFC 03,W
0249E:  MOVWF  FEA
024A0:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
024A2:  MOVLW  01
024A4:  ADDWF  xDF,W
024A6:  MOVWF  01
024A8:  MOVLW  00
024AA:  ADDWFC xE0,W
024AC:  MOVWF  03
024AE:  MOVF   01,W
024B0:  ADDLW  04
024B2:  MOVWF  FE9
024B4:  MOVLW  00
024B6:  ADDWFC 03,W
024B8:  MOVWF  FEA
024BA:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
024BC:  MOVLW  01
024BE:  ADDWF  xDF,W
024C0:  MOVWF  01
024C2:  MOVLW  00
024C4:  ADDWFC xE0,W
024C6:  MOVWF  03
024C8:  MOVF   01,W
024CA:  ADDLW  07
024CC:  MOVWF  FE9
024CE:  MOVLW  00
024D0:  ADDWFC 03,W
024D2:  MOVWF  FEA
024D4:  MOVLW  01
024D6:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
024D8:  ADDWF  xDF,W
024DA:  MOVWF  01
024DC:  MOVLW  00
024DE:  ADDWFC xE0,W
024E0:  MOVWF  03
024E2:  MOVF   01,W
024E4:  ADDLW  10
024E6:  MOVWF  01
024E8:  MOVLW  00
024EA:  ADDWFC 03,F
024EC:  MOVFF  03,6E5
024F0:  CLRF   03
024F2:  MOVF   xE1,W
024F4:  ADDLW  1C
024F6:  MOVWF  FE9
024F8:  MOVLW  00
024FA:  ADDWFC 03,W
024FC:  MOVWF  FEA
024FE:  MOVFF  FEF,6E6
02502:  MOVFF  6E5,FEA
02506:  MOVFF  01,FE9
0250A:  MOVFF  6E6,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
0250E:  MOVLW  01
02510:  ADDWF  xDF,W
02512:  MOVWF  01
02514:  MOVLW  00
02516:  ADDWFC xE0,W
02518:  MOVWF  03
0251A:  MOVF   01,W
0251C:  ADDLW  0A
0251E:  MOVWF  FE9
02520:  MOVLW  00
02522:  ADDWFC 03,W
02524:  MOVWF  FEA
02526:  MOVF   FEE,F
02528:  MOVF   FEE,F
0252A:  CLRF   FEC
0252C:  MOVF   FED,F
0252E:  CLRF   FEF
02530:  MOVF   FED,F
02532:  CLRF   FEF
02534:  MOVF   FED,F
02536:  CLRF   FEF
.................... } 
02538:  MOVLB  0
0253A:  GOTO   2EEC (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
02320:  MOVLB  6
02322:  MOVFF  6DE,FE9
02326:  MOVFF  6DF,FEA
0232A:  MOVLW  01
0232C:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
0232E:  MOVFF  6DC,6E1
....................       sw.off.adress=off_adr; 
02332:  MOVFF  6DD,6E4
....................       sw.previous_state=button_depressed; 
02336:  BSF    xE7.1
....................       sw.outstate=off; 
02338:  MOVWF  xEC
....................       sw.on.needs_update=0; 
0233A:  BCF    xE3.0
....................       sw.off.needs_update=0; 
0233C:  BCF    xE6.0
....................       sw.on.value=0; 
0233E:  CLRF   xE2
....................       sw.off.value=0; 
02340:  CLRF   xE5
....................       sw.realbutton=inputs[real_button]; 
02342:  CLRF   03
02344:  MOVF   xE0,W
02346:  ADDLW  1C
02348:  MOVWF  FE9
0234A:  MOVLW  00
0234C:  ADDWFC 03,W
0234E:  MOVWF  FEA
02350:  MOVFF  FEF,6ED
....................       input->device=sw; 
02354:  MOVLW  01
02356:  ADDWF  xDE,W
02358:  MOVWF  FE9
0235A:  MOVLW  00
0235C:  ADDWFC xDF,W
0235E:  MOVWF  FEA
02360:  MOVLW  06
02362:  MOVWF  FE2
02364:  MOVLW  E1
02366:  MOVWF  FE1
02368:  MOVLW  20
0236A:  MOVWF  01
0236C:  MOVFF  FE6,FEE
02370:  DECFSZ 01,F
02372:  BRA    236C
.................... } 
02374:  MOVLB  0
02376:  GOTO   2E02 (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
0253E:  MOVLB  6
02540:  MOVFF  6DF,FE9
02544:  MOVFF  6E0,FEA
02548:  MOVLW  02
0254A:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
0254C:  MOVFF  6DD,6E3
....................       sw.off.adress=off_adr; 
02550:  MOVFF  6DE,6E6
....................       sw.previous_state=button_depressed; 
02554:  BSF    xE9.1
....................       sw.outstate=off; 
02556:  MOVLW  01
02558:  MOVWF  xEA
....................       sw.on.needs_update=0; 
0255A:  BCF    xE5.0
....................       sw.off.needs_update=0; 
0255C:  BCF    xE8.0
....................       sw.on.value=0; 
0255E:  CLRF   xE4
....................       sw.off.value=0; 
02560:  CLRF   xE7
....................       sw.repeat=repeat; 
02562:  BCF    xEB.0
02564:  BTFSC  xE2.0
02566:  BSF    xEB.0
....................       sw.realbutton=inputs[real_button]; 
02568:  CLRF   03
0256A:  MOVF   xE1,W
0256C:  ADDLW  1C
0256E:  MOVWF  FE9
02570:  MOVLW  00
02572:  ADDWFC 03,W
02574:  MOVWF  FEA
02576:  MOVFF  FEF,6EC
....................       input->device=sw; 
0257A:  MOVLW  01
0257C:  ADDWF  xDF,W
0257E:  MOVWF  FE9
02580:  MOVLW  00
02582:  ADDWFC xE0,W
02584:  MOVWF  FEA
02586:  MOVLW  06
02588:  MOVWF  FE2
0258A:  MOVLW  E3
0258C:  MOVWF  FE1
0258E:  MOVLW  20
02590:  MOVWF  01
02592:  MOVFF  FE6,FEE
02596:  DECFSZ 01,F
02598:  BRA    2592
.................... } 
0259A:  MOVLB  0
0259C:  GOTO   2FE2 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
02822:  MOVLB  6
02824:  MOVFF  6E2,FE9
02828:  MOVFF  6E3,FEA
0282C:  MOVLW  65
0282E:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
02830:  MOVLW  01
02832:  ADDWF  xE2,W
02834:  MOVWF  01
02836:  MOVLW  00
02838:  ADDWFC xE3,W
0283A:  MOVWF  03
0283C:  MOVF   01,W
0283E:  ADDLW  1D
02840:  MOVWF  FE9
02842:  MOVLW  00
02844:  ADDWFC 03,W
02846:  MOVWF  FEA
02848:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
0284A:  MOVLW  01
0284C:  ADDWF  xE2,W
0284E:  MOVWF  01
02850:  MOVLW  00
02852:  ADDWFC xE3,W
02854:  MOVWF  03
02856:  MOVF   01,W
02858:  ADDLW  09
0285A:  MOVWF  FE9
0285C:  MOVLW  00
0285E:  ADDWFC 03,W
02860:  MOVWF  FEA
02862:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02864:  MOVLW  01
02866:  ADDWF  xE2,W
02868:  MOVWF  01
0286A:  MOVLW  00
0286C:  ADDWFC xE3,W
0286E:  MOVWF  03
02870:  MOVF   01,W
02872:  ADDLW  13
02874:  MOVWF  FE9
02876:  MOVLW  00
02878:  ADDWFC 03,W
0287A:  MOVWF  FEA
0287C:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
0287E:  MOVLW  01
02880:  ADDWF  xE2,W
02882:  MOVWF  01
02884:  MOVLW  00
02886:  ADDWFC xE3,W
02888:  MOVWF  03
0288A:  MOVF   01,W
0288C:  ADDLW  1C
0288E:  MOVWF  FE9
02890:  MOVLW  00
02892:  ADDWFC 03,W
02894:  MOVWF  FEA
02896:  MOVLW  7F
02898:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
0289A:  MOVLW  01
0289C:  ADDWF  xE2,W
0289E:  MOVWF  01
028A0:  MOVLW  00
028A2:  ADDWFC xE3,W
028A4:  MOVWF  03
028A6:  MOVF   01,W
028A8:  ADDLW  08
028AA:  MOVWF  FE9
028AC:  MOVLW  00
028AE:  ADDWFC 03,W
028B0:  MOVWF  FEA
028B2:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
028B4:  MOVLW  01
028B6:  ADDWF  xE2,W
028B8:  MOVWF  01
028BA:  MOVLW  00
028BC:  ADDWFC xE3,W
028BE:  MOVWF  03
028C0:  MOVF   01,W
028C2:  ADDLW  12
028C4:  MOVWF  FE9
028C6:  MOVLW  00
028C8:  ADDWFC 03,W
028CA:  MOVWF  FEA
028CC:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
028CE:  MOVLW  01
028D0:  ADDWF  xE2,W
028D2:  MOVWF  01
028D4:  MOVLW  00
028D6:  ADDWFC xE3,W
028D8:  MOVWF  03
028DA:  MOVF   01,W
028DC:  ADDLW  1F
028DE:  MOVWF  FE9
028E0:  MOVLW  00
028E2:  ADDWFC 03,W
028E4:  MOVWF  FEA
028E6:  MOVFF  6E4,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
028EA:  MOVLW  01
028EC:  ADDWF  xE2,W
028EE:  MOVWF  01
028F0:  MOVLW  00
028F2:  ADDWFC xE3,W
028F4:  MOVWF  03
028F6:  MOVF   01,W
028F8:  ADDLW  14
028FA:  MOVWF  01
028FC:  MOVLW  00
028FE:  ADDWFC 03,F
02900:  MOVFF  01,6E7
02904:  MOVFF  03,6E8
02908:  MOVFF  6DD,6EF
0290C:  MOVFF  6DC,6EE
02910:  MOVFF  03,6F1
02914:  MOVFF  01,6F0
02918:  MOVLW  08
0291A:  MOVWF  xF2
0291C:  MOVLB  0
0291E:  RCALL  25EC
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
02920:  MOVLW  01
02922:  MOVLB  6
02924:  ADDWF  xE2,W
02926:  MOVWF  01
02928:  MOVLW  00
0292A:  ADDWFC xE3,W
0292C:  MOVWF  03
0292E:  MOVFF  01,6E7
02932:  MOVWF  xE8
02934:  MOVFF  6DF,6EF
02938:  MOVFF  6DE,6EE
0293C:  MOVWF  xF1
0293E:  MOVFF  01,6F0
02942:  MOVLW  08
02944:  MOVWF  xF2
02946:  MOVLB  0
02948:  RCALL  25EC
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
0294A:  MOVLW  01
0294C:  MOVLB  6
0294E:  ADDWF  xE2,W
02950:  MOVWF  01
02952:  MOVLW  00
02954:  ADDWFC xE3,W
02956:  MOVWF  03
02958:  MOVF   01,W
0295A:  ADDLW  0A
0295C:  MOVWF  01
0295E:  MOVLW  00
02960:  ADDWFC 03,F
02962:  MOVFF  01,6E7
02966:  MOVFF  03,6E8
0296A:  MOVFF  6E1,6EF
0296E:  MOVFF  6E0,6EE
02972:  MOVFF  03,6F1
02976:  MOVFF  01,6F0
0297A:  MOVLW  08
0297C:  MOVWF  xF2
0297E:  MOVLB  0
02980:  RCALL  25EC
....................    ((struct light)output->device).out_state=_off; 
02982:  MOVLW  01
02984:  MOVLB  6
02986:  ADDWF  xE2,W
02988:  MOVWF  01
0298A:  MOVLW  00
0298C:  ADDWFC xE3,W
0298E:  MOVWF  03
02990:  MOVF   01,W
02992:  ADDLW  1E
02994:  MOVWF  FE9
02996:  MOVLW  00
02998:  ADDWFC 03,W
0299A:  MOVWF  FEA
0299C:  MOVLW  01
0299E:  MOVWF  FEF
.................... } 
029A0:  MOVLB  0
029A2:  GOTO   3252 (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02BE8:  MOVLB  6
02BEA:  MOVFF  6E0,FE9
02BEE:  MOVFF  6E1,FEA
02BF2:  MOVLW  64
02BF4:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
02BF6:  MOVLW  01
02BF8:  ADDWF  xE0,W
02BFA:  MOVWF  01
02BFC:  MOVLW  00
02BFE:  ADDWFC xE1,W
02C00:  MOVWF  03
02C02:  MOVF   01,W
02C04:  ADDLW  09
02C06:  MOVWF  FE9
02C08:  MOVLW  00
02C0A:  ADDWFC 03,W
02C0C:  MOVWF  FEA
02C0E:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
02C10:  MOVLW  01
02C12:  ADDWF  xE0,W
02C14:  MOVWF  01
02C16:  MOVLW  00
02C18:  ADDWFC xE1,W
02C1A:  MOVWF  03
02C1C:  MOVF   01,W
02C1E:  ADDLW  13
02C20:  MOVWF  FE9
02C22:  MOVLW  00
02C24:  ADDWFC 03,W
02C26:  MOVWF  FEA
02C28:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
02C2A:  MOVLW  01
02C2C:  ADDWF  xE0,W
02C2E:  MOVWF  01
02C30:  MOVLW  00
02C32:  ADDWFC xE1,W
02C34:  MOVWF  03
02C36:  MOVF   01,W
02C38:  ADDLW  08
02C3A:  MOVWF  FE9
02C3C:  MOVLW  00
02C3E:  ADDWFC 03,W
02C40:  MOVWF  FEA
02C42:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
02C44:  MOVLW  01
02C46:  ADDWF  xE0,W
02C48:  MOVWF  01
02C4A:  MOVLW  00
02C4C:  ADDWFC xE1,W
02C4E:  MOVWF  03
02C50:  MOVF   01,W
02C52:  ADDLW  12
02C54:  MOVWF  FE9
02C56:  MOVLW  00
02C58:  ADDWFC 03,W
02C5A:  MOVWF  FEA
02C5C:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02C5E:  MOVLW  01
02C60:  ADDWF  xE0,W
02C62:  MOVWF  01
02C64:  MOVLW  00
02C66:  ADDWFC xE1,W
02C68:  MOVWF  03
02C6A:  MOVF   01,W
02C6C:  ADDLW  14
02C6E:  MOVWF  FE9
02C70:  MOVLW  00
02C72:  ADDWFC 03,W
02C74:  MOVWF  FEA
02C76:  MOVFF  6E2,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02C7A:  MOVLW  01
02C7C:  ADDWF  xE0,W
02C7E:  MOVWF  01
02C80:  MOVLW  00
02C82:  ADDWFC xE1,W
02C84:  MOVWF  03
02C86:  MOVFF  01,6E5
02C8A:  MOVWF  xE6
02C8C:  MOVFF  6DD,6EF
02C90:  MOVFF  6DC,6EE
02C94:  MOVWF  xF1
02C96:  MOVFF  01,6F0
02C9A:  MOVLW  08
02C9C:  MOVWF  xF2
02C9E:  MOVLB  0
02CA0:  RCALL  25EC
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02CA2:  MOVLW  01
02CA4:  MOVLB  6
02CA6:  ADDWF  xE0,W
02CA8:  MOVWF  01
02CAA:  MOVLW  00
02CAC:  ADDWFC xE1,W
02CAE:  MOVWF  03
02CB0:  MOVF   01,W
02CB2:  ADDLW  0A
02CB4:  MOVWF  01
02CB6:  MOVLW  00
02CB8:  ADDWFC 03,F
02CBA:  MOVFF  01,6E5
02CBE:  MOVFF  03,6E6
02CC2:  MOVFF  6DF,6EF
02CC6:  MOVFF  6DE,6EE
02CCA:  MOVFF  03,6F1
02CCE:  MOVFF  01,6F0
02CD2:  MOVLW  08
02CD4:  MOVWF  xF2
02CD6:  MOVLB  0
02CD8:  RCALL  25EC
.................... } 
02CDA:  GOTO   34C0 (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
029A6:  MOVLB  6
029A8:  MOVFF  6E4,FE9
029AC:  MOVFF  6E5,FEA
029B0:  MOVLW  66
029B2:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
029B4:  MOVLW  01
029B6:  ADDWF  xE4,W
029B8:  MOVWF  01
029BA:  MOVLW  00
029BC:  ADDWFC xE5,W
029BE:  MOVWF  03
029C0:  MOVF   01,W
029C2:  ADDLW  09
029C4:  MOVWF  FE9
029C6:  MOVLW  00
029C8:  ADDWFC 03,W
029CA:  MOVWF  FEA
029CC:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
029CE:  MOVLW  01
029D0:  ADDWF  xE4,W
029D2:  MOVWF  01
029D4:  MOVLW  00
029D6:  ADDWFC xE5,W
029D8:  MOVWF  03
029DA:  MOVF   01,W
029DC:  ADDLW  13
029DE:  MOVWF  FE9
029E0:  MOVLW  00
029E2:  ADDWFC 03,W
029E4:  MOVWF  FEA
029E6:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
029E8:  MOVLW  01
029EA:  ADDWF  xE4,W
029EC:  MOVWF  01
029EE:  MOVLW  00
029F0:  ADDWFC xE5,W
029F2:  MOVWF  03
029F4:  MOVF   01,W
029F6:  ADDLW  08
029F8:  MOVWF  FE9
029FA:  MOVLW  00
029FC:  ADDWFC 03,W
029FE:  MOVWF  FEA
02A00:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
02A02:  MOVLW  01
02A04:  ADDWF  xE4,W
02A06:  MOVWF  01
02A08:  MOVLW  00
02A0A:  ADDWFC xE5,W
02A0C:  MOVWF  03
02A0E:  MOVF   01,W
02A10:  ADDLW  12
02A12:  MOVWF  FE9
02A14:  MOVLW  00
02A16:  ADDWFC 03,W
02A18:  MOVWF  FEA
02A1A:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
02A1C:  MOVLW  01
02A1E:  ADDWF  xE4,W
02A20:  MOVWF  01
02A22:  MOVLW  00
02A24:  ADDWFC xE5,W
02A26:  MOVWF  03
02A28:  MOVF   01,W
02A2A:  ADDLW  1D
02A2C:  MOVWF  FE9
02A2E:  MOVLW  00
02A30:  ADDWFC 03,W
02A32:  MOVWF  FEA
02A34:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
02A36:  MOVLW  01
02A38:  ADDWF  xE4,W
02A3A:  MOVWF  01
02A3C:  MOVLW  00
02A3E:  ADDWFC xE5,W
02A40:  MOVWF  03
02A42:  MOVF   01,W
02A44:  ADDLW  27
02A46:  MOVWF  FE9
02A48:  MOVLW  00
02A4A:  ADDWFC 03,W
02A4C:  MOVWF  FEA
02A4E:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
02A50:  MOVLW  01
02A52:  ADDWF  xE4,W
02A54:  MOVWF  01
02A56:  MOVLW  00
02A58:  ADDWFC xE5,W
02A5A:  MOVWF  03
02A5C:  MOVF   01,W
02A5E:  ADDLW  1C
02A60:  MOVWF  FE9
02A62:  MOVLW  00
02A64:  ADDWFC 03,W
02A66:  MOVWF  FEA
02A68:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
02A6A:  MOVLW  01
02A6C:  ADDWF  xE4,W
02A6E:  MOVWF  01
02A70:  MOVLW  00
02A72:  ADDWFC xE5,W
02A74:  MOVWF  03
02A76:  MOVF   01,W
02A78:  ADDLW  26
02A7A:  MOVWF  FE9
02A7C:  MOVLW  00
02A7E:  ADDWFC 03,W
02A80:  MOVWF  FEA
02A82:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
02A84:  MOVLW  01
02A86:  ADDWF  xE4,W
02A88:  MOVWF  01
02A8A:  MOVLW  00
02A8C:  ADDWFC xE5,W
02A8E:  MOVWF  03
02A90:  MOVF   01,W
02A92:  ADDLW  28
02A94:  MOVWF  FE9
02A96:  MOVLW  00
02A98:  ADDWFC 03,W
02A9A:  MOVWF  FEA
02A9C:  MOVFF  6E6,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
02AA0:  MOVLW  01
02AA2:  ADDWF  xE4,W
02AA4:  MOVWF  01
02AA6:  MOVLW  00
02AA8:  ADDWFC xE5,W
02AAA:  MOVWF  03
02AAC:  MOVF   01,W
02AAE:  ADDLW  29
02AB0:  MOVWF  FE9
02AB2:  MOVLW  00
02AB4:  ADDWFC 03,W
02AB6:  MOVWF  FEA
02AB8:  MOVFF  6E7,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
02ABC:  MOVLW  01
02ABE:  ADDWF  xE4,W
02AC0:  MOVWF  01
02AC2:  MOVLW  00
02AC4:  ADDWFC xE5,W
02AC6:  MOVWF  03
02AC8:  MOVF   01,W
02ACA:  ADDLW  2B
02ACC:  MOVWF  FE9
02ACE:  MOVLW  00
02AD0:  ADDWFC 03,W
02AD2:  MOVWF  FEA
02AD4:  MOVFF  6E9,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
02AD8:  MOVLW  01
02ADA:  ADDWF  xE4,W
02ADC:  MOVWF  01
02ADE:  MOVLW  00
02AE0:  ADDWFC xE5,W
02AE2:  MOVWF  03
02AE4:  MOVF   01,W
02AE6:  ADDLW  2C
02AE8:  MOVWF  FE9
02AEA:  MOVLW  00
02AEC:  ADDWFC 03,W
02AEE:  MOVWF  FEA
02AF0:  MOVFF  6E8,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
02AF4:  MOVLW  01
02AF6:  ADDWF  xE4,W
02AF8:  MOVWF  01
02AFA:  MOVLW  00
02AFC:  ADDWFC xE5,W
02AFE:  MOVWF  03
02B00:  MOVFF  01,6EC
02B04:  MOVWF  xED
02B06:  MOVFF  6DD,6EF
02B0A:  MOVFF  6DC,6EE
02B0E:  MOVWF  xF1
02B10:  MOVFF  01,6F0
02B14:  MOVLW  08
02B16:  MOVWF  xF2
02B18:  MOVLB  0
02B1A:  RCALL  25EC
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
02B1C:  MOVLW  01
02B1E:  MOVLB  6
02B20:  ADDWF  xE4,W
02B22:  MOVWF  01
02B24:  MOVLW  00
02B26:  ADDWFC xE5,W
02B28:  MOVWF  03
02B2A:  MOVF   01,W
02B2C:  ADDLW  0A
02B2E:  MOVWF  01
02B30:  MOVLW  00
02B32:  ADDWFC 03,F
02B34:  MOVFF  01,6EC
02B38:  MOVFF  03,6ED
02B3C:  MOVFF  6DF,6EF
02B40:  MOVFF  6DE,6EE
02B44:  MOVFF  03,6F1
02B48:  MOVFF  01,6F0
02B4C:  MOVLW  08
02B4E:  MOVWF  xF2
02B50:  MOVLB  0
02B52:  RCALL  25EC
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02B54:  MOVLW  01
02B56:  MOVLB  6
02B58:  ADDWF  xE4,W
02B5A:  MOVWF  01
02B5C:  MOVLW  00
02B5E:  ADDWFC xE5,W
02B60:  MOVWF  03
02B62:  MOVF   01,W
02B64:  ADDLW  14
02B66:  MOVWF  01
02B68:  MOVLW  00
02B6A:  ADDWFC 03,F
02B6C:  MOVFF  01,6EC
02B70:  MOVFF  03,6ED
02B74:  MOVFF  6E1,6EF
02B78:  MOVFF  6E0,6EE
02B7C:  MOVFF  03,6F1
02B80:  MOVFF  01,6F0
02B84:  MOVLW  08
02B86:  MOVWF  xF2
02B88:  MOVLB  0
02B8A:  RCALL  25EC
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
02B8C:  MOVLW  01
02B8E:  MOVLB  6
02B90:  ADDWF  xE4,W
02B92:  MOVWF  01
02B94:  MOVLW  00
02B96:  ADDWFC xE5,W
02B98:  MOVWF  03
02B9A:  MOVF   01,W
02B9C:  ADDLW  1E
02B9E:  MOVWF  01
02BA0:  MOVLW  00
02BA2:  ADDWFC 03,F
02BA4:  MOVFF  01,6EC
02BA8:  MOVFF  03,6ED
02BAC:  MOVFF  6E3,6EF
02BB0:  MOVFF  6E2,6EE
02BB4:  MOVFF  03,6F1
02BB8:  MOVFF  01,6F0
02BBC:  MOVLW  08
02BBE:  MOVWF  xF2
02BC0:  MOVLB  0
02BC2:  RCALL  25EC
....................    ((struct shutter)output->device).state=idle; 
02BC4:  MOVLW  01
02BC6:  MOVLB  6
02BC8:  ADDWF  xE4,W
02BCA:  MOVWF  01
02BCC:  MOVLW  00
02BCE:  ADDWFC xE5,W
02BD0:  MOVWF  03
02BD2:  MOVF   01,W
02BD4:  ADDLW  2D
02BD6:  MOVWF  FE9
02BD8:  MOVLW  00
02BDA:  ADDWFC 03,W
02BDC:  MOVWF  FEA
02BDE:  MOVLW  04
02BE0:  MOVWF  FEF
.................... } 
02BE2:  MOVLB  0
02BE4:  GOTO   33EE (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
0262C:  MOVLB  6
0262E:  MOVFF  6E2,FE9
02632:  MOVFF  6E3,FEA
02636:  MOVLW  03
02638:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
0263A:  MOVLW  01
0263C:  ADDWF  xE2,W
0263E:  MOVWF  01
02640:  MOVLW  00
02642:  ADDWFC xE3,W
02644:  MOVWF  03
02646:  MOVF   01,W
02648:  ADDLW  05
0264A:  MOVWF  FE9
0264C:  MOVLW  00
0264E:  ADDWFC 03,W
02650:  MOVWF  FEA
02652:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02654:  MOVLW  01
02656:  ADDWF  xE2,W
02658:  MOVWF  01
0265A:  MOVLW  00
0265C:  ADDWFC xE3,W
0265E:  MOVWF  03
02660:  MOVF   01,W
02662:  ADDLW  08
02664:  MOVWF  FE9
02666:  MOVLW  00
02668:  ADDWFC 03,W
0266A:  MOVWF  FEA
0266C:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
0266E:  MOVLW  01
02670:  ADDWF  xE2,W
02672:  MOVWF  01
02674:  MOVLW  00
02676:  ADDWFC xE3,W
02678:  MOVWF  03
0267A:  MOVF   01,W
0267C:  ADDLW  04
0267E:  MOVWF  FE9
02680:  MOVLW  00
02682:  ADDWFC 03,W
02684:  MOVWF  FEA
02686:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
02688:  MOVLW  01
0268A:  ADDWF  xE2,W
0268C:  MOVWF  01
0268E:  MOVLW  00
02690:  ADDWFC xE3,W
02692:  MOVWF  03
02694:  MOVF   01,W
02696:  ADDLW  07
02698:  MOVWF  FE9
0269A:  MOVLW  00
0269C:  ADDWFC 03,W
0269E:  MOVWF  FEA
026A0:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
026A2:  MOVLW  01
026A4:  ADDWF  xE2,W
026A6:  MOVWF  01
026A8:  MOVLW  00
026AA:  ADDWFC xE3,W
026AC:  MOVWF  03
026AE:  MOVF   01,W
026B0:  ADDLW  12
026B2:  MOVWF  FE9
026B4:  MOVLW  00
026B6:  ADDWFC 03,W
026B8:  MOVWF  FEA
026BA:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
026BC:  MOVLW  01
026BE:  ADDWF  xE2,W
026C0:  MOVWF  01
026C2:  MOVLW  00
026C4:  ADDWFC xE3,W
026C6:  MOVWF  03
026C8:  MOVF   01,W
026CA:  ADDLW  1C
026CC:  MOVWF  FE9
026CE:  MOVLW  00
026D0:  ADDWFC 03,W
026D2:  MOVWF  FEA
026D4:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
026D6:  MOVLW  01
026D8:  ADDWF  xE2,W
026DA:  MOVWF  01
026DC:  MOVLW  00
026DE:  ADDWFC xE3,W
026E0:  MOVWF  03
026E2:  MOVF   01,W
026E4:  ADDLW  11
026E6:  MOVWF  FE9
026E8:  MOVLW  00
026EA:  ADDWFC 03,W
026EC:  MOVWF  FEA
026EE:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
026F0:  MOVLW  01
026F2:  ADDWF  xE2,W
026F4:  MOVWF  01
026F6:  MOVLW  00
026F8:  ADDWFC xE3,W
026FA:  MOVWF  03
026FC:  MOVF   01,W
026FE:  ADDLW  1B
02700:  MOVWF  FE9
02702:  MOVLW  00
02704:  ADDWFC 03,W
02706:  MOVWF  FEA
02708:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
0270A:  MOVLW  01
0270C:  ADDWF  xE2,W
0270E:  MOVWF  01
02710:  MOVLW  00
02712:  ADDWFC xE3,W
02714:  MOVWF  03
02716:  MOVF   01,W
02718:  ADDLW  1D
0271A:  MOVWF  FE9
0271C:  MOVLW  00
0271E:  ADDWFC 03,W
02720:  MOVWF  FEA
02722:  CLRF   FEC
02724:  MOVF   FED,F
02726:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
02728:  MOVLW  01
0272A:  ADDWF  xE2,W
0272C:  MOVWF  01
0272E:  MOVLW  00
02730:  ADDWFC xE3,W
02732:  MOVFF  01,FE9
02736:  MOVWF  FEA
02738:  MOVFF  6E4,FEF
....................    ((struct timer)input->device).active=false; 
0273C:  MOVLW  01
0273E:  ADDWF  xE2,W
02740:  MOVWF  01
02742:  MOVLW  00
02744:  ADDWFC xE3,W
02746:  MOVWF  03
02748:  MOVF   01,W
0274A:  ADDLW  1F
0274C:  MOVWF  FE9
0274E:  MOVLW  00
02750:  ADDWFC 03,W
02752:  MOVWF  FEA
02754:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02756:  MOVLW  01
02758:  ADDWF  xE2,W
0275A:  MOVWF  01
0275C:  MOVLW  00
0275E:  ADDWFC xE3,W
02760:  MOVWF  03
02762:  MOVF   01,W
02764:  ADDLW  01
02766:  MOVWF  FE9
02768:  MOVLW  00
0276A:  ADDWFC 03,W
0276C:  MOVWF  FEA
0276E:  MOVFF  6E6,FEC
02772:  MOVF   FED,F
02774:  MOVFF  6E5,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
02778:  MOVLW  01
0277A:  ADDWF  xE2,W
0277C:  MOVWF  01
0277E:  MOVLW  00
02780:  ADDWFC xE3,W
02782:  MOVWF  03
02784:  MOVF   01,W
02786:  ADDLW  03
02788:  MOVWF  FE9
0278A:  MOVLW  00
0278C:  ADDWFC 03,W
0278E:  MOVWF  FEA
02790:  MOVFF  6E0,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
02794:  MOVLW  01
02796:  ADDWF  xE2,W
02798:  MOVWF  01
0279A:  MOVLW  00
0279C:  ADDWFC xE3,W
0279E:  MOVWF  03
027A0:  MOVF   01,W
027A2:  ADDLW  06
027A4:  MOVWF  FE9
027A6:  MOVLW  00
027A8:  ADDWFC 03,W
027AA:  MOVWF  FEA
027AC:  MOVFF  6E1,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
027B0:  MOVLW  01
027B2:  ADDWF  xE2,W
027B4:  MOVWF  01
027B6:  MOVLW  00
027B8:  ADDWFC xE3,W
027BA:  MOVWF  03
027BC:  MOVF   01,W
027BE:  ADDLW  09
027C0:  MOVWF  01
027C2:  MOVLW  00
027C4:  ADDWFC 03,F
027C6:  MOVFF  01,6E9
027CA:  MOVFF  03,6EA
027CE:  MOVFF  6DD,6EF
027D2:  MOVFF  6DC,6EE
027D6:  MOVFF  03,6F1
027DA:  MOVFF  01,6F0
027DE:  MOVLW  08
027E0:  MOVWF  xF2
027E2:  MOVLB  0
027E4:  RCALL  25EC
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
027E6:  MOVLW  01
027E8:  MOVLB  6
027EA:  ADDWF  xE2,W
027EC:  MOVWF  01
027EE:  MOVLW  00
027F0:  ADDWFC xE3,W
027F2:  MOVWF  03
027F4:  MOVF   01,W
027F6:  ADDLW  13
027F8:  MOVWF  01
027FA:  MOVLW  00
027FC:  ADDWFC 03,F
027FE:  MOVFF  01,6E9
02802:  MOVFF  03,6EA
02806:  MOVFF  6DF,6EF
0280A:  MOVFF  6DE,6EE
0280E:  MOVFF  03,6F1
02812:  MOVFF  01,6F0
02816:  MOVLW  08
02818:  MOVWF  xF2
0281A:  MOVLB  0
0281C:  RCALL  25EC
....................   // printf("start %d stop %d outon %d outoff %d type %d time %Lu",((struct timer)input->device).start.adress[0],((struct timer)input->device).stop.adress[0],out_on,out_off,type,timeToAct); 
.................... } 
0281E:  GOTO   3154 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... volatile int used_dimmers=0; 
.................... #use fast_io(C) 
.................... #use fast_io(D) 
....................  
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00EBC:  BCF    FD8.0
00EBE:  RLCF   xF9,W
00EC0:  MOVWF  00
00EC2:  BCF    FD8.0
00EC4:  RLCF   00,F
00EC6:  MOVF   00,W
00EC8:  MOVLB  5
00ECA:  ADDWF  x7B,W
00ECC:  MOVLB  6
00ECE:  MOVWF  xFD
00ED0:  MOVLW  00
00ED2:  MOVLB  5
00ED4:  ADDWFC x7C,W
00ED6:  MOVLB  6
00ED8:  MOVWF  xFE
00EDA:  BCF    FD8.0
00EDC:  RLCF   xFA,W
00EDE:  ADDWF  xFD,W
00EE0:  MOVWF  xFB
00EE2:  MOVLW  00
00EE4:  ADDWFC xFE,W
00EE6:  MOVWF  xFC
*
00F54:  BCF    FD8.0
00F56:  RLCF   xF9,W
00F58:  MOVWF  00
00F5A:  BCF    FD8.0
00F5C:  RLCF   00,F
00F5E:  MOVF   00,W
00F60:  MOVLB  5
00F62:  ADDWF  x7B,W
00F64:  MOVLB  6
00F66:  MOVWF  xFD
00F68:  MOVLW  00
00F6A:  MOVLB  5
00F6C:  ADDWFC x7C,W
00F6E:  MOVLB  6
00F70:  MOVWF  xFE
00F72:  BCF    FD8.0
00F74:  RLCF   xFA,W
00F76:  ADDWF  xFD,W
00F78:  MOVWF  xFB
00F7A:  MOVLW  00
00F7C:  ADDWFC xFE,W
00F7E:  MOVWF  xFC
*
00FE2:  BCF    FD8.0
00FE4:  RLCF   xF9,W
00FE6:  MOVWF  00
00FE8:  BCF    FD8.0
00FEA:  RLCF   00,F
00FEC:  MOVF   00,W
00FEE:  MOVLB  5
00FF0:  ADDWF  x7B,W
00FF2:  MOVLB  6
00FF4:  MOVWF  xFD
00FF6:  MOVLW  00
00FF8:  MOVLB  5
00FFA:  ADDWFC x7C,W
00FFC:  MOVLB  6
00FFE:  MOVWF  xFE
01000:  BCF    FD8.0
01002:  RLCF   xFA,W
01004:  ADDWF  xFD,W
01006:  MOVWF  xFB
01008:  MOVLW  00
0100A:  ADDWFC xFE,W
0100C:  MOVWF  xFC
*
0106A:  BCF    FD8.0
0106C:  RLCF   xF9,W
0106E:  MOVWF  00
01070:  BCF    FD8.0
01072:  RLCF   00,F
01074:  MOVF   00,W
01076:  MOVLB  5
01078:  ADDWF  x7B,W
0107A:  MOVLB  6
0107C:  MOVWF  xFD
0107E:  MOVLW  00
01080:  MOVLB  5
01082:  ADDWFC x7C,W
01084:  MOVLB  6
01086:  MOVWF  xFE
01088:  BCF    FD8.0
0108A:  RLCF   xFA,W
0108C:  ADDWF  xFD,W
0108E:  MOVWF  xFB
01090:  MOVLW  00
01092:  ADDWFC xFE,W
01094:  MOVWF  xFC
*
07FFC:  BCF    FD8.0
07FFE:  RLCF   xF9,W
08000:  MOVWF  00
08002:  BCF    FD8.0
08004:  RLCF   00,F
08006:  MOVF   00,W
08008:  MOVLB  5
0800A:  ADDWF  x7B,W
0800C:  MOVLB  6
0800E:  MOVWF  xFD
08010:  MOVLW  00
08012:  MOVLB  5
08014:  ADDWFC x7C,W
08016:  MOVLB  6
08018:  MOVWF  xFE
0801A:  BCF    FD8.0
0801C:  RLCF   xFA,W
0801E:  ADDWF  xFD,W
08020:  MOVWF  xFB
08022:  MOVLW  00
08024:  ADDWFC xFE,W
08026:  MOVWF  xFC
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
00EE8:  BCF    FD8.0
00EEA:  RLCF   xF9,W
00EEC:  MOVWF  00
00EEE:  BCF    FD8.0
00EF0:  RLCF   00,F
00EF2:  MOVF   00,W
00EF4:  MOVLB  5
00EF6:  ADDWF  x7B,W
00EF8:  MOVLB  6
00EFA:  MOVWF  xFD
00EFC:  MOVLW  00
00EFE:  MOVLB  5
00F00:  ADDWFC x7C,W
00F02:  MOVLB  6
00F04:  MOVWF  xFE
00F06:  BCF    FD8.0
00F08:  RLCF   xFA,W
00F0A:  ADDWF  xFD,W
00F0C:  MOVWF  01
00F0E:  MOVLW  00
00F10:  ADDWFC xFE,W
00F12:  MOVWF  03
00F14:  MOVFF  01,FE9
00F18:  MOVWF  FEA
00F1A:  MOVFF  FEF,01
00F1E:  INCF   FE9,F
00F20:  MOVF   FEF,W
00F22:  DECF   FE9,F
00F24:  MOVWF  02
*
00F80:  BCF    FD8.0
00F82:  RLCF   xF9,W
00F84:  MOVWF  00
00F86:  BCF    FD8.0
00F88:  RLCF   00,F
00F8A:  MOVF   00,W
00F8C:  MOVLB  5
00F8E:  ADDWF  x7B,W
00F90:  MOVLB  6
00F92:  MOVWF  xFD
00F94:  MOVLW  00
00F96:  MOVLB  5
00F98:  ADDWFC x7C,W
00F9A:  MOVLB  6
00F9C:  MOVWF  xFE
00F9E:  BCF    FD8.0
00FA0:  RLCF   xFA,W
00FA2:  ADDWF  xFD,W
00FA4:  MOVWF  01
00FA6:  MOVLW  00
00FA8:  ADDWFC xFE,W
00FAA:  MOVWF  03
00FAC:  MOVFF  01,FE9
00FB0:  MOVWF  FEA
00FB2:  MOVFF  FEF,01
00FB6:  INCF   FE9,F
00FB8:  MOVF   FEF,W
00FBA:  DECF   FE9,F
00FBC:  MOVWF  02
*
0100E:  BCF    FD8.0
01010:  RLCF   xF9,W
01012:  MOVWF  00
01014:  BCF    FD8.0
01016:  RLCF   00,F
01018:  MOVF   00,W
0101A:  MOVLB  5
0101C:  ADDWF  x7B,W
0101E:  MOVLB  6
01020:  MOVWF  xFD
01022:  MOVLW  00
01024:  MOVLB  5
01026:  ADDWFC x7C,W
01028:  MOVLB  6
0102A:  MOVWF  xFE
0102C:  BCF    FD8.0
0102E:  RLCF   xFA,W
01030:  ADDWF  xFD,W
01032:  MOVWF  01
01034:  MOVLW  00
01036:  ADDWFC xFE,W
01038:  MOVWF  03
0103A:  MOVFF  01,FE9
0103E:  MOVWF  FEA
01040:  MOVFF  FEF,01
01044:  INCF   FE9,F
01046:  MOVF   FEF,W
01048:  DECF   FE9,F
0104A:  MOVWF  02
*
01096:  BCF    FD8.0
01098:  RLCF   xF9,W
0109A:  MOVWF  00
0109C:  BCF    FD8.0
0109E:  RLCF   00,F
010A0:  MOVF   00,W
010A2:  MOVLB  5
010A4:  ADDWF  x7B,W
010A6:  MOVLB  6
010A8:  MOVWF  xFD
010AA:  MOVLW  00
010AC:  MOVLB  5
010AE:  ADDWFC x7C,W
010B0:  MOVLB  6
010B2:  MOVWF  xFE
010B4:  BCF    FD8.0
010B6:  RLCF   xFA,W
010B8:  ADDWF  xFD,W
010BA:  MOVWF  01
010BC:  MOVLW  00
010BE:  ADDWFC xFE,W
010C0:  MOVWF  03
010C2:  MOVFF  01,FE9
010C6:  MOVWF  FEA
010C8:  MOVFF  FEF,01
010CC:  INCF   FE9,F
010CE:  MOVF   FEF,W
010D0:  DECF   FE9,F
010D2:  MOVWF  02
*
08028:  BCF    FD8.0
0802A:  RLCF   xF9,W
0802C:  MOVWF  00
0802E:  BCF    FD8.0
08030:  RLCF   00,F
08032:  MOVF   00,W
08034:  MOVLB  5
08036:  ADDWF  x7B,W
08038:  MOVLB  6
0803A:  MOVWF  xFD
0803C:  MOVLW  00
0803E:  MOVLB  5
08040:  ADDWFC x7C,W
08042:  MOVLB  6
08044:  MOVWF  xFE
08046:  BCF    FD8.0
08048:  RLCF   xFA,W
0804A:  ADDWF  xFD,W
0804C:  MOVWF  01
0804E:  MOVLW  00
08050:  ADDWFC xFE,W
08052:  MOVWF  03
08054:  MOVFF  01,FE9
08058:  MOVWF  FEA
0805A:  MOVFF  FEF,01
0805E:  INCF   FE9,F
08060:  MOVF   FEF,W
08062:  DECF   FE9,F
08064:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
034E0:  MOVLB  6
034E2:  CLRF   xC1
034E4:  BSF    xC2.0
....................     // printf("org "); 
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
034E6:  CLRF   xC3
034E8:  MOVLB  5
034EA:  MOVF   x7A,W
034EC:  MOVLB  6
034EE:  SUBWF  xC3,W
034F0:  BC    3580
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
034F2:  MOVF   xC3,W
034F4:  MULLW  04
034F6:  MOVF   FF3,W
034F8:  CLRF   xC8
034FA:  MOVWF  xC7
034FC:  MOVLW  81
034FE:  ADDWF  xC7,W
03500:  MOVWF  01
03502:  MOVLW  06
03504:  ADDWFC xC8,W
03506:  MOVWF  03
03508:  MOVWF  xC8
0350A:  CLRF   03
0350C:  MOVF   xC3,W
0350E:  ADDLW  81
03510:  MOVWF  FE9
03512:  MOVLW  05
03514:  ADDWFC 03,W
03516:  MOVWF  FEA
03518:  MOVF   FEF,W
0351A:  CLRF   03
0351C:  MOVFF  6C8,FEA
03520:  MOVFF  01,FE9
03524:  MOVFF  03,FEC
03528:  MOVF   FED,F
0352A:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
0352C:  MOVF   xC3,W
0352E:  MULLW  04
03530:  MOVF   FF3,W
03532:  CLRF   xC8
03534:  MOVWF  xC7
03536:  MOVLW  02
03538:  ADDWF  xC7,W
0353A:  MOVWF  01
0353C:  MOVLW  00
0353E:  ADDWFC xC8,W
03540:  MOVWF  03
03542:  MOVF   01,W
03544:  ADDLW  81
03546:  MOVWF  01
03548:  MOVLW  06
0354A:  ADDWFC 03,F
0354C:  MOVFF  03,6C8
03550:  BCF    FD8.0
03552:  RLCF   xC3,W
03554:  CLRF   03
03556:  ADDLW  19
03558:  MOVWF  FE9
0355A:  MOVLW  06
0355C:  ADDWFC 03,W
0355E:  MOVWF  FEA
03560:  MOVFF  FEC,03
03564:  MOVF   FED,F
03566:  MOVFF  FEF,6C9
0356A:  MOVFF  6C8,FEA
0356E:  MOVFF  01,FE9
03572:  MOVFF  03,FEC
03576:  MOVF   FED,F
03578:  MOVFF  6C9,FEF
....................      } 
0357C:  INCF   xC3,F
0357E:  BRA    34E8
....................  
....................      WHILE(again) 
....................      { 
03580:  BTFSS  xC2.0
03582:  BRA    374A
....................         again = 0; 
03584:  BCF    xC2.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
03586:  CLRF   xC3
03588:  MOVLW  01
0358A:  MOVLB  5
0358C:  SUBWF  x7A,W
0358E:  MOVLB  6
03590:  SUBWF  xC3,W
03592:  BTFSC  FD8.0
03594:  BRA    3748
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
03596:  MOVF   xC3,W
03598:  MULLW  04
0359A:  MOVF   FF3,W
0359C:  CLRF   xC8
0359E:  MOVWF  xC7
035A0:  MOVLW  81
035A2:  ADDWF  xC7,W
035A4:  MOVWF  FE9
035A6:  MOVLW  06
035A8:  ADDWFC xC8,W
035AA:  MOVWF  FEA
035AC:  MOVFF  FEC,6C8
035B0:  MOVF   FED,F
035B2:  MOVFF  FEF,6C7
035B6:  MOVLW  01
035B8:  ADDWF  xC3,W
035BA:  MULLW  04
035BC:  MOVF   FF3,W
035BE:  CLRF   xCA
035C0:  MOVWF  xC9
035C2:  MOVLW  81
035C4:  ADDWF  xC9,W
035C6:  MOVWF  FE9
035C8:  MOVLW  06
035CA:  ADDWFC xCA,W
035CC:  MOVWF  FEA
035CE:  MOVFF  FEC,03
035D2:  MOVF   FED,F
035D4:  MOVFF  FEF,01
035D8:  MOVF   xC8,W
035DA:  SUBWF  03,W
035DC:  BTFSS  FD8.0
035DE:  BRA    3744
035E0:  BNZ   35EA
035E2:  MOVF   01,W
035E4:  SUBWF  xC7,W
035E6:  BTFSC  FD8.0
035E8:  BRA    3744
....................            { 
....................               again = 1; 
035EA:  BSF    xC2.0
....................               fl = tempd[fa][0]; 
035EC:  MOVF   xC3,W
035EE:  MULLW  04
035F0:  MOVF   FF3,W
035F2:  CLRF   xC8
035F4:  MOVWF  xC7
035F6:  MOVLW  81
035F8:  ADDWF  xC7,W
035FA:  MOVWF  FE9
035FC:  MOVLW  06
035FE:  ADDWFC xC8,W
03600:  MOVWF  FEA
03602:  MOVFF  FEC,03
03606:  MOVF   FED,F
03608:  MOVFF  FEF,6C4
0360C:  MOVFF  03,6C5
....................               tempd[fa][0] = tempd[fa + 1][0]; 
03610:  MOVF   xC3,W
03612:  MULLW  04
03614:  MOVF   FF3,W
03616:  CLRF   xC8
03618:  MOVWF  xC7
0361A:  MOVLW  81
0361C:  ADDWF  xC7,W
0361E:  MOVWF  01
03620:  MOVLW  06
03622:  ADDWFC xC8,W
03624:  MOVWF  03
03626:  MOVWF  xC8
03628:  MOVLW  01
0362A:  ADDWF  xC3,W
0362C:  MULLW  04
0362E:  MOVF   FF3,W
03630:  CLRF   xCA
03632:  MOVWF  xC9
03634:  MOVLW  81
03636:  ADDWF  xC9,W
03638:  MOVWF  FE9
0363A:  MOVLW  06
0363C:  ADDWFC xCA,W
0363E:  MOVWF  FEA
03640:  MOVFF  FEC,03
03644:  MOVF   FED,F
03646:  MOVFF  FEF,6C9
0364A:  MOVFF  6C8,FEA
0364E:  MOVFF  01,FE9
03652:  MOVFF  03,FEC
03656:  MOVF   FED,F
03658:  MOVFF  6C9,FEF
....................               tempd[fa + 1][0] = fl; 
0365C:  MOVLW  01
0365E:  ADDWF  xC3,W
03660:  MULLW  04
03662:  MOVF   FF3,W
03664:  CLRF   xC8
03666:  MOVWF  xC7
03668:  MOVLW  81
0366A:  ADDWF  xC7,W
0366C:  MOVWF  FE9
0366E:  MOVLW  06
03670:  ADDWFC xC8,W
03672:  MOVWF  FEA
03674:  MOVFF  6C5,FEC
03678:  MOVF   FED,F
0367A:  MOVFF  6C4,FEF
....................               fl = tempd[fa][1]; 
0367E:  MOVF   xC3,W
03680:  MULLW  04
03682:  MOVF   FF3,W
03684:  CLRF   xC8
03686:  MOVWF  xC7
03688:  MOVLW  02
0368A:  ADDWF  xC7,W
0368C:  MOVWF  01
0368E:  MOVLW  00
03690:  ADDWFC xC8,W
03692:  MOVWF  03
03694:  MOVF   01,W
03696:  ADDLW  81
03698:  MOVWF  FE9
0369A:  MOVLW  06
0369C:  ADDWFC 03,W
0369E:  MOVWF  FEA
036A0:  MOVFF  FEC,03
036A4:  MOVF   FED,F
036A6:  MOVFF  FEF,6C4
036AA:  MOVFF  03,6C5
....................               tempd[fa][1] = tempd[fa + 1][1]; 
036AE:  MOVF   xC3,W
036B0:  MULLW  04
036B2:  MOVF   FF3,W
036B4:  CLRF   xC8
036B6:  MOVWF  xC7
036B8:  MOVLW  02
036BA:  ADDWF  xC7,W
036BC:  MOVWF  01
036BE:  MOVLW  00
036C0:  ADDWFC xC8,W
036C2:  MOVWF  03
036C4:  MOVF   01,W
036C6:  ADDLW  81
036C8:  MOVWF  01
036CA:  MOVLW  06
036CC:  ADDWFC 03,F
036CE:  MOVFF  01,6C7
036D2:  MOVFF  03,6C8
036D6:  MOVLW  01
036D8:  ADDWF  xC3,W
036DA:  MULLW  04
036DC:  MOVF   FF3,W
036DE:  CLRF   xCA
036E0:  MOVWF  xC9
036E2:  MOVLW  02
036E4:  ADDWF  xC9,W
036E6:  MOVWF  01
036E8:  MOVLW  00
036EA:  ADDWFC xCA,W
036EC:  MOVWF  03
036EE:  MOVF   01,W
036F0:  ADDLW  81
036F2:  MOVWF  FE9
036F4:  MOVLW  06
036F6:  ADDWFC 03,W
036F8:  MOVWF  FEA
036FA:  MOVFF  FEC,03
036FE:  MOVF   FED,F
03700:  MOVFF  FEF,6C9
03704:  MOVFF  6C8,FEA
03708:  MOVFF  6C7,FE9
0370C:  MOVFF  03,FEC
03710:  MOVF   FED,F
03712:  MOVFF  6C9,FEF
....................               tempd[fa + 1][1] = fl; 
03716:  MOVLW  01
03718:  ADDWF  xC3,W
0371A:  MULLW  04
0371C:  MOVF   FF3,W
0371E:  CLRF   xC8
03720:  MOVWF  xC7
03722:  MOVLW  02
03724:  ADDWF  xC7,W
03726:  MOVWF  01
03728:  MOVLW  00
0372A:  ADDWFC xC8,W
0372C:  MOVWF  03
0372E:  MOVF   01,W
03730:  ADDLW  81
03732:  MOVWF  FE9
03734:  MOVLW  06
03736:  ADDWFC 03,W
03738:  MOVWF  FEA
0373A:  MOVFF  6C5,FEC
0373E:  MOVF   FED,F
03740:  MOVFF  6C4,FEF
....................            } 
....................         } 
03744:  INCF   xC3,F
03746:  BRA    3588
....................      } 
03748:  BRA    3580
....................    /*   for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0) 
0374A:  MOVF   x81,F
0374C:  BNZ   3756
0374E:  MOVF   x82,F
03750:  BNZ   3756
....................      { 
....................          numluzes = 0; 
03752:  CLRF   xC1
....................          //luzes todas off 
....................          //printf("TUDO OFF"); 
....................      } 
....................      ELSE 
03754:  BRA    3AF6
....................      { 
....................         numluzes = 1; 
03756:  MOVLW  01
03758:  MOVWF  xC1
....................         afa = 0; 
0375A:  CLRF   xC6
....................         IF(actmat) 
0375C:  MOVLB  0
0375E:  BTFSS  xB5.3
03760:  BRA    3774
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
03762:  MOVFF  682,592
03766:  MOVFF  681,591
....................            delays1[0][1] = tempd[0][1]; 
0376A:  MOVFF  684,594
0376E:  MOVFF  683,593
....................         } 
....................  
....................         ELSE 
03772:  BRA    3784
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
03774:  MOVFF  682,5D6
03778:  MOVFF  681,5D5
....................            delays2[0][1] = tempd[0][1]; 
0377C:  MOVFF  684,5D8
03780:  MOVFF  683,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
03784:  MOVLW  01
03786:  MOVLB  6
03788:  MOVWF  xC3
0378A:  MOVLB  5
0378C:  MOVF   x7A,W
0378E:  MOVLB  6
03790:  SUBWF  xC3,W
03792:  BTFSC  FD8.0
03794:  BRA    3AF6
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
03796:  MOVF   xC3,W
03798:  MULLW  04
0379A:  MOVF   FF3,W
0379C:  CLRF   xC8
0379E:  MOVWF  xC7
037A0:  MOVLW  81
037A2:  ADDWF  xC7,W
037A4:  MOVWF  FE9
037A6:  MOVLW  06
037A8:  ADDWFC xC8,W
037AA:  MOVWF  FEA
037AC:  MOVFF  FEC,6C8
037B0:  MOVF   FED,F
037B2:  MOVFF  FEF,6C7
037B6:  MOVLW  01
037B8:  SUBWF  xC3,W
037BA:  MULLW  04
037BC:  MOVF   FF3,W
037BE:  CLRF   xCA
037C0:  MOVWF  xC9
037C2:  MOVLW  81
037C4:  ADDWF  xC9,W
037C6:  MOVWF  FE9
037C8:  MOVLW  06
037CA:  ADDWFC xCA,W
037CC:  MOVWF  FEA
037CE:  MOVFF  FEC,03
037D2:  MOVF   FED,F
037D4:  MOVF   FEF,W
037D6:  SUBWF  xC7,W
037D8:  BNZ   37E0
037DA:  MOVF   03,W
037DC:  SUBWF  xC8,W
037DE:  BZ    37E4
037E0:  MOVLW  00
037E2:  BRA    37E6
037E4:  MOVLW  01
037E6:  MOVWF  xC7
037E8:  MOVF   xC3,W
037EA:  MULLW  04
037EC:  MOVF   FF3,W
037EE:  CLRF   xC9
037F0:  MOVWF  xC8
037F2:  MOVLW  81
037F4:  ADDWF  xC8,W
037F6:  MOVWF  FE9
037F8:  MOVLW  06
037FA:  ADDWFC xC9,W
037FC:  MOVWF  FEA
037FE:  MOVF   FEF,F
03800:  BNZ   3806
03802:  MOVF   FEC,F
03804:  BZ    380A
03806:  MOVLW  00
03808:  BRA    380C
0380A:  MOVLW  01
0380C:  XORLW  00
0380E:  BZ    3814
03810:  MOVLW  00
03812:  BRA    3816
03814:  MOVLW  01
03816:  ANDWF  xC7,W
03818:  BTFSC  FD8.2
0381A:  BRA    3956
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
0381C:  MOVLB  0
0381E:  BTFSS  xB5.3
03820:  BRA    38BC
03822:  MOVLB  6
03824:  MOVF   xC6,W
03826:  MULLW  04
03828:  MOVF   FF3,W
0382A:  CLRF   xC8
0382C:  MOVWF  xC7
0382E:  MOVLW  02
03830:  ADDWF  xC7,W
03832:  MOVWF  01
03834:  MOVLW  00
03836:  ADDWFC xC8,W
03838:  MOVWF  03
0383A:  MOVF   01,W
0383C:  ADDLW  91
0383E:  MOVWF  01
03840:  MOVLW  05
03842:  ADDWFC 03,F
03844:  MOVFF  01,6C7
03848:  MOVFF  03,6C8
0384C:  MOVF   xC6,W
0384E:  MULLW  04
03850:  MOVF   FF3,W
03852:  CLRF   xCA
03854:  MOVWF  xC9
03856:  MOVLW  02
03858:  ADDWF  xC9,W
0385A:  MOVWF  01
0385C:  MOVLW  00
0385E:  ADDWFC xCA,W
03860:  MOVWF  03
03862:  MOVF   01,W
03864:  ADDLW  91
03866:  MOVWF  FE9
03868:  MOVLW  05
0386A:  ADDWFC 03,W
0386C:  MOVWF  FEA
0386E:  MOVFF  FEC,6CA
03872:  MOVF   FED,F
03874:  MOVFF  FEF,6C9
03878:  MOVF   xC3,W
0387A:  MULLW  04
0387C:  MOVF   FF3,W
0387E:  CLRF   xCC
03880:  MOVWF  xCB
03882:  MOVLW  02
03884:  ADDWF  xCB,W
03886:  MOVWF  01
03888:  MOVLW  00
0388A:  ADDWFC xCC,W
0388C:  MOVWF  03
0388E:  MOVF   01,W
03890:  ADDLW  81
03892:  MOVWF  FE9
03894:  MOVLW  06
03896:  ADDWFC 03,W
03898:  MOVWF  FEA
0389A:  MOVFF  FEC,03
0389E:  MOVF   FED,F
038A0:  MOVF   FEF,W
038A2:  ANDWF  xC9,W
038A4:  MOVWF  00
038A6:  MOVF   03,W
038A8:  ANDWF  xCA,W
038AA:  MOVFF  6C8,FEA
038AE:  MOVFF  6C7,FE9
038B2:  MOVWF  FEC
038B4:  MOVF   FED,F
038B6:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
038BA:  BRA    3954
038BC:  MOVLB  6
038BE:  MOVF   xC6,W
038C0:  MULLW  04
038C2:  MOVF   FF3,W
038C4:  CLRF   xC8
038C6:  MOVWF  xC7
038C8:  MOVLW  02
038CA:  ADDWF  xC7,W
038CC:  MOVWF  01
038CE:  MOVLW  00
038D0:  ADDWFC xC8,W
038D2:  MOVWF  03
038D4:  MOVF   01,W
038D6:  ADDLW  D5
038D8:  MOVWF  01
038DA:  MOVLW  05
038DC:  ADDWFC 03,F
038DE:  MOVFF  01,6C7
038E2:  MOVFF  03,6C8
038E6:  MOVF   xC6,W
038E8:  MULLW  04
038EA:  MOVF   FF3,W
038EC:  CLRF   xCA
038EE:  MOVWF  xC9
038F0:  MOVLW  02
038F2:  ADDWF  xC9,W
038F4:  MOVWF  01
038F6:  MOVLW  00
038F8:  ADDWFC xCA,W
038FA:  MOVWF  03
038FC:  MOVF   01,W
038FE:  ADDLW  D5
03900:  MOVWF  FE9
03902:  MOVLW  05
03904:  ADDWFC 03,W
03906:  MOVWF  FEA
03908:  MOVFF  FEC,6CA
0390C:  MOVF   FED,F
0390E:  MOVFF  FEF,6C9
03912:  MOVF   xC3,W
03914:  MULLW  04
03916:  MOVF   FF3,W
03918:  CLRF   xCC
0391A:  MOVWF  xCB
0391C:  MOVLW  02
0391E:  ADDWF  xCB,W
03920:  MOVWF  01
03922:  MOVLW  00
03924:  ADDWFC xCC,W
03926:  MOVWF  03
03928:  MOVF   01,W
0392A:  ADDLW  81
0392C:  MOVWF  FE9
0392E:  MOVLW  06
03930:  ADDWFC 03,W
03932:  MOVWF  FEA
03934:  MOVFF  FEC,03
03938:  MOVF   FED,F
0393A:  MOVF   FEF,W
0393C:  ANDWF  xC9,W
0393E:  MOVWF  00
03940:  MOVF   03,W
03942:  ANDWF  xCA,W
03944:  MOVFF  6C8,FEA
03948:  MOVFF  6C7,FE9
0394C:  MOVWF  FEC
0394E:  MOVF   FED,F
03950:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
03954:  BRA    3AF2
03956:  MOVF   xC3,W
03958:  MULLW  04
0395A:  MOVF   FF3,W
0395C:  CLRF   xC8
0395E:  MOVWF  xC7
03960:  MOVLW  81
03962:  ADDWF  xC7,W
03964:  MOVWF  FE9
03966:  MOVLW  06
03968:  ADDWFC xC8,W
0396A:  MOVWF  FEA
0396C:  MOVF   FEF,F
0396E:  BNZ   3974
03970:  MOVF   FEC,F
03972:  BZ    3978
03974:  MOVLW  00
03976:  BRA    397A
03978:  MOVLW  01
0397A:  XORLW  00
0397C:  BTFSS  FD8.2
0397E:  BRA    3AF2
....................            { 
....................               ++afa; 
03980:  INCF   xC6,F
....................               IF(actmat) 
03982:  MOVLB  0
03984:  BTFSS  xB5.3
03986:  BRA    3A3E
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
03988:  MOVLB  6
0398A:  MOVF   xC6,W
0398C:  MULLW  04
0398E:  MOVF   FF3,W
03990:  CLRF   xC8
03992:  MOVWF  xC7
03994:  MOVLW  91
03996:  ADDWF  xC7,W
03998:  MOVWF  01
0399A:  MOVLW  05
0399C:  ADDWFC xC8,W
0399E:  MOVWF  03
039A0:  MOVWF  xC8
039A2:  MOVF   xC3,W
039A4:  MULLW  04
039A6:  MOVF   FF3,W
039A8:  CLRF   xCA
039AA:  MOVWF  xC9
039AC:  MOVLW  81
039AE:  ADDWF  xC9,W
039B0:  MOVWF  FE9
039B2:  MOVLW  06
039B4:  ADDWFC xCA,W
039B6:  MOVWF  FEA
039B8:  MOVFF  FEC,03
039BC:  MOVF   FED,F
039BE:  MOVFF  FEF,6C9
039C2:  MOVFF  6C8,FEA
039C6:  MOVFF  01,FE9
039CA:  MOVFF  03,FEC
039CE:  MOVF   FED,F
039D0:  MOVFF  6C9,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
039D4:  MOVF   xC6,W
039D6:  MULLW  04
039D8:  MOVF   FF3,W
039DA:  CLRF   xC8
039DC:  MOVWF  xC7
039DE:  MOVLW  02
039E0:  ADDWF  xC7,W
039E2:  MOVWF  01
039E4:  MOVLW  00
039E6:  ADDWFC xC8,W
039E8:  MOVWF  03
039EA:  MOVF   01,W
039EC:  ADDLW  91
039EE:  MOVWF  01
039F0:  MOVLW  05
039F2:  ADDWFC 03,F
039F4:  MOVFF  01,6C7
039F8:  MOVFF  03,6C8
039FC:  MOVF   xC3,W
039FE:  MULLW  04
03A00:  MOVF   FF3,W
03A02:  CLRF   xCA
03A04:  MOVWF  xC9
03A06:  MOVLW  02
03A08:  ADDWF  xC9,W
03A0A:  MOVWF  01
03A0C:  MOVLW  00
03A0E:  ADDWFC xCA,W
03A10:  MOVWF  03
03A12:  MOVF   01,W
03A14:  ADDLW  81
03A16:  MOVWF  FE9
03A18:  MOVLW  06
03A1A:  ADDWFC 03,W
03A1C:  MOVWF  FEA
03A1E:  MOVFF  FEC,03
03A22:  MOVF   FED,F
03A24:  MOVFF  FEF,6C9
03A28:  MOVFF  6C8,FEA
03A2C:  MOVFF  6C7,FE9
03A30:  MOVFF  03,FEC
03A34:  MOVF   FED,F
03A36:  MOVFF  6C9,FEF
....................               } 
....................  
....................               ELSE 
03A3A:  BRA    3AF0
03A3C:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
03A3E:  MOVLB  6
03A40:  MOVF   xC6,W
03A42:  MULLW  04
03A44:  MOVF   FF3,W
03A46:  CLRF   xC8
03A48:  MOVWF  xC7
03A4A:  MOVLW  D5
03A4C:  ADDWF  xC7,W
03A4E:  MOVWF  01
03A50:  MOVLW  05
03A52:  ADDWFC xC8,W
03A54:  MOVWF  03
03A56:  MOVWF  xC8
03A58:  MOVF   xC3,W
03A5A:  MULLW  04
03A5C:  MOVF   FF3,W
03A5E:  CLRF   xCA
03A60:  MOVWF  xC9
03A62:  MOVLW  81
03A64:  ADDWF  xC9,W
03A66:  MOVWF  FE9
03A68:  MOVLW  06
03A6A:  ADDWFC xCA,W
03A6C:  MOVWF  FEA
03A6E:  MOVFF  FEC,03
03A72:  MOVF   FED,F
03A74:  MOVFF  FEF,6C9
03A78:  MOVFF  6C8,FEA
03A7C:  MOVFF  01,FE9
03A80:  MOVFF  03,FEC
03A84:  MOVF   FED,F
03A86:  MOVFF  6C9,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
03A8A:  MOVF   xC6,W
03A8C:  MULLW  04
03A8E:  MOVF   FF3,W
03A90:  CLRF   xC8
03A92:  MOVWF  xC7
03A94:  MOVLW  02
03A96:  ADDWF  xC7,W
03A98:  MOVWF  01
03A9A:  MOVLW  00
03A9C:  ADDWFC xC8,W
03A9E:  MOVWF  03
03AA0:  MOVF   01,W
03AA2:  ADDLW  D5
03AA4:  MOVWF  01
03AA6:  MOVLW  05
03AA8:  ADDWFC 03,F
03AAA:  MOVFF  01,6C7
03AAE:  MOVFF  03,6C8
03AB2:  MOVF   xC3,W
03AB4:  MULLW  04
03AB6:  MOVF   FF3,W
03AB8:  CLRF   xCA
03ABA:  MOVWF  xC9
03ABC:  MOVLW  02
03ABE:  ADDWF  xC9,W
03AC0:  MOVWF  01
03AC2:  MOVLW  00
03AC4:  ADDWFC xCA,W
03AC6:  MOVWF  03
03AC8:  MOVF   01,W
03ACA:  ADDLW  81
03ACC:  MOVWF  FE9
03ACE:  MOVLW  06
03AD0:  ADDWFC 03,W
03AD2:  MOVWF  FEA
03AD4:  MOVFF  FEC,03
03AD8:  MOVF   FED,F
03ADA:  MOVFF  FEF,6C9
03ADE:  MOVFF  6C8,FEA
03AE2:  MOVFF  6C7,FE9
03AE6:  MOVFF  03,FEC
03AEA:  MOVF   FED,F
03AEC:  MOVFF  6C9,FEF
....................               } 
....................      //          printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03AF0:  INCF   xC1,F
....................            } 
....................         } 
03AF2:  INCF   xC3,F
03AF4:  BRA    378A
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03AF6:  MOVLB  0
03AF8:  BTFSS  xB5.3
03AFA:  BRA    3B06
03AFC:  MOVLB  5
03AFE:  CLRF   xD2
03B00:  MOVFF  6C1,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03B04:  BRA    3B0E
03B06:  MOVLB  6
03B08:  CLRF   x16
03B0A:  MOVFF  6C1,615
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays2[0][0],delays2[0][1]); 
....................     // delays2[0][1]=27498; 
....................     // delays1[0][1]=27498; 
....................      organizado=1; 
03B0E:  MOVLB  0
03B10:  BSF    xB5.2
....................   } 
03B12:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03B14:  MOVLB  5
03B16:  CLRF   xD2
03B18:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
03B1A:  MOVLB  6
03B1C:  CLRF   x16
03B1E:  CLRF   x15
....................    pointer=delays1; 
03B20:  MOVLW  05
03B22:  MOVLB  5
03B24:  MOVWF  x7C
03B26:  MOVLW  91
03B28:  MOVWF  x7B
....................    actmat=0; 
03B2A:  MOVLB  0
03B2C:  BCF    xB5.3
....................    portc=0xFF; 
03B2E:  MOVLW  FF
03B30:  MOVWF  F82
....................    portd=0xFF; 
03B32:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03B34:  MOVLW  00
03B36:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
03B38:  MOVWF  F95
....................    portc=0xFF; 
03B3A:  MOVLW  FF
03B3C:  MOVWF  F82
....................    portd=0xFF; 
03B3E:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03B40:  MOVLB  6
03B42:  CLRF   x7F
03B44:  MOVLB  1
03B46:  MOVF   x3F,W
03B48:  MOVLB  6
03B4A:  SUBWF  x7F,W
03B4C:  BTFSC  FD8.0
03B4E:  BRA    3C78
03B50:  CLRF   1B
03B52:  BTFSC  FF2.7
03B54:  BSF    1B.7
03B56:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03B58:  CLRF   xF9
03B5A:  MOVFF  67F,6F8
03B5E:  CLRF   xFB
03B60:  MOVLW  2F
03B62:  MOVWF  xFA
03B64:  MOVLB  0
03B66:  CALL   035E
03B6A:  BTFSC  1B.7
03B6C:  BSF    FF2.7
03B6E:  MOVFF  02,03
03B72:  MOVF   01,W
03B74:  ADDLW  8A
03B76:  MOVWF  01
03B78:  MOVLW  02
03B7A:  ADDWFC 03,F
03B7C:  MOVFF  01,FE9
03B80:  MOVFF  03,FEA
03B84:  MOVF   FEF,W
03B86:  XORLW  65
03B88:  BZ    3B8C
03B8A:  BRA    3C72
....................          case dimmer: 
.................... #ifdef DEBUG 
....................          printf("used dimmer!!!\n\r"); 
.................... #endif 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
03B8C:  BCF    FD8.0
03B8E:  MOVLB  5
03B90:  RLCF   x7A,W
03B92:  CLRF   03
03B94:  ADDLW  19
03B96:  MOVWF  01
03B98:  MOVLW  06
03B9A:  ADDWFC 03,F
03B9C:  MOVFF  01,680
03BA0:  MOVLB  6
03BA2:  MOVFF  03,681
03BA6:  CLRF   1B
03BA8:  BTFSC  FF2.7
03BAA:  BSF    1B.7
03BAC:  BCF    FF2.7
03BAE:  CLRF   xF9
03BB0:  MOVFF  67F,6F8
03BB4:  CLRF   xFB
03BB6:  MOVLW  2F
03BB8:  MOVWF  xFA
03BBA:  MOVLB  0
03BBC:  CALL   035E
03BC0:  BTFSC  1B.7
03BC2:  BSF    FF2.7
03BC4:  MOVF   01,W
03BC6:  ADDLW  4C
03BC8:  MOVLB  6
03BCA:  MOVWF  x82
03BCC:  MOVLW  01
03BCE:  ADDWFC 02,W
03BD0:  MOVWF  x83
03BD2:  MOVLW  01
03BD4:  ADDWF  x82,W
03BD6:  MOVWF  01
03BD8:  MOVLW  00
03BDA:  ADDWFC x83,W
03BDC:  MOVWF  03
03BDE:  MOVF   01,W
03BE0:  ADDLW  3E
03BE2:  MOVWF  01
03BE4:  MOVLW  01
03BE6:  ADDWFC 03,F
03BE8:  MOVF   01,W
03BEA:  ADDLW  1F
03BEC:  MOVWF  FE9
03BEE:  MOVLW  00
03BF0:  ADDWFC 03,W
03BF2:  MOVWF  FEA
03BF4:  BCF    FD8.0
03BF6:  RLCF   FEF,W
03BF8:  CLRF   03
03BFA:  MOVLB  0
03BFC:  CALL   0172
03C00:  TBLRD*+
03C02:  MOVFF  FF5,03
03C06:  MOVLB  6
03C08:  MOVFF  681,FEA
03C0C:  MOVFF  680,FE9
03C10:  MOVFF  03,FEC
03C14:  MOVF   FED,F
03C16:  MOVWF  FEF
03C18:  CLRF   1B
03C1A:  BTFSC  FF2.7
03C1C:  BSF    1B.7
03C1E:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
03C20:  CLRF   xF9
03C22:  MOVFF  67F,6F8
03C26:  CLRF   xFB
03C28:  MOVLW  2F
03C2A:  MOVWF  xFA
03C2C:  MOVLB  0
03C2E:  CALL   035E
03C32:  BTFSC  1B.7
03C34:  BSF    FF2.7
03C36:  MOVF   01,W
03C38:  ADDLW  4C
03C3A:  MOVLB  6
03C3C:  MOVWF  x80
03C3E:  MOVLW  01
03C40:  ADDWFC 02,W
03C42:  MOVWF  x81
03C44:  MOVLW  01
03C46:  ADDWF  x80,W
03C48:  MOVWF  01
03C4A:  MOVLW  00
03C4C:  ADDWFC x81,W
03C4E:  MOVWF  03
03C50:  MOVF   01,W
03C52:  ADDLW  3E
03C54:  MOVWF  01
03C56:  MOVLW  01
03C58:  ADDWFC 03,F
03C5A:  MOVF   01,W
03C5C:  ADDLW  20
03C5E:  MOVWF  FE9
03C60:  MOVLW  00
03C62:  ADDWFC 03,W
03C64:  MOVWF  FEA
03C66:  MOVFF  57A,FEF
....................             ++used_dimmers;           
03C6A:  MOVLB  5
03C6C:  INCF   x7A,F
....................          break; 
03C6E:  MOVLB  0
03C70:  BRA    3C72
....................       } 
....................    } 
03C72:  MOVLB  6
03C74:  INCF   x7F,F
03C76:  BRA    3B44
....................    if(used_dimmers>0) 
03C78:  MOVLB  5
03C7A:  MOVF   x7A,F
03C7C:  BZ    3CA2
....................    { 
....................    actmat=0; 
03C7E:  MOVLB  0
03C80:  BCF    xB5.3
....................    pointer=delays1; 
03C82:  MOVLW  05
03C84:  MOVLB  5
03C86:  MOVWF  x7C
03C88:  MOVLW  91
03C8A:  MOVWF  x7B
....................    org(); 
03C8C:  MOVLB  0
03C8E:  RCALL  34E0
....................    pointer=delays2; 
03C90:  MOVLW  05
03C92:  MOVLB  5
03C94:  MOVWF  x7C
03C96:  MOVLW  D5
03C98:  MOVWF  x7B
....................    actmat=1; 
03C9A:  MOVLB  0
03C9C:  BSF    xB5.3
....................    org(); 
03C9E:  RCALL  34E0
03CA0:  MOVLB  5
....................    } 
.................... } 
03CA2:  MOVLB  0
03CA4:  GOTO   7FF0 (RETURN)
....................  
.................... void write_outputs() 
.................... { 
03CA8:  MOVLB  6
03CAA:  BCF    x80.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03CAC:  CLRF   x7F
03CAE:  MOVLB  1
03CB0:  MOVF   x3F,W
03CB2:  MOVLB  6
03CB4:  SUBWF  x7F,W
03CB6:  BTFSC  FD8.0
03CB8:  GOTO   4FFA
03CBC:  CLRF   1B
03CBE:  BTFSC  FF2.7
03CC0:  BSF    1B.7
03CC2:  BCF    FF2.7
....................    { 
....................       //printf("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03CC4:  CLRF   xF9
03CC6:  MOVFF  67F,6F8
03CCA:  CLRF   xFB
03CCC:  MOVLW  2F
03CCE:  MOVWF  xFA
03CD0:  MOVLB  0
03CD2:  CALL   035E
03CD6:  BTFSC  1B.7
03CD8:  BSF    FF2.7
03CDA:  MOVFF  02,03
03CDE:  MOVF   01,W
03CE0:  ADDLW  8A
03CE2:  MOVWF  01
03CE4:  MOVLW  02
03CE6:  ADDWFC 03,F
03CE8:  MOVFF  01,FE9
03CEC:  MOVFF  03,FEA
03CF0:  MOVF   FEF,W
03CF2:  XORLW  65
03CF4:  BZ    3D08
03CF6:  XORLW  01
03CF8:  BTFSC  FD8.2
03CFA:  BRA    4274
03CFC:  XORLW  02
03CFE:  BTFSC  FD8.2
03D00:  GOTO   4544
03D04:  GOTO   4FF2
....................          case dimmer: 
03D08:  CLRF   1B
03D0A:  BTFSC  FF2.7
03D0C:  BSF    1B.7
03D0E:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
03D10:  MOVLB  6
03D12:  CLRF   xF9
03D14:  MOVFF  67F,6F8
03D18:  CLRF   xFB
03D1A:  MOVLW  2F
03D1C:  MOVWF  xFA
03D1E:  MOVLB  0
03D20:  CALL   035E
03D24:  BTFSC  1B.7
03D26:  BSF    FF2.7
03D28:  MOVF   01,W
03D2A:  ADDLW  4C
03D2C:  MOVLB  6
03D2E:  MOVWF  x81
03D30:  MOVLW  01
03D32:  ADDWFC 02,W
03D34:  MOVWF  x82
03D36:  MOVLW  01
03D38:  ADDWF  x81,W
03D3A:  MOVWF  01
03D3C:  MOVLW  00
03D3E:  ADDWFC x82,W
03D40:  MOVWF  03
03D42:  MOVF   01,W
03D44:  ADDLW  3E
03D46:  MOVWF  01
03D48:  MOVLW  01
03D4A:  ADDWFC 03,F
03D4C:  MOVF   01,W
03D4E:  ADDLW  1D
03D50:  MOVWF  FE9
03D52:  MOVLW  00
03D54:  ADDWFC 03,W
03D56:  MOVWF  FEA
03D58:  BTFSS  FEF.0
03D5A:  BRA    3EC0
03D5C:  CLRF   1B
03D5E:  BTFSC  FF2.7
03D60:  BSF    1B.7
03D62:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
03D64:  CLRF   xF9
03D66:  MOVFF  67F,6F8
03D6A:  CLRF   xFB
03D6C:  MOVLW  2F
03D6E:  MOVWF  xFA
03D70:  MOVLB  0
03D72:  CALL   035E
03D76:  BTFSC  1B.7
03D78:  BSF    FF2.7
03D7A:  MOVF   01,W
03D7C:  ADDLW  4C
03D7E:  MOVLB  6
03D80:  MOVWF  x81
03D82:  MOVLW  01
03D84:  ADDWFC 02,W
03D86:  MOVWF  x82
03D88:  MOVLW  01
03D8A:  ADDWF  x81,W
03D8C:  MOVWF  01
03D8E:  MOVLW  00
03D90:  ADDWFC x82,W
03D92:  MOVWF  03
03D94:  MOVF   01,W
03D96:  ADDLW  3E
03D98:  MOVWF  01
03D9A:  MOVLW  01
03D9C:  ADDWFC 03,F
03D9E:  MOVF   01,W
03DA0:  ADDLW  1E
03DA2:  MOVWF  FE9
03DA4:  MOVLW  00
03DA6:  ADDWFC 03,W
03DA8:  MOVWF  FEA
03DAA:  MOVF   FEF,F
03DAC:  BNZ   3E70
03DAE:  CLRF   1B
03DB0:  BTFSC  FF2.7
03DB2:  BSF    1B.7
03DB4:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03DB6:  CLRF   xF9
03DB8:  MOVFF  67F,6F8
03DBC:  CLRF   xFB
03DBE:  MOVLW  2F
03DC0:  MOVWF  xFA
03DC2:  MOVLB  0
03DC4:  CALL   035E
03DC8:  BTFSC  1B.7
03DCA:  BSF    FF2.7
03DCC:  MOVF   01,W
03DCE:  ADDLW  4C
03DD0:  MOVLB  6
03DD2:  MOVWF  x81
03DD4:  MOVLW  01
03DD6:  ADDWFC 02,W
03DD8:  MOVWF  x82
03DDA:  MOVLW  01
03DDC:  ADDWF  x81,W
03DDE:  MOVWF  01
03DE0:  MOVLW  00
03DE2:  ADDWFC x82,W
03DE4:  MOVWF  03
03DE6:  MOVF   01,W
03DE8:  ADDLW  3E
03DEA:  MOVWF  01
03DEC:  MOVLW  01
03DEE:  ADDWFC 03,F
03DF0:  MOVF   01,W
03DF2:  ADDLW  20
03DF4:  MOVWF  FE9
03DF6:  MOVLW  00
03DF8:  ADDWFC 03,W
03DFA:  MOVWF  FEA
03DFC:  CLRF   03
03DFE:  MOVF   FEF,W
03E00:  ADDLW  81
03E02:  MOVWF  01
03E04:  MOVLW  05
03E06:  ADDWFC 03,F
03E08:  MOVFF  01,683
03E0C:  MOVFF  03,684
03E10:  CLRF   1B
03E12:  BTFSC  FF2.7
03E14:  BSF    1B.7
03E16:  BCF    FF2.7
03E18:  CLRF   xF9
03E1A:  MOVFF  67F,6F8
03E1E:  CLRF   xFB
03E20:  MOVLW  2F
03E22:  MOVWF  xFA
03E24:  MOVLB  0
03E26:  CALL   035E
03E2A:  BTFSC  1B.7
03E2C:  BSF    FF2.7
03E2E:  MOVF   01,W
03E30:  ADDLW  4C
03E32:  MOVLB  6
03E34:  MOVWF  x85
03E36:  MOVLW  01
03E38:  ADDWFC 02,W
03E3A:  MOVWF  x86
03E3C:  MOVLW  01
03E3E:  ADDWF  x85,W
03E40:  MOVWF  01
03E42:  MOVLW  00
03E44:  ADDWFC x86,W
03E46:  MOVWF  03
03E48:  MOVF   01,W
03E4A:  ADDLW  3E
03E4C:  MOVWF  01
03E4E:  MOVLW  01
03E50:  ADDWFC 03,F
03E52:  MOVF   01,W
03E54:  ADDLW  1C
03E56:  MOVWF  FE9
03E58:  MOVLW  00
03E5A:  ADDWFC 03,W
03E5C:  MOVWF  FEA
03E5E:  MOVFF  FEF,687
03E62:  MOVFF  684,FEA
03E66:  MOVFF  683,FE9
03E6A:  MOVFF  687,FEF
....................                   //printf("ltlevel[%d]=%d\n\r",((struct light)mydevices.myoutputs[x].device).internal_order,((struct light)mydevices.myoutputs[x].device).dim_value.value); 
....................                   update_dimmers=true; 
03E6E:  BSF    x80.0
03E70:  CLRF   1B
03E72:  BTFSC  FF2.7
03E74:  BSF    1B.7
03E76:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
03E78:  CLRF   xF9
03E7A:  MOVFF  67F,6F8
03E7E:  CLRF   xFB
03E80:  MOVLW  2F
03E82:  MOVWF  xFA
03E84:  MOVLB  0
03E86:  CALL   035E
03E8A:  BTFSC  1B.7
03E8C:  BSF    FF2.7
03E8E:  MOVF   01,W
03E90:  ADDLW  4C
03E92:  MOVLB  6
03E94:  MOVWF  x81
03E96:  MOVLW  01
03E98:  ADDWFC 02,W
03E9A:  MOVWF  x82
03E9C:  MOVLW  01
03E9E:  ADDWF  x81,W
03EA0:  MOVWF  01
03EA2:  MOVLW  00
03EA4:  ADDWFC x82,W
03EA6:  MOVWF  03
03EA8:  MOVF   01,W
03EAA:  ADDLW  3E
03EAC:  MOVWF  01
03EAE:  MOVLW  01
03EB0:  ADDWFC 03,F
03EB2:  MOVF   01,W
03EB4:  ADDLW  1D
03EB6:  MOVWF  FE9
03EB8:  MOVLW  00
03EBA:  ADDWFC 03,W
03EBC:  MOVWF  FEA
03EBE:  BCF    FEF.0
03EC0:  CLRF   1B
03EC2:  BTFSC  FF2.7
03EC4:  BSF    1B.7
03EC6:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
03EC8:  CLRF   xF9
03ECA:  MOVFF  67F,6F8
03ECE:  CLRF   xFB
03ED0:  MOVLW  2F
03ED2:  MOVWF  xFA
03ED4:  MOVLB  0
03ED6:  CALL   035E
03EDA:  BTFSC  1B.7
03EDC:  BSF    FF2.7
03EDE:  MOVF   01,W
03EE0:  ADDLW  4C
03EE2:  MOVLB  6
03EE4:  MOVWF  x81
03EE6:  MOVLW  01
03EE8:  ADDWFC 02,W
03EEA:  MOVWF  x82
03EEC:  MOVLW  01
03EEE:  ADDWF  x81,W
03EF0:  MOVWF  01
03EF2:  MOVLW  00
03EF4:  ADDWFC x82,W
03EF6:  MOVWF  03
03EF8:  MOVF   01,W
03EFA:  ADDLW  3E
03EFC:  MOVWF  01
03EFE:  MOVLW  01
03F00:  ADDWFC 03,F
03F02:  MOVF   01,W
03F04:  ADDLW  13
03F06:  MOVWF  FE9
03F08:  MOVLW  00
03F0A:  ADDWFC 03,W
03F0C:  MOVWF  FEA
03F0E:  BTFSS  FEF.0
03F10:  BRA    4066
03F12:  CLRF   1B
03F14:  BTFSC  FF2.7
03F16:  BSF    1B.7
03F18:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
03F1A:  CLRF   xF9
03F1C:  MOVFF  67F,6F8
03F20:  CLRF   xFB
03F22:  MOVLW  2F
03F24:  MOVWF  xFA
03F26:  MOVLB  0
03F28:  CALL   035E
03F2C:  BTFSC  1B.7
03F2E:  BSF    FF2.7
03F30:  MOVF   01,W
03F32:  ADDLW  4C
03F34:  MOVLB  6
03F36:  MOVWF  x81
03F38:  MOVLW  01
03F3A:  ADDWFC 02,W
03F3C:  MOVWF  x82
03F3E:  MOVLW  01
03F40:  ADDWF  x81,W
03F42:  MOVWF  01
03F44:  MOVLW  00
03F46:  ADDWFC x82,W
03F48:  MOVWF  03
03F4A:  MOVF   01,W
03F4C:  ADDLW  3E
03F4E:  MOVWF  01
03F50:  MOVLW  01
03F52:  ADDWFC 03,F
03F54:  MOVF   01,W
03F56:  ADDLW  12
03F58:  MOVWF  FE9
03F5A:  MOVLW  00
03F5C:  ADDWFC 03,W
03F5E:  MOVWF  FEA
03F60:  MOVF   FEF,F
03F62:  BZ    4016
03F64:  CLRF   1B
03F66:  BTFSC  FF2.7
03F68:  BSF    1B.7
03F6A:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
03F6C:  CLRF   xF9
03F6E:  MOVFF  67F,6F8
03F72:  CLRF   xFB
03F74:  MOVLW  2F
03F76:  MOVWF  xFA
03F78:  MOVLB  0
03F7A:  CALL   035E
03F7E:  BTFSC  1B.7
03F80:  BSF    FF2.7
03F82:  MOVF   01,W
03F84:  ADDLW  4C
03F86:  MOVLB  6
03F88:  MOVWF  x81
03F8A:  MOVLW  01
03F8C:  ADDWFC 02,W
03F8E:  MOVWF  x82
03F90:  MOVLW  01
03F92:  ADDWF  x81,W
03F94:  MOVWF  01
03F96:  MOVLW  00
03F98:  ADDWFC x82,W
03F9A:  MOVWF  03
03F9C:  MOVF   01,W
03F9E:  ADDLW  3E
03FA0:  MOVWF  01
03FA2:  MOVLW  01
03FA4:  ADDWFC 03,F
03FA6:  MOVF   01,W
03FA8:  ADDLW  1E
03FAA:  MOVWF  FE9
03FAC:  MOVLW  00
03FAE:  ADDWFC 03,W
03FB0:  MOVWF  FEA
03FB2:  MOVLW  01
03FB4:  MOVWF  FEF
03FB6:  CLRF   1B
03FB8:  BTFSC  FF2.7
03FBA:  BSF    1B.7
03FBC:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
03FBE:  CLRF   xF9
03FC0:  MOVFF  67F,6F8
03FC4:  CLRF   xFB
03FC6:  MOVLW  2F
03FC8:  MOVWF  xFA
03FCA:  MOVLB  0
03FCC:  CALL   035E
03FD0:  BTFSC  1B.7
03FD2:  BSF    FF2.7
03FD4:  MOVF   01,W
03FD6:  ADDLW  4C
03FD8:  MOVLB  6
03FDA:  MOVWF  x81
03FDC:  MOVLW  01
03FDE:  ADDWFC 02,W
03FE0:  MOVWF  x82
03FE2:  MOVLW  01
03FE4:  ADDWF  x81,W
03FE6:  MOVWF  01
03FE8:  MOVLW  00
03FEA:  ADDWFC x82,W
03FEC:  MOVWF  03
03FEE:  MOVF   01,W
03FF0:  ADDLW  3E
03FF2:  MOVWF  01
03FF4:  MOVLW  01
03FF6:  ADDWFC 03,F
03FF8:  MOVF   01,W
03FFA:  ADDLW  20
03FFC:  MOVWF  FE9
03FFE:  MOVLW  00
04000:  ADDWFC 03,W
04002:  MOVWF  FEA
04004:  CLRF   03
04006:  MOVF   FEF,W
04008:  ADDLW  81
0400A:  MOVWF  FE9
0400C:  MOVLW  05
0400E:  ADDWFC 03,W
04010:  MOVWF  FEA
04012:  CLRF   FEF
....................                   update_dimmers=true; 
04014:  BSF    x80.0
04016:  CLRF   1B
04018:  BTFSC  FF2.7
0401A:  BSF    1B.7
0401C:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
0401E:  CLRF   xF9
04020:  MOVFF  67F,6F8
04024:  CLRF   xFB
04026:  MOVLW  2F
04028:  MOVWF  xFA
0402A:  MOVLB  0
0402C:  CALL   035E
04030:  BTFSC  1B.7
04032:  BSF    FF2.7
04034:  MOVF   01,W
04036:  ADDLW  4C
04038:  MOVLB  6
0403A:  MOVWF  x81
0403C:  MOVLW  01
0403E:  ADDWFC 02,W
04040:  MOVWF  x82
04042:  MOVLW  01
04044:  ADDWF  x81,W
04046:  MOVWF  01
04048:  MOVLW  00
0404A:  ADDWFC x82,W
0404C:  MOVWF  03
0404E:  MOVF   01,W
04050:  ADDLW  3E
04052:  MOVWF  01
04054:  MOVLW  01
04056:  ADDWFC 03,F
04058:  MOVF   01,W
0405A:  ADDLW  13
0405C:  MOVWF  FE9
0405E:  MOVLW  00
04060:  ADDWFC 03,W
04062:  MOVWF  FEA
04064:  BCF    FEF.0
04066:  CLRF   1B
04068:  BTFSC  FF2.7
0406A:  BSF    1B.7
0406C:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
0406E:  CLRF   xF9
04070:  MOVFF  67F,6F8
04074:  CLRF   xFB
04076:  MOVLW  2F
04078:  MOVWF  xFA
0407A:  MOVLB  0
0407C:  CALL   035E
04080:  BTFSC  1B.7
04082:  BSF    FF2.7
04084:  MOVF   01,W
04086:  ADDLW  4C
04088:  MOVLB  6
0408A:  MOVWF  x81
0408C:  MOVLW  01
0408E:  ADDWFC 02,W
04090:  MOVWF  x82
04092:  MOVLW  01
04094:  ADDWF  x81,W
04096:  MOVWF  01
04098:  MOVLW  00
0409A:  ADDWFC x82,W
0409C:  MOVWF  03
0409E:  MOVF   01,W
040A0:  ADDLW  3E
040A2:  MOVWF  01
040A4:  MOVLW  01
040A6:  ADDWFC 03,F
040A8:  MOVF   01,W
040AA:  ADDLW  09
040AC:  MOVWF  FE9
040AE:  MOVLW  00
040B0:  ADDWFC 03,W
040B2:  MOVWF  FEA
040B4:  BTFSS  FEF.0
040B6:  BRA    426E
040B8:  CLRF   1B
040BA:  BTFSC  FF2.7
040BC:  BSF    1B.7
040BE:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
040C0:  CLRF   xF9
040C2:  MOVFF  67F,6F8
040C6:  CLRF   xFB
040C8:  MOVLW  2F
040CA:  MOVWF  xFA
040CC:  MOVLB  0
040CE:  CALL   035E
040D2:  BTFSC  1B.7
040D4:  BSF    FF2.7
040D6:  MOVF   01,W
040D8:  ADDLW  4C
040DA:  MOVLB  6
040DC:  MOVWF  x81
040DE:  MOVLW  01
040E0:  ADDWFC 02,W
040E2:  MOVWF  x82
040E4:  MOVLW  01
040E6:  ADDWF  x81,W
040E8:  MOVWF  01
040EA:  MOVLW  00
040EC:  ADDWFC x82,W
040EE:  MOVWF  03
040F0:  MOVF   01,W
040F2:  ADDLW  3E
040F4:  MOVWF  01
040F6:  MOVLW  01
040F8:  ADDWFC 03,F
040FA:  MOVF   01,W
040FC:  ADDLW  08
040FE:  MOVWF  FE9
04100:  MOVLW  00
04102:  ADDWFC 03,W
04104:  MOVWF  FEA
04106:  MOVF   FEF,F
04108:  BTFSC  FD8.2
0410A:  BRA    421E
0410C:  CLRF   1B
0410E:  BTFSC  FF2.7
04110:  BSF    1B.7
04112:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
04114:  CLRF   xF9
04116:  MOVFF  67F,6F8
0411A:  CLRF   xFB
0411C:  MOVLW  2F
0411E:  MOVWF  xFA
04120:  MOVLB  0
04122:  CALL   035E
04126:  BTFSC  1B.7
04128:  BSF    FF2.7
0412A:  MOVF   01,W
0412C:  ADDLW  4C
0412E:  MOVLB  6
04130:  MOVWF  x81
04132:  MOVLW  01
04134:  ADDWFC 02,W
04136:  MOVWF  x82
04138:  MOVLW  01
0413A:  ADDWF  x81,W
0413C:  MOVWF  01
0413E:  MOVLW  00
04140:  ADDWFC x82,W
04142:  MOVWF  03
04144:  MOVF   01,W
04146:  ADDLW  3E
04148:  MOVWF  01
0414A:  MOVLW  01
0414C:  ADDWFC 03,F
0414E:  MOVF   01,W
04150:  ADDLW  1E
04152:  MOVWF  FE9
04154:  MOVLW  00
04156:  ADDWFC 03,W
04158:  MOVWF  FEA
0415A:  CLRF   FEF
0415C:  CLRF   1B
0415E:  BTFSC  FF2.7
04160:  BSF    1B.7
04162:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
04164:  CLRF   xF9
04166:  MOVFF  67F,6F8
0416A:  CLRF   xFB
0416C:  MOVLW  2F
0416E:  MOVWF  xFA
04170:  MOVLB  0
04172:  CALL   035E
04176:  BTFSC  1B.7
04178:  BSF    FF2.7
0417A:  MOVF   01,W
0417C:  ADDLW  4C
0417E:  MOVLB  6
04180:  MOVWF  x81
04182:  MOVLW  01
04184:  ADDWFC 02,W
04186:  MOVWF  x82
04188:  MOVLW  01
0418A:  ADDWF  x81,W
0418C:  MOVWF  01
0418E:  MOVLW  00
04190:  ADDWFC x82,W
04192:  MOVWF  03
04194:  MOVF   01,W
04196:  ADDLW  3E
04198:  MOVWF  01
0419A:  MOVLW  01
0419C:  ADDWFC 03,F
0419E:  MOVF   01,W
041A0:  ADDLW  20
041A2:  MOVWF  FE9
041A4:  MOVLW  00
041A6:  ADDWFC 03,W
041A8:  MOVWF  FEA
041AA:  CLRF   03
041AC:  MOVF   FEF,W
041AE:  ADDLW  81
041B0:  MOVWF  01
041B2:  MOVLW  05
041B4:  ADDWFC 03,F
041B6:  MOVFF  01,683
041BA:  MOVFF  03,684
041BE:  CLRF   1B
041C0:  BTFSC  FF2.7
041C2:  BSF    1B.7
041C4:  BCF    FF2.7
041C6:  CLRF   xF9
041C8:  MOVFF  67F,6F8
041CC:  CLRF   xFB
041CE:  MOVLW  2F
041D0:  MOVWF  xFA
041D2:  MOVLB  0
041D4:  CALL   035E
041D8:  BTFSC  1B.7
041DA:  BSF    FF2.7
041DC:  MOVF   01,W
041DE:  ADDLW  4C
041E0:  MOVLB  6
041E2:  MOVWF  x85
041E4:  MOVLW  01
041E6:  ADDWFC 02,W
041E8:  MOVWF  x86
041EA:  MOVLW  01
041EC:  ADDWF  x85,W
041EE:  MOVWF  01
041F0:  MOVLW  00
041F2:  ADDWFC x86,W
041F4:  MOVWF  03
041F6:  MOVF   01,W
041F8:  ADDLW  3E
041FA:  MOVWF  01
041FC:  MOVLW  01
041FE:  ADDWFC 03,F
04200:  MOVF   01,W
04202:  ADDLW  1C
04204:  MOVWF  FE9
04206:  MOVLW  00
04208:  ADDWFC 03,W
0420A:  MOVWF  FEA
0420C:  MOVFF  FEF,687
04210:  MOVFF  684,FEA
04214:  MOVFF  683,FE9
04218:  MOVFF  687,FEF
....................                   update_dimmers=true; 
0421C:  BSF    x80.0
0421E:  CLRF   1B
04220:  BTFSC  FF2.7
04222:  BSF    1B.7
04224:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
04226:  CLRF   xF9
04228:  MOVFF  67F,6F8
0422C:  CLRF   xFB
0422E:  MOVLW  2F
04230:  MOVWF  xFA
04232:  MOVLB  0
04234:  CALL   035E
04238:  BTFSC  1B.7
0423A:  BSF    FF2.7
0423C:  MOVF   01,W
0423E:  ADDLW  4C
04240:  MOVLB  6
04242:  MOVWF  x81
04244:  MOVLW  01
04246:  ADDWFC 02,W
04248:  MOVWF  x82
0424A:  MOVLW  01
0424C:  ADDWF  x81,W
0424E:  MOVWF  01
04250:  MOVLW  00
04252:  ADDWFC x82,W
04254:  MOVWF  03
04256:  MOVF   01,W
04258:  ADDLW  3E
0425A:  MOVWF  01
0425C:  MOVLW  01
0425E:  ADDWFC 03,F
04260:  MOVF   01,W
04262:  ADDLW  09
04264:  MOVWF  FE9
04266:  MOVLW  00
04268:  ADDWFC 03,W
0426A:  MOVWF  FEA
0426C:  BCF    FEF.0
....................             } 
....................          break; 
0426E:  MOVLB  0
04270:  GOTO   4FF2
....................          case _on_off: 
04274:  CLRF   1B
04276:  BTFSC  FF2.7
04278:  BSF    1B.7
0427A:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
0427C:  MOVLB  6
0427E:  CLRF   xF9
04280:  MOVFF  67F,6F8
04284:  CLRF   xFB
04286:  MOVLW  2F
04288:  MOVWF  xFA
0428A:  MOVLB  0
0428C:  CALL   035E
04290:  BTFSC  1B.7
04292:  BSF    FF2.7
04294:  MOVF   01,W
04296:  ADDLW  4C
04298:  MOVLB  6
0429A:  MOVWF  x81
0429C:  MOVLW  01
0429E:  ADDWFC 02,W
042A0:  MOVWF  x82
042A2:  MOVLW  01
042A4:  ADDWF  x81,W
042A6:  MOVWF  01
042A8:  MOVLW  00
042AA:  ADDWFC x82,W
042AC:  MOVWF  03
042AE:  MOVF   01,W
042B0:  ADDLW  3E
042B2:  MOVWF  01
042B4:  MOVLW  01
042B6:  ADDWFC 03,F
042B8:  MOVF   01,W
042BA:  ADDLW  13
042BC:  MOVWF  FE9
042BE:  MOVLW  00
042C0:  ADDWFC 03,W
042C2:  MOVWF  FEA
042C4:  BTFSS  FEF.0
042C6:  BRA    43E0
042C8:  CLRF   1B
042CA:  BTFSC  FF2.7
042CC:  BSF    1B.7
042CE:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
042D0:  CLRF   xF9
042D2:  MOVFF  67F,6F8
042D6:  CLRF   xFB
042D8:  MOVLW  2F
042DA:  MOVWF  xFA
042DC:  MOVLB  0
042DE:  CALL   035E
042E2:  BTFSC  1B.7
042E4:  BSF    FF2.7
042E6:  MOVF   01,W
042E8:  ADDLW  4C
042EA:  MOVLB  6
042EC:  MOVWF  x81
042EE:  MOVLW  01
042F0:  ADDWFC 02,W
042F2:  MOVWF  x82
042F4:  MOVLW  01
042F6:  ADDWF  x81,W
042F8:  MOVWF  01
042FA:  MOVLW  00
042FC:  ADDWFC x82,W
042FE:  MOVWF  03
04300:  MOVF   01,W
04302:  ADDLW  3E
04304:  MOVWF  01
04306:  MOVLW  01
04308:  ADDWFC 03,F
0430A:  MOVF   01,W
0430C:  ADDLW  12
0430E:  MOVWF  FE9
04310:  MOVLW  00
04312:  ADDWFC 03,W
04314:  MOVWF  FEA
04316:  MOVF   FEF,F
04318:  BZ    4390
0431A:  CLRF   1B
0431C:  BTFSC  FF2.7
0431E:  BSF    1B.7
04320:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04322:  CLRF   xF9
04324:  MOVFF  67F,6F8
04328:  CLRF   xFB
0432A:  MOVLW  2F
0432C:  MOVWF  xFA
0432E:  MOVLB  0
04330:  CALL   035E
04334:  BTFSC  1B.7
04336:  BSF    FF2.7
04338:  MOVF   01,W
0433A:  ADDLW  4C
0433C:  MOVLB  6
0433E:  MOVWF  x81
04340:  MOVLW  01
04342:  ADDWFC 02,W
04344:  MOVWF  x82
04346:  MOVLW  01
04348:  ADDWF  x81,W
0434A:  MOVWF  01
0434C:  MOVLW  00
0434E:  ADDWFC x82,W
04350:  MOVWF  03
04352:  MOVF   01,W
04354:  ADDLW  3E
04356:  MOVWF  01
04358:  MOVLW  01
0435A:  ADDWFC 03,F
0435C:  MOVF   01,W
0435E:  ADDLW  14
04360:  MOVWF  FE9
04362:  MOVLW  00
04364:  ADDWFC 03,W
04366:  MOVWF  FEA
04368:  BCF    FD8.0
0436A:  RLCF   FEF,W
0436C:  CLRF   03
0436E:  MOVLB  0
04370:  CALL   0172
04374:  TBLRD*+
04376:  MOVFF  FF5,03
0437A:  CLRF   00
0437C:  DECF   00,F
0437E:  XORWF  00,F
04380:  MOVLW  FF
04382:  XORWF  03,F
04384:  MOVF   00,W
04386:  MOVLB  5
04388:  IORWF  x7F,F
0438A:  MOVF   03,W
0438C:  IORWF  x80,F
0438E:  MOVLB  6
04390:  CLRF   1B
04392:  BTFSC  FF2.7
04394:  BSF    1B.7
04396:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
04398:  CLRF   xF9
0439A:  MOVFF  67F,6F8
0439E:  CLRF   xFB
043A0:  MOVLW  2F
043A2:  MOVWF  xFA
043A4:  MOVLB  0
043A6:  CALL   035E
043AA:  BTFSC  1B.7
043AC:  BSF    FF2.7
043AE:  MOVF   01,W
043B0:  ADDLW  4C
043B2:  MOVLB  6
043B4:  MOVWF  x81
043B6:  MOVLW  01
043B8:  ADDWFC 02,W
043BA:  MOVWF  x82
043BC:  MOVLW  01
043BE:  ADDWF  x81,W
043C0:  MOVWF  01
043C2:  MOVLW  00
043C4:  ADDWFC x82,W
043C6:  MOVWF  03
043C8:  MOVF   01,W
043CA:  ADDLW  3E
043CC:  MOVWF  01
043CE:  MOVLW  01
043D0:  ADDWFC 03,F
043D2:  MOVF   01,W
043D4:  ADDLW  13
043D6:  MOVWF  FE9
043D8:  MOVLW  00
043DA:  ADDWFC 03,W
043DC:  MOVWF  FEA
043DE:  BCF    FEF.0
043E0:  CLRF   1B
043E2:  BTFSC  FF2.7
043E4:  BSF    1B.7
043E6:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
043E8:  CLRF   xF9
043EA:  MOVFF  67F,6F8
043EE:  CLRF   xFB
043F0:  MOVLW  2F
043F2:  MOVWF  xFA
043F4:  MOVLB  0
043F6:  CALL   035E
043FA:  BTFSC  1B.7
043FC:  BSF    FF2.7
043FE:  MOVF   01,W
04400:  ADDLW  4C
04402:  MOVLB  6
04404:  MOVWF  x81
04406:  MOVLW  01
04408:  ADDWFC 02,W
0440A:  MOVWF  x82
0440C:  MOVLW  01
0440E:  ADDWF  x81,W
04410:  MOVWF  01
04412:  MOVLW  00
04414:  ADDWFC x82,W
04416:  MOVWF  03
04418:  MOVF   01,W
0441A:  ADDLW  3E
0441C:  MOVWF  01
0441E:  MOVLW  01
04420:  ADDWFC 03,F
04422:  MOVF   01,W
04424:  ADDLW  09
04426:  MOVWF  FE9
04428:  MOVLW  00
0442A:  ADDWFC 03,W
0442C:  MOVWF  FEA
0442E:  BTFSS  FEF.0
04430:  BRA    453E
04432:  CLRF   1B
04434:  BTFSC  FF2.7
04436:  BSF    1B.7
04438:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
0443A:  CLRF   xF9
0443C:  MOVFF  67F,6F8
04440:  CLRF   xFB
04442:  MOVLW  2F
04444:  MOVWF  xFA
04446:  MOVLB  0
04448:  CALL   035E
0444C:  BTFSC  1B.7
0444E:  BSF    FF2.7
04450:  MOVF   01,W
04452:  ADDLW  4C
04454:  MOVLB  6
04456:  MOVWF  x81
04458:  MOVLW  01
0445A:  ADDWFC 02,W
0445C:  MOVWF  x82
0445E:  MOVLW  01
04460:  ADDWF  x81,W
04462:  MOVWF  01
04464:  MOVLW  00
04466:  ADDWFC x82,W
04468:  MOVWF  03
0446A:  MOVF   01,W
0446C:  ADDLW  3E
0446E:  MOVWF  01
04470:  MOVLW  01
04472:  ADDWFC 03,F
04474:  MOVF   01,W
04476:  ADDLW  08
04478:  MOVWF  FE9
0447A:  MOVLW  00
0447C:  ADDWFC 03,W
0447E:  MOVWF  FEA
04480:  MOVF   FEF,F
04482:  BZ    44EE
04484:  CLRF   1B
04486:  BTFSC  FF2.7
04488:  BSF    1B.7
0448A:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
0448C:  CLRF   xF9
0448E:  MOVFF  67F,6F8
04492:  CLRF   xFB
04494:  MOVLW  2F
04496:  MOVWF  xFA
04498:  MOVLB  0
0449A:  CALL   035E
0449E:  BTFSC  1B.7
044A0:  BSF    FF2.7
044A2:  MOVF   01,W
044A4:  ADDLW  4C
044A6:  MOVLB  6
044A8:  MOVWF  x81
044AA:  MOVLW  01
044AC:  ADDWFC 02,W
044AE:  MOVWF  x82
044B0:  MOVLW  01
044B2:  ADDWF  x81,W
044B4:  MOVWF  01
044B6:  MOVLW  00
044B8:  ADDWFC x82,W
044BA:  MOVWF  03
044BC:  MOVF   01,W
044BE:  ADDLW  3E
044C0:  MOVWF  01
044C2:  MOVLW  01
044C4:  ADDWFC 03,F
044C6:  MOVF   01,W
044C8:  ADDLW  14
044CA:  MOVWF  FE9
044CC:  MOVLW  00
044CE:  ADDWFC 03,W
044D0:  MOVWF  FEA
044D2:  BCF    FD8.0
044D4:  RLCF   FEF,W
044D6:  CLRF   03
044D8:  MOVLB  0
044DA:  CALL   0172
044DE:  TBLRD*+
044E0:  MOVFF  FF5,03
044E4:  MOVLB  5
044E6:  ANDWF  x7F,F
044E8:  MOVF   03,W
044EA:  ANDWF  x80,F
044EC:  MOVLB  6
044EE:  CLRF   1B
044F0:  BTFSC  FF2.7
044F2:  BSF    1B.7
044F4:  BCF    FF2.7
....................                   
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
044F6:  CLRF   xF9
044F8:  MOVFF  67F,6F8
044FC:  CLRF   xFB
044FE:  MOVLW  2F
04500:  MOVWF  xFA
04502:  MOVLB  0
04504:  CALL   035E
04508:  BTFSC  1B.7
0450A:  BSF    FF2.7
0450C:  MOVF   01,W
0450E:  ADDLW  4C
04510:  MOVLB  6
04512:  MOVWF  x81
04514:  MOVLW  01
04516:  ADDWFC 02,W
04518:  MOVWF  x82
0451A:  MOVLW  01
0451C:  ADDWF  x81,W
0451E:  MOVWF  01
04520:  MOVLW  00
04522:  ADDWFC x82,W
04524:  MOVWF  03
04526:  MOVF   01,W
04528:  ADDLW  3E
0452A:  MOVWF  01
0452C:  MOVLW  01
0452E:  ADDWFC 03,F
04530:  MOVF   01,W
04532:  ADDLW  09
04534:  MOVWF  FE9
04536:  MOVLW  00
04538:  ADDWFC 03,W
0453A:  MOVWF  FEA
0453C:  BCF    FEF.0
....................             } 
....................          break; 
0453E:  MOVLB  0
04540:  GOTO   4FF2
....................            case shutter: 
04544:  CLRF   1B
04546:  BTFSC  FF2.7
04548:  BSF    1B.7
0454A:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
0454C:  MOVLB  6
0454E:  CLRF   xF9
04550:  MOVFF  67F,6F8
04554:  CLRF   xFB
04556:  MOVLW  2F
04558:  MOVWF  xFA
0455A:  MOVLB  0
0455C:  CALL   035E
04560:  BTFSC  1B.7
04562:  BSF    FF2.7
04564:  MOVF   01,W
04566:  ADDLW  4C
04568:  MOVLB  6
0456A:  MOVWF  x81
0456C:  MOVLW  01
0456E:  ADDWFC 02,W
04570:  MOVWF  x82
04572:  MOVLW  01
04574:  ADDWF  x81,W
04576:  MOVWF  01
04578:  MOVLW  00
0457A:  ADDWFC x82,W
0457C:  MOVWF  03
0457E:  MOVF   01,W
04580:  ADDLW  3E
04582:  MOVWF  01
04584:  MOVLW  01
04586:  ADDWFC 03,F
04588:  MOVF   01,W
0458A:  ADDLW  09
0458C:  MOVWF  FE9
0458E:  MOVLW  00
04590:  ADDWFC 03,W
04592:  MOVWF  FEA
04594:  BTFSS  FEF.0
04596:  BRA    47EE
04598:  CLRF   1B
0459A:  BTFSC  FF2.7
0459C:  BSF    1B.7
0459E:  BCF    FF2.7
045A0:  CLRF   xF9
045A2:  MOVFF  67F,6F8
045A6:  CLRF   xFB
045A8:  MOVLW  2F
045AA:  MOVWF  xFA
045AC:  MOVLB  0
045AE:  CALL   035E
045B2:  BTFSC  1B.7
045B4:  BSF    FF2.7
045B6:  MOVF   01,W
045B8:  ADDLW  4C
045BA:  MOVLB  6
045BC:  MOVWF  x83
045BE:  MOVLW  01
045C0:  ADDWFC 02,W
045C2:  MOVWF  x84
045C4:  MOVLW  01
045C6:  ADDWF  x83,W
045C8:  MOVWF  01
045CA:  MOVLW  00
045CC:  ADDWFC x84,W
045CE:  MOVWF  03
045D0:  MOVF   01,W
045D2:  ADDLW  3E
045D4:  MOVWF  01
045D6:  MOVLW  01
045D8:  ADDWFC 03,F
045DA:  MOVF   01,W
045DC:  ADDLW  2D
045DE:  MOVWF  FE9
045E0:  MOVLW  00
045E2:  ADDWFC 03,W
045E4:  MOVWF  FEA
045E6:  MOVF   FEF,W
045E8:  SUBLW  04
045EA:  BZ    4640
045EC:  CLRF   1B
045EE:  BTFSC  FF2.7
045F0:  BSF    1B.7
045F2:  BCF    FF2.7
045F4:  CLRF   xF9
045F6:  MOVFF  67F,6F8
045FA:  CLRF   xFB
045FC:  MOVLW  2F
045FE:  MOVWF  xFA
04600:  MOVLB  0
04602:  CALL   035E
04606:  BTFSC  1B.7
04608:  BSF    FF2.7
0460A:  MOVF   01,W
0460C:  ADDLW  4C
0460E:  MOVLB  6
04610:  MOVWF  x85
04612:  MOVLW  01
04614:  ADDWFC 02,W
04616:  MOVWF  x86
04618:  MOVLW  01
0461A:  ADDWF  x85,W
0461C:  MOVWF  01
0461E:  MOVLW  00
04620:  ADDWFC x86,W
04622:  MOVWF  03
04624:  MOVF   01,W
04626:  ADDLW  3E
04628:  MOVWF  01
0462A:  MOVLW  01
0462C:  ADDWFC 03,F
0462E:  MOVF   01,W
04630:  ADDLW  2D
04632:  MOVWF  FE9
04634:  MOVLW  00
04636:  ADDWFC 03,W
04638:  MOVWF  FEA
0463A:  MOVF   FEF,F
0463C:  BTFSS  FD8.2
0463E:  BRA    47EE
04640:  CLRF   1B
04642:  BTFSC  FF2.7
04644:  BSF    1B.7
04646:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
04648:  CLRF   xF9
0464A:  MOVFF  67F,6F8
0464E:  CLRF   xFB
04650:  MOVLW  2F
04652:  MOVWF  xFA
04654:  MOVLB  0
04656:  CALL   035E
0465A:  BTFSC  1B.7
0465C:  BSF    FF2.7
0465E:  MOVF   01,W
04660:  ADDLW  4C
04662:  MOVLB  6
04664:  MOVWF  x81
04666:  MOVLW  01
04668:  ADDWFC 02,W
0466A:  MOVWF  x82
0466C:  MOVLW  01
0466E:  ADDWF  x81,W
04670:  MOVWF  01
04672:  MOVLW  00
04674:  ADDWFC x82,W
04676:  MOVWF  03
04678:  MOVF   01,W
0467A:  ADDLW  3E
0467C:  MOVWF  01
0467E:  MOVLW  01
04680:  ADDWFC 03,F
04682:  MOVF   01,W
04684:  ADDLW  08
04686:  MOVWF  FE9
04688:  MOVLW  00
0468A:  ADDWFC 03,W
0468C:  MOVWF  FEA
0468E:  MOVF   FEF,F
04690:  BTFSC  FD8.2
04692:  BRA    479E
04694:  CLRF   1B
04696:  BTFSC  FF2.7
04698:  BSF    1B.7
0469A:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
0469C:  CLRF   xF9
0469E:  MOVFF  67F,6F8
046A2:  CLRF   xFB
046A4:  MOVLW  2F
046A6:  MOVWF  xFA
046A8:  MOVLB  0
046AA:  CALL   035E
046AE:  BTFSC  1B.7
046B0:  BSF    FF2.7
046B2:  MOVF   01,W
046B4:  ADDLW  4C
046B6:  MOVLB  6
046B8:  MOVWF  x81
046BA:  MOVLW  01
046BC:  ADDWFC 02,W
046BE:  MOVWF  x82
046C0:  MOVLW  01
046C2:  ADDWF  x81,W
046C4:  MOVWF  01
046C6:  MOVLW  00
046C8:  ADDWFC x82,W
046CA:  MOVWF  03
046CC:  MOVF   01,W
046CE:  ADDLW  3E
046D0:  MOVWF  01
046D2:  MOVLW  01
046D4:  ADDWFC 03,F
046D6:  MOVF   01,W
046D8:  ADDLW  2A
046DA:  MOVWF  FE9
046DC:  MOVLW  00
046DE:  ADDWFC 03,W
046E0:  MOVWF  FEA
046E2:  CLRF   FEF
046E4:  CLRF   1B
046E6:  BTFSC  FF2.7
046E8:  BSF    1B.7
046EA:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
046EC:  CLRF   xF9
046EE:  MOVFF  67F,6F8
046F2:  CLRF   xFB
046F4:  MOVLW  2F
046F6:  MOVWF  xFA
046F8:  MOVLB  0
046FA:  CALL   035E
046FE:  BTFSC  1B.7
04700:  BSF    FF2.7
04702:  MOVF   01,W
04704:  ADDLW  4C
04706:  MOVLB  6
04708:  MOVWF  x81
0470A:  MOVLW  01
0470C:  ADDWFC 02,W
0470E:  MOVWF  x82
04710:  MOVLW  01
04712:  ADDWF  x81,W
04714:  MOVWF  01
04716:  MOVLW  00
04718:  ADDWFC x82,W
0471A:  MOVWF  03
0471C:  MOVF   01,W
0471E:  ADDLW  3E
04720:  MOVWF  01
04722:  MOVLW  01
04724:  ADDWFC 03,F
04726:  MOVF   01,W
04728:  ADDLW  2D
0472A:  MOVWF  FE9
0472C:  MOVLW  00
0472E:  ADDWFC 03,W
04730:  MOVWF  FEA
04732:  CLRF   FEF
04734:  CLRF   1B
04736:  BTFSC  FF2.7
04738:  BSF    1B.7
0473A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
0473C:  CLRF   xF9
0473E:  MOVFF  67F,6F8
04742:  CLRF   xFB
04744:  MOVLW  2F
04746:  MOVWF  xFA
04748:  MOVLB  0
0474A:  CALL   035E
0474E:  BTFSC  1B.7
04750:  BSF    FF2.7
04752:  MOVF   01,W
04754:  ADDLW  4C
04756:  MOVLB  6
04758:  MOVWF  x81
0475A:  MOVLW  01
0475C:  ADDWFC 02,W
0475E:  MOVWF  x82
04760:  MOVLW  01
04762:  ADDWF  x81,W
04764:  MOVWF  01
04766:  MOVLW  00
04768:  ADDWFC x82,W
0476A:  MOVWF  03
0476C:  MOVF   01,W
0476E:  ADDLW  3E
04770:  MOVWF  01
04772:  MOVLW  01
04774:  ADDWFC 03,F
04776:  MOVF   01,W
04778:  ADDLW  28
0477A:  MOVWF  FE9
0477C:  MOVLW  00
0477E:  ADDWFC 03,W
04780:  MOVWF  FEA
04782:  BCF    FD8.0
04784:  RLCF   FEF,W
04786:  CLRF   03
04788:  MOVLB  0
0478A:  CALL   0172
0478E:  TBLRD*+
04790:  MOVFF  FF5,03
04794:  MOVLB  5
04796:  ANDWF  x7F,F
04798:  MOVF   03,W
0479A:  ANDWF  x80,F
0479C:  MOVLB  6
0479E:  CLRF   1B
047A0:  BTFSC  FF2.7
047A2:  BSF    1B.7
047A4:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
047A6:  CLRF   xF9
047A8:  MOVFF  67F,6F8
047AC:  CLRF   xFB
047AE:  MOVLW  2F
047B0:  MOVWF  xFA
047B2:  MOVLB  0
047B4:  CALL   035E
047B8:  BTFSC  1B.7
047BA:  BSF    FF2.7
047BC:  MOVF   01,W
047BE:  ADDLW  4C
047C0:  MOVLB  6
047C2:  MOVWF  x81
047C4:  MOVLW  01
047C6:  ADDWFC 02,W
047C8:  MOVWF  x82
047CA:  MOVLW  01
047CC:  ADDWF  x81,W
047CE:  MOVWF  01
047D0:  MOVLW  00
047D2:  ADDWFC x82,W
047D4:  MOVWF  03
047D6:  MOVF   01,W
047D8:  ADDLW  3E
047DA:  MOVWF  01
047DC:  MOVLW  01
047DE:  ADDWFC 03,F
047E0:  MOVF   01,W
047E2:  ADDLW  09
047E4:  MOVWF  FE9
047E6:  MOVLW  00
047E8:  ADDWFC 03,W
047EA:  MOVWF  FEA
047EC:  BCF    FEF.0
047EE:  CLRF   1B
047F0:  BTFSC  FF2.7
047F2:  BSF    1B.7
047F4:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
047F6:  CLRF   xF9
047F8:  MOVFF  67F,6F8
047FC:  CLRF   xFB
047FE:  MOVLW  2F
04800:  MOVWF  xFA
04802:  MOVLB  0
04804:  CALL   035E
04808:  BTFSC  1B.7
0480A:  BSF    FF2.7
0480C:  MOVF   01,W
0480E:  ADDLW  4C
04810:  MOVLB  6
04812:  MOVWF  x81
04814:  MOVLW  01
04816:  ADDWFC 02,W
04818:  MOVWF  x82
0481A:  MOVLW  01
0481C:  ADDWF  x81,W
0481E:  MOVWF  01
04820:  MOVLW  00
04822:  ADDWFC x82,W
04824:  MOVWF  03
04826:  MOVF   01,W
04828:  ADDLW  3E
0482A:  MOVWF  01
0482C:  MOVLW  01
0482E:  ADDWFC 03,F
04830:  MOVF   01,W
04832:  ADDLW  13
04834:  MOVWF  FE9
04836:  MOVLW  00
04838:  ADDWFC 03,W
0483A:  MOVWF  FEA
0483C:  BTFSS  FEF.0
0483E:  BRA    4A96
04840:  CLRF   1B
04842:  BTFSC  FF2.7
04844:  BSF    1B.7
04846:  BCF    FF2.7
04848:  CLRF   xF9
0484A:  MOVFF  67F,6F8
0484E:  CLRF   xFB
04850:  MOVLW  2F
04852:  MOVWF  xFA
04854:  MOVLB  0
04856:  CALL   035E
0485A:  BTFSC  1B.7
0485C:  BSF    FF2.7
0485E:  MOVF   01,W
04860:  ADDLW  4C
04862:  MOVLB  6
04864:  MOVWF  x83
04866:  MOVLW  01
04868:  ADDWFC 02,W
0486A:  MOVWF  x84
0486C:  MOVLW  01
0486E:  ADDWF  x83,W
04870:  MOVWF  01
04872:  MOVLW  00
04874:  ADDWFC x84,W
04876:  MOVWF  03
04878:  MOVF   01,W
0487A:  ADDLW  3E
0487C:  MOVWF  01
0487E:  MOVLW  01
04880:  ADDWFC 03,F
04882:  MOVF   01,W
04884:  ADDLW  2D
04886:  MOVWF  FE9
04888:  MOVLW  00
0488A:  ADDWFC 03,W
0488C:  MOVWF  FEA
0488E:  MOVF   FEF,W
04890:  SUBLW  04
04892:  BZ    48E6
04894:  CLRF   1B
04896:  BTFSC  FF2.7
04898:  BSF    1B.7
0489A:  BCF    FF2.7
0489C:  CLRF   xF9
0489E:  MOVFF  67F,6F8
048A2:  CLRF   xFB
048A4:  MOVLW  2F
048A6:  MOVWF  xFA
048A8:  MOVLB  0
048AA:  CALL   035E
048AE:  BTFSC  1B.7
048B0:  BSF    FF2.7
048B2:  MOVF   01,W
048B4:  ADDLW  4C
048B6:  MOVLB  6
048B8:  MOVWF  x85
048BA:  MOVLW  01
048BC:  ADDWFC 02,W
048BE:  MOVWF  x86
048C0:  MOVLW  01
048C2:  ADDWF  x85,W
048C4:  MOVWF  01
048C6:  MOVLW  00
048C8:  ADDWFC x86,W
048CA:  MOVWF  03
048CC:  MOVF   01,W
048CE:  ADDLW  3E
048D0:  MOVWF  01
048D2:  MOVLW  01
048D4:  ADDWFC 03,F
048D6:  MOVF   01,W
048D8:  ADDLW  2D
048DA:  MOVWF  FE9
048DC:  MOVLW  00
048DE:  ADDWFC 03,W
048E0:  MOVWF  FEA
048E2:  DECFSZ FEF,W
048E4:  BRA    4A96
048E6:  CLRF   1B
048E8:  BTFSC  FF2.7
048EA:  BSF    1B.7
048EC:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
048EE:  CLRF   xF9
048F0:  MOVFF  67F,6F8
048F4:  CLRF   xFB
048F6:  MOVLW  2F
048F8:  MOVWF  xFA
048FA:  MOVLB  0
048FC:  CALL   035E
04900:  BTFSC  1B.7
04902:  BSF    FF2.7
04904:  MOVF   01,W
04906:  ADDLW  4C
04908:  MOVLB  6
0490A:  MOVWF  x81
0490C:  MOVLW  01
0490E:  ADDWFC 02,W
04910:  MOVWF  x82
04912:  MOVLW  01
04914:  ADDWF  x81,W
04916:  MOVWF  01
04918:  MOVLW  00
0491A:  ADDWFC x82,W
0491C:  MOVWF  03
0491E:  MOVF   01,W
04920:  ADDLW  3E
04922:  MOVWF  01
04924:  MOVLW  01
04926:  ADDWFC 03,F
04928:  MOVF   01,W
0492A:  ADDLW  12
0492C:  MOVWF  FE9
0492E:  MOVLW  00
04930:  ADDWFC 03,W
04932:  MOVWF  FEA
04934:  MOVF   FEF,F
04936:  BTFSC  FD8.2
04938:  BRA    4A46
0493A:  CLRF   1B
0493C:  BTFSC  FF2.7
0493E:  BSF    1B.7
04940:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04942:  CLRF   xF9
04944:  MOVFF  67F,6F8
04948:  CLRF   xFB
0494A:  MOVLW  2F
0494C:  MOVWF  xFA
0494E:  MOVLB  0
04950:  CALL   035E
04954:  BTFSC  1B.7
04956:  BSF    FF2.7
04958:  MOVF   01,W
0495A:  ADDLW  4C
0495C:  MOVLB  6
0495E:  MOVWF  x81
04960:  MOVLW  01
04962:  ADDWFC 02,W
04964:  MOVWF  x82
04966:  MOVLW  01
04968:  ADDWF  x81,W
0496A:  MOVWF  01
0496C:  MOVLW  00
0496E:  ADDWFC x82,W
04970:  MOVWF  03
04972:  MOVF   01,W
04974:  ADDLW  3E
04976:  MOVWF  01
04978:  MOVLW  01
0497A:  ADDWFC 03,F
0497C:  MOVF   01,W
0497E:  ADDLW  2A
04980:  MOVWF  FE9
04982:  MOVLW  00
04984:  ADDWFC 03,W
04986:  MOVWF  FEA
04988:  CLRF   FEF
0498A:  CLRF   1B
0498C:  BTFSC  FF2.7
0498E:  BSF    1B.7
04990:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
04992:  CLRF   xF9
04994:  MOVFF  67F,6F8
04998:  CLRF   xFB
0499A:  MOVLW  2F
0499C:  MOVWF  xFA
0499E:  MOVLB  0
049A0:  CALL   035E
049A4:  BTFSC  1B.7
049A6:  BSF    FF2.7
049A8:  MOVF   01,W
049AA:  ADDLW  4C
049AC:  MOVLB  6
049AE:  MOVWF  x81
049B0:  MOVLW  01
049B2:  ADDWFC 02,W
049B4:  MOVWF  x82
049B6:  MOVLW  01
049B8:  ADDWF  x81,W
049BA:  MOVWF  01
049BC:  MOVLW  00
049BE:  ADDWFC x82,W
049C0:  MOVWF  03
049C2:  MOVF   01,W
049C4:  ADDLW  3E
049C6:  MOVWF  01
049C8:  MOVLW  01
049CA:  ADDWFC 03,F
049CC:  MOVF   01,W
049CE:  ADDLW  2D
049D0:  MOVWF  FE9
049D2:  MOVLW  00
049D4:  ADDWFC 03,W
049D6:  MOVWF  FEA
049D8:  MOVLW  01
049DA:  MOVWF  FEF
049DC:  CLRF   1B
049DE:  BTFSC  FF2.7
049E0:  BSF    1B.7
049E2:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
049E4:  CLRF   xF9
049E6:  MOVFF  67F,6F8
049EA:  CLRF   xFB
049EC:  MOVLW  2F
049EE:  MOVWF  xFA
049F0:  MOVLB  0
049F2:  CALL   035E
049F6:  BTFSC  1B.7
049F8:  BSF    FF2.7
049FA:  MOVF   01,W
049FC:  ADDLW  4C
049FE:  MOVLB  6
04A00:  MOVWF  x81
04A02:  MOVLW  01
04A04:  ADDWFC 02,W
04A06:  MOVWF  x82
04A08:  MOVLW  01
04A0A:  ADDWF  x81,W
04A0C:  MOVWF  01
04A0E:  MOVLW  00
04A10:  ADDWFC x82,W
04A12:  MOVWF  03
04A14:  MOVF   01,W
04A16:  ADDLW  3E
04A18:  MOVWF  01
04A1A:  MOVLW  01
04A1C:  ADDWFC 03,F
04A1E:  MOVF   01,W
04A20:  ADDLW  29
04A22:  MOVWF  FE9
04A24:  MOVLW  00
04A26:  ADDWFC 03,W
04A28:  MOVWF  FEA
04A2A:  BCF    FD8.0
04A2C:  RLCF   FEF,W
04A2E:  CLRF   03
04A30:  MOVLB  0
04A32:  CALL   0172
04A36:  TBLRD*+
04A38:  MOVFF  FF5,03
04A3C:  MOVLB  5
04A3E:  ANDWF  x7F,F
04A40:  MOVF   03,W
04A42:  ANDWF  x80,F
04A44:  MOVLB  6
04A46:  CLRF   1B
04A48:  BTFSC  FF2.7
04A4A:  BSF    1B.7
04A4C:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04A4E:  CLRF   xF9
04A50:  MOVFF  67F,6F8
04A54:  CLRF   xFB
04A56:  MOVLW  2F
04A58:  MOVWF  xFA
04A5A:  MOVLB  0
04A5C:  CALL   035E
04A60:  BTFSC  1B.7
04A62:  BSF    FF2.7
04A64:  MOVF   01,W
04A66:  ADDLW  4C
04A68:  MOVLB  6
04A6A:  MOVWF  x81
04A6C:  MOVLW  01
04A6E:  ADDWFC 02,W
04A70:  MOVWF  x82
04A72:  MOVLW  01
04A74:  ADDWF  x81,W
04A76:  MOVWF  01
04A78:  MOVLW  00
04A7A:  ADDWFC x82,W
04A7C:  MOVWF  03
04A7E:  MOVF   01,W
04A80:  ADDLW  3E
04A82:  MOVWF  01
04A84:  MOVLW  01
04A86:  ADDWFC 03,F
04A88:  MOVF   01,W
04A8A:  ADDLW  13
04A8C:  MOVWF  FE9
04A8E:  MOVLW  00
04A90:  ADDWFC 03,W
04A92:  MOVWF  FEA
04A94:  BCF    FEF.0
04A96:  CLRF   1B
04A98:  BTFSC  FF2.7
04A9A:  BSF    1B.7
04A9C:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
04A9E:  CLRF   xF9
04AA0:  MOVFF  67F,6F8
04AA4:  CLRF   xFB
04AA6:  MOVLW  2F
04AA8:  MOVWF  xFA
04AAA:  MOVLB  0
04AAC:  CALL   035E
04AB0:  BTFSC  1B.7
04AB2:  BSF    FF2.7
04AB4:  MOVF   01,W
04AB6:  ADDLW  4C
04AB8:  MOVLB  6
04ABA:  MOVWF  x81
04ABC:  MOVLW  01
04ABE:  ADDWFC 02,W
04AC0:  MOVWF  x82
04AC2:  MOVLW  01
04AC4:  ADDWF  x81,W
04AC6:  MOVWF  01
04AC8:  MOVLW  00
04ACA:  ADDWFC x82,W
04ACC:  MOVWF  03
04ACE:  MOVF   01,W
04AD0:  ADDLW  3E
04AD2:  MOVWF  01
04AD4:  MOVLW  01
04AD6:  ADDWFC 03,F
04AD8:  MOVF   01,W
04ADA:  ADDLW  1D
04ADC:  MOVWF  FE9
04ADE:  MOVLW  00
04AE0:  ADDWFC 03,W
04AE2:  MOVWF  FEA
04AE4:  BTFSS  FEF.0
04AE6:  BRA    4D42
04AE8:  CLRF   1B
04AEA:  BTFSC  FF2.7
04AEC:  BSF    1B.7
04AEE:  BCF    FF2.7
04AF0:  CLRF   xF9
04AF2:  MOVFF  67F,6F8
04AF6:  CLRF   xFB
04AF8:  MOVLW  2F
04AFA:  MOVWF  xFA
04AFC:  MOVLB  0
04AFE:  CALL   035E
04B02:  BTFSC  1B.7
04B04:  BSF    FF2.7
04B06:  MOVF   01,W
04B08:  ADDLW  4C
04B0A:  MOVLB  6
04B0C:  MOVWF  x83
04B0E:  MOVLW  01
04B10:  ADDWFC 02,W
04B12:  MOVWF  x84
04B14:  MOVLW  01
04B16:  ADDWF  x83,W
04B18:  MOVWF  01
04B1A:  MOVLW  00
04B1C:  ADDWFC x84,W
04B1E:  MOVWF  03
04B20:  MOVF   01,W
04B22:  ADDLW  3E
04B24:  MOVWF  01
04B26:  MOVLW  01
04B28:  ADDWFC 03,F
04B2A:  MOVF   01,W
04B2C:  ADDLW  2D
04B2E:  MOVWF  FE9
04B30:  MOVLW  00
04B32:  ADDWFC 03,W
04B34:  MOVWF  FEA
04B36:  MOVF   FEF,W
04B38:  SUBLW  04
04B3A:  BZ    4B92
04B3C:  CLRF   1B
04B3E:  BTFSC  FF2.7
04B40:  BSF    1B.7
04B42:  BCF    FF2.7
04B44:  CLRF   xF9
04B46:  MOVFF  67F,6F8
04B4A:  CLRF   xFB
04B4C:  MOVLW  2F
04B4E:  MOVWF  xFA
04B50:  MOVLB  0
04B52:  CALL   035E
04B56:  BTFSC  1B.7
04B58:  BSF    FF2.7
04B5A:  MOVF   01,W
04B5C:  ADDLW  4C
04B5E:  MOVLB  6
04B60:  MOVWF  x85
04B62:  MOVLW  01
04B64:  ADDWFC 02,W
04B66:  MOVWF  x86
04B68:  MOVLW  01
04B6A:  ADDWF  x85,W
04B6C:  MOVWF  01
04B6E:  MOVLW  00
04B70:  ADDWFC x86,W
04B72:  MOVWF  03
04B74:  MOVF   01,W
04B76:  ADDLW  3E
04B78:  MOVWF  01
04B7A:  MOVLW  01
04B7C:  ADDWFC 03,F
04B7E:  MOVF   01,W
04B80:  ADDLW  2D
04B82:  MOVWF  FE9
04B84:  MOVLW  00
04B86:  ADDWFC 03,W
04B88:  MOVWF  FEA
04B8A:  MOVF   FEF,W
04B8C:  SUBLW  02
04B8E:  BTFSS  FD8.2
04B90:  BRA    4D42
04B92:  CLRF   1B
04B94:  BTFSC  FF2.7
04B96:  BSF    1B.7
04B98:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
04B9A:  CLRF   xF9
04B9C:  MOVFF  67F,6F8
04BA0:  CLRF   xFB
04BA2:  MOVLW  2F
04BA4:  MOVWF  xFA
04BA6:  MOVLB  0
04BA8:  CALL   035E
04BAC:  BTFSC  1B.7
04BAE:  BSF    FF2.7
04BB0:  MOVF   01,W
04BB2:  ADDLW  4C
04BB4:  MOVLB  6
04BB6:  MOVWF  x81
04BB8:  MOVLW  01
04BBA:  ADDWFC 02,W
04BBC:  MOVWF  x82
04BBE:  MOVLW  01
04BC0:  ADDWF  x81,W
04BC2:  MOVWF  01
04BC4:  MOVLW  00
04BC6:  ADDWFC x82,W
04BC8:  MOVWF  03
04BCA:  MOVF   01,W
04BCC:  ADDLW  3E
04BCE:  MOVWF  01
04BD0:  MOVLW  01
04BD2:  ADDWFC 03,F
04BD4:  MOVF   01,W
04BD6:  ADDLW  1C
04BD8:  MOVWF  FE9
04BDA:  MOVLW  00
04BDC:  ADDWFC 03,W
04BDE:  MOVWF  FEA
04BE0:  MOVF   FEF,F
04BE2:  BTFSC  FD8.2
04BE4:  BRA    4CF2
04BE6:  CLRF   1B
04BE8:  BTFSC  FF2.7
04BEA:  BSF    1B.7
04BEC:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04BEE:  CLRF   xF9
04BF0:  MOVFF  67F,6F8
04BF4:  CLRF   xFB
04BF6:  MOVLW  2F
04BF8:  MOVWF  xFA
04BFA:  MOVLB  0
04BFC:  CALL   035E
04C00:  BTFSC  1B.7
04C02:  BSF    FF2.7
04C04:  MOVF   01,W
04C06:  ADDLW  4C
04C08:  MOVLB  6
04C0A:  MOVWF  x81
04C0C:  MOVLW  01
04C0E:  ADDWFC 02,W
04C10:  MOVWF  x82
04C12:  MOVLW  01
04C14:  ADDWF  x81,W
04C16:  MOVWF  01
04C18:  MOVLW  00
04C1A:  ADDWFC x82,W
04C1C:  MOVWF  03
04C1E:  MOVF   01,W
04C20:  ADDLW  3E
04C22:  MOVWF  01
04C24:  MOVLW  01
04C26:  ADDWFC 03,F
04C28:  MOVF   01,W
04C2A:  ADDLW  2A
04C2C:  MOVWF  FE9
04C2E:  MOVLW  00
04C30:  ADDWFC 03,W
04C32:  MOVWF  FEA
04C34:  CLRF   FEF
04C36:  CLRF   1B
04C38:  BTFSC  FF2.7
04C3A:  BSF    1B.7
04C3C:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
04C3E:  CLRF   xF9
04C40:  MOVFF  67F,6F8
04C44:  CLRF   xFB
04C46:  MOVLW  2F
04C48:  MOVWF  xFA
04C4A:  MOVLB  0
04C4C:  CALL   035E
04C50:  BTFSC  1B.7
04C52:  BSF    FF2.7
04C54:  MOVF   01,W
04C56:  ADDLW  4C
04C58:  MOVLB  6
04C5A:  MOVWF  x81
04C5C:  MOVLW  01
04C5E:  ADDWFC 02,W
04C60:  MOVWF  x82
04C62:  MOVLW  01
04C64:  ADDWF  x81,W
04C66:  MOVWF  01
04C68:  MOVLW  00
04C6A:  ADDWFC x82,W
04C6C:  MOVWF  03
04C6E:  MOVF   01,W
04C70:  ADDLW  3E
04C72:  MOVWF  01
04C74:  MOVLW  01
04C76:  ADDWFC 03,F
04C78:  MOVF   01,W
04C7A:  ADDLW  2D
04C7C:  MOVWF  FE9
04C7E:  MOVLW  00
04C80:  ADDWFC 03,W
04C82:  MOVWF  FEA
04C84:  MOVLW  02
04C86:  MOVWF  FEF
04C88:  CLRF   1B
04C8A:  BTFSC  FF2.7
04C8C:  BSF    1B.7
04C8E:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04C90:  CLRF   xF9
04C92:  MOVFF  67F,6F8
04C96:  CLRF   xFB
04C98:  MOVLW  2F
04C9A:  MOVWF  xFA
04C9C:  MOVLB  0
04C9E:  CALL   035E
04CA2:  BTFSC  1B.7
04CA4:  BSF    FF2.7
04CA6:  MOVF   01,W
04CA8:  ADDLW  4C
04CAA:  MOVLB  6
04CAC:  MOVWF  x81
04CAE:  MOVLW  01
04CB0:  ADDWFC 02,W
04CB2:  MOVWF  x82
04CB4:  MOVLW  01
04CB6:  ADDWF  x81,W
04CB8:  MOVWF  01
04CBA:  MOVLW  00
04CBC:  ADDWFC x82,W
04CBE:  MOVWF  03
04CC0:  MOVF   01,W
04CC2:  ADDLW  3E
04CC4:  MOVWF  01
04CC6:  MOVLW  01
04CC8:  ADDWFC 03,F
04CCA:  MOVF   01,W
04CCC:  ADDLW  28
04CCE:  MOVWF  FE9
04CD0:  MOVLW  00
04CD2:  ADDWFC 03,W
04CD4:  MOVWF  FEA
04CD6:  BCF    FD8.0
04CD8:  RLCF   FEF,W
04CDA:  CLRF   03
04CDC:  MOVLB  0
04CDE:  CALL   0172
04CE2:  TBLRD*+
04CE4:  MOVFF  FF5,03
04CE8:  MOVLB  5
04CEA:  ANDWF  x7F,F
04CEC:  MOVF   03,W
04CEE:  ANDWF  x80,F
04CF0:  MOVLB  6
04CF2:  CLRF   1B
04CF4:  BTFSC  FF2.7
04CF6:  BSF    1B.7
04CF8:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
04CFA:  CLRF   xF9
04CFC:  MOVFF  67F,6F8
04D00:  CLRF   xFB
04D02:  MOVLW  2F
04D04:  MOVWF  xFA
04D06:  MOVLB  0
04D08:  CALL   035E
04D0C:  BTFSC  1B.7
04D0E:  BSF    FF2.7
04D10:  MOVF   01,W
04D12:  ADDLW  4C
04D14:  MOVLB  6
04D16:  MOVWF  x81
04D18:  MOVLW  01
04D1A:  ADDWFC 02,W
04D1C:  MOVWF  x82
04D1E:  MOVLW  01
04D20:  ADDWF  x81,W
04D22:  MOVWF  01
04D24:  MOVLW  00
04D26:  ADDWFC x82,W
04D28:  MOVWF  03
04D2A:  MOVF   01,W
04D2C:  ADDLW  3E
04D2E:  MOVWF  01
04D30:  MOVLW  01
04D32:  ADDWFC 03,F
04D34:  MOVF   01,W
04D36:  ADDLW  1D
04D38:  MOVWF  FE9
04D3A:  MOVLW  00
04D3C:  ADDWFC 03,W
04D3E:  MOVWF  FEA
04D40:  BCF    FEF.0
04D42:  CLRF   1B
04D44:  BTFSC  FF2.7
04D46:  BSF    1B.7
04D48:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
04D4A:  CLRF   xF9
04D4C:  MOVFF  67F,6F8
04D50:  CLRF   xFB
04D52:  MOVLW  2F
04D54:  MOVWF  xFA
04D56:  MOVLB  0
04D58:  CALL   035E
04D5C:  BTFSC  1B.7
04D5E:  BSF    FF2.7
04D60:  MOVF   01,W
04D62:  ADDLW  4C
04D64:  MOVLB  6
04D66:  MOVWF  x81
04D68:  MOVLW  01
04D6A:  ADDWFC 02,W
04D6C:  MOVWF  x82
04D6E:  MOVLW  01
04D70:  ADDWF  x81,W
04D72:  MOVWF  01
04D74:  MOVLW  00
04D76:  ADDWFC x82,W
04D78:  MOVWF  03
04D7A:  MOVF   01,W
04D7C:  ADDLW  3E
04D7E:  MOVWF  01
04D80:  MOVLW  01
04D82:  ADDWFC 03,F
04D84:  MOVF   01,W
04D86:  ADDLW  27
04D88:  MOVWF  FE9
04D8A:  MOVLW  00
04D8C:  ADDWFC 03,W
04D8E:  MOVWF  FEA
04D90:  BTFSS  FEF.0
04D92:  BRA    4FEE
04D94:  CLRF   1B
04D96:  BTFSC  FF2.7
04D98:  BSF    1B.7
04D9A:  BCF    FF2.7
04D9C:  CLRF   xF9
04D9E:  MOVFF  67F,6F8
04DA2:  CLRF   xFB
04DA4:  MOVLW  2F
04DA6:  MOVWF  xFA
04DA8:  MOVLB  0
04DAA:  CALL   035E
04DAE:  BTFSC  1B.7
04DB0:  BSF    FF2.7
04DB2:  MOVF   01,W
04DB4:  ADDLW  4C
04DB6:  MOVLB  6
04DB8:  MOVWF  x83
04DBA:  MOVLW  01
04DBC:  ADDWFC 02,W
04DBE:  MOVWF  x84
04DC0:  MOVLW  01
04DC2:  ADDWF  x83,W
04DC4:  MOVWF  01
04DC6:  MOVLW  00
04DC8:  ADDWFC x84,W
04DCA:  MOVWF  03
04DCC:  MOVF   01,W
04DCE:  ADDLW  3E
04DD0:  MOVWF  01
04DD2:  MOVLW  01
04DD4:  ADDWFC 03,F
04DD6:  MOVF   01,W
04DD8:  ADDLW  2D
04DDA:  MOVWF  FE9
04DDC:  MOVLW  00
04DDE:  ADDWFC 03,W
04DE0:  MOVWF  FEA
04DE2:  MOVF   FEF,W
04DE4:  SUBLW  04
04DE6:  BZ    4E3E
04DE8:  CLRF   1B
04DEA:  BTFSC  FF2.7
04DEC:  BSF    1B.7
04DEE:  BCF    FF2.7
04DF0:  CLRF   xF9
04DF2:  MOVFF  67F,6F8
04DF6:  CLRF   xFB
04DF8:  MOVLW  2F
04DFA:  MOVWF  xFA
04DFC:  MOVLB  0
04DFE:  CALL   035E
04E02:  BTFSC  1B.7
04E04:  BSF    FF2.7
04E06:  MOVF   01,W
04E08:  ADDLW  4C
04E0A:  MOVLB  6
04E0C:  MOVWF  x85
04E0E:  MOVLW  01
04E10:  ADDWFC 02,W
04E12:  MOVWF  x86
04E14:  MOVLW  01
04E16:  ADDWF  x85,W
04E18:  MOVWF  01
04E1A:  MOVLW  00
04E1C:  ADDWFC x86,W
04E1E:  MOVWF  03
04E20:  MOVF   01,W
04E22:  ADDLW  3E
04E24:  MOVWF  01
04E26:  MOVLW  01
04E28:  ADDWFC 03,F
04E2A:  MOVF   01,W
04E2C:  ADDLW  2D
04E2E:  MOVWF  FE9
04E30:  MOVLW  00
04E32:  ADDWFC 03,W
04E34:  MOVWF  FEA
04E36:  MOVF   FEF,W
04E38:  SUBLW  03
04E3A:  BTFSS  FD8.2
04E3C:  BRA    4FEE
04E3E:  CLRF   1B
04E40:  BTFSC  FF2.7
04E42:  BSF    1B.7
04E44:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
04E46:  CLRF   xF9
04E48:  MOVFF  67F,6F8
04E4C:  CLRF   xFB
04E4E:  MOVLW  2F
04E50:  MOVWF  xFA
04E52:  MOVLB  0
04E54:  CALL   035E
04E58:  BTFSC  1B.7
04E5A:  BSF    FF2.7
04E5C:  MOVF   01,W
04E5E:  ADDLW  4C
04E60:  MOVLB  6
04E62:  MOVWF  x81
04E64:  MOVLW  01
04E66:  ADDWFC 02,W
04E68:  MOVWF  x82
04E6A:  MOVLW  01
04E6C:  ADDWF  x81,W
04E6E:  MOVWF  01
04E70:  MOVLW  00
04E72:  ADDWFC x82,W
04E74:  MOVWF  03
04E76:  MOVF   01,W
04E78:  ADDLW  3E
04E7A:  MOVWF  01
04E7C:  MOVLW  01
04E7E:  ADDWFC 03,F
04E80:  MOVF   01,W
04E82:  ADDLW  26
04E84:  MOVWF  FE9
04E86:  MOVLW  00
04E88:  ADDWFC 03,W
04E8A:  MOVWF  FEA
04E8C:  MOVF   FEF,F
04E8E:  BTFSC  FD8.2
04E90:  BRA    4F9E
04E92:  CLRF   1B
04E94:  BTFSC  FF2.7
04E96:  BSF    1B.7
04E98:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04E9A:  CLRF   xF9
04E9C:  MOVFF  67F,6F8
04EA0:  CLRF   xFB
04EA2:  MOVLW  2F
04EA4:  MOVWF  xFA
04EA6:  MOVLB  0
04EA8:  CALL   035E
04EAC:  BTFSC  1B.7
04EAE:  BSF    FF2.7
04EB0:  MOVF   01,W
04EB2:  ADDLW  4C
04EB4:  MOVLB  6
04EB6:  MOVWF  x81
04EB8:  MOVLW  01
04EBA:  ADDWFC 02,W
04EBC:  MOVWF  x82
04EBE:  MOVLW  01
04EC0:  ADDWF  x81,W
04EC2:  MOVWF  01
04EC4:  MOVLW  00
04EC6:  ADDWFC x82,W
04EC8:  MOVWF  03
04ECA:  MOVF   01,W
04ECC:  ADDLW  3E
04ECE:  MOVWF  01
04ED0:  MOVLW  01
04ED2:  ADDWFC 03,F
04ED4:  MOVF   01,W
04ED6:  ADDLW  2A
04ED8:  MOVWF  FE9
04EDA:  MOVLW  00
04EDC:  ADDWFC 03,W
04EDE:  MOVWF  FEA
04EE0:  CLRF   FEF
04EE2:  CLRF   1B
04EE4:  BTFSC  FF2.7
04EE6:  BSF    1B.7
04EE8:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
04EEA:  CLRF   xF9
04EEC:  MOVFF  67F,6F8
04EF0:  CLRF   xFB
04EF2:  MOVLW  2F
04EF4:  MOVWF  xFA
04EF6:  MOVLB  0
04EF8:  CALL   035E
04EFC:  BTFSC  1B.7
04EFE:  BSF    FF2.7
04F00:  MOVF   01,W
04F02:  ADDLW  4C
04F04:  MOVLB  6
04F06:  MOVWF  x81
04F08:  MOVLW  01
04F0A:  ADDWFC 02,W
04F0C:  MOVWF  x82
04F0E:  MOVLW  01
04F10:  ADDWF  x81,W
04F12:  MOVWF  01
04F14:  MOVLW  00
04F16:  ADDWFC x82,W
04F18:  MOVWF  03
04F1A:  MOVF   01,W
04F1C:  ADDLW  3E
04F1E:  MOVWF  01
04F20:  MOVLW  01
04F22:  ADDWFC 03,F
04F24:  MOVF   01,W
04F26:  ADDLW  2D
04F28:  MOVWF  FE9
04F2A:  MOVLW  00
04F2C:  ADDWFC 03,W
04F2E:  MOVWF  FEA
04F30:  MOVLW  03
04F32:  MOVWF  FEF
04F34:  CLRF   1B
04F36:  BTFSC  FF2.7
04F38:  BSF    1B.7
04F3A:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04F3C:  CLRF   xF9
04F3E:  MOVFF  67F,6F8
04F42:  CLRF   xFB
04F44:  MOVLW  2F
04F46:  MOVWF  xFA
04F48:  MOVLB  0
04F4A:  CALL   035E
04F4E:  BTFSC  1B.7
04F50:  BSF    FF2.7
04F52:  MOVF   01,W
04F54:  ADDLW  4C
04F56:  MOVLB  6
04F58:  MOVWF  x81
04F5A:  MOVLW  01
04F5C:  ADDWFC 02,W
04F5E:  MOVWF  x82
04F60:  MOVLW  01
04F62:  ADDWF  x81,W
04F64:  MOVWF  01
04F66:  MOVLW  00
04F68:  ADDWFC x82,W
04F6A:  MOVWF  03
04F6C:  MOVF   01,W
04F6E:  ADDLW  3E
04F70:  MOVWF  01
04F72:  MOVLW  01
04F74:  ADDWFC 03,F
04F76:  MOVF   01,W
04F78:  ADDLW  29
04F7A:  MOVWF  FE9
04F7C:  MOVLW  00
04F7E:  ADDWFC 03,W
04F80:  MOVWF  FEA
04F82:  BCF    FD8.0
04F84:  RLCF   FEF,W
04F86:  CLRF   03
04F88:  MOVLB  0
04F8A:  CALL   0172
04F8E:  TBLRD*+
04F90:  MOVFF  FF5,03
04F94:  MOVLB  5
04F96:  ANDWF  x7F,F
04F98:  MOVF   03,W
04F9A:  ANDWF  x80,F
04F9C:  MOVLB  6
04F9E:  CLRF   1B
04FA0:  BTFSC  FF2.7
04FA2:  BSF    1B.7
04FA4:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
04FA6:  CLRF   xF9
04FA8:  MOVFF  67F,6F8
04FAC:  CLRF   xFB
04FAE:  MOVLW  2F
04FB0:  MOVWF  xFA
04FB2:  MOVLB  0
04FB4:  CALL   035E
04FB8:  BTFSC  1B.7
04FBA:  BSF    FF2.7
04FBC:  MOVF   01,W
04FBE:  ADDLW  4C
04FC0:  MOVLB  6
04FC2:  MOVWF  x81
04FC4:  MOVLW  01
04FC6:  ADDWFC 02,W
04FC8:  MOVWF  x82
04FCA:  MOVLW  01
04FCC:  ADDWF  x81,W
04FCE:  MOVWF  01
04FD0:  MOVLW  00
04FD2:  ADDWFC x82,W
04FD4:  MOVWF  03
04FD6:  MOVF   01,W
04FD8:  ADDLW  3E
04FDA:  MOVWF  01
04FDC:  MOVLW  01
04FDE:  ADDWFC 03,F
04FE0:  MOVF   01,W
04FE2:  ADDLW  27
04FE4:  MOVWF  FE9
04FE6:  MOVLW  00
04FE8:  ADDWFC 03,W
04FEA:  MOVWF  FEA
04FEC:  BCF    FEF.0
....................             } 
....................             
....................             break; 
04FEE:  MOVLB  0
04FF0:  BRA    4FF2
....................    } 
....................    } 
04FF2:  MOVLB  6
04FF4:  INCF   x7F,F
04FF6:  GOTO   3CAE
....................    if(update_dimmers) 
04FFA:  BTFSS  x80.0
04FFC:  BRA    5006
....................       org(); 
04FFE:  MOVLB  0
05000:  CALL   34E0
05004:  MOVLB  6
.................... } 
05006:  MOVLB  0
05008:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
050EC:  MOVLB  6
050EE:  CLRF   x92
050F0:  MOVF   x92,W
050F2:  SUBLW  07
050F4:  BNC   5114
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
050F6:  CLRF   03
050F8:  MOVF   x92,W
050FA:  ADDWF  x8F,W
050FC:  MOVWF  FE9
050FE:  MOVF   x90,W
05100:  ADDWFC 03,W
05102:  MOVWF  FEA
05104:  MOVF   x91,W
05106:  SUBWF  FEF,W
05108:  BNZ   5110
0510A:  MOVLW  01
0510C:  MOVWF  01
0510E:  BRA    5118
....................    } 
05110:  INCF   x92,F
05112:  BRA    50F0
....................  
....................    return false; 
05114:  MOVLW  00
05116:  MOVWF  01
.................... } 
05118:  MOVLB  0
0511A:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
0511C:  MOVLB  6
0511E:  CLRF   x8A
05120:  MOVLB  1
05122:  MOVF   x3F,W
05124:  MOVLB  6
05126:  SUBWF  x8A,W
05128:  BTFSC  FD8.0
0512A:  GOTO   5B0A
0512E:  CLRF   1B
05130:  BTFSC  FF2.7
05132:  BSF    1B.7
05134:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
05136:  CLRF   xF9
05138:  MOVFF  68A,6F8
0513C:  CLRF   xFB
0513E:  MOVLW  2F
05140:  MOVWF  xFA
05142:  MOVLB  0
05144:  CALL   035E
05148:  BTFSC  1B.7
0514A:  BSF    FF2.7
0514C:  MOVFF  02,03
05150:  MOVF   01,W
05152:  ADDLW  8A
05154:  MOVWF  01
05156:  MOVLW  02
05158:  ADDWFC 03,F
0515A:  MOVFF  01,FE9
0515E:  MOVFF  03,FEA
05162:  MOVF   FEF,W
05164:  XORLW  65
05166:  BZ    5178
05168:  XORLW  01
0516A:  BTFSC  FD8.2
0516C:  BRA    54A4
0516E:  XORLW  02
05170:  BTFSC  FD8.2
05172:  BRA    56BE
05174:  GOTO   5B00
....................          case dimmer: 
05178:  CLRF   1B
0517A:  BTFSC  FF2.7
0517C:  BSF    1B.7
0517E:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
05180:  MOVLB  6
05182:  CLRF   xF9
05184:  MOVFF  68A,6F8
05188:  CLRF   xFB
0518A:  MOVLW  2F
0518C:  MOVWF  xFA
0518E:  MOVLB  0
05190:  CALL   035E
05194:  BTFSC  1B.7
05196:  BSF    FF2.7
05198:  MOVF   01,W
0519A:  ADDLW  4C
0519C:  MOVLB  6
0519E:  MOVWF  x8B
051A0:  MOVLW  01
051A2:  ADDWFC 02,W
051A4:  MOVWF  x8C
051A6:  MOVLW  01
051A8:  ADDWF  x8B,W
051AA:  MOVWF  01
051AC:  MOVLW  00
051AE:  ADDWFC x8C,W
051B0:  MOVWF  03
051B2:  MOVF   01,W
051B4:  ADDLW  3E
051B6:  MOVWF  01
051B8:  MOVLW  01
051BA:  ADDWFC 03,F
051BC:  MOVF   01,W
051BE:  ADDLW  14
051C0:  MOVWF  01
051C2:  MOVLW  00
051C4:  ADDWFC 03,F
051C6:  MOVFF  01,68D
051CA:  MOVFF  03,68E
051CE:  MOVFF  03,690
051D2:  MOVFF  01,68F
051D6:  MOVFF  688,691
051DA:  MOVLB  0
051DC:  RCALL  50EC
051DE:  MOVF   01,F
051E0:  BZ    528A
051E2:  CLRF   1B
051E4:  BTFSC  FF2.7
051E6:  BSF    1B.7
051E8:  BCF    FF2.7
....................          { 
....................           //  printf("DIM"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
051EA:  MOVLB  6
051EC:  CLRF   xF9
051EE:  MOVFF  68A,6F8
051F2:  CLRF   xFB
051F4:  MOVLW  2F
051F6:  MOVWF  xFA
051F8:  MOVLB  0
051FA:  CALL   035E
051FE:  BTFSC  1B.7
05200:  BSF    FF2.7
05202:  MOVF   01,W
05204:  ADDLW  4C
05206:  MOVLB  6
05208:  MOVWF  x8B
0520A:  MOVLW  01
0520C:  ADDWFC 02,W
0520E:  MOVWF  x8C
05210:  MOVLW  01
05212:  ADDWF  x8B,W
05214:  MOVWF  01
05216:  MOVLW  00
05218:  ADDWFC x8C,W
0521A:  MOVWF  03
0521C:  MOVF   01,W
0521E:  ADDLW  3E
05220:  MOVWF  01
05222:  MOVLW  01
05224:  ADDWFC 03,F
05226:  MOVF   01,W
05228:  ADDLW  1C
0522A:  MOVWF  FE9
0522C:  MOVLW  00
0522E:  ADDWFC 03,W
05230:  MOVWF  FEA
05232:  MOVFF  689,FEF
05236:  CLRF   1B
05238:  BTFSC  FF2.7
0523A:  BSF    1B.7
0523C:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
0523E:  CLRF   xF9
05240:  MOVFF  68A,6F8
05244:  CLRF   xFB
05246:  MOVLW  2F
05248:  MOVWF  xFA
0524A:  MOVLB  0
0524C:  CALL   035E
05250:  BTFSC  1B.7
05252:  BSF    FF2.7
05254:  MOVF   01,W
05256:  ADDLW  4C
05258:  MOVLB  6
0525A:  MOVWF  x8B
0525C:  MOVLW  01
0525E:  ADDWFC 02,W
05260:  MOVWF  x8C
05262:  MOVLW  01
05264:  ADDWF  x8B,W
05266:  MOVWF  01
05268:  MOVLW  00
0526A:  ADDWFC x8C,W
0526C:  MOVWF  03
0526E:  MOVF   01,W
05270:  ADDLW  3E
05272:  MOVWF  01
05274:  MOVLW  01
05276:  ADDWFC 03,F
05278:  MOVF   01,W
0527A:  ADDLW  1D
0527C:  MOVWF  FE9
0527E:  MOVLW  00
05280:  ADDWFC 03,W
05282:  MOVWF  FEA
05284:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
05286:  BRA    54A0
05288:  MOVLB  0
0528A:  CLRF   1B
0528C:  BTFSC  FF2.7
0528E:  BSF    1B.7
05290:  BCF    FF2.7
05292:  MOVLB  6
05294:  CLRF   xF9
05296:  MOVFF  68A,6F8
0529A:  CLRF   xFB
0529C:  MOVLW  2F
0529E:  MOVWF  xFA
052A0:  MOVLB  0
052A2:  CALL   035E
052A6:  BTFSC  1B.7
052A8:  BSF    FF2.7
052AA:  MOVF   01,W
052AC:  ADDLW  4C
052AE:  MOVLB  6
052B0:  MOVWF  x8B
052B2:  MOVLW  01
052B4:  ADDWFC 02,W
052B6:  MOVWF  x8C
052B8:  MOVLW  01
052BA:  ADDWF  x8B,W
052BC:  MOVWF  01
052BE:  MOVLW  00
052C0:  ADDWFC x8C,W
052C2:  MOVWF  03
052C4:  MOVF   01,W
052C6:  ADDLW  3E
052C8:  MOVWF  01
052CA:  MOVLW  01
052CC:  ADDWFC 03,F
052CE:  MOVFF  01,68D
052D2:  MOVFF  03,68E
052D6:  MOVFF  03,690
052DA:  MOVFF  01,68F
052DE:  MOVFF  688,691
052E2:  MOVLB  0
052E4:  RCALL  50EC
052E6:  MOVF   01,F
052E8:  BZ    5392
052EA:  CLRF   1B
052EC:  BTFSC  FF2.7
052EE:  BSF    1B.7
052F0:  BCF    FF2.7
....................          { 
....................         // printf("DIM ON"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
052F2:  MOVLB  6
052F4:  CLRF   xF9
052F6:  MOVFF  68A,6F8
052FA:  CLRF   xFB
052FC:  MOVLW  2F
052FE:  MOVWF  xFA
05300:  MOVLB  0
05302:  CALL   035E
05306:  BTFSC  1B.7
05308:  BSF    FF2.7
0530A:  MOVF   01,W
0530C:  ADDLW  4C
0530E:  MOVLB  6
05310:  MOVWF  x8B
05312:  MOVLW  01
05314:  ADDWFC 02,W
05316:  MOVWF  x8C
05318:  MOVLW  01
0531A:  ADDWF  x8B,W
0531C:  MOVWF  01
0531E:  MOVLW  00
05320:  ADDWFC x8C,W
05322:  MOVWF  03
05324:  MOVF   01,W
05326:  ADDLW  3E
05328:  MOVWF  01
0532A:  MOVLW  01
0532C:  ADDWFC 03,F
0532E:  MOVF   01,W
05330:  ADDLW  08
05332:  MOVWF  FE9
05334:  MOVLW  00
05336:  ADDWFC 03,W
05338:  MOVWF  FEA
0533A:  MOVFF  689,FEF
0533E:  CLRF   1B
05340:  BTFSC  FF2.7
05342:  BSF    1B.7
05344:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
05346:  CLRF   xF9
05348:  MOVFF  68A,6F8
0534C:  CLRF   xFB
0534E:  MOVLW  2F
05350:  MOVWF  xFA
05352:  MOVLB  0
05354:  CALL   035E
05358:  BTFSC  1B.7
0535A:  BSF    FF2.7
0535C:  MOVF   01,W
0535E:  ADDLW  4C
05360:  MOVLB  6
05362:  MOVWF  x8B
05364:  MOVLW  01
05366:  ADDWFC 02,W
05368:  MOVWF  x8C
0536A:  MOVLW  01
0536C:  ADDWF  x8B,W
0536E:  MOVWF  01
05370:  MOVLW  00
05372:  ADDWFC x8C,W
05374:  MOVWF  03
05376:  MOVF   01,W
05378:  ADDLW  3E
0537A:  MOVWF  01
0537C:  MOVLW  01
0537E:  ADDWFC 03,F
05380:  MOVF   01,W
05382:  ADDLW  09
05384:  MOVWF  FE9
05386:  MOVLW  00
05388:  ADDWFC 03,W
0538A:  MOVWF  FEA
0538C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
0538E:  BRA    54A0
05390:  MOVLB  0
05392:  CLRF   1B
05394:  BTFSC  FF2.7
05396:  BSF    1B.7
05398:  BCF    FF2.7
0539A:  MOVLB  6
0539C:  CLRF   xF9
0539E:  MOVFF  68A,6F8
053A2:  CLRF   xFB
053A4:  MOVLW  2F
053A6:  MOVWF  xFA
053A8:  MOVLB  0
053AA:  CALL   035E
053AE:  BTFSC  1B.7
053B0:  BSF    FF2.7
053B2:  MOVF   01,W
053B4:  ADDLW  4C
053B6:  MOVLB  6
053B8:  MOVWF  x8B
053BA:  MOVLW  01
053BC:  ADDWFC 02,W
053BE:  MOVWF  x8C
053C0:  MOVLW  01
053C2:  ADDWF  x8B,W
053C4:  MOVWF  01
053C6:  MOVLW  00
053C8:  ADDWFC x8C,W
053CA:  MOVWF  03
053CC:  MOVF   01,W
053CE:  ADDLW  3E
053D0:  MOVWF  01
053D2:  MOVLW  01
053D4:  ADDWFC 03,F
053D6:  MOVF   01,W
053D8:  ADDLW  0A
053DA:  MOVWF  01
053DC:  MOVLW  00
053DE:  ADDWFC 03,F
053E0:  MOVFF  01,68D
053E4:  MOVFF  03,68E
053E8:  MOVFF  03,690
053EC:  MOVFF  01,68F
053F0:  MOVFF  688,691
053F4:  MOVLB  0
053F6:  RCALL  50EC
053F8:  MOVF   01,F
053FA:  BZ    54A2
053FC:  CLRF   1B
053FE:  BTFSC  FF2.7
05400:  BSF    1B.7
05402:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
05404:  MOVLB  6
05406:  CLRF   xF9
05408:  MOVFF  68A,6F8
0540C:  CLRF   xFB
0540E:  MOVLW  2F
05410:  MOVWF  xFA
05412:  MOVLB  0
05414:  CALL   035E
05418:  BTFSC  1B.7
0541A:  BSF    FF2.7
0541C:  MOVF   01,W
0541E:  ADDLW  4C
05420:  MOVLB  6
05422:  MOVWF  x8B
05424:  MOVLW  01
05426:  ADDWFC 02,W
05428:  MOVWF  x8C
0542A:  MOVLW  01
0542C:  ADDWF  x8B,W
0542E:  MOVWF  01
05430:  MOVLW  00
05432:  ADDWFC x8C,W
05434:  MOVWF  03
05436:  MOVF   01,W
05438:  ADDLW  3E
0543A:  MOVWF  01
0543C:  MOVLW  01
0543E:  ADDWFC 03,F
05440:  MOVF   01,W
05442:  ADDLW  12
05444:  MOVWF  FE9
05446:  MOVLW  00
05448:  ADDWFC 03,W
0544A:  MOVWF  FEA
0544C:  MOVFF  689,FEF
05450:  CLRF   1B
05452:  BTFSC  FF2.7
05454:  BSF    1B.7
05456:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
05458:  CLRF   xF9
0545A:  MOVFF  68A,6F8
0545E:  CLRF   xFB
05460:  MOVLW  2F
05462:  MOVWF  xFA
05464:  MOVLB  0
05466:  CALL   035E
0546A:  BTFSC  1B.7
0546C:  BSF    FF2.7
0546E:  MOVF   01,W
05470:  ADDLW  4C
05472:  MOVLB  6
05474:  MOVWF  x8B
05476:  MOVLW  01
05478:  ADDWFC 02,W
0547A:  MOVWF  x8C
0547C:  MOVLW  01
0547E:  ADDWF  x8B,W
05480:  MOVWF  01
05482:  MOVLW  00
05484:  ADDWFC x8C,W
05486:  MOVWF  03
05488:  MOVF   01,W
0548A:  ADDLW  3E
0548C:  MOVWF  01
0548E:  MOVLW  01
05490:  ADDWFC 03,F
05492:  MOVF   01,W
05494:  ADDLW  13
05496:  MOVWF  FE9
05498:  MOVLW  00
0549A:  ADDWFC 03,W
0549C:  MOVWF  FEA
0549E:  BSF    FEF.0
054A0:  MOVLB  0
....................          } 
....................  
....................          break; 
054A2:  BRA    5B02
....................          case _on_off: 
054A4:  CLRF   1B
054A6:  BTFSC  FF2.7
054A8:  BSF    1B.7
054AA:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
054AC:  MOVLB  6
054AE:  CLRF   xF9
054B0:  MOVFF  68A,6F8
054B4:  CLRF   xFB
054B6:  MOVLW  2F
054B8:  MOVWF  xFA
054BA:  MOVLB  0
054BC:  CALL   035E
054C0:  BTFSC  1B.7
054C2:  BSF    FF2.7
054C4:  MOVF   01,W
054C6:  ADDLW  4C
054C8:  MOVLB  6
054CA:  MOVWF  x8B
054CC:  MOVLW  01
054CE:  ADDWFC 02,W
054D0:  MOVWF  x8C
054D2:  MOVLW  01
054D4:  ADDWF  x8B,W
054D6:  MOVWF  01
054D8:  MOVLW  00
054DA:  ADDWFC x8C,W
054DC:  MOVWF  03
054DE:  MOVF   01,W
054E0:  ADDLW  3E
054E2:  MOVWF  01
054E4:  MOVLW  01
054E6:  ADDWFC 03,F
054E8:  MOVFF  01,68D
054EC:  MOVFF  03,68E
054F0:  MOVFF  03,690
054F4:  MOVFF  01,68F
054F8:  MOVFF  688,691
054FC:  MOVLB  0
054FE:  RCALL  50EC
05500:  MOVF   01,F
05502:  BZ    55AC
05504:  CLRF   1B
05506:  BTFSC  FF2.7
05508:  BSF    1B.7
0550A:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
0550C:  MOVLB  6
0550E:  CLRF   xF9
05510:  MOVFF  68A,6F8
05514:  CLRF   xFB
05516:  MOVLW  2F
05518:  MOVWF  xFA
0551A:  MOVLB  0
0551C:  CALL   035E
05520:  BTFSC  1B.7
05522:  BSF    FF2.7
05524:  MOVF   01,W
05526:  ADDLW  4C
05528:  MOVLB  6
0552A:  MOVWF  x8B
0552C:  MOVLW  01
0552E:  ADDWFC 02,W
05530:  MOVWF  x8C
05532:  MOVLW  01
05534:  ADDWF  x8B,W
05536:  MOVWF  01
05538:  MOVLW  00
0553A:  ADDWFC x8C,W
0553C:  MOVWF  03
0553E:  MOVF   01,W
05540:  ADDLW  3E
05542:  MOVWF  01
05544:  MOVLW  01
05546:  ADDWFC 03,F
05548:  MOVF   01,W
0554A:  ADDLW  08
0554C:  MOVWF  FE9
0554E:  MOVLW  00
05550:  ADDWFC 03,W
05552:  MOVWF  FEA
05554:  MOVFF  689,FEF
05558:  CLRF   1B
0555A:  BTFSC  FF2.7
0555C:  BSF    1B.7
0555E:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
05560:  CLRF   xF9
05562:  MOVFF  68A,6F8
05566:  CLRF   xFB
05568:  MOVLW  2F
0556A:  MOVWF  xFA
0556C:  MOVLB  0
0556E:  CALL   035E
05572:  BTFSC  1B.7
05574:  BSF    FF2.7
05576:  MOVF   01,W
05578:  ADDLW  4C
0557A:  MOVLB  6
0557C:  MOVWF  x8B
0557E:  MOVLW  01
05580:  ADDWFC 02,W
05582:  MOVWF  x8C
05584:  MOVLW  01
05586:  ADDWF  x8B,W
05588:  MOVWF  01
0558A:  MOVLW  00
0558C:  ADDWFC x8C,W
0558E:  MOVWF  03
05590:  MOVF   01,W
05592:  ADDLW  3E
05594:  MOVWF  01
05596:  MOVLW  01
05598:  ADDWFC 03,F
0559A:  MOVF   01,W
0559C:  ADDLW  09
0559E:  MOVWF  FE9
055A0:  MOVLW  00
055A2:  ADDWFC 03,W
055A4:  MOVWF  FEA
055A6:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
055A8:  BRA    56BA
055AA:  MOVLB  0
055AC:  CLRF   1B
055AE:  BTFSC  FF2.7
055B0:  BSF    1B.7
055B2:  BCF    FF2.7
055B4:  MOVLB  6
055B6:  CLRF   xF9
055B8:  MOVFF  68A,6F8
055BC:  CLRF   xFB
055BE:  MOVLW  2F
055C0:  MOVWF  xFA
055C2:  MOVLB  0
055C4:  CALL   035E
055C8:  BTFSC  1B.7
055CA:  BSF    FF2.7
055CC:  MOVF   01,W
055CE:  ADDLW  4C
055D0:  MOVLB  6
055D2:  MOVWF  x8B
055D4:  MOVLW  01
055D6:  ADDWFC 02,W
055D8:  MOVWF  x8C
055DA:  MOVLW  01
055DC:  ADDWF  x8B,W
055DE:  MOVWF  01
055E0:  MOVLW  00
055E2:  ADDWFC x8C,W
055E4:  MOVWF  03
055E6:  MOVF   01,W
055E8:  ADDLW  3E
055EA:  MOVWF  01
055EC:  MOVLW  01
055EE:  ADDWFC 03,F
055F0:  MOVF   01,W
055F2:  ADDLW  0A
055F4:  MOVWF  01
055F6:  MOVLW  00
055F8:  ADDWFC 03,F
055FA:  MOVFF  01,68D
055FE:  MOVFF  03,68E
05602:  MOVFF  03,690
05606:  MOVFF  01,68F
0560A:  MOVFF  688,691
0560E:  MOVLB  0
05610:  RCALL  50EC
05612:  MOVF   01,F
05614:  BZ    56BC
05616:  CLRF   1B
05618:  BTFSC  FF2.7
0561A:  BSF    1B.7
0561C:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
0561E:  MOVLB  6
05620:  CLRF   xF9
05622:  MOVFF  68A,6F8
05626:  CLRF   xFB
05628:  MOVLW  2F
0562A:  MOVWF  xFA
0562C:  MOVLB  0
0562E:  CALL   035E
05632:  BTFSC  1B.7
05634:  BSF    FF2.7
05636:  MOVF   01,W
05638:  ADDLW  4C
0563A:  MOVLB  6
0563C:  MOVWF  x8B
0563E:  MOVLW  01
05640:  ADDWFC 02,W
05642:  MOVWF  x8C
05644:  MOVLW  01
05646:  ADDWF  x8B,W
05648:  MOVWF  01
0564A:  MOVLW  00
0564C:  ADDWFC x8C,W
0564E:  MOVWF  03
05650:  MOVF   01,W
05652:  ADDLW  3E
05654:  MOVWF  01
05656:  MOVLW  01
05658:  ADDWFC 03,F
0565A:  MOVF   01,W
0565C:  ADDLW  12
0565E:  MOVWF  FE9
05660:  MOVLW  00
05662:  ADDWFC 03,W
05664:  MOVWF  FEA
05666:  MOVFF  689,FEF
0566A:  CLRF   1B
0566C:  BTFSC  FF2.7
0566E:  BSF    1B.7
05670:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
05672:  CLRF   xF9
05674:  MOVFF  68A,6F8
05678:  CLRF   xFB
0567A:  MOVLW  2F
0567C:  MOVWF  xFA
0567E:  MOVLB  0
05680:  CALL   035E
05684:  BTFSC  1B.7
05686:  BSF    FF2.7
05688:  MOVF   01,W
0568A:  ADDLW  4C
0568C:  MOVLB  6
0568E:  MOVWF  x8B
05690:  MOVLW  01
05692:  ADDWFC 02,W
05694:  MOVWF  x8C
05696:  MOVLW  01
05698:  ADDWF  x8B,W
0569A:  MOVWF  01
0569C:  MOVLW  00
0569E:  ADDWFC x8C,W
056A0:  MOVWF  03
056A2:  MOVF   01,W
056A4:  ADDLW  3E
056A6:  MOVWF  01
056A8:  MOVLW  01
056AA:  ADDWFC 03,F
056AC:  MOVF   01,W
056AE:  ADDLW  13
056B0:  MOVWF  FE9
056B2:  MOVLW  00
056B4:  ADDWFC 03,W
056B6:  MOVWF  FEA
056B8:  BSF    FEF.0
056BA:  MOVLB  0
....................          } 
....................  
....................          break; 
056BC:  BRA    5B02
....................          case shutter: 
056BE:  CLRF   1B
056C0:  BTFSC  FF2.7
056C2:  BSF    1B.7
056C4:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
056C6:  MOVLB  6
056C8:  CLRF   xF9
056CA:  MOVFF  68A,6F8
056CE:  CLRF   xFB
056D0:  MOVLW  2F
056D2:  MOVWF  xFA
056D4:  MOVLB  0
056D6:  CALL   035E
056DA:  BTFSC  1B.7
056DC:  BSF    FF2.7
056DE:  MOVF   01,W
056E0:  ADDLW  4C
056E2:  MOVLB  6
056E4:  MOVWF  x8B
056E6:  MOVLW  01
056E8:  ADDWFC 02,W
056EA:  MOVWF  x8C
056EC:  MOVLW  01
056EE:  ADDWF  x8B,W
056F0:  MOVWF  01
056F2:  MOVLW  00
056F4:  ADDWFC x8C,W
056F6:  MOVWF  03
056F8:  MOVF   01,W
056FA:  ADDLW  3E
056FC:  MOVWF  01
056FE:  MOVLW  01
05700:  ADDWFC 03,F
05702:  MOVFF  01,68D
05706:  MOVFF  03,68E
0570A:  MOVFF  03,690
0570E:  MOVFF  01,68F
05712:  MOVFF  688,691
05716:  MOVLB  0
05718:  RCALL  50EC
0571A:  MOVF   01,F
0571C:  BZ    57C6
0571E:  CLRF   1B
05720:  BTFSC  FF2.7
05722:  BSF    1B.7
05724:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
05726:  MOVLB  6
05728:  CLRF   xF9
0572A:  MOVFF  68A,6F8
0572E:  CLRF   xFB
05730:  MOVLW  2F
05732:  MOVWF  xFA
05734:  MOVLB  0
05736:  CALL   035E
0573A:  BTFSC  1B.7
0573C:  BSF    FF2.7
0573E:  MOVF   01,W
05740:  ADDLW  4C
05742:  MOVLB  6
05744:  MOVWF  x8B
05746:  MOVLW  01
05748:  ADDWFC 02,W
0574A:  MOVWF  x8C
0574C:  MOVLW  01
0574E:  ADDWF  x8B,W
05750:  MOVWF  01
05752:  MOVLW  00
05754:  ADDWFC x8C,W
05756:  MOVWF  03
05758:  MOVF   01,W
0575A:  ADDLW  3E
0575C:  MOVWF  01
0575E:  MOVLW  01
05760:  ADDWFC 03,F
05762:  MOVF   01,W
05764:  ADDLW  08
05766:  MOVWF  FE9
05768:  MOVLW  00
0576A:  ADDWFC 03,W
0576C:  MOVWF  FEA
0576E:  MOVFF  689,FEF
05772:  CLRF   1B
05774:  BTFSC  FF2.7
05776:  BSF    1B.7
05778:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
0577A:  CLRF   xF9
0577C:  MOVFF  68A,6F8
05780:  CLRF   xFB
05782:  MOVLW  2F
05784:  MOVWF  xFA
05786:  MOVLB  0
05788:  CALL   035E
0578C:  BTFSC  1B.7
0578E:  BSF    FF2.7
05790:  MOVF   01,W
05792:  ADDLW  4C
05794:  MOVLB  6
05796:  MOVWF  x8B
05798:  MOVLW  01
0579A:  ADDWFC 02,W
0579C:  MOVWF  x8C
0579E:  MOVLW  01
057A0:  ADDWF  x8B,W
057A2:  MOVWF  01
057A4:  MOVLW  00
057A6:  ADDWFC x8C,W
057A8:  MOVWF  03
057AA:  MOVF   01,W
057AC:  ADDLW  3E
057AE:  MOVWF  01
057B0:  MOVLW  01
057B2:  ADDWFC 03,F
057B4:  MOVF   01,W
057B6:  ADDLW  09
057B8:  MOVWF  FE9
057BA:  MOVLW  00
057BC:  ADDWFC 03,W
057BE:  MOVWF  FEA
057C0:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
057C2:  BRA    5AFC
057C4:  MOVLB  0
057C6:  CLRF   1B
057C8:  BTFSC  FF2.7
057CA:  BSF    1B.7
057CC:  BCF    FF2.7
057CE:  MOVLB  6
057D0:  CLRF   xF9
057D2:  MOVFF  68A,6F8
057D6:  CLRF   xFB
057D8:  MOVLW  2F
057DA:  MOVWF  xFA
057DC:  MOVLB  0
057DE:  CALL   035E
057E2:  BTFSC  1B.7
057E4:  BSF    FF2.7
057E6:  MOVF   01,W
057E8:  ADDLW  4C
057EA:  MOVLB  6
057EC:  MOVWF  x8B
057EE:  MOVLW  01
057F0:  ADDWFC 02,W
057F2:  MOVWF  x8C
057F4:  MOVLW  01
057F6:  ADDWF  x8B,W
057F8:  MOVWF  01
057FA:  MOVLW  00
057FC:  ADDWFC x8C,W
057FE:  MOVWF  03
05800:  MOVF   01,W
05802:  ADDLW  3E
05804:  MOVWF  01
05806:  MOVLW  01
05808:  ADDWFC 03,F
0580A:  MOVF   01,W
0580C:  ADDLW  0A
0580E:  MOVWF  01
05810:  MOVLW  00
05812:  ADDWFC 03,F
05814:  MOVFF  01,68D
05818:  MOVFF  03,68E
0581C:  MOVFF  03,690
05820:  MOVFF  01,68F
05824:  MOVFF  688,691
05828:  MOVLB  0
0582A:  RCALL  50EC
0582C:  MOVF   01,F
0582E:  BZ    58D8
05830:  CLRF   1B
05832:  BTFSC  FF2.7
05834:  BSF    1B.7
05836:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
05838:  MOVLB  6
0583A:  CLRF   xF9
0583C:  MOVFF  68A,6F8
05840:  CLRF   xFB
05842:  MOVLW  2F
05844:  MOVWF  xFA
05846:  MOVLB  0
05848:  CALL   035E
0584C:  BTFSC  1B.7
0584E:  BSF    FF2.7
05850:  MOVF   01,W
05852:  ADDLW  4C
05854:  MOVLB  6
05856:  MOVWF  x8B
05858:  MOVLW  01
0585A:  ADDWFC 02,W
0585C:  MOVWF  x8C
0585E:  MOVLW  01
05860:  ADDWF  x8B,W
05862:  MOVWF  01
05864:  MOVLW  00
05866:  ADDWFC x8C,W
05868:  MOVWF  03
0586A:  MOVF   01,W
0586C:  ADDLW  3E
0586E:  MOVWF  01
05870:  MOVLW  01
05872:  ADDWFC 03,F
05874:  MOVF   01,W
05876:  ADDLW  12
05878:  MOVWF  FE9
0587A:  MOVLW  00
0587C:  ADDWFC 03,W
0587E:  MOVWF  FEA
05880:  MOVFF  689,FEF
05884:  CLRF   1B
05886:  BTFSC  FF2.7
05888:  BSF    1B.7
0588A:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
0588C:  CLRF   xF9
0588E:  MOVFF  68A,6F8
05892:  CLRF   xFB
05894:  MOVLW  2F
05896:  MOVWF  xFA
05898:  MOVLB  0
0589A:  CALL   035E
0589E:  BTFSC  1B.7
058A0:  BSF    FF2.7
058A2:  MOVF   01,W
058A4:  ADDLW  4C
058A6:  MOVLB  6
058A8:  MOVWF  x8B
058AA:  MOVLW  01
058AC:  ADDWFC 02,W
058AE:  MOVWF  x8C
058B0:  MOVLW  01
058B2:  ADDWF  x8B,W
058B4:  MOVWF  01
058B6:  MOVLW  00
058B8:  ADDWFC x8C,W
058BA:  MOVWF  03
058BC:  MOVF   01,W
058BE:  ADDLW  3E
058C0:  MOVWF  01
058C2:  MOVLW  01
058C4:  ADDWFC 03,F
058C6:  MOVF   01,W
058C8:  ADDLW  13
058CA:  MOVWF  FE9
058CC:  MOVLW  00
058CE:  ADDWFC 03,W
058D0:  MOVWF  FEA
058D2:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
058D4:  BRA    5AFC
058D6:  MOVLB  0
058D8:  CLRF   1B
058DA:  BTFSC  FF2.7
058DC:  BSF    1B.7
058DE:  BCF    FF2.7
058E0:  MOVLB  6
058E2:  CLRF   xF9
058E4:  MOVFF  68A,6F8
058E8:  CLRF   xFB
058EA:  MOVLW  2F
058EC:  MOVWF  xFA
058EE:  MOVLB  0
058F0:  CALL   035E
058F4:  BTFSC  1B.7
058F6:  BSF    FF2.7
058F8:  MOVF   01,W
058FA:  ADDLW  4C
058FC:  MOVLB  6
058FE:  MOVWF  x8B
05900:  MOVLW  01
05902:  ADDWFC 02,W
05904:  MOVWF  x8C
05906:  MOVLW  01
05908:  ADDWF  x8B,W
0590A:  MOVWF  01
0590C:  MOVLW  00
0590E:  ADDWFC x8C,W
05910:  MOVWF  03
05912:  MOVF   01,W
05914:  ADDLW  3E
05916:  MOVWF  01
05918:  MOVLW  01
0591A:  ADDWFC 03,F
0591C:  MOVF   01,W
0591E:  ADDLW  14
05920:  MOVWF  01
05922:  MOVLW  00
05924:  ADDWFC 03,F
05926:  MOVFF  01,68D
0592A:  MOVFF  03,68E
0592E:  MOVFF  03,690
05932:  MOVFF  01,68F
05936:  MOVFF  688,691
0593A:  MOVLB  0
0593C:  CALL   50EC
05940:  MOVF   01,F
05942:  BZ    59EC
05944:  CLRF   1B
05946:  BTFSC  FF2.7
05948:  BSF    1B.7
0594A:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
0594C:  MOVLB  6
0594E:  CLRF   xF9
05950:  MOVFF  68A,6F8
05954:  CLRF   xFB
05956:  MOVLW  2F
05958:  MOVWF  xFA
0595A:  MOVLB  0
0595C:  CALL   035E
05960:  BTFSC  1B.7
05962:  BSF    FF2.7
05964:  MOVF   01,W
05966:  ADDLW  4C
05968:  MOVLB  6
0596A:  MOVWF  x8B
0596C:  MOVLW  01
0596E:  ADDWFC 02,W
05970:  MOVWF  x8C
05972:  MOVLW  01
05974:  ADDWF  x8B,W
05976:  MOVWF  01
05978:  MOVLW  00
0597A:  ADDWFC x8C,W
0597C:  MOVWF  03
0597E:  MOVF   01,W
05980:  ADDLW  3E
05982:  MOVWF  01
05984:  MOVLW  01
05986:  ADDWFC 03,F
05988:  MOVF   01,W
0598A:  ADDLW  1C
0598C:  MOVWF  FE9
0598E:  MOVLW  00
05990:  ADDWFC 03,W
05992:  MOVWF  FEA
05994:  MOVFF  689,FEF
05998:  CLRF   1B
0599A:  BTFSC  FF2.7
0599C:  BSF    1B.7
0599E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
059A0:  CLRF   xF9
059A2:  MOVFF  68A,6F8
059A6:  CLRF   xFB
059A8:  MOVLW  2F
059AA:  MOVWF  xFA
059AC:  MOVLB  0
059AE:  CALL   035E
059B2:  BTFSC  1B.7
059B4:  BSF    FF2.7
059B6:  MOVF   01,W
059B8:  ADDLW  4C
059BA:  MOVLB  6
059BC:  MOVWF  x8B
059BE:  MOVLW  01
059C0:  ADDWFC 02,W
059C2:  MOVWF  x8C
059C4:  MOVLW  01
059C6:  ADDWF  x8B,W
059C8:  MOVWF  01
059CA:  MOVLW  00
059CC:  ADDWFC x8C,W
059CE:  MOVWF  03
059D0:  MOVF   01,W
059D2:  ADDLW  3E
059D4:  MOVWF  01
059D6:  MOVLW  01
059D8:  ADDWFC 03,F
059DA:  MOVF   01,W
059DC:  ADDLW  1D
059DE:  MOVWF  FE9
059E0:  MOVLW  00
059E2:  ADDWFC 03,W
059E4:  MOVWF  FEA
059E6:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
059E8:  BRA    5AFC
059EA:  MOVLB  0
059EC:  CLRF   1B
059EE:  BTFSC  FF2.7
059F0:  BSF    1B.7
059F2:  BCF    FF2.7
059F4:  MOVLB  6
059F6:  CLRF   xF9
059F8:  MOVFF  68A,6F8
059FC:  CLRF   xFB
059FE:  MOVLW  2F
05A00:  MOVWF  xFA
05A02:  MOVLB  0
05A04:  CALL   035E
05A08:  BTFSC  1B.7
05A0A:  BSF    FF2.7
05A0C:  MOVF   01,W
05A0E:  ADDLW  4C
05A10:  MOVLB  6
05A12:  MOVWF  x8B
05A14:  MOVLW  01
05A16:  ADDWFC 02,W
05A18:  MOVWF  x8C
05A1A:  MOVLW  01
05A1C:  ADDWF  x8B,W
05A1E:  MOVWF  01
05A20:  MOVLW  00
05A22:  ADDWFC x8C,W
05A24:  MOVWF  03
05A26:  MOVF   01,W
05A28:  ADDLW  3E
05A2A:  MOVWF  01
05A2C:  MOVLW  01
05A2E:  ADDWFC 03,F
05A30:  MOVF   01,W
05A32:  ADDLW  1E
05A34:  MOVWF  01
05A36:  MOVLW  00
05A38:  ADDWFC 03,F
05A3A:  MOVFF  01,68D
05A3E:  MOVFF  03,68E
05A42:  MOVFF  03,690
05A46:  MOVFF  01,68F
05A4A:  MOVFF  688,691
05A4E:  MOVLB  0
05A50:  CALL   50EC
05A54:  MOVF   01,F
05A56:  BZ    5AFE
05A58:  CLRF   1B
05A5A:  BTFSC  FF2.7
05A5C:  BSF    1B.7
05A5E:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
05A60:  MOVLB  6
05A62:  CLRF   xF9
05A64:  MOVFF  68A,6F8
05A68:  CLRF   xFB
05A6A:  MOVLW  2F
05A6C:  MOVWF  xFA
05A6E:  MOVLB  0
05A70:  CALL   035E
05A74:  BTFSC  1B.7
05A76:  BSF    FF2.7
05A78:  MOVF   01,W
05A7A:  ADDLW  4C
05A7C:  MOVLB  6
05A7E:  MOVWF  x8B
05A80:  MOVLW  01
05A82:  ADDWFC 02,W
05A84:  MOVWF  x8C
05A86:  MOVLW  01
05A88:  ADDWF  x8B,W
05A8A:  MOVWF  01
05A8C:  MOVLW  00
05A8E:  ADDWFC x8C,W
05A90:  MOVWF  03
05A92:  MOVF   01,W
05A94:  ADDLW  3E
05A96:  MOVWF  01
05A98:  MOVLW  01
05A9A:  ADDWFC 03,F
05A9C:  MOVF   01,W
05A9E:  ADDLW  26
05AA0:  MOVWF  FE9
05AA2:  MOVLW  00
05AA4:  ADDWFC 03,W
05AA6:  MOVWF  FEA
05AA8:  MOVFF  689,FEF
05AAC:  CLRF   1B
05AAE:  BTFSC  FF2.7
05AB0:  BSF    1B.7
05AB2:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
05AB4:  CLRF   xF9
05AB6:  MOVFF  68A,6F8
05ABA:  CLRF   xFB
05ABC:  MOVLW  2F
05ABE:  MOVWF  xFA
05AC0:  MOVLB  0
05AC2:  CALL   035E
05AC6:  BTFSC  1B.7
05AC8:  BSF    FF2.7
05ACA:  MOVF   01,W
05ACC:  ADDLW  4C
05ACE:  MOVLB  6
05AD0:  MOVWF  x8B
05AD2:  MOVLW  01
05AD4:  ADDWFC 02,W
05AD6:  MOVWF  x8C
05AD8:  MOVLW  01
05ADA:  ADDWF  x8B,W
05ADC:  MOVWF  01
05ADE:  MOVLW  00
05AE0:  ADDWFC x8C,W
05AE2:  MOVWF  03
05AE4:  MOVF   01,W
05AE6:  ADDLW  3E
05AE8:  MOVWF  01
05AEA:  MOVLW  01
05AEC:  ADDWFC 03,F
05AEE:  MOVF   01,W
05AF0:  ADDLW  27
05AF2:  MOVWF  FE9
05AF4:  MOVLW  00
05AF6:  ADDWFC 03,W
05AF8:  MOVWF  FEA
05AFA:  BSF    FEF.0
05AFC:  MOVLB  0
....................          } 
....................  
....................          break; 
05AFE:  BRA    5B02
....................          default: 
....................          break; 
05B00:  BRA    5B02
....................       } 
....................    } 
05B02:  MOVLB  6
05B04:  INCF   x8A,F
05B06:  GOTO   5120
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
05B0A:  CLRF   x8A
05B0C:  MOVLB  1
05B0E:  MOVF   x3E,W
05B10:  MOVLB  6
05B12:  SUBWF  x8A,W
05B14:  BTFSC  FD8.0
05B16:  BRA    5D8A
05B18:  CLRF   1B
05B1A:  BTFSC  FF2.7
05B1C:  BSF    1B.7
05B1E:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
05B20:  CLRF   xF9
05B22:  MOVFF  68A,6F8
05B26:  CLRF   xFB
05B28:  MOVLW  21
05B2A:  MOVWF  xFA
05B2C:  MOVLB  0
05B2E:  CALL   035E
05B32:  BTFSC  1B.7
05B34:  BSF    FF2.7
05B36:  MOVFF  02,03
05B3A:  MOVF   01,W
05B3C:  ADDLW  40
05B3E:  MOVWF  01
05B40:  MOVLW  01
05B42:  ADDWFC 03,F
05B44:  MOVFF  01,FE9
05B48:  MOVFF  03,FEA
05B4C:  MOVF   FEF,W
05B4E:  XORLW  03
05B50:  BZ    5B54
05B52:  BRA    5D84
....................          
....................           
....................          case timer: 
....................           if(value==1) 
05B54:  MOVLB  6
05B56:  DECFSZ x89,W
05B58:  BRA    5D80
05B5A:  CLRF   1B
05B5C:  BTFSC  FF2.7
05B5E:  BSF    1B.7
05B60:  BCF    FF2.7
....................           { 
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
05B62:  CLRF   xF9
05B64:  MOVFF  68A,6F8
05B68:  CLRF   xFB
05B6A:  MOVLW  21
05B6C:  MOVWF  xFA
05B6E:  MOVLB  0
05B70:  CALL   035E
05B74:  BTFSC  1B.7
05B76:  BSF    FF2.7
05B78:  MOVF   01,W
05B7A:  ADDLW  02
05B7C:  MOVLB  6
05B7E:  MOVWF  x8B
05B80:  MOVLW  00
05B82:  ADDWFC 02,W
05B84:  MOVWF  x8C
05B86:  MOVLW  01
05B88:  ADDWF  x8B,W
05B8A:  MOVWF  01
05B8C:  MOVLW  00
05B8E:  ADDWFC x8C,W
05B90:  MOVWF  03
05B92:  MOVF   01,W
05B94:  ADDLW  3E
05B96:  MOVWF  01
05B98:  MOVLW  01
05B9A:  ADDWFC 03,F
05B9C:  MOVF   01,W
05B9E:  ADDLW  09
05BA0:  MOVWF  01
05BA2:  MOVLW  00
05BA4:  ADDWFC 03,F
05BA6:  MOVFF  01,68D
05BAA:  MOVFF  03,68E
05BAE:  MOVFF  03,690
05BB2:  MOVFF  01,68F
05BB6:  MOVFF  688,691
05BBA:  MOVLB  0
05BBC:  CALL   50EC
05BC0:  MOVF   01,F
05BC2:  BZ    5C6E
05BC4:  CLRF   1B
05BC6:  BTFSC  FF2.7
05BC8:  BSF    1B.7
05BCA:  BCF    FF2.7
....................          {//printf("AKI1"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
05BCC:  MOVLB  6
05BCE:  CLRF   xF9
05BD0:  MOVFF  68A,6F8
05BD4:  CLRF   xFB
05BD6:  MOVLW  21
05BD8:  MOVWF  xFA
05BDA:  MOVLB  0
05BDC:  CALL   035E
05BE0:  BTFSC  1B.7
05BE2:  BSF    FF2.7
05BE4:  MOVF   01,W
05BE6:  ADDLW  02
05BE8:  MOVLB  6
05BEA:  MOVWF  x8B
05BEC:  MOVLW  00
05BEE:  ADDWFC 02,W
05BF0:  MOVWF  x8C
05BF2:  MOVLW  01
05BF4:  ADDWF  x8B,W
05BF6:  MOVWF  01
05BF8:  MOVLW  00
05BFA:  ADDWFC x8C,W
05BFC:  MOVWF  03
05BFE:  MOVF   01,W
05C00:  ADDLW  3E
05C02:  MOVWF  01
05C04:  MOVLW  01
05C06:  ADDWFC 03,F
05C08:  MOVF   01,W
05C0A:  ADDLW  1D
05C0C:  MOVWF  FE9
05C0E:  MOVLW  00
05C10:  ADDWFC 03,W
05C12:  MOVWF  FEA
05C14:  CLRF   FEC
05C16:  MOVF   FED,F
05C18:  CLRF   FEF
05C1A:  CLRF   1B
05C1C:  BTFSC  FF2.7
05C1E:  BSF    1B.7
05C20:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
05C22:  CLRF   xF9
05C24:  MOVFF  68A,6F8
05C28:  CLRF   xFB
05C2A:  MOVLW  21
05C2C:  MOVWF  xFA
05C2E:  MOVLB  0
05C30:  CALL   035E
05C34:  BTFSC  1B.7
05C36:  BSF    FF2.7
05C38:  MOVF   01,W
05C3A:  ADDLW  02
05C3C:  MOVLB  6
05C3E:  MOVWF  x8B
05C40:  MOVLW  00
05C42:  ADDWFC 02,W
05C44:  MOVWF  x8C
05C46:  MOVLW  01
05C48:  ADDWF  x8B,W
05C4A:  MOVWF  01
05C4C:  MOVLW  00
05C4E:  ADDWFC x8C,W
05C50:  MOVWF  03
05C52:  MOVF   01,W
05C54:  ADDLW  3E
05C56:  MOVWF  01
05C58:  MOVLW  01
05C5A:  ADDWFC 03,F
05C5C:  MOVF   01,W
05C5E:  ADDLW  1F
05C60:  MOVWF  FE9
05C62:  MOVLW  00
05C64:  ADDWFC 03,W
05C66:  MOVWF  FEA
05C68:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
05C6A:  BRA    5D80
05C6C:  MOVLB  0
05C6E:  CLRF   1B
05C70:  BTFSC  FF2.7
05C72:  BSF    1B.7
05C74:  BCF    FF2.7
05C76:  MOVLB  6
05C78:  CLRF   xF9
05C7A:  MOVFF  68A,6F8
05C7E:  CLRF   xFB
05C80:  MOVLW  21
05C82:  MOVWF  xFA
05C84:  MOVLB  0
05C86:  CALL   035E
05C8A:  BTFSC  1B.7
05C8C:  BSF    FF2.7
05C8E:  MOVF   01,W
05C90:  ADDLW  02
05C92:  MOVLB  6
05C94:  MOVWF  x8B
05C96:  MOVLW  00
05C98:  ADDWFC 02,W
05C9A:  MOVWF  x8C
05C9C:  MOVLW  01
05C9E:  ADDWF  x8B,W
05CA0:  MOVWF  01
05CA2:  MOVLW  00
05CA4:  ADDWFC x8C,W
05CA6:  MOVWF  03
05CA8:  MOVF   01,W
05CAA:  ADDLW  3E
05CAC:  MOVWF  01
05CAE:  MOVLW  01
05CB0:  ADDWFC 03,F
05CB2:  MOVF   01,W
05CB4:  ADDLW  13
05CB6:  MOVWF  01
05CB8:  MOVLW  00
05CBA:  ADDWFC 03,F
05CBC:  MOVFF  01,68D
05CC0:  MOVFF  03,68E
05CC4:  MOVFF  03,690
05CC8:  MOVFF  01,68F
05CCC:  MOVFF  688,691
05CD0:  MOVLB  0
05CD2:  CALL   50EC
05CD6:  MOVF   01,F
05CD8:  BZ    5D82
05CDA:  CLRF   1B
05CDC:  BTFSC  FF2.7
05CDE:  BSF    1B.7
05CE0:  BCF    FF2.7
....................          {//printf("AKI2"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
05CE2:  MOVLB  6
05CE4:  CLRF   xF9
05CE6:  MOVFF  68A,6F8
05CEA:  CLRF   xFB
05CEC:  MOVLW  21
05CEE:  MOVWF  xFA
05CF0:  MOVLB  0
05CF2:  CALL   035E
05CF6:  BTFSC  1B.7
05CF8:  BSF    FF2.7
05CFA:  MOVF   01,W
05CFC:  ADDLW  02
05CFE:  MOVLB  6
05D00:  MOVWF  x8B
05D02:  MOVLW  00
05D04:  ADDWFC 02,W
05D06:  MOVWF  x8C
05D08:  MOVLW  01
05D0A:  ADDWF  x8B,W
05D0C:  MOVWF  01
05D0E:  MOVLW  00
05D10:  ADDWFC x8C,W
05D12:  MOVWF  03
05D14:  MOVF   01,W
05D16:  ADDLW  3E
05D18:  MOVWF  01
05D1A:  MOVLW  01
05D1C:  ADDWFC 03,F
05D1E:  MOVF   01,W
05D20:  ADDLW  1D
05D22:  MOVWF  FE9
05D24:  MOVLW  00
05D26:  ADDWFC 03,W
05D28:  MOVWF  FEA
05D2A:  CLRF   FEC
05D2C:  MOVF   FED,F
05D2E:  CLRF   FEF
05D30:  CLRF   1B
05D32:  BTFSC  FF2.7
05D34:  BSF    1B.7
05D36:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
05D38:  CLRF   xF9
05D3A:  MOVFF  68A,6F8
05D3E:  CLRF   xFB
05D40:  MOVLW  21
05D42:  MOVWF  xFA
05D44:  MOVLB  0
05D46:  CALL   035E
05D4A:  BTFSC  1B.7
05D4C:  BSF    FF2.7
05D4E:  MOVF   01,W
05D50:  ADDLW  02
05D52:  MOVLB  6
05D54:  MOVWF  x8B
05D56:  MOVLW  00
05D58:  ADDWFC 02,W
05D5A:  MOVWF  x8C
05D5C:  MOVLW  01
05D5E:  ADDWF  x8B,W
05D60:  MOVWF  01
05D62:  MOVLW  00
05D64:  ADDWFC x8C,W
05D66:  MOVWF  03
05D68:  MOVF   01,W
05D6A:  ADDLW  3E
05D6C:  MOVWF  01
05D6E:  MOVLW  01
05D70:  ADDWFC 03,F
05D72:  MOVF   01,W
05D74:  ADDLW  1F
05D76:  MOVWF  FE9
05D78:  MOVLW  00
05D7A:  ADDWFC 03,W
05D7C:  MOVWF  FEA
05D7E:  BCF    FEF.0
05D80:  MOVLB  0
....................          } 
....................          } 
....................          break; 
05D82:  BRA    5D84
....................       } 
....................    } 
05D84:  MOVLB  6
05D86:  INCF   x8A,F
05D88:  BRA    5B0C
....................           
.................... } 
05D8A:  MOVLB  0
05D8C:  GOTO   5D9C (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
05D90:  MOVFF  686,688
05D94:  MOVFF  687,689
05D98:  GOTO   511C
....................    //TODO CAN Sending of values 
.................... } 
05D9C:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
05D9E:  MOVLB  6
05DA0:  CLRF   x7F
05DA2:  MOVLB  1
05DA4:  MOVF   x3E,W
05DA6:  MOVLB  6
05DA8:  SUBWF  x7F,W
05DAA:  BTFSC  FD8.0
05DAC:  GOTO   6CE0
05DB0:  CLRF   1B
05DB2:  BTFSC  FF2.7
05DB4:  BSF    1B.7
05DB6:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
05DB8:  CLRF   xF9
05DBA:  MOVFF  67F,6F8
05DBE:  CLRF   xFB
05DC0:  MOVLW  21
05DC2:  MOVWF  xFA
05DC4:  MOVLB  0
05DC6:  CALL   035E
05DCA:  BTFSC  1B.7
05DCC:  BSF    FF2.7
05DCE:  MOVFF  02,03
05DD2:  MOVF   01,W
05DD4:  ADDLW  40
05DD6:  MOVWF  01
05DD8:  MOVLW  01
05DDA:  ADDWFC 03,F
05DDC:  MOVFF  01,FE9
05DE0:  MOVFF  03,FEA
05DE4:  MOVF   FEF,W
05DE6:  BZ    5E02
05DE8:  XORLW  02
05DEA:  BTFSC  FD8.2
05DEC:  BRA    62F0
05DEE:  XORLW  03
05DF0:  BTFSC  FD8.2
05DF2:  GOTO   663A
05DF6:  XORLW  02
05DF8:  BTFSC  FD8.2
05DFA:  GOTO   6986
05DFE:  GOTO   6CD6
....................          case dimmer_switch: 
05E02:  CLRF   1B
05E04:  BTFSC  FF2.7
05E06:  BSF    1B.7
05E08:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
05E0A:  MOVLB  6
05E0C:  CLRF   xF9
05E0E:  MOVFF  67F,6F8
05E12:  CLRF   xFB
05E14:  MOVLW  21
05E16:  MOVWF  xFA
05E18:  MOVLB  0
05E1A:  CALL   035E
05E1E:  BTFSC  1B.7
05E20:  BSF    FF2.7
05E22:  MOVF   01,W
05E24:  ADDLW  02
05E26:  MOVLB  6
05E28:  MOVWF  x80
05E2A:  MOVLW  00
05E2C:  ADDWFC 02,W
05E2E:  MOVWF  x81
05E30:  MOVLW  01
05E32:  ADDWF  x80,W
05E34:  MOVWF  01
05E36:  MOVLW  00
05E38:  ADDWFC x81,W
05E3A:  MOVWF  03
05E3C:  MOVF   01,W
05E3E:  ADDLW  3E
05E40:  MOVWF  01
05E42:  MOVLW  01
05E44:  ADDWFC 03,F
05E46:  MOVF   01,W
05E48:  ADDLW  02
05E4A:  MOVWF  FE9
05E4C:  MOVLW  00
05E4E:  ADDWFC 03,W
05E50:  MOVWF  FEA
05E52:  BTFSS  FEF.0
05E54:  BRA    5FA4
05E56:  CLRF   1B
05E58:  BTFSC  FF2.7
05E5A:  BSF    1B.7
05E5C:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
05E5E:  CLRF   xF9
05E60:  MOVFF  67F,6F8
05E64:  CLRF   xFB
05E66:  MOVLW  21
05E68:  MOVWF  xFA
05E6A:  MOVLB  0
05E6C:  CALL   035E
05E70:  BTFSC  1B.7
05E72:  BSF    FF2.7
05E74:  MOVF   01,W
05E76:  ADDLW  02
05E78:  MOVLB  6
05E7A:  MOVWF  x80
05E7C:  MOVLW  00
05E7E:  ADDWFC 02,W
05E80:  MOVWF  x81
05E82:  MOVLW  01
05E84:  ADDWF  x80,W
05E86:  MOVWF  01
05E88:  MOVLW  00
05E8A:  ADDWFC x81,W
05E8C:  MOVWF  03
05E8E:  MOVF   01,W
05E90:  ADDLW  3E
05E92:  MOVWF  01
05E94:  MOVLW  01
05E96:  ADDWFC 03,F
05E98:  MOVFF  01,FE9
05E9C:  MOVFF  03,FEA
05EA0:  MOVFF  FEF,682
05EA4:  CLRF   1B
05EA6:  BTFSC  FF2.7
05EA8:  BSF    1B.7
05EAA:  BCF    FF2.7
05EAC:  CLRF   xF9
05EAE:  MOVFF  67F,6F8
05EB2:  CLRF   xFB
05EB4:  MOVLW  21
05EB6:  MOVWF  xFA
05EB8:  MOVLB  0
05EBA:  CALL   035E
05EBE:  BTFSC  1B.7
05EC0:  BSF    FF2.7
05EC2:  MOVF   01,W
05EC4:  ADDLW  02
05EC6:  MOVLB  6
05EC8:  MOVWF  x83
05ECA:  MOVLW  00
05ECC:  ADDWFC 02,W
05ECE:  MOVWF  x84
05ED0:  MOVLW  01
05ED2:  ADDWF  x83,W
05ED4:  MOVWF  01
05ED6:  MOVLW  00
05ED8:  ADDWFC x84,W
05EDA:  MOVWF  03
05EDC:  MOVF   01,W
05EDE:  ADDLW  3E
05EE0:  MOVWF  01
05EE2:  MOVLW  01
05EE4:  ADDWFC 03,F
05EE6:  MOVF   01,W
05EE8:  ADDLW  01
05EEA:  MOVWF  FE9
05EEC:  MOVLW  00
05EEE:  ADDWFC 03,W
05EF0:  MOVWF  FEA
05EF2:  MOVFF  FEF,685
05EF6:  MOVFF  682,686
05EFA:  MOVFF  685,687
05EFE:  MOVLB  0
05F00:  RCALL  5D90
05F02:  CLRF   1B
05F04:  BTFSC  FF2.7
05F06:  BSF    1B.7
05F08:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
05F0A:  MOVLB  6
05F0C:  CLRF   xF9
05F0E:  MOVFF  67F,6F8
05F12:  CLRF   xFB
05F14:  MOVLW  21
05F16:  MOVWF  xFA
05F18:  MOVLB  0
05F1A:  CALL   035E
05F1E:  BTFSC  1B.7
05F20:  BSF    FF2.7
05F22:  MOVF   01,W
05F24:  ADDLW  02
05F26:  MOVLB  6
05F28:  MOVWF  x80
05F2A:  MOVLW  00
05F2C:  ADDWFC 02,W
05F2E:  MOVWF  x81
05F30:  MOVLW  01
05F32:  ADDWF  x80,W
05F34:  MOVWF  01
05F36:  MOVLW  00
05F38:  ADDWFC x81,W
05F3A:  MOVWF  03
05F3C:  MOVF   01,W
05F3E:  ADDLW  3E
05F40:  MOVWF  01
05F42:  MOVLW  01
05F44:  ADDWFC 03,F
05F46:  MOVF   01,W
05F48:  ADDLW  02
05F4A:  MOVWF  FE9
05F4C:  MOVLW  00
05F4E:  ADDWFC 03,W
05F50:  MOVWF  FEA
05F52:  BCF    FEF.0
05F54:  CLRF   1B
05F56:  BTFSC  FF2.7
05F58:  BSF    1B.7
05F5A:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
05F5C:  CLRF   xF9
05F5E:  MOVFF  67F,6F8
05F62:  CLRF   xFB
05F64:  MOVLW  21
05F66:  MOVWF  xFA
05F68:  MOVLB  0
05F6A:  CALL   035E
05F6E:  BTFSC  1B.7
05F70:  BSF    FF2.7
05F72:  MOVF   01,W
05F74:  ADDLW  02
05F76:  MOVLB  6
05F78:  MOVWF  x80
05F7A:  MOVLW  00
05F7C:  ADDWFC 02,W
05F7E:  MOVWF  x81
05F80:  MOVLW  01
05F82:  ADDWF  x80,W
05F84:  MOVWF  01
05F86:  MOVLW  00
05F88:  ADDWFC x81,W
05F8A:  MOVWF  03
05F8C:  MOVF   01,W
05F8E:  ADDLW  3E
05F90:  MOVWF  01
05F92:  MOVLW  01
05F94:  ADDWFC 03,F
05F96:  MOVF   01,W
05F98:  ADDLW  01
05F9A:  MOVWF  FE9
05F9C:  MOVLW  00
05F9E:  ADDWFC 03,W
05FA0:  MOVWF  FEA
05FA2:  CLRF   FEF
05FA4:  CLRF   1B
05FA6:  BTFSC  FF2.7
05FA8:  BSF    1B.7
05FAA:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
05FAC:  CLRF   xF9
05FAE:  MOVFF  67F,6F8
05FB2:  CLRF   xFB
05FB4:  MOVLW  21
05FB6:  MOVWF  xFA
05FB8:  MOVLB  0
05FBA:  CALL   035E
05FBE:  BTFSC  1B.7
05FC0:  BSF    FF2.7
05FC2:  MOVF   01,W
05FC4:  ADDLW  02
05FC6:  MOVLB  6
05FC8:  MOVWF  x80
05FCA:  MOVLW  00
05FCC:  ADDWFC 02,W
05FCE:  MOVWF  x81
05FD0:  MOVLW  01
05FD2:  ADDWF  x80,W
05FD4:  MOVWF  01
05FD6:  MOVLW  00
05FD8:  ADDWFC x81,W
05FDA:  MOVWF  03
05FDC:  MOVF   01,W
05FDE:  ADDLW  3E
05FE0:  MOVWF  01
05FE2:  MOVLW  01
05FE4:  ADDWFC 03,F
05FE6:  MOVF   01,W
05FE8:  ADDLW  05
05FEA:  MOVWF  FE9
05FEC:  MOVLW  00
05FEE:  ADDWFC 03,W
05FF0:  MOVWF  FEA
05FF2:  BTFSS  FEF.0
05FF4:  BRA    6148
05FF6:  CLRF   1B
05FF8:  BTFSC  FF2.7
05FFA:  BSF    1B.7
05FFC:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
05FFE:  CLRF   xF9
06000:  MOVFF  67F,6F8
06004:  CLRF   xFB
06006:  MOVLW  21
06008:  MOVWF  xFA
0600A:  MOVLB  0
0600C:  CALL   035E
06010:  BTFSC  1B.7
06012:  BSF    FF2.7
06014:  MOVF   01,W
06016:  ADDLW  02
06018:  MOVLB  6
0601A:  MOVWF  x80
0601C:  MOVLW  00
0601E:  ADDWFC 02,W
06020:  MOVWF  x81
06022:  MOVLW  01
06024:  ADDWF  x80,W
06026:  MOVWF  01
06028:  MOVLW  00
0602A:  ADDWFC x81,W
0602C:  MOVWF  03
0602E:  MOVF   01,W
06030:  ADDLW  3E
06032:  MOVWF  01
06034:  MOVLW  01
06036:  ADDWFC 03,F
06038:  MOVF   01,W
0603A:  ADDLW  03
0603C:  MOVWF  FE9
0603E:  MOVLW  00
06040:  ADDWFC 03,W
06042:  MOVWF  FEA
06044:  MOVFF  FEF,682
06048:  CLRF   1B
0604A:  BTFSC  FF2.7
0604C:  BSF    1B.7
0604E:  BCF    FF2.7
06050:  CLRF   xF9
06052:  MOVFF  67F,6F8
06056:  CLRF   xFB
06058:  MOVLW  21
0605A:  MOVWF  xFA
0605C:  MOVLB  0
0605E:  CALL   035E
06062:  BTFSC  1B.7
06064:  BSF    FF2.7
06066:  MOVF   01,W
06068:  ADDLW  02
0606A:  MOVLB  6
0606C:  MOVWF  x83
0606E:  MOVLW  00
06070:  ADDWFC 02,W
06072:  MOVWF  x84
06074:  MOVLW  01
06076:  ADDWF  x83,W
06078:  MOVWF  01
0607A:  MOVLW  00
0607C:  ADDWFC x84,W
0607E:  MOVWF  03
06080:  MOVF   01,W
06082:  ADDLW  3E
06084:  MOVWF  01
06086:  MOVLW  01
06088:  ADDWFC 03,F
0608A:  MOVF   01,W
0608C:  ADDLW  04
0608E:  MOVWF  FE9
06090:  MOVLW  00
06092:  ADDWFC 03,W
06094:  MOVWF  FEA
06096:  MOVFF  FEF,685
0609A:  MOVFF  682,686
0609E:  MOVFF  685,687
060A2:  MOVLB  0
060A4:  RCALL  5D90
060A6:  CLRF   1B
060A8:  BTFSC  FF2.7
060AA:  BSF    1B.7
060AC:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
060AE:  MOVLB  6
060B0:  CLRF   xF9
060B2:  MOVFF  67F,6F8
060B6:  CLRF   xFB
060B8:  MOVLW  21
060BA:  MOVWF  xFA
060BC:  MOVLB  0
060BE:  CALL   035E
060C2:  BTFSC  1B.7
060C4:  BSF    FF2.7
060C6:  MOVF   01,W
060C8:  ADDLW  02
060CA:  MOVLB  6
060CC:  MOVWF  x80
060CE:  MOVLW  00
060D0:  ADDWFC 02,W
060D2:  MOVWF  x81
060D4:  MOVLW  01
060D6:  ADDWF  x80,W
060D8:  MOVWF  01
060DA:  MOVLW  00
060DC:  ADDWFC x81,W
060DE:  MOVWF  03
060E0:  MOVF   01,W
060E2:  ADDLW  3E
060E4:  MOVWF  01
060E6:  MOVLW  01
060E8:  ADDWFC 03,F
060EA:  MOVF   01,W
060EC:  ADDLW  05
060EE:  MOVWF  FE9
060F0:  MOVLW  00
060F2:  ADDWFC 03,W
060F4:  MOVWF  FEA
060F6:  BCF    FEF.0
060F8:  CLRF   1B
060FA:  BTFSC  FF2.7
060FC:  BSF    1B.7
060FE:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
06100:  CLRF   xF9
06102:  MOVFF  67F,6F8
06106:  CLRF   xFB
06108:  MOVLW  21
0610A:  MOVWF  xFA
0610C:  MOVLB  0
0610E:  CALL   035E
06112:  BTFSC  1B.7
06114:  BSF    FF2.7
06116:  MOVF   01,W
06118:  ADDLW  02
0611A:  MOVLB  6
0611C:  MOVWF  x80
0611E:  MOVLW  00
06120:  ADDWFC 02,W
06122:  MOVWF  x81
06124:  MOVLW  01
06126:  ADDWF  x80,W
06128:  MOVWF  01
0612A:  MOVLW  00
0612C:  ADDWFC x81,W
0612E:  MOVWF  03
06130:  MOVF   01,W
06132:  ADDLW  3E
06134:  MOVWF  01
06136:  MOVLW  01
06138:  ADDWFC 03,F
0613A:  MOVF   01,W
0613C:  ADDLW  04
0613E:  MOVWF  FE9
06140:  MOVLW  00
06142:  ADDWFC 03,W
06144:  MOVWF  FEA
06146:  CLRF   FEF
06148:  CLRF   1B
0614A:  BTFSC  FF2.7
0614C:  BSF    1B.7
0614E:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
06150:  CLRF   xF9
06152:  MOVFF  67F,6F8
06156:  CLRF   xFB
06158:  MOVLW  21
0615A:  MOVWF  xFA
0615C:  MOVLB  0
0615E:  CALL   035E
06162:  BTFSC  1B.7
06164:  BSF    FF2.7
06166:  MOVF   01,W
06168:  ADDLW  02
0616A:  MOVLB  6
0616C:  MOVWF  x80
0616E:  MOVLW  00
06170:  ADDWFC 02,W
06172:  MOVWF  x81
06174:  MOVLW  01
06176:  ADDWF  x80,W
06178:  MOVWF  01
0617A:  MOVLW  00
0617C:  ADDWFC x81,W
0617E:  MOVWF  03
06180:  MOVF   01,W
06182:  ADDLW  3E
06184:  MOVWF  01
06186:  MOVLW  01
06188:  ADDWFC 03,F
0618A:  MOVF   01,W
0618C:  ADDLW  08
0618E:  MOVWF  FE9
06190:  MOVLW  00
06192:  ADDWFC 03,W
06194:  MOVWF  FEA
06196:  BTFSS  FEF.0
06198:  BRA    62EC
0619A:  CLRF   1B
0619C:  BTFSC  FF2.7
0619E:  BSF    1B.7
061A0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
061A2:  CLRF   xF9
061A4:  MOVFF  67F,6F8
061A8:  CLRF   xFB
061AA:  MOVLW  21
061AC:  MOVWF  xFA
061AE:  MOVLB  0
061B0:  CALL   035E
061B4:  BTFSC  1B.7
061B6:  BSF    FF2.7
061B8:  MOVF   01,W
061BA:  ADDLW  02
061BC:  MOVLB  6
061BE:  MOVWF  x80
061C0:  MOVLW  00
061C2:  ADDWFC 02,W
061C4:  MOVWF  x81
061C6:  MOVLW  01
061C8:  ADDWF  x80,W
061CA:  MOVWF  01
061CC:  MOVLW  00
061CE:  ADDWFC x81,W
061D0:  MOVWF  03
061D2:  MOVF   01,W
061D4:  ADDLW  3E
061D6:  MOVWF  01
061D8:  MOVLW  01
061DA:  ADDWFC 03,F
061DC:  MOVF   01,W
061DE:  ADDLW  06
061E0:  MOVWF  FE9
061E2:  MOVLW  00
061E4:  ADDWFC 03,W
061E6:  MOVWF  FEA
061E8:  MOVFF  FEF,682
061EC:  CLRF   1B
061EE:  BTFSC  FF2.7
061F0:  BSF    1B.7
061F2:  BCF    FF2.7
061F4:  CLRF   xF9
061F6:  MOVFF  67F,6F8
061FA:  CLRF   xFB
061FC:  MOVLW  21
061FE:  MOVWF  xFA
06200:  MOVLB  0
06202:  CALL   035E
06206:  BTFSC  1B.7
06208:  BSF    FF2.7
0620A:  MOVF   01,W
0620C:  ADDLW  02
0620E:  MOVLB  6
06210:  MOVWF  x83
06212:  MOVLW  00
06214:  ADDWFC 02,W
06216:  MOVWF  x84
06218:  MOVLW  01
0621A:  ADDWF  x83,W
0621C:  MOVWF  01
0621E:  MOVLW  00
06220:  ADDWFC x84,W
06222:  MOVWF  03
06224:  MOVF   01,W
06226:  ADDLW  3E
06228:  MOVWF  01
0622A:  MOVLW  01
0622C:  ADDWFC 03,F
0622E:  MOVF   01,W
06230:  ADDLW  07
06232:  MOVWF  FE9
06234:  MOVLW  00
06236:  ADDWFC 03,W
06238:  MOVWF  FEA
0623A:  MOVFF  FEF,685
0623E:  MOVFF  682,686
06242:  MOVFF  685,687
06246:  MOVLB  0
06248:  RCALL  5D90
0624A:  CLRF   1B
0624C:  BTFSC  FF2.7
0624E:  BSF    1B.7
06250:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06252:  MOVLB  6
06254:  CLRF   xF9
06256:  MOVFF  67F,6F8
0625A:  CLRF   xFB
0625C:  MOVLW  21
0625E:  MOVWF  xFA
06260:  MOVLB  0
06262:  CALL   035E
06266:  BTFSC  1B.7
06268:  BSF    FF2.7
0626A:  MOVF   01,W
0626C:  ADDLW  02
0626E:  MOVLB  6
06270:  MOVWF  x80
06272:  MOVLW  00
06274:  ADDWFC 02,W
06276:  MOVWF  x81
06278:  MOVLW  01
0627A:  ADDWF  x80,W
0627C:  MOVWF  01
0627E:  MOVLW  00
06280:  ADDWFC x81,W
06282:  MOVWF  03
06284:  MOVF   01,W
06286:  ADDLW  3E
06288:  MOVWF  01
0628A:  MOVLW  01
0628C:  ADDWFC 03,F
0628E:  MOVF   01,W
06290:  ADDLW  08
06292:  MOVWF  FE9
06294:  MOVLW  00
06296:  ADDWFC 03,W
06298:  MOVWF  FEA
0629A:  BCF    FEF.0
0629C:  CLRF   1B
0629E:  BTFSC  FF2.7
062A0:  BSF    1B.7
062A2:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
062A4:  CLRF   xF9
062A6:  MOVFF  67F,6F8
062AA:  CLRF   xFB
062AC:  MOVLW  21
062AE:  MOVWF  xFA
062B0:  MOVLB  0
062B2:  CALL   035E
062B6:  BTFSC  1B.7
062B8:  BSF    FF2.7
062BA:  MOVF   01,W
062BC:  ADDLW  02
062BE:  MOVLB  6
062C0:  MOVWF  x80
062C2:  MOVLW  00
062C4:  ADDWFC 02,W
062C6:  MOVWF  x81
062C8:  MOVLW  01
062CA:  ADDWF  x80,W
062CC:  MOVWF  01
062CE:  MOVLW  00
062D0:  ADDWFC x81,W
062D2:  MOVWF  03
062D4:  MOVF   01,W
062D6:  ADDLW  3E
062D8:  MOVWF  01
062DA:  MOVLW  01
062DC:  ADDWFC 03,F
062DE:  MOVF   01,W
062E0:  ADDLW  07
062E2:  MOVWF  FE9
062E4:  MOVLW  00
062E6:  ADDWFC 03,W
062E8:  MOVWF  FEA
062EA:  CLRF   FEF
....................          } 
....................  
....................          break; 
062EC:  GOTO   6CDA
....................          case button_switch: 
062F0:  CLRF   1B
062F2:  BTFSC  FF2.7
062F4:  BSF    1B.7
062F6:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
062F8:  MOVLB  6
062FA:  CLRF   xF9
062FC:  MOVFF  67F,6F8
06300:  CLRF   xFB
06302:  MOVLW  21
06304:  MOVWF  xFA
06306:  MOVLB  0
06308:  CALL   035E
0630C:  BTFSC  1B.7
0630E:  BSF    FF2.7
06310:  MOVF   01,W
06312:  ADDLW  02
06314:  MOVLB  6
06316:  MOVWF  x80
06318:  MOVLW  00
0631A:  ADDWFC 02,W
0631C:  MOVWF  x81
0631E:  MOVLW  01
06320:  ADDWF  x80,W
06322:  MOVWF  01
06324:  MOVLW  00
06326:  ADDWFC x81,W
06328:  MOVWF  03
0632A:  MOVF   01,W
0632C:  ADDLW  3E
0632E:  MOVWF  01
06330:  MOVLW  01
06332:  ADDWFC 03,F
06334:  MOVF   01,W
06336:  ADDLW  02
06338:  MOVWF  FE9
0633A:  MOVLW  00
0633C:  ADDWFC 03,W
0633E:  MOVWF  FEA
06340:  BTFSS  FEF.0
06342:  BRA    6492
06344:  CLRF   1B
06346:  BTFSC  FF2.7
06348:  BSF    1B.7
0634A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
0634C:  CLRF   xF9
0634E:  MOVFF  67F,6F8
06352:  CLRF   xFB
06354:  MOVLW  21
06356:  MOVWF  xFA
06358:  MOVLB  0
0635A:  CALL   035E
0635E:  BTFSC  1B.7
06360:  BSF    FF2.7
06362:  MOVF   01,W
06364:  ADDLW  02
06366:  MOVLB  6
06368:  MOVWF  x80
0636A:  MOVLW  00
0636C:  ADDWFC 02,W
0636E:  MOVWF  x81
06370:  MOVLW  01
06372:  ADDWF  x80,W
06374:  MOVWF  01
06376:  MOVLW  00
06378:  ADDWFC x81,W
0637A:  MOVWF  03
0637C:  MOVF   01,W
0637E:  ADDLW  3E
06380:  MOVWF  01
06382:  MOVLW  01
06384:  ADDWFC 03,F
06386:  MOVFF  01,FE9
0638A:  MOVFF  03,FEA
0638E:  MOVFF  FEF,682
06392:  CLRF   1B
06394:  BTFSC  FF2.7
06396:  BSF    1B.7
06398:  BCF    FF2.7
0639A:  CLRF   xF9
0639C:  MOVFF  67F,6F8
063A0:  CLRF   xFB
063A2:  MOVLW  21
063A4:  MOVWF  xFA
063A6:  MOVLB  0
063A8:  CALL   035E
063AC:  BTFSC  1B.7
063AE:  BSF    FF2.7
063B0:  MOVF   01,W
063B2:  ADDLW  02
063B4:  MOVLB  6
063B6:  MOVWF  x83
063B8:  MOVLW  00
063BA:  ADDWFC 02,W
063BC:  MOVWF  x84
063BE:  MOVLW  01
063C0:  ADDWF  x83,W
063C2:  MOVWF  01
063C4:  MOVLW  00
063C6:  ADDWFC x84,W
063C8:  MOVWF  03
063CA:  MOVF   01,W
063CC:  ADDLW  3E
063CE:  MOVWF  01
063D0:  MOVLW  01
063D2:  ADDWFC 03,F
063D4:  MOVF   01,W
063D6:  ADDLW  01
063D8:  MOVWF  FE9
063DA:  MOVLW  00
063DC:  ADDWFC 03,W
063DE:  MOVWF  FEA
063E0:  MOVFF  FEF,685
063E4:  MOVFF  682,686
063E8:  MOVFF  685,687
063EC:  MOVLB  0
063EE:  RCALL  5D90
063F0:  CLRF   1B
063F2:  BTFSC  FF2.7
063F4:  BSF    1B.7
063F6:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
063F8:  MOVLB  6
063FA:  CLRF   xF9
063FC:  MOVFF  67F,6F8
06400:  CLRF   xFB
06402:  MOVLW  21
06404:  MOVWF  xFA
06406:  MOVLB  0
06408:  CALL   035E
0640C:  BTFSC  1B.7
0640E:  BSF    FF2.7
06410:  MOVF   01,W
06412:  ADDLW  02
06414:  MOVLB  6
06416:  MOVWF  x80
06418:  MOVLW  00
0641A:  ADDWFC 02,W
0641C:  MOVWF  x81
0641E:  MOVLW  01
06420:  ADDWF  x80,W
06422:  MOVWF  01
06424:  MOVLW  00
06426:  ADDWFC x81,W
06428:  MOVWF  03
0642A:  MOVF   01,W
0642C:  ADDLW  3E
0642E:  MOVWF  01
06430:  MOVLW  01
06432:  ADDWFC 03,F
06434:  MOVF   01,W
06436:  ADDLW  02
06438:  MOVWF  FE9
0643A:  MOVLW  00
0643C:  ADDWFC 03,W
0643E:  MOVWF  FEA
06440:  BCF    FEF.0
06442:  CLRF   1B
06444:  BTFSC  FF2.7
06446:  BSF    1B.7
06448:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
0644A:  CLRF   xF9
0644C:  MOVFF  67F,6F8
06450:  CLRF   xFB
06452:  MOVLW  21
06454:  MOVWF  xFA
06456:  MOVLB  0
06458:  CALL   035E
0645C:  BTFSC  1B.7
0645E:  BSF    FF2.7
06460:  MOVF   01,W
06462:  ADDLW  02
06464:  MOVLB  6
06466:  MOVWF  x80
06468:  MOVLW  00
0646A:  ADDWFC 02,W
0646C:  MOVWF  x81
0646E:  MOVLW  01
06470:  ADDWF  x80,W
06472:  MOVWF  01
06474:  MOVLW  00
06476:  ADDWFC x81,W
06478:  MOVWF  03
0647A:  MOVF   01,W
0647C:  ADDLW  3E
0647E:  MOVWF  01
06480:  MOVLW  01
06482:  ADDWFC 03,F
06484:  MOVF   01,W
06486:  ADDLW  01
06488:  MOVWF  FE9
0648A:  MOVLW  00
0648C:  ADDWFC 03,W
0648E:  MOVWF  FEA
06490:  CLRF   FEF
06492:  CLRF   1B
06494:  BTFSC  FF2.7
06496:  BSF    1B.7
06498:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
0649A:  CLRF   xF9
0649C:  MOVFF  67F,6F8
064A0:  CLRF   xFB
064A2:  MOVLW  21
064A4:  MOVWF  xFA
064A6:  MOVLB  0
064A8:  CALL   035E
064AC:  BTFSC  1B.7
064AE:  BSF    FF2.7
064B0:  MOVF   01,W
064B2:  ADDLW  02
064B4:  MOVLB  6
064B6:  MOVWF  x80
064B8:  MOVLW  00
064BA:  ADDWFC 02,W
064BC:  MOVWF  x81
064BE:  MOVLW  01
064C0:  ADDWF  x80,W
064C2:  MOVWF  01
064C4:  MOVLW  00
064C6:  ADDWFC x81,W
064C8:  MOVWF  03
064CA:  MOVF   01,W
064CC:  ADDLW  3E
064CE:  MOVWF  01
064D0:  MOVLW  01
064D2:  ADDWFC 03,F
064D4:  MOVF   01,W
064D6:  ADDLW  05
064D8:  MOVWF  FE9
064DA:  MOVLW  00
064DC:  ADDWFC 03,W
064DE:  MOVWF  FEA
064E0:  BTFSS  FEF.0
064E2:  BRA    6638
064E4:  CLRF   1B
064E6:  BTFSC  FF2.7
064E8:  BSF    1B.7
064EA:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
064EC:  CLRF   xF9
064EE:  MOVFF  67F,6F8
064F2:  CLRF   xFB
064F4:  MOVLW  21
064F6:  MOVWF  xFA
064F8:  MOVLB  0
064FA:  CALL   035E
064FE:  BTFSC  1B.7
06500:  BSF    FF2.7
06502:  MOVF   01,W
06504:  ADDLW  02
06506:  MOVLB  6
06508:  MOVWF  x80
0650A:  MOVLW  00
0650C:  ADDWFC 02,W
0650E:  MOVWF  x81
06510:  MOVLW  01
06512:  ADDWF  x80,W
06514:  MOVWF  01
06516:  MOVLW  00
06518:  ADDWFC x81,W
0651A:  MOVWF  03
0651C:  MOVF   01,W
0651E:  ADDLW  3E
06520:  MOVWF  01
06522:  MOVLW  01
06524:  ADDWFC 03,F
06526:  MOVF   01,W
06528:  ADDLW  03
0652A:  MOVWF  FE9
0652C:  MOVLW  00
0652E:  ADDWFC 03,W
06530:  MOVWF  FEA
06532:  MOVFF  FEF,682
06536:  CLRF   1B
06538:  BTFSC  FF2.7
0653A:  BSF    1B.7
0653C:  BCF    FF2.7
0653E:  CLRF   xF9
06540:  MOVFF  67F,6F8
06544:  CLRF   xFB
06546:  MOVLW  21
06548:  MOVWF  xFA
0654A:  MOVLB  0
0654C:  CALL   035E
06550:  BTFSC  1B.7
06552:  BSF    FF2.7
06554:  MOVF   01,W
06556:  ADDLW  02
06558:  MOVLB  6
0655A:  MOVWF  x83
0655C:  MOVLW  00
0655E:  ADDWFC 02,W
06560:  MOVWF  x84
06562:  MOVLW  01
06564:  ADDWF  x83,W
06566:  MOVWF  01
06568:  MOVLW  00
0656A:  ADDWFC x84,W
0656C:  MOVWF  03
0656E:  MOVF   01,W
06570:  ADDLW  3E
06572:  MOVWF  01
06574:  MOVLW  01
06576:  ADDWFC 03,F
06578:  MOVF   01,W
0657A:  ADDLW  04
0657C:  MOVWF  FE9
0657E:  MOVLW  00
06580:  ADDWFC 03,W
06582:  MOVWF  FEA
06584:  MOVFF  FEF,685
06588:  MOVFF  682,686
0658C:  MOVFF  685,687
06590:  MOVLB  0
06592:  CALL   5D90
06596:  CLRF   1B
06598:  BTFSC  FF2.7
0659A:  BSF    1B.7
0659C:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0659E:  MOVLB  6
065A0:  CLRF   xF9
065A2:  MOVFF  67F,6F8
065A6:  CLRF   xFB
065A8:  MOVLW  21
065AA:  MOVWF  xFA
065AC:  MOVLB  0
065AE:  CALL   035E
065B2:  BTFSC  1B.7
065B4:  BSF    FF2.7
065B6:  MOVF   01,W
065B8:  ADDLW  02
065BA:  MOVLB  6
065BC:  MOVWF  x80
065BE:  MOVLW  00
065C0:  ADDWFC 02,W
065C2:  MOVWF  x81
065C4:  MOVLW  01
065C6:  ADDWF  x80,W
065C8:  MOVWF  01
065CA:  MOVLW  00
065CC:  ADDWFC x81,W
065CE:  MOVWF  03
065D0:  MOVF   01,W
065D2:  ADDLW  3E
065D4:  MOVWF  01
065D6:  MOVLW  01
065D8:  ADDWFC 03,F
065DA:  MOVF   01,W
065DC:  ADDLW  05
065DE:  MOVWF  FE9
065E0:  MOVLW  00
065E2:  ADDWFC 03,W
065E4:  MOVWF  FEA
065E6:  BCF    FEF.0
065E8:  CLRF   1B
065EA:  BTFSC  FF2.7
065EC:  BSF    1B.7
065EE:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
065F0:  CLRF   xF9
065F2:  MOVFF  67F,6F8
065F6:  CLRF   xFB
065F8:  MOVLW  21
065FA:  MOVWF  xFA
065FC:  MOVLB  0
065FE:  CALL   035E
06602:  BTFSC  1B.7
06604:  BSF    FF2.7
06606:  MOVF   01,W
06608:  ADDLW  02
0660A:  MOVLB  6
0660C:  MOVWF  x80
0660E:  MOVLW  00
06610:  ADDWFC 02,W
06612:  MOVWF  x81
06614:  MOVLW  01
06616:  ADDWF  x80,W
06618:  MOVWF  01
0661A:  MOVLW  00
0661C:  ADDWFC x81,W
0661E:  MOVWF  03
06620:  MOVF   01,W
06622:  ADDLW  3E
06624:  MOVWF  01
06626:  MOVLW  01
06628:  ADDWFC 03,F
0662A:  MOVF   01,W
0662C:  ADDLW  04
0662E:  MOVWF  FE9
06630:  MOVLW  00
06632:  ADDWFC 03,W
06634:  MOVWF  FEA
06636:  CLRF   FEF
....................          } 
....................  
....................          break; 
06638:  BRA    6CDA
....................          case on_off_switch: 
0663A:  CLRF   1B
0663C:  BTFSC  FF2.7
0663E:  BSF    1B.7
06640:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
06642:  MOVLB  6
06644:  CLRF   xF9
06646:  MOVFF  67F,6F8
0664A:  CLRF   xFB
0664C:  MOVLW  21
0664E:  MOVWF  xFA
06650:  MOVLB  0
06652:  CALL   035E
06656:  BTFSC  1B.7
06658:  BSF    FF2.7
0665A:  MOVF   01,W
0665C:  ADDLW  02
0665E:  MOVLB  6
06660:  MOVWF  x80
06662:  MOVLW  00
06664:  ADDWFC 02,W
06666:  MOVWF  x81
06668:  MOVLW  01
0666A:  ADDWF  x80,W
0666C:  MOVWF  01
0666E:  MOVLW  00
06670:  ADDWFC x81,W
06672:  MOVWF  03
06674:  MOVF   01,W
06676:  ADDLW  3E
06678:  MOVWF  01
0667A:  MOVLW  01
0667C:  ADDWFC 03,F
0667E:  MOVF   01,W
06680:  ADDLW  02
06682:  MOVWF  FE9
06684:  MOVLW  00
06686:  ADDWFC 03,W
06688:  MOVWF  FEA
0668A:  BTFSS  FEF.0
0668C:  BRA    67DE
0668E:  CLRF   1B
06690:  BTFSC  FF2.7
06692:  BSF    1B.7
06694:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
06696:  CLRF   xF9
06698:  MOVFF  67F,6F8
0669C:  CLRF   xFB
0669E:  MOVLW  21
066A0:  MOVWF  xFA
066A2:  MOVLB  0
066A4:  CALL   035E
066A8:  BTFSC  1B.7
066AA:  BSF    FF2.7
066AC:  MOVF   01,W
066AE:  ADDLW  02
066B0:  MOVLB  6
066B2:  MOVWF  x80
066B4:  MOVLW  00
066B6:  ADDWFC 02,W
066B8:  MOVWF  x81
066BA:  MOVLW  01
066BC:  ADDWF  x80,W
066BE:  MOVWF  01
066C0:  MOVLW  00
066C2:  ADDWFC x81,W
066C4:  MOVWF  03
066C6:  MOVF   01,W
066C8:  ADDLW  3E
066CA:  MOVWF  01
066CC:  MOVLW  01
066CE:  ADDWFC 03,F
066D0:  MOVFF  01,FE9
066D4:  MOVFF  03,FEA
066D8:  MOVFF  FEF,682
066DC:  CLRF   1B
066DE:  BTFSC  FF2.7
066E0:  BSF    1B.7
066E2:  BCF    FF2.7
066E4:  CLRF   xF9
066E6:  MOVFF  67F,6F8
066EA:  CLRF   xFB
066EC:  MOVLW  21
066EE:  MOVWF  xFA
066F0:  MOVLB  0
066F2:  CALL   035E
066F6:  BTFSC  1B.7
066F8:  BSF    FF2.7
066FA:  MOVF   01,W
066FC:  ADDLW  02
066FE:  MOVLB  6
06700:  MOVWF  x83
06702:  MOVLW  00
06704:  ADDWFC 02,W
06706:  MOVWF  x84
06708:  MOVLW  01
0670A:  ADDWF  x83,W
0670C:  MOVWF  01
0670E:  MOVLW  00
06710:  ADDWFC x84,W
06712:  MOVWF  03
06714:  MOVF   01,W
06716:  ADDLW  3E
06718:  MOVWF  01
0671A:  MOVLW  01
0671C:  ADDWFC 03,F
0671E:  MOVF   01,W
06720:  ADDLW  01
06722:  MOVWF  FE9
06724:  MOVLW  00
06726:  ADDWFC 03,W
06728:  MOVWF  FEA
0672A:  MOVFF  FEF,685
0672E:  MOVFF  682,686
06732:  MOVFF  685,687
06736:  MOVLB  0
06738:  CALL   5D90
0673C:  CLRF   1B
0673E:  BTFSC  FF2.7
06740:  BSF    1B.7
06742:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06744:  MOVLB  6
06746:  CLRF   xF9
06748:  MOVFF  67F,6F8
0674C:  CLRF   xFB
0674E:  MOVLW  21
06750:  MOVWF  xFA
06752:  MOVLB  0
06754:  CALL   035E
06758:  BTFSC  1B.7
0675A:  BSF    FF2.7
0675C:  MOVF   01,W
0675E:  ADDLW  02
06760:  MOVLB  6
06762:  MOVWF  x80
06764:  MOVLW  00
06766:  ADDWFC 02,W
06768:  MOVWF  x81
0676A:  MOVLW  01
0676C:  ADDWF  x80,W
0676E:  MOVWF  01
06770:  MOVLW  00
06772:  ADDWFC x81,W
06774:  MOVWF  03
06776:  MOVF   01,W
06778:  ADDLW  3E
0677A:  MOVWF  01
0677C:  MOVLW  01
0677E:  ADDWFC 03,F
06780:  MOVF   01,W
06782:  ADDLW  02
06784:  MOVWF  FE9
06786:  MOVLW  00
06788:  ADDWFC 03,W
0678A:  MOVWF  FEA
0678C:  BCF    FEF.0
0678E:  CLRF   1B
06790:  BTFSC  FF2.7
06792:  BSF    1B.7
06794:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
06796:  CLRF   xF9
06798:  MOVFF  67F,6F8
0679C:  CLRF   xFB
0679E:  MOVLW  21
067A0:  MOVWF  xFA
067A2:  MOVLB  0
067A4:  CALL   035E
067A8:  BTFSC  1B.7
067AA:  BSF    FF2.7
067AC:  MOVF   01,W
067AE:  ADDLW  02
067B0:  MOVLB  6
067B2:  MOVWF  x80
067B4:  MOVLW  00
067B6:  ADDWFC 02,W
067B8:  MOVWF  x81
067BA:  MOVLW  01
067BC:  ADDWF  x80,W
067BE:  MOVWF  01
067C0:  MOVLW  00
067C2:  ADDWFC x81,W
067C4:  MOVWF  03
067C6:  MOVF   01,W
067C8:  ADDLW  3E
067CA:  MOVWF  01
067CC:  MOVLW  01
067CE:  ADDWFC 03,F
067D0:  MOVF   01,W
067D2:  ADDLW  01
067D4:  MOVWF  FE9
067D6:  MOVLW  00
067D8:  ADDWFC 03,W
067DA:  MOVWF  FEA
067DC:  CLRF   FEF
067DE:  CLRF   1B
067E0:  BTFSC  FF2.7
067E2:  BSF    1B.7
067E4:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
067E6:  CLRF   xF9
067E8:  MOVFF  67F,6F8
067EC:  CLRF   xFB
067EE:  MOVLW  21
067F0:  MOVWF  xFA
067F2:  MOVLB  0
067F4:  CALL   035E
067F8:  BTFSC  1B.7
067FA:  BSF    FF2.7
067FC:  MOVF   01,W
067FE:  ADDLW  02
06800:  MOVLB  6
06802:  MOVWF  x80
06804:  MOVLW  00
06806:  ADDWFC 02,W
06808:  MOVWF  x81
0680A:  MOVLW  01
0680C:  ADDWF  x80,W
0680E:  MOVWF  01
06810:  MOVLW  00
06812:  ADDWFC x81,W
06814:  MOVWF  03
06816:  MOVF   01,W
06818:  ADDLW  3E
0681A:  MOVWF  01
0681C:  MOVLW  01
0681E:  ADDWFC 03,F
06820:  MOVF   01,W
06822:  ADDLW  05
06824:  MOVWF  FE9
06826:  MOVLW  00
06828:  ADDWFC 03,W
0682A:  MOVWF  FEA
0682C:  BTFSS  FEF.0
0682E:  BRA    6984
06830:  CLRF   1B
06832:  BTFSC  FF2.7
06834:  BSF    1B.7
06836:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
06838:  CLRF   xF9
0683A:  MOVFF  67F,6F8
0683E:  CLRF   xFB
06840:  MOVLW  21
06842:  MOVWF  xFA
06844:  MOVLB  0
06846:  CALL   035E
0684A:  BTFSC  1B.7
0684C:  BSF    FF2.7
0684E:  MOVF   01,W
06850:  ADDLW  02
06852:  MOVLB  6
06854:  MOVWF  x80
06856:  MOVLW  00
06858:  ADDWFC 02,W
0685A:  MOVWF  x81
0685C:  MOVLW  01
0685E:  ADDWF  x80,W
06860:  MOVWF  01
06862:  MOVLW  00
06864:  ADDWFC x81,W
06866:  MOVWF  03
06868:  MOVF   01,W
0686A:  ADDLW  3E
0686C:  MOVWF  01
0686E:  MOVLW  01
06870:  ADDWFC 03,F
06872:  MOVF   01,W
06874:  ADDLW  03
06876:  MOVWF  FE9
06878:  MOVLW  00
0687A:  ADDWFC 03,W
0687C:  MOVWF  FEA
0687E:  MOVFF  FEF,682
06882:  CLRF   1B
06884:  BTFSC  FF2.7
06886:  BSF    1B.7
06888:  BCF    FF2.7
0688A:  CLRF   xF9
0688C:  MOVFF  67F,6F8
06890:  CLRF   xFB
06892:  MOVLW  21
06894:  MOVWF  xFA
06896:  MOVLB  0
06898:  CALL   035E
0689C:  BTFSC  1B.7
0689E:  BSF    FF2.7
068A0:  MOVF   01,W
068A2:  ADDLW  02
068A4:  MOVLB  6
068A6:  MOVWF  x83
068A8:  MOVLW  00
068AA:  ADDWFC 02,W
068AC:  MOVWF  x84
068AE:  MOVLW  01
068B0:  ADDWF  x83,W
068B2:  MOVWF  01
068B4:  MOVLW  00
068B6:  ADDWFC x84,W
068B8:  MOVWF  03
068BA:  MOVF   01,W
068BC:  ADDLW  3E
068BE:  MOVWF  01
068C0:  MOVLW  01
068C2:  ADDWFC 03,F
068C4:  MOVF   01,W
068C6:  ADDLW  04
068C8:  MOVWF  FE9
068CA:  MOVLW  00
068CC:  ADDWFC 03,W
068CE:  MOVWF  FEA
068D0:  MOVFF  FEF,685
068D4:  MOVFF  682,686
068D8:  MOVFF  685,687
068DC:  MOVLB  0
068DE:  CALL   5D90
068E2:  CLRF   1B
068E4:  BTFSC  FF2.7
068E6:  BSF    1B.7
068E8:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
068EA:  MOVLB  6
068EC:  CLRF   xF9
068EE:  MOVFF  67F,6F8
068F2:  CLRF   xFB
068F4:  MOVLW  21
068F6:  MOVWF  xFA
068F8:  MOVLB  0
068FA:  CALL   035E
068FE:  BTFSC  1B.7
06900:  BSF    FF2.7
06902:  MOVF   01,W
06904:  ADDLW  02
06906:  MOVLB  6
06908:  MOVWF  x80
0690A:  MOVLW  00
0690C:  ADDWFC 02,W
0690E:  MOVWF  x81
06910:  MOVLW  01
06912:  ADDWF  x80,W
06914:  MOVWF  01
06916:  MOVLW  00
06918:  ADDWFC x81,W
0691A:  MOVWF  03
0691C:  MOVF   01,W
0691E:  ADDLW  3E
06920:  MOVWF  01
06922:  MOVLW  01
06924:  ADDWFC 03,F
06926:  MOVF   01,W
06928:  ADDLW  05
0692A:  MOVWF  FE9
0692C:  MOVLW  00
0692E:  ADDWFC 03,W
06930:  MOVWF  FEA
06932:  BCF    FEF.0
06934:  CLRF   1B
06936:  BTFSC  FF2.7
06938:  BSF    1B.7
0693A:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
0693C:  CLRF   xF9
0693E:  MOVFF  67F,6F8
06942:  CLRF   xFB
06944:  MOVLW  21
06946:  MOVWF  xFA
06948:  MOVLB  0
0694A:  CALL   035E
0694E:  BTFSC  1B.7
06950:  BSF    FF2.7
06952:  MOVF   01,W
06954:  ADDLW  02
06956:  MOVLB  6
06958:  MOVWF  x80
0695A:  MOVLW  00
0695C:  ADDWFC 02,W
0695E:  MOVWF  x81
06960:  MOVLW  01
06962:  ADDWF  x80,W
06964:  MOVWF  01
06966:  MOVLW  00
06968:  ADDWFC x81,W
0696A:  MOVWF  03
0696C:  MOVF   01,W
0696E:  ADDLW  3E
06970:  MOVWF  01
06972:  MOVLW  01
06974:  ADDWFC 03,F
06976:  MOVF   01,W
06978:  ADDLW  04
0697A:  MOVWF  FE9
0697C:  MOVLW  00
0697E:  ADDWFC 03,W
06980:  MOVWF  FEA
06982:  CLRF   FEF
....................          } 
....................  
....................          break; 
06984:  BRA    6CDA
....................          case timer: 
06986:  CLRF   1B
06988:  BTFSC  FF2.7
0698A:  BSF    1B.7
0698C:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
0698E:  MOVLB  6
06990:  CLRF   xF9
06992:  MOVFF  67F,6F8
06996:  CLRF   xFB
06998:  MOVLW  21
0699A:  MOVWF  xFA
0699C:  MOVLB  0
0699E:  CALL   035E
069A2:  BTFSC  1B.7
069A4:  BSF    FF2.7
069A6:  MOVF   01,W
069A8:  ADDLW  02
069AA:  MOVLB  6
069AC:  MOVWF  x80
069AE:  MOVLW  00
069B0:  ADDWFC 02,W
069B2:  MOVWF  x81
069B4:  MOVLW  01
069B6:  ADDWF  x80,W
069B8:  MOVWF  01
069BA:  MOVLW  00
069BC:  ADDWFC x81,W
069BE:  MOVWF  03
069C0:  MOVF   01,W
069C2:  ADDLW  3E
069C4:  MOVWF  01
069C6:  MOVLW  01
069C8:  ADDWFC 03,F
069CA:  MOVF   01,W
069CC:  ADDLW  05
069CE:  MOVWF  FE9
069D0:  MOVLW  00
069D2:  ADDWFC 03,W
069D4:  MOVWF  FEA
069D6:  BTFSS  FEF.0
069D8:  BRA    6B2E
069DA:  CLRF   1B
069DC:  BTFSC  FF2.7
069DE:  BSF    1B.7
069E0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
069E2:  CLRF   xF9
069E4:  MOVFF  67F,6F8
069E8:  CLRF   xFB
069EA:  MOVLW  21
069EC:  MOVWF  xFA
069EE:  MOVLB  0
069F0:  CALL   035E
069F4:  BTFSC  1B.7
069F6:  BSF    FF2.7
069F8:  MOVF   01,W
069FA:  ADDLW  02
069FC:  MOVLB  6
069FE:  MOVWF  x80
06A00:  MOVLW  00
06A02:  ADDWFC 02,W
06A04:  MOVWF  x81
06A06:  MOVLW  01
06A08:  ADDWF  x80,W
06A0A:  MOVWF  01
06A0C:  MOVLW  00
06A0E:  ADDWFC x81,W
06A10:  MOVWF  03
06A12:  MOVF   01,W
06A14:  ADDLW  3E
06A16:  MOVWF  01
06A18:  MOVLW  01
06A1A:  ADDWFC 03,F
06A1C:  MOVF   01,W
06A1E:  ADDLW  03
06A20:  MOVWF  FE9
06A22:  MOVLW  00
06A24:  ADDWFC 03,W
06A26:  MOVWF  FEA
06A28:  MOVFF  FEF,682
06A2C:  CLRF   1B
06A2E:  BTFSC  FF2.7
06A30:  BSF    1B.7
06A32:  BCF    FF2.7
06A34:  CLRF   xF9
06A36:  MOVFF  67F,6F8
06A3A:  CLRF   xFB
06A3C:  MOVLW  21
06A3E:  MOVWF  xFA
06A40:  MOVLB  0
06A42:  CALL   035E
06A46:  BTFSC  1B.7
06A48:  BSF    FF2.7
06A4A:  MOVF   01,W
06A4C:  ADDLW  02
06A4E:  MOVLB  6
06A50:  MOVWF  x83
06A52:  MOVLW  00
06A54:  ADDWFC 02,W
06A56:  MOVWF  x84
06A58:  MOVLW  01
06A5A:  ADDWF  x83,W
06A5C:  MOVWF  01
06A5E:  MOVLW  00
06A60:  ADDWFC x84,W
06A62:  MOVWF  03
06A64:  MOVF   01,W
06A66:  ADDLW  3E
06A68:  MOVWF  01
06A6A:  MOVLW  01
06A6C:  ADDWFC 03,F
06A6E:  MOVF   01,W
06A70:  ADDLW  04
06A72:  MOVWF  FE9
06A74:  MOVLW  00
06A76:  ADDWFC 03,W
06A78:  MOVWF  FEA
06A7A:  MOVFF  FEF,685
06A7E:  MOVFF  682,686
06A82:  MOVFF  685,687
06A86:  MOVLB  0
06A88:  CALL   5D90
06A8C:  CLRF   1B
06A8E:  BTFSC  FF2.7
06A90:  BSF    1B.7
06A92:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
06A94:  MOVLB  6
06A96:  CLRF   xF9
06A98:  MOVFF  67F,6F8
06A9C:  CLRF   xFB
06A9E:  MOVLW  21
06AA0:  MOVWF  xFA
06AA2:  MOVLB  0
06AA4:  CALL   035E
06AA8:  BTFSC  1B.7
06AAA:  BSF    FF2.7
06AAC:  MOVF   01,W
06AAE:  ADDLW  02
06AB0:  MOVLB  6
06AB2:  MOVWF  x80
06AB4:  MOVLW  00
06AB6:  ADDWFC 02,W
06AB8:  MOVWF  x81
06ABA:  MOVLW  01
06ABC:  ADDWF  x80,W
06ABE:  MOVWF  01
06AC0:  MOVLW  00
06AC2:  ADDWFC x81,W
06AC4:  MOVWF  03
06AC6:  MOVF   01,W
06AC8:  ADDLW  3E
06ACA:  MOVWF  01
06ACC:  MOVLW  01
06ACE:  ADDWFC 03,F
06AD0:  MOVF   01,W
06AD2:  ADDLW  05
06AD4:  MOVWF  FE9
06AD6:  MOVLW  00
06AD8:  ADDWFC 03,W
06ADA:  MOVWF  FEA
06ADC:  BCF    FEF.0
06ADE:  CLRF   1B
06AE0:  BTFSC  FF2.7
06AE2:  BSF    1B.7
06AE4:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
06AE6:  CLRF   xF9
06AE8:  MOVFF  67F,6F8
06AEC:  CLRF   xFB
06AEE:  MOVLW  21
06AF0:  MOVWF  xFA
06AF2:  MOVLB  0
06AF4:  CALL   035E
06AF8:  BTFSC  1B.7
06AFA:  BSF    FF2.7
06AFC:  MOVF   01,W
06AFE:  ADDLW  02
06B00:  MOVLB  6
06B02:  MOVWF  x80
06B04:  MOVLW  00
06B06:  ADDWFC 02,W
06B08:  MOVWF  x81
06B0A:  MOVLW  01
06B0C:  ADDWF  x80,W
06B0E:  MOVWF  01
06B10:  MOVLW  00
06B12:  ADDWFC x81,W
06B14:  MOVWF  03
06B16:  MOVF   01,W
06B18:  ADDLW  3E
06B1A:  MOVWF  01
06B1C:  MOVLW  01
06B1E:  ADDWFC 03,F
06B20:  MOVF   01,W
06B22:  ADDLW  04
06B24:  MOVWF  FE9
06B26:  MOVLW  00
06B28:  ADDWFC 03,W
06B2A:  MOVWF  FEA
06B2C:  CLRF   FEF
06B2E:  CLRF   1B
06B30:  BTFSC  FF2.7
06B32:  BSF    1B.7
06B34:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
06B36:  CLRF   xF9
06B38:  MOVFF  67F,6F8
06B3C:  CLRF   xFB
06B3E:  MOVLW  21
06B40:  MOVWF  xFA
06B42:  MOVLB  0
06B44:  CALL   035E
06B48:  BTFSC  1B.7
06B4A:  BSF    FF2.7
06B4C:  MOVF   01,W
06B4E:  ADDLW  02
06B50:  MOVLB  6
06B52:  MOVWF  x80
06B54:  MOVLW  00
06B56:  ADDWFC 02,W
06B58:  MOVWF  x81
06B5A:  MOVLW  01
06B5C:  ADDWF  x80,W
06B5E:  MOVWF  01
06B60:  MOVLW  00
06B62:  ADDWFC x81,W
06B64:  MOVWF  03
06B66:  MOVF   01,W
06B68:  ADDLW  3E
06B6A:  MOVWF  01
06B6C:  MOVLW  01
06B6E:  ADDWFC 03,F
06B70:  MOVF   01,W
06B72:  ADDLW  08
06B74:  MOVWF  FE9
06B76:  MOVLW  00
06B78:  ADDWFC 03,W
06B7A:  MOVWF  FEA
06B7C:  BTFSS  FEF.0
06B7E:  BRA    6CD4
06B80:  CLRF   1B
06B82:  BTFSC  FF2.7
06B84:  BSF    1B.7
06B86:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
06B88:  CLRF   xF9
06B8A:  MOVFF  67F,6F8
06B8E:  CLRF   xFB
06B90:  MOVLW  21
06B92:  MOVWF  xFA
06B94:  MOVLB  0
06B96:  CALL   035E
06B9A:  BTFSC  1B.7
06B9C:  BSF    FF2.7
06B9E:  MOVF   01,W
06BA0:  ADDLW  02
06BA2:  MOVLB  6
06BA4:  MOVWF  x80
06BA6:  MOVLW  00
06BA8:  ADDWFC 02,W
06BAA:  MOVWF  x81
06BAC:  MOVLW  01
06BAE:  ADDWF  x80,W
06BB0:  MOVWF  01
06BB2:  MOVLW  00
06BB4:  ADDWFC x81,W
06BB6:  MOVWF  03
06BB8:  MOVF   01,W
06BBA:  ADDLW  3E
06BBC:  MOVWF  01
06BBE:  MOVLW  01
06BC0:  ADDWFC 03,F
06BC2:  MOVF   01,W
06BC4:  ADDLW  06
06BC6:  MOVWF  FE9
06BC8:  MOVLW  00
06BCA:  ADDWFC 03,W
06BCC:  MOVWF  FEA
06BCE:  MOVFF  FEF,682
06BD2:  CLRF   1B
06BD4:  BTFSC  FF2.7
06BD6:  BSF    1B.7
06BD8:  BCF    FF2.7
06BDA:  CLRF   xF9
06BDC:  MOVFF  67F,6F8
06BE0:  CLRF   xFB
06BE2:  MOVLW  21
06BE4:  MOVWF  xFA
06BE6:  MOVLB  0
06BE8:  CALL   035E
06BEC:  BTFSC  1B.7
06BEE:  BSF    FF2.7
06BF0:  MOVF   01,W
06BF2:  ADDLW  02
06BF4:  MOVLB  6
06BF6:  MOVWF  x83
06BF8:  MOVLW  00
06BFA:  ADDWFC 02,W
06BFC:  MOVWF  x84
06BFE:  MOVLW  01
06C00:  ADDWF  x83,W
06C02:  MOVWF  01
06C04:  MOVLW  00
06C06:  ADDWFC x84,W
06C08:  MOVWF  03
06C0A:  MOVF   01,W
06C0C:  ADDLW  3E
06C0E:  MOVWF  01
06C10:  MOVLW  01
06C12:  ADDWFC 03,F
06C14:  MOVF   01,W
06C16:  ADDLW  07
06C18:  MOVWF  FE9
06C1A:  MOVLW  00
06C1C:  ADDWFC 03,W
06C1E:  MOVWF  FEA
06C20:  MOVFF  FEF,685
06C24:  MOVFF  682,686
06C28:  MOVFF  685,687
06C2C:  MOVLB  0
06C2E:  CALL   5D90
06C32:  CLRF   1B
06C34:  BTFSC  FF2.7
06C36:  BSF    1B.7
06C38:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
06C3A:  MOVLB  6
06C3C:  CLRF   xF9
06C3E:  MOVFF  67F,6F8
06C42:  CLRF   xFB
06C44:  MOVLW  21
06C46:  MOVWF  xFA
06C48:  MOVLB  0
06C4A:  CALL   035E
06C4E:  BTFSC  1B.7
06C50:  BSF    FF2.7
06C52:  MOVF   01,W
06C54:  ADDLW  02
06C56:  MOVLB  6
06C58:  MOVWF  x80
06C5A:  MOVLW  00
06C5C:  ADDWFC 02,W
06C5E:  MOVWF  x81
06C60:  MOVLW  01
06C62:  ADDWF  x80,W
06C64:  MOVWF  01
06C66:  MOVLW  00
06C68:  ADDWFC x81,W
06C6A:  MOVWF  03
06C6C:  MOVF   01,W
06C6E:  ADDLW  3E
06C70:  MOVWF  01
06C72:  MOVLW  01
06C74:  ADDWFC 03,F
06C76:  MOVF   01,W
06C78:  ADDLW  08
06C7A:  MOVWF  FE9
06C7C:  MOVLW  00
06C7E:  ADDWFC 03,W
06C80:  MOVWF  FEA
06C82:  BCF    FEF.0
06C84:  CLRF   1B
06C86:  BTFSC  FF2.7
06C88:  BSF    1B.7
06C8A:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
06C8C:  CLRF   xF9
06C8E:  MOVFF  67F,6F8
06C92:  CLRF   xFB
06C94:  MOVLW  21
06C96:  MOVWF  xFA
06C98:  MOVLB  0
06C9A:  CALL   035E
06C9E:  BTFSC  1B.7
06CA0:  BSF    FF2.7
06CA2:  MOVF   01,W
06CA4:  ADDLW  02
06CA6:  MOVLB  6
06CA8:  MOVWF  x80
06CAA:  MOVLW  00
06CAC:  ADDWFC 02,W
06CAE:  MOVWF  x81
06CB0:  MOVLW  01
06CB2:  ADDWF  x80,W
06CB4:  MOVWF  01
06CB6:  MOVLW  00
06CB8:  ADDWFC x81,W
06CBA:  MOVWF  03
06CBC:  MOVF   01,W
06CBE:  ADDLW  3E
06CC0:  MOVWF  01
06CC2:  MOVLW  01
06CC4:  ADDWFC 03,F
06CC6:  MOVF   01,W
06CC8:  ADDLW  07
06CCA:  MOVWF  FE9
06CCC:  MOVLW  00
06CCE:  ADDWFC 03,W
06CD0:  MOVWF  FEA
06CD2:  CLRF   FEF
....................          } 
....................          break; 
06CD4:  BRA    6CDA
....................          default: 
....................          break; 
06CD6:  MOVLB  6
06CD8:  BRA    6CDA
....................       } 
....................    } 
06CDA:  INCF   x7F,F
06CDC:  GOTO   5DA2
.................... } 
06CE0:  MOVLB  0
06CE2:  GOTO   80E0 (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
06CE6:  MOVLB  6
06CE8:  CLRF   x7F
06CEA:  MOVLB  1
06CEC:  MOVF   x3F,W
06CEE:  MOVLB  6
06CF0:  SUBWF  x7F,W
06CF2:  BTFSC  FD8.0
06CF4:  GOTO   74FA
06CF8:  CLRF   1B
06CFA:  BTFSC  FF2.7
06CFC:  BSF    1B.7
06CFE:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
06D00:  CLRF   xF9
06D02:  MOVFF  67F,6F8
06D06:  CLRF   xFB
06D08:  MOVLW  2F
06D0A:  MOVWF  xFA
06D0C:  MOVLB  0
06D0E:  CALL   035E
06D12:  BTFSC  1B.7
06D14:  BSF    FF2.7
06D16:  MOVFF  02,03
06D1A:  MOVF   01,W
06D1C:  ADDLW  8A
06D1E:  MOVWF  01
06D20:  MOVLW  02
06D22:  ADDWFC 03,F
06D24:  MOVFF  01,FE9
06D28:  MOVFF  03,FEA
06D2C:  MOVF   FEF,W
06D2E:  XORLW  66
06D30:  BZ    6D34
06D32:  BRA    74F2
....................            case shutter: 
06D34:  CLRF   1B
06D36:  BTFSC  FF2.7
06D38:  BSF    1B.7
06D3A:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
06D3C:  MOVLB  6
06D3E:  CLRF   xF9
06D40:  MOVFF  67F,6F8
06D44:  CLRF   xFB
06D46:  MOVLW  2F
06D48:  MOVWF  xFA
06D4A:  MOVLB  0
06D4C:  CALL   035E
06D50:  BTFSC  1B.7
06D52:  BSF    FF2.7
06D54:  MOVF   01,W
06D56:  ADDLW  4C
06D58:  MOVLB  6
06D5A:  MOVWF  x80
06D5C:  MOVLW  01
06D5E:  ADDWFC 02,W
06D60:  MOVWF  x81
06D62:  MOVLW  01
06D64:  ADDWF  x80,W
06D66:  MOVWF  01
06D68:  MOVLW  00
06D6A:  ADDWFC x81,W
06D6C:  MOVWF  03
06D6E:  MOVF   01,W
06D70:  ADDLW  3E
06D72:  MOVWF  01
06D74:  MOVLW  01
06D76:  ADDWFC 03,F
06D78:  MOVF   01,W
06D7A:  ADDLW  2D
06D7C:  MOVWF  FE9
06D7E:  MOVLW  00
06D80:  ADDWFC 03,W
06D82:  MOVWF  FEA
06D84:  MOVF   FEF,W
06D86:  SUBLW  04
06D88:  BTFSC  FD8.2
06D8A:  BRA    74EE
06D8C:  CLRF   1B
06D8E:  BTFSC  FF2.7
06D90:  BSF    1B.7
06D92:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
06D94:  CLRF   xF9
06D96:  MOVFF  67F,6F8
06D9A:  CLRF   xFB
06D9C:  MOVLW  2F
06D9E:  MOVWF  xFA
06DA0:  MOVLB  0
06DA2:  CALL   035E
06DA6:  BTFSC  1B.7
06DA8:  BSF    FF2.7
06DAA:  MOVF   01,W
06DAC:  ADDLW  4C
06DAE:  MOVLB  6
06DB0:  MOVWF  x80
06DB2:  MOVLW  01
06DB4:  ADDWFC 02,W
06DB6:  MOVWF  x81
06DB8:  MOVLW  01
06DBA:  ADDWF  x80,W
06DBC:  MOVWF  01
06DBE:  MOVLW  00
06DC0:  ADDWFC x81,W
06DC2:  MOVWF  03
06DC4:  MOVF   01,W
06DC6:  ADDLW  3E
06DC8:  MOVWF  01
06DCA:  MOVLW  01
06DCC:  ADDWFC 03,F
06DCE:  MOVF   01,W
06DD0:  ADDLW  2A
06DD2:  MOVWF  FE9
06DD4:  MOVLW  00
06DD6:  ADDWFC 03,W
06DD8:  MOVWF  FEA
06DDA:  INCF   FEF,F
06DDC:  CLRF   1B
06DDE:  BTFSC  FF2.7
06DE0:  BSF    1B.7
06DE2:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
06DE4:  CLRF   xF9
06DE6:  MOVFF  67F,6F8
06DEA:  CLRF   xFB
06DEC:  MOVLW  2F
06DEE:  MOVWF  xFA
06DF0:  MOVLB  0
06DF2:  CALL   035E
06DF6:  BTFSC  1B.7
06DF8:  BSF    FF2.7
06DFA:  MOVF   01,W
06DFC:  ADDLW  4C
06DFE:  MOVLB  6
06E00:  MOVWF  x80
06E02:  MOVLW  01
06E04:  ADDWFC 02,W
06E06:  MOVWF  x81
06E08:  MOVLW  01
06E0A:  ADDWF  x80,W
06E0C:  MOVWF  01
06E0E:  MOVLW  00
06E10:  ADDWFC x81,W
06E12:  MOVWF  03
06E14:  MOVF   01,W
06E16:  ADDLW  3E
06E18:  MOVWF  01
06E1A:  MOVLW  01
06E1C:  ADDWFC 03,F
06E1E:  MOVF   01,W
06E20:  ADDLW  2D
06E22:  MOVWF  FE9
06E24:  MOVLW  00
06E26:  ADDWFC 03,W
06E28:  MOVWF  FEA
06E2A:  MOVF   FEF,F
06E2C:  BTFSS  FD8.2
06E2E:  BRA    6FA0
06E30:  CLRF   1B
06E32:  BTFSC  FF2.7
06E34:  BSF    1B.7
06E36:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
06E38:  CLRF   xF9
06E3A:  MOVFF  67F,6F8
06E3E:  CLRF   xFB
06E40:  MOVLW  2F
06E42:  MOVWF  xFA
06E44:  MOVLB  0
06E46:  CALL   035E
06E4A:  BTFSC  1B.7
06E4C:  BSF    FF2.7
06E4E:  MOVF   01,W
06E50:  ADDLW  4C
06E52:  MOVLB  6
06E54:  MOVWF  x80
06E56:  MOVLW  01
06E58:  ADDWFC 02,W
06E5A:  MOVWF  x81
06E5C:  MOVLW  01
06E5E:  ADDWF  x80,W
06E60:  MOVWF  01
06E62:  MOVLW  00
06E64:  ADDWFC x81,W
06E66:  MOVWF  03
06E68:  MOVF   01,W
06E6A:  ADDLW  3E
06E6C:  MOVWF  01
06E6E:  MOVLW  01
06E70:  ADDWFC 03,F
06E72:  MOVF   01,W
06E74:  ADDLW  2A
06E76:  MOVWF  FE9
06E78:  MOVLW  00
06E7A:  ADDWFC 03,W
06E7C:  MOVWF  FEA
06E7E:  MOVFF  FEF,682
06E82:  CLRF   1B
06E84:  BTFSC  FF2.7
06E86:  BSF    1B.7
06E88:  BCF    FF2.7
06E8A:  CLRF   xF9
06E8C:  MOVFF  67F,6F8
06E90:  CLRF   xFB
06E92:  MOVLW  2F
06E94:  MOVWF  xFA
06E96:  MOVLB  0
06E98:  CALL   035E
06E9C:  BTFSC  1B.7
06E9E:  BSF    FF2.7
06EA0:  MOVF   01,W
06EA2:  ADDLW  4C
06EA4:  MOVLB  6
06EA6:  MOVWF  x83
06EA8:  MOVLW  01
06EAA:  ADDWFC 02,W
06EAC:  MOVWF  x84
06EAE:  MOVLW  01
06EB0:  ADDWF  x83,W
06EB2:  MOVWF  01
06EB4:  MOVLW  00
06EB6:  ADDWFC x84,W
06EB8:  MOVWF  03
06EBA:  MOVF   01,W
06EBC:  ADDLW  3E
06EBE:  MOVWF  01
06EC0:  MOVLW  01
06EC2:  ADDWFC 03,F
06EC4:  MOVF   01,W
06EC6:  ADDLW  2C
06EC8:  MOVWF  FE9
06ECA:  MOVLW  00
06ECC:  ADDWFC 03,W
06ECE:  MOVWF  FEA
06ED0:  MOVF   FEF,W
06ED2:  SUBWF  x82,W
06ED4:  BZ    6FA0
06ED6:  BNC   6FA0
06ED8:  CLRF   1B
06EDA:  BTFSC  FF2.7
06EDC:  BSF    1B.7
06EDE:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
06EE0:  CLRF   xF9
06EE2:  MOVFF  67F,6F8
06EE6:  CLRF   xFB
06EE8:  MOVLW  2F
06EEA:  MOVWF  xFA
06EEC:  MOVLB  0
06EEE:  CALL   035E
06EF2:  BTFSC  1B.7
06EF4:  BSF    FF2.7
06EF6:  MOVF   01,W
06EF8:  ADDLW  4C
06EFA:  MOVLB  6
06EFC:  MOVWF  x80
06EFE:  MOVLW  01
06F00:  ADDWFC 02,W
06F02:  MOVWF  x81
06F04:  MOVLW  01
06F06:  ADDWF  x80,W
06F08:  MOVWF  01
06F0A:  MOVLW  00
06F0C:  ADDWFC x81,W
06F0E:  MOVWF  03
06F10:  MOVF   01,W
06F12:  ADDLW  3E
06F14:  MOVWF  01
06F16:  MOVLW  01
06F18:  ADDWFC 03,F
06F1A:  MOVF   01,W
06F1C:  ADDLW  2D
06F1E:  MOVWF  FE9
06F20:  MOVLW  00
06F22:  ADDWFC 03,W
06F24:  MOVWF  FEA
06F26:  MOVLW  04
06F28:  MOVWF  FEF
06F2A:  CLRF   1B
06F2C:  BTFSC  FF2.7
06F2E:  BSF    1B.7
06F30:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
06F32:  CLRF   xF9
06F34:  MOVFF  67F,6F8
06F38:  CLRF   xFB
06F3A:  MOVLW  2F
06F3C:  MOVWF  xFA
06F3E:  MOVLB  0
06F40:  CALL   035E
06F44:  BTFSC  1B.7
06F46:  BSF    FF2.7
06F48:  MOVF   01,W
06F4A:  ADDLW  4C
06F4C:  MOVLB  6
06F4E:  MOVWF  x80
06F50:  MOVLW  01
06F52:  ADDWFC 02,W
06F54:  MOVWF  x81
06F56:  MOVLW  01
06F58:  ADDWF  x80,W
06F5A:  MOVWF  01
06F5C:  MOVLW  00
06F5E:  ADDWFC x81,W
06F60:  MOVWF  03
06F62:  MOVF   01,W
06F64:  ADDLW  3E
06F66:  MOVWF  01
06F68:  MOVLW  01
06F6A:  ADDWFC 03,F
06F6C:  MOVF   01,W
06F6E:  ADDLW  28
06F70:  MOVWF  FE9
06F72:  MOVLW  00
06F74:  ADDWFC 03,W
06F76:  MOVWF  FEA
06F78:  BCF    FD8.0
06F7A:  RLCF   FEF,W
06F7C:  CLRF   03
06F7E:  MOVLB  0
06F80:  CALL   0172
06F84:  TBLRD*+
06F86:  MOVFF  FF5,03
06F8A:  CLRF   00
06F8C:  DECF   00,F
06F8E:  XORWF  00,F
06F90:  MOVLW  FF
06F92:  XORWF  03,F
06F94:  MOVF   00,W
06F96:  MOVLB  5
06F98:  IORWF  x7F,F
06F9A:  MOVF   03,W
06F9C:  IORWF  x80,F
06F9E:  MOVLB  6
06FA0:  CLRF   1B
06FA2:  BTFSC  FF2.7
06FA4:  BSF    1B.7
06FA6:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
06FA8:  CLRF   xF9
06FAA:  MOVFF  67F,6F8
06FAE:  CLRF   xFB
06FB0:  MOVLW  2F
06FB2:  MOVWF  xFA
06FB4:  MOVLB  0
06FB6:  CALL   035E
06FBA:  BTFSC  1B.7
06FBC:  BSF    FF2.7
06FBE:  MOVF   01,W
06FC0:  ADDLW  4C
06FC2:  MOVLB  6
06FC4:  MOVWF  x80
06FC6:  MOVLW  01
06FC8:  ADDWFC 02,W
06FCA:  MOVWF  x81
06FCC:  MOVLW  01
06FCE:  ADDWF  x80,W
06FD0:  MOVWF  01
06FD2:  MOVLW  00
06FD4:  ADDWFC x81,W
06FD6:  MOVWF  03
06FD8:  MOVF   01,W
06FDA:  ADDLW  3E
06FDC:  MOVWF  01
06FDE:  MOVLW  01
06FE0:  ADDWFC 03,F
06FE2:  MOVF   01,W
06FE4:  ADDLW  2D
06FE6:  MOVWF  FE9
06FE8:  MOVLW  00
06FEA:  ADDWFC 03,W
06FEC:  MOVWF  FEA
06FEE:  DECFSZ FEF,W
06FF0:  BRA    7162
06FF2:  CLRF   1B
06FF4:  BTFSC  FF2.7
06FF6:  BSF    1B.7
06FF8:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
06FFA:  CLRF   xF9
06FFC:  MOVFF  67F,6F8
07000:  CLRF   xFB
07002:  MOVLW  2F
07004:  MOVWF  xFA
07006:  MOVLB  0
07008:  CALL   035E
0700C:  BTFSC  1B.7
0700E:  BSF    FF2.7
07010:  MOVF   01,W
07012:  ADDLW  4C
07014:  MOVLB  6
07016:  MOVWF  x80
07018:  MOVLW  01
0701A:  ADDWFC 02,W
0701C:  MOVWF  x81
0701E:  MOVLW  01
07020:  ADDWF  x80,W
07022:  MOVWF  01
07024:  MOVLW  00
07026:  ADDWFC x81,W
07028:  MOVWF  03
0702A:  MOVF   01,W
0702C:  ADDLW  3E
0702E:  MOVWF  01
07030:  MOVLW  01
07032:  ADDWFC 03,F
07034:  MOVF   01,W
07036:  ADDLW  2A
07038:  MOVWF  FE9
0703A:  MOVLW  00
0703C:  ADDWFC 03,W
0703E:  MOVWF  FEA
07040:  MOVFF  FEF,682
07044:  CLRF   1B
07046:  BTFSC  FF2.7
07048:  BSF    1B.7
0704A:  BCF    FF2.7
0704C:  CLRF   xF9
0704E:  MOVFF  67F,6F8
07052:  CLRF   xFB
07054:  MOVLW  2F
07056:  MOVWF  xFA
07058:  MOVLB  0
0705A:  CALL   035E
0705E:  BTFSC  1B.7
07060:  BSF    FF2.7
07062:  MOVF   01,W
07064:  ADDLW  4C
07066:  MOVLB  6
07068:  MOVWF  x83
0706A:  MOVLW  01
0706C:  ADDWFC 02,W
0706E:  MOVWF  x84
07070:  MOVLW  01
07072:  ADDWF  x83,W
07074:  MOVWF  01
07076:  MOVLW  00
07078:  ADDWFC x84,W
0707A:  MOVWF  03
0707C:  MOVF   01,W
0707E:  ADDLW  3E
07080:  MOVWF  01
07082:  MOVLW  01
07084:  ADDWFC 03,F
07086:  MOVF   01,W
07088:  ADDLW  2C
0708A:  MOVWF  FE9
0708C:  MOVLW  00
0708E:  ADDWFC 03,W
07090:  MOVWF  FEA
07092:  MOVF   FEF,W
07094:  SUBWF  x82,W
07096:  BZ    7162
07098:  BNC   7162
0709A:  CLRF   1B
0709C:  BTFSC  FF2.7
0709E:  BSF    1B.7
070A0:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
070A2:  CLRF   xF9
070A4:  MOVFF  67F,6F8
070A8:  CLRF   xFB
070AA:  MOVLW  2F
070AC:  MOVWF  xFA
070AE:  MOVLB  0
070B0:  CALL   035E
070B4:  BTFSC  1B.7
070B6:  BSF    FF2.7
070B8:  MOVF   01,W
070BA:  ADDLW  4C
070BC:  MOVLB  6
070BE:  MOVWF  x80
070C0:  MOVLW  01
070C2:  ADDWFC 02,W
070C4:  MOVWF  x81
070C6:  MOVLW  01
070C8:  ADDWF  x80,W
070CA:  MOVWF  01
070CC:  MOVLW  00
070CE:  ADDWFC x81,W
070D0:  MOVWF  03
070D2:  MOVF   01,W
070D4:  ADDLW  3E
070D6:  MOVWF  01
070D8:  MOVLW  01
070DA:  ADDWFC 03,F
070DC:  MOVF   01,W
070DE:  ADDLW  2D
070E0:  MOVWF  FE9
070E2:  MOVLW  00
070E4:  ADDWFC 03,W
070E6:  MOVWF  FEA
070E8:  MOVLW  04
070EA:  MOVWF  FEF
070EC:  CLRF   1B
070EE:  BTFSC  FF2.7
070F0:  BSF    1B.7
070F2:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
070F4:  CLRF   xF9
070F6:  MOVFF  67F,6F8
070FA:  CLRF   xFB
070FC:  MOVLW  2F
070FE:  MOVWF  xFA
07100:  MOVLB  0
07102:  CALL   035E
07106:  BTFSC  1B.7
07108:  BSF    FF2.7
0710A:  MOVF   01,W
0710C:  ADDLW  4C
0710E:  MOVLB  6
07110:  MOVWF  x80
07112:  MOVLW  01
07114:  ADDWFC 02,W
07116:  MOVWF  x81
07118:  MOVLW  01
0711A:  ADDWF  x80,W
0711C:  MOVWF  01
0711E:  MOVLW  00
07120:  ADDWFC x81,W
07122:  MOVWF  03
07124:  MOVF   01,W
07126:  ADDLW  3E
07128:  MOVWF  01
0712A:  MOVLW  01
0712C:  ADDWFC 03,F
0712E:  MOVF   01,W
07130:  ADDLW  29
07132:  MOVWF  FE9
07134:  MOVLW  00
07136:  ADDWFC 03,W
07138:  MOVWF  FEA
0713A:  BCF    FD8.0
0713C:  RLCF   FEF,W
0713E:  CLRF   03
07140:  MOVLB  0
07142:  CALL   0172
07146:  TBLRD*+
07148:  MOVFF  FF5,03
0714C:  CLRF   00
0714E:  DECF   00,F
07150:  XORWF  00,F
07152:  MOVLW  FF
07154:  XORWF  03,F
07156:  MOVF   00,W
07158:  MOVLB  5
0715A:  IORWF  x7F,F
0715C:  MOVF   03,W
0715E:  IORWF  x80,F
07160:  MOVLB  6
07162:  CLRF   1B
07164:  BTFSC  FF2.7
07166:  BSF    1B.7
07168:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
0716A:  CLRF   xF9
0716C:  MOVFF  67F,6F8
07170:  CLRF   xFB
07172:  MOVLW  2F
07174:  MOVWF  xFA
07176:  MOVLB  0
07178:  CALL   035E
0717C:  BTFSC  1B.7
0717E:  BSF    FF2.7
07180:  MOVF   01,W
07182:  ADDLW  4C
07184:  MOVLB  6
07186:  MOVWF  x80
07188:  MOVLW  01
0718A:  ADDWFC 02,W
0718C:  MOVWF  x81
0718E:  MOVLW  01
07190:  ADDWF  x80,W
07192:  MOVWF  01
07194:  MOVLW  00
07196:  ADDWFC x81,W
07198:  MOVWF  03
0719A:  MOVF   01,W
0719C:  ADDLW  3E
0719E:  MOVWF  01
071A0:  MOVLW  01
071A2:  ADDWFC 03,F
071A4:  MOVF   01,W
071A6:  ADDLW  2D
071A8:  MOVWF  FE9
071AA:  MOVLW  00
071AC:  ADDWFC 03,W
071AE:  MOVWF  FEA
071B0:  MOVF   FEF,W
071B2:  SUBLW  02
071B4:  BTFSS  FD8.2
071B6:  BRA    7328
071B8:  CLRF   1B
071BA:  BTFSC  FF2.7
071BC:  BSF    1B.7
071BE:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
071C0:  CLRF   xF9
071C2:  MOVFF  67F,6F8
071C6:  CLRF   xFB
071C8:  MOVLW  2F
071CA:  MOVWF  xFA
071CC:  MOVLB  0
071CE:  CALL   035E
071D2:  BTFSC  1B.7
071D4:  BSF    FF2.7
071D6:  MOVF   01,W
071D8:  ADDLW  4C
071DA:  MOVLB  6
071DC:  MOVWF  x80
071DE:  MOVLW  01
071E0:  ADDWFC 02,W
071E2:  MOVWF  x81
071E4:  MOVLW  01
071E6:  ADDWF  x80,W
071E8:  MOVWF  01
071EA:  MOVLW  00
071EC:  ADDWFC x81,W
071EE:  MOVWF  03
071F0:  MOVF   01,W
071F2:  ADDLW  3E
071F4:  MOVWF  01
071F6:  MOVLW  01
071F8:  ADDWFC 03,F
071FA:  MOVF   01,W
071FC:  ADDLW  2A
071FE:  MOVWF  FE9
07200:  MOVLW  00
07202:  ADDWFC 03,W
07204:  MOVWF  FEA
07206:  MOVFF  FEF,682
0720A:  CLRF   1B
0720C:  BTFSC  FF2.7
0720E:  BSF    1B.7
07210:  BCF    FF2.7
07212:  CLRF   xF9
07214:  MOVFF  67F,6F8
07218:  CLRF   xFB
0721A:  MOVLW  2F
0721C:  MOVWF  xFA
0721E:  MOVLB  0
07220:  CALL   035E
07224:  BTFSC  1B.7
07226:  BSF    FF2.7
07228:  MOVF   01,W
0722A:  ADDLW  4C
0722C:  MOVLB  6
0722E:  MOVWF  x83
07230:  MOVLW  01
07232:  ADDWFC 02,W
07234:  MOVWF  x84
07236:  MOVLW  01
07238:  ADDWF  x83,W
0723A:  MOVWF  01
0723C:  MOVLW  00
0723E:  ADDWFC x84,W
07240:  MOVWF  03
07242:  MOVF   01,W
07244:  ADDLW  3E
07246:  MOVWF  01
07248:  MOVLW  01
0724A:  ADDWFC 03,F
0724C:  MOVF   01,W
0724E:  ADDLW  2B
07250:  MOVWF  FE9
07252:  MOVLW  00
07254:  ADDWFC 03,W
07256:  MOVWF  FEA
07258:  MOVF   FEF,W
0725A:  SUBWF  x82,W
0725C:  BZ    7328
0725E:  BNC   7328
07260:  CLRF   1B
07262:  BTFSC  FF2.7
07264:  BSF    1B.7
07266:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07268:  CLRF   xF9
0726A:  MOVFF  67F,6F8
0726E:  CLRF   xFB
07270:  MOVLW  2F
07272:  MOVWF  xFA
07274:  MOVLB  0
07276:  CALL   035E
0727A:  BTFSC  1B.7
0727C:  BSF    FF2.7
0727E:  MOVF   01,W
07280:  ADDLW  4C
07282:  MOVLB  6
07284:  MOVWF  x80
07286:  MOVLW  01
07288:  ADDWFC 02,W
0728A:  MOVWF  x81
0728C:  MOVLW  01
0728E:  ADDWF  x80,W
07290:  MOVWF  01
07292:  MOVLW  00
07294:  ADDWFC x81,W
07296:  MOVWF  03
07298:  MOVF   01,W
0729A:  ADDLW  3E
0729C:  MOVWF  01
0729E:  MOVLW  01
072A0:  ADDWFC 03,F
072A2:  MOVF   01,W
072A4:  ADDLW  2D
072A6:  MOVWF  FE9
072A8:  MOVLW  00
072AA:  ADDWFC 03,W
072AC:  MOVWF  FEA
072AE:  MOVLW  04
072B0:  MOVWF  FEF
072B2:  CLRF   1B
072B4:  BTFSC  FF2.7
072B6:  BSF    1B.7
072B8:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
072BA:  CLRF   xF9
072BC:  MOVFF  67F,6F8
072C0:  CLRF   xFB
072C2:  MOVLW  2F
072C4:  MOVWF  xFA
072C6:  MOVLB  0
072C8:  CALL   035E
072CC:  BTFSC  1B.7
072CE:  BSF    FF2.7
072D0:  MOVF   01,W
072D2:  ADDLW  4C
072D4:  MOVLB  6
072D6:  MOVWF  x80
072D8:  MOVLW  01
072DA:  ADDWFC 02,W
072DC:  MOVWF  x81
072DE:  MOVLW  01
072E0:  ADDWF  x80,W
072E2:  MOVWF  01
072E4:  MOVLW  00
072E6:  ADDWFC x81,W
072E8:  MOVWF  03
072EA:  MOVF   01,W
072EC:  ADDLW  3E
072EE:  MOVWF  01
072F0:  MOVLW  01
072F2:  ADDWFC 03,F
072F4:  MOVF   01,W
072F6:  ADDLW  28
072F8:  MOVWF  FE9
072FA:  MOVLW  00
072FC:  ADDWFC 03,W
072FE:  MOVWF  FEA
07300:  BCF    FD8.0
07302:  RLCF   FEF,W
07304:  CLRF   03
07306:  MOVLB  0
07308:  CALL   0172
0730C:  TBLRD*+
0730E:  MOVFF  FF5,03
07312:  CLRF   00
07314:  DECF   00,F
07316:  XORWF  00,F
07318:  MOVLW  FF
0731A:  XORWF  03,F
0731C:  MOVF   00,W
0731E:  MOVLB  5
07320:  IORWF  x7F,F
07322:  MOVF   03,W
07324:  IORWF  x80,F
07326:  MOVLB  6
07328:  CLRF   1B
0732A:  BTFSC  FF2.7
0732C:  BSF    1B.7
0732E:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
07330:  CLRF   xF9
07332:  MOVFF  67F,6F8
07336:  CLRF   xFB
07338:  MOVLW  2F
0733A:  MOVWF  xFA
0733C:  MOVLB  0
0733E:  CALL   035E
07342:  BTFSC  1B.7
07344:  BSF    FF2.7
07346:  MOVF   01,W
07348:  ADDLW  4C
0734A:  MOVLB  6
0734C:  MOVWF  x80
0734E:  MOVLW  01
07350:  ADDWFC 02,W
07352:  MOVWF  x81
07354:  MOVLW  01
07356:  ADDWF  x80,W
07358:  MOVWF  01
0735A:  MOVLW  00
0735C:  ADDWFC x81,W
0735E:  MOVWF  03
07360:  MOVF   01,W
07362:  ADDLW  3E
07364:  MOVWF  01
07366:  MOVLW  01
07368:  ADDWFC 03,F
0736A:  MOVF   01,W
0736C:  ADDLW  2D
0736E:  MOVWF  FE9
07370:  MOVLW  00
07372:  ADDWFC 03,W
07374:  MOVWF  FEA
07376:  MOVF   FEF,W
07378:  SUBLW  03
0737A:  BTFSS  FD8.2
0737C:  BRA    74EE
0737E:  CLRF   1B
07380:  BTFSC  FF2.7
07382:  BSF    1B.7
07384:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
07386:  CLRF   xF9
07388:  MOVFF  67F,6F8
0738C:  CLRF   xFB
0738E:  MOVLW  2F
07390:  MOVWF  xFA
07392:  MOVLB  0
07394:  CALL   035E
07398:  BTFSC  1B.7
0739A:  BSF    FF2.7
0739C:  MOVF   01,W
0739E:  ADDLW  4C
073A0:  MOVLB  6
073A2:  MOVWF  x80
073A4:  MOVLW  01
073A6:  ADDWFC 02,W
073A8:  MOVWF  x81
073AA:  MOVLW  01
073AC:  ADDWF  x80,W
073AE:  MOVWF  01
073B0:  MOVLW  00
073B2:  ADDWFC x81,W
073B4:  MOVWF  03
073B6:  MOVF   01,W
073B8:  ADDLW  3E
073BA:  MOVWF  01
073BC:  MOVLW  01
073BE:  ADDWFC 03,F
073C0:  MOVF   01,W
073C2:  ADDLW  2A
073C4:  MOVWF  FE9
073C6:  MOVLW  00
073C8:  ADDWFC 03,W
073CA:  MOVWF  FEA
073CC:  MOVFF  FEF,682
073D0:  CLRF   1B
073D2:  BTFSC  FF2.7
073D4:  BSF    1B.7
073D6:  BCF    FF2.7
073D8:  CLRF   xF9
073DA:  MOVFF  67F,6F8
073DE:  CLRF   xFB
073E0:  MOVLW  2F
073E2:  MOVWF  xFA
073E4:  MOVLB  0
073E6:  CALL   035E
073EA:  BTFSC  1B.7
073EC:  BSF    FF2.7
073EE:  MOVF   01,W
073F0:  ADDLW  4C
073F2:  MOVLB  6
073F4:  MOVWF  x83
073F6:  MOVLW  01
073F8:  ADDWFC 02,W
073FA:  MOVWF  x84
073FC:  MOVLW  01
073FE:  ADDWF  x83,W
07400:  MOVWF  01
07402:  MOVLW  00
07404:  ADDWFC x84,W
07406:  MOVWF  03
07408:  MOVF   01,W
0740A:  ADDLW  3E
0740C:  MOVWF  01
0740E:  MOVLW  01
07410:  ADDWFC 03,F
07412:  MOVF   01,W
07414:  ADDLW  2B
07416:  MOVWF  FE9
07418:  MOVLW  00
0741A:  ADDWFC 03,W
0741C:  MOVWF  FEA
0741E:  MOVF   FEF,W
07420:  SUBWF  x82,W
07422:  BZ    74EE
07424:  BNC   74EE
07426:  CLRF   1B
07428:  BTFSC  FF2.7
0742A:  BSF    1B.7
0742C:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0742E:  CLRF   xF9
07430:  MOVFF  67F,6F8
07434:  CLRF   xFB
07436:  MOVLW  2F
07438:  MOVWF  xFA
0743A:  MOVLB  0
0743C:  CALL   035E
07440:  BTFSC  1B.7
07442:  BSF    FF2.7
07444:  MOVF   01,W
07446:  ADDLW  4C
07448:  MOVLB  6
0744A:  MOVWF  x80
0744C:  MOVLW  01
0744E:  ADDWFC 02,W
07450:  MOVWF  x81
07452:  MOVLW  01
07454:  ADDWF  x80,W
07456:  MOVWF  01
07458:  MOVLW  00
0745A:  ADDWFC x81,W
0745C:  MOVWF  03
0745E:  MOVF   01,W
07460:  ADDLW  3E
07462:  MOVWF  01
07464:  MOVLW  01
07466:  ADDWFC 03,F
07468:  MOVF   01,W
0746A:  ADDLW  2D
0746C:  MOVWF  FE9
0746E:  MOVLW  00
07470:  ADDWFC 03,W
07472:  MOVWF  FEA
07474:  MOVLW  04
07476:  MOVWF  FEF
07478:  CLRF   1B
0747A:  BTFSC  FF2.7
0747C:  BSF    1B.7
0747E:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
07480:  CLRF   xF9
07482:  MOVFF  67F,6F8
07486:  CLRF   xFB
07488:  MOVLW  2F
0748A:  MOVWF  xFA
0748C:  MOVLB  0
0748E:  CALL   035E
07492:  BTFSC  1B.7
07494:  BSF    FF2.7
07496:  MOVF   01,W
07498:  ADDLW  4C
0749A:  MOVLB  6
0749C:  MOVWF  x80
0749E:  MOVLW  01
074A0:  ADDWFC 02,W
074A2:  MOVWF  x81
074A4:  MOVLW  01
074A6:  ADDWF  x80,W
074A8:  MOVWF  01
074AA:  MOVLW  00
074AC:  ADDWFC x81,W
074AE:  MOVWF  03
074B0:  MOVF   01,W
074B2:  ADDLW  3E
074B4:  MOVWF  01
074B6:  MOVLW  01
074B8:  ADDWFC 03,F
074BA:  MOVF   01,W
074BC:  ADDLW  29
074BE:  MOVWF  FE9
074C0:  MOVLW  00
074C2:  ADDWFC 03,W
074C4:  MOVWF  FEA
074C6:  BCF    FD8.0
074C8:  RLCF   FEF,W
074CA:  CLRF   03
074CC:  MOVLB  0
074CE:  CALL   0172
074D2:  TBLRD*+
074D4:  MOVFF  FF5,03
074D8:  CLRF   00
074DA:  DECF   00,F
074DC:  XORWF  00,F
074DE:  MOVLW  FF
074E0:  XORWF  03,F
074E2:  MOVF   00,W
074E4:  MOVLB  5
074E6:  IORWF  x7F,F
074E8:  MOVF   03,W
074EA:  IORWF  x80,F
074EC:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
074EE:  MOVLB  0
074F0:  BRA    74F2
....................       } 
....................    } 
074F2:  MOVLB  6
074F4:  INCF   x7F,F
074F6:  GOTO   6CEA
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
074FA:  CLRF   x7F
074FC:  MOVLB  1
074FE:  MOVF   x3E,W
07500:  MOVLB  6
07502:  SUBWF  x7F,W
07504:  BTFSC  FD8.0
07506:  BRA    7BD6
07508:  CLRF   1B
0750A:  BTFSC  FF2.7
0750C:  BSF    1B.7
0750E:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
07510:  CLRF   xF9
07512:  MOVFF  67F,6F8
07516:  CLRF   xFB
07518:  MOVLW  21
0751A:  MOVWF  xFA
0751C:  MOVLB  0
0751E:  CALL   035E
07522:  BTFSC  1B.7
07524:  BSF    FF2.7
07526:  MOVFF  02,03
0752A:  MOVF   01,W
0752C:  ADDLW  40
0752E:  MOVWF  01
07530:  MOVLW  01
07532:  ADDWFC 03,F
07534:  MOVFF  01,FE9
07538:  MOVFF  03,FEA
0753C:  MOVF   FEF,W
0753E:  XORLW  02
07540:  BZ    754A
07542:  XORLW  01
07544:  BTFSC  FD8.2
07546:  BRA    7696
07548:  BRA    7BD0
....................          case button_switch: 
0754A:  CLRF   1B
0754C:  BTFSC  FF2.7
0754E:  BSF    1B.7
07550:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
07552:  MOVLB  6
07554:  CLRF   xF9
07556:  MOVFF  67F,6F8
0755A:  CLRF   xFB
0755C:  MOVLW  21
0755E:  MOVWF  xFA
07560:  MOVLB  0
07562:  CALL   035E
07566:  BTFSC  1B.7
07568:  BSF    FF2.7
0756A:  MOVF   01,W
0756C:  ADDLW  02
0756E:  MOVLB  6
07570:  MOVWF  x80
07572:  MOVLW  00
07574:  ADDWFC 02,W
07576:  MOVWF  x81
07578:  MOVLW  01
0757A:  ADDWF  x80,W
0757C:  MOVWF  01
0757E:  MOVLW  00
07580:  ADDWFC x81,W
07582:  MOVWF  03
07584:  MOVF   01,W
07586:  ADDLW  3E
07588:  MOVWF  01
0758A:  MOVLW  01
0758C:  ADDWFC 03,F
0758E:  MOVF   01,W
07590:  ADDLW  08
07592:  MOVWF  FE9
07594:  MOVLW  00
07596:  ADDWFC 03,W
07598:  MOVWF  FEA
0759A:  BTFSS  FEF.0
0759C:  BRA    7692
0759E:  CLRF   1B
075A0:  BTFSC  FF2.7
075A2:  BSF    1B.7
075A4:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
075A6:  CLRF   xF9
075A8:  MOVFF  67F,6F8
075AC:  CLRF   xFB
075AE:  MOVLW  21
075B0:  MOVWF  xFA
075B2:  MOVLB  0
075B4:  CALL   035E
075B8:  BTFSC  1B.7
075BA:  BSF    FF2.7
075BC:  MOVF   01,W
075BE:  ADDLW  02
075C0:  MOVLB  6
075C2:  MOVWF  x80
075C4:  MOVLW  00
075C6:  ADDWFC 02,W
075C8:  MOVWF  x81
075CA:  MOVLW  01
075CC:  ADDWF  x80,W
075CE:  MOVWF  01
075D0:  MOVLW  00
075D2:  ADDWFC x81,W
075D4:  MOVWF  03
075D6:  MOVF   01,W
075D8:  ADDLW  3E
075DA:  MOVWF  01
075DC:  MOVLW  01
075DE:  ADDWFC 03,F
075E0:  MOVF   01,W
075E2:  ADDLW  07
075E4:  MOVWF  FE9
075E6:  MOVLW  00
075E8:  ADDWFC 03,W
075EA:  MOVWF  FEA
075EC:  MOVF   FEF,F
075EE:  BNZ   7692
075F0:  CLRF   1B
075F2:  BTFSC  FF2.7
075F4:  BSF    1B.7
075F6:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
075F8:  CLRF   xF9
075FA:  MOVFF  67F,6F8
075FE:  CLRF   xFB
07600:  MOVLW  21
07602:  MOVWF  xFA
07604:  MOVLB  0
07606:  CALL   035E
0760A:  BTFSC  1B.7
0760C:  BSF    FF2.7
0760E:  MOVF   01,W
07610:  ADDLW  02
07612:  MOVLB  6
07614:  MOVWF  x80
07616:  MOVLW  00
07618:  ADDWFC 02,W
0761A:  MOVWF  x81
0761C:  MOVLW  01
0761E:  ADDWF  x80,W
07620:  MOVWF  01
07622:  MOVLW  00
07624:  ADDWFC x81,W
07626:  MOVWF  03
07628:  MOVF   01,W
0762A:  ADDLW  3E
0762C:  MOVWF  01
0762E:  MOVLW  01
07630:  ADDWFC 03,F
07632:  MOVF   01,W
07634:  ADDLW  01
07636:  MOVWF  FE9
07638:  MOVLW  00
0763A:  ADDWFC 03,W
0763C:  MOVWF  FEA
0763E:  MOVLW  01
07640:  MOVWF  FEF
07642:  CLRF   1B
07644:  BTFSC  FF2.7
07646:  BSF    1B.7
07648:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
0764A:  CLRF   xF9
0764C:  MOVFF  67F,6F8
07650:  CLRF   xFB
07652:  MOVLW  21
07654:  MOVWF  xFA
07656:  MOVLB  0
07658:  CALL   035E
0765C:  BTFSC  1B.7
0765E:  BSF    FF2.7
07660:  MOVF   01,W
07662:  ADDLW  02
07664:  MOVLB  6
07666:  MOVWF  x80
07668:  MOVLW  00
0766A:  ADDWFC 02,W
0766C:  MOVWF  x81
0766E:  MOVLW  01
07670:  ADDWF  x80,W
07672:  MOVWF  01
07674:  MOVLW  00
07676:  ADDWFC x81,W
07678:  MOVWF  03
0767A:  MOVF   01,W
0767C:  ADDLW  3E
0767E:  MOVWF  01
07680:  MOVLW  01
07682:  ADDWFC 03,F
07684:  MOVF   01,W
07686:  ADDLW  02
07688:  MOVWF  FE9
0768A:  MOVLW  00
0768C:  ADDWFC 03,W
0768E:  MOVWF  FEA
07690:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
07692:  MOVLB  0
07694:  BRA    7BD0
....................          case timer: 
07696:  CLRF   1B
07698:  BTFSC  FF2.7
0769A:  BSF    1B.7
0769C:  BCF    FF2.7
....................           
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
0769E:  MOVLB  6
076A0:  CLRF   xF9
076A2:  MOVFF  67F,6F8
076A6:  CLRF   xFB
076A8:  MOVLW  21
076AA:  MOVWF  xFA
076AC:  MOVLB  0
076AE:  CALL   035E
076B2:  BTFSC  1B.7
076B4:  BSF    FF2.7
076B6:  MOVF   01,W
076B8:  ADDLW  02
076BA:  MOVLB  6
076BC:  MOVWF  x80
076BE:  MOVLW  00
076C0:  ADDWFC 02,W
076C2:  MOVWF  x81
076C4:  MOVLW  01
076C6:  ADDWF  x80,W
076C8:  MOVWF  01
076CA:  MOVLW  00
076CC:  ADDWFC x81,W
076CE:  MOVWF  03
076D0:  MOVF   01,W
076D2:  ADDLW  3E
076D4:  MOVWF  01
076D6:  MOVLW  01
076D8:  ADDWFC 03,F
076DA:  MOVF   01,W
076DC:  ADDLW  1F
076DE:  MOVWF  FE9
076E0:  MOVLW  00
076E2:  ADDWFC 03,W
076E4:  MOVWF  FEA
076E6:  BTFSS  FEF.0
076E8:  BRA    7BCC
076EA:  CLRF   1B
076EC:  BTFSC  FF2.7
076EE:  BSF    1B.7
076F0:  BCF    FF2.7
....................           { 
....................          // printf("ACTIVE"); 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
076F2:  CLRF   xF9
076F4:  MOVFF  67F,6F8
076F8:  CLRF   xFB
076FA:  MOVLW  21
076FC:  MOVWF  xFA
076FE:  MOVLB  0
07700:  CALL   035E
07704:  BTFSC  1B.7
07706:  BSF    FF2.7
07708:  MOVF   01,W
0770A:  ADDLW  02
0770C:  MOVLB  6
0770E:  MOVWF  x80
07710:  MOVLW  00
07712:  ADDWFC 02,W
07714:  MOVWF  x81
07716:  MOVLW  01
07718:  ADDWF  x80,W
0771A:  MOVWF  01
0771C:  MOVLW  00
0771E:  ADDWFC x81,W
07720:  MOVWF  03
07722:  MOVF   01,W
07724:  ADDLW  3E
07726:  MOVWF  01
07728:  MOVLW  01
0772A:  ADDWFC 03,F
0772C:  MOVF   01,W
0772E:  ADDLW  1D
07730:  MOVWF  FE9
07732:  MOVLW  00
07734:  ADDWFC 03,W
07736:  MOVWF  FEA
07738:  MOVLW  01
0773A:  ADDWF  FEE,F
0773C:  BNC   7740
0773E:  INCF   FEF,F
07740:  CLRF   1B
07742:  BTFSC  FF2.7
07744:  BSF    1B.7
07746:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
07748:  CLRF   xF9
0774A:  MOVFF  67F,6F8
0774E:  CLRF   xFB
07750:  MOVLW  21
07752:  MOVWF  xFA
07754:  MOVLB  0
07756:  CALL   035E
0775A:  BTFSC  1B.7
0775C:  BSF    FF2.7
0775E:  MOVF   01,W
07760:  ADDLW  02
07762:  MOVLB  6
07764:  MOVWF  x80
07766:  MOVLW  00
07768:  ADDWFC 02,W
0776A:  MOVWF  x81
0776C:  MOVLW  01
0776E:  ADDWF  x80,W
07770:  MOVWF  01
07772:  MOVLW  00
07774:  ADDWFC x81,W
07776:  MOVWF  03
07778:  MOVF   01,W
0777A:  ADDLW  3E
0777C:  MOVWF  01
0777E:  MOVLW  01
07780:  ADDWFC 03,F
07782:  MOVF   01,W
07784:  ADDLW  1D
07786:  MOVWF  FE9
07788:  MOVLW  00
0778A:  ADDWFC 03,W
0778C:  MOVWF  FEA
0778E:  MOVFF  FEC,683
07792:  MOVF   FED,F
07794:  MOVFF  FEF,682
07798:  CLRF   1B
0779A:  BTFSC  FF2.7
0779C:  BSF    1B.7
0779E:  BCF    FF2.7
077A0:  CLRF   xF9
077A2:  MOVFF  67F,6F8
077A6:  CLRF   xFB
077A8:  MOVLW  21
077AA:  MOVWF  xFA
077AC:  MOVLB  0
077AE:  CALL   035E
077B2:  BTFSC  1B.7
077B4:  BSF    FF2.7
077B6:  MOVF   01,W
077B8:  ADDLW  02
077BA:  MOVLB  6
077BC:  MOVWF  x84
077BE:  MOVLW  00
077C0:  ADDWFC 02,W
077C2:  MOVWF  x85
077C4:  MOVLW  01
077C6:  ADDWF  x84,W
077C8:  MOVWF  01
077CA:  MOVLW  00
077CC:  ADDWFC x85,W
077CE:  MOVWF  03
077D0:  MOVF   01,W
077D2:  ADDLW  3E
077D4:  MOVWF  01
077D6:  MOVLW  01
077D8:  ADDWFC 03,F
077DA:  MOVF   01,W
077DC:  ADDLW  01
077DE:  MOVWF  FE9
077E0:  MOVLW  00
077E2:  ADDWFC 03,W
077E4:  MOVWF  FEA
077E6:  MOVFF  FEC,03
077EA:  MOVF   FED,F
077EC:  MOVFF  FEF,01
077F0:  MOVF   03,W
077F2:  SUBWF  x83,W
077F4:  BTFSS  FD8.0
077F6:  BRA    7BCC
077F8:  BNZ   7802
077FA:  MOVF   x82,W
077FC:  SUBWF  01,W
077FE:  BTFSC  FD8.0
07800:  BRA    7BCC
07802:  CLRF   1B
07804:  BTFSC  FF2.7
07806:  BSF    1B.7
07808:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
0780A:  CLRF   xF9
0780C:  MOVFF  67F,6F8
07810:  CLRF   xFB
07812:  MOVLW  21
07814:  MOVWF  xFA
07816:  MOVLB  0
07818:  CALL   035E
0781C:  BTFSC  1B.7
0781E:  BSF    FF2.7
07820:  MOVF   01,W
07822:  ADDLW  02
07824:  MOVLB  6
07826:  MOVWF  x80
07828:  MOVLW  00
0782A:  ADDWFC 02,W
0782C:  MOVWF  x81
0782E:  MOVLW  01
07830:  ADDWF  x80,W
07832:  MOVWF  01
07834:  MOVLW  00
07836:  ADDWFC x81,W
07838:  MOVWF  03
0783A:  MOVF   01,W
0783C:  ADDLW  3E
0783E:  MOVWF  01
07840:  MOVLW  01
07842:  ADDWFC 03,F
07844:  MOVFF  01,FE9
07848:  MOVFF  03,FEA
0784C:  MOVF   FEF,F
0784E:  BNZ   7944
07850:  CLRF   1B
07852:  BTFSC  FF2.7
07854:  BSF    1B.7
07856:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07858:  CLRF   xF9
0785A:  MOVFF  67F,6F8
0785E:  CLRF   xFB
07860:  MOVLW  21
07862:  MOVWF  xFA
07864:  MOVLB  0
07866:  CALL   035E
0786A:  BTFSC  1B.7
0786C:  BSF    FF2.7
0786E:  MOVF   01,W
07870:  ADDLW  02
07872:  MOVLB  6
07874:  MOVWF  x80
07876:  MOVLW  00
07878:  ADDWFC 02,W
0787A:  MOVWF  x81
0787C:  MOVLW  01
0787E:  ADDWF  x80,W
07880:  MOVWF  01
07882:  MOVLW  00
07884:  ADDWFC x81,W
07886:  MOVWF  03
07888:  MOVF   01,W
0788A:  ADDLW  3E
0788C:  MOVWF  01
0788E:  MOVLW  01
07890:  ADDWFC 03,F
07892:  MOVF   01,W
07894:  ADDLW  04
07896:  MOVWF  FE9
07898:  MOVLW  00
0789A:  ADDWFC 03,W
0789C:  MOVWF  FEA
0789E:  MOVLW  01
078A0:  MOVWF  FEF
078A2:  CLRF   1B
078A4:  BTFSC  FF2.7
078A6:  BSF    1B.7
078A8:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
078AA:  CLRF   xF9
078AC:  MOVFF  67F,6F8
078B0:  CLRF   xFB
078B2:  MOVLW  21
078B4:  MOVWF  xFA
078B6:  MOVLB  0
078B8:  CALL   035E
078BC:  BTFSC  1B.7
078BE:  BSF    FF2.7
078C0:  MOVF   01,W
078C2:  ADDLW  02
078C4:  MOVLB  6
078C6:  MOVWF  x80
078C8:  MOVLW  00
078CA:  ADDWFC 02,W
078CC:  MOVWF  x81
078CE:  MOVLW  01
078D0:  ADDWF  x80,W
078D2:  MOVWF  01
078D4:  MOVLW  00
078D6:  ADDWFC x81,W
078D8:  MOVWF  03
078DA:  MOVF   01,W
078DC:  ADDLW  3E
078DE:  MOVWF  01
078E0:  MOVLW  01
078E2:  ADDWFC 03,F
078E4:  MOVF   01,W
078E6:  ADDLW  05
078E8:  MOVWF  FE9
078EA:  MOVLW  00
078EC:  ADDWFC 03,W
078EE:  MOVWF  FEA
078F0:  BSF    FEF.0
078F2:  CLRF   1B
078F4:  BTFSC  FF2.7
078F6:  BSF    1B.7
078F8:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
078FA:  CLRF   xF9
078FC:  MOVFF  67F,6F8
07900:  CLRF   xFB
07902:  MOVLW  21
07904:  MOVWF  xFA
07906:  MOVLB  0
07908:  CALL   035E
0790C:  BTFSC  1B.7
0790E:  BSF    FF2.7
07910:  MOVF   01,W
07912:  ADDLW  02
07914:  MOVLB  6
07916:  MOVWF  x80
07918:  MOVLW  00
0791A:  ADDWFC 02,W
0791C:  MOVWF  x81
0791E:  MOVLW  01
07920:  ADDWF  x80,W
07922:  MOVWF  01
07924:  MOVLW  00
07926:  ADDWFC x81,W
07928:  MOVWF  03
0792A:  MOVF   01,W
0792C:  ADDLW  3E
0792E:  MOVWF  01
07930:  MOVLW  01
07932:  ADDWFC 03,F
07934:  MOVF   01,W
07936:  ADDLW  1F
07938:  MOVWF  FE9
0793A:  MOVLW  00
0793C:  ADDWFC 03,W
0793E:  MOVWF  FEA
07940:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
07942:  BRA    7BCC
07944:  CLRF   1B
07946:  BTFSC  FF2.7
07948:  BSF    1B.7
0794A:  BCF    FF2.7
0794C:  CLRF   xF9
0794E:  MOVFF  67F,6F8
07952:  CLRF   xFB
07954:  MOVLW  21
07956:  MOVWF  xFA
07958:  MOVLB  0
0795A:  CALL   035E
0795E:  BTFSC  1B.7
07960:  BSF    FF2.7
07962:  MOVF   01,W
07964:  ADDLW  02
07966:  MOVLB  6
07968:  MOVWF  x80
0796A:  MOVLW  00
0796C:  ADDWFC 02,W
0796E:  MOVWF  x81
07970:  MOVLW  01
07972:  ADDWF  x80,W
07974:  MOVWF  01
07976:  MOVLW  00
07978:  ADDWFC x81,W
0797A:  MOVWF  03
0797C:  MOVF   01,W
0797E:  ADDLW  3E
07980:  MOVWF  01
07982:  MOVLW  01
07984:  ADDWFC 03,F
07986:  MOVFF  01,FE9
0798A:  MOVFF  03,FEA
0798E:  DECFSZ FEF,W
07990:  BRA    7A86
07992:  CLRF   1B
07994:  BTFSC  FF2.7
07996:  BSF    1B.7
07998:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
0799A:  CLRF   xF9
0799C:  MOVFF  67F,6F8
079A0:  CLRF   xFB
079A2:  MOVLW  21
079A4:  MOVWF  xFA
079A6:  MOVLB  0
079A8:  CALL   035E
079AC:  BTFSC  1B.7
079AE:  BSF    FF2.7
079B0:  MOVF   01,W
079B2:  ADDLW  02
079B4:  MOVLB  6
079B6:  MOVWF  x80
079B8:  MOVLW  00
079BA:  ADDWFC 02,W
079BC:  MOVWF  x81
079BE:  MOVLW  01
079C0:  ADDWF  x80,W
079C2:  MOVWF  01
079C4:  MOVLW  00
079C6:  ADDWFC x81,W
079C8:  MOVWF  03
079CA:  MOVF   01,W
079CC:  ADDLW  3E
079CE:  MOVWF  01
079D0:  MOVLW  01
079D2:  ADDWFC 03,F
079D4:  MOVF   01,W
079D6:  ADDLW  07
079D8:  MOVWF  FE9
079DA:  MOVLW  00
079DC:  ADDWFC 03,W
079DE:  MOVWF  FEA
079E0:  MOVLW  01
079E2:  MOVWF  FEF
079E4:  CLRF   1B
079E6:  BTFSC  FF2.7
079E8:  BSF    1B.7
079EA:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
079EC:  CLRF   xF9
079EE:  MOVFF  67F,6F8
079F2:  CLRF   xFB
079F4:  MOVLW  21
079F6:  MOVWF  xFA
079F8:  MOVLB  0
079FA:  CALL   035E
079FE:  BTFSC  1B.7
07A00:  BSF    FF2.7
07A02:  MOVF   01,W
07A04:  ADDLW  02
07A06:  MOVLB  6
07A08:  MOVWF  x80
07A0A:  MOVLW  00
07A0C:  ADDWFC 02,W
07A0E:  MOVWF  x81
07A10:  MOVLW  01
07A12:  ADDWF  x80,W
07A14:  MOVWF  01
07A16:  MOVLW  00
07A18:  ADDWFC x81,W
07A1A:  MOVWF  03
07A1C:  MOVF   01,W
07A1E:  ADDLW  3E
07A20:  MOVWF  01
07A22:  MOVLW  01
07A24:  ADDWFC 03,F
07A26:  MOVF   01,W
07A28:  ADDLW  08
07A2A:  MOVWF  FE9
07A2C:  MOVLW  00
07A2E:  ADDWFC 03,W
07A30:  MOVWF  FEA
07A32:  BSF    FEF.0
07A34:  CLRF   1B
07A36:  BTFSC  FF2.7
07A38:  BSF    1B.7
07A3A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07A3C:  CLRF   xF9
07A3E:  MOVFF  67F,6F8
07A42:  CLRF   xFB
07A44:  MOVLW  21
07A46:  MOVWF  xFA
07A48:  MOVLB  0
07A4A:  CALL   035E
07A4E:  BTFSC  1B.7
07A50:  BSF    FF2.7
07A52:  MOVF   01,W
07A54:  ADDLW  02
07A56:  MOVLB  6
07A58:  MOVWF  x80
07A5A:  MOVLW  00
07A5C:  ADDWFC 02,W
07A5E:  MOVWF  x81
07A60:  MOVLW  01
07A62:  ADDWF  x80,W
07A64:  MOVWF  01
07A66:  MOVLW  00
07A68:  ADDWFC x81,W
07A6A:  MOVWF  03
07A6C:  MOVF   01,W
07A6E:  ADDLW  3E
07A70:  MOVWF  01
07A72:  MOVLW  01
07A74:  ADDWFC 03,F
07A76:  MOVF   01,W
07A78:  ADDLW  1F
07A7A:  MOVWF  FE9
07A7C:  MOVLW  00
07A7E:  ADDWFC 03,W
07A80:  MOVWF  FEA
07A82:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
07A84:  BRA    7BCC
07A86:  CLRF   1B
07A88:  BTFSC  FF2.7
07A8A:  BSF    1B.7
07A8C:  BCF    FF2.7
07A8E:  CLRF   xF9
07A90:  MOVFF  67F,6F8
07A94:  CLRF   xFB
07A96:  MOVLW  21
07A98:  MOVWF  xFA
07A9A:  MOVLB  0
07A9C:  CALL   035E
07AA0:  BTFSC  1B.7
07AA2:  BSF    FF2.7
07AA4:  MOVF   01,W
07AA6:  ADDLW  02
07AA8:  MOVLB  6
07AAA:  MOVWF  x80
07AAC:  MOVLW  00
07AAE:  ADDWFC 02,W
07AB0:  MOVWF  x81
07AB2:  MOVLW  01
07AB4:  ADDWF  x80,W
07AB6:  MOVWF  01
07AB8:  MOVLW  00
07ABA:  ADDWFC x81,W
07ABC:  MOVWF  03
07ABE:  MOVF   01,W
07AC0:  ADDLW  3E
07AC2:  MOVWF  01
07AC4:  MOVLW  01
07AC6:  ADDWFC 03,F
07AC8:  MOVFF  01,FE9
07ACC:  MOVFF  03,FEA
07AD0:  MOVF   FEF,W
07AD2:  SUBLW  02
07AD4:  BNZ   7BCC
07AD6:  CLRF   1B
07AD8:  BTFSC  FF2.7
07ADA:  BSF    1B.7
07ADC:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07ADE:  CLRF   xF9
07AE0:  MOVFF  67F,6F8
07AE4:  CLRF   xFB
07AE6:  MOVLW  21
07AE8:  MOVWF  xFA
07AEA:  MOVLB  0
07AEC:  CALL   035E
07AF0:  BTFSC  1B.7
07AF2:  BSF    FF2.7
07AF4:  MOVF   01,W
07AF6:  ADDLW  02
07AF8:  MOVLB  6
07AFA:  MOVWF  x80
07AFC:  MOVLW  00
07AFE:  ADDWFC 02,W
07B00:  MOVWF  x81
07B02:  MOVLW  01
07B04:  ADDWF  x80,W
07B06:  MOVWF  01
07B08:  MOVLW  00
07B0A:  ADDWFC x81,W
07B0C:  MOVWF  03
07B0E:  MOVF   01,W
07B10:  ADDLW  3E
07B12:  MOVWF  01
07B14:  MOVLW  01
07B16:  ADDWFC 03,F
07B18:  MOVF   01,W
07B1A:  ADDLW  04
07B1C:  MOVWF  FE9
07B1E:  MOVLW  00
07B20:  ADDWFC 03,W
07B22:  MOVWF  FEA
07B24:  MOVLW  01
07B26:  MOVWF  FEF
07B28:  CLRF   1B
07B2A:  BTFSC  FF2.7
07B2C:  BSF    1B.7
07B2E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
07B30:  CLRF   xF9
07B32:  MOVFF  67F,6F8
07B36:  CLRF   xFB
07B38:  MOVLW  21
07B3A:  MOVWF  xFA
07B3C:  MOVLB  0
07B3E:  CALL   035E
07B42:  BTFSC  1B.7
07B44:  BSF    FF2.7
07B46:  MOVF   01,W
07B48:  ADDLW  02
07B4A:  MOVLB  6
07B4C:  MOVWF  x80
07B4E:  MOVLW  00
07B50:  ADDWFC 02,W
07B52:  MOVWF  x81
07B54:  MOVLW  01
07B56:  ADDWF  x80,W
07B58:  MOVWF  01
07B5A:  MOVLW  00
07B5C:  ADDWFC x81,W
07B5E:  MOVWF  03
07B60:  MOVF   01,W
07B62:  ADDLW  3E
07B64:  MOVWF  01
07B66:  MOVLW  01
07B68:  ADDWFC 03,F
07B6A:  MOVF   01,W
07B6C:  ADDLW  05
07B6E:  MOVWF  FE9
07B70:  MOVLW  00
07B72:  ADDWFC 03,W
07B74:  MOVWF  FEA
07B76:  BSF    FEF.0
07B78:  CLRF   1B
07B7A:  BTFSC  FF2.7
07B7C:  BSF    1B.7
07B7E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
07B80:  CLRF   xF9
07B82:  MOVFF  67F,6F8
07B86:  CLRF   xFB
07B88:  MOVLW  21
07B8A:  MOVWF  xFA
07B8C:  MOVLB  0
07B8E:  CALL   035E
07B92:  BTFSC  1B.7
07B94:  BSF    FF2.7
07B96:  MOVF   01,W
07B98:  ADDLW  02
07B9A:  MOVLB  6
07B9C:  MOVWF  x80
07B9E:  MOVLW  00
07BA0:  ADDWFC 02,W
07BA2:  MOVWF  x81
07BA4:  MOVLW  01
07BA6:  ADDWF  x80,W
07BA8:  MOVWF  01
07BAA:  MOVLW  00
07BAC:  ADDWFC x81,W
07BAE:  MOVWF  03
07BB0:  MOVF   01,W
07BB2:  ADDLW  3E
07BB4:  MOVWF  01
07BB6:  MOVLW  01
07BB8:  ADDWFC 03,F
07BBA:  MOVF   01,W
07BBC:  ADDLW  1D
07BBE:  MOVWF  FE9
07BC0:  MOVLW  00
07BC2:  ADDWFC 03,W
07BC4:  MOVWF  FEA
07BC6:  CLRF   FEC
07BC8:  MOVF   FED,F
07BCA:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
07BCC:  MOVLB  0
07BCE:  BRA    7BD0
....................       } 
....................    } 
07BD0:  MOVLB  6
07BD2:  INCF   x7F,F
07BD4:  BRA    74FC
.................... } 
07BD6:  MOVLB  0
07BD8:  GOTO   80EE (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
....................    while(!kbhit()) 
....................    { 
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
....................       delay_us(10); 
....................    } 
.................... } 
.................... void testOutputs() 
.................... { 
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
....................    while(loop) 
....................    { 
....................    while(!kbhit()){} 
....................    char c=getc(); 
....................    switch(c) 
....................    { 
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
....................          portd=(MAKE8(light_pins[0],0)); 
....................       break; 
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
....................          portd=(MAKE8(light_pins[1],0)); 
....................       break; 
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
....................          portd=(MAKE8(light_pins[2],0)); 
....................       break; 
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
....................          portd=(MAKE8(light_pins[3],0)); 
....................       break; 
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
....................          portd=(MAKE8(light_pins[4],0)); 
....................       break; 
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
....................          portd=(MAKE8(light_pins[5],0)); 
....................       break; 
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
....................          portd=(MAKE8(light_pins[6],0)); 
....................       break; 
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
....................          portd=(MAKE8(light_pins[7],0)); 
....................       break; 
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
....................          portd=(MAKE8(light_pins[8],0)); 
....................       break; 
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
....................          portd=(MAKE8(light_pins[9],0)); 
....................       break; 
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
....................          portd=(MAKE8(light_pins[10],0)); 
....................       break; 
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
....................          portd=(MAKE8(light_pins[11],0)); 
....................       break; 
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
....................          portd=(MAKE8(light_pins[12],0)); 
....................       break; 
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
....................          portd=(MAKE8(light_pins[13],0)); 
....................       break; 
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
....................          portd=(MAKE8(light_pins[14],0)); 
....................       break; 
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
....................          portd=(MAKE8(light_pins[15],0)); 
....................       break; 
....................       case 'x': 
....................          loop=false; 
....................          portc=0xFF; 
....................          portd=0xFF; 
....................       break; 
....................    } 
....................    } 
.................... } 
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
....................       printf("1-Test inputs\n\r"); 
....................       printf("2-Test outputs\n\r"); 
....................       while(!kbhit()){} 
....................       char c=getc(); 
....................       if(c=='1') 
....................          testInputs(); 
....................       else if(c=='2') 
....................          testOutputs(); 
....................       else if(c=='x') 
....................       { 
....................          setup_wdt(WDT_ON); 
....................          enable_interrupts (GLOBAL) ; 
....................          return; 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
....................  
....................  
.................... _write_eeprom(unsigned int16 adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%Lu value=%d\n\r",adress,value); 
.................... #endif 
....................    write_eeprom(adress,value); 
*
01DAE:  MOVFF  695,FAA
01DB2:  MOVFF  694,FA9
01DB6:  MOVFF  696,FA8
01DBA:  BCF    FA6.6
01DBC:  BCF    FA6.7
01DBE:  BSF    FA6.2
01DC0:  MOVF   FF2,W
01DC2:  MOVWF  00
01DC4:  BCF    FF2.7
01DC6:  MOVLB  F
01DC8:  MOVLW  55
01DCA:  MOVWF  FA7
01DCC:  MOVLW  AA
01DCE:  MOVWF  FA7
01DD0:  BSF    FA6.1
01DD2:  BTFSC  FA6.1
01DD4:  BRA    1DD2
01DD6:  BCF    FA6.2
01DD8:  MOVF   00,W
01DDA:  IORWF  FF2,F
.................... } 
01DDC:  MOVLB  0
01DDE:  RETLW  00
....................  
.................... unsigned int16 writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
025A0:  MOVLB  6
025A2:  CLRF   xDF
025A4:  MOVF   xDE,W
025A6:  SUBWF  xDF,W
025A8:  BC    25E8
....................    { 
....................       *array=read_eeprom(memAdress+x); 
025AA:  MOVFF  6DB,03
025AE:  MOVF   xDA,W
025B0:  MOVWF  FE9
025B2:  MOVFF  03,FEA
025B6:  MOVF   xDF,W
025B8:  ADDWF  xDC,W
025BA:  MOVWF  xE2
025BC:  MOVLW  00
025BE:  ADDWFC xDD,W
025C0:  MOVWF  xE3
025C2:  MOVFF  FF2,6E4
025C6:  BCF    FF2.7
025C8:  MOVFF  6E3,FAA
025CC:  MOVFF  6E2,FA9
025D0:  BCF    FA6.6
025D2:  BCF    FA6.7
025D4:  BSF    FA6.0
025D6:  MOVF   FA8,W
025D8:  BTFSC  xE4.7
025DA:  BSF    FF2.7
025DC:  MOVWF  FEF
....................       ++array; 
025DE:  INCF   xDA,F
025E0:  BTFSC  FD8.2
025E2:  INCF   xDB,F
....................    } 
025E4:  INCF   xDF,F
025E6:  BRA    25A4
.................... } 
025E8:  MOVLB  0
025EA:  RETLW  00
.................... void ArrayToMem(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
01E46:  MOVLB  6
01E48:  CLRF   x90
01E4A:  MOVF   x8F,W
01E4C:  SUBWF  x90,W
01E4E:  BC    1E86
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
01E50:  MOVF   x90,W
01E52:  ADDWF  x8D,W
01E54:  MOVWF  x91
01E56:  MOVLW  00
01E58:  ADDWFC x8E,W
01E5A:  MOVWF  x92
01E5C:  MOVFF  68C,03
01E60:  MOVFF  68B,FE9
01E64:  MOVFF  68C,FEA
01E68:  MOVFF  FEF,693
01E6C:  MOVWF  x95
01E6E:  MOVFF  691,694
01E72:  MOVFF  693,696
01E76:  MOVLB  0
01E78:  RCALL  1DAE
....................       ++array; 
01E7A:  MOVLB  6
01E7C:  INCF   x8B,F
01E7E:  BTFSC  FD8.2
01E80:  INCF   x8C,F
....................    } 
01E82:  INCF   x90,F
01E84:  BRA    1E4A
.................... } 
01E86:  MOVLB  0
01E88:  RETLW  00
.................... void readDevices() 
.................... { 
*
02CDE:  MOVLB  6
02CE0:  CLRF   x80
02CE2:  CLRF   x7F
02CE4:  CLRF   x81
02CE6:  CLRF   x82
....................    unsigned int16 mempointer=MEM_OFFSET; 
....................    unsigned int inputNumber=0; 
....................    unsigned int outputNumber=0; 
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02CE8:  MOVFF  FF2,6DA
02CEC:  BCF    FF2.7
02CEE:  MOVFF  680,FAA
02CF2:  MOVFF  67F,FA9
02CF6:  BCF    FA6.6
02CF8:  BCF    FA6.7
02CFA:  BSF    FA6.0
02CFC:  MOVF   FA8,W
02CFE:  BTFSC  xDA.7
02D00:  BSF    FF2.7
02D02:  SUBLW  FF
02D04:  BTFSC  FD8.2
02D06:  BRA    34D2
....................       switch(read_eeprom(mempointer)) 
....................       { 
02D08:  MOVFF  FF2,6DA
02D0C:  BCF    FF2.7
02D0E:  MOVFF  680,FAA
02D12:  MOVFF  67F,FA9
02D16:  BCF    FA6.6
02D18:  BCF    FA6.7
02D1A:  BSF    FA6.0
02D1C:  MOVF   FA8,W
02D1E:  BTFSC  xDA.7
02D20:  BSF    FF2.7
02D22:  XORLW  01
02D24:  MOVLB  0
02D26:  BZ    2D4C
02D28:  XORLW  01
02D2A:  BZ    2E10
02D2C:  XORLW  02
02D2E:  BTFSC  FD8.2
02D30:  BRA    2EFA
02D32:  XORLW  01
02D34:  BTFSC  FD8.2
02D36:  BRA    2FF0
02D38:  XORLW  66
02D3A:  BTFSC  FD8.2
02D3C:  BRA    3162
02D3E:  XORLW  03
02D40:  BTFSC  FD8.2
02D42:  BRA    3260
02D44:  XORLW  02
02D46:  BTFSC  FD8.2
02D48:  BRA    33FC
02D4A:  BRA    34CE
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02D4C:  MOVLB  6
02D4E:  INCF   x7F,F
02D50:  BTFSC  FD8.2
02D52:  INCF   x80,F
02D54:  MOVFF  FF2,6DA
02D58:  BCF    FF2.7
02D5A:  MOVFF  680,FAA
02D5E:  MOVFF  67F,FA9
02D62:  BCF    FA6.6
02D64:  BCF    FA6.7
02D66:  BSF    FA6.0
02D68:  MOVF   FA8,W
02D6A:  BTFSC  xDA.7
02D6C:  BSF    FF2.7
02D6E:  MOVWF  x83
02D70:  INCF   x7F,F
02D72:  BTFSC  FD8.2
02D74:  INCF   x80,F
02D76:  MOVFF  FF2,6DB
02D7A:  BCF    FF2.7
02D7C:  MOVFF  680,FAA
02D80:  MOVFF  67F,FA9
02D84:  BCF    FA6.6
02D86:  BCF    FA6.7
02D88:  BSF    FA6.0
02D8A:  MOVF   FA8,W
02D8C:  BTFSC  xDB.7
02D8E:  BSF    FF2.7
02D90:  MOVWF  x84
02D92:  INCF   x7F,F
02D94:  BTFSC  FD8.2
02D96:  INCF   x80,F
02D98:  MOVFF  FF2,6DC
02D9C:  BCF    FF2.7
02D9E:  MOVFF  680,FAA
02DA2:  MOVFF  67F,FA9
02DA6:  BCF    FA6.6
02DA8:  BCF    FA6.7
02DAA:  BSF    FA6.0
02DAC:  MOVF   FA8,W
02DAE:  BTFSC  xDC.7
02DB0:  BSF    FF2.7
02DB2:  MOVWF  x85
02DB4:  CLRF   1B
02DB6:  BTFSC  FF2.7
02DB8:  BSF    1B.7
02DBA:  BCF    FF2.7
....................             //printf("on/off %d %d %d",on_adr,off_adr,real_button); 
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02DBC:  CLRF   xF9
02DBE:  MOVFF  681,6F8
02DC2:  CLRF   xFB
02DC4:  MOVLW  21
02DC6:  MOVWF  xFA
02DC8:  MOVLB  0
02DCA:  CALL   035E
02DCE:  BTFSC  1B.7
02DD0:  BSF    FF2.7
02DD2:  MOVFF  02,03
02DD6:  MOVF   01,W
02DD8:  ADDLW  40
02DDA:  MOVWF  01
02DDC:  MOVLW  01
02DDE:  ADDWFC 03,F
02DE0:  MOVFF  01,6DA
02DE4:  MOVFF  03,6DB
02DE8:  MOVFF  683,6DC
02DEC:  MOVFF  684,6DD
02DF0:  MOVFF  03,6DF
02DF4:  MOVFF  01,6DE
02DF8:  MOVFF  685,6E0
02DFC:  MOVLB  0
02DFE:  GOTO   2320
....................             ++inputNumber; 
02E02:  MOVLB  6
02E04:  INCF   x81,F
....................             ++mempointer; 
02E06:  INCF   x7F,F
02E08:  BTFSC  FD8.2
02E0A:  INCF   x80,F
....................          break; 
02E0C:  MOVLB  0
02E0E:  BRA    34CE
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
02E10:  MOVLB  6
02E12:  INCF   x7F,F
02E14:  BTFSC  FD8.2
02E16:  INCF   x80,F
02E18:  MOVFF  FF2,6DA
02E1C:  BCF    FF2.7
02E1E:  MOVFF  680,FAA
02E22:  MOVFF  67F,FA9
02E26:  BCF    FA6.6
02E28:  BCF    FA6.7
02E2A:  BSF    FA6.0
02E2C:  MOVF   FA8,W
02E2E:  BTFSC  xDA.7
02E30:  BSF    FF2.7
02E32:  MOVWF  x86
....................             on_adr=read_eeprom(++mempointer); 
02E34:  INCF   x7F,F
02E36:  BTFSC  FD8.2
02E38:  INCF   x80,F
02E3A:  MOVFF  FF2,6DA
02E3E:  BCF    FF2.7
02E40:  MOVFF  680,FAA
02E44:  MOVFF  67F,FA9
02E48:  BCF    FA6.6
02E4A:  BCF    FA6.7
02E4C:  BSF    FA6.0
02E4E:  MOVF   FA8,W
02E50:  BTFSC  xDA.7
02E52:  BSF    FF2.7
02E54:  MOVWF  x83
....................             off_adr=read_eeprom(++mempointer); 
02E56:  INCF   x7F,F
02E58:  BTFSC  FD8.2
02E5A:  INCF   x80,F
02E5C:  MOVFF  FF2,6DA
02E60:  BCF    FF2.7
02E62:  MOVFF  680,FAA
02E66:  MOVFF  67F,FA9
02E6A:  BCF    FA6.6
02E6C:  BCF    FA6.7
02E6E:  BSF    FA6.0
02E70:  MOVF   FA8,W
02E72:  BTFSC  xDA.7
02E74:  BSF    FF2.7
02E76:  MOVWF  x84
....................             real_button=read_eeprom(++mempointer); 
02E78:  INCF   x7F,F
02E7A:  BTFSC  FD8.2
02E7C:  INCF   x80,F
02E7E:  MOVFF  FF2,6DA
02E82:  BCF    FF2.7
02E84:  MOVFF  680,FAA
02E88:  MOVFF  67F,FA9
02E8C:  BCF    FA6.6
02E8E:  BCF    FA6.7
02E90:  BSF    FA6.0
02E92:  MOVF   FA8,W
02E94:  BTFSC  xDA.7
02E96:  BSF    FF2.7
02E98:  MOVWF  x85
02E9A:  CLRF   1B
02E9C:  BTFSC  FF2.7
02E9E:  BSF    1B.7
02EA0:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
02EA2:  CLRF   xF9
02EA4:  MOVFF  681,6F8
02EA8:  CLRF   xFB
02EAA:  MOVLW  21
02EAC:  MOVWF  xFA
02EAE:  MOVLB  0
02EB0:  CALL   035E
02EB4:  BTFSC  1B.7
02EB6:  BSF    FF2.7
02EB8:  MOVFF  02,03
02EBC:  MOVF   01,W
02EBE:  ADDLW  40
02EC0:  MOVWF  01
02EC2:  MOVLW  01
02EC4:  ADDWFC 03,F
02EC6:  MOVFF  01,6DA
02ECA:  MOVFF  03,6DB
02ECE:  MOVFF  686,6DC
02ED2:  MOVFF  683,6DD
02ED6:  MOVFF  684,6DE
02EDA:  MOVFF  03,6E0
02EDE:  MOVFF  01,6DF
02EE2:  MOVFF  685,6E1
02EE6:  MOVLB  0
02EE8:  GOTO   237A
....................             ++inputNumber; 
02EEC:  MOVLB  6
02EEE:  INCF   x81,F
....................             ++mempointer; 
02EF0:  INCF   x7F,F
02EF2:  BTFSC  FD8.2
02EF4:  INCF   x80,F
....................          break; 
02EF6:  MOVLB  0
02EF8:  BRA    34CE
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
02EFA:  MOVLB  6
02EFC:  INCF   x7F,F
02EFE:  BTFSC  FD8.2
02F00:  INCF   x80,F
02F02:  MOVFF  FF2,6DA
02F06:  BCF    FF2.7
02F08:  MOVFF  680,FAA
02F0C:  MOVFF  67F,FA9
02F10:  BCF    FA6.6
02F12:  BCF    FA6.7
02F14:  BSF    FA6.0
02F16:  MOVF   FA8,W
02F18:  BTFSC  xDA.7
02F1A:  BSF    FF2.7
02F1C:  MOVWF  x83
....................             off_adr=read_eeprom(++mempointer); 
02F1E:  INCF   x7F,F
02F20:  BTFSC  FD8.2
02F22:  INCF   x80,F
02F24:  MOVFF  FF2,6DA
02F28:  BCF    FF2.7
02F2A:  MOVFF  680,FAA
02F2E:  MOVFF  67F,FA9
02F32:  BCF    FA6.6
02F34:  BCF    FA6.7
02F36:  BSF    FA6.0
02F38:  MOVF   FA8,W
02F3A:  BTFSC  xDA.7
02F3C:  BSF    FF2.7
02F3E:  MOVWF  x84
....................             real_button=read_eeprom(++mempointer); 
02F40:  INCF   x7F,F
02F42:  BTFSC  FD8.2
02F44:  INCF   x80,F
02F46:  MOVFF  FF2,6DA
02F4A:  BCF    FF2.7
02F4C:  MOVFF  680,FAA
02F50:  MOVFF  67F,FA9
02F54:  BCF    FA6.6
02F56:  BCF    FA6.7
02F58:  BSF    FA6.0
02F5A:  MOVF   FA8,W
02F5C:  BTFSC  xDA.7
02F5E:  BSF    FF2.7
02F60:  MOVWF  x85
....................             int1 repeat=read_eeprom(++mempointer); 
02F62:  INCF   x7F,F
02F64:  BTFSC  FD8.2
02F66:  INCF   x80,F
02F68:  MOVFF  FF2,6DA
02F6C:  BCF    FF2.7
02F6E:  MOVFF  680,FAA
02F72:  MOVFF  67F,FA9
02F76:  BCF    FA6.6
02F78:  BCF    FA6.7
02F7A:  BSF    FA6.0
02F7C:  MOVF   FA8,W
02F7E:  BTFSC  xDA.7
02F80:  BSF    FF2.7
02F82:  MOVWF  01
02F84:  BCF    x87.0
02F86:  BTFSC  01.0
02F88:  BSF    x87.0
02F8A:  CLRF   1B
02F8C:  BTFSC  FF2.7
02F8E:  BSF    1B.7
02F90:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
02F92:  CLRF   xF9
02F94:  MOVFF  681,6F8
02F98:  CLRF   xFB
02F9A:  MOVLW  21
02F9C:  MOVWF  xFA
02F9E:  MOVLB  0
02FA0:  CALL   035E
02FA4:  BTFSC  1B.7
02FA6:  BSF    FF2.7
02FA8:  MOVFF  02,03
02FAC:  MOVF   01,W
02FAE:  ADDLW  40
02FB0:  MOVWF  01
02FB2:  MOVLW  01
02FB4:  ADDWFC 03,F
02FB6:  MOVFF  01,6DA
02FBA:  MOVLB  6
02FBC:  MOVFF  03,6DB
02FC0:  MOVLW  00
02FC2:  BTFSC  x87.0
02FC4:  MOVLW  01
02FC6:  MOVFF  683,6DD
02FCA:  MOVFF  684,6DE
02FCE:  MOVFF  03,6E0
02FD2:  MOVFF  01,6DF
02FD6:  MOVFF  685,6E1
02FDA:  MOVWF  xE2
02FDC:  MOVLB  0
02FDE:  GOTO   253E
....................             ++inputNumber; 
02FE2:  MOVLB  6
02FE4:  INCF   x81,F
....................             ++mempointer; 
02FE6:  INCF   x7F,F
02FE8:  BTFSC  FD8.2
02FEA:  INCF   x80,F
....................          break; 
02FEC:  MOVLB  0
02FEE:  BRA    34CE
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
.................... #endif 
....................             ++mempointer; 
02FF0:  MOVLB  6
02FF2:  INCF   x7F,F
02FF4:  BTFSC  FD8.2
02FF6:  INCF   x80,F
....................             unsigned int start_adr[8]; 
....................           //  printf("EEPROM start %d %Lu\n\r",read_eeprom(mempointer),mempointer); 
....................             memToArray(start_adr,mempointer,8); 
02FF8:  MOVLW  06
02FFA:  MOVWF  xDB
02FFC:  MOVLW  88
02FFE:  MOVWF  xDA
03000:  MOVFF  680,6DD
03004:  MOVFF  67F,6DC
03008:  MOVLW  08
0300A:  MOVWF  xDE
0300C:  MOVLB  0
0300E:  CALL   25A0
....................             mempointer+=8; 
03012:  MOVLW  08
03014:  MOVLB  6
03016:  ADDWF  x7F,F
03018:  MOVLW  00
0301A:  ADDWFC x80,F
....................             unsigned int stop_adr[8]; 
....................           //  printf("EEPROM stop %d\n\r",read_eeprom(mempointer)); 
....................             memToArray(stop_adr,mempointer,8); 
0301C:  MOVLW  06
0301E:  MOVWF  xDB
03020:  MOVLW  90
03022:  MOVWF  xDA
03024:  MOVFF  680,6DD
03028:  MOVFF  67F,6DC
0302C:  MOVLW  08
0302E:  MOVWF  xDE
03030:  MOVLB  0
03032:  CALL   25A0
....................             mempointer+=8;           
03036:  MOVLW  08
03038:  MOVLB  6
0303A:  ADDWF  x7F,F
0303C:  MOVLW  00
0303E:  ADDWFC x80,F
....................             unsigned int out_on=read_eeprom(mempointer); 
....................           //  printf("EEPROM on %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................           //  printf("EEPROM off %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
03040:  MOVFF  FF2,6DA
03044:  BCF    FF2.7
03046:  MOVFF  680,FAA
0304A:  MOVFF  67F,FA9
0304E:  BCF    FA6.6
03050:  BCF    FA6.7
03052:  BSF    FA6.0
03054:  MOVF   FA8,W
03056:  BTFSC  xDA.7
03058:  BSF    FF2.7
0305A:  MOVWF  x98
0305C:  INCF   x7F,F
0305E:  BTFSC  FD8.2
03060:  INCF   x80,F
03062:  MOVFF  FF2,6DB
03066:  BCF    FF2.7
03068:  MOVFF  680,FAA
0306C:  MOVFF  67F,FA9
03070:  BCF    FA6.6
03072:  BCF    FA6.7
03074:  BSF    FA6.0
03076:  MOVF   FA8,W
03078:  BTFSC  xDB.7
0307A:  BSF    FF2.7
0307C:  MOVWF  x99
0307E:  INCF   x7F,F
03080:  BTFSC  FD8.2
03082:  INCF   x80,F
03084:  MOVFF  FF2,6DC
03088:  BCF    FF2.7
0308A:  MOVFF  680,FAA
0308E:  MOVFF  67F,FA9
03092:  BCF    FA6.6
03094:  BCF    FA6.7
03096:  BSF    FA6.0
03098:  MOVF   FA8,W
0309A:  BTFSC  xDC.7
0309C:  BSF    FF2.7
0309E:  MOVWF  x9A
030A0:  INCF   x7F,F
030A2:  BTFSC  FD8.2
030A4:  INCF   x80,F
030A6:  MOVFF  FF2,6DD
030AA:  BCF    FF2.7
030AC:  MOVFF  680,FAA
030B0:  MOVFF  67F,FA9
030B4:  BCF    FA6.6
030B6:  BCF    FA6.7
030B8:  BSF    FA6.0
030BA:  MOVF   FA8,W
030BC:  BTFSC  xDD.7
030BE:  BSF    FF2.7
030C0:  CLRF   x9C
030C2:  MOVWF  x9B
....................             timeToAct<<=8; 
030C4:  MOVFF  69B,69C
030C8:  CLRF   x9B
....................             timeToAct|=read_eeprom(++mempointer); 
030CA:  INCF   x7F,F
030CC:  BTFSC  FD8.2
030CE:  INCF   x80,F
030D0:  MOVFF  FF2,6DA
030D4:  BCF    FF2.7
030D6:  MOVFF  680,FAA
030DA:  MOVFF  67F,FA9
030DE:  BCF    FA6.6
030E0:  BCF    FA6.7
030E2:  BSF    FA6.0
030E4:  MOVF   FA8,W
030E6:  BTFSC  xDA.7
030E8:  BSF    FF2.7
030EA:  IORWF  x9B,F
030EC:  CLRF   1B
030EE:  BTFSC  FF2.7
030F0:  BSF    1B.7
030F2:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
030F4:  CLRF   xF9
030F6:  MOVFF  681,6F8
030FA:  CLRF   xFB
030FC:  MOVLW  21
030FE:  MOVWF  xFA
03100:  MOVLB  0
03102:  CALL   035E
03106:  BTFSC  1B.7
03108:  BSF    FF2.7
0310A:  MOVFF  02,03
0310E:  MOVF   01,W
03110:  ADDLW  40
03112:  MOVWF  01
03114:  MOVLW  01
03116:  ADDWFC 03,F
03118:  MOVFF  01,6DA
0311C:  MOVLB  6
0311E:  MOVFF  03,6DB
03122:  MOVLW  06
03124:  MOVWF  xDD
03126:  MOVLW  88
03128:  MOVWF  xDC
0312A:  MOVLW  06
0312C:  MOVWF  xDF
0312E:  MOVLW  90
03130:  MOVWF  xDE
03132:  MOVFF  698,6E0
03136:  MOVFF  699,6E1
0313A:  MOVFF  03,6E3
0313E:  MOVFF  01,6E2
03142:  MOVFF  69A,6E4
03146:  MOVFF  69C,6E6
0314A:  MOVFF  69B,6E5
0314E:  MOVLB  0
03150:  GOTO   262C
....................             ++inputNumber; 
03154:  MOVLB  6
03156:  INCF   x81,F
....................             ++mempointer; 
03158:  INCF   x7F,F
0315A:  BTFSC  FD8.2
0315C:  INCF   x80,F
....................          break; 
0315E:  MOVLB  0
03160:  BRA    34CE
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(_dim_adr,mempointer,8); 
03162:  MOVLW  06
03164:  MOVLB  6
03166:  MOVWF  xDB
03168:  MOVLW  9D
0316A:  MOVWF  xDA
0316C:  MOVFF  680,6DD
03170:  MOVFF  67F,6DC
03174:  MOVLW  08
03176:  MOVWF  xDE
03178:  MOVLB  0
0317A:  CALL   25A0
....................             mempointer+=8; 
0317E:  MOVLW  08
03180:  MOVLB  6
03182:  ADDWF  x7F,F
03184:  MOVLW  00
03186:  ADDWFC x80,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(_on_adr,mempointer,8); 
03188:  MOVLW  06
0318A:  MOVWF  xDB
0318C:  MOVLW  A5
0318E:  MOVWF  xDA
03190:  MOVFF  680,6DD
03194:  MOVFF  67F,6DC
03198:  MOVLW  08
0319A:  MOVWF  xDE
0319C:  MOVLB  0
0319E:  CALL   25A0
....................             mempointer+=8;   
031A2:  MOVLW  08
031A4:  MOVLB  6
031A6:  ADDWF  x7F,F
031A8:  MOVLW  00
031AA:  ADDWFC x80,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(_off_adr,mempointer,8); 
031AC:  MOVLW  06
031AE:  MOVWF  xDB
031B0:  MOVLW  AD
031B2:  MOVWF  xDA
031B4:  MOVFF  680,6DD
031B8:  MOVFF  67F,6DC
031BC:  MOVLW  08
031BE:  MOVWF  xDE
031C0:  MOVLB  0
031C2:  CALL   25A0
....................             mempointer+=8;   
031C6:  MOVLW  08
031C8:  MOVLB  6
031CA:  ADDWF  x7F,F
031CC:  MOVLW  00
031CE:  ADDWFC x80,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
031D0:  INCF   x7F,F
031D2:  BTFSC  FD8.2
031D4:  INCF   x80,F
031D6:  MOVFF  FF2,6DA
031DA:  BCF    FF2.7
031DC:  MOVFF  680,FAA
031E0:  MOVFF  67F,FA9
031E4:  BCF    FA6.6
031E6:  BCF    FA6.7
031E8:  BSF    FA6.0
031EA:  MOVF   FA8,W
031EC:  BTFSC  xDA.7
031EE:  BSF    FF2.7
031F0:  MOVWF  xB5
031F2:  CLRF   1B
031F4:  BTFSC  FF2.7
031F6:  BSF    1B.7
031F8:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
031FA:  CLRF   xF9
031FC:  MOVFF  682,6F8
03200:  CLRF   xFB
03202:  MOVLW  2F
03204:  MOVWF  xFA
03206:  MOVLB  0
03208:  CALL   035E
0320C:  BTFSC  1B.7
0320E:  BSF    FF2.7
03210:  MOVFF  02,03
03214:  MOVF   01,W
03216:  ADDLW  8A
03218:  MOVWF  01
0321A:  MOVLW  02
0321C:  ADDWFC 03,F
0321E:  MOVFF  01,6DA
03222:  MOVLB  6
03224:  MOVFF  03,6DB
03228:  MOVLW  06
0322A:  MOVWF  xDD
0322C:  MOVLW  9D
0322E:  MOVWF  xDC
03230:  MOVLW  06
03232:  MOVWF  xDF
03234:  MOVLW  A5
03236:  MOVWF  xDE
03238:  MOVLW  06
0323A:  MOVWF  xE1
0323C:  MOVLW  AD
0323E:  MOVWF  xE0
03240:  MOVFF  03,6E3
03244:  MOVFF  01,6E2
03248:  MOVFF  6B5,6E4
0324C:  MOVLB  0
0324E:  GOTO   2822
....................             ++outputNumber; 
03252:  MOVLB  6
03254:  INCF   x82,F
....................             ++mempointer; 
03256:  INCF   x7F,F
03258:  BTFSC  FD8.2
0325A:  INCF   x80,F
....................          break; 
0325C:  MOVLB  0
0325E:  BRA    34CE
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
03260:  MOVLW  06
03262:  MOVLB  6
03264:  MOVWF  xDB
03266:  MOVLW  B6
03268:  MOVWF  xDA
0326A:  MOVFF  680,6DD
0326E:  MOVFF  67F,6DC
03272:  MOVLW  08
03274:  MOVWF  xDE
03276:  MOVLB  0
03278:  CALL   25A0
....................             mempointer+=8; 
0327C:  MOVLW  08
0327E:  MOVLB  6
03280:  ADDWF  x7F,F
03282:  MOVLW  00
03284:  ADDWFC x80,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
03286:  MOVLW  06
03288:  MOVWF  xDB
0328A:  MOVLW  BE
0328C:  MOVWF  xDA
0328E:  MOVFF  680,6DD
03292:  MOVFF  67F,6DC
03296:  MOVLW  08
03298:  MOVWF  xDE
0329A:  MOVLB  0
0329C:  CALL   25A0
....................             mempointer+=8;   
032A0:  MOVLW  08
032A2:  MOVLB  6
032A4:  ADDWF  x7F,F
032A6:  MOVLW  00
032A8:  ADDWFC x80,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
032AA:  MOVLW  06
032AC:  MOVWF  xDB
032AE:  MOVLW  C6
032B0:  MOVWF  xDA
032B2:  MOVFF  680,6DD
032B6:  MOVFF  67F,6DC
032BA:  MOVLW  08
032BC:  MOVWF  xDE
032BE:  MOVLB  0
032C0:  CALL   25A0
....................             mempointer+=8;   
032C4:  MOVLW  08
032C6:  MOVLB  6
032C8:  ADDWF  x7F,F
032CA:  MOVLW  00
032CC:  ADDWFC x80,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
032CE:  MOVLW  06
032D0:  MOVWF  xDB
032D2:  MOVLW  CE
032D4:  MOVWF  xDA
032D6:  MOVFF  680,6DD
032DA:  MOVFF  67F,6DC
032DE:  MOVLW  08
032E0:  MOVWF  xDE
032E2:  MOVLB  0
032E4:  CALL   25A0
....................             mempointer+=8; 
032E8:  MOVLW  08
032EA:  MOVLB  6
032EC:  ADDWF  x7F,F
032EE:  MOVLW  00
032F0:  ADDWFC x80,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
032F2:  INCF   x7F,F
032F4:  BTFSC  FD8.2
032F6:  INCF   x80,F
032F8:  MOVFF  FF2,6DA
032FC:  BCF    FF2.7
032FE:  MOVFF  680,FAA
03302:  MOVFF  67F,FA9
03306:  BCF    FA6.6
03308:  BCF    FA6.7
0330A:  BSF    FA6.0
0330C:  MOVF   FA8,W
0330E:  BTFSC  xDA.7
03310:  BSF    FF2.7
03312:  MOVWF  xD6
03314:  INCF   x7F,F
03316:  BTFSC  FD8.2
03318:  INCF   x80,F
0331A:  MOVFF  FF2,6DB
0331E:  BCF    FF2.7
03320:  MOVFF  680,FAA
03324:  MOVFF  67F,FA9
03328:  BCF    FA6.6
0332A:  BCF    FA6.7
0332C:  BSF    FA6.0
0332E:  MOVF   FA8,W
03330:  BTFSC  xDB.7
03332:  BSF    FF2.7
03334:  MOVWF  xD7
03336:  INCF   x7F,F
03338:  BTFSC  FD8.2
0333A:  INCF   x80,F
0333C:  MOVFF  FF2,6DC
03340:  BCF    FF2.7
03342:  MOVFF  680,FAA
03346:  MOVFF  67F,FA9
0334A:  BCF    FA6.6
0334C:  BCF    FA6.7
0334E:  BSF    FA6.0
03350:  MOVF   FA8,W
03352:  BTFSC  xDC.7
03354:  BSF    FF2.7
03356:  MOVWF  xD8
03358:  INCF   x7F,F
0335A:  BTFSC  FD8.2
0335C:  INCF   x80,F
0335E:  MOVFF  FF2,6DD
03362:  BCF    FF2.7
03364:  MOVFF  680,FAA
03368:  MOVFF  67F,FA9
0336C:  BCF    FA6.6
0336E:  BCF    FA6.7
03370:  BSF    FA6.0
03372:  MOVF   FA8,W
03374:  BTFSC  xDD.7
03376:  BSF    FF2.7
03378:  MOVWF  xD9
0337A:  CLRF   1B
0337C:  BTFSC  FF2.7
0337E:  BSF    1B.7
03380:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
03382:  CLRF   xF9
03384:  MOVFF  682,6F8
03388:  CLRF   xFB
0338A:  MOVLW  2F
0338C:  MOVWF  xFA
0338E:  MOVLB  0
03390:  CALL   035E
03394:  BTFSC  1B.7
03396:  BSF    FF2.7
03398:  MOVFF  02,03
0339C:  MOVF   01,W
0339E:  ADDLW  8A
033A0:  MOVWF  01
033A2:  MOVLW  02
033A4:  ADDWFC 03,F
033A6:  MOVFF  01,6DA
033AA:  MOVLB  6
033AC:  MOVFF  03,6DB
033B0:  MOVLW  06
033B2:  MOVWF  xDD
033B4:  MOVLW  B6
033B6:  MOVWF  xDC
033B8:  MOVLW  06
033BA:  MOVWF  xDF
033BC:  MOVLW  BE
033BE:  MOVWF  xDE
033C0:  MOVLW  06
033C2:  MOVWF  xE1
033C4:  MOVLW  C6
033C6:  MOVWF  xE0
033C8:  MOVLW  06
033CA:  MOVWF  xE3
033CC:  MOVLW  CE
033CE:  MOVWF  xE2
033D0:  MOVFF  03,6E5
033D4:  MOVFF  01,6E4
033D8:  MOVFF  6D6,6E6
033DC:  MOVFF  6D7,6E7
033E0:  MOVFF  6D8,6E8
033E4:  MOVFF  6D9,6E9
033E8:  MOVLB  0
033EA:  GOTO   29A6
....................             ++outputNumber; 
033EE:  MOVLB  6
033F0:  INCF   x82,F
....................             ++mempointer; 
033F2:  INCF   x7F,F
033F4:  BTFSC  FD8.2
033F6:  INCF   x80,F
....................          break; 
033F8:  MOVLB  0
033FA:  BRA    34CE
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
033FC:  MOVLW  06
033FE:  MOVLB  6
03400:  MOVWF  xDB
03402:  MOVLW  A5
03404:  MOVWF  xDA
03406:  MOVFF  680,6DD
0340A:  MOVFF  67F,6DC
0340E:  MOVLW  08
03410:  MOVWF  xDE
03412:  MOVLB  0
03414:  CALL   25A0
....................             mempointer+=8;   
03418:  MOVLW  08
0341A:  MOVLB  6
0341C:  ADDWF  x7F,F
0341E:  MOVLW  00
03420:  ADDWFC x80,F
....................             memToArray(_off_adr,mempointer,8); 
03422:  MOVLW  06
03424:  MOVWF  xDB
03426:  MOVLW  AD
03428:  MOVWF  xDA
0342A:  MOVFF  680,6DD
0342E:  MOVFF  67F,6DC
03432:  MOVLW  08
03434:  MOVWF  xDE
03436:  MOVLB  0
03438:  CALL   25A0
....................             mempointer+=8;   
0343C:  MOVLW  08
0343E:  MOVLB  6
03440:  ADDWF  x7F,F
03442:  MOVLW  00
03444:  ADDWFC x80,F
....................             output_pin=read_eeprom(++mempointer); 
03446:  INCF   x7F,F
03448:  BTFSC  FD8.2
0344A:  INCF   x80,F
0344C:  MOVFF  FF2,6DA
03450:  BCF    FF2.7
03452:  MOVFF  680,FAA
03456:  MOVFF  67F,FA9
0345A:  BCF    FA6.6
0345C:  BCF    FA6.7
0345E:  BSF    FA6.0
03460:  MOVF   FA8,W
03462:  BTFSC  xDA.7
03464:  BSF    FF2.7
03466:  MOVWF  xB5
03468:  CLRF   1B
0346A:  BTFSC  FF2.7
0346C:  BSF    1B.7
0346E:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
03470:  CLRF   xF9
03472:  MOVFF  682,6F8
03476:  CLRF   xFB
03478:  MOVLW  2F
0347A:  MOVWF  xFA
0347C:  MOVLB  0
0347E:  CALL   035E
03482:  BTFSC  1B.7
03484:  BSF    FF2.7
03486:  MOVFF  02,03
0348A:  MOVF   01,W
0348C:  ADDLW  8A
0348E:  MOVWF  01
03490:  MOVLW  02
03492:  ADDWFC 03,F
03494:  MOVFF  01,6DA
03498:  MOVLB  6
0349A:  MOVFF  03,6DB
0349E:  MOVLW  06
034A0:  MOVWF  xDD
034A2:  MOVLW  A5
034A4:  MOVWF  xDC
034A6:  MOVLW  06
034A8:  MOVWF  xDF
034AA:  MOVLW  AD
034AC:  MOVWF  xDE
034AE:  MOVFF  03,6E1
034B2:  MOVFF  01,6E0
034B6:  MOVFF  6B5,6E2
034BA:  MOVLB  0
034BC:  GOTO   2BE8
....................             ++outputNumber; 
034C0:  MOVLB  6
034C2:  INCF   x82,F
....................             ++mempointer; 
034C4:  INCF   x7F,F
034C6:  BTFSC  FD8.2
034C8:  INCF   x80,F
....................          break; 
034CA:  MOVLB  0
034CC:  BRA    34CE
....................       } 
....................     
....................    } 
034CE:  MOVLB  6
034D0:  BRA    2CE8
....................    mydevices.numberOfInputs=inputNumber; 
034D2:  MOVFF  681,13E
....................    mydevices.numberOfOutputs=outputNumber; 
034D6:  MOVFF  682,13F
....................     
.................... } 
034DA:  MOVLB  0
034DC:  GOTO   7FEC (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
....................    _write_eeprom(++writeMemPointer,dim_adr); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    ++writeMemPointer; 
....................     
.................... } 
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
01DE0:  MOVFF  63A,695
01DE4:  MOVFF  639,694
01DE8:  MOVLW  01
01DEA:  MOVLB  6
01DEC:  MOVWF  x96
01DEE:  MOVLB  0
01DF0:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,on_adr); 
01DF2:  MOVLB  6
01DF4:  INCF   x39,F
01DF6:  BTFSC  FD8.2
01DF8:  INCF   x3A,F
01DFA:  MOVFF  63A,695
01DFE:  MOVFF  639,694
01E02:  MOVFF  67F,696
01E06:  MOVLB  0
01E08:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,off_adr); 
01E0A:  MOVLB  6
01E0C:  INCF   x39,F
01E0E:  BTFSC  FD8.2
01E10:  INCF   x3A,F
01E12:  MOVFF  63A,695
01E16:  MOVFF  639,694
01E1A:  MOVFF  680,696
01E1E:  MOVLB  0
01E20:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,real_button); 
01E22:  MOVLB  6
01E24:  INCF   x39,F
01E26:  BTFSC  FD8.2
01E28:  INCF   x3A,F
01E2A:  MOVFF  63A,695
01E2E:  MOVFF  639,694
01E32:  MOVFF  681,696
01E36:  MOVLB  0
01E38:  RCALL  1DAE
....................    ++writeMemPointer; 
01E3A:  MOVLB  6
01E3C:  INCF   x39,F
01E3E:  BTFSC  FD8.2
01E40:  INCF   x3A,F
.................... } 
01E42:  MOVLB  0
01E44:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
*
0219A:  MOVFF  63A,695
0219E:  MOVFF  639,694
021A2:  MOVLW  02
021A4:  MOVLB  6
021A6:  MOVWF  x96
021A8:  MOVLB  0
021AA:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,on_adr); 
021AC:  MOVLB  6
021AE:  INCF   x39,F
021B0:  BTFSC  FD8.2
021B2:  INCF   x3A,F
021B4:  MOVFF  63A,695
021B8:  MOVFF  639,694
021BC:  MOVFF  67F,696
021C0:  MOVLB  0
021C2:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,off_adr); 
021C4:  MOVLB  6
021C6:  INCF   x39,F
021C8:  BTFSC  FD8.2
021CA:  INCF   x3A,F
021CC:  MOVFF  63A,695
021D0:  MOVFF  639,694
021D4:  MOVFF  680,696
021D8:  MOVLB  0
021DA:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,real_button); 
021DC:  MOVLB  6
021DE:  INCF   x39,F
021E0:  BTFSC  FD8.2
021E2:  INCF   x3A,F
021E4:  MOVFF  63A,695
021E8:  MOVFF  639,694
021EC:  MOVFF  681,696
021F0:  MOVLB  0
021F2:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,repeat); 
021F4:  MOVLB  6
021F6:  INCF   x39,F
021F8:  BTFSC  FD8.2
021FA:  INCF   x3A,F
021FC:  MOVFF  63A,695
02200:  MOVFF  639,694
02204:  MOVFF  682,696
02208:  MOVLB  0
0220A:  RCALL  1DAE
....................     
....................    ++writeMemPointer; 
0220C:  MOVLB  6
0220E:  INCF   x39,F
02210:  BTFSC  FD8.2
02212:  INCF   x3A,F
.................... } 
02214:  MOVLB  0
02216:  RETLW  00
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
....................    ++writeMemPointer; 
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(on_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(off_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,output_pin); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
01E8A:  MOVFF  63A,695
01E8E:  MOVFF  639,694
01E92:  MOVLW  64
01E94:  MOVLB  6
01E96:  MOVWF  x96
01E98:  MOVLB  0
01E9A:  RCALL  1DAE
....................    ++writeMemPointer; 
01E9C:  MOVLB  6
01E9E:  INCF   x39,F
01EA0:  BTFSC  FD8.2
01EA2:  INCF   x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
01EA4:  MOVFF  680,68C
01EA8:  MOVFF  67F,68B
01EAC:  MOVFF  63A,68E
01EB0:  MOVFF  639,68D
01EB4:  MOVLW  08
01EB6:  MOVWF  x8F
01EB8:  MOVLB  0
01EBA:  RCALL  1E46
....................    writeMemPointer+=8; 
01EBC:  MOVLW  08
01EBE:  MOVLB  6
01EC0:  ADDWF  x39,F
01EC2:  MOVLW  00
01EC4:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
01EC6:  MOVFF  682,68C
01ECA:  MOVFF  681,68B
01ECE:  MOVFF  63A,68E
01ED2:  MOVFF  639,68D
01ED6:  MOVLW  08
01ED8:  MOVWF  x8F
01EDA:  MOVLB  0
01EDC:  RCALL  1E46
....................    writeMemPointer+=8; 
01EDE:  MOVLW  08
01EE0:  MOVLB  6
01EE2:  ADDWF  x39,F
01EE4:  MOVLW  00
01EE6:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
01EE8:  MOVFF  63A,695
01EEC:  MOVFF  639,694
01EF0:  MOVFF  683,696
01EF4:  MOVLB  0
01EF6:  RCALL  1DAE
....................    ++writeMemPointer; 
01EF8:  MOVLB  6
01EFA:  INCF   x39,F
01EFC:  BTFSC  FD8.2
01EFE:  INCF   x3A,F
.................... } 
01F00:  MOVLB  0
01F02:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
*
02218:  MOVFF  63A,695
0221C:  MOVFF  639,694
02220:  MOVLW  66
02222:  MOVLB  6
02224:  MOVWF  x96
02226:  MOVLB  0
02228:  RCALL  1DAE
....................    ++writeMemPointer; 
0222A:  MOVLB  6
0222C:  INCF   x39,F
0222E:  BTFSC  FD8.2
02230:  INCF   x3A,F
....................    ArrayToMem(up_adr,writeMemPointer,8); 
02232:  MOVFF  680,68C
02236:  MOVFF  67F,68B
0223A:  MOVFF  63A,68E
0223E:  MOVFF  639,68D
02242:  MOVLW  08
02244:  MOVWF  x8F
02246:  MOVLB  0
02248:  RCALL  1E46
....................    writeMemPointer+=8; 
0224A:  MOVLW  08
0224C:  MOVLB  6
0224E:  ADDWF  x39,F
02250:  MOVLW  00
02252:  ADDWFC x3A,F
....................    ArrayToMem(down_adr,writeMemPointer,8); 
02254:  MOVFF  682,68C
02258:  MOVFF  681,68B
0225C:  MOVFF  63A,68E
02260:  MOVFF  639,68D
02264:  MOVLW  08
02266:  MOVWF  x8F
02268:  MOVLB  0
0226A:  RCALL  1E46
....................    writeMemPointer+=8; 
0226C:  MOVLW  08
0226E:  MOVLB  6
02270:  ADDWF  x39,F
02272:  MOVLW  00
02274:  ADDWFC x3A,F
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
02276:  MOVFF  684,68C
0227A:  MOVFF  683,68B
0227E:  MOVFF  63A,68E
02282:  MOVFF  639,68D
02286:  MOVLW  08
02288:  MOVWF  x8F
0228A:  MOVLB  0
0228C:  RCALL  1E46
....................    writeMemPointer+=8; 
0228E:  MOVLW  08
02290:  MOVLB  6
02292:  ADDWF  x39,F
02294:  MOVLW  00
02296:  ADDWFC x3A,F
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
02298:  MOVFF  686,68C
0229C:  MOVFF  685,68B
022A0:  MOVFF  63A,68E
022A4:  MOVFF  639,68D
022A8:  MOVLW  08
022AA:  MOVWF  x8F
022AC:  MOVLB  0
022AE:  RCALL  1E46
....................    writeMemPointer+=8; 
022B0:  MOVLW  08
022B2:  MOVLB  6
022B4:  ADDWF  x39,F
022B6:  MOVLW  00
022B8:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,up_output_pin); 
022BA:  MOVFF  63A,695
022BE:  MOVFF  639,694
022C2:  MOVFF  687,696
022C6:  MOVLB  0
022C8:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
022CA:  MOVLB  6
022CC:  INCF   x39,F
022CE:  BTFSC  FD8.2
022D0:  INCF   x3A,F
022D2:  MOVFF  63A,695
022D6:  MOVFF  639,694
022DA:  MOVFF  688,696
022DE:  MOVLB  0
022E0:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
022E2:  MOVLB  6
022E4:  INCF   x39,F
022E6:  BTFSC  FD8.2
022E8:  INCF   x3A,F
022EA:  MOVFF  63A,695
022EE:  MOVFF  639,694
022F2:  MOVFF  689,696
022F6:  MOVLB  0
022F8:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
022FA:  MOVLB  6
022FC:  INCF   x39,F
022FE:  BTFSC  FD8.2
02300:  INCF   x3A,F
02302:  MOVFF  63A,695
02306:  MOVFF  639,694
0230A:  MOVFF  68A,696
0230E:  MOVLB  0
02310:  RCALL  1DAE
....................    ++writeMemPointer; 
02312:  MOVLB  6
02314:  INCF   x39,F
02316:  BTFSC  FD8.2
02318:  INCF   x3A,F
.................... } 
0231A:  MOVLB  0
0231C:  GOTO   7FD4 (RETURN)
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    _write_eeprom(writeMemPointer,timer); 
*
02086:  MOVFF  63A,695
0208A:  MOVFF  639,694
0208E:  MOVLW  03
02090:  MOVLB  6
02092:  MOVWF  x96
02094:  MOVLB  0
02096:  RCALL  1DAE
....................       ++writeMemPointer; 
02098:  MOVLB  6
0209A:  INCF   x39,F
0209C:  BTFSC  FD8.2
0209E:  INCF   x3A,F
....................    ArrayToMem(start_adr,writeMemPointer,8); 
020A0:  MOVFF  680,68C
020A4:  MOVFF  67F,68B
020A8:  MOVFF  63A,68E
020AC:  MOVFF  639,68D
020B0:  MOVLW  08
020B2:  MOVWF  x8F
020B4:  MOVLB  0
020B6:  RCALL  1E46
....................    printf("Start adr=%d",start_adr[0]); 
020B8:  MOVLB  6
020BA:  MOVFF  67F,FE9
020BE:  MOVFF  680,FEA
020C2:  MOVFF  FEF,688
020C6:  MOVLW  2C
020C8:  MOVWF  FF6
020CA:  MOVLW  03
020CC:  MOVWF  FF7
020CE:  MOVLW  00
020D0:  MOVWF  FF8
020D2:  MOVLW  0A
020D4:  MOVWF  x89
020D6:  MOVLB  0
020D8:  RCALL  1F4A
020DA:  MOVFF  688,689
020DE:  MOVLW  1F
020E0:  MOVLB  6
020E2:  MOVWF  x8A
020E4:  MOVLB  0
020E6:  BRA    1FA6
....................    writeMemPointer+=8; 
020E8:  MOVLW  08
020EA:  MOVLB  6
020EC:  ADDWF  x39,F
020EE:  MOVLW  00
020F0:  ADDWFC x3A,F
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
020F2:  MOVFF  682,68C
020F6:  MOVFF  681,68B
020FA:  MOVFF  63A,68E
020FE:  MOVFF  639,68D
02102:  MOVLW  08
02104:  MOVWF  x8F
02106:  MOVLB  0
02108:  RCALL  1E46
....................    writeMemPointer+=8; 
0210A:  MOVLW  08
0210C:  MOVLB  6
0210E:  ADDWF  x39,F
02110:  MOVLW  00
02112:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,out_on); 
02114:  MOVFF  63A,695
02118:  MOVFF  639,694
0211C:  MOVFF  683,696
02120:  MOVLB  0
02122:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,out_off); 
02124:  MOVLB  6
02126:  INCF   x39,F
02128:  BTFSC  FD8.2
0212A:  INCF   x3A,F
0212C:  MOVFF  63A,695
02130:  MOVFF  639,694
02134:  MOVFF  684,696
02138:  MOVLB  0
0213A:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,type); 
0213C:  MOVLB  6
0213E:  INCF   x39,F
02140:  BTFSC  FD8.2
02142:  INCF   x3A,F
02144:  MOVFF  63A,695
02148:  MOVFF  639,694
0214C:  MOVFF  685,696
02150:  MOVLB  0
02152:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
02154:  MOVLB  6
02156:  INCF   x39,F
02158:  BTFSC  FD8.2
0215A:  INCF   x3A,F
0215C:  MOVFF  687,688
02160:  MOVFF  63A,695
02164:  MOVFF  639,694
02168:  MOVFF  687,696
0216C:  MOVLB  0
0216E:  RCALL  1DAE
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
02170:  MOVLB  6
02172:  INCF   x39,F
02174:  BTFSC  FD8.2
02176:  INCF   x3A,F
02178:  MOVFF  686,688
0217C:  MOVFF  63A,695
02180:  MOVFF  639,694
02184:  MOVFF  686,696
02188:  MOVLB  0
0218A:  RCALL  1DAE
....................    ++writeMemPointer; 
0218C:  MOVLB  6
0218E:  INCF   x39,F
02190:  BTFSC  FD8.2
02192:  INCF   x3A,F
.................... } 
02194:  MOVLB  0
02196:  GOTO   7EBA (RETURN)
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... volatile unsigned int1 oscError=0; 
....................  
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
007D8:  MOVLW  06
007DA:  MOVLB  6
007DC:  ADDWF  xFA,W
007DE:  MOVWF  FE9
007E0:  MOVLW  00
007E2:  ADDWFC xFB,W
007E4:  MOVWF  FEA
007E6:  MOVLW  00
007E8:  BTFSC  FEF.0
007EA:  MOVLW  01
007EC:  ANDLW  01
007EE:  BNZ   08CC
007F0:  MOVLW  06
007F2:  ADDWF  xFA,W
007F4:  MOVWF  FE9
007F6:  MOVLW  00
007F8:  ADDWFC xFB,W
007FA:  MOVWF  FEA
007FC:  MOVLW  00
007FE:  BTFSC  FEF.1
00800:  MOVLW  01
00802:  ANDLW  01
00804:  SUBLW  01
00806:  BNZ   08CC
....................    {    
....................       sw-> previous_state = button_pressed; 
00808:  MOVLW  06
0080A:  ADDWF  xFA,W
0080C:  MOVWF  FE9
0080E:  MOVLW  00
00810:  ADDWFC xFB,W
00812:  MOVWF  FEA
00814:  BCF    FEF.1
....................       if(sw->outstate==off) 
00816:  MOVLW  0B
00818:  ADDWF  xFA,W
0081A:  MOVWF  FE9
0081C:  MOVLW  00
0081E:  ADDWFC xFB,W
00820:  MOVWF  FEA
00822:  DECFSZ FEF,W
00824:  BRA    0870
....................       { 
....................          sw->outstate=on; 
00826:  MOVLW  0B
00828:  ADDWF  xFA,W
0082A:  MOVWF  FE9
0082C:  MOVLW  00
0082E:  ADDWFC xFB,W
00830:  MOVWF  FEA
00832:  CLRF   FEF
....................          sw->on.value=1; 
00834:  MOVLW  01
00836:  ADDWF  xFA,W
00838:  MOVWF  FE9
0083A:  MOVLW  00
0083C:  ADDWFC xFB,W
0083E:  MOVWF  FEA
00840:  MOVLW  01
00842:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00844:  MOVLW  02
00846:  ADDWF  xFA,W
00848:  MOVWF  FE9
0084A:  MOVLW  00
0084C:  ADDWFC xFB,W
0084E:  MOVWF  FEA
00850:  BSF    FEF.0
....................          sw->off.value=0; 
00852:  MOVLW  04
00854:  ADDWF  xFA,W
00856:  MOVWF  FE9
00858:  MOVLW  00
0085A:  ADDWFC xFB,W
0085C:  MOVWF  FEA
0085E:  CLRF   FEF
....................          sw->off.needs_update=true; 
00860:  MOVLW  05
00862:  ADDWF  xFA,W
00864:  MOVWF  FE9
00866:  MOVLW  00
00868:  ADDWFC xFB,W
0086A:  MOVWF  FEA
0086C:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
0086E:  BRA    08CA
00870:  MOVLW  0B
00872:  ADDWF  xFA,W
00874:  MOVWF  FE9
00876:  MOVLW  00
00878:  ADDWFC xFB,W
0087A:  MOVWF  FEA
0087C:  MOVF   FEF,F
0087E:  BNZ   08CA
....................       { 
....................          sw->outstate=off; 
00880:  MOVLW  0B
00882:  ADDWF  xFA,W
00884:  MOVWF  FE9
00886:  MOVLW  00
00888:  ADDWFC xFB,W
0088A:  MOVWF  FEA
0088C:  MOVLW  01
0088E:  MOVWF  FEF
....................          sw->off.value=1; 
00890:  MOVLW  04
00892:  ADDWF  xFA,W
00894:  MOVWF  FE9
00896:  MOVLW  00
00898:  ADDWFC xFB,W
0089A:  MOVWF  FEA
0089C:  MOVLW  01
0089E:  MOVWF  FEF
....................          sw->off.needs_update=true; 
008A0:  MOVLW  05
008A2:  ADDWF  xFA,W
008A4:  MOVWF  FE9
008A6:  MOVLW  00
008A8:  ADDWFC xFB,W
008AA:  MOVWF  FEA
008AC:  BSF    FEF.0
....................          sw->on.value=0; 
008AE:  MOVLW  01
008B0:  ADDWF  xFA,W
008B2:  MOVWF  FE9
008B4:  MOVLW  00
008B6:  ADDWFC xFB,W
008B8:  MOVWF  FEA
008BA:  CLRF   FEF
....................          sw->on.needs_update=true; 
008BC:  MOVLW  02
008BE:  ADDWF  xFA,W
008C0:  MOVWF  FE9
008C2:  MOVLW  00
008C4:  ADDWFC xFB,W
008C6:  MOVWF  FEA
008C8:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
008CA:  BRA    08F2
008CC:  MOVLW  06
008CE:  ADDWF  xFA,W
008D0:  MOVWF  FE9
008D2:  MOVLW  00
008D4:  ADDWFC xFB,W
008D6:  MOVWF  FEA
008D8:  MOVLW  00
008DA:  BTFSC  FEF.0
008DC:  MOVLW  01
008DE:  ANDLW  01
008E0:  SUBLW  01
008E2:  BNZ   08F2
....................       sw-> previous_state = button_depressed; 
008E4:  MOVLW  06
008E6:  ADDWF  xFA,W
008E8:  MOVWF  FE9
008EA:  MOVLW  00
008EC:  ADDWFC xFB,W
008EE:  MOVWF  FEA
008F0:  BSF    FEF.1
.................... } 
008F2:  MOVLB  0
008F4:  GOTO   0E1E (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
008F8:  MOVLW  06
008FA:  MOVLB  6
008FC:  ADDWF  xFA,W
008FE:  MOVWF  FE9
00900:  MOVLW  00
00902:  ADDWFC xFB,W
00904:  MOVWF  FEA
00906:  MOVLW  00
00908:  BTFSC  FEF.0
0090A:  MOVLW  01
0090C:  ANDLW  01
0090E:  BNZ   096A
00910:  MOVLW  07
00912:  ADDWF  xFA,W
00914:  MOVWF  FE9
00916:  MOVLW  00
00918:  ADDWFC xFB,W
0091A:  MOVWF  FEA
0091C:  DECFSZ FEF,W
0091E:  BRA    096A
....................    { 
....................          sw->outstate=on; 
00920:  MOVLW  07
00922:  ADDWF  xFA,W
00924:  MOVWF  FE9
00926:  MOVLW  00
00928:  ADDWFC xFB,W
0092A:  MOVWF  FEA
0092C:  CLRF   FEF
....................          sw->on.value=1; 
0092E:  MOVLW  01
00930:  ADDWF  xFA,W
00932:  MOVWF  FE9
00934:  MOVLW  00
00936:  ADDWFC xFB,W
00938:  MOVWF  FEA
0093A:  MOVLW  01
0093C:  MOVWF  FEF
....................          sw->on.needs_update=true; 
0093E:  MOVLW  02
00940:  ADDWF  xFA,W
00942:  MOVWF  FE9
00944:  MOVLW  00
00946:  ADDWFC xFB,W
00948:  MOVWF  FEA
0094A:  BSF    FEF.0
....................          sw->off.value=0; 
0094C:  MOVLW  04
0094E:  ADDWF  xFA,W
00950:  MOVWF  FE9
00952:  MOVLW  00
00954:  ADDWFC xFB,W
00956:  MOVWF  FEA
00958:  CLRF   FEF
....................          sw->off.needs_update=true; 
0095A:  MOVLW  05
0095C:  ADDWF  xFA,W
0095E:  MOVWF  FE9
00960:  MOVLW  00
00962:  ADDWFC xFB,W
00964:  MOVWF  FEA
00966:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
00968:  BRA    09DC
0096A:  MOVLW  06
0096C:  ADDWF  xFA,W
0096E:  MOVWF  FE9
00970:  MOVLW  00
00972:  ADDWFC xFB,W
00974:  MOVWF  FEA
00976:  MOVLW  00
00978:  BTFSC  FEF.0
0097A:  MOVLW  01
0097C:  ANDLW  01
0097E:  SUBLW  01
00980:  BNZ   09DC
00982:  MOVLW  07
00984:  ADDWF  xFA,W
00986:  MOVWF  FE9
00988:  MOVLW  00
0098A:  ADDWFC xFB,W
0098C:  MOVWF  FEA
0098E:  MOVF   FEF,F
00990:  BNZ   09DC
....................    { 
....................          sw->outstate=off; 
00992:  MOVLW  07
00994:  ADDWF  xFA,W
00996:  MOVWF  FE9
00998:  MOVLW  00
0099A:  ADDWFC xFB,W
0099C:  MOVWF  FEA
0099E:  MOVLW  01
009A0:  MOVWF  FEF
....................          sw->off.value=1; 
009A2:  MOVLW  04
009A4:  ADDWF  xFA,W
009A6:  MOVWF  FE9
009A8:  MOVLW  00
009AA:  ADDWFC xFB,W
009AC:  MOVWF  FEA
009AE:  MOVLW  01
009B0:  MOVWF  FEF
....................          sw->off.needs_update=true; 
009B2:  MOVLW  05
009B4:  ADDWF  xFA,W
009B6:  MOVWF  FE9
009B8:  MOVLW  00
009BA:  ADDWFC xFB,W
009BC:  MOVWF  FEA
009BE:  BSF    FEF.0
....................          sw->on.value=0; 
009C0:  MOVLW  01
009C2:  ADDWF  xFA,W
009C4:  MOVWF  FE9
009C6:  MOVLW  00
009C8:  ADDWFC xFB,W
009CA:  MOVWF  FEA
009CC:  CLRF   FEF
....................          sw->on.needs_update=true; 
009CE:  MOVLW  02
009D0:  ADDWF  xFA,W
009D2:  MOVWF  FE9
009D4:  MOVLW  00
009D6:  ADDWFC xFB,W
009D8:  MOVWF  FEA
009DA:  BSF    FEF.0
....................    } 
.................... } 
009DC:  MOVLB  0
009DE:  GOTO   0E1E (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
003F4:  MOVLW  09
003F6:  MOVLB  6
003F8:  ADDWF  xFA,W
003FA:  MOVWF  FE9
003FC:  MOVLW  00
003FE:  ADDWFC xFB,W
00400:  MOVWF  FEA
00402:  MOVFF  FEF,6FC
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
00406:  MOVLW  0E
00408:  ADDWF  xFA,W
0040A:  MOVWF  FE9
0040C:  MOVLW  00
0040E:  ADDWFC xFB,W
00410:  MOVWF  FEA
00412:  MOVLW  00
00414:  BTFSC  FEF.0
00416:  MOVLW  01
00418:  ANDLW  01
0041A:  BTFSS  FD8.2
0041C:  BRA    062A
....................    { 
....................     //  printf("STATE %u",sw->current_state); 
....................      // printf("DIF %LU",clock - sw->timer); 
....................       sw-> previous_state = button_pressed; 
0041E:  MOVLW  0E
00420:  ADDWF  xFA,W
00422:  MOVWF  FE9
00424:  MOVLW  00
00426:  ADDWFC xFB,W
00428:  MOVWF  FEA
0042A:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
0042C:  MOVLW  0A
0042E:  ADDWF  xFA,W
00430:  MOVWF  FE9
00432:  MOVLW  00
00434:  ADDWFC xFB,W
00436:  MOVWF  FEA
00438:  MOVFF  FEF,00
0043C:  MOVFF  FEC,01
00440:  MOVFF  FEC,02
00444:  MOVFF  FEC,03
00448:  MOVF   00,W
0044A:  SUBWF  x3B,W
0044C:  MOVWF  xFD
0044E:  MOVF   01,W
00450:  SUBWFB x3C,W
00452:  MOVWF  xFE
00454:  MOVF   02,W
00456:  SUBWFB x3D,W
00458:  MOVWF  xFF
0045A:  MOVF   03,W
0045C:  SUBWFB x3E,W
0045E:  MOVLB  7
00460:  MOVWF  x00
00462:  MOVLB  6
00464:  MOVF   x43,W
00466:  MOVLB  7
00468:  SUBWF  x00,W
0046A:  BNC   04A4
0046C:  BNZ   04BA
0046E:  MOVLB  6
00470:  MOVF   x42,W
00472:  SUBWF  xFF,W
00474:  BTFSC  FD8.0
00476:  BRA    047C
00478:  MOVLB  7
0047A:  BRA    04A4
0047C:  BTFSC  FD8.2
0047E:  BRA    0484
00480:  MOVLB  7
00482:  BRA    04BA
00484:  MOVF   x41,W
00486:  SUBWF  xFE,W
00488:  BTFSC  FD8.0
0048A:  BRA    0490
0048C:  MOVLB  7
0048E:  BRA    04A4
00490:  BTFSC  FD8.2
00492:  BRA    0498
00494:  MOVLB  7
00496:  BRA    04BA
00498:  MOVF   xFD,W
0049A:  SUBWF  x40,W
0049C:  BTFSC  FD8.0
0049E:  BRA    04A4
004A0:  MOVLB  7
004A2:  BRA    04BA
004A4:  MOVLW  0F
004A6:  MOVLB  6
004A8:  ADDWF  xFA,W
004AA:  MOVWF  FE9
004AC:  MOVLW  00
004AE:  ADDWFC xFB,W
004B0:  MOVWF  FEA
004B2:  MOVF   FEF,W
004B4:  SUBLW  02
004B6:  BTFSS  FD8.2
004B8:  BRA    0628
004BA:  MOVLW  0F
004BC:  MOVLB  6
004BE:  ADDWF  xFA,W
004C0:  MOVWF  FE9
004C2:  MOVLW  00
004C4:  ADDWFC xFB,W
004C6:  MOVWF  FEA
004C8:  MOVF   FEF,W
004CA:  SUBLW  04
004CC:  BTFSC  FD8.2
004CE:  BRA    0628
....................       {  
....................          if(sw->outstate==off) 
004D0:  MOVLW  0F
004D2:  ADDWF  xFA,W
004D4:  MOVWF  FE9
004D6:  MOVLW  00
004D8:  ADDWFC xFB,W
004DA:  MOVWF  FEA
004DC:  DECFSZ FEF,W
004DE:  BRA    051E
....................          { 
....................             sw->outstate=maxed; 
004E0:  MOVLW  0F
004E2:  ADDWF  xFA,W
004E4:  MOVWF  FE9
004E6:  MOVLW  00
004E8:  ADDWFC xFB,W
004EA:  MOVWF  FEA
004EC:  MOVLW  04
004EE:  MOVWF  FEF
....................             sw->on.value=1; 
004F0:  ADDWF  xFA,W
004F2:  MOVWF  FE9
004F4:  MOVLW  00
004F6:  ADDWFC xFB,W
004F8:  MOVWF  FEA
004FA:  MOVLW  01
004FC:  MOVWF  FEF
....................             sw->current_level = 127; 
004FE:  MOVLW  09
00500:  ADDWF  xFA,W
00502:  MOVWF  FE9
00504:  MOVLW  00
00506:  ADDWFC xFB,W
00508:  MOVWF  FEA
0050A:  MOVLW  7F
0050C:  MOVWF  FEF
....................             sw->on.needs_update=1; 
0050E:  MOVLW  05
00510:  ADDWF  xFA,W
00512:  MOVWF  FE9
00514:  MOVLW  00
00516:  ADDWFC xFB,W
00518:  MOVWF  FEA
0051A:  BSF    FEF.0
....................          } 
....................         else 
0051C:  BRA    0626
....................         { 
....................          sw->outstate = dimming; 
0051E:  MOVLW  0F
00520:  ADDWF  xFA,W
00522:  MOVWF  FE9
00524:  MOVLW  00
00526:  ADDWFC xFB,W
00528:  MOVWF  FEA
0052A:  MOVLW  02
0052C:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
0052E:  MOVLW  0A
00530:  ADDWF  xFA,W
00532:  MOVWF  FE9
00534:  MOVLW  00
00536:  ADDWFC xFB,W
00538:  MOVWF  FEA
0053A:  MOVFF  FEF,00
0053E:  MOVFF  FEC,01
00542:  MOVFF  FEC,02
00546:  MOVFF  FEC,03
0054A:  MOVF   00,W
0054C:  SUBWF  x3B,W
0054E:  MOVWF  xFD
00550:  MOVF   01,W
00552:  SUBWFB x3C,W
00554:  MOVWF  xFE
00556:  MOVF   02,W
00558:  SUBWFB x3D,W
0055A:  MOVWF  xFF
0055C:  MOVF   03,W
0055E:  SUBWFB x3E,W
00560:  MOVLB  7
00562:  MOVWF  x00
00564:  MOVF   x00,F
00566:  BNZ   0586
00568:  MOVLB  6
0056A:  MOVF   xFF,F
0056C:  BTFSC  FD8.2
0056E:  BRA    0574
00570:  MOVLB  7
00572:  BRA    0586
00574:  MOVF   xFE,F
00576:  BTFSC  FD8.2
00578:  BRA    057E
0057A:  MOVLB  7
0057C:  BRA    0586
0057E:  MOVF   xFD,W
00580:  SUBWF  x3F,W
00582:  BC    060A
00584:  MOVLB  7
....................          { 
....................             if (sw->direction == up) //para cima 
00586:  MOVLW  0E
00588:  MOVLB  6
0058A:  ADDWF  xFA,W
0058C:  MOVWF  FE9
0058E:  MOVLW  00
00590:  ADDWFC xFB,W
00592:  MOVWF  FEA
00594:  MOVLW  00
00596:  BTFSC  FEF.2
00598:  MOVLW  01
0059A:  ANDLW  01
0059C:  BNZ   05CE
....................             { 
....................                ++sw->current_level; 
0059E:  MOVLW  09
005A0:  ADDWF  xFA,W
005A2:  MOVWF  FE9
005A4:  MOVLW  00
005A6:  ADDWFC xFB,W
005A8:  MOVWF  FEA
005AA:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
005AC:  MOVLW  09
005AE:  ADDWF  xFA,W
005B0:  MOVWF  FE9
005B2:  MOVLW  00
005B4:  ADDWFC xFB,W
005B6:  MOVWF  FEA
005B8:  MOVF   FEF,W
005BA:  SUBLW  7F
005BC:  BNZ   05CC
005BE:  MOVLW  0E
005C0:  ADDWF  xFA,W
005C2:  MOVWF  FE9
005C4:  MOVLW  00
005C6:  ADDWFC xFB,W
005C8:  MOVWF  FEA
005CA:  BSF    FEF.2
....................             } 
....................             else//para baixo 
005CC:  BRA    060A
....................             { 
....................                --sw->current_level; 
005CE:  MOVLW  09
005D0:  ADDWF  xFA,W
005D2:  MOVWF  FE9
005D4:  MOVLW  00
005D6:  ADDWFC xFB,W
005D8:  MOVWF  FEA
005DA:  DECF   FEF,F
....................                if (sw->current_level == 0)  
005DC:  MOVLW  09
005DE:  ADDWF  xFA,W
005E0:  MOVWF  FE9
005E2:  MOVLW  00
005E4:  ADDWFC xFB,W
005E6:  MOVWF  FEA
005E8:  MOVF   FEF,F
005EA:  BNZ   060A
....................                {   
....................                   sw->direction = up; 
005EC:  MOVLW  0E
005EE:  ADDWF  xFA,W
005F0:  MOVWF  FE9
005F2:  MOVLW  00
005F4:  ADDWFC xFB,W
005F6:  MOVWF  FEA
005F8:  BCF    FEF.2
....................                   sw->off.value=1; 
005FA:  MOVLW  07
005FC:  ADDWF  xFA,W
005FE:  MOVWF  FE9
00600:  MOVLW  00
00602:  ADDWFC xFB,W
00604:  MOVWF  FEA
00606:  MOVLW  01
00608:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
0060A:  MOVLW  0A
0060C:  ADDWF  xFA,W
0060E:  MOVWF  FE9
00610:  MOVLW  00
00612:  ADDWFC xFB,W
00614:  MOVWF  FEA
00616:  MOVFF  63B,FEF
0061A:  MOVFF  63C,FEC
0061E:  MOVFF  63D,FEC
00622:  MOVFF  63E,FEC
....................       } 
....................       } 
....................       else 
00626:  BRA    0628
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
00628:  BRA    078A
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
0062A:  MOVLW  0E
0062C:  ADDWF  xFA,W
0062E:  MOVWF  FE9
00630:  MOVLW  00
00632:  ADDWFC xFB,W
00634:  MOVWF  FEA
00636:  MOVLW  00
00638:  BTFSC  FEF.1
0063A:  MOVLW  01
0063C:  ANDLW  01
0063E:  BTFSS  FD8.2
00640:  BRA    076E
....................       { 
....................          sw->previous_state = button_depressed; 
00642:  MOVLW  0E
00644:  ADDWF  xFA,W
00646:  MOVWF  FE9
00648:  MOVLW  00
0064A:  ADDWFC xFB,W
0064C:  MOVWF  FEA
0064E:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
00650:  MOVLW  0F
00652:  ADDWF  xFA,W
00654:  MOVWF  FE9
00656:  MOVLW  00
00658:  ADDWFC xFB,W
0065A:  MOVWF  FEA
0065C:  MOVF   FEF,W
0065E:  SUBLW  02
00660:  BNZ   06A6
....................          { 
....................             sw-> outstate = on; 
00662:  MOVLW  0F
00664:  ADDWF  xFA,W
00666:  MOVWF  FE9
00668:  MOVLW  00
0066A:  ADDWFC xFB,W
0066C:  MOVWF  FEA
0066E:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
00670:  MOVLW  0E
00672:  ADDWF  xFA,W
00674:  MOVWF  FE9
00676:  MOVLW  00
00678:  ADDWFC xFB,W
0067A:  MOVWF  FEA
0067C:  MOVLW  00
0067E:  BTFSC  FEF.2
00680:  MOVLW  01
00682:  ANDLW  01
00684:  BNZ   0696
00686:  MOVLW  0E
00688:  ADDWF  xFA,W
0068A:  MOVWF  FE9
0068C:  MOVLW  00
0068E:  ADDWFC xFB,W
00690:  MOVWF  FEA
00692:  BSF    FEF.2
....................             else sw->direction = up; 
00694:  BRA    06A4
00696:  MOVLW  0E
00698:  ADDWF  xFA,W
0069A:  MOVWF  FE9
0069C:  MOVLW  00
0069E:  ADDWFC xFB,W
006A0:  MOVWF  FEA
006A2:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
006A4:  BRA    076E
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
006A6:  MOVLW  0F
006A8:  ADDWF  xFA,W
006AA:  MOVWF  FE9
006AC:  MOVLW  00
006AE:  ADDWFC xFB,W
006B0:  MOVWF  FEA
006B2:  DECFSZ FEF,W
006B4:  BRA    06F2
....................             { 
....................                sw->outstate=on; 
006B6:  MOVLW  0F
006B8:  ADDWF  xFA,W
006BA:  MOVWF  FE9
006BC:  MOVLW  00
006BE:  ADDWFC xFB,W
006C0:  MOVWF  FEA
006C2:  CLRF   FEF
....................                sw->on.value=1; 
006C4:  MOVLW  04
006C6:  ADDWF  xFA,W
006C8:  MOVWF  FE9
006CA:  MOVLW  00
006CC:  ADDWFC xFB,W
006CE:  MOVWF  FEA
006D0:  MOVLW  01
006D2:  MOVWF  FEF
....................                sw->direction = down; 
006D4:  MOVLW  0E
006D6:  ADDWF  xFA,W
006D8:  MOVWF  FE9
006DA:  MOVLW  00
006DC:  ADDWFC xFB,W
006DE:  MOVWF  FEA
006E0:  BSF    FEF.2
....................                sw->on.needs_update=true; 
006E2:  MOVLW  05
006E4:  ADDWF  xFA,W
006E6:  MOVWF  FE9
006E8:  MOVLW  00
006EA:  ADDWFC xFB,W
006EC:  MOVWF  FEA
006EE:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
006F0:  BRA    076E
006F2:  MOVLW  0F
006F4:  ADDWF  xFA,W
006F6:  MOVWF  FE9
006F8:  MOVLW  00
006FA:  ADDWFC xFB,W
006FC:  MOVWF  FEA
006FE:  MOVF   FEF,F
00700:  BNZ   0740
....................             { 
....................                sw->outstate=off; 
00702:  MOVLW  0F
00704:  ADDWF  xFA,W
00706:  MOVWF  FE9
00708:  MOVLW  00
0070A:  ADDWFC xFB,W
0070C:  MOVWF  FEA
0070E:  MOVLW  01
00710:  MOVWF  FEF
....................                sw->off.value=1; 
00712:  MOVLW  07
00714:  ADDWF  xFA,W
00716:  MOVWF  FE9
00718:  MOVLW  00
0071A:  ADDWFC xFB,W
0071C:  MOVWF  FEA
0071E:  MOVLW  01
00720:  MOVWF  FEF
....................                sw->direction = up; 
00722:  MOVLW  0E
00724:  ADDWF  xFA,W
00726:  MOVWF  FE9
00728:  MOVLW  00
0072A:  ADDWFC xFB,W
0072C:  MOVWF  FEA
0072E:  BCF    FEF.2
....................                sw->off.needs_update=true; 
00730:  MOVLW  08
00732:  ADDWF  xFA,W
00734:  MOVWF  FE9
00736:  MOVLW  00
00738:  ADDWFC xFB,W
0073A:  MOVWF  FEA
0073C:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
0073E:  BRA    076E
00740:  MOVLW  0F
00742:  ADDWF  xFA,W
00744:  MOVWF  FE9
00746:  MOVLW  00
00748:  ADDWFC xFB,W
0074A:  MOVWF  FEA
0074C:  MOVF   FEF,W
0074E:  SUBLW  04
00750:  BNZ   076E
....................             { 
....................                sw->outstate=on; 
00752:  MOVLW  0F
00754:  ADDWF  xFA,W
00756:  MOVWF  FE9
00758:  MOVLW  00
0075A:  ADDWFC xFB,W
0075C:  MOVWF  FEA
0075E:  CLRF   FEF
....................                sw->direction = down; 
00760:  MOVLW  0E
00762:  ADDWF  xFA,W
00764:  MOVWF  FE9
00766:  MOVLW  00
00768:  ADDWFC xFB,W
0076A:  MOVWF  FEA
0076C:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
0076E:  MOVLW  0A
00770:  ADDWF  xFA,W
00772:  MOVWF  FE9
00774:  MOVLW  00
00776:  ADDWFC xFB,W
00778:  MOVWF  FEA
0077A:  MOVFF  63B,FEF
0077E:  MOVFF  63C,FEC
00782:  MOVFF  63D,FEC
00786:  MOVFF  63E,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
0078A:  MOVLW  09
0078C:  ADDWF  xFA,W
0078E:  MOVWF  FE9
00790:  MOVLW  00
00792:  ADDWFC xFB,W
00794:  MOVWF  FEA
00796:  MOVF   FEF,W
00798:  SUBWF  xFC,W
0079A:  BZ    07D2
....................    { 
....................       sw->dim_level.value=sw->current_level; 
0079C:  MOVLW  01
0079E:  ADDWF  xFA,W
007A0:  MOVWF  01
007A2:  MOVLW  00
007A4:  ADDWFC xFB,W
007A6:  MOVWF  03
007A8:  MOVLW  09
007AA:  ADDWF  xFA,W
007AC:  MOVWF  FE9
007AE:  MOVLW  00
007B0:  ADDWFC xFB,W
007B2:  MOVWF  FEA
007B4:  MOVFF  FEF,6FF
007B8:  MOVFF  03,FEA
007BC:  MOVFF  01,FE9
007C0:  MOVFF  6FF,FEF
....................       sw->dim_level.needs_update=true; 
007C4:  MOVLW  02
007C6:  ADDWF  xFA,W
007C8:  MOVWF  FE9
007CA:  MOVLW  00
007CC:  ADDWFC xFB,W
007CE:  MOVWF  FEA
007D0:  BSF    FEF.0
....................    } 
.................... } 
007D2:  MOVLB  0
007D4:  GOTO   0E1E (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
009E2:  MOVLB  6
009E4:  CLRF   xF7
009E6:  MOVLB  1
009E8:  MOVF   x3E,W
009EA:  MOVLB  6
009EC:  SUBWF  xF7,W
009EE:  BTFSC  FD8.0
009F0:  BRA    0E24
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
009F2:  CLRF   xF9
009F4:  MOVFF  6F7,6F8
009F8:  CLRF   xFB
009FA:  MOVLW  21
009FC:  MOVWF  xFA
009FE:  MOVLB  0
00A00:  RCALL  035E
00A02:  MOVFF  02,03
00A06:  MOVF   01,W
00A08:  ADDLW  40
00A0A:  MOVWF  01
00A0C:  MOVLW  01
00A0E:  ADDWFC 03,F
00A10:  MOVFF  01,FE9
00A14:  MOVFF  03,FEA
00A18:  MOVF   FEF,W
00A1A:  BZ    0A30
00A1C:  XORLW  03
00A1E:  BTFSC  FD8.2
00A20:  BRA    0B76
00A22:  XORLW  02
00A24:  BTFSC  FD8.2
00A26:  BRA    0B78
00A28:  XORLW  03
00A2A:  BTFSC  FD8.2
00A2C:  BRA    0CCA
00A2E:  BRA    0E1C
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00A30:  MOVLB  6
00A32:  CLRF   xF9
00A34:  MOVFF  6F7,6F8
00A38:  CLRF   xFB
00A3A:  MOVLW  21
00A3C:  MOVWF  xFA
00A3E:  MOVLB  0
00A40:  RCALL  035E
00A42:  MOVF   01,W
00A44:  ADDLW  02
00A46:  MOVLB  6
00A48:  MOVWF  xF8
00A4A:  MOVLW  00
00A4C:  ADDWFC 02,W
00A4E:  MOVWF  xF9
00A50:  MOVLW  01
00A52:  ADDWF  xF8,W
00A54:  MOVWF  01
00A56:  MOVLW  00
00A58:  ADDWFC xF9,W
00A5A:  MOVWF  03
00A5C:  MOVF   01,W
00A5E:  ADDLW  3E
00A60:  MOVWF  01
00A62:  MOVLW  01
00A64:  ADDWFC 03,F
00A66:  MOVF   01,W
00A68:  ADDLW  10
00A6A:  MOVWF  FE9
00A6C:  MOVLW  00
00A6E:  ADDWFC 03,W
00A70:  MOVWF  FEA
00A72:  MOVFF  FEF,6FA
00A76:  MOVFF  6FA,6FB
00A7A:  MOVLW  01
00A7C:  MOVWF  xFC
00A7E:  MOVLW  0F
00A80:  MOVWF  xFE
00A82:  MOVLW  92
00A84:  MOVWF  xFD
00A86:  MOVLB  0
00A88:  RCALL  0380
00A8A:  MOVFF  6FA,6FB
00A8E:  MOVLW  0F
00A90:  MOVLB  6
00A92:  MOVWF  xFD
00A94:  MOVLW  80
00A96:  MOVWF  xFC
00A98:  MOVLB  0
00A9A:  RCALL  03C2
00A9C:  BTFSS  01.0
00A9E:  BRA    0AE8
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00AA0:  MOVLB  6
00AA2:  CLRF   xF9
00AA4:  MOVFF  6F7,6F8
00AA8:  CLRF   xFB
00AAA:  MOVLW  21
00AAC:  MOVWF  xFA
00AAE:  MOVLB  0
00AB0:  RCALL  035E
00AB2:  MOVF   01,W
00AB4:  ADDLW  02
00AB6:  MOVLB  6
00AB8:  MOVWF  xF8
00ABA:  MOVLW  00
00ABC:  ADDWFC 02,W
00ABE:  MOVWF  xF9
00AC0:  MOVLW  01
00AC2:  ADDWF  xF8,W
00AC4:  MOVWF  01
00AC6:  MOVLW  00
00AC8:  ADDWFC xF9,W
00ACA:  MOVWF  03
00ACC:  MOVF   01,W
00ACE:  ADDLW  3E
00AD0:  MOVWF  01
00AD2:  MOVLW  01
00AD4:  ADDWFC 03,F
00AD6:  MOVF   01,W
00AD8:  ADDLW  0E
00ADA:  MOVWF  FE9
00ADC:  MOVLW  00
00ADE:  ADDWFC 03,W
00AE0:  MOVWF  FEA
00AE2:  BSF    FEF.0
....................             } 
....................             else  
00AE4:  BRA    0B2C
00AE6:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00AE8:  MOVLB  6
00AEA:  CLRF   xF9
00AEC:  MOVFF  6F7,6F8
00AF0:  CLRF   xFB
00AF2:  MOVLW  21
00AF4:  MOVWF  xFA
00AF6:  MOVLB  0
00AF8:  RCALL  035E
00AFA:  MOVF   01,W
00AFC:  ADDLW  02
00AFE:  MOVLB  6
00B00:  MOVWF  xF8
00B02:  MOVLW  00
00B04:  ADDWFC 02,W
00B06:  MOVWF  xF9
00B08:  MOVLW  01
00B0A:  ADDWF  xF8,W
00B0C:  MOVWF  01
00B0E:  MOVLW  00
00B10:  ADDWFC xF9,W
00B12:  MOVWF  03
00B14:  MOVF   01,W
00B16:  ADDLW  3E
00B18:  MOVWF  01
00B1A:  MOVLW  01
00B1C:  ADDWFC 03,F
00B1E:  MOVF   01,W
00B20:  ADDLW  0E
00B22:  MOVWF  FE9
00B24:  MOVLW  00
00B26:  ADDWFC 03,W
00B28:  MOVWF  FEA
00B2A:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00B2C:  CLRF   xF9
00B2E:  MOVFF  6F7,6F8
00B32:  CLRF   xFB
00B34:  MOVLW  21
00B36:  MOVWF  xFA
00B38:  MOVLB  0
00B3A:  RCALL  035E
00B3C:  MOVF   01,W
00B3E:  ADDLW  02
00B40:  MOVLB  6
00B42:  MOVWF  xF8
00B44:  MOVLW  00
00B46:  ADDWFC 02,W
00B48:  MOVWF  xF9
00B4A:  MOVLW  01
00B4C:  ADDWF  xF8,W
00B4E:  MOVWF  01
00B50:  MOVLW  00
00B52:  ADDWFC xF9,W
00B54:  MOVWF  03
00B56:  MOVF   01,W
00B58:  ADDLW  3E
00B5A:  MOVWF  01
00B5C:  MOVLW  01
00B5E:  ADDWFC 03,F
00B60:  MOVFF  01,6F8
00B64:  MOVFF  03,6F9
00B68:  MOVFF  03,6FB
00B6C:  MOVFF  01,6FA
00B70:  MOVLB  0
00B72:  BRA    03F4
....................             break; 
00B74:  BRA    0E1E
....................     case timer: 
....................  
....................            break; 
00B76:  BRA    0E1E
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00B78:  MOVLB  6
00B7A:  CLRF   xF9
00B7C:  MOVFF  6F7,6F8
00B80:  CLRF   xFB
00B82:  MOVLW  21
00B84:  MOVWF  xFA
00B86:  MOVLB  0
00B88:  CALL   035E
00B8C:  MOVF   01,W
00B8E:  ADDLW  02
00B90:  MOVLB  6
00B92:  MOVWF  xF8
00B94:  MOVLW  00
00B96:  ADDWFC 02,W
00B98:  MOVWF  xF9
00B9A:  MOVLW  01
00B9C:  ADDWF  xF8,W
00B9E:  MOVWF  01
00BA0:  MOVLW  00
00BA2:  ADDWFC xF9,W
00BA4:  MOVWF  03
00BA6:  MOVF   01,W
00BA8:  ADDLW  3E
00BAA:  MOVWF  01
00BAC:  MOVLW  01
00BAE:  ADDWFC 03,F
00BB0:  MOVF   01,W
00BB2:  ADDLW  0C
00BB4:  MOVWF  FE9
00BB6:  MOVLW  00
00BB8:  ADDWFC 03,W
00BBA:  MOVWF  FEA
00BBC:  MOVFF  FEF,6FA
00BC0:  MOVFF  6FA,6FB
00BC4:  MOVLW  01
00BC6:  MOVWF  xFC
00BC8:  MOVLW  0F
00BCA:  MOVWF  xFE
00BCC:  MOVLW  92
00BCE:  MOVWF  xFD
00BD0:  MOVLB  0
00BD2:  CALL   0380
00BD6:  MOVFF  6FA,6FB
00BDA:  MOVLW  0F
00BDC:  MOVLB  6
00BDE:  MOVWF  xFD
00BE0:  MOVLW  80
00BE2:  MOVWF  xFC
00BE4:  MOVLB  0
00BE6:  CALL   03C2
00BEA:  BTFSS  01.0
00BEC:  BRA    0C38
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00BEE:  MOVLB  6
00BF0:  CLRF   xF9
00BF2:  MOVFF  6F7,6F8
00BF6:  CLRF   xFB
00BF8:  MOVLW  21
00BFA:  MOVWF  xFA
00BFC:  MOVLB  0
00BFE:  CALL   035E
00C02:  MOVF   01,W
00C04:  ADDLW  02
00C06:  MOVLB  6
00C08:  MOVWF  xF8
00C0A:  MOVLW  00
00C0C:  ADDWFC 02,W
00C0E:  MOVWF  xF9
00C10:  MOVLW  01
00C12:  ADDWF  xF8,W
00C14:  MOVWF  01
00C16:  MOVLW  00
00C18:  ADDWFC xF9,W
00C1A:  MOVWF  03
00C1C:  MOVF   01,W
00C1E:  ADDLW  3E
00C20:  MOVWF  01
00C22:  MOVLW  01
00C24:  ADDWFC 03,F
00C26:  MOVF   01,W
00C28:  ADDLW  06
00C2A:  MOVWF  FE9
00C2C:  MOVLW  00
00C2E:  ADDWFC 03,W
00C30:  MOVWF  FEA
00C32:  BSF    FEF.0
....................             } 
....................             else  
00C34:  BRA    0C7E
00C36:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00C38:  MOVLB  6
00C3A:  CLRF   xF9
00C3C:  MOVFF  6F7,6F8
00C40:  CLRF   xFB
00C42:  MOVLW  21
00C44:  MOVWF  xFA
00C46:  MOVLB  0
00C48:  CALL   035E
00C4C:  MOVF   01,W
00C4E:  ADDLW  02
00C50:  MOVLB  6
00C52:  MOVWF  xF8
00C54:  MOVLW  00
00C56:  ADDWFC 02,W
00C58:  MOVWF  xF9
00C5A:  MOVLW  01
00C5C:  ADDWF  xF8,W
00C5E:  MOVWF  01
00C60:  MOVLW  00
00C62:  ADDWFC xF9,W
00C64:  MOVWF  03
00C66:  MOVF   01,W
00C68:  ADDLW  3E
00C6A:  MOVWF  01
00C6C:  MOVLW  01
00C6E:  ADDWFC 03,F
00C70:  MOVF   01,W
00C72:  ADDLW  06
00C74:  MOVWF  FE9
00C76:  MOVLW  00
00C78:  ADDWFC 03,W
00C7A:  MOVWF  FEA
00C7C:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00C7E:  CLRF   xF9
00C80:  MOVFF  6F7,6F8
00C84:  CLRF   xFB
00C86:  MOVLW  21
00C88:  MOVWF  xFA
00C8A:  MOVLB  0
00C8C:  CALL   035E
00C90:  MOVF   01,W
00C92:  ADDLW  02
00C94:  MOVLB  6
00C96:  MOVWF  xF8
00C98:  MOVLW  00
00C9A:  ADDWFC 02,W
00C9C:  MOVWF  xF9
00C9E:  MOVLW  01
00CA0:  ADDWF  xF8,W
00CA2:  MOVWF  01
00CA4:  MOVLW  00
00CA6:  ADDWFC xF9,W
00CA8:  MOVWF  03
00CAA:  MOVF   01,W
00CAC:  ADDLW  3E
00CAE:  MOVWF  01
00CB0:  MOVLW  01
00CB2:  ADDWFC 03,F
00CB4:  MOVFF  01,6F8
00CB8:  MOVFF  03,6F9
00CBC:  MOVFF  03,6FB
00CC0:  MOVFF  01,6FA
00CC4:  MOVLB  0
00CC6:  BRA    07D8
....................     break; 
00CC8:  BRA    0E1E
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00CCA:  MOVLB  6
00CCC:  CLRF   xF9
00CCE:  MOVFF  6F7,6F8
00CD2:  CLRF   xFB
00CD4:  MOVLW  21
00CD6:  MOVWF  xFA
00CD8:  MOVLB  0
00CDA:  CALL   035E
00CDE:  MOVF   01,W
00CE0:  ADDLW  02
00CE2:  MOVLB  6
00CE4:  MOVWF  xF8
00CE6:  MOVLW  00
00CE8:  ADDWFC 02,W
00CEA:  MOVWF  xF9
00CEC:  MOVLW  01
00CEE:  ADDWF  xF8,W
00CF0:  MOVWF  01
00CF2:  MOVLW  00
00CF4:  ADDWFC xF9,W
00CF6:  MOVWF  03
00CF8:  MOVF   01,W
00CFA:  ADDLW  3E
00CFC:  MOVWF  01
00CFE:  MOVLW  01
00D00:  ADDWFC 03,F
00D02:  MOVF   01,W
00D04:  ADDLW  09
00D06:  MOVWF  FE9
00D08:  MOVLW  00
00D0A:  ADDWFC 03,W
00D0C:  MOVWF  FEA
00D0E:  MOVFF  FEF,6FA
00D12:  MOVFF  6FA,6FB
00D16:  MOVLW  01
00D18:  MOVWF  xFC
00D1A:  MOVLW  0F
00D1C:  MOVWF  xFE
00D1E:  MOVLW  92
00D20:  MOVWF  xFD
00D22:  MOVLB  0
00D24:  CALL   0380
00D28:  MOVFF  6FA,6FB
00D2C:  MOVLW  0F
00D2E:  MOVLB  6
00D30:  MOVWF  xFD
00D32:  MOVLW  80
00D34:  MOVWF  xFC
00D36:  MOVLB  0
00D38:  CALL   03C2
00D3C:  BTFSS  01.0
00D3E:  BRA    0D8A
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00D40:  MOVLB  6
00D42:  CLRF   xF9
00D44:  MOVFF  6F7,6F8
00D48:  CLRF   xFB
00D4A:  MOVLW  21
00D4C:  MOVWF  xFA
00D4E:  MOVLB  0
00D50:  CALL   035E
00D54:  MOVF   01,W
00D56:  ADDLW  02
00D58:  MOVLB  6
00D5A:  MOVWF  xF8
00D5C:  MOVLW  00
00D5E:  ADDWFC 02,W
00D60:  MOVWF  xF9
00D62:  MOVLW  01
00D64:  ADDWF  xF8,W
00D66:  MOVWF  01
00D68:  MOVLW  00
00D6A:  ADDWFC xF9,W
00D6C:  MOVWF  03
00D6E:  MOVF   01,W
00D70:  ADDLW  3E
00D72:  MOVWF  01
00D74:  MOVLW  01
00D76:  ADDWFC 03,F
00D78:  MOVF   01,W
00D7A:  ADDLW  06
00D7C:  MOVWF  FE9
00D7E:  MOVLW  00
00D80:  ADDWFC 03,W
00D82:  MOVWF  FEA
00D84:  BSF    FEF.0
....................             } 
....................             else  
00D86:  BRA    0DD0
00D88:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00D8A:  MOVLB  6
00D8C:  CLRF   xF9
00D8E:  MOVFF  6F7,6F8
00D92:  CLRF   xFB
00D94:  MOVLW  21
00D96:  MOVWF  xFA
00D98:  MOVLB  0
00D9A:  CALL   035E
00D9E:  MOVF   01,W
00DA0:  ADDLW  02
00DA2:  MOVLB  6
00DA4:  MOVWF  xF8
00DA6:  MOVLW  00
00DA8:  ADDWFC 02,W
00DAA:  MOVWF  xF9
00DAC:  MOVLW  01
00DAE:  ADDWF  xF8,W
00DB0:  MOVWF  01
00DB2:  MOVLW  00
00DB4:  ADDWFC xF9,W
00DB6:  MOVWF  03
00DB8:  MOVF   01,W
00DBA:  ADDLW  3E
00DBC:  MOVWF  01
00DBE:  MOVLW  01
00DC0:  ADDWFC 03,F
00DC2:  MOVF   01,W
00DC4:  ADDLW  06
00DC6:  MOVWF  FE9
00DC8:  MOVLW  00
00DCA:  ADDWFC 03,W
00DCC:  MOVWF  FEA
00DCE:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00DD0:  CLRF   xF9
00DD2:  MOVFF  6F7,6F8
00DD6:  CLRF   xFB
00DD8:  MOVLW  21
00DDA:  MOVWF  xFA
00DDC:  MOVLB  0
00DDE:  CALL   035E
00DE2:  MOVF   01,W
00DE4:  ADDLW  02
00DE6:  MOVLB  6
00DE8:  MOVWF  xF8
00DEA:  MOVLW  00
00DEC:  ADDWFC 02,W
00DEE:  MOVWF  xF9
00DF0:  MOVLW  01
00DF2:  ADDWF  xF8,W
00DF4:  MOVWF  01
00DF6:  MOVLW  00
00DF8:  ADDWFC xF9,W
00DFA:  MOVWF  03
00DFC:  MOVF   01,W
00DFE:  ADDLW  3E
00E00:  MOVWF  01
00E02:  MOVLW  01
00E04:  ADDWFC 03,F
00E06:  MOVFF  01,6F8
00E0A:  MOVFF  03,6F9
00E0E:  MOVFF  03,6FB
00E12:  MOVFF  01,6FA
00E16:  MOVLB  0
00E18:  BRA    08F8
....................     break; 
00E1A:  BRA    0E1E
....................     default: 
....................  
....................             break;  
00E1C:  BRA    0E1E
....................             } 
....................  
....................    } 
00E1E:  MOVLB  6
00E20:  INCF   xF7,F
00E22:  BRA    09E6
.................... } 
00E24:  MOVLB  0
00E26:  GOTO   0E44 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00E2A:  MOVLW  01
00E2C:  MOVLB  6
00E2E:  ADDWF  x3B,F
00E30:  BTFSC  FD8.0
00E32:  INCF   x3C,F
00E34:  BTFSC  FD8.2
00E36:  INCF   x3D,F
00E38:  BTFSC  FD8.2
00E3A:  INCF   x3E,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00E3C:  BTFSS  x3B.1
00E3E:  BRA    0E46
00E40:  MOVLB  0
00E42:  BRA    09E2
00E44:  MOVLB  6
.................... } 
....................  
00E46:  BCF    FF2.2
00E48:  MOVLB  0
00E4A:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
00E4E:  BSF    xB5.5
.................... } 
00E50:  BCF    F9E.0
00E52:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
00E56:  MOVLB  6
00E58:  INCF   x46,F
....................    if(clockT2temp==200)//1 second call 
00E5A:  MOVF   x46,W
00E5C:  SUBLW  C8
00E5E:  BNZ   0E78
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00E60:  CLRF   x46
....................       ++secClock; 
00E62:  MOVLW  01
00E64:  ADDWF  24,F
00E66:  BTFSC  FD8.0
00E68:  INCF   25,F
00E6A:  BTFSC  FD8.2
00E6C:  INCF   26,F
00E6E:  BTFSC  FD8.2
00E70:  INCF   27,F
....................       secondFlag=true; 
00E72:  MOVLB  0
00E74:  BSF    xB5.4
00E76:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00E78:  BCF    F9E.1
00E7A:  MOVLB  0
00E7C:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
.................... /* 
.................... portc=0xFF;//MAKE8(onoffsvalue,1); 
.................... portd=0xFF;//MAKE8(onoffsvalue,0); 
.................... CCP_1=36819; 
.................... set_timer1(0); 
.................... return;*/ 
....................  
....................          portc=MAKE8(onoffsvalue,1); 
00E80:  MOVLB  5
00E82:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00E86:  MOVFF  57F,F83
....................   
....................    { 
....................          if (organizado) 
00E8A:  MOVLB  0
00E8C:  BTFSS  xB5.2
00E8E:  BRA    0EB2
....................          { 
....................             organizado=0; 
00E90:  BCF    xB5.2
....................             if (actmat)  
00E92:  BTFSS  xB5.3
00E94:  BRA    0EA6
....................             { 
....................                actmat=0; 
00E96:  BCF    xB5.3
....................                pointer=delays1; 
00E98:  MOVLW  05
00E9A:  MOVLB  5
00E9C:  MOVWF  x7C
00E9E:  MOVLW  91
00EA0:  MOVWF  x7B
....................             } 
....................             else 
00EA2:  BRA    0EB2
00EA4:  MOVLB  0
....................             { 
....................                actmat=1; 
00EA6:  BSF    xB5.3
....................                pointer=delays2; 
00EA8:  MOVLW  05
00EAA:  MOVLB  5
00EAC:  MOVWF  x7C
00EAE:  MOVLW  D5
00EB0:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00EB2:  MOVLB  5
00EB4:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00EB6:  MOVLB  6
00EB8:  CLRF   xF9
00EBA:  CLRF   xFA
*
00F26:  MOVFF  02,6F8
00F2A:  MOVFF  01,6F7
00F2E:  BCF    FD8.0
00F30:  RLCF   01,W
00F32:  MOVWF  02
00F34:  RLCF   xF8,W
00F36:  MOVWF  03
00F38:  MOVF   02,W
00F3A:  MOVLB  0
00F3C:  CALL   01A6
00F40:  TBLRD*+
00F42:  MOVFF  FF5,03
00F46:  MOVWF  FBE
00F48:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
00F4C:  MOVLW  10
00F4E:  MOVLB  6
00F50:  MOVWF  xF9
00F52:  CLRF   xFA
*
00FBE:  MOVFF  01,57E
....................           
....................    } 
....................          set_timer1(0); 
00FC2:  CLRF   FCF
00FC4:  CLRF   FCE
....................          syncError=false; 
00FC6:  MOVLB  0
00FC8:  BCF    xB5.5
.................... } 
....................  
00FCA:  BCF    FF2.1
00FCC:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {  /* 
.................... portc=(portc & MAKE8(0b1111111111111110,1)); 
.................... portd=(portd & MAKE8(0b1111111111111110,0)); 
.................... return;*/ 
....................     // while(true){}; 
....................    if(mnumluzes!=0) 
00FD0:  MOVLB  5
00FD2:  MOVF   x7E,F
00FD4:  BTFSC  FD8.2
00FD6:  BRA    10FC
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
00FD8:  MOVFF  57D,6F9
00FDC:  MOVLW  01
00FDE:  MOVLB  6
00FE0:  MOVWF  xFA
*
0104C:  MOVFF  02,6F8
01050:  MOVFF  01,6F7
....................       portc=(portc & MAKE8(auxccp,1)); 
01054:  MOVF   xF8,W
01056:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
01058:  MOVF   xF7,W
0105A:  ANDWF  F83,F
....................       ++vez; 
0105C:  MOVLB  5
0105E:  INCF   x7D,F
....................       --mnumluzes; 
01060:  DECF   x7E,F
....................       CCP_1=matrizluz[fpointer(vez,0)]; 
01062:  MOVFF  57D,6F9
01066:  MOVLB  6
01068:  CLRF   xFA
*
010D4:  MOVFF  02,6FA
010D8:  MOVFF  01,6F9
010DC:  BCF    FD8.0
010DE:  RLCF   01,W
010E0:  MOVWF  02
010E2:  RLCF   xFA,W
010E4:  MOVWF  03
010E6:  MOVF   02,W
010E8:  MOVLB  0
010EA:  CALL   01A6
010EE:  TBLRD*+
010F0:  MOVFF  FF5,03
010F4:  MOVWF  FBE
010F6:  MOVFF  03,FBF
010FA:  MOVLB  5
....................    } 
.................... } 
....................  
010FC:  BCF    F9E.2
010FE:  MOVLB  0
01100:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
01104:  BCF    F9E.5
01106:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
0110A:  BCF    F9E.4
0110C:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
01110:  BCF    FA1.3
01112:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
....................    oscError=1; 
01116:  BSF    xB5.6
.................... } 
....................  
01118:  BCF    FA1.7
0111A:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
016F4:  RCALL  1316
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
016F6:  BCF    FA4.0
016F8:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
016FC:  RCALL  1316
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
016FE:  BCF    FA4.1
01700:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01B2C:  RCALL  190A
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01B2E:  BCF    FA4.2
01B30:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01B34:  RCALL  190A
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01B36:  BCF    FA4.3
01B38:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01B3C:  RCALL  190A
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01B3E:  BCF    FA4.4
01B40:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01B44:  BCF    FA4.7
01B46:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01B4A:  BCF    FA4.5
01B4C:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    enable_interrupts (int_canrx0); 
*
050CA:  BSF    FA3.0
....................    enable_interrupts (int_canrx1); 
050CC:  BSF    FA3.1
....................    enable_interrupts (int_cantx0); 
050CE:  BSF    FA3.2
....................    enable_interrupts (int_cantx1); 
050D0:  BSF    FA3.3
....................    enable_interrupts (int_cantx2); 
050D2:  BSF    FA3.4
....................    enable_interrupts (int_canirx); 
050D4:  BSF    FA3.7
....................    enable_interrupts (int_canerr); 
050D6:  BSF    FA3.5
....................    enable_interrupts(INT_CCP1); 
050D8:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
050DA:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
050DC:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
050DE:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
050E0:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    enable_interrupts (int_OSCF) ; 
050E2:  BSF    FA0.7
....................    enable_interrupts (GLOBAL) ; 
050E4:  MOVLW  C0
050E6:  IORWF  FF2,F
.................... } 
050E8:  GOTO   80B0 (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01D06:  BRA    1BB2
....................    can_set_mode (CAN_OP_CONFIG) ;   
01D08:  MOVLW  04
01D0A:  MOVLB  6
01D0C:  MOVWF  x7F
01D0E:  MOVLB  0
01D10:  RCALL  1B5C
....................    BRGCON1.brp = 4; 
01D12:  MOVLW  C0
01D14:  ANDWF  F70,W
01D16:  IORLW  04
01D18:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01D1A:  MOVLW  3F
01D1C:  ANDWF  F70,W
01D1E:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01D20:  MOVLW  F8
01D22:  ANDWF  F71,W
01D24:  IORLW  02
01D26:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01D28:  MOVLW  C7
01D2A:  ANDWF  F71,W
01D2C:  IORLW  28
01D2E:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01D30:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01D32:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01D34:  MOVLW  F8
01D36:  ANDWF  F72,W
01D38:  IORLW  05
01D3A:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01D3C:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01D3E:  MOVLB  6
01D40:  CLRF   x7F
01D42:  MOVLB  0
01D44:  RCALL  1B5C
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01D46:  MOVLW  81
01D48:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01D4A:  MOVLW  95
01D4C:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01D4E:  MOVLW  60
01D50:  IORLW  06
01D52:  MOVWF  FCA
01D54:  MOVLW  F1
01D56:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01D58:  MOVLW  0A
01D5A:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01D5C:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01D5E:  MOVF   FC1,W
01D60:  ANDLW  C0
01D62:  IORLW  0F
01D64:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01D66:  MOVF   FC0,W
01D68:  ANDLW  C0
01D6A:  MOVWF  FC0
01D6C:  BCF    FC0.7
01D6E:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01D70:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01D72:  BCF    FC6.5
01D74:  MOVLW  01
01D76:  MOVWF  FC6
01D78:  MOVLW  00
01D7A:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01D7C:  MOVLW  07
01D7E:  MOVWF  FB4
01D80:  MOVF   F95,W
01D82:  MOVWF  F95
01D84:  MOVF   F96,W
01D86:  MOVWF  F96
01D88:  CLRWDT
01D8A:  MOVLW  20
01D8C:  MOVWF  00
01D8E:  DECFSZ 00,F
01D90:  BRA    1D8E
01D92:  BRA    1D94
01D94:  MOVF   FB4,W
01D96:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01D98:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01D9A:  CLRF   FB1
....................     
....................    setup_wdt(WDT_ON); 
01D9C:  BSF    FD1.0
....................    output_low(PIN_B1); 
01D9E:  BCF    F93.1
01DA0:  BCF    F8A.1
....................    output_low(PIN_B6); 
01DA2:  BCF    F93.6
01DA4:  BCF    F8A.6
....................    output_low(PIN_B7); 
01DA6:  BCF    F93.7
01DA8:  BCF    F8A.7
....................    //setup_wdt (WDT_ON) ; 
....................    } 
01DAA:  GOTO   7DE6 (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
07BDC:  CLRF   FF8
07BDE:  BCF    FD0.7
07BE0:  BSF    07.7
07BE2:  CLRF   FEA
07BE4:  CLRF   FE9
07BE6:  BCF    F93.5
07BE8:  BSF    F8A.5
07BEA:  CLRF   27
07BEC:  CLRF   26
07BEE:  CLRF   25
07BF0:  CLRF   24
07BF2:  CLRF   28
07BF4:  BCF    xB5.0
07BF6:  CLRF   xB6
07BF8:  BSF    xB5.1
07BFA:  MOVLB  5
07BFC:  CLRF   x7A
07BFE:  MOVLB  0
07C00:  BCF    xB5.3
07C02:  MOVLB  5
07C04:  CLRF   x7E
07C06:  MOVLW  FF
07C08:  MOVWF  x80
07C0A:  MOVWF  x7F
07C0C:  MOVLB  6
07C0E:  CLRF   x3A
07C10:  CLRF   x39
07C12:  MOVLB  0
07C14:  BCF    xB5.6
07C16:  MOVLB  6
07C18:  CLRF   x3F
07C1A:  CLRF   x43
07C1C:  CLRF   x42
07C1E:  CLRF   x41
07C20:  MOVLW  27
07C22:  MOVWF  x40
07C24:  MOVF   FC1,W
07C26:  ANDLW  C0
07C28:  IORLW  0F
07C2A:  MOVWF  FC1
07C2C:  MOVLW  07
07C2E:  MOVWF  FB4
07C30:  CLRF   1C
07C32:  MOVLW  01
07C34:  MOVWF  1D
07C36:  MOVLW  02
07C38:  MOVWF  1E
07C3A:  MOVLW  03
07C3C:  MOVWF  1F
07C3E:  MOVLW  04
07C40:  MOVWF  20
07C42:  MOVLW  05
07C44:  MOVWF  21
07C46:  MOVLW  20
07C48:  MOVWF  22
07C4A:  MOVLW  21
07C4C:  MOVWF  23
07C4E:  MOVLW  0B
07C50:  MOVLB  1
07C52:  MOVWF  x39
07C54:  CLRF   x3A
07C56:  CLRF   x3B
07C58:  CLRF   x3C
07C5A:  MOVLB  5
07C5C:  CLRF   x81
07C5E:  CLRF   x82
07C60:  CLRF   x83
07C62:  CLRF   x84
07C64:  CLRF   x85
07C66:  CLRF   x86
07C68:  CLRF   x87
07C6A:  CLRF   x88
07C6C:  CLRF   x89
07C6E:  CLRF   x8A
07C70:  CLRF   x8B
07C72:  CLRF   x8C
07C74:  CLRF   x8D
07C76:  CLRF   x8E
07C78:  CLRF   x8F
07C7A:  CLRF   x90
07C7C:  CLRF   x91
07C7E:  CLRF   x92
07C80:  CLRF   x93
07C82:  CLRF   x94
07C84:  CLRF   x95
07C86:  CLRF   x96
07C88:  MOVLW  01
07C8A:  MOVWF  x97
07C8C:  CLRF   x98
07C8E:  CLRF   x99
07C90:  CLRF   x9A
07C92:  MOVLW  02
07C94:  MOVWF  x9B
07C96:  CLRF   x9C
07C98:  CLRF   x9D
07C9A:  CLRF   x9E
07C9C:  MOVLW  03
07C9E:  MOVWF  x9F
07CA0:  CLRF   xA0
07CA2:  CLRF   xA1
07CA4:  CLRF   xA2
07CA6:  MOVLW  04
07CA8:  MOVWF  xA3
07CAA:  CLRF   xA4
07CAC:  CLRF   xA5
07CAE:  CLRF   xA6
07CB0:  MOVLW  05
07CB2:  MOVWF  xA7
07CB4:  CLRF   xA8
07CB6:  CLRF   xA9
07CB8:  CLRF   xAA
07CBA:  MOVLW  06
07CBC:  MOVWF  xAB
07CBE:  CLRF   xAC
07CC0:  CLRF   xAD
07CC2:  CLRF   xAE
07CC4:  MOVLW  07
07CC6:  MOVWF  xAF
07CC8:  CLRF   xB0
07CCA:  CLRF   xB1
07CCC:  CLRF   xB2
07CCE:  MOVLW  08
07CD0:  MOVWF  xB3
07CD2:  CLRF   xB4
07CD4:  CLRF   xB5
07CD6:  CLRF   xB6
07CD8:  MOVLW  09
07CDA:  MOVWF  xB7
07CDC:  CLRF   xB8
07CDE:  CLRF   xB9
07CE0:  CLRF   xBA
07CE2:  MOVLW  0A
07CE4:  MOVWF  xBB
07CE6:  CLRF   xBC
07CE8:  CLRF   xBD
07CEA:  CLRF   xBE
07CEC:  MOVLW  0B
07CEE:  MOVWF  xBF
07CF0:  CLRF   xC0
07CF2:  CLRF   xC1
07CF4:  CLRF   xC2
07CF6:  MOVLW  0C
07CF8:  MOVWF  xC3
07CFA:  CLRF   xC4
07CFC:  CLRF   xC5
07CFE:  CLRF   xC6
07D00:  MOVLW  0D
07D02:  MOVWF  xC7
07D04:  CLRF   xC8
07D06:  CLRF   xC9
07D08:  CLRF   xCA
07D0A:  MOVLW  0E
07D0C:  MOVWF  xCB
07D0E:  CLRF   xCC
07D10:  CLRF   xCD
07D12:  CLRF   xCE
07D14:  MOVLW  0F
07D16:  MOVWF  xCF
07D18:  CLRF   xD0
07D1A:  CLRF   xD1
07D1C:  CLRF   xD2
07D1E:  CLRF   xD3
07D20:  CLRF   xD4
07D22:  CLRF   xD5
07D24:  CLRF   xD6
07D26:  CLRF   xD7
07D28:  CLRF   xD8
07D2A:  CLRF   xD9
07D2C:  CLRF   xDA
07D2E:  MOVLW  01
07D30:  MOVWF  xDB
07D32:  CLRF   xDC
07D34:  CLRF   xDD
07D36:  CLRF   xDE
07D38:  MOVLW  02
07D3A:  MOVWF  xDF
07D3C:  CLRF   xE0
07D3E:  CLRF   xE1
07D40:  CLRF   xE2
07D42:  MOVLW  03
07D44:  MOVWF  xE3
07D46:  CLRF   xE4
07D48:  CLRF   xE5
07D4A:  CLRF   xE6
07D4C:  MOVLW  04
07D4E:  MOVWF  xE7
07D50:  CLRF   xE8
07D52:  CLRF   xE9
07D54:  CLRF   xEA
07D56:  MOVLW  05
07D58:  MOVWF  xEB
07D5A:  CLRF   xEC
07D5C:  CLRF   xED
07D5E:  CLRF   xEE
07D60:  MOVLW  06
07D62:  MOVWF  xEF
07D64:  CLRF   xF0
07D66:  CLRF   xF1
07D68:  CLRF   xF2
07D6A:  MOVLW  07
07D6C:  MOVWF  xF3
07D6E:  CLRF   xF4
07D70:  CLRF   xF5
07D72:  CLRF   xF6
07D74:  MOVLW  08
07D76:  MOVWF  xF7
07D78:  CLRF   xF8
07D7A:  CLRF   xF9
07D7C:  CLRF   xFA
07D7E:  MOVLW  09
07D80:  MOVWF  xFB
07D82:  CLRF   xFC
07D84:  CLRF   xFD
07D86:  CLRF   xFE
07D88:  MOVLW  0A
07D8A:  MOVWF  xFF
07D8C:  MOVLB  6
07D8E:  CLRF   x00
07D90:  CLRF   x01
07D92:  CLRF   x02
07D94:  MOVLW  0B
07D96:  MOVWF  x03
07D98:  CLRF   x04
07D9A:  CLRF   x05
07D9C:  CLRF   x06
07D9E:  MOVLW  0C
07DA0:  MOVWF  x07
07DA2:  CLRF   x08
07DA4:  CLRF   x09
07DA6:  CLRF   x0A
07DA8:  MOVLW  0D
07DAA:  MOVWF  x0B
07DAC:  CLRF   x0C
07DAE:  CLRF   x0D
07DB0:  CLRF   x0E
07DB2:  MOVLW  0E
07DB4:  MOVWF  x0F
07DB6:  CLRF   x10
07DB8:  CLRF   x11
07DBA:  CLRF   x12
07DBC:  MOVLW  0F
07DBE:  MOVWF  x13
07DC0:  CLRF   x14
07DC2:  CLRF   x15
07DC4:  CLRF   x16
07DC6:  CLRF   x17
07DC8:  CLRF   x18
07DCA:  CLRF   x46
....................    mydevices.numberOfInputs=0; 
07DCC:  MOVLB  1
07DCE:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
07DD0:  CLRF   x3F
....................    clock = 0; 
07DD2:  MOVLB  6
07DD4:  CLRF   x3E
07DD6:  CLRF   x3D
07DD8:  CLRF   x3C
07DDA:  CLRF   x3B
....................    ledErrorCounter=0;    
07DDC:  CLRF   x45
07DDE:  CLRF   x44
....................    hw_setup(); 
07DE0:  MOVLB  0
07DE2:  GOTO   1D06
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////SALA////////////////////////////// 
....................  /*  eeprom_on_off_init(20,21,6);//2 int Grande a comecar da esquerda 
....................    eeprom_on_off_init(22,23,0);//2  
....................    //eeprom_dimmer_init(40,41,42,7);//2 
....................    eeprom_on_off_init(41,42,7);//2 
....................    eeprom_on_off_init(26,27,3);//2 
....................     
....................     
....................     
....................    ///Sanca parede grande 
....................    unsigned int on_adr[8]={20,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={21,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,3);//Sanca parede grande 
....................    eeprom_onOff_out_init(on_adr,off_adr,5);//Sanca parede grande 
....................     
....................    ///Sanca parede rosa 
....................    unsigned int on_adrr[8]={22,255,255,255,255,255,255,255}; 
....................    unsigned int off_adrr[8]={23,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,7);//Sanca parede grande 
....................    on_adrr[1]=26; 
....................    off_adrr[1]=27; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,4);//Sanca parede grande 
....................     
....................     ///VARANDA 
....................    unsigned int dimmer_dim_adr[8]={40,255,255,255,255,255,255,255};  
....................    unsigned int dimmer_on_adr[8]={41,255,255,255,255,255,255,255}; 
....................    unsigned int dimmer_off_adr[8]={42,255,255,255,255,255,255,255}; 
....................    //eeprom_dimmer_out_init(dimmer_dim_adr,dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................    eeprom_onOff_out_init(dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................     
....................    eeprom_button_init(28,29,4,true);//estores down 
....................    eeprom_button_init(30,31,5,true);//estores up 
....................    unsigned int up_adr[8]={30,255,255,255,255,255,255,255}; 
....................    unsigned int down_adr[8]={28,255,255,255,255,255,255,255}; 
....................    unsigned int x_adr[8]={255,255,255,255,255,255,255,255}; 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,8,9,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,10,11,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,12,13,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,14,15,0,10); 
....................    */ 
....................    /////////////////////////////////////////////////7 
....................     
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 
07DE6:  MOVLW  01
07DE8:  MOVLB  6
07DEA:  MOVWF  x7F
07DEC:  MOVLW  02
07DEE:  MOVWF  x80
07DF0:  MOVWF  x81
07DF2:  MOVLB  0
07DF4:  CALL   1DE0
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
07DF8:  MOVLW  01
07DFA:  MOVLB  6
07DFC:  MOVWF  x47
07DFE:  MOVLW  FF
07E00:  MOVWF  x48
07E02:  MOVWF  x49
07E04:  MOVWF  x4A
07E06:  MOVWF  x4B
07E08:  MOVWF  x4C
07E0A:  MOVWF  x4D
07E0C:  MOVWF  x4E
....................    unsigned int off_adr[8]={2,10,255,255,255,255,255,255}; 
07E0E:  MOVLW  02
07E10:  MOVWF  x4F
07E12:  MOVLW  0A
07E14:  MOVWF  x50
07E16:  MOVLW  FF
07E18:  MOVWF  x51
07E1A:  MOVWF  x52
07E1C:  MOVWF  x53
07E1E:  MOVWF  x54
07E20:  MOVWF  x55
07E22:  MOVWF  x56
....................   
....................    unsigned int nill_adr[8]={255,255,255,255,255,255,255,255};   
07E24:  MOVWF  x57
07E26:  MOVWF  x58
07E28:  MOVWF  x59
07E2A:  MOVWF  x5A
07E2C:  MOVWF  x5B
07E2E:  MOVWF  x5C
07E30:  MOVWF  x5D
07E32:  MOVWF  x5E
....................    unsigned int ventax_off_adr[8]={16,255,255,255,255,255,255,255}; 
07E34:  MOVLW  10
07E36:  MOVWF  x5F
07E38:  MOVLW  FF
07E3A:  MOVWF  x60
07E3C:  MOVWF  x61
07E3E:  MOVWF  x62
07E40:  MOVWF  x63
07E42:  MOVWF  x64
07E44:  MOVWF  x65
07E46:  MOVWF  x66
....................  
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
07E48:  MOVLW  01
07E4A:  MOVWF  x67
07E4C:  MOVLW  FF
07E4E:  MOVWF  x68
07E50:  MOVWF  x69
07E52:  MOVWF  x6A
07E54:  MOVWF  x6B
07E56:  MOVWF  x6C
07E58:  MOVWF  x6D
07E5A:  MOVWF  x6E
....................    eeprom_onOff_out_init(on_adr,off_adr,4); 
07E5C:  MOVLW  06
07E5E:  MOVWF  x80
07E60:  MOVLW  47
07E62:  MOVWF  x7F
07E64:  MOVLW  06
07E66:  MOVWF  x82
07E68:  MOVLW  4F
07E6A:  MOVWF  x81
07E6C:  MOVLW  04
07E6E:  MOVWF  x83
07E70:  MOVLB  0
07E72:  CALL   1E8A
....................     
....................    eeprom_on_off_init(3,4,4); 
07E76:  MOVLW  03
07E78:  MOVLB  6
07E7A:  MOVWF  x7F
07E7C:  MOVLW  04
07E7E:  MOVWF  x80
07E80:  MOVWF  x81
07E82:  MOVLB  0
07E84:  CALL   1DE0
....................     
....................    off_adr[0]=4; 
07E88:  MOVLW  04
07E8A:  MOVLB  6
07E8C:  MOVWF  x4F
....................    on_adr[0]=3; 
07E8E:  MOVLW  03
07E90:  MOVWF  x47
....................    eeprom_timer_init(off_adr,on_adr,15,16,time_off,60); 
07E92:  MOVLW  06
07E94:  MOVWF  x80
07E96:  MOVLW  4F
07E98:  MOVWF  x7F
07E9A:  MOVLW  06
07E9C:  MOVWF  x82
07E9E:  MOVLW  47
07EA0:  MOVWF  x81
07EA2:  MOVLW  0F
07EA4:  MOVWF  x83
07EA6:  MOVLW  10
07EA8:  MOVWF  x84
07EAA:  MOVLW  01
07EAC:  MOVWF  x85
07EAE:  CLRF   x87
07EB0:  MOVLW  3C
07EB2:  MOVWF  x86
07EB4:  MOVLB  0
07EB6:  GOTO   2086
....................    eeprom_onOff_out_init(on_adr,off_adr,3); 
07EBA:  MOVLW  06
07EBC:  MOVLB  6
07EBE:  MOVWF  x80
07EC0:  MOVLW  47
07EC2:  MOVWF  x7F
07EC4:  MOVLW  06
07EC6:  MOVWF  x82
07EC8:  MOVLW  4F
07ECA:  MOVWF  x81
07ECC:  MOVLW  03
07ECE:  MOVWF  x83
07ED0:  MOVLB  0
07ED2:  CALL   1E8A
....................    eeprom_onOff_out_init(on_adr,off_adr,2); 
07ED6:  MOVLW  06
07ED8:  MOVLB  6
07EDA:  MOVWF  x80
07EDC:  MOVLW  47
07EDE:  MOVWF  x7F
07EE0:  MOVLW  06
07EE2:  MOVWF  x82
07EE4:  MOVLW  4F
07EE6:  MOVWF  x81
07EE8:  MOVLW  02
07EEA:  MOVWF  x83
07EEC:  MOVLB  0
07EEE:  CALL   1E8A
....................    eeprom_onOff_out_init(on_adr,ventax_off_adr,9);//VENTAX 
07EF2:  MOVLW  06
07EF4:  MOVLB  6
07EF6:  MOVWF  x80
07EF8:  MOVLW  47
07EFA:  MOVWF  x7F
07EFC:  MOVLW  06
07EFE:  MOVWF  x82
07F00:  MOVLW  5F
07F02:  MOVWF  x81
07F04:  MOVLW  09
07F06:  MOVWF  x83
07F08:  MOVLB  0
07F0A:  CALL   1E8A
....................     
....................    eeprom_on_off_init(17,18,5);//corredor 
07F0E:  MOVLW  11
07F10:  MOVLB  6
07F12:  MOVWF  x7F
07F14:  MOVLW  12
07F16:  MOVWF  x80
07F18:  MOVLW  05
07F1A:  MOVWF  x81
07F1C:  MOVLB  0
07F1E:  CALL   1DE0
....................    unsigned int corredor_on_adr[8]={17,255,255,255,255,255,255,255}; 
07F22:  MOVLW  11
07F24:  MOVLB  6
07F26:  MOVWF  x6F
07F28:  MOVLW  FF
07F2A:  MOVWF  x70
07F2C:  MOVWF  x71
07F2E:  MOVWF  x72
07F30:  MOVWF  x73
07F32:  MOVWF  x74
07F34:  MOVWF  x75
07F36:  MOVWF  x76
....................    unsigned int corredor_off_adr[8]={18,255,255,255,255,255,255,255}; 
07F38:  MOVLW  12
07F3A:  MOVWF  x77
07F3C:  MOVLW  FF
07F3E:  MOVWF  x78
07F40:  MOVWF  x79
07F42:  MOVWF  x7A
07F44:  MOVWF  x7B
07F46:  MOVWF  x7C
07F48:  MOVWF  x7D
07F4A:  MOVWF  x7E
....................    eeprom_onOff_out_init(corredor_on_adr,corredor_off_adr,1); 
07F4C:  MOVLW  06
07F4E:  MOVWF  x80
07F50:  MOVLW  6F
07F52:  MOVWF  x7F
07F54:  MOVLW  06
07F56:  MOVWF  x82
07F58:  MOVLW  77
07F5A:  MOVWF  x81
07F5C:  MOVLW  01
07F5E:  MOVWF  x83
07F60:  MOVLB  0
07F62:  CALL   1E8A
....................    eeprom_button_init(5,6,0,true);//2 
07F66:  MOVLW  05
07F68:  MOVLB  6
07F6A:  MOVWF  x7F
07F6C:  MOVLW  06
07F6E:  MOVWF  x80
07F70:  CLRF   x81
07F72:  MOVLW  01
07F74:  MOVWF  x82
07F76:  MOVLB  0
07F78:  CALL   219A
....................    eeprom_button_init(7,8,1,true);//2 
07F7C:  MOVLW  07
07F7E:  MOVLB  6
07F80:  MOVWF  x7F
07F82:  MOVLW  08
07F84:  MOVWF  x80
07F86:  MOVLW  01
07F88:  MOVWF  x81
07F8A:  MOVWF  x82
07F8C:  MOVLB  0
07F8E:  CALL   219A
....................    off_adr[0]=255; 
07F92:  MOVLW  FF
07F94:  MOVLB  6
07F96:  MOVWF  x4F
....................    off_adr[1]=255; 
07F98:  MOVWF  x50
....................     
....................    on_adr[0]=5; 
07F9A:  MOVLW  05
07F9C:  MOVWF  x47
....................    x_adr[0]=7; 
07F9E:  MOVLW  07
07FA0:  MOVWF  x67
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,0,10); 
07FA2:  MOVLW  06
07FA4:  MOVWF  x80
07FA6:  MOVLW  47
07FA8:  MOVWF  x7F
07FAA:  MOVLW  06
07FAC:  MOVWF  x82
07FAE:  MOVLW  67
07FB0:  MOVWF  x81
07FB2:  MOVLW  06
07FB4:  MOVWF  x84
07FB6:  MOVLW  4F
07FB8:  MOVWF  x83
07FBA:  MOVLW  06
07FBC:  MOVWF  x86
07FBE:  MOVLW  4F
07FC0:  MOVWF  x85
07FC2:  MOVLW  0B
07FC4:  MOVWF  x87
07FC6:  MOVLW  0A
07FC8:  MOVWF  x88
07FCA:  CLRF   x89
07FCC:  MOVWF  x8A
07FCE:  MOVLB  0
07FD0:  GOTO   2218
....................    eeprom_on_off_init(9,10,7); 
07FD4:  MOVLW  09
07FD6:  MOVLB  6
07FD8:  MOVWF  x7F
07FDA:  MOVLW  0A
07FDC:  MOVWF  x80
07FDE:  MOVLW  07
07FE0:  MOVWF  x81
07FE2:  MOVLB  0
07FE4:  CALL   1DE0
....................     
....................    /////////////////////////////////////////////////7 
....................     
....................    readDevices(); 
07FE8:  GOTO   2CDE
.................... #ifdef DEBUG   
....................     printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
.................... #endif 
....................    dimmer_outputs_init(); 
07FEC:  GOTO   3B14
....................    // printf("start %Lu %Lu %Lu\n\r",fpointer(N_LUZES,0),delays1[N_LUZES][0],delays2[N_LUZES][0]);  
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
07FF0:  CALL   3CA8
....................  printf("start %Lu\n\r",fpointer(N_LUZES,0));  
07FF4:  MOVLW  10
07FF6:  MOVLB  6
07FF8:  MOVWF  xF9
07FFA:  CLRF   xFA
*
08066:  MOVFF  02,680
0806A:  MOVFF  01,67F
0806E:  MOVLW  50
08070:  MOVWF  FF6
08072:  MOVLW  1B
08074:  MOVWF  FF7
08076:  MOVLW  00
08078:  MOVWF  FF8
0807A:  MOVLW  06
0807C:  MOVWF  x89
0807E:  MOVLB  0
08080:  CALL   1F4A
08084:  MOVLW  10
08086:  MOVWF  FE9
08088:  MOVFF  680,682
0808C:  MOVFF  67F,681
08090:  GOTO   500A
08094:  MOVLW  0A
08096:  MOVLB  6
08098:  MOVWF  x8F
0809A:  MOVLB  0
0809C:  CALL   1F04
080A0:  MOVLW  0D
080A2:  MOVLB  6
080A4:  MOVWF  x8F
080A6:  MOVLB  0
080A8:  CALL   1F04
....................  interrupts_enable(); 
080AC:  GOTO   50CA
....................  
....................    while(true){ 
....................    restart_wdt(); 
080B0:  CLRWDT
....................    if(syncError || oscError) 
080B2:  BTFSC  xB5.5
080B4:  BRA    80BA
080B6:  BTFSS  xB5.6
080B8:  BRA    80DC
....................    {   
....................       ++ledErrorCounter; 
080BA:  MOVLB  6
080BC:  INCF   x44,F
080BE:  BTFSC  FD8.2
080C0:  INCF   x45,F
....................       if(ledErrorCounter>1000) 
080C2:  MOVF   x45,W
080C4:  SUBLW  02
080C6:  BC    80DA
080C8:  XORLW  FF
080CA:  BNZ   80D2
080CC:  MOVF   x44,W
080CE:  SUBLW  E8
080D0:  BC    80DA
....................       { 
....................          output_toggle(LED); 
080D2:  BCF    F96.2
080D4:  BTG    F8D.2
....................          ledErrorCounter=0; 
080D6:  CLRF   x45
080D8:  CLRF   x44
080DA:  MOVLB  0
....................       } 
....................    } 
.................... #ifdef DEBUG 
....................    if(kbhit()) 
....................    { 
....................       setup_wdt(WDT_OFF); 
....................       disable_interrupts (GLOBAL) ; 
....................       goDebug(); 
....................    } 
.................... #endif 
....................    process_outpoints(); 
080DC:  GOTO   5D9E
....................    write_outputs(); 
080E0:  CALL   3CA8
....................    if(secondFlag) 
080E4:  BTFSS  xB5.4
080E6:  BRA    80FA
....................    { 
....................       secondFlag=false; 
080E8:  BCF    xB5.4
....................       processTimedEvents(); 
080EA:  GOTO   6CE6
....................       if(!syncError && !oscError) output_toggle(LED); 
080EE:  BTFSC  xB5.5
080F0:  BRA    80FA
080F2:  BTFSC  xB5.6
080F4:  BRA    80FA
080F6:  BCF    F96.2
080F8:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
080FA:  BRA    80B0
.................... } 
....................  
080FC:  BRA    80FC

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 1401   NOBROWNOUT NOWDT BORV45 NOPUT WDT1024
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0030   NOSTVREN DEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
