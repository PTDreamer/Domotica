CCS PCH C Compiler, Version 4.106, 32200               18-Jan-12 18:25

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 33054 bytes (34%)
                         Largest free fragment is 32478
               RAM used: 1607 (48%) at main() level
                         1846 (56%) worst case
               Stack:    8 worst case (4 in main + 4 for interrupts)

*
00000:  GOTO   7C3C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0E28
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0E4C
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0E54
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0E7E
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   1102
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   1108
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   0FCE
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   110E
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1B0C
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1B12
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1B04
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1AFC
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1AF4
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   16CC
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   16C4
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   1114
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT1024                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV45                   //Brownout reset at 2.0V 
.................... #FUSES PUT                    //No Power Up Timer 
.................... #FUSES CPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOLPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... //#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
01ECA:  BCF    F93.5
01ECC:  BCF    F8A.5
01ECE:  MOVLW  08
01ED0:  MOVWF  01
01ED2:  BRA    1ED4
01ED4:  NOP   
01ED6:  BSF    01.7
01ED8:  BRA    1EFA
01EDA:  BCF    01.7
01EDC:  MOVLB  6
01EDE:  RRCF   x9F,F
01EE0:  MOVLB  0
01EE2:  BTFSC  FD8.0
01EE4:  BSF    F8A.5
01EE6:  BTFSS  FD8.0
01EE8:  BCF    F8A.5
01EEA:  BSF    01.6
01EEC:  BRA    1EFA
01EEE:  BCF    01.6
01EF0:  DECFSZ 01,F
01EF2:  BRA    1EDC
01EF4:  BRA    1EF6
01EF6:  NOP   
01EF8:  BSF    F8A.5
01EFA:  MOVLW  16
01EFC:  MOVWF  FE9
01EFE:  DECFSZ FE9,F
01F00:  BRA    1EFE
01F02:  BRA    1F04
01F04:  CLRWDT
01F06:  BTFSC  01.7
01F08:  BRA    1EDA
01F0A:  BTFSC  01.6
01F0C:  BRA    1EEE
01F0E:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01B6E:  MOVLW  04
01B70:  MOVLB  6
01B72:  MOVWF  x8F
01B74:  MOVLB  0
01B76:  RCALL  1B18
....................    can_set_baud(); 
01B78:  BRA    1B3E
....................  
....................    RXB0CON=0; 
01B7A:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01B7C:  MOVLW  9F
01B7E:  ANDWF  F60,W
01B80:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01B82:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01B84:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01B88:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01B8A:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01B8C:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01B8E:  BCF    F73.6
01B90:  CLRF   1B
01B92:  BTFSC  FF2.7
01B94:  BSF    1B.7
01B96:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01B98:  MOVLW  0F
01B9A:  MOVLB  7
01B9C:  MOVWF  x2A
01B9E:  MOVLW  1B
01BA0:  MOVWF  x29
01BA2:  CLRF   x2E
01BA4:  CLRF   x2D
01BA6:  CLRF   x2C
01BA8:  CLRF   x2B
01BAA:  CLRF   x2F
01BAC:  MOVLB  0
01BAE:  RCALL  16D4
01BB0:  BTFSC  1B.7
01BB2:  BSF    FF2.7
01BB4:  CLRF   1B
01BB6:  BTFSC  FF2.7
01BB8:  BSF    1B.7
01BBA:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01BBC:  MOVLW  0F
01BBE:  MOVLB  7
01BC0:  MOVWF  x2A
01BC2:  MOVLW  03
01BC4:  MOVWF  x29
01BC6:  CLRF   x2E
01BC8:  CLRF   x2D
01BCA:  CLRF   x2C
01BCC:  CLRF   x2B
01BCE:  CLRF   x2F
01BD0:  MOVLB  0
01BD2:  RCALL  16D4
01BD4:  BTFSC  1B.7
01BD6:  BSF    FF2.7
01BD8:  CLRF   1B
01BDA:  BTFSC  FF2.7
01BDC:  BSF    1B.7
01BDE:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01BE0:  MOVLW  0F
01BE2:  MOVLB  7
01BE4:  MOVWF  x2A
01BE6:  MOVLW  07
01BE8:  MOVWF  x29
01BEA:  CLRF   x2E
01BEC:  CLRF   x2D
01BEE:  CLRF   x2C
01BF0:  CLRF   x2B
01BF2:  CLRF   x2F
01BF4:  MOVLB  0
01BF6:  RCALL  16D4
01BF8:  BTFSC  1B.7
01BFA:  BSF    FF2.7
01BFC:  CLRF   1B
01BFE:  BTFSC  FF2.7
01C00:  BSF    1B.7
01C02:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01C04:  MOVLW  0F
01C06:  MOVLB  7
01C08:  MOVWF  x2A
01C0A:  MOVLW  1F
01C0C:  MOVWF  x29
01C0E:  CLRF   x2E
01C10:  CLRF   x2D
01C12:  CLRF   x2C
01C14:  CLRF   x2B
01C16:  CLRF   x2F
01C18:  MOVLB  0
01C1A:  RCALL  16D4
01C1C:  BTFSC  1B.7
01C1E:  BSF    FF2.7
01C20:  CLRF   1B
01C22:  BTFSC  FF2.7
01C24:  BSF    1B.7
01C26:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01C28:  MOVLW  0F
01C2A:  MOVLB  7
01C2C:  MOVWF  x2A
01C2E:  MOVLW  0B
01C30:  MOVWF  x29
01C32:  CLRF   x2E
01C34:  CLRF   x2D
01C36:  CLRF   x2C
01C38:  CLRF   x2B
01C3A:  CLRF   x2F
01C3C:  MOVLB  0
01C3E:  RCALL  16D4
01C40:  BTFSC  1B.7
01C42:  BSF    FF2.7
01C44:  CLRF   1B
01C46:  BTFSC  FF2.7
01C48:  BSF    1B.7
01C4A:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01C4C:  MOVLW  0F
01C4E:  MOVLB  7
01C50:  MOVWF  x2A
01C52:  MOVWF  x29
01C54:  CLRF   x2E
01C56:  CLRF   x2D
01C58:  CLRF   x2C
01C5A:  CLRF   x2B
01C5C:  CLRF   x2F
01C5E:  MOVLB  0
01C60:  RCALL  16D4
01C62:  BTFSC  1B.7
01C64:  BSF    FF2.7
01C66:  CLRF   1B
01C68:  BTFSC  FF2.7
01C6A:  BSF    1B.7
01C6C:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01C6E:  MOVLW  0F
01C70:  MOVLB  7
01C72:  MOVWF  x2A
01C74:  MOVLW  13
01C76:  MOVWF  x29
01C78:  CLRF   x2E
01C7A:  CLRF   x2D
01C7C:  CLRF   x2C
01C7E:  CLRF   x2B
01C80:  CLRF   x2F
01C82:  MOVLB  0
01C84:  RCALL  16D4
01C86:  BTFSC  1B.7
01C88:  BSF    FF2.7
01C8A:  CLRF   1B
01C8C:  BTFSC  FF2.7
01C8E:  BSF    1B.7
01C90:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01C92:  MOVLW  0F
01C94:  MOVLB  7
01C96:  MOVWF  x2A
01C98:  MOVLW  17
01C9A:  MOVWF  x29
01C9C:  CLRF   x2E
01C9E:  CLRF   x2D
01CA0:  CLRF   x2C
01CA2:  CLRF   x2B
01CA4:  CLRF   x2F
01CA6:  MOVLB  0
01CA8:  RCALL  16D4
01CAA:  BTFSC  1B.7
01CAC:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01CAE:  MOVF   F93,W
01CB0:  ANDLW  FB
01CB2:  IORLW  08
01CB4:  MOVLB  6
01CB6:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01CB8:  CLRF   x8F
01CBA:  MOVLB  0
01CBC:  RCALL  1B18
.................... } 
01CBE:  GOTO   1CC4 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01B3E:  MOVLW  C0
01B40:  ANDWF  F70,W
01B42:  IORLW  04
01B44:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01B46:  MOVLW  3F
01B48:  ANDWF  F70,W
01B4A:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01B4C:  MOVLW  F8
01B4E:  ANDWF  F71,W
01B50:  IORLW  02
01B52:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01B54:  MOVLW  C7
01B56:  ANDWF  F71,W
01B58:  IORLW  28
01B5A:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01B5C:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01B5E:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01B60:  MOVLW  F8
01B62:  ANDWF  F72,W
01B64:  IORLW  05
01B66:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01B68:  BCF    F72.6
.................... } 
01B6A:  GOTO   1B7A (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01B18:  MOVLB  6
01B1A:  SWAPF  x8F,W
01B1C:  ANDLW  70
01B1E:  MOVWF  00
01B20:  BCF    FD8.0
01B22:  RLCF   00,F
01B24:  MOVLW  1F
01B26:  ANDWF  F6F,W
01B28:  IORWF  00,W
01B2A:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01B2C:  MOVFF  F6E,00
01B30:  SWAPF  00,F
01B32:  RRCF   00,W
01B34:  ANDLW  07
01B36:  SUBWF  x8F,W
01B38:  BNZ   1B2C
.................... } 
01B3A:  MOVLB  0
01B3C:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
016D4:  MOVFF  72A,731
016D8:  MOVFF  729,730
....................  
....................    if (ext) {  //extended 
016DC:  MOVLB  7
016DE:  MOVF   x2F,F
016E0:  BZ    1786
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
016E2:  MOVFF  730,FE9
016E6:  MOVFF  731,FEA
016EA:  MOVFF  72B,FEF
....................  
....................       //eidh 
....................       ptr--; 
016EE:  MOVF   x30,W
016F0:  BTFSC  FD8.2
016F2:  DECF   x31,F
016F4:  DECF   x30,F
....................       *ptr=make8(id,1); //8:15 
016F6:  MOVFF  730,FE9
016FA:  MOVFF  731,FEA
016FE:  MOVFF  72C,FEF
....................  
....................       //sidl 
....................       ptr--; 
01702:  MOVF   x30,W
01704:  BTFSC  FD8.2
01706:  DECF   x31,F
01708:  DECF   x30,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
0170A:  MOVFF  730,FE9
0170E:  MOVFF  731,FEA
01712:  MOVF   x2D,W
01714:  ANDLW  03
01716:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
01718:  MOVFF  730,FE9
0171C:  MOVFF  731,FEA
01720:  MOVFF  72D,00
01724:  RLCF   00,F
01726:  RLCF   00,F
01728:  RLCF   00,F
0172A:  MOVLW  F8
0172C:  ANDWF  00,F
0172E:  MOVF   00,W
01730:  ANDLW  E0
01732:  IORWF  FEF,W
01734:  MOVWF  FEF
....................       *ptr|=0x08; 
01736:  MOVFF  730,FE9
0173A:  MOVFF  731,FEA
0173E:  MOVF   FEF,W
01740:  IORLW  08
01742:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
01744:  MOVF   x30,W
01746:  BTFSC  FD8.2
01748:  DECF   x31,F
0174A:  DECF   x30,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
0174C:  MOVFF  730,FE9
01750:  MOVFF  731,FEA
01754:  MOVFF  72D,00
01758:  SWAPF  00,F
0175A:  RRCF   00,F
0175C:  MOVLW  07
0175E:  ANDWF  00,F
01760:  MOVF   00,W
01762:  ANDLW  07
01764:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
01766:  MOVFF  730,FE9
0176A:  MOVFF  731,FEA
0176E:  MOVFF  72E,00
01772:  RLCF   00,F
01774:  RLCF   00,F
01776:  RLCF   00,F
01778:  MOVLW  F8
0177A:  ANDWF  00,F
0177C:  MOVF   00,W
0177E:  ANDLW  F8
01780:  IORWF  FEF,W
01782:  MOVWF  FEF
....................    } 
....................    else {   //standard 
01784:  BRA    1804
....................       //eidl 
....................       *ptr=0; 
01786:  MOVFF  730,FE9
0178A:  MOVFF  731,FEA
0178E:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
01790:  MOVF   x30,W
01792:  BTFSC  FD8.2
01794:  DECF   x31,F
01796:  DECF   x30,F
....................       *ptr=0; 
01798:  MOVFF  730,FE9
0179C:  MOVFF  731,FEA
017A0:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
017A2:  MOVF   x30,W
017A4:  BTFSC  FD8.2
017A6:  DECF   x31,F
017A8:  DECF   x30,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
017AA:  MOVFF  730,FE9
017AE:  MOVFF  731,FEA
017B2:  MOVFF  72B,00
017B6:  SWAPF  00,F
017B8:  RLCF   00,F
017BA:  MOVLW  E0
017BC:  ANDWF  00,F
017BE:  MOVF   00,W
017C0:  ANDLW  E0
017C2:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
017C4:  MOVF   x30,W
017C6:  BTFSC  FD8.2
017C8:  DECF   x31,F
017CA:  DECF   x30,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
017CC:  MOVFF  730,FE9
017D0:  MOVFF  731,FEA
017D4:  MOVFF  72B,00
017D8:  RRCF   00,F
017DA:  RRCF   00,F
017DC:  RRCF   00,F
017DE:  MOVLW  1F
017E0:  ANDWF  00,F
017E2:  MOVF   00,W
017E4:  ANDLW  1F
017E6:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
017E8:  MOVFF  730,FE9
017EC:  MOVFF  731,FEA
017F0:  MOVFF  72C,00
017F4:  SWAPF  00,F
017F6:  RLCF   00,F
017F8:  MOVLW  E0
017FA:  ANDWF  00,F
017FC:  MOVF   00,W
017FE:  ANDLW  E0
01800:  IORWF  FEF,W
01802:  MOVWF  FEF
....................    } 
.................... } 
01804:  MOVLB  0
01806:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
0111C:  MOVLB  7
0111E:  CLRF   x2B
01120:  CLRF   x2A
01122:  CLRF   x29
01124:  CLRF   x28
....................    ptr=addr; 
01126:  MOVFF  726,72D
0112A:  MOVFF  725,72C
....................  
....................    if (ext) { 
0112E:  MOVF   x27,F
01130:  BTFSC  FD8.2
01132:  BRA    125A
....................       ret=*ptr;  //eidl 
01134:  MOVFF  72D,03
01138:  MOVFF  72C,FE9
0113C:  MOVFF  72D,FEA
01140:  MOVFF  FEF,00
01144:  CLRF   01
01146:  CLRF   02
01148:  CLRF   03
0114A:  MOVFF  03,72B
0114E:  MOVFF  02,72A
01152:  MOVFF  01,729
01156:  MOVFF  00,728
....................  
....................       ptr--;     //eidh 
0115A:  MOVF   x2C,W
0115C:  BTFSC  FD8.2
0115E:  DECF   x2D,F
01160:  DECF   x2C,F
....................       ret|=((int32)*ptr << 8); 
01162:  MOVFF  72C,FE9
01166:  MOVFF  72D,FEA
0116A:  MOVF   FEF,W
0116C:  CLRF   x30
0116E:  CLRF   x2F
01170:  MOVWF  x2E
01172:  CLRF   00
01174:  MOVF   00,W
01176:  IORWF  x28,F
01178:  MOVF   x2E,W
0117A:  IORWF  x29,F
0117C:  MOVF   x2F,W
0117E:  IORWF  x2A,F
01180:  MOVF   x30,W
01182:  IORWF  x2B,F
....................  
....................       ptr--;     //sidl 
01184:  MOVF   x2C,W
01186:  BTFSC  FD8.2
01188:  DECF   x2D,F
0118A:  DECF   x2C,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
0118C:  MOVFF  72C,FE9
01190:  MOVFF  72D,FEA
01194:  MOVF   FEF,W
01196:  CLRF   x31
01198:  CLRF   x30
0119A:  CLRF   x2F
0119C:  MOVWF  x2E
0119E:  MOVLW  03
011A0:  ANDWF  x2E,F
011A2:  CLRF   x2F
011A4:  CLRF   x30
011A6:  CLRF   x31
011A8:  CLRF   00
011AA:  CLRF   01
011AC:  MOVF   00,W
011AE:  IORWF  x28,F
011B0:  MOVF   01,W
011B2:  IORWF  x29,F
011B4:  MOVF   x2E,W
011B6:  IORWF  x2A,F
011B8:  MOVF   x2F,W
011BA:  IORWF  x2B,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
011BC:  MOVFF  72C,FE9
011C0:  MOVFF  72D,FEA
011C4:  MOVF   FEF,W
011C6:  CLRF   x31
011C8:  CLRF   x30
011CA:  CLRF   x2F
011CC:  MOVWF  x2E
011CE:  MOVLW  E0
011D0:  ANDWF  x2E,F
011D2:  CLRF   x2F
011D4:  CLRF   x30
011D6:  CLRF   x31
011D8:  CLRF   00
011DA:  RLCF   x2E,W
011DC:  MOVWF  01
011DE:  RLCF   x2F,W
011E0:  MOVWF  02
011E2:  RLCF   x30,W
011E4:  MOVWF  03
011E6:  RLCF   01,F
011E8:  RLCF   02,F
011EA:  RLCF   03,F
011EC:  RLCF   01,F
011EE:  RLCF   02,F
011F0:  RLCF   03,F
011F2:  RLCF   01,F
011F4:  RLCF   02,F
011F6:  RLCF   03,F
011F8:  RLCF   01,F
011FA:  RLCF   02,F
011FC:  RLCF   03,F
011FE:  MOVLW  E0
01200:  ANDWF  01,F
01202:  MOVF   00,W
01204:  IORWF  x28,F
01206:  MOVF   01,W
01208:  IORWF  x29,F
0120A:  MOVF   02,W
0120C:  IORWF  x2A,F
0120E:  MOVF   03,W
01210:  IORWF  x2B,F
....................  
....................       ptr--;     //sidh 
01212:  MOVF   x2C,W
01214:  BTFSC  FD8.2
01216:  DECF   x2D,F
01218:  DECF   x2C,F
....................       ret|=((int32)*ptr << 21); 
0121A:  MOVFF  72C,FE9
0121E:  MOVFF  72D,FEA
01222:  MOVF   FEF,W
01224:  CLRF   x2F
01226:  MOVWF  x2E
01228:  CLRF   00
0122A:  CLRF   01
0122C:  RLCF   x2E,W
0122E:  MOVWF  02
01230:  RLCF   x2F,W
01232:  MOVWF  03
01234:  RLCF   02,F
01236:  RLCF   03,F
01238:  RLCF   02,F
0123A:  RLCF   03,F
0123C:  RLCF   02,F
0123E:  RLCF   03,F
01240:  RLCF   02,F
01242:  RLCF   03,F
01244:  MOVLW  E0
01246:  ANDWF  02,F
01248:  MOVF   00,W
0124A:  IORWF  x28,F
0124C:  MOVF   01,W
0124E:  IORWF  x29,F
01250:  MOVF   02,W
01252:  IORWF  x2A,F
01254:  MOVF   03,W
01256:  IORWF  x2B,F
....................  
....................    } 
....................    else { 
01258:  BRA    1300
....................       ptr-=2;    //sidl 
0125A:  MOVLW  02
0125C:  SUBWF  x2C,F
0125E:  MOVLW  00
01260:  SUBWFB x2D,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
01262:  MOVFF  72C,FE9
01266:  MOVFF  72D,FEA
0126A:  MOVF   FEF,W
0126C:  CLRF   x31
0126E:  CLRF   x30
01270:  CLRF   x2F
01272:  MOVWF  x2E
01274:  MOVLW  E0
01276:  ANDWF  x2E,F
01278:  CLRF   x2F
0127A:  CLRF   x30
0127C:  CLRF   x31
0127E:  RRCF   x31,W
01280:  MOVWF  x2B
01282:  RRCF   x30,W
01284:  MOVWF  x2A
01286:  RRCF   x2F,W
01288:  MOVWF  x29
0128A:  RRCF   x2E,W
0128C:  MOVWF  x28
0128E:  RRCF   x2B,F
01290:  RRCF   x2A,F
01292:  RRCF   x29,F
01294:  RRCF   x28,F
01296:  RRCF   x2B,F
01298:  RRCF   x2A,F
0129A:  RRCF   x29,F
0129C:  RRCF   x28,F
0129E:  RRCF   x2B,F
012A0:  RRCF   x2A,F
012A2:  RRCF   x29,F
012A4:  RRCF   x28,F
012A6:  RRCF   x2B,F
012A8:  RRCF   x2A,F
012AA:  RRCF   x29,F
012AC:  RRCF   x28,F
012AE:  MOVLW  07
012B0:  ANDWF  x2B,F
....................  
....................       ptr--;     //sidh 
012B2:  MOVF   x2C,W
012B4:  BTFSC  FD8.2
012B6:  DECF   x2D,F
012B8:  DECF   x2C,F
....................       ret|=((int32)*ptr << 3); 
012BA:  MOVFF  72C,FE9
012BE:  MOVFF  72D,FEA
012C2:  MOVF   FEF,W
012C4:  CLRF   x31
012C6:  CLRF   x30
012C8:  CLRF   x2F
012CA:  MOVWF  x2E
012CC:  RLCF   x2E,W
012CE:  MOVWF  00
012D0:  RLCF   x2F,W
012D2:  MOVWF  01
012D4:  RLCF   x30,W
012D6:  MOVWF  02
012D8:  RLCF   x31,W
012DA:  MOVWF  03
012DC:  RLCF   00,F
012DE:  RLCF   01,F
012E0:  RLCF   02,F
012E2:  RLCF   03,F
012E4:  RLCF   00,F
012E6:  RLCF   01,F
012E8:  RLCF   02,F
012EA:  RLCF   03,F
012EC:  MOVLW  F8
012EE:  ANDWF  00,F
012F0:  MOVF   00,W
012F2:  IORWF  x28,F
012F4:  MOVF   01,W
012F6:  IORWF  x29,F
012F8:  MOVF   02,W
012FA:  IORWF  x2A,F
012FC:  MOVF   03,W
012FE:  IORWF  x2B,F
....................    } 
....................  
....................    return(ret); 
01300:  MOVFF  728,00
01304:  MOVFF  729,01
01308:  MOVFF  72A,02
0130C:  MOVFF  72B,03
.................... } 
01310:  MOVLB  0
01312:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
01808:  MOVLW  0F
0180A:  MOVLB  7
0180C:  MOVWF  x27
0180E:  MOVLW  66
01810:  MOVWF  x26
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
01812:  MOVLB  F
01814:  BTFSC  x40.3
01816:  BRA    1828
....................       CANCON.win=CAN_WIN_TX0; 
01818:  MOVLW  F1
0181A:  ANDWF  F6F,W
0181C:  IORLW  08
0181E:  MOVWF  F6F
....................       port=0; 
01820:  MOVLB  7
01822:  CLRF   x28
....................    } 
....................    else if (!TXB1CON.txreq) { 
01824:  BRA    185C
01826:  MOVLB  F
01828:  BTFSC  x30.3
0182A:  BRA    183E
....................       CANCON.win=CAN_WIN_TX1; 
0182C:  MOVLW  F1
0182E:  ANDWF  F6F,W
01830:  IORLW  06
01832:  MOVWF  F6F
....................       port=1; 
01834:  MOVLW  01
01836:  MOVLB  7
01838:  MOVWF  x28
....................    } 
....................    else if (!TXB2CON.txreq) { 
0183A:  BRA    185C
0183C:  MOVLB  F
0183E:  BTFSC  x20.3
01840:  BRA    1854
....................       CANCON.win=CAN_WIN_TX2; 
01842:  MOVLW  F1
01844:  ANDWF  F6F,W
01846:  IORLW  04
01848:  MOVWF  F6F
....................       port=2; 
0184A:  MOVLW  02
0184C:  MOVLB  7
0184E:  MOVWF  x28
....................    } 
....................    else { 
01850:  BRA    185C
01852:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
01854:  MOVLW  00
01856:  MOVWF  01
01858:  BRA    18D4
0185A:  MOVLB  7
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
0185C:  MOVF   x22,W
0185E:  ANDLW  03
01860:  MOVWF  00
01862:  MOVLW  FC
01864:  ANDWF  F60,W
01866:  IORWF  00,W
01868:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
0186A:  MOVLW  0F
0186C:  MOVWF  x2A
0186E:  MOVLW  64
01870:  MOVWF  x29
01872:  MOVFF  71E,72E
01876:  MOVFF  71D,72D
0187A:  MOVFF  71C,72C
0187E:  MOVFF  71B,72B
01882:  MOVFF  723,72F
01886:  MOVLB  0
01888:  RCALL  16D4
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
0188A:  MOVFF  721,F65
....................    TXBaDLC.rtr=rtr; 
0188E:  BCF    F65.6
01890:  MOVLB  7
01892:  BTFSC  x24.0
01894:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
01896:  CLRF   x25
01898:  MOVF   x21,W
0189A:  SUBWF  x25,W
0189C:  BC    18C6
....................       *txd0=*data; 
0189E:  MOVFF  71F,FE9
018A2:  MOVFF  720,FEA
018A6:  MOVFF  FEF,72B
018AA:  MOVFF  727,FEA
018AE:  MOVFF  726,FE9
018B2:  MOVFF  72B,FEF
....................       txd0++; 
018B6:  INCF   x26,F
018B8:  BTFSC  FD8.2
018BA:  INCF   x27,F
....................       data++; 
018BC:  INCF   x1F,F
018BE:  BTFSC  FD8.2
018C0:  INCF   x20,F
....................     } 
018C2:  INCF   x25,F
018C4:  BRA    1898
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
018C6:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
018C8:  MOVLW  F1
018CA:  ANDWF  F6F,W
018CC:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
018CE:  MOVLW  01
018D0:  MOVWF  01
018D2:  MOVLB  F
.................... } 
018D4:  MOVLB  0
018D6:  GOTO   1AEC (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
0132E:  BTFSS  F60.7
01330:  BRA    1360
*
015B6:  BTFSS  F60.7
015B8:  BRA    15E8
....................         CANCON.win=CAN_WIN_RX0; 
*
01332:  MOVLW  F1
01334:  ANDWF  F6F,W
01336:  MOVWF  F6F
*
015BA:  MOVLW  F1
015BC:  ANDWF  F6F,W
015BE:  MOVWF  F6F
....................         stat.buffer=0; 
*
01338:  BCF    x0E.4
*
015C0:  BCF    x0E.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
0133A:  BCF    FA4.0
*
015C2:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
0133C:  BCF    x0E.0
0133E:  BTFSC  F74.7
01340:  BSF    x0E.0
*
015C4:  BCF    x0E.0
015C6:  BTFSC  F74.7
015C8:  BSF    x0E.0
....................         COMSTAT.rx0ovfl=0; 
*
01342:  BCF    F74.7
*
015CA:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
01344:  BTFSS  F60.2
01346:  BRA    135E
*
015CC:  BTFSS  F60.2
015CE:  BRA    15E6
....................          stat.filthit=RXB0CON.filthit0; 
*
01348:  MOVLW  00
0134A:  BTFSC  F60.0
0134C:  MOVLW  01
0134E:  ANDLW  07
01350:  MOVWF  00
01352:  BCF    FD8.0
01354:  RLCF   00,F
01356:  MOVLW  F1
01358:  ANDWF  x0E,W
0135A:  IORWF  00,W
0135C:  MOVWF  x0E
*
015D0:  MOVLW  00
015D2:  BTFSC  F60.0
015D4:  MOVLW  01
015D6:  ANDLW  07
015D8:  MOVWF  00
015DA:  BCF    FD8.0
015DC:  RLCF   00,F
015DE:  MOVLW  F1
015E0:  ANDWF  x0E,W
015E2:  IORWF  00,W
015E4:  MOVWF  x0E
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
0135E:  BRA    13A0
01360:  MOVLB  F
01362:  BTFSS  x50.7
01364:  BRA    1398
*
015E6:  BRA    1628
015E8:  MOVLB  F
015EA:  BTFSS  x50.7
015EC:  BRA    1620
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
01366:  MOVLW  F1
01368:  ANDWF  F6F,W
0136A:  IORLW  0A
0136C:  MOVWF  F6F
*
015EE:  MOVLW  F1
015F0:  ANDWF  F6F,W
015F2:  IORLW  0A
015F4:  MOVWF  F6F
....................         stat.buffer=1; 
*
0136E:  MOVLB  7
01370:  BSF    x0E.4
*
015F6:  MOVLB  7
015F8:  BSF    x0E.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
01372:  BCF    FA4.1
*
015FA:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
01374:  BCF    x0E.0
01376:  BTFSC  F74.6
01378:  BSF    x0E.0
*
015FC:  BCF    x0E.0
015FE:  BTFSC  F74.6
01600:  BSF    x0E.0
....................         COMSTAT.rx1ovfl=0; 
*
0137A:  BCF    F74.6
*
01602:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
0137C:  MOVLB  F
0137E:  MOVF   x50,W
01380:  ANDLW  07
01382:  ANDLW  07
01384:  MOVWF  00
01386:  BCF    FD8.0
01388:  RLCF   00,F
0138A:  MOVLW  F1
0138C:  MOVLB  7
0138E:  ANDWF  x0E,W
01390:  IORWF  00,W
01392:  MOVWF  x0E
*
01604:  MOVLB  F
01606:  MOVF   x50,W
01608:  ANDLW  07
0160A:  ANDLW  07
0160C:  MOVWF  00
0160E:  BCF    FD8.0
01610:  RLCF   00,F
01612:  MOVLW  F1
01614:  MOVLB  7
01616:  ANDWF  x0E,W
01618:  IORWF  00,W
0161A:  MOVWF  x0E
....................     } 
....................     else { 
*
01394:  BRA    13A0
01396:  MOVLB  F
*
0161C:  BRA    1628
0161E:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
01398:  MOVLW  00
0139A:  MOVWF  01
0139C:  BRA    1436
0139E:  MOVLB  7
*
01620:  MOVLW  00
01622:  MOVWF  01
01624:  BRA    16BE
01626:  MOVLB  7
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
013A0:  MOVF   F65,W
013A2:  ANDLW  0F
013A4:  MOVWF  x0D
*
01628:  MOVF   F65,W
0162A:  ANDLW  0F
0162C:  MOVWF  x0D
....................     stat.rtr=RXBaDLC.rtr; 
*
013A6:  BCF    x0E.5
013A8:  BTFSC  F65.6
013AA:  BSF    x0E.5
*
0162E:  BCF    x0E.5
01630:  BTFSC  F65.6
01632:  BSF    x0E.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
013AC:  BCF    x0E.6
013AE:  BTFSC  F62.3
013B0:  BSF    x0E.6
*
01634:  BCF    x0E.6
01636:  BTFSC  F62.3
01638:  BSF    x0E.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
013B2:  MOVLW  00
013B4:  BTFSC  x0E.6
013B6:  MOVLW  01
013B8:  MOVWF  x1E
013BA:  MOVLW  0F
013BC:  MOVWF  x26
013BE:  MOVLW  64
013C0:  MOVWF  x25
013C2:  MOVFF  71E,727
013C6:  MOVLB  0
013C8:  RCALL  111C
013CA:  MOVFF  03,70C
013CE:  MOVFF  02,70B
013D2:  MOVFF  01,70A
013D6:  MOVFF  00,709
*
0163A:  MOVLW  00
0163C:  BTFSC  x0E.6
0163E:  MOVLW  01
01640:  MOVWF  x1E
01642:  MOVLW  0F
01644:  MOVWF  x26
01646:  MOVLW  64
01648:  MOVWF  x25
0164A:  MOVFF  71E,727
0164E:  MOVLB  0
01650:  RCALL  111C
01652:  MOVFF  03,70C
01656:  MOVFF  02,70B
0165A:  MOVFF  01,70A
0165E:  MOVFF  00,709
....................  
....................     ptr = &TXRXBaD0; 
*
013DA:  MOVLW  0F
013DC:  MOVLB  7
013DE:  MOVWF  x1D
013E0:  MOVLW  66
013E2:  MOVWF  x1C
*
01662:  MOVLW  0F
01664:  MOVLB  7
01666:  MOVWF  x1D
01668:  MOVLW  66
0166A:  MOVWF  x1C
....................     for ( i = 0; i < len; i++ ) { 
*
013E4:  CLRF   x1B
013E6:  MOVF   x0D,W
013E8:  SUBWF  x1B,W
013EA:  BC    1414
*
0166C:  CLRF   x1B
0166E:  MOVF   x0D,W
01670:  SUBWF  x1B,W
01672:  BC    169C
....................         *data = *ptr; 
*
013EC:  MOVFF  71C,FE9
013F0:  MOVFF  71D,FEA
013F4:  MOVFF  FEF,720
013F8:  MOVFF  71A,FEA
013FC:  MOVFF  719,FE9
01400:  MOVFF  720,FEF
*
01674:  MOVFF  71C,FE9
01678:  MOVFF  71D,FEA
0167C:  MOVFF  FEF,720
01680:  MOVFF  71A,FEA
01684:  MOVFF  719,FE9
01688:  MOVFF  720,FEF
....................         data++; 
*
01404:  INCF   x19,F
01406:  BTFSC  FD8.2
01408:  INCF   x1A,F
*
0168C:  INCF   x19,F
0168E:  BTFSC  FD8.2
01690:  INCF   x1A,F
....................         ptr++; 
*
0140A:  INCF   x1C,F
0140C:  BTFSC  FD8.2
0140E:  INCF   x1D,F
*
01692:  INCF   x1C,F
01694:  BTFSC  FD8.2
01696:  INCF   x1D,F
....................     } 
*
01410:  INCF   x1B,F
01412:  BRA    13E6
*
01698:  INCF   x1B,F
0169A:  BRA    166E
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
01414:  MOVLW  F1
01416:  ANDWF  F6F,W
01418:  MOVWF  F6F
*
0169C:  MOVLW  F1
0169E:  ANDWF  F6F,W
016A0:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
0141A:  BCF    x0E.7
0141C:  BTFSC  FA4.7
0141E:  BSF    x0E.7
*
016A2:  BCF    x0E.7
016A4:  BTFSC  FA4.7
016A6:  BSF    x0E.7
....................     CAN_INT_IRXIF = 0; 
*
01420:  BCF    FA4.7
*
016A8:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
01422:  BTFSS  x0E.4
01424:  BRA    142E
*
016AA:  BTFSS  x0E.4
016AC:  BRA    16B6
....................       RXB1CON.rxful=0; 
*
01426:  MOVLB  F
01428:  BCF    x50.7
*
016AE:  MOVLB  F
016B0:  BCF    x50.7
....................     } 
....................     else { 
*
0142A:  BRA    1432
0142C:  MOVLB  7
*
016B2:  BRA    16BA
016B4:  MOVLB  7
....................       RXB0CON.rxful=0; 
*
0142E:  BCF    F60.7
01430:  MOVLB  F
*
016B6:  BCF    F60.7
016B8:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
01432:  MOVLW  01
01434:  MOVWF  01
*
016BA:  MOVLW  01
016BC:  MOVWF  01
016BE:  MOVLB  7
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
01314:  MOVF   28,W
01316:  SUBLW  FF
01318:  BNZ   131C
....................       can_rspoint++; 
0131A:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
0131C:  MOVF   28,W
0131E:  SUBLW  09
01320:  BTFSS  FD8.0
01322:  BRA    15AC
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01324:  MOVLW  07
01326:  MOVLB  7
01328:  MOVWF  x1A
0132A:  MOVLW  0F
0132C:  MOVWF  x19
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
01436:  MOVLB  7
01438:  CLRF   x18
0143A:  MOVF   x18,F
0143C:  BNZ   147E
....................          if(rx_id==can_filter[j]) 
0143E:  MOVF   x18,W
01440:  MULLW  04
01442:  MOVF   FF3,W
01444:  CLRF   03
01446:  ADDLW  39
01448:  MOVWF  FE9
0144A:  MOVLW  01
0144C:  ADDWFC 03,W
0144E:  MOVWF  FEA
01450:  MOVFF  FEF,00
01454:  MOVFF  FEC,01
01458:  MOVFF  FEC,02
0145C:  MOVFF  FEC,03
01460:  MOVF   00,W
01462:  SUBWF  x09,W
01464:  BNZ   147A
01466:  MOVF   01,W
01468:  SUBWF  x0A,W
0146A:  BNZ   147A
0146C:  MOVF   02,W
0146E:  SUBWF  x0B,W
01470:  BNZ   147A
01472:  MOVF   03,W
01474:  SUBWF  x0C,W
01476:  BNZ   147A
....................             return; 
01478:  BRA    16C0
0147A:  INCF   x18,F
0147C:  BRA    143A
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
0147E:  MOVF   28,W
01480:  MULLW  0E
01482:  MOVF   FF3,W
01484:  CLRF   x1A
01486:  MOVWF  x19
01488:  MOVLW  29
0148A:  ADDWF  x19,W
0148C:  MOVWF  FE9
0148E:  MOVLW  00
01490:  ADDWFC x1A,W
01492:  MOVWF  FEA
01494:  MOVFF  70C,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
01498:  MOVF   28,W
0149A:  MULLW  0E
0149C:  MOVF   FF3,W
0149E:  CLRF   x1A
014A0:  MOVWF  x19
014A2:  MOVLW  01
014A4:  ADDWF  x19,W
014A6:  MOVWF  01
014A8:  MOVLW  00
014AA:  ADDWFC x1A,W
014AC:  MOVWF  03
014AE:  MOVF   01,W
014B0:  ADDLW  29
014B2:  MOVWF  FE9
014B4:  MOVLW  00
014B6:  ADDWFC 03,W
014B8:  MOVWF  FEA
014BA:  MOVFF  70B,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
014BE:  MOVF   28,W
014C0:  MULLW  0E
014C2:  MOVF   FF3,W
014C4:  CLRF   x1A
014C6:  MOVWF  x19
014C8:  MOVLW  02
014CA:  ADDWF  x19,W
014CC:  MOVWF  01
014CE:  MOVLW  00
014D0:  ADDWFC x1A,W
014D2:  MOVWF  03
014D4:  MOVF   01,W
014D6:  ADDLW  29
014D8:  MOVWF  FE9
014DA:  MOVLW  00
014DC:  ADDWFC 03,W
014DE:  MOVWF  FEA
014E0:  MOVFF  70A,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
014E4:  MOVF   28,W
014E6:  MULLW  0E
014E8:  MOVF   FF3,W
014EA:  CLRF   x1A
014EC:  MOVWF  x19
014EE:  MOVLW  03
014F0:  ADDWF  x19,W
014F2:  MOVWF  01
014F4:  MOVLW  00
014F6:  ADDWFC x1A,W
014F8:  MOVWF  03
014FA:  MOVF   01,W
014FC:  ADDLW  29
014FE:  MOVWF  FE9
01500:  MOVLW  00
01502:  ADDWFC 03,W
01504:  MOVWF  FEA
01506:  MOVFF  709,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
0150A:  MOVF   28,W
0150C:  MULLW  0E
0150E:  MOVF   FF3,W
01510:  CLRF   x1A
01512:  MOVWF  x19
01514:  MOVLW  04
01516:  ADDWF  x19,W
01518:  MOVWF  01
0151A:  MOVLW  00
0151C:  ADDWFC x1A,W
0151E:  MOVWF  03
01520:  MOVF   01,W
01522:  ADDLW  29
01524:  MOVWF  FE9
01526:  MOVLW  00
01528:  ADDWFC 03,W
0152A:  MOVWF  FEA
0152C:  MOVFF  70D,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
01530:  MOVF   28,W
01532:  MULLW  0E
01534:  MOVF   FF3,W
01536:  CLRF   x1A
01538:  MOVWF  x19
0153A:  MOVLW  05
0153C:  ADDWF  x19,W
0153E:  MOVWF  01
01540:  MOVLW  00
01542:  ADDWFC x1A,W
01544:  MOVWF  03
01546:  MOVF   01,W
01548:  ADDLW  29
0154A:  MOVWF  FE9
0154C:  MOVLW  00
0154E:  ADDWFC 03,W
01550:  MOVWF  FEA
01552:  MOVFF  70E,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
01556:  CLRF   x17
01558:  MOVF   x0D,W
0155A:  SUBWF  x17,W
0155C:  BC    15A6
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
0155E:  MOVF   28,W
01560:  MULLW  0E
01562:  MOVF   FF3,W
01564:  CLRF   x1A
01566:  MOVWF  x19
01568:  MOVLW  06
0156A:  ADDWF  x17,W
0156C:  CLRF   03
0156E:  ADDWF  x19,W
01570:  MOVWF  01
01572:  MOVF   x1A,W
01574:  ADDWFC 03,F
01576:  MOVF   01,W
01578:  ADDLW  29
0157A:  MOVWF  01
0157C:  MOVLW  00
0157E:  ADDWFC 03,F
01580:  MOVFF  03,71A
01584:  CLRF   03
01586:  MOVF   x17,W
01588:  ADDLW  0F
0158A:  MOVWF  FE9
0158C:  MOVLW  07
0158E:  ADDWFC 03,W
01590:  MOVWF  FEA
01592:  MOVFF  FEF,71B
01596:  MOVFF  71A,FEA
0159A:  MOVFF  01,FE9
0159E:  MOVFF  71B,FEF
....................       } 
015A2:  INCF   x17,F
015A4:  BRA    1558
....................  
....................       can_rspoint++; 
015A6:  INCF   28,F
....................    } 
....................    else 
015A8:  BRA    16C0
015AA:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
015AC:  MOVLW  07
015AE:  MOVLB  7
015B0:  MOVWF  x1A
015B2:  MOVLW  0F
015B4:  MOVWF  x19
.................... } 
*
016C0:  MOVLB  0
016C2:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
018DA:  MOVF   xB6,W
018DC:  SUBLW  0A
018DE:  BNZ   18E2
....................    { 
....................       can_tspoint--; 
018E0:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
018E2:  MOVF   xB6,W
018E4:  SUBLW  FF
018E6:  BTFSC  FD8.2
018E8:  BRA    1AF0
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
018EA:  MOVF   xB6,W
018EC:  MULLW  0D
018EE:  MOVF   FF3,W
018F0:  MOVLB  7
018F2:  CLRF   x1A
018F4:  MOVWF  x19
018F6:  MOVLW  B7
018F8:  ADDWF  x19,W
018FA:  MOVWF  FE9
018FC:  MOVLW  00
018FE:  ADDWFC x1A,W
01900:  MOVWF  FEA
01902:  MOVFF  FEF,719
01906:  MOVLB  0
01908:  MOVF   xB6,W
0190A:  MULLW  0D
0190C:  MOVF   FF3,W
0190E:  MOVLB  7
01910:  CLRF   x1B
01912:  MOVWF  x1A
01914:  MOVLW  01
01916:  ADDWF  x1A,W
01918:  MOVWF  01
0191A:  MOVLW  00
0191C:  ADDWFC x1B,W
0191E:  MOVWF  03
01920:  MOVF   01,W
01922:  ADDLW  B7
01924:  MOVWF  FE9
01926:  MOVLW  00
01928:  ADDWFC 03,W
0192A:  MOVWF  FEA
0192C:  MOVFF  FEF,71A
01930:  MOVLB  0
01932:  MOVF   xB6,W
01934:  MULLW  0D
01936:  MOVF   FF3,W
01938:  MOVLB  7
0193A:  CLRF   x1C
0193C:  MOVWF  x1B
0193E:  MOVLW  02
01940:  ADDWF  x1B,W
01942:  MOVWF  01
01944:  MOVLW  00
01946:  ADDWFC x1C,W
01948:  MOVWF  03
0194A:  MOVF   01,W
0194C:  ADDLW  B7
0194E:  MOVWF  FE9
01950:  MOVLW  00
01952:  ADDWFC 03,W
01954:  MOVWF  FEA
01956:  MOVFF  FEF,71B
0195A:  MOVLB  0
0195C:  MOVF   xB6,W
0195E:  MULLW  0D
01960:  MOVF   FF3,W
01962:  MOVLB  7
01964:  CLRF   x1D
01966:  MOVWF  x1C
01968:  MOVLW  03
0196A:  ADDWF  x1C,W
0196C:  MOVWF  01
0196E:  MOVLW  00
01970:  ADDWFC x1D,W
01972:  MOVWF  03
01974:  MOVF   01,W
01976:  ADDLW  B7
01978:  MOVWF  FE9
0197A:  MOVLW  00
0197C:  ADDWFC 03,W
0197E:  MOVWF  FEA
01980:  MOVFF  FEF,71C
01984:  MOVFF  719,70C
01988:  MOVFF  71A,70B
0198C:  MOVFF  71B,70A
01990:  MOVFF  71C,709
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
01994:  MOVLB  0
01996:  MOVF   xB6,W
01998:  MULLW  0D
0199A:  MOVF   FF3,W
0199C:  MOVLB  7
0199E:  CLRF   x1A
019A0:  MOVWF  x19
019A2:  MOVLW  0C
019A4:  ADDWF  x19,W
019A6:  MOVWF  01
019A8:  MOVLW  00
019AA:  ADDWFC x1A,W
019AC:  MOVWF  03
019AE:  MOVF   01,W
019B0:  ADDLW  B7
019B2:  MOVWF  FE9
019B4:  MOVLW  00
019B6:  ADDWFC 03,W
019B8:  MOVWF  FEA
019BA:  SWAPF  FEF,W
019BC:  MOVWF  x0D
019BE:  MOVLW  0F
019C0:  ANDWF  x0D,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
019C2:  MOVLB  0
019C4:  MOVF   xB6,W
019C6:  MULLW  0D
019C8:  MOVF   FF3,W
019CA:  MOVLB  7
019CC:  CLRF   x1A
019CE:  MOVWF  x19
019D0:  MOVLW  0C
019D2:  ADDWF  x19,W
019D4:  MOVWF  01
019D6:  MOVLW  00
019D8:  ADDWFC x1A,W
019DA:  MOVWF  03
019DC:  MOVF   01,W
019DE:  ADDLW  B7
019E0:  MOVWF  FE9
019E2:  MOVLW  00
019E4:  ADDWFC 03,W
019E6:  MOVWF  FEA
019E8:  MOVF   FEF,W
019EA:  ANDLW  0C
019EC:  MOVWF  00
019EE:  RRCF   00,W
019F0:  MOVWF  x0E
019F2:  RRCF   x0E,F
019F4:  MOVLW  3F
019F6:  ANDWF  x0E,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
019F8:  MOVLB  0
019FA:  MOVF   xB6,W
019FC:  MULLW  0D
019FE:  MOVF   FF3,W
01A00:  MOVLB  7
01A02:  CLRF   x1A
01A04:  MOVWF  x19
01A06:  MOVLW  0C
01A08:  ADDWF  x19,W
01A0A:  MOVWF  01
01A0C:  MOVLW  00
01A0E:  ADDWFC x1A,W
01A10:  MOVWF  03
01A12:  MOVF   01,W
01A14:  ADDLW  B7
01A16:  MOVWF  FE9
01A18:  MOVLW  00
01A1A:  ADDWFC 03,W
01A1C:  MOVWF  FEA
01A1E:  MOVFF  FEF,719
01A22:  BCF    x17.0
01A24:  BTFSC  x19.1
01A26:  BSF    x17.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01A28:  MOVLB  0
01A2A:  MOVF   xB6,W
01A2C:  MULLW  0D
01A2E:  MOVF   FF3,W
01A30:  MOVLB  7
01A32:  CLRF   x1A
01A34:  MOVWF  x19
01A36:  MOVLW  0C
01A38:  ADDWF  x19,W
01A3A:  MOVWF  01
01A3C:  MOVLW  00
01A3E:  ADDWFC x1A,W
01A40:  MOVWF  03
01A42:  MOVF   01,W
01A44:  ADDLW  B7
01A46:  MOVWF  FE9
01A48:  MOVLW  00
01A4A:  ADDWFC 03,W
01A4C:  MOVWF  FEA
01A4E:  MOVFF  FEF,719
01A52:  BCF    x17.1
01A54:  BTFSC  x19.0
01A56:  BSF    x17.1
....................  
....................       for(i=0;i<tx_length;i++) 
01A58:  CLRF   x18
01A5A:  MOVF   x0D,W
01A5C:  SUBWF  x18,W
01A5E:  BC    1AB0
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01A60:  CLRF   03
01A62:  MOVF   x18,W
01A64:  ADDLW  0F
01A66:  MOVWF  01
01A68:  MOVLW  07
01A6A:  ADDWFC 03,F
01A6C:  MOVFF  01,719
01A70:  MOVFF  03,71A
01A74:  MOVLB  0
01A76:  MOVF   xB6,W
01A78:  MULLW  0D
01A7A:  MOVF   FF3,W
01A7C:  MOVLB  7
01A7E:  CLRF   x1C
01A80:  MOVWF  x1B
01A82:  MOVLW  04
01A84:  ADDWF  x18,W
01A86:  CLRF   03
01A88:  ADDWF  x1B,W
01A8A:  MOVWF  01
01A8C:  MOVF   x1C,W
01A8E:  ADDWFC 03,F
01A90:  MOVF   01,W
01A92:  ADDLW  B7
01A94:  MOVWF  FE9
01A96:  MOVLW  00
01A98:  ADDWFC 03,W
01A9A:  MOVWF  FEA
01A9C:  MOVFF  FEF,71B
01AA0:  MOVFF  71A,FEA
01AA4:  MOVFF  719,FE9
01AA8:  MOVFF  71B,FEF
....................       } 
01AAC:  INCF   x18,F
01AAE:  BRA    1A5A
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01AB0:  MOVLW  00
01AB2:  BTFSC  x17.0
01AB4:  MOVLW  01
01AB6:  MOVWF  x19
01AB8:  MOVLW  00
01ABA:  BTFSC  x17.1
01ABC:  MOVLW  01
01ABE:  MOVWF  x1A
01AC0:  MOVFF  70C,71E
01AC4:  MOVFF  70B,71D
01AC8:  MOVFF  70A,71C
01ACC:  MOVFF  709,71B
01AD0:  MOVLW  07
01AD2:  MOVWF  x20
01AD4:  MOVLW  0F
01AD6:  MOVWF  x1F
01AD8:  MOVFF  70D,721
01ADC:  MOVFF  70E,722
01AE0:  MOVFF  719,723
01AE4:  MOVFF  71A,724
01AE8:  MOVLB  0
01AEA:  BRA    1808
....................  
....................       can_tspoint--; 
01AEC:  DECF   xB6,F
....................    } 
....................    else 
01AEE:  BRA    1AF2
....................       return; 
01AF0:  BRA    1AF2
.................... } 
01AF2:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... //#define DEBUG 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
025B4:  MOVLB  7
025B6:  CLRF   x03
025B8:  MOVF   x02,W
025BA:  SUBWF  x03,W
025BC:  BC    25F6
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
025BE:  CLRF   03
025C0:  MOVF   x03,W
025C2:  ADDWF  x00,W
025C4:  MOVWF  01
025C6:  MOVF   x01,W
025C8:  ADDWFC 03,F
025CA:  MOVFF  03,705
025CE:  MOVFF  6FE,FE9
025D2:  MOVFF  6FF,FEA
025D6:  MOVFF  FEF,706
025DA:  MOVLB  7
025DC:  MOVFF  705,FEA
025E0:  MOVFF  01,FE9
025E4:  MOVFF  706,FEF
....................       ++origin; 
025E8:  MOVLB  6
025EA:  INCF   xFE,F
025EC:  BTFSC  FD8.2
025EE:  INCF   xFF,F
....................    } 
025F0:  MOVLB  7
025F2:  INCF   x03,F
025F4:  BRA    25B8
.................... } 
025F6:  MOVLB  0
025F8:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
02342:  MOVLB  6
02344:  MOVFF  6EF,FE9
02348:  MOVFF  6F0,FEA
0234C:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
0234E:  MOVLW  01
02350:  ADDWF  xEF,W
02352:  MOVWF  01
02354:  MOVLW  00
02356:  ADDWFC xF0,W
02358:  MOVFF  01,FE9
0235C:  MOVWF  FEA
0235E:  MOVFF  6EC,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
02362:  MOVLW  01
02364:  ADDWF  xEF,W
02366:  MOVWF  01
02368:  MOVLW  00
0236A:  ADDWFC xF0,W
0236C:  MOVWF  03
0236E:  MOVF   01,W
02370:  ADDLW  03
02372:  MOVWF  FE9
02374:  MOVLW  00
02376:  ADDWFC 03,W
02378:  MOVWF  FEA
0237A:  MOVFF  6ED,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
0237E:  MOVLW  01
02380:  ADDWF  xEF,W
02382:  MOVWF  01
02384:  MOVLW  00
02386:  ADDWFC xF0,W
02388:  MOVWF  03
0238A:  MOVF   01,W
0238C:  ADDLW  06
0238E:  MOVWF  FE9
02390:  MOVLW  00
02392:  ADDWFC 03,W
02394:  MOVWF  FEA
02396:  MOVFF  6EE,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
0239A:  MOVLW  01
0239C:  ADDWF  xEF,W
0239E:  MOVWF  01
023A0:  MOVLW  00
023A2:  ADDWFC xF0,W
023A4:  MOVWF  03
023A6:  MOVF   01,W
023A8:  ADDLW  0E
023AA:  MOVWF  FE9
023AC:  MOVLW  00
023AE:  ADDWFC 03,W
023B0:  MOVWF  FEA
023B2:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
023B4:  MOVLW  01
023B6:  ADDWF  xEF,W
023B8:  MOVWF  01
023BA:  MOVLW  00
023BC:  ADDWFC xF0,W
023BE:  MOVWF  03
023C0:  MOVF   01,W
023C2:  ADDLW  0F
023C4:  MOVWF  FE9
023C6:  MOVLW  00
023C8:  ADDWFC 03,W
023CA:  MOVWF  FEA
023CC:  MOVLW  01
023CE:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
023D0:  ADDWF  xEF,W
023D2:  MOVWF  01
023D4:  MOVLW  00
023D6:  ADDWFC xF0,W
023D8:  MOVWF  03
023DA:  MOVF   01,W
023DC:  ADDLW  09
023DE:  MOVWF  FE9
023E0:  MOVLW  00
023E2:  ADDWFC 03,W
023E4:  MOVWF  FEA
023E6:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
023E8:  MOVLW  01
023EA:  ADDWF  xEF,W
023EC:  MOVWF  01
023EE:  MOVLW  00
023F0:  ADDWFC xF0,W
023F2:  MOVWF  03
023F4:  MOVF   01,W
023F6:  ADDLW  0E
023F8:  MOVWF  FE9
023FA:  MOVLW  00
023FC:  ADDWFC 03,W
023FE:  MOVWF  FEA
02400:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
02402:  MOVLW  01
02404:  ADDWF  xEF,W
02406:  MOVWF  01
02408:  MOVLW  00
0240A:  ADDWFC xF0,W
0240C:  MOVWF  03
0240E:  MOVF   01,W
02410:  ADDLW  02
02412:  MOVWF  FE9
02414:  MOVLW  00
02416:  ADDWFC 03,W
02418:  MOVWF  FEA
0241A:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
0241C:  MOVLW  01
0241E:  ADDWF  xEF,W
02420:  MOVWF  01
02422:  MOVLW  00
02424:  ADDWFC xF0,W
02426:  MOVWF  03
02428:  MOVF   01,W
0242A:  ADDLW  05
0242C:  MOVWF  FE9
0242E:  MOVLW  00
02430:  ADDWFC 03,W
02432:  MOVWF  FEA
02434:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
02436:  MOVLW  01
02438:  ADDWF  xEF,W
0243A:  MOVWF  01
0243C:  MOVLW  00
0243E:  ADDWFC xF0,W
02440:  MOVWF  03
02442:  MOVF   01,W
02444:  ADDLW  08
02446:  MOVWF  FE9
02448:  MOVLW  00
0244A:  ADDWFC 03,W
0244C:  MOVWF  FEA
0244E:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
02450:  MOVLW  01
02452:  ADDWF  xEF,W
02454:  MOVWF  01
02456:  MOVLW  00
02458:  ADDWFC xF0,W
0245A:  MOVWF  03
0245C:  MOVF   01,W
0245E:  ADDLW  01
02460:  MOVWF  FE9
02462:  MOVLW  00
02464:  ADDWFC 03,W
02466:  MOVWF  FEA
02468:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
0246A:  MOVLW  01
0246C:  ADDWF  xEF,W
0246E:  MOVWF  01
02470:  MOVLW  00
02472:  ADDWFC xF0,W
02474:  MOVWF  03
02476:  MOVF   01,W
02478:  ADDLW  04
0247A:  MOVWF  FE9
0247C:  MOVLW  00
0247E:  ADDWFC 03,W
02480:  MOVWF  FEA
02482:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
02484:  MOVLW  01
02486:  ADDWF  xEF,W
02488:  MOVWF  01
0248A:  MOVLW  00
0248C:  ADDWFC xF0,W
0248E:  MOVWF  03
02490:  MOVF   01,W
02492:  ADDLW  07
02494:  MOVWF  FE9
02496:  MOVLW  00
02498:  ADDWFC 03,W
0249A:  MOVWF  FEA
0249C:  MOVLW  01
0249E:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
024A0:  ADDWF  xEF,W
024A2:  MOVWF  01
024A4:  MOVLW  00
024A6:  ADDWFC xF0,W
024A8:  MOVWF  03
024AA:  MOVF   01,W
024AC:  ADDLW  10
024AE:  MOVWF  01
024B0:  MOVLW  00
024B2:  ADDWFC 03,F
024B4:  MOVFF  03,6F5
024B8:  CLRF   03
024BA:  MOVF   xF1,W
024BC:  ADDLW  1C
024BE:  MOVWF  FE9
024C0:  MOVLW  00
024C2:  ADDWFC 03,W
024C4:  MOVWF  FEA
024C6:  MOVFF  FEF,6F6
024CA:  MOVFF  6F5,FEA
024CE:  MOVFF  01,FE9
024D2:  MOVFF  6F6,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
024D6:  MOVLW  01
024D8:  ADDWF  xEF,W
024DA:  MOVWF  01
024DC:  MOVLW  00
024DE:  ADDWFC xF0,W
024E0:  MOVWF  03
024E2:  MOVF   01,W
024E4:  ADDLW  0A
024E6:  MOVWF  FE9
024E8:  MOVLW  00
024EA:  ADDWFC 03,W
024EC:  MOVWF  FEA
024EE:  MOVF   FEE,F
024F0:  MOVF   FEE,F
024F2:  CLRF   FEC
024F4:  MOVF   FED,F
024F6:  CLRF   FEF
024F8:  MOVF   FED,F
024FA:  CLRF   FEF
024FC:  MOVF   FED,F
024FE:  CLRF   FEF
.................... } 
02500:  MOVLB  0
02502:  GOTO   2EDA (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
022E8:  MOVLB  6
022EA:  MOVFF  6EE,FE9
022EE:  MOVFF  6EF,FEA
022F2:  MOVLW  01
022F4:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
022F6:  MOVFF  6EC,6F1
....................       sw.off.adress=off_adr; 
022FA:  MOVFF  6ED,6F4
....................       sw.previous_state=button_depressed; 
022FE:  BSF    xF7.1
....................       sw.outstate=off; 
02300:  MOVWF  xFC
....................       sw.on.needs_update=0; 
02302:  BCF    xF3.0
....................       sw.off.needs_update=0; 
02304:  BCF    xF6.0
....................       sw.on.value=0; 
02306:  CLRF   xF2
....................       sw.off.value=0; 
02308:  CLRF   xF5
....................       sw.realbutton=inputs[real_button]; 
0230A:  CLRF   03
0230C:  MOVF   xF0,W
0230E:  ADDLW  1C
02310:  MOVWF  FE9
02312:  MOVLW  00
02314:  ADDWFC 03,W
02316:  MOVWF  FEA
02318:  MOVFF  FEF,6FD
....................       input->device=sw; 
0231C:  MOVLW  01
0231E:  ADDWF  xEE,W
02320:  MOVWF  FE9
02322:  MOVLW  00
02324:  ADDWFC xEF,W
02326:  MOVWF  FEA
02328:  MOVLW  06
0232A:  MOVWF  FE2
0232C:  MOVLW  F1
0232E:  MOVWF  FE1
02330:  MOVLW  20
02332:  MOVWF  01
02334:  MOVFF  FE6,FEE
02338:  DECFSZ 01,F
0233A:  BRA    2334
.................... } 
0233C:  MOVLB  0
0233E:  GOTO   2DEE (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
02506:  MOVLB  6
02508:  MOVFF  6EF,FE9
0250C:  MOVFF  6F0,FEA
02510:  MOVLW  02
02512:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
02514:  MOVFF  6ED,6F3
....................       sw.off.adress=off_adr; 
02518:  MOVFF  6EE,6F6
....................       sw.previous_state=button_depressed; 
0251C:  BSF    xF9.1
....................       sw.outstate=off; 
0251E:  MOVLW  01
02520:  MOVWF  xFA
....................       sw.on.needs_update=0; 
02522:  BCF    xF5.0
....................       sw.off.needs_update=0; 
02524:  BCF    xF8.0
....................       sw.on.value=0; 
02526:  CLRF   xF4
....................       sw.off.value=0; 
02528:  CLRF   xF7
....................       sw.repeat=repeat; 
0252A:  BCF    xFB.0
0252C:  BTFSC  xF2.0
0252E:  BSF    xFB.0
....................       sw.realbutton=inputs[real_button]; 
02530:  CLRF   03
02532:  MOVF   xF1,W
02534:  ADDLW  1C
02536:  MOVWF  FE9
02538:  MOVLW  00
0253A:  ADDWFC 03,W
0253C:  MOVWF  FEA
0253E:  MOVFF  FEF,6FC
....................       input->device=sw; 
02542:  MOVLW  01
02544:  ADDWF  xEF,W
02546:  MOVWF  FE9
02548:  MOVLW  00
0254A:  ADDWFC xF0,W
0254C:  MOVWF  FEA
0254E:  MOVLW  06
02550:  MOVWF  FE2
02552:  MOVLW  F3
02554:  MOVWF  FE1
02556:  MOVLW  20
02558:  MOVWF  01
0255A:  MOVFF  FE6,FEE
0255E:  DECFSZ 01,F
02560:  BRA    255A
.................... } 
02562:  MOVLB  0
02564:  GOTO   2FD2 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
027F4:  MOVLB  6
027F6:  MOVFF  6F2,FE9
027FA:  MOVFF  6F3,FEA
027FE:  MOVLW  65
02800:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
02802:  MOVLW  01
02804:  ADDWF  xF2,W
02806:  MOVWF  01
02808:  MOVLW  00
0280A:  ADDWFC xF3,W
0280C:  MOVWF  03
0280E:  MOVF   01,W
02810:  ADDLW  1D
02812:  MOVWF  FE9
02814:  MOVLW  00
02816:  ADDWFC 03,W
02818:  MOVWF  FEA
0281A:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
0281C:  MOVLW  01
0281E:  ADDWF  xF2,W
02820:  MOVWF  01
02822:  MOVLW  00
02824:  ADDWFC xF3,W
02826:  MOVWF  03
02828:  MOVF   01,W
0282A:  ADDLW  09
0282C:  MOVWF  FE9
0282E:  MOVLW  00
02830:  ADDWFC 03,W
02832:  MOVWF  FEA
02834:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02836:  MOVLW  01
02838:  ADDWF  xF2,W
0283A:  MOVWF  01
0283C:  MOVLW  00
0283E:  ADDWFC xF3,W
02840:  MOVWF  03
02842:  MOVF   01,W
02844:  ADDLW  13
02846:  MOVWF  FE9
02848:  MOVLW  00
0284A:  ADDWFC 03,W
0284C:  MOVWF  FEA
0284E:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
02850:  MOVLW  01
02852:  ADDWF  xF2,W
02854:  MOVWF  01
02856:  MOVLW  00
02858:  ADDWFC xF3,W
0285A:  MOVWF  03
0285C:  MOVF   01,W
0285E:  ADDLW  1C
02860:  MOVWF  FE9
02862:  MOVLW  00
02864:  ADDWFC 03,W
02866:  MOVWF  FEA
02868:  MOVLW  7F
0286A:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
0286C:  MOVLW  01
0286E:  ADDWF  xF2,W
02870:  MOVWF  01
02872:  MOVLW  00
02874:  ADDWFC xF3,W
02876:  MOVWF  03
02878:  MOVF   01,W
0287A:  ADDLW  08
0287C:  MOVWF  FE9
0287E:  MOVLW  00
02880:  ADDWFC 03,W
02882:  MOVWF  FEA
02884:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
02886:  MOVLW  01
02888:  ADDWF  xF2,W
0288A:  MOVWF  01
0288C:  MOVLW  00
0288E:  ADDWFC xF3,W
02890:  MOVWF  03
02892:  MOVF   01,W
02894:  ADDLW  12
02896:  MOVWF  FE9
02898:  MOVLW  00
0289A:  ADDWFC 03,W
0289C:  MOVWF  FEA
0289E:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
028A0:  MOVLW  01
028A2:  ADDWF  xF2,W
028A4:  MOVWF  01
028A6:  MOVLW  00
028A8:  ADDWFC xF3,W
028AA:  MOVWF  03
028AC:  MOVF   01,W
028AE:  ADDLW  1F
028B0:  MOVWF  FE9
028B2:  MOVLW  00
028B4:  ADDWFC 03,W
028B6:  MOVWF  FEA
028B8:  MOVFF  6F4,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
028BC:  MOVLW  01
028BE:  ADDWF  xF2,W
028C0:  MOVWF  01
028C2:  MOVLW  00
028C4:  ADDWFC xF3,W
028C6:  MOVWF  03
028C8:  MOVF   01,W
028CA:  ADDLW  14
028CC:  MOVWF  01
028CE:  MOVLW  00
028D0:  ADDWFC 03,F
028D2:  MOVFF  01,6F7
028D6:  MOVFF  03,6F8
028DA:  MOVFF  6ED,6FF
028DE:  MOVFF  6EC,6FE
028E2:  MOVFF  03,701
028E6:  MOVFF  01,700
028EA:  MOVLW  08
028EC:  MOVLB  7
028EE:  MOVWF  x02
028F0:  MOVLB  0
028F2:  RCALL  25B4
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
028F4:  MOVLW  01
028F6:  MOVLB  6
028F8:  ADDWF  xF2,W
028FA:  MOVWF  01
028FC:  MOVLW  00
028FE:  ADDWFC xF3,W
02900:  MOVWF  03
02902:  MOVFF  01,6F7
02906:  MOVWF  xF8
02908:  MOVFF  6EF,6FF
0290C:  MOVFF  6EE,6FE
02910:  MOVFF  FE8,701
02914:  MOVFF  01,700
02918:  MOVLW  08
0291A:  MOVLB  7
0291C:  MOVWF  x02
0291E:  MOVLB  0
02920:  RCALL  25B4
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
02922:  MOVLW  01
02924:  MOVLB  6
02926:  ADDWF  xF2,W
02928:  MOVWF  01
0292A:  MOVLW  00
0292C:  ADDWFC xF3,W
0292E:  MOVWF  03
02930:  MOVF   01,W
02932:  ADDLW  0A
02934:  MOVWF  01
02936:  MOVLW  00
02938:  ADDWFC 03,F
0293A:  MOVFF  01,6F7
0293E:  MOVFF  03,6F8
02942:  MOVFF  6F1,6FF
02946:  MOVFF  6F0,6FE
0294A:  MOVFF  03,701
0294E:  MOVFF  01,700
02952:  MOVLW  08
02954:  MOVLB  7
02956:  MOVWF  x02
02958:  MOVLB  0
0295A:  RCALL  25B4
....................    ((struct light)output->device).out_state=_off; 
0295C:  MOVLW  01
0295E:  MOVLB  6
02960:  ADDWF  xF2,W
02962:  MOVWF  01
02964:  MOVLW  00
02966:  ADDWFC xF3,W
02968:  MOVWF  03
0296A:  MOVF   01,W
0296C:  ADDLW  1E
0296E:  MOVWF  FE9
02970:  MOVLW  00
02972:  ADDWFC 03,W
02974:  MOVWF  FEA
02976:  MOVLW  01
02978:  MOVWF  FEF
.................... } 
0297A:  MOVLB  0
0297C:  GOTO   3246 (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02BCC:  MOVLB  6
02BCE:  MOVFF  6F0,FE9
02BD2:  MOVFF  6F1,FEA
02BD6:  MOVLW  64
02BD8:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
02BDA:  MOVLW  01
02BDC:  ADDWF  xF0,W
02BDE:  MOVWF  01
02BE0:  MOVLW  00
02BE2:  ADDWFC xF1,W
02BE4:  MOVWF  03
02BE6:  MOVF   01,W
02BE8:  ADDLW  09
02BEA:  MOVWF  FE9
02BEC:  MOVLW  00
02BEE:  ADDWFC 03,W
02BF0:  MOVWF  FEA
02BF2:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
02BF4:  MOVLW  01
02BF6:  ADDWF  xF0,W
02BF8:  MOVWF  01
02BFA:  MOVLW  00
02BFC:  ADDWFC xF1,W
02BFE:  MOVWF  03
02C00:  MOVF   01,W
02C02:  ADDLW  13
02C04:  MOVWF  FE9
02C06:  MOVLW  00
02C08:  ADDWFC 03,W
02C0A:  MOVWF  FEA
02C0C:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
02C0E:  MOVLW  01
02C10:  ADDWF  xF0,W
02C12:  MOVWF  01
02C14:  MOVLW  00
02C16:  ADDWFC xF1,W
02C18:  MOVWF  03
02C1A:  MOVF   01,W
02C1C:  ADDLW  08
02C1E:  MOVWF  FE9
02C20:  MOVLW  00
02C22:  ADDWFC 03,W
02C24:  MOVWF  FEA
02C26:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
02C28:  MOVLW  01
02C2A:  ADDWF  xF0,W
02C2C:  MOVWF  01
02C2E:  MOVLW  00
02C30:  ADDWFC xF1,W
02C32:  MOVWF  03
02C34:  MOVF   01,W
02C36:  ADDLW  12
02C38:  MOVWF  FE9
02C3A:  MOVLW  00
02C3C:  ADDWFC 03,W
02C3E:  MOVWF  FEA
02C40:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02C42:  MOVLW  01
02C44:  ADDWF  xF0,W
02C46:  MOVWF  01
02C48:  MOVLW  00
02C4A:  ADDWFC xF1,W
02C4C:  MOVWF  03
02C4E:  MOVF   01,W
02C50:  ADDLW  14
02C52:  MOVWF  FE9
02C54:  MOVLW  00
02C56:  ADDWFC 03,W
02C58:  MOVWF  FEA
02C5A:  MOVFF  6F2,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02C5E:  MOVLW  01
02C60:  ADDWF  xF0,W
02C62:  MOVWF  01
02C64:  MOVLW  00
02C66:  ADDWFC xF1,W
02C68:  MOVWF  03
02C6A:  MOVFF  01,6F5
02C6E:  MOVWF  xF6
02C70:  MOVFF  6ED,6FF
02C74:  MOVFF  6EC,6FE
02C78:  MOVFF  FE8,701
02C7C:  MOVFF  01,700
02C80:  MOVLW  08
02C82:  MOVLB  7
02C84:  MOVWF  x02
02C86:  MOVLB  0
02C88:  RCALL  25B4
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02C8A:  MOVLW  01
02C8C:  MOVLB  6
02C8E:  ADDWF  xF0,W
02C90:  MOVWF  01
02C92:  MOVLW  00
02C94:  ADDWFC xF1,W
02C96:  MOVWF  03
02C98:  MOVF   01,W
02C9A:  ADDLW  0A
02C9C:  MOVWF  01
02C9E:  MOVLW  00
02CA0:  ADDWFC 03,F
02CA2:  MOVFF  01,6F5
02CA6:  MOVFF  03,6F6
02CAA:  MOVFF  6EF,6FF
02CAE:  MOVFF  6EE,6FE
02CB2:  MOVFF  03,701
02CB6:  MOVFF  01,700
02CBA:  MOVLW  08
02CBC:  MOVLB  7
02CBE:  MOVWF  x02
02CC0:  MOVLB  0
02CC2:  RCALL  25B4
.................... } 
02CC4:  GOTO   34B8 (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
02980:  MOVLB  6
02982:  MOVFF  6F4,FE9
02986:  MOVFF  6F5,FEA
0298A:  MOVLW  66
0298C:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
0298E:  MOVLW  01
02990:  ADDWF  xF4,W
02992:  MOVWF  01
02994:  MOVLW  00
02996:  ADDWFC xF5,W
02998:  MOVWF  03
0299A:  MOVF   01,W
0299C:  ADDLW  09
0299E:  MOVWF  FE9
029A0:  MOVLW  00
029A2:  ADDWFC 03,W
029A4:  MOVWF  FEA
029A6:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
029A8:  MOVLW  01
029AA:  ADDWF  xF4,W
029AC:  MOVWF  01
029AE:  MOVLW  00
029B0:  ADDWFC xF5,W
029B2:  MOVWF  03
029B4:  MOVF   01,W
029B6:  ADDLW  13
029B8:  MOVWF  FE9
029BA:  MOVLW  00
029BC:  ADDWFC 03,W
029BE:  MOVWF  FEA
029C0:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
029C2:  MOVLW  01
029C4:  ADDWF  xF4,W
029C6:  MOVWF  01
029C8:  MOVLW  00
029CA:  ADDWFC xF5,W
029CC:  MOVWF  03
029CE:  MOVF   01,W
029D0:  ADDLW  08
029D2:  MOVWF  FE9
029D4:  MOVLW  00
029D6:  ADDWFC 03,W
029D8:  MOVWF  FEA
029DA:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
029DC:  MOVLW  01
029DE:  ADDWF  xF4,W
029E0:  MOVWF  01
029E2:  MOVLW  00
029E4:  ADDWFC xF5,W
029E6:  MOVWF  03
029E8:  MOVF   01,W
029EA:  ADDLW  12
029EC:  MOVWF  FE9
029EE:  MOVLW  00
029F0:  ADDWFC 03,W
029F2:  MOVWF  FEA
029F4:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
029F6:  MOVLW  01
029F8:  ADDWF  xF4,W
029FA:  MOVWF  01
029FC:  MOVLW  00
029FE:  ADDWFC xF5,W
02A00:  MOVWF  03
02A02:  MOVF   01,W
02A04:  ADDLW  1D
02A06:  MOVWF  FE9
02A08:  MOVLW  00
02A0A:  ADDWFC 03,W
02A0C:  MOVWF  FEA
02A0E:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
02A10:  MOVLW  01
02A12:  ADDWF  xF4,W
02A14:  MOVWF  01
02A16:  MOVLW  00
02A18:  ADDWFC xF5,W
02A1A:  MOVWF  03
02A1C:  MOVF   01,W
02A1E:  ADDLW  27
02A20:  MOVWF  FE9
02A22:  MOVLW  00
02A24:  ADDWFC 03,W
02A26:  MOVWF  FEA
02A28:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
02A2A:  MOVLW  01
02A2C:  ADDWF  xF4,W
02A2E:  MOVWF  01
02A30:  MOVLW  00
02A32:  ADDWFC xF5,W
02A34:  MOVWF  03
02A36:  MOVF   01,W
02A38:  ADDLW  1C
02A3A:  MOVWF  FE9
02A3C:  MOVLW  00
02A3E:  ADDWFC 03,W
02A40:  MOVWF  FEA
02A42:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
02A44:  MOVLW  01
02A46:  ADDWF  xF4,W
02A48:  MOVWF  01
02A4A:  MOVLW  00
02A4C:  ADDWFC xF5,W
02A4E:  MOVWF  03
02A50:  MOVF   01,W
02A52:  ADDLW  26
02A54:  MOVWF  FE9
02A56:  MOVLW  00
02A58:  ADDWFC 03,W
02A5A:  MOVWF  FEA
02A5C:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
02A5E:  MOVLW  01
02A60:  ADDWF  xF4,W
02A62:  MOVWF  01
02A64:  MOVLW  00
02A66:  ADDWFC xF5,W
02A68:  MOVWF  03
02A6A:  MOVF   01,W
02A6C:  ADDLW  28
02A6E:  MOVWF  FE9
02A70:  MOVLW  00
02A72:  ADDWFC 03,W
02A74:  MOVWF  FEA
02A76:  MOVFF  6F6,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
02A7A:  MOVLW  01
02A7C:  ADDWF  xF4,W
02A7E:  MOVWF  01
02A80:  MOVLW  00
02A82:  ADDWFC xF5,W
02A84:  MOVWF  03
02A86:  MOVF   01,W
02A88:  ADDLW  29
02A8A:  MOVWF  FE9
02A8C:  MOVLW  00
02A8E:  ADDWFC 03,W
02A90:  MOVWF  FEA
02A92:  MOVFF  6F7,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
02A96:  MOVLW  01
02A98:  ADDWF  xF4,W
02A9A:  MOVWF  01
02A9C:  MOVLW  00
02A9E:  ADDWFC xF5,W
02AA0:  MOVWF  03
02AA2:  MOVF   01,W
02AA4:  ADDLW  2B
02AA6:  MOVWF  FE9
02AA8:  MOVLW  00
02AAA:  ADDWFC 03,W
02AAC:  MOVWF  FEA
02AAE:  MOVFF  6F9,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
02AB2:  MOVLW  01
02AB4:  ADDWF  xF4,W
02AB6:  MOVWF  01
02AB8:  MOVLW  00
02ABA:  ADDWFC xF5,W
02ABC:  MOVWF  03
02ABE:  MOVF   01,W
02AC0:  ADDLW  2C
02AC2:  MOVWF  FE9
02AC4:  MOVLW  00
02AC6:  ADDWFC 03,W
02AC8:  MOVWF  FEA
02ACA:  MOVFF  6F8,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
02ACE:  MOVLW  01
02AD0:  ADDWF  xF4,W
02AD2:  MOVWF  01
02AD4:  MOVLW  00
02AD6:  ADDWFC xF5,W
02AD8:  MOVWF  03
02ADA:  MOVFF  01,6FC
02ADE:  MOVWF  xFD
02AE0:  MOVFF  6ED,6FF
02AE4:  MOVFF  6EC,6FE
02AE8:  MOVFF  FE8,701
02AEC:  MOVFF  01,700
02AF0:  MOVLW  08
02AF2:  MOVLB  7
02AF4:  MOVWF  x02
02AF6:  MOVLB  0
02AF8:  RCALL  25B4
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
02AFA:  MOVLW  01
02AFC:  MOVLB  6
02AFE:  ADDWF  xF4,W
02B00:  MOVWF  01
02B02:  MOVLW  00
02B04:  ADDWFC xF5,W
02B06:  MOVWF  03
02B08:  MOVF   01,W
02B0A:  ADDLW  0A
02B0C:  MOVWF  01
02B0E:  MOVLW  00
02B10:  ADDWFC 03,F
02B12:  MOVFF  01,6FC
02B16:  MOVFF  03,6FD
02B1A:  MOVFF  6EF,6FF
02B1E:  MOVFF  6EE,6FE
02B22:  MOVFF  03,701
02B26:  MOVFF  01,700
02B2A:  MOVLW  08
02B2C:  MOVLB  7
02B2E:  MOVWF  x02
02B30:  MOVLB  0
02B32:  RCALL  25B4
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02B34:  MOVLW  01
02B36:  MOVLB  6
02B38:  ADDWF  xF4,W
02B3A:  MOVWF  01
02B3C:  MOVLW  00
02B3E:  ADDWFC xF5,W
02B40:  MOVWF  03
02B42:  MOVF   01,W
02B44:  ADDLW  14
02B46:  MOVWF  01
02B48:  MOVLW  00
02B4A:  ADDWFC 03,F
02B4C:  MOVFF  01,6FC
02B50:  MOVFF  03,6FD
02B54:  MOVFF  6F1,6FF
02B58:  MOVFF  6F0,6FE
02B5C:  MOVFF  03,701
02B60:  MOVFF  01,700
02B64:  MOVLW  08
02B66:  MOVLB  7
02B68:  MOVWF  x02
02B6A:  MOVLB  0
02B6C:  RCALL  25B4
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
02B6E:  MOVLW  01
02B70:  MOVLB  6
02B72:  ADDWF  xF4,W
02B74:  MOVWF  01
02B76:  MOVLW  00
02B78:  ADDWFC xF5,W
02B7A:  MOVWF  03
02B7C:  MOVF   01,W
02B7E:  ADDLW  1E
02B80:  MOVWF  01
02B82:  MOVLW  00
02B84:  ADDWFC 03,F
02B86:  MOVFF  01,6FC
02B8A:  MOVFF  03,6FD
02B8E:  MOVFF  6F3,6FF
02B92:  MOVFF  6F2,6FE
02B96:  MOVFF  03,701
02B9A:  MOVFF  01,700
02B9E:  MOVLW  08
02BA0:  MOVLB  7
02BA2:  MOVWF  x02
02BA4:  MOVLB  0
02BA6:  RCALL  25B4
....................    ((struct shutter)output->device).state=idle; 
02BA8:  MOVLW  01
02BAA:  MOVLB  6
02BAC:  ADDWF  xF4,W
02BAE:  MOVWF  01
02BB0:  MOVLW  00
02BB2:  ADDWFC xF5,W
02BB4:  MOVWF  03
02BB6:  MOVF   01,W
02BB8:  ADDLW  2D
02BBA:  MOVWF  FE9
02BBC:  MOVLW  00
02BBE:  ADDWFC 03,W
02BC0:  MOVWF  FEA
02BC2:  MOVLW  04
02BC4:  MOVWF  FEF
.................... } 
02BC6:  MOVLB  0
02BC8:  GOTO   33E4 (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
025FA:  MOVLB  6
025FC:  MOVFF  6F2,FE9
02600:  MOVFF  6F3,FEA
02604:  MOVLW  03
02606:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
02608:  MOVLW  01
0260A:  ADDWF  xF2,W
0260C:  MOVWF  01
0260E:  MOVLW  00
02610:  ADDWFC xF3,W
02612:  MOVWF  03
02614:  MOVF   01,W
02616:  ADDLW  05
02618:  MOVWF  FE9
0261A:  MOVLW  00
0261C:  ADDWFC 03,W
0261E:  MOVWF  FEA
02620:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02622:  MOVLW  01
02624:  ADDWF  xF2,W
02626:  MOVWF  01
02628:  MOVLW  00
0262A:  ADDWFC xF3,W
0262C:  MOVWF  03
0262E:  MOVF   01,W
02630:  ADDLW  08
02632:  MOVWF  FE9
02634:  MOVLW  00
02636:  ADDWFC 03,W
02638:  MOVWF  FEA
0263A:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
0263C:  MOVLW  01
0263E:  ADDWF  xF2,W
02640:  MOVWF  01
02642:  MOVLW  00
02644:  ADDWFC xF3,W
02646:  MOVWF  03
02648:  MOVF   01,W
0264A:  ADDLW  04
0264C:  MOVWF  FE9
0264E:  MOVLW  00
02650:  ADDWFC 03,W
02652:  MOVWF  FEA
02654:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
02656:  MOVLW  01
02658:  ADDWF  xF2,W
0265A:  MOVWF  01
0265C:  MOVLW  00
0265E:  ADDWFC xF3,W
02660:  MOVWF  03
02662:  MOVF   01,W
02664:  ADDLW  07
02666:  MOVWF  FE9
02668:  MOVLW  00
0266A:  ADDWFC 03,W
0266C:  MOVWF  FEA
0266E:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
02670:  MOVLW  01
02672:  ADDWF  xF2,W
02674:  MOVWF  01
02676:  MOVLW  00
02678:  ADDWFC xF3,W
0267A:  MOVWF  03
0267C:  MOVF   01,W
0267E:  ADDLW  12
02680:  MOVWF  FE9
02682:  MOVLW  00
02684:  ADDWFC 03,W
02686:  MOVWF  FEA
02688:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
0268A:  MOVLW  01
0268C:  ADDWF  xF2,W
0268E:  MOVWF  01
02690:  MOVLW  00
02692:  ADDWFC xF3,W
02694:  MOVWF  03
02696:  MOVF   01,W
02698:  ADDLW  1C
0269A:  MOVWF  FE9
0269C:  MOVLW  00
0269E:  ADDWFC 03,W
026A0:  MOVWF  FEA
026A2:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
026A4:  MOVLW  01
026A6:  ADDWF  xF2,W
026A8:  MOVWF  01
026AA:  MOVLW  00
026AC:  ADDWFC xF3,W
026AE:  MOVWF  03
026B0:  MOVF   01,W
026B2:  ADDLW  11
026B4:  MOVWF  FE9
026B6:  MOVLW  00
026B8:  ADDWFC 03,W
026BA:  MOVWF  FEA
026BC:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
026BE:  MOVLW  01
026C0:  ADDWF  xF2,W
026C2:  MOVWF  01
026C4:  MOVLW  00
026C6:  ADDWFC xF3,W
026C8:  MOVWF  03
026CA:  MOVF   01,W
026CC:  ADDLW  1B
026CE:  MOVWF  FE9
026D0:  MOVLW  00
026D2:  ADDWFC 03,W
026D4:  MOVWF  FEA
026D6:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
026D8:  MOVLW  01
026DA:  ADDWF  xF2,W
026DC:  MOVWF  01
026DE:  MOVLW  00
026E0:  ADDWFC xF3,W
026E2:  MOVWF  03
026E4:  MOVF   01,W
026E6:  ADDLW  1D
026E8:  MOVWF  FE9
026EA:  MOVLW  00
026EC:  ADDWFC 03,W
026EE:  MOVWF  FEA
026F0:  CLRF   FEC
026F2:  MOVF   FED,F
026F4:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
026F6:  MOVLW  01
026F8:  ADDWF  xF2,W
026FA:  MOVWF  01
026FC:  MOVLW  00
026FE:  ADDWFC xF3,W
02700:  MOVFF  01,FE9
02704:  MOVWF  FEA
02706:  MOVFF  6F4,FEF
....................    ((struct timer)input->device).active=false; 
0270A:  MOVLW  01
0270C:  ADDWF  xF2,W
0270E:  MOVWF  01
02710:  MOVLW  00
02712:  ADDWFC xF3,W
02714:  MOVWF  03
02716:  MOVF   01,W
02718:  ADDLW  1F
0271A:  MOVWF  FE9
0271C:  MOVLW  00
0271E:  ADDWFC 03,W
02720:  MOVWF  FEA
02722:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02724:  MOVLW  01
02726:  ADDWF  xF2,W
02728:  MOVWF  01
0272A:  MOVLW  00
0272C:  ADDWFC xF3,W
0272E:  MOVWF  03
02730:  MOVF   01,W
02732:  ADDLW  01
02734:  MOVWF  FE9
02736:  MOVLW  00
02738:  ADDWFC 03,W
0273A:  MOVWF  FEA
0273C:  MOVFF  6F6,FEC
02740:  MOVF   FED,F
02742:  MOVFF  6F5,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
02746:  MOVLW  01
02748:  ADDWF  xF2,W
0274A:  MOVWF  01
0274C:  MOVLW  00
0274E:  ADDWFC xF3,W
02750:  MOVWF  03
02752:  MOVF   01,W
02754:  ADDLW  03
02756:  MOVWF  FE9
02758:  MOVLW  00
0275A:  ADDWFC 03,W
0275C:  MOVWF  FEA
0275E:  MOVFF  6F0,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
02762:  MOVLW  01
02764:  ADDWF  xF2,W
02766:  MOVWF  01
02768:  MOVLW  00
0276A:  ADDWFC xF3,W
0276C:  MOVWF  03
0276E:  MOVF   01,W
02770:  ADDLW  06
02772:  MOVWF  FE9
02774:  MOVLW  00
02776:  ADDWFC 03,W
02778:  MOVWF  FEA
0277A:  MOVFF  6F1,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
0277E:  MOVLW  01
02780:  ADDWF  xF2,W
02782:  MOVWF  01
02784:  MOVLW  00
02786:  ADDWFC xF3,W
02788:  MOVWF  03
0278A:  MOVF   01,W
0278C:  ADDLW  09
0278E:  MOVWF  01
02790:  MOVLW  00
02792:  ADDWFC 03,F
02794:  MOVFF  01,6F9
02798:  MOVFF  03,6FA
0279C:  MOVFF  6ED,6FF
027A0:  MOVFF  6EC,6FE
027A4:  MOVFF  03,701
027A8:  MOVFF  01,700
027AC:  MOVLW  08
027AE:  MOVLB  7
027B0:  MOVWF  x02
027B2:  MOVLB  0
027B4:  RCALL  25B4
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
027B6:  MOVLW  01
027B8:  MOVLB  6
027BA:  ADDWF  xF2,W
027BC:  MOVWF  01
027BE:  MOVLW  00
027C0:  ADDWFC xF3,W
027C2:  MOVWF  03
027C4:  MOVF   01,W
027C6:  ADDLW  13
027C8:  MOVWF  01
027CA:  MOVLW  00
027CC:  ADDWFC 03,F
027CE:  MOVFF  01,6F9
027D2:  MOVFF  03,6FA
027D6:  MOVFF  6EF,6FF
027DA:  MOVFF  6EE,6FE
027DE:  MOVFF  03,701
027E2:  MOVFF  01,700
027E6:  MOVLW  08
027E8:  MOVLB  7
027EA:  MOVWF  x02
027EC:  MOVLB  0
027EE:  RCALL  25B4
....................   // printf("start %d stop %d outon %d outoff %d type %d time %Lu",((struct timer)input->device).start.adress[0],((struct timer)input->device).stop.adress[0],out_on,out_off,type,timeToAct); 
.................... } 
027F0:  GOTO   3146 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... volatile int used_dimmers=0; 
....................  
....................  
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00EBA:  BCF    FD8.0
00EBC:  RLCF   x0B,W
00EBE:  MOVWF  00
00EC0:  BCF    FD8.0
00EC2:  RLCF   00,F
00EC4:  MOVF   00,W
00EC6:  MOVLB  5
00EC8:  ADDWF  x7B,W
00ECA:  MOVLB  7
00ECC:  MOVWF  x0F
00ECE:  MOVLW  00
00ED0:  MOVLB  5
00ED2:  ADDWFC x7C,W
00ED4:  MOVLB  7
00ED6:  MOVWF  x10
00ED8:  BCF    FD8.0
00EDA:  RLCF   x0C,W
00EDC:  ADDWF  x0F,W
00EDE:  MOVWF  x0D
00EE0:  MOVLW  00
00EE2:  ADDWFC x10,W
00EE4:  MOVWF  x0E
*
00F52:  BCF    FD8.0
00F54:  RLCF   x0B,W
00F56:  MOVWF  00
00F58:  BCF    FD8.0
00F5A:  RLCF   00,F
00F5C:  MOVF   00,W
00F5E:  MOVLB  5
00F60:  ADDWF  x7B,W
00F62:  MOVLB  7
00F64:  MOVWF  x0F
00F66:  MOVLW  00
00F68:  MOVLB  5
00F6A:  ADDWFC x7C,W
00F6C:  MOVLB  7
00F6E:  MOVWF  x10
00F70:  BCF    FD8.0
00F72:  RLCF   x0C,W
00F74:  ADDWF  x0F,W
00F76:  MOVWF  x0D
00F78:  MOVLW  00
00F7A:  ADDWFC x10,W
00F7C:  MOVWF  x0E
*
00FE0:  BCF    FD8.0
00FE2:  RLCF   x0B,W
00FE4:  MOVWF  00
00FE6:  BCF    FD8.0
00FE8:  RLCF   00,F
00FEA:  MOVF   00,W
00FEC:  MOVLB  5
00FEE:  ADDWF  x7B,W
00FF0:  MOVLB  7
00FF2:  MOVWF  x0F
00FF4:  MOVLW  00
00FF6:  MOVLB  5
00FF8:  ADDWFC x7C,W
00FFA:  MOVLB  7
00FFC:  MOVWF  x10
00FFE:  BCF    FD8.0
01000:  RLCF   x0C,W
01002:  ADDWF  x0F,W
01004:  MOVWF  x0D
01006:  MOVLW  00
01008:  ADDWFC x10,W
0100A:  MOVWF  x0E
*
01068:  BCF    FD8.0
0106A:  RLCF   x0B,W
0106C:  MOVWF  00
0106E:  BCF    FD8.0
01070:  RLCF   00,F
01072:  MOVF   00,W
01074:  MOVLB  5
01076:  ADDWF  x7B,W
01078:  MOVLB  7
0107A:  MOVWF  x0F
0107C:  MOVLW  00
0107E:  MOVLB  5
01080:  ADDWFC x7C,W
01082:  MOVLB  7
01084:  MOVWF  x10
01086:  BCF    FD8.0
01088:  RLCF   x0C,W
0108A:  ADDWF  x0F,W
0108C:  MOVWF  x0D
0108E:  MOVLW  00
01090:  ADDWFC x10,W
01092:  MOVWF  x0E
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
00EE6:  BCF    FD8.0
00EE8:  RLCF   x0B,W
00EEA:  MOVWF  00
00EEC:  BCF    FD8.0
00EEE:  RLCF   00,F
00EF0:  MOVF   00,W
00EF2:  MOVLB  5
00EF4:  ADDWF  x7B,W
00EF6:  MOVLB  7
00EF8:  MOVWF  x0F
00EFA:  MOVLW  00
00EFC:  MOVLB  5
00EFE:  ADDWFC x7C,W
00F00:  MOVLB  7
00F02:  MOVWF  x10
00F04:  BCF    FD8.0
00F06:  RLCF   x0C,W
00F08:  ADDWF  x0F,W
00F0A:  MOVWF  01
00F0C:  MOVLW  00
00F0E:  ADDWFC x10,W
00F10:  MOVWF  03
00F12:  MOVFF  01,FE9
00F16:  MOVWF  FEA
00F18:  MOVFF  FEF,01
00F1C:  INCF   FE9,F
00F1E:  MOVF   FEF,W
00F20:  DECF   FE9,F
00F22:  MOVWF  02
*
00F7E:  BCF    FD8.0
00F80:  RLCF   x0B,W
00F82:  MOVWF  00
00F84:  BCF    FD8.0
00F86:  RLCF   00,F
00F88:  MOVF   00,W
00F8A:  MOVLB  5
00F8C:  ADDWF  x7B,W
00F8E:  MOVLB  7
00F90:  MOVWF  x0F
00F92:  MOVLW  00
00F94:  MOVLB  5
00F96:  ADDWFC x7C,W
00F98:  MOVLB  7
00F9A:  MOVWF  x10
00F9C:  BCF    FD8.0
00F9E:  RLCF   x0C,W
00FA0:  ADDWF  x0F,W
00FA2:  MOVWF  01
00FA4:  MOVLW  00
00FA6:  ADDWFC x10,W
00FA8:  MOVWF  03
00FAA:  MOVFF  01,FE9
00FAE:  MOVWF  FEA
00FB0:  MOVFF  FEF,01
00FB4:  INCF   FE9,F
00FB6:  MOVF   FEF,W
00FB8:  DECF   FE9,F
00FBA:  MOVWF  02
*
0100C:  BCF    FD8.0
0100E:  RLCF   x0B,W
01010:  MOVWF  00
01012:  BCF    FD8.0
01014:  RLCF   00,F
01016:  MOVF   00,W
01018:  MOVLB  5
0101A:  ADDWF  x7B,W
0101C:  MOVLB  7
0101E:  MOVWF  x0F
01020:  MOVLW  00
01022:  MOVLB  5
01024:  ADDWFC x7C,W
01026:  MOVLB  7
01028:  MOVWF  x10
0102A:  BCF    FD8.0
0102C:  RLCF   x0C,W
0102E:  ADDWF  x0F,W
01030:  MOVWF  01
01032:  MOVLW  00
01034:  ADDWFC x10,W
01036:  MOVWF  03
01038:  MOVFF  01,FE9
0103C:  MOVWF  FEA
0103E:  MOVFF  FEF,01
01042:  INCF   FE9,F
01044:  MOVF   FEF,W
01046:  DECF   FE9,F
01048:  MOVWF  02
*
01094:  BCF    FD8.0
01096:  RLCF   x0B,W
01098:  MOVWF  00
0109A:  BCF    FD8.0
0109C:  RLCF   00,F
0109E:  MOVF   00,W
010A0:  MOVLB  5
010A2:  ADDWF  x7B,W
010A4:  MOVLB  7
010A6:  MOVWF  x0F
010A8:  MOVLW  00
010AA:  MOVLB  5
010AC:  ADDWFC x7C,W
010AE:  MOVLB  7
010B0:  MOVWF  x10
010B2:  BCF    FD8.0
010B4:  RLCF   x0C,W
010B6:  ADDWF  x0F,W
010B8:  MOVWF  01
010BA:  MOVLW  00
010BC:  ADDWFC x10,W
010BE:  MOVWF  03
010C0:  MOVFF  01,FE9
010C4:  MOVWF  FEA
010C6:  MOVFF  FEF,01
010CA:  INCF   FE9,F
010CC:  MOVF   FEF,W
010CE:  DECF   FE9,F
010D0:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
034D8:  MOVLB  6
034DA:  CLRF   xD1
034DC:  BSF    xD2.0
....................     // printf("org "); 
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
034DE:  CLRF   xD3
034E0:  MOVLB  5
034E2:  MOVF   x7A,W
034E4:  MOVLB  6
034E6:  SUBWF  xD3,W
034E8:  BC    3578
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
034EA:  MOVF   xD3,W
034EC:  MULLW  04
034EE:  MOVF   FF3,W
034F0:  CLRF   xD8
034F2:  MOVWF  xD7
034F4:  MOVLW  91
034F6:  ADDWF  xD7,W
034F8:  MOVWF  01
034FA:  MOVLW  06
034FC:  ADDWFC xD8,W
034FE:  MOVWF  03
03500:  MOVWF  xD8
03502:  CLRF   03
03504:  MOVF   xD3,W
03506:  ADDLW  81
03508:  MOVWF  FE9
0350A:  MOVLW  05
0350C:  ADDWFC 03,W
0350E:  MOVWF  FEA
03510:  MOVF   FEF,W
03512:  CLRF   03
03514:  MOVFF  6D8,FEA
03518:  MOVFF  01,FE9
0351C:  MOVFF  03,FEC
03520:  MOVF   FED,F
03522:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
03524:  MOVF   xD3,W
03526:  MULLW  04
03528:  MOVF   FF3,W
0352A:  CLRF   xD8
0352C:  MOVWF  xD7
0352E:  MOVLW  02
03530:  ADDWF  xD7,W
03532:  MOVWF  01
03534:  MOVLW  00
03536:  ADDWFC xD8,W
03538:  MOVWF  03
0353A:  MOVF   01,W
0353C:  ADDLW  91
0353E:  MOVWF  01
03540:  MOVLW  06
03542:  ADDWFC 03,F
03544:  MOVFF  03,6D8
03548:  BCF    FD8.0
0354A:  RLCF   xD3,W
0354C:  CLRF   03
0354E:  ADDLW  19
03550:  MOVWF  FE9
03552:  MOVLW  06
03554:  ADDWFC 03,W
03556:  MOVWF  FEA
03558:  MOVFF  FEC,03
0355C:  MOVF   FED,F
0355E:  MOVFF  FEF,6D9
03562:  MOVFF  6D8,FEA
03566:  MOVFF  01,FE9
0356A:  MOVFF  03,FEC
0356E:  MOVF   FED,F
03570:  MOVFF  6D9,FEF
....................      } 
03574:  INCF   xD3,F
03576:  BRA    34E0
....................  
....................      WHILE(again) 
....................      { 
03578:  BTFSS  xD2.0
0357A:  BRA    3742
....................         again = 0; 
0357C:  BCF    xD2.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
0357E:  CLRF   xD3
03580:  MOVLW  01
03582:  MOVLB  5
03584:  SUBWF  x7A,W
03586:  MOVLB  6
03588:  SUBWF  xD3,W
0358A:  BTFSC  FD8.0
0358C:  BRA    3740
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
0358E:  MOVF   xD3,W
03590:  MULLW  04
03592:  MOVF   FF3,W
03594:  CLRF   xD8
03596:  MOVWF  xD7
03598:  MOVLW  91
0359A:  ADDWF  xD7,W
0359C:  MOVWF  FE9
0359E:  MOVLW  06
035A0:  ADDWFC xD8,W
035A2:  MOVWF  FEA
035A4:  MOVFF  FEC,6D8
035A8:  MOVF   FED,F
035AA:  MOVFF  FEF,6D7
035AE:  MOVLW  01
035B0:  ADDWF  xD3,W
035B2:  MULLW  04
035B4:  MOVF   FF3,W
035B6:  CLRF   xDA
035B8:  MOVWF  xD9
035BA:  MOVLW  91
035BC:  ADDWF  xD9,W
035BE:  MOVWF  FE9
035C0:  MOVLW  06
035C2:  ADDWFC xDA,W
035C4:  MOVWF  FEA
035C6:  MOVFF  FEC,03
035CA:  MOVF   FED,F
035CC:  MOVFF  FEF,01
035D0:  MOVF   xD8,W
035D2:  SUBWF  03,W
035D4:  BTFSS  FD8.0
035D6:  BRA    373C
035D8:  BNZ   35E2
035DA:  MOVF   01,W
035DC:  SUBWF  xD7,W
035DE:  BTFSC  FD8.0
035E0:  BRA    373C
....................            { 
....................               again = 1; 
035E2:  BSF    xD2.0
....................               fl = tempd[fa][0]; 
035E4:  MOVF   xD3,W
035E6:  MULLW  04
035E8:  MOVF   FF3,W
035EA:  CLRF   xD8
035EC:  MOVWF  xD7
035EE:  MOVLW  91
035F0:  ADDWF  xD7,W
035F2:  MOVWF  FE9
035F4:  MOVLW  06
035F6:  ADDWFC xD8,W
035F8:  MOVWF  FEA
035FA:  MOVFF  FEC,03
035FE:  MOVF   FED,F
03600:  MOVFF  FEF,6D4
03604:  MOVFF  03,6D5
....................               tempd[fa][0] = tempd[fa + 1][0]; 
03608:  MOVF   xD3,W
0360A:  MULLW  04
0360C:  MOVF   FF3,W
0360E:  CLRF   xD8
03610:  MOVWF  xD7
03612:  MOVLW  91
03614:  ADDWF  xD7,W
03616:  MOVWF  01
03618:  MOVLW  06
0361A:  ADDWFC xD8,W
0361C:  MOVWF  03
0361E:  MOVWF  xD8
03620:  MOVLW  01
03622:  ADDWF  xD3,W
03624:  MULLW  04
03626:  MOVF   FF3,W
03628:  CLRF   xDA
0362A:  MOVWF  xD9
0362C:  MOVLW  91
0362E:  ADDWF  xD9,W
03630:  MOVWF  FE9
03632:  MOVLW  06
03634:  ADDWFC xDA,W
03636:  MOVWF  FEA
03638:  MOVFF  FEC,03
0363C:  MOVF   FED,F
0363E:  MOVFF  FEF,6D9
03642:  MOVFF  6D8,FEA
03646:  MOVFF  01,FE9
0364A:  MOVFF  03,FEC
0364E:  MOVF   FED,F
03650:  MOVFF  6D9,FEF
....................               tempd[fa + 1][0] = fl; 
03654:  MOVLW  01
03656:  ADDWF  xD3,W
03658:  MULLW  04
0365A:  MOVF   FF3,W
0365C:  CLRF   xD8
0365E:  MOVWF  xD7
03660:  MOVLW  91
03662:  ADDWF  xD7,W
03664:  MOVWF  FE9
03666:  MOVLW  06
03668:  ADDWFC xD8,W
0366A:  MOVWF  FEA
0366C:  MOVFF  6D5,FEC
03670:  MOVF   FED,F
03672:  MOVFF  6D4,FEF
....................               fl = tempd[fa][1]; 
03676:  MOVF   xD3,W
03678:  MULLW  04
0367A:  MOVF   FF3,W
0367C:  CLRF   xD8
0367E:  MOVWF  xD7
03680:  MOVLW  02
03682:  ADDWF  xD7,W
03684:  MOVWF  01
03686:  MOVLW  00
03688:  ADDWFC xD8,W
0368A:  MOVWF  03
0368C:  MOVF   01,W
0368E:  ADDLW  91
03690:  MOVWF  FE9
03692:  MOVLW  06
03694:  ADDWFC 03,W
03696:  MOVWF  FEA
03698:  MOVFF  FEC,03
0369C:  MOVF   FED,F
0369E:  MOVFF  FEF,6D4
036A2:  MOVFF  03,6D5
....................               tempd[fa][1] = tempd[fa + 1][1]; 
036A6:  MOVF   xD3,W
036A8:  MULLW  04
036AA:  MOVF   FF3,W
036AC:  CLRF   xD8
036AE:  MOVWF  xD7
036B0:  MOVLW  02
036B2:  ADDWF  xD7,W
036B4:  MOVWF  01
036B6:  MOVLW  00
036B8:  ADDWFC xD8,W
036BA:  MOVWF  03
036BC:  MOVF   01,W
036BE:  ADDLW  91
036C0:  MOVWF  01
036C2:  MOVLW  06
036C4:  ADDWFC 03,F
036C6:  MOVFF  01,6D7
036CA:  MOVFF  03,6D8
036CE:  MOVLW  01
036D0:  ADDWF  xD3,W
036D2:  MULLW  04
036D4:  MOVF   FF3,W
036D6:  CLRF   xDA
036D8:  MOVWF  xD9
036DA:  MOVLW  02
036DC:  ADDWF  xD9,W
036DE:  MOVWF  01
036E0:  MOVLW  00
036E2:  ADDWFC xDA,W
036E4:  MOVWF  03
036E6:  MOVF   01,W
036E8:  ADDLW  91
036EA:  MOVWF  FE9
036EC:  MOVLW  06
036EE:  ADDWFC 03,W
036F0:  MOVWF  FEA
036F2:  MOVFF  FEC,03
036F6:  MOVF   FED,F
036F8:  MOVFF  FEF,6D9
036FC:  MOVFF  6D8,FEA
03700:  MOVFF  6D7,FE9
03704:  MOVFF  03,FEC
03708:  MOVF   FED,F
0370A:  MOVFF  6D9,FEF
....................               tempd[fa + 1][1] = fl; 
0370E:  MOVLW  01
03710:  ADDWF  xD3,W
03712:  MULLW  04
03714:  MOVF   FF3,W
03716:  CLRF   xD8
03718:  MOVWF  xD7
0371A:  MOVLW  02
0371C:  ADDWF  xD7,W
0371E:  MOVWF  01
03720:  MOVLW  00
03722:  ADDWFC xD8,W
03724:  MOVWF  03
03726:  MOVF   01,W
03728:  ADDLW  91
0372A:  MOVWF  FE9
0372C:  MOVLW  06
0372E:  ADDWFC 03,W
03730:  MOVWF  FEA
03732:  MOVFF  6D5,FEC
03736:  MOVF   FED,F
03738:  MOVFF  6D4,FEF
....................            } 
....................         } 
0373C:  INCF   xD3,F
0373E:  BRA    3580
....................      } 
03740:  BRA    3578
....................    /*   for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0) 
03742:  MOVF   x91,F
03744:  BNZ   374E
03746:  MOVF   x92,F
03748:  BNZ   374E
....................      { 
....................          numluzes = 0; 
0374A:  CLRF   xD1
....................          //luzes todas off 
....................          //printf("TUDO OFF"); 
....................      } 
....................      ELSE 
0374C:  BRA    3AEE
....................      { 
....................         numluzes = 1; 
0374E:  MOVLW  01
03750:  MOVWF  xD1
....................         afa = 0; 
03752:  CLRF   xD6
....................         IF(actmat) 
03754:  MOVLB  0
03756:  BTFSS  xB5.3
03758:  BRA    376C
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
0375A:  MOVFF  692,592
0375E:  MOVFF  691,591
....................            delays1[0][1] = tempd[0][1]; 
03762:  MOVFF  694,594
03766:  MOVFF  693,593
....................         } 
....................  
....................         ELSE 
0376A:  BRA    377C
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
0376C:  MOVFF  692,5D6
03770:  MOVFF  691,5D5
....................            delays2[0][1] = tempd[0][1]; 
03774:  MOVFF  694,5D8
03778:  MOVFF  693,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
0377C:  MOVLW  01
0377E:  MOVLB  6
03780:  MOVWF  xD3
03782:  MOVLB  5
03784:  MOVF   x7A,W
03786:  MOVLB  6
03788:  SUBWF  xD3,W
0378A:  BTFSC  FD8.0
0378C:  BRA    3AEE
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
0378E:  MOVF   xD3,W
03790:  MULLW  04
03792:  MOVF   FF3,W
03794:  CLRF   xD8
03796:  MOVWF  xD7
03798:  MOVLW  91
0379A:  ADDWF  xD7,W
0379C:  MOVWF  FE9
0379E:  MOVLW  06
037A0:  ADDWFC xD8,W
037A2:  MOVWF  FEA
037A4:  MOVFF  FEC,6D8
037A8:  MOVF   FED,F
037AA:  MOVFF  FEF,6D7
037AE:  MOVLW  01
037B0:  SUBWF  xD3,W
037B2:  MULLW  04
037B4:  MOVF   FF3,W
037B6:  CLRF   xDA
037B8:  MOVWF  xD9
037BA:  MOVLW  91
037BC:  ADDWF  xD9,W
037BE:  MOVWF  FE9
037C0:  MOVLW  06
037C2:  ADDWFC xDA,W
037C4:  MOVWF  FEA
037C6:  MOVFF  FEC,03
037CA:  MOVF   FED,F
037CC:  MOVF   FEF,W
037CE:  SUBWF  xD7,W
037D0:  BNZ   37D8
037D2:  MOVF   03,W
037D4:  SUBWF  xD8,W
037D6:  BZ    37DC
037D8:  MOVLW  00
037DA:  BRA    37DE
037DC:  MOVLW  01
037DE:  MOVWF  xD7
037E0:  MOVF   xD3,W
037E2:  MULLW  04
037E4:  MOVF   FF3,W
037E6:  CLRF   xD9
037E8:  MOVWF  xD8
037EA:  MOVLW  91
037EC:  ADDWF  xD8,W
037EE:  MOVWF  FE9
037F0:  MOVLW  06
037F2:  ADDWFC xD9,W
037F4:  MOVWF  FEA
037F6:  MOVF   FEF,F
037F8:  BNZ   37FE
037FA:  MOVF   FEC,F
037FC:  BZ    3802
037FE:  MOVLW  00
03800:  BRA    3804
03802:  MOVLW  01
03804:  XORLW  00
03806:  BZ    380C
03808:  MOVLW  00
0380A:  BRA    380E
0380C:  MOVLW  01
0380E:  ANDWF  xD7,W
03810:  BTFSC  FD8.2
03812:  BRA    394E
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
03814:  MOVLB  0
03816:  BTFSS  xB5.3
03818:  BRA    38B4
0381A:  MOVLB  6
0381C:  MOVF   xD6,W
0381E:  MULLW  04
03820:  MOVF   FF3,W
03822:  CLRF   xD8
03824:  MOVWF  xD7
03826:  MOVLW  02
03828:  ADDWF  xD7,W
0382A:  MOVWF  01
0382C:  MOVLW  00
0382E:  ADDWFC xD8,W
03830:  MOVWF  03
03832:  MOVF   01,W
03834:  ADDLW  91
03836:  MOVWF  01
03838:  MOVLW  05
0383A:  ADDWFC 03,F
0383C:  MOVFF  01,6D7
03840:  MOVFF  03,6D8
03844:  MOVF   xD6,W
03846:  MULLW  04
03848:  MOVF   FF3,W
0384A:  CLRF   xDA
0384C:  MOVWF  xD9
0384E:  MOVLW  02
03850:  ADDWF  xD9,W
03852:  MOVWF  01
03854:  MOVLW  00
03856:  ADDWFC xDA,W
03858:  MOVWF  03
0385A:  MOVF   01,W
0385C:  ADDLW  91
0385E:  MOVWF  FE9
03860:  MOVLW  05
03862:  ADDWFC 03,W
03864:  MOVWF  FEA
03866:  MOVFF  FEC,6DA
0386A:  MOVF   FED,F
0386C:  MOVFF  FEF,6D9
03870:  MOVF   xD3,W
03872:  MULLW  04
03874:  MOVF   FF3,W
03876:  CLRF   xDC
03878:  MOVWF  xDB
0387A:  MOVLW  02
0387C:  ADDWF  xDB,W
0387E:  MOVWF  01
03880:  MOVLW  00
03882:  ADDWFC xDC,W
03884:  MOVWF  03
03886:  MOVF   01,W
03888:  ADDLW  91
0388A:  MOVWF  FE9
0388C:  MOVLW  06
0388E:  ADDWFC 03,W
03890:  MOVWF  FEA
03892:  MOVFF  FEC,03
03896:  MOVF   FED,F
03898:  MOVF   FEF,W
0389A:  ANDWF  xD9,W
0389C:  MOVWF  00
0389E:  MOVF   03,W
038A0:  ANDWF  xDA,W
038A2:  MOVFF  6D8,FEA
038A6:  MOVFF  6D7,FE9
038AA:  MOVWF  FEC
038AC:  MOVF   FED,F
038AE:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
038B2:  BRA    394C
038B4:  MOVLB  6
038B6:  MOVF   xD6,W
038B8:  MULLW  04
038BA:  MOVF   FF3,W
038BC:  CLRF   xD8
038BE:  MOVWF  xD7
038C0:  MOVLW  02
038C2:  ADDWF  xD7,W
038C4:  MOVWF  01
038C6:  MOVLW  00
038C8:  ADDWFC xD8,W
038CA:  MOVWF  03
038CC:  MOVF   01,W
038CE:  ADDLW  D5
038D0:  MOVWF  01
038D2:  MOVLW  05
038D4:  ADDWFC 03,F
038D6:  MOVFF  01,6D7
038DA:  MOVFF  03,6D8
038DE:  MOVF   xD6,W
038E0:  MULLW  04
038E2:  MOVF   FF3,W
038E4:  CLRF   xDA
038E6:  MOVWF  xD9
038E8:  MOVLW  02
038EA:  ADDWF  xD9,W
038EC:  MOVWF  01
038EE:  MOVLW  00
038F0:  ADDWFC xDA,W
038F2:  MOVWF  03
038F4:  MOVF   01,W
038F6:  ADDLW  D5
038F8:  MOVWF  FE9
038FA:  MOVLW  05
038FC:  ADDWFC 03,W
038FE:  MOVWF  FEA
03900:  MOVFF  FEC,6DA
03904:  MOVF   FED,F
03906:  MOVFF  FEF,6D9
0390A:  MOVF   xD3,W
0390C:  MULLW  04
0390E:  MOVF   FF3,W
03910:  CLRF   xDC
03912:  MOVWF  xDB
03914:  MOVLW  02
03916:  ADDWF  xDB,W
03918:  MOVWF  01
0391A:  MOVLW  00
0391C:  ADDWFC xDC,W
0391E:  MOVWF  03
03920:  MOVF   01,W
03922:  ADDLW  91
03924:  MOVWF  FE9
03926:  MOVLW  06
03928:  ADDWFC 03,W
0392A:  MOVWF  FEA
0392C:  MOVFF  FEC,03
03930:  MOVF   FED,F
03932:  MOVF   FEF,W
03934:  ANDWF  xD9,W
03936:  MOVWF  00
03938:  MOVF   03,W
0393A:  ANDWF  xDA,W
0393C:  MOVFF  6D8,FEA
03940:  MOVFF  6D7,FE9
03944:  MOVWF  FEC
03946:  MOVF   FED,F
03948:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
0394C:  BRA    3AEA
0394E:  MOVF   xD3,W
03950:  MULLW  04
03952:  MOVF   FF3,W
03954:  CLRF   xD8
03956:  MOVWF  xD7
03958:  MOVLW  91
0395A:  ADDWF  xD7,W
0395C:  MOVWF  FE9
0395E:  MOVLW  06
03960:  ADDWFC xD8,W
03962:  MOVWF  FEA
03964:  MOVF   FEF,F
03966:  BNZ   396C
03968:  MOVF   FEC,F
0396A:  BZ    3970
0396C:  MOVLW  00
0396E:  BRA    3972
03970:  MOVLW  01
03972:  XORLW  00
03974:  BTFSS  FD8.2
03976:  BRA    3AEA
....................            { 
....................               ++afa; 
03978:  INCF   xD6,F
....................               IF(actmat) 
0397A:  MOVLB  0
0397C:  BTFSS  xB5.3
0397E:  BRA    3A36
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
03980:  MOVLB  6
03982:  MOVF   xD6,W
03984:  MULLW  04
03986:  MOVF   FF3,W
03988:  CLRF   xD8
0398A:  MOVWF  xD7
0398C:  MOVLW  91
0398E:  ADDWF  xD7,W
03990:  MOVWF  01
03992:  MOVLW  05
03994:  ADDWFC xD8,W
03996:  MOVWF  03
03998:  MOVWF  xD8
0399A:  MOVF   xD3,W
0399C:  MULLW  04
0399E:  MOVF   FF3,W
039A0:  CLRF   xDA
039A2:  MOVWF  xD9
039A4:  MOVLW  91
039A6:  ADDWF  xD9,W
039A8:  MOVWF  FE9
039AA:  MOVLW  06
039AC:  ADDWFC xDA,W
039AE:  MOVWF  FEA
039B0:  MOVFF  FEC,03
039B4:  MOVF   FED,F
039B6:  MOVFF  FEF,6D9
039BA:  MOVFF  6D8,FEA
039BE:  MOVFF  01,FE9
039C2:  MOVFF  03,FEC
039C6:  MOVF   FED,F
039C8:  MOVFF  6D9,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
039CC:  MOVF   xD6,W
039CE:  MULLW  04
039D0:  MOVF   FF3,W
039D2:  CLRF   xD8
039D4:  MOVWF  xD7
039D6:  MOVLW  02
039D8:  ADDWF  xD7,W
039DA:  MOVWF  01
039DC:  MOVLW  00
039DE:  ADDWFC xD8,W
039E0:  MOVWF  03
039E2:  MOVF   01,W
039E4:  ADDLW  91
039E6:  MOVWF  01
039E8:  MOVLW  05
039EA:  ADDWFC 03,F
039EC:  MOVFF  01,6D7
039F0:  MOVFF  03,6D8
039F4:  MOVF   xD3,W
039F6:  MULLW  04
039F8:  MOVF   FF3,W
039FA:  CLRF   xDA
039FC:  MOVWF  xD9
039FE:  MOVLW  02
03A00:  ADDWF  xD9,W
03A02:  MOVWF  01
03A04:  MOVLW  00
03A06:  ADDWFC xDA,W
03A08:  MOVWF  03
03A0A:  MOVF   01,W
03A0C:  ADDLW  91
03A0E:  MOVWF  FE9
03A10:  MOVLW  06
03A12:  ADDWFC 03,W
03A14:  MOVWF  FEA
03A16:  MOVFF  FEC,03
03A1A:  MOVF   FED,F
03A1C:  MOVFF  FEF,6D9
03A20:  MOVFF  6D8,FEA
03A24:  MOVFF  6D7,FE9
03A28:  MOVFF  03,FEC
03A2C:  MOVF   FED,F
03A2E:  MOVFF  6D9,FEF
....................               } 
....................  
....................               ELSE 
03A32:  BRA    3AE8
03A34:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
03A36:  MOVLB  6
03A38:  MOVF   xD6,W
03A3A:  MULLW  04
03A3C:  MOVF   FF3,W
03A3E:  CLRF   xD8
03A40:  MOVWF  xD7
03A42:  MOVLW  D5
03A44:  ADDWF  xD7,W
03A46:  MOVWF  01
03A48:  MOVLW  05
03A4A:  ADDWFC xD8,W
03A4C:  MOVWF  03
03A4E:  MOVWF  xD8
03A50:  MOVF   xD3,W
03A52:  MULLW  04
03A54:  MOVF   FF3,W
03A56:  CLRF   xDA
03A58:  MOVWF  xD9
03A5A:  MOVLW  91
03A5C:  ADDWF  xD9,W
03A5E:  MOVWF  FE9
03A60:  MOVLW  06
03A62:  ADDWFC xDA,W
03A64:  MOVWF  FEA
03A66:  MOVFF  FEC,03
03A6A:  MOVF   FED,F
03A6C:  MOVFF  FEF,6D9
03A70:  MOVFF  6D8,FEA
03A74:  MOVFF  01,FE9
03A78:  MOVFF  03,FEC
03A7C:  MOVF   FED,F
03A7E:  MOVFF  6D9,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
03A82:  MOVF   xD6,W
03A84:  MULLW  04
03A86:  MOVF   FF3,W
03A88:  CLRF   xD8
03A8A:  MOVWF  xD7
03A8C:  MOVLW  02
03A8E:  ADDWF  xD7,W
03A90:  MOVWF  01
03A92:  MOVLW  00
03A94:  ADDWFC xD8,W
03A96:  MOVWF  03
03A98:  MOVF   01,W
03A9A:  ADDLW  D5
03A9C:  MOVWF  01
03A9E:  MOVLW  05
03AA0:  ADDWFC 03,F
03AA2:  MOVFF  01,6D7
03AA6:  MOVFF  03,6D8
03AAA:  MOVF   xD3,W
03AAC:  MULLW  04
03AAE:  MOVF   FF3,W
03AB0:  CLRF   xDA
03AB2:  MOVWF  xD9
03AB4:  MOVLW  02
03AB6:  ADDWF  xD9,W
03AB8:  MOVWF  01
03ABA:  MOVLW  00
03ABC:  ADDWFC xDA,W
03ABE:  MOVWF  03
03AC0:  MOVF   01,W
03AC2:  ADDLW  91
03AC4:  MOVWF  FE9
03AC6:  MOVLW  06
03AC8:  ADDWFC 03,W
03ACA:  MOVWF  FEA
03ACC:  MOVFF  FEC,03
03AD0:  MOVF   FED,F
03AD2:  MOVFF  FEF,6D9
03AD6:  MOVFF  6D8,FEA
03ADA:  MOVFF  6D7,FE9
03ADE:  MOVFF  03,FEC
03AE2:  MOVF   FED,F
03AE4:  MOVFF  6D9,FEF
....................               } 
....................      //          printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03AE8:  INCF   xD1,F
....................            } 
....................         } 
03AEA:  INCF   xD3,F
03AEC:  BRA    3782
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03AEE:  MOVLB  0
03AF0:  BTFSS  xB5.3
03AF2:  BRA    3AFE
03AF4:  MOVLB  5
03AF6:  CLRF   xD2
03AF8:  MOVFF  6D1,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03AFC:  BRA    3B06
03AFE:  MOVLB  6
03B00:  CLRF   x16
03B02:  MOVFF  6D1,615
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays2[0][0],delays2[0][1]); 
....................     // delays2[0][1]=27498; 
....................     // delays1[0][1]=27498; 
....................      organizado=1; 
03B06:  MOVLB  0
03B08:  BSF    xB5.2
....................   } 
03B0A:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03B0C:  MOVLB  5
03B0E:  CLRF   xD2
03B10:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
03B12:  MOVLB  6
03B14:  CLRF   x16
03B16:  CLRF   x15
....................    pointer=delays1; 
03B18:  MOVLW  05
03B1A:  MOVLB  5
03B1C:  MOVWF  x7C
03B1E:  MOVLW  91
03B20:  MOVWF  x7B
....................    actmat=0; 
03B22:  MOVLB  0
03B24:  BCF    xB5.3
....................    portc=0xFF; 
03B26:  MOVLW  FF
03B28:  MOVWF  F82
....................    portd=0xFF; 
03B2A:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03B2C:  MOVLW  00
03B2E:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
03B30:  MOVWF  F95
....................    portc=0xFF; 
03B32:  MOVLW  FF
03B34:  MOVWF  F82
....................    portd=0xFF; 
03B36:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03B38:  MOVLB  6
03B3A:  CLRF   x8F
03B3C:  MOVLB  1
03B3E:  MOVF   x3F,W
03B40:  MOVLB  6
03B42:  SUBWF  x8F,W
03B44:  BTFSC  FD8.0
03B46:  BRA    3C76
03B48:  CLRF   1B
03B4A:  BTFSC  FF2.7
03B4C:  BSF    1B.7
03B4E:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03B50:  MOVLB  7
03B52:  CLRF   x0B
03B54:  MOVFF  68F,70A
03B58:  CLRF   x0D
03B5A:  MOVLW  2F
03B5C:  MOVWF  x0C
03B5E:  MOVLB  0
03B60:  CALL   035E
03B64:  BTFSC  1B.7
03B66:  BSF    FF2.7
03B68:  MOVFF  02,03
03B6C:  MOVF   01,W
03B6E:  ADDLW  8A
03B70:  MOVWF  01
03B72:  MOVLW  02
03B74:  ADDWFC 03,F
03B76:  MOVFF  01,FE9
03B7A:  MOVFF  03,FEA
03B7E:  MOVF   FEF,W
03B80:  XORLW  65
03B82:  BZ    3B86
03B84:  BRA    3C70
....................          case dimmer: 
.................... #ifdef DEBUG 
....................          printf("used dimmer!!!\n\r"); 
.................... #endif 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
03B86:  BCF    FD8.0
03B88:  MOVLB  5
03B8A:  RLCF   x7A,W
03B8C:  CLRF   03
03B8E:  ADDLW  19
03B90:  MOVWF  01
03B92:  MOVLW  06
03B94:  ADDWFC 03,F
03B96:  MOVFF  01,690
03B9A:  MOVLB  6
03B9C:  MOVFF  03,691
03BA0:  CLRF   1B
03BA2:  BTFSC  FF2.7
03BA4:  BSF    1B.7
03BA6:  BCF    FF2.7
03BA8:  MOVLB  7
03BAA:  CLRF   x0B
03BAC:  MOVFF  68F,70A
03BB0:  CLRF   x0D
03BB2:  MOVLW  2F
03BB4:  MOVWF  x0C
03BB6:  MOVLB  0
03BB8:  CALL   035E
03BBC:  BTFSC  1B.7
03BBE:  BSF    FF2.7
03BC0:  MOVF   01,W
03BC2:  ADDLW  4C
03BC4:  MOVLB  6
03BC6:  MOVWF  x92
03BC8:  MOVLW  01
03BCA:  ADDWFC 02,W
03BCC:  MOVWF  x93
03BCE:  MOVLW  01
03BD0:  ADDWF  x92,W
03BD2:  MOVWF  01
03BD4:  MOVLW  00
03BD6:  ADDWFC x93,W
03BD8:  MOVWF  03
03BDA:  MOVF   01,W
03BDC:  ADDLW  3E
03BDE:  MOVWF  01
03BE0:  MOVLW  01
03BE2:  ADDWFC 03,F
03BE4:  MOVF   01,W
03BE6:  ADDLW  1F
03BE8:  MOVWF  FE9
03BEA:  MOVLW  00
03BEC:  ADDWFC 03,W
03BEE:  MOVWF  FEA
03BF0:  BCF    FD8.0
03BF2:  RLCF   FEF,W
03BF4:  CLRF   03
03BF6:  MOVLB  0
03BF8:  CALL   0172
03BFC:  TBLRD*+
03BFE:  MOVFF  FF5,03
03C02:  MOVLB  6
03C04:  MOVFF  691,FEA
03C08:  MOVFF  690,FE9
03C0C:  MOVFF  03,FEC
03C10:  MOVF   FED,F
03C12:  MOVWF  FEF
03C14:  CLRF   1B
03C16:  BTFSC  FF2.7
03C18:  BSF    1B.7
03C1A:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
03C1C:  MOVLB  7
03C1E:  CLRF   x0B
03C20:  MOVFF  68F,70A
03C24:  CLRF   x0D
03C26:  MOVLW  2F
03C28:  MOVWF  x0C
03C2A:  MOVLB  0
03C2C:  CALL   035E
03C30:  BTFSC  1B.7
03C32:  BSF    FF2.7
03C34:  MOVF   01,W
03C36:  ADDLW  4C
03C38:  MOVLB  6
03C3A:  MOVWF  x90
03C3C:  MOVLW  01
03C3E:  ADDWFC 02,W
03C40:  MOVWF  x91
03C42:  MOVLW  01
03C44:  ADDWF  x90,W
03C46:  MOVWF  01
03C48:  MOVLW  00
03C4A:  ADDWFC x91,W
03C4C:  MOVWF  03
03C4E:  MOVF   01,W
03C50:  ADDLW  3E
03C52:  MOVWF  01
03C54:  MOVLW  01
03C56:  ADDWFC 03,F
03C58:  MOVF   01,W
03C5A:  ADDLW  20
03C5C:  MOVWF  FE9
03C5E:  MOVLW  00
03C60:  ADDWFC 03,W
03C62:  MOVWF  FEA
03C64:  MOVFF  57A,FEF
....................             ++used_dimmers;           
03C68:  MOVLB  5
03C6A:  INCF   x7A,F
....................          break; 
03C6C:  MOVLB  0
03C6E:  BRA    3C70
....................       } 
....................    } 
03C70:  MOVLB  6
03C72:  INCF   x8F,F
03C74:  BRA    3B3C
....................    if(used_dimmers>0) 
03C76:  MOVLB  5
03C78:  MOVF   x7A,F
03C7A:  BZ    3CA0
....................    { 
....................    actmat=0; 
03C7C:  MOVLB  0
03C7E:  BCF    xB5.3
....................    pointer=delays1; 
03C80:  MOVLW  05
03C82:  MOVLB  5
03C84:  MOVWF  x7C
03C86:  MOVLW  91
03C88:  MOVWF  x7B
....................    org(); 
03C8A:  MOVLB  0
03C8C:  RCALL  34D8
....................    pointer=delays2; 
03C8E:  MOVLW  05
03C90:  MOVLB  5
03C92:  MOVWF  x7C
03C94:  MOVLW  D5
03C96:  MOVWF  x7B
....................    actmat=1; 
03C98:  MOVLB  0
03C9A:  BSF    xB5.3
....................    org(); 
03C9C:  RCALL  34D8
03C9E:  MOVLB  5
....................    } 
.................... } 
03CA0:  MOVLB  0
03CA2:  GOTO   80CC (RETURN)
....................  
.................... void write_outputs() 
.................... { 
03CA6:  MOVLB  6
03CA8:  BCF    x90.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03CAA:  CLRF   x8F
03CAC:  MOVLB  1
03CAE:  MOVF   x3F,W
03CB0:  MOVLB  6
03CB2:  SUBWF  x8F,W
03CB4:  BTFSC  FD8.0
03CB6:  GOTO   5064
03CBA:  CLRF   1B
03CBC:  BTFSC  FF2.7
03CBE:  BSF    1B.7
03CC0:  BCF    FF2.7
....................    { 
....................       //printf("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03CC2:  MOVLB  7
03CC4:  CLRF   x0B
03CC6:  MOVFF  68F,70A
03CCA:  CLRF   x0D
03CCC:  MOVLW  2F
03CCE:  MOVWF  x0C
03CD0:  MOVLB  0
03CD2:  CALL   035E
03CD6:  BTFSC  1B.7
03CD8:  BSF    FF2.7
03CDA:  MOVFF  02,03
03CDE:  MOVF   01,W
03CE0:  ADDLW  8A
03CE2:  MOVWF  01
03CE4:  MOVLW  02
03CE6:  ADDWFC 03,F
03CE8:  MOVFF  01,FE9
03CEC:  MOVFF  03,FEA
03CF0:  MOVF   FEF,W
03CF2:  XORLW  65
03CF4:  BZ    3D08
03CF6:  XORLW  01
03CF8:  BTFSC  FD8.2
03CFA:  BRA    4292
03CFC:  XORLW  02
03CFE:  BTFSC  FD8.2
03D00:  GOTO   4570
03D04:  GOTO   505C
....................          case dimmer: 
03D08:  CLRF   1B
03D0A:  BTFSC  FF2.7
03D0C:  BSF    1B.7
03D0E:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
03D10:  MOVLB  7
03D12:  CLRF   x0B
03D14:  MOVFF  68F,70A
03D18:  CLRF   x0D
03D1A:  MOVLW  2F
03D1C:  MOVWF  x0C
03D1E:  MOVLB  0
03D20:  CALL   035E
03D24:  BTFSC  1B.7
03D26:  BSF    FF2.7
03D28:  MOVF   01,W
03D2A:  ADDLW  4C
03D2C:  MOVLB  6
03D2E:  MOVWF  x91
03D30:  MOVLW  01
03D32:  ADDWFC 02,W
03D34:  MOVWF  x92
03D36:  MOVLW  01
03D38:  ADDWF  x91,W
03D3A:  MOVWF  01
03D3C:  MOVLW  00
03D3E:  ADDWFC x92,W
03D40:  MOVWF  03
03D42:  MOVF   01,W
03D44:  ADDLW  3E
03D46:  MOVWF  01
03D48:  MOVLW  01
03D4A:  ADDWFC 03,F
03D4C:  MOVF   01,W
03D4E:  ADDLW  1D
03D50:  MOVWF  FE9
03D52:  MOVLW  00
03D54:  ADDWFC 03,W
03D56:  MOVWF  FEA
03D58:  BTFSS  FEF.0
03D5A:  BRA    3EC8
03D5C:  CLRF   1B
03D5E:  BTFSC  FF2.7
03D60:  BSF    1B.7
03D62:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
03D64:  MOVLB  7
03D66:  CLRF   x0B
03D68:  MOVFF  68F,70A
03D6C:  CLRF   x0D
03D6E:  MOVLW  2F
03D70:  MOVWF  x0C
03D72:  MOVLB  0
03D74:  CALL   035E
03D78:  BTFSC  1B.7
03D7A:  BSF    FF2.7
03D7C:  MOVF   01,W
03D7E:  ADDLW  4C
03D80:  MOVLB  6
03D82:  MOVWF  x91
03D84:  MOVLW  01
03D86:  ADDWFC 02,W
03D88:  MOVWF  x92
03D8A:  MOVLW  01
03D8C:  ADDWF  x91,W
03D8E:  MOVWF  01
03D90:  MOVLW  00
03D92:  ADDWFC x92,W
03D94:  MOVWF  03
03D96:  MOVF   01,W
03D98:  ADDLW  3E
03D9A:  MOVWF  01
03D9C:  MOVLW  01
03D9E:  ADDWFC 03,F
03DA0:  MOVF   01,W
03DA2:  ADDLW  1E
03DA4:  MOVWF  FE9
03DA6:  MOVLW  00
03DA8:  ADDWFC 03,W
03DAA:  MOVWF  FEA
03DAC:  MOVF   FEF,F
03DAE:  BNZ   3E76
03DB0:  CLRF   1B
03DB2:  BTFSC  FF2.7
03DB4:  BSF    1B.7
03DB6:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03DB8:  MOVLB  7
03DBA:  CLRF   x0B
03DBC:  MOVFF  68F,70A
03DC0:  CLRF   x0D
03DC2:  MOVLW  2F
03DC4:  MOVWF  x0C
03DC6:  MOVLB  0
03DC8:  CALL   035E
03DCC:  BTFSC  1B.7
03DCE:  BSF    FF2.7
03DD0:  MOVF   01,W
03DD2:  ADDLW  4C
03DD4:  MOVLB  6
03DD6:  MOVWF  x91
03DD8:  MOVLW  01
03DDA:  ADDWFC 02,W
03DDC:  MOVWF  x92
03DDE:  MOVLW  01
03DE0:  ADDWF  x91,W
03DE2:  MOVWF  01
03DE4:  MOVLW  00
03DE6:  ADDWFC x92,W
03DE8:  MOVWF  03
03DEA:  MOVF   01,W
03DEC:  ADDLW  3E
03DEE:  MOVWF  01
03DF0:  MOVLW  01
03DF2:  ADDWFC 03,F
03DF4:  MOVF   01,W
03DF6:  ADDLW  20
03DF8:  MOVWF  FE9
03DFA:  MOVLW  00
03DFC:  ADDWFC 03,W
03DFE:  MOVWF  FEA
03E00:  CLRF   03
03E02:  MOVF   FEF,W
03E04:  ADDLW  81
03E06:  MOVWF  01
03E08:  MOVLW  05
03E0A:  ADDWFC 03,F
03E0C:  MOVFF  01,693
03E10:  MOVFF  03,694
03E14:  CLRF   1B
03E16:  BTFSC  FF2.7
03E18:  BSF    1B.7
03E1A:  BCF    FF2.7
03E1C:  MOVLB  7
03E1E:  CLRF   x0B
03E20:  MOVFF  68F,70A
03E24:  CLRF   x0D
03E26:  MOVLW  2F
03E28:  MOVWF  x0C
03E2A:  MOVLB  0
03E2C:  CALL   035E
03E30:  BTFSC  1B.7
03E32:  BSF    FF2.7
03E34:  MOVF   01,W
03E36:  ADDLW  4C
03E38:  MOVLB  6
03E3A:  MOVWF  x95
03E3C:  MOVLW  01
03E3E:  ADDWFC 02,W
03E40:  MOVWF  x96
03E42:  MOVLW  01
03E44:  ADDWF  x95,W
03E46:  MOVWF  01
03E48:  MOVLW  00
03E4A:  ADDWFC x96,W
03E4C:  MOVWF  03
03E4E:  MOVF   01,W
03E50:  ADDLW  3E
03E52:  MOVWF  01
03E54:  MOVLW  01
03E56:  ADDWFC 03,F
03E58:  MOVF   01,W
03E5A:  ADDLW  1C
03E5C:  MOVWF  FE9
03E5E:  MOVLW  00
03E60:  ADDWFC 03,W
03E62:  MOVWF  FEA
03E64:  MOVFF  FEF,697
03E68:  MOVFF  694,FEA
03E6C:  MOVFF  693,FE9
03E70:  MOVFF  697,FEF
....................                   //printf("ltlevel[%d]=%d\n\r",((struct light)mydevices.myoutputs[x].device).internal_order,((struct light)mydevices.myoutputs[x].device).dim_value.value); 
....................                   update_dimmers=true; 
03E74:  BSF    x90.0
03E76:  CLRF   1B
03E78:  BTFSC  FF2.7
03E7A:  BSF    1B.7
03E7C:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
03E7E:  MOVLB  7
03E80:  CLRF   x0B
03E82:  MOVFF  68F,70A
03E86:  CLRF   x0D
03E88:  MOVLW  2F
03E8A:  MOVWF  x0C
03E8C:  MOVLB  0
03E8E:  CALL   035E
03E92:  BTFSC  1B.7
03E94:  BSF    FF2.7
03E96:  MOVF   01,W
03E98:  ADDLW  4C
03E9A:  MOVLB  6
03E9C:  MOVWF  x91
03E9E:  MOVLW  01
03EA0:  ADDWFC 02,W
03EA2:  MOVWF  x92
03EA4:  MOVLW  01
03EA6:  ADDWF  x91,W
03EA8:  MOVWF  01
03EAA:  MOVLW  00
03EAC:  ADDWFC x92,W
03EAE:  MOVWF  03
03EB0:  MOVF   01,W
03EB2:  ADDLW  3E
03EB4:  MOVWF  01
03EB6:  MOVLW  01
03EB8:  ADDWFC 03,F
03EBA:  MOVF   01,W
03EBC:  ADDLW  1D
03EBE:  MOVWF  FE9
03EC0:  MOVLW  00
03EC2:  ADDWFC 03,W
03EC4:  MOVWF  FEA
03EC6:  BCF    FEF.0
03EC8:  CLRF   1B
03ECA:  BTFSC  FF2.7
03ECC:  BSF    1B.7
03ECE:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
03ED0:  MOVLB  7
03ED2:  CLRF   x0B
03ED4:  MOVFF  68F,70A
03ED8:  CLRF   x0D
03EDA:  MOVLW  2F
03EDC:  MOVWF  x0C
03EDE:  MOVLB  0
03EE0:  CALL   035E
03EE4:  BTFSC  1B.7
03EE6:  BSF    FF2.7
03EE8:  MOVF   01,W
03EEA:  ADDLW  4C
03EEC:  MOVLB  6
03EEE:  MOVWF  x91
03EF0:  MOVLW  01
03EF2:  ADDWFC 02,W
03EF4:  MOVWF  x92
03EF6:  MOVLW  01
03EF8:  ADDWF  x91,W
03EFA:  MOVWF  01
03EFC:  MOVLW  00
03EFE:  ADDWFC x92,W
03F00:  MOVWF  03
03F02:  MOVF   01,W
03F04:  ADDLW  3E
03F06:  MOVWF  01
03F08:  MOVLW  01
03F0A:  ADDWFC 03,F
03F0C:  MOVF   01,W
03F0E:  ADDLW  13
03F10:  MOVWF  FE9
03F12:  MOVLW  00
03F14:  ADDWFC 03,W
03F16:  MOVWF  FEA
03F18:  BTFSS  FEF.0
03F1A:  BRA    4078
03F1C:  CLRF   1B
03F1E:  BTFSC  FF2.7
03F20:  BSF    1B.7
03F22:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
03F24:  MOVLB  7
03F26:  CLRF   x0B
03F28:  MOVFF  68F,70A
03F2C:  CLRF   x0D
03F2E:  MOVLW  2F
03F30:  MOVWF  x0C
03F32:  MOVLB  0
03F34:  CALL   035E
03F38:  BTFSC  1B.7
03F3A:  BSF    FF2.7
03F3C:  MOVF   01,W
03F3E:  ADDLW  4C
03F40:  MOVLB  6
03F42:  MOVWF  x91
03F44:  MOVLW  01
03F46:  ADDWFC 02,W
03F48:  MOVWF  x92
03F4A:  MOVLW  01
03F4C:  ADDWF  x91,W
03F4E:  MOVWF  01
03F50:  MOVLW  00
03F52:  ADDWFC x92,W
03F54:  MOVWF  03
03F56:  MOVF   01,W
03F58:  ADDLW  3E
03F5A:  MOVWF  01
03F5C:  MOVLW  01
03F5E:  ADDWFC 03,F
03F60:  MOVF   01,W
03F62:  ADDLW  12
03F64:  MOVWF  FE9
03F66:  MOVLW  00
03F68:  ADDWFC 03,W
03F6A:  MOVWF  FEA
03F6C:  MOVF   FEF,F
03F6E:  BZ    4026
03F70:  CLRF   1B
03F72:  BTFSC  FF2.7
03F74:  BSF    1B.7
03F76:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
03F78:  MOVLB  7
03F7A:  CLRF   x0B
03F7C:  MOVFF  68F,70A
03F80:  CLRF   x0D
03F82:  MOVLW  2F
03F84:  MOVWF  x0C
03F86:  MOVLB  0
03F88:  CALL   035E
03F8C:  BTFSC  1B.7
03F8E:  BSF    FF2.7
03F90:  MOVF   01,W
03F92:  ADDLW  4C
03F94:  MOVLB  6
03F96:  MOVWF  x91
03F98:  MOVLW  01
03F9A:  ADDWFC 02,W
03F9C:  MOVWF  x92
03F9E:  MOVLW  01
03FA0:  ADDWF  x91,W
03FA2:  MOVWF  01
03FA4:  MOVLW  00
03FA6:  ADDWFC x92,W
03FA8:  MOVWF  03
03FAA:  MOVF   01,W
03FAC:  ADDLW  3E
03FAE:  MOVWF  01
03FB0:  MOVLW  01
03FB2:  ADDWFC 03,F
03FB4:  MOVF   01,W
03FB6:  ADDLW  1E
03FB8:  MOVWF  FE9
03FBA:  MOVLW  00
03FBC:  ADDWFC 03,W
03FBE:  MOVWF  FEA
03FC0:  MOVLW  01
03FC2:  MOVWF  FEF
03FC4:  CLRF   1B
03FC6:  BTFSC  FF2.7
03FC8:  BSF    1B.7
03FCA:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
03FCC:  MOVLB  7
03FCE:  CLRF   x0B
03FD0:  MOVFF  68F,70A
03FD4:  CLRF   x0D
03FD6:  MOVLW  2F
03FD8:  MOVWF  x0C
03FDA:  MOVLB  0
03FDC:  CALL   035E
03FE0:  BTFSC  1B.7
03FE2:  BSF    FF2.7
03FE4:  MOVF   01,W
03FE6:  ADDLW  4C
03FE8:  MOVLB  6
03FEA:  MOVWF  x91
03FEC:  MOVLW  01
03FEE:  ADDWFC 02,W
03FF0:  MOVWF  x92
03FF2:  MOVLW  01
03FF4:  ADDWF  x91,W
03FF6:  MOVWF  01
03FF8:  MOVLW  00
03FFA:  ADDWFC x92,W
03FFC:  MOVWF  03
03FFE:  MOVF   01,W
04000:  ADDLW  3E
04002:  MOVWF  01
04004:  MOVLW  01
04006:  ADDWFC 03,F
04008:  MOVF   01,W
0400A:  ADDLW  20
0400C:  MOVWF  FE9
0400E:  MOVLW  00
04010:  ADDWFC 03,W
04012:  MOVWF  FEA
04014:  CLRF   03
04016:  MOVF   FEF,W
04018:  ADDLW  81
0401A:  MOVWF  FE9
0401C:  MOVLW  05
0401E:  ADDWFC 03,W
04020:  MOVWF  FEA
04022:  CLRF   FEF
....................                   update_dimmers=true; 
04024:  BSF    x90.0
04026:  CLRF   1B
04028:  BTFSC  FF2.7
0402A:  BSF    1B.7
0402C:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
0402E:  MOVLB  7
04030:  CLRF   x0B
04032:  MOVFF  68F,70A
04036:  CLRF   x0D
04038:  MOVLW  2F
0403A:  MOVWF  x0C
0403C:  MOVLB  0
0403E:  CALL   035E
04042:  BTFSC  1B.7
04044:  BSF    FF2.7
04046:  MOVF   01,W
04048:  ADDLW  4C
0404A:  MOVLB  6
0404C:  MOVWF  x91
0404E:  MOVLW  01
04050:  ADDWFC 02,W
04052:  MOVWF  x92
04054:  MOVLW  01
04056:  ADDWF  x91,W
04058:  MOVWF  01
0405A:  MOVLW  00
0405C:  ADDWFC x92,W
0405E:  MOVWF  03
04060:  MOVF   01,W
04062:  ADDLW  3E
04064:  MOVWF  01
04066:  MOVLW  01
04068:  ADDWFC 03,F
0406A:  MOVF   01,W
0406C:  ADDLW  13
0406E:  MOVWF  FE9
04070:  MOVLW  00
04072:  ADDWFC 03,W
04074:  MOVWF  FEA
04076:  BCF    FEF.0
04078:  CLRF   1B
0407A:  BTFSC  FF2.7
0407C:  BSF    1B.7
0407E:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
04080:  MOVLB  7
04082:  CLRF   x0B
04084:  MOVFF  68F,70A
04088:  CLRF   x0D
0408A:  MOVLW  2F
0408C:  MOVWF  x0C
0408E:  MOVLB  0
04090:  CALL   035E
04094:  BTFSC  1B.7
04096:  BSF    FF2.7
04098:  MOVF   01,W
0409A:  ADDLW  4C
0409C:  MOVLB  6
0409E:  MOVWF  x91
040A0:  MOVLW  01
040A2:  ADDWFC 02,W
040A4:  MOVWF  x92
040A6:  MOVLW  01
040A8:  ADDWF  x91,W
040AA:  MOVWF  01
040AC:  MOVLW  00
040AE:  ADDWFC x92,W
040B0:  MOVWF  03
040B2:  MOVF   01,W
040B4:  ADDLW  3E
040B6:  MOVWF  01
040B8:  MOVLW  01
040BA:  ADDWFC 03,F
040BC:  MOVF   01,W
040BE:  ADDLW  09
040C0:  MOVWF  FE9
040C2:  MOVLW  00
040C4:  ADDWFC 03,W
040C6:  MOVWF  FEA
040C8:  BTFSS  FEF.0
040CA:  BRA    428C
040CC:  CLRF   1B
040CE:  BTFSC  FF2.7
040D0:  BSF    1B.7
040D2:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
040D4:  MOVLB  7
040D6:  CLRF   x0B
040D8:  MOVFF  68F,70A
040DC:  CLRF   x0D
040DE:  MOVLW  2F
040E0:  MOVWF  x0C
040E2:  MOVLB  0
040E4:  CALL   035E
040E8:  BTFSC  1B.7
040EA:  BSF    FF2.7
040EC:  MOVF   01,W
040EE:  ADDLW  4C
040F0:  MOVLB  6
040F2:  MOVWF  x91
040F4:  MOVLW  01
040F6:  ADDWFC 02,W
040F8:  MOVWF  x92
040FA:  MOVLW  01
040FC:  ADDWF  x91,W
040FE:  MOVWF  01
04100:  MOVLW  00
04102:  ADDWFC x92,W
04104:  MOVWF  03
04106:  MOVF   01,W
04108:  ADDLW  3E
0410A:  MOVWF  01
0410C:  MOVLW  01
0410E:  ADDWFC 03,F
04110:  MOVF   01,W
04112:  ADDLW  08
04114:  MOVWF  FE9
04116:  MOVLW  00
04118:  ADDWFC 03,W
0411A:  MOVWF  FEA
0411C:  MOVF   FEF,F
0411E:  BTFSC  FD8.2
04120:  BRA    423A
04122:  CLRF   1B
04124:  BTFSC  FF2.7
04126:  BSF    1B.7
04128:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
0412A:  MOVLB  7
0412C:  CLRF   x0B
0412E:  MOVFF  68F,70A
04132:  CLRF   x0D
04134:  MOVLW  2F
04136:  MOVWF  x0C
04138:  MOVLB  0
0413A:  CALL   035E
0413E:  BTFSC  1B.7
04140:  BSF    FF2.7
04142:  MOVF   01,W
04144:  ADDLW  4C
04146:  MOVLB  6
04148:  MOVWF  x91
0414A:  MOVLW  01
0414C:  ADDWFC 02,W
0414E:  MOVWF  x92
04150:  MOVLW  01
04152:  ADDWF  x91,W
04154:  MOVWF  01
04156:  MOVLW  00
04158:  ADDWFC x92,W
0415A:  MOVWF  03
0415C:  MOVF   01,W
0415E:  ADDLW  3E
04160:  MOVWF  01
04162:  MOVLW  01
04164:  ADDWFC 03,F
04166:  MOVF   01,W
04168:  ADDLW  1E
0416A:  MOVWF  FE9
0416C:  MOVLW  00
0416E:  ADDWFC 03,W
04170:  MOVWF  FEA
04172:  CLRF   FEF
04174:  CLRF   1B
04176:  BTFSC  FF2.7
04178:  BSF    1B.7
0417A:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
0417C:  MOVLB  7
0417E:  CLRF   x0B
04180:  MOVFF  68F,70A
04184:  CLRF   x0D
04186:  MOVLW  2F
04188:  MOVWF  x0C
0418A:  MOVLB  0
0418C:  CALL   035E
04190:  BTFSC  1B.7
04192:  BSF    FF2.7
04194:  MOVF   01,W
04196:  ADDLW  4C
04198:  MOVLB  6
0419A:  MOVWF  x91
0419C:  MOVLW  01
0419E:  ADDWFC 02,W
041A0:  MOVWF  x92
041A2:  MOVLW  01
041A4:  ADDWF  x91,W
041A6:  MOVWF  01
041A8:  MOVLW  00
041AA:  ADDWFC x92,W
041AC:  MOVWF  03
041AE:  MOVF   01,W
041B0:  ADDLW  3E
041B2:  MOVWF  01
041B4:  MOVLW  01
041B6:  ADDWFC 03,F
041B8:  MOVF   01,W
041BA:  ADDLW  20
041BC:  MOVWF  FE9
041BE:  MOVLW  00
041C0:  ADDWFC 03,W
041C2:  MOVWF  FEA
041C4:  CLRF   03
041C6:  MOVF   FEF,W
041C8:  ADDLW  81
041CA:  MOVWF  01
041CC:  MOVLW  05
041CE:  ADDWFC 03,F
041D0:  MOVFF  01,693
041D4:  MOVFF  03,694
041D8:  CLRF   1B
041DA:  BTFSC  FF2.7
041DC:  BSF    1B.7
041DE:  BCF    FF2.7
041E0:  MOVLB  7
041E2:  CLRF   x0B
041E4:  MOVFF  68F,70A
041E8:  CLRF   x0D
041EA:  MOVLW  2F
041EC:  MOVWF  x0C
041EE:  MOVLB  0
041F0:  CALL   035E
041F4:  BTFSC  1B.7
041F6:  BSF    FF2.7
041F8:  MOVF   01,W
041FA:  ADDLW  4C
041FC:  MOVLB  6
041FE:  MOVWF  x95
04200:  MOVLW  01
04202:  ADDWFC 02,W
04204:  MOVWF  x96
04206:  MOVLW  01
04208:  ADDWF  x95,W
0420A:  MOVWF  01
0420C:  MOVLW  00
0420E:  ADDWFC x96,W
04210:  MOVWF  03
04212:  MOVF   01,W
04214:  ADDLW  3E
04216:  MOVWF  01
04218:  MOVLW  01
0421A:  ADDWFC 03,F
0421C:  MOVF   01,W
0421E:  ADDLW  1C
04220:  MOVWF  FE9
04222:  MOVLW  00
04224:  ADDWFC 03,W
04226:  MOVWF  FEA
04228:  MOVFF  FEF,697
0422C:  MOVFF  694,FEA
04230:  MOVFF  693,FE9
04234:  MOVFF  697,FEF
....................                   update_dimmers=true; 
04238:  BSF    x90.0
0423A:  CLRF   1B
0423C:  BTFSC  FF2.7
0423E:  BSF    1B.7
04240:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
04242:  MOVLB  7
04244:  CLRF   x0B
04246:  MOVFF  68F,70A
0424A:  CLRF   x0D
0424C:  MOVLW  2F
0424E:  MOVWF  x0C
04250:  MOVLB  0
04252:  CALL   035E
04256:  BTFSC  1B.7
04258:  BSF    FF2.7
0425A:  MOVF   01,W
0425C:  ADDLW  4C
0425E:  MOVLB  6
04260:  MOVWF  x91
04262:  MOVLW  01
04264:  ADDWFC 02,W
04266:  MOVWF  x92
04268:  MOVLW  01
0426A:  ADDWF  x91,W
0426C:  MOVWF  01
0426E:  MOVLW  00
04270:  ADDWFC x92,W
04272:  MOVWF  03
04274:  MOVF   01,W
04276:  ADDLW  3E
04278:  MOVWF  01
0427A:  MOVLW  01
0427C:  ADDWFC 03,F
0427E:  MOVF   01,W
04280:  ADDLW  09
04282:  MOVWF  FE9
04284:  MOVLW  00
04286:  ADDWFC 03,W
04288:  MOVWF  FEA
0428A:  BCF    FEF.0
....................             } 
....................          break; 
0428C:  MOVLB  0
0428E:  GOTO   505C
....................          case _on_off: 
04292:  CLRF   1B
04294:  BTFSC  FF2.7
04296:  BSF    1B.7
04298:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
0429A:  MOVLB  7
0429C:  CLRF   x0B
0429E:  MOVFF  68F,70A
042A2:  CLRF   x0D
042A4:  MOVLW  2F
042A6:  MOVWF  x0C
042A8:  MOVLB  0
042AA:  CALL   035E
042AE:  BTFSC  1B.7
042B0:  BSF    FF2.7
042B2:  MOVF   01,W
042B4:  ADDLW  4C
042B6:  MOVLB  6
042B8:  MOVWF  x91
042BA:  MOVLW  01
042BC:  ADDWFC 02,W
042BE:  MOVWF  x92
042C0:  MOVLW  01
042C2:  ADDWF  x91,W
042C4:  MOVWF  01
042C6:  MOVLW  00
042C8:  ADDWFC x92,W
042CA:  MOVWF  03
042CC:  MOVF   01,W
042CE:  ADDLW  3E
042D0:  MOVWF  01
042D2:  MOVLW  01
042D4:  ADDWFC 03,F
042D6:  MOVF   01,W
042D8:  ADDLW  13
042DA:  MOVWF  FE9
042DC:  MOVLW  00
042DE:  ADDWFC 03,W
042E0:  MOVWF  FEA
042E2:  BTFSS  FEF.0
042E4:  BRA    4404
042E6:  CLRF   1B
042E8:  BTFSC  FF2.7
042EA:  BSF    1B.7
042EC:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
042EE:  MOVLB  7
042F0:  CLRF   x0B
042F2:  MOVFF  68F,70A
042F6:  CLRF   x0D
042F8:  MOVLW  2F
042FA:  MOVWF  x0C
042FC:  MOVLB  0
042FE:  CALL   035E
04302:  BTFSC  1B.7
04304:  BSF    FF2.7
04306:  MOVF   01,W
04308:  ADDLW  4C
0430A:  MOVLB  6
0430C:  MOVWF  x91
0430E:  MOVLW  01
04310:  ADDWFC 02,W
04312:  MOVWF  x92
04314:  MOVLW  01
04316:  ADDWF  x91,W
04318:  MOVWF  01
0431A:  MOVLW  00
0431C:  ADDWFC x92,W
0431E:  MOVWF  03
04320:  MOVF   01,W
04322:  ADDLW  3E
04324:  MOVWF  01
04326:  MOVLW  01
04328:  ADDWFC 03,F
0432A:  MOVF   01,W
0432C:  ADDLW  12
0432E:  MOVWF  FE9
04330:  MOVLW  00
04332:  ADDWFC 03,W
04334:  MOVWF  FEA
04336:  MOVF   FEF,F
04338:  BZ    43B2
0433A:  CLRF   1B
0433C:  BTFSC  FF2.7
0433E:  BSF    1B.7
04340:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04342:  MOVLB  7
04344:  CLRF   x0B
04346:  MOVFF  68F,70A
0434A:  CLRF   x0D
0434C:  MOVLW  2F
0434E:  MOVWF  x0C
04350:  MOVLB  0
04352:  CALL   035E
04356:  BTFSC  1B.7
04358:  BSF    FF2.7
0435A:  MOVF   01,W
0435C:  ADDLW  4C
0435E:  MOVLB  6
04360:  MOVWF  x91
04362:  MOVLW  01
04364:  ADDWFC 02,W
04366:  MOVWF  x92
04368:  MOVLW  01
0436A:  ADDWF  x91,W
0436C:  MOVWF  01
0436E:  MOVLW  00
04370:  ADDWFC x92,W
04372:  MOVWF  03
04374:  MOVF   01,W
04376:  ADDLW  3E
04378:  MOVWF  01
0437A:  MOVLW  01
0437C:  ADDWFC 03,F
0437E:  MOVF   01,W
04380:  ADDLW  14
04382:  MOVWF  FE9
04384:  MOVLW  00
04386:  ADDWFC 03,W
04388:  MOVWF  FEA
0438A:  BCF    FD8.0
0438C:  RLCF   FEF,W
0438E:  CLRF   03
04390:  MOVLB  0
04392:  CALL   0172
04396:  TBLRD*+
04398:  MOVFF  FF5,03
0439C:  CLRF   00
0439E:  DECF   00,F
043A0:  XORWF  00,F
043A2:  MOVLW  FF
043A4:  XORWF  03,F
043A6:  MOVF   00,W
043A8:  MOVLB  5
043AA:  IORWF  x7F,F
043AC:  MOVF   03,W
043AE:  IORWF  x80,F
043B0:  MOVLB  6
043B2:  CLRF   1B
043B4:  BTFSC  FF2.7
043B6:  BSF    1B.7
043B8:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
043BA:  MOVLB  7
043BC:  CLRF   x0B
043BE:  MOVFF  68F,70A
043C2:  CLRF   x0D
043C4:  MOVLW  2F
043C6:  MOVWF  x0C
043C8:  MOVLB  0
043CA:  CALL   035E
043CE:  BTFSC  1B.7
043D0:  BSF    FF2.7
043D2:  MOVF   01,W
043D4:  ADDLW  4C
043D6:  MOVLB  6
043D8:  MOVWF  x91
043DA:  MOVLW  01
043DC:  ADDWFC 02,W
043DE:  MOVWF  x92
043E0:  MOVLW  01
043E2:  ADDWF  x91,W
043E4:  MOVWF  01
043E6:  MOVLW  00
043E8:  ADDWFC x92,W
043EA:  MOVWF  03
043EC:  MOVF   01,W
043EE:  ADDLW  3E
043F0:  MOVWF  01
043F2:  MOVLW  01
043F4:  ADDWFC 03,F
043F6:  MOVF   01,W
043F8:  ADDLW  13
043FA:  MOVWF  FE9
043FC:  MOVLW  00
043FE:  ADDWFC 03,W
04400:  MOVWF  FEA
04402:  BCF    FEF.0
04404:  CLRF   1B
04406:  BTFSC  FF2.7
04408:  BSF    1B.7
0440A:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
0440C:  MOVLB  7
0440E:  CLRF   x0B
04410:  MOVFF  68F,70A
04414:  CLRF   x0D
04416:  MOVLW  2F
04418:  MOVWF  x0C
0441A:  MOVLB  0
0441C:  CALL   035E
04420:  BTFSC  1B.7
04422:  BSF    FF2.7
04424:  MOVF   01,W
04426:  ADDLW  4C
04428:  MOVLB  6
0442A:  MOVWF  x91
0442C:  MOVLW  01
0442E:  ADDWFC 02,W
04430:  MOVWF  x92
04432:  MOVLW  01
04434:  ADDWF  x91,W
04436:  MOVWF  01
04438:  MOVLW  00
0443A:  ADDWFC x92,W
0443C:  MOVWF  03
0443E:  MOVF   01,W
04440:  ADDLW  3E
04442:  MOVWF  01
04444:  MOVLW  01
04446:  ADDWFC 03,F
04448:  MOVF   01,W
0444A:  ADDLW  09
0444C:  MOVWF  FE9
0444E:  MOVLW  00
04450:  ADDWFC 03,W
04452:  MOVWF  FEA
04454:  BTFSS  FEF.0
04456:  BRA    456A
04458:  CLRF   1B
0445A:  BTFSC  FF2.7
0445C:  BSF    1B.7
0445E:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
04460:  MOVLB  7
04462:  CLRF   x0B
04464:  MOVFF  68F,70A
04468:  CLRF   x0D
0446A:  MOVLW  2F
0446C:  MOVWF  x0C
0446E:  MOVLB  0
04470:  CALL   035E
04474:  BTFSC  1B.7
04476:  BSF    FF2.7
04478:  MOVF   01,W
0447A:  ADDLW  4C
0447C:  MOVLB  6
0447E:  MOVWF  x91
04480:  MOVLW  01
04482:  ADDWFC 02,W
04484:  MOVWF  x92
04486:  MOVLW  01
04488:  ADDWF  x91,W
0448A:  MOVWF  01
0448C:  MOVLW  00
0448E:  ADDWFC x92,W
04490:  MOVWF  03
04492:  MOVF   01,W
04494:  ADDLW  3E
04496:  MOVWF  01
04498:  MOVLW  01
0449A:  ADDWFC 03,F
0449C:  MOVF   01,W
0449E:  ADDLW  08
044A0:  MOVWF  FE9
044A2:  MOVLW  00
044A4:  ADDWFC 03,W
044A6:  MOVWF  FEA
044A8:  MOVF   FEF,F
044AA:  BZ    4518
044AC:  CLRF   1B
044AE:  BTFSC  FF2.7
044B0:  BSF    1B.7
044B2:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
044B4:  MOVLB  7
044B6:  CLRF   x0B
044B8:  MOVFF  68F,70A
044BC:  CLRF   x0D
044BE:  MOVLW  2F
044C0:  MOVWF  x0C
044C2:  MOVLB  0
044C4:  CALL   035E
044C8:  BTFSC  1B.7
044CA:  BSF    FF2.7
044CC:  MOVF   01,W
044CE:  ADDLW  4C
044D0:  MOVLB  6
044D2:  MOVWF  x91
044D4:  MOVLW  01
044D6:  ADDWFC 02,W
044D8:  MOVWF  x92
044DA:  MOVLW  01
044DC:  ADDWF  x91,W
044DE:  MOVWF  01
044E0:  MOVLW  00
044E2:  ADDWFC x92,W
044E4:  MOVWF  03
044E6:  MOVF   01,W
044E8:  ADDLW  3E
044EA:  MOVWF  01
044EC:  MOVLW  01
044EE:  ADDWFC 03,F
044F0:  MOVF   01,W
044F2:  ADDLW  14
044F4:  MOVWF  FE9
044F6:  MOVLW  00
044F8:  ADDWFC 03,W
044FA:  MOVWF  FEA
044FC:  BCF    FD8.0
044FE:  RLCF   FEF,W
04500:  CLRF   03
04502:  MOVLB  0
04504:  CALL   0172
04508:  TBLRD*+
0450A:  MOVFF  FF5,03
0450E:  MOVLB  5
04510:  ANDWF  x7F,F
04512:  MOVF   03,W
04514:  ANDWF  x80,F
04516:  MOVLB  6
04518:  CLRF   1B
0451A:  BTFSC  FF2.7
0451C:  BSF    1B.7
0451E:  BCF    FF2.7
....................                   
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
04520:  MOVLB  7
04522:  CLRF   x0B
04524:  MOVFF  68F,70A
04528:  CLRF   x0D
0452A:  MOVLW  2F
0452C:  MOVWF  x0C
0452E:  MOVLB  0
04530:  CALL   035E
04534:  BTFSC  1B.7
04536:  BSF    FF2.7
04538:  MOVF   01,W
0453A:  ADDLW  4C
0453C:  MOVLB  6
0453E:  MOVWF  x91
04540:  MOVLW  01
04542:  ADDWFC 02,W
04544:  MOVWF  x92
04546:  MOVLW  01
04548:  ADDWF  x91,W
0454A:  MOVWF  01
0454C:  MOVLW  00
0454E:  ADDWFC x92,W
04550:  MOVWF  03
04552:  MOVF   01,W
04554:  ADDLW  3E
04556:  MOVWF  01
04558:  MOVLW  01
0455A:  ADDWFC 03,F
0455C:  MOVF   01,W
0455E:  ADDLW  09
04560:  MOVWF  FE9
04562:  MOVLW  00
04564:  ADDWFC 03,W
04566:  MOVWF  FEA
04568:  BCF    FEF.0
....................             } 
....................          break; 
0456A:  MOVLB  0
0456C:  GOTO   505C
....................            case shutter: 
04570:  CLRF   1B
04572:  BTFSC  FF2.7
04574:  BSF    1B.7
04576:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
04578:  MOVLB  7
0457A:  CLRF   x0B
0457C:  MOVFF  68F,70A
04580:  CLRF   x0D
04582:  MOVLW  2F
04584:  MOVWF  x0C
04586:  MOVLB  0
04588:  CALL   035E
0458C:  BTFSC  1B.7
0458E:  BSF    FF2.7
04590:  MOVF   01,W
04592:  ADDLW  4C
04594:  MOVLB  6
04596:  MOVWF  x91
04598:  MOVLW  01
0459A:  ADDWFC 02,W
0459C:  MOVWF  x92
0459E:  MOVLW  01
045A0:  ADDWF  x91,W
045A2:  MOVWF  01
045A4:  MOVLW  00
045A6:  ADDWFC x92,W
045A8:  MOVWF  03
045AA:  MOVF   01,W
045AC:  ADDLW  3E
045AE:  MOVWF  01
045B0:  MOVLW  01
045B2:  ADDWFC 03,F
045B4:  MOVF   01,W
045B6:  ADDLW  09
045B8:  MOVWF  FE9
045BA:  MOVLW  00
045BC:  ADDWFC 03,W
045BE:  MOVWF  FEA
045C0:  BTFSS  FEF.0
045C2:  BRA    4828
045C4:  CLRF   1B
045C6:  BTFSC  FF2.7
045C8:  BSF    1B.7
045CA:  BCF    FF2.7
045CC:  MOVLB  7
045CE:  CLRF   x0B
045D0:  MOVFF  68F,70A
045D4:  CLRF   x0D
045D6:  MOVLW  2F
045D8:  MOVWF  x0C
045DA:  MOVLB  0
045DC:  CALL   035E
045E0:  BTFSC  1B.7
045E2:  BSF    FF2.7
045E4:  MOVF   01,W
045E6:  ADDLW  4C
045E8:  MOVLB  6
045EA:  MOVWF  x93
045EC:  MOVLW  01
045EE:  ADDWFC 02,W
045F0:  MOVWF  x94
045F2:  MOVLW  01
045F4:  ADDWF  x93,W
045F6:  MOVWF  01
045F8:  MOVLW  00
045FA:  ADDWFC x94,W
045FC:  MOVWF  03
045FE:  MOVF   01,W
04600:  ADDLW  3E
04602:  MOVWF  01
04604:  MOVLW  01
04606:  ADDWFC 03,F
04608:  MOVF   01,W
0460A:  ADDLW  2D
0460C:  MOVWF  FE9
0460E:  MOVLW  00
04610:  ADDWFC 03,W
04612:  MOVWF  FEA
04614:  MOVF   FEF,W
04616:  SUBLW  04
04618:  BZ    4670
0461A:  CLRF   1B
0461C:  BTFSC  FF2.7
0461E:  BSF    1B.7
04620:  BCF    FF2.7
04622:  MOVLB  7
04624:  CLRF   x0B
04626:  MOVFF  68F,70A
0462A:  CLRF   x0D
0462C:  MOVLW  2F
0462E:  MOVWF  x0C
04630:  MOVLB  0
04632:  CALL   035E
04636:  BTFSC  1B.7
04638:  BSF    FF2.7
0463A:  MOVF   01,W
0463C:  ADDLW  4C
0463E:  MOVLB  6
04640:  MOVWF  x95
04642:  MOVLW  01
04644:  ADDWFC 02,W
04646:  MOVWF  x96
04648:  MOVLW  01
0464A:  ADDWF  x95,W
0464C:  MOVWF  01
0464E:  MOVLW  00
04650:  ADDWFC x96,W
04652:  MOVWF  03
04654:  MOVF   01,W
04656:  ADDLW  3E
04658:  MOVWF  01
0465A:  MOVLW  01
0465C:  ADDWFC 03,F
0465E:  MOVF   01,W
04660:  ADDLW  2D
04662:  MOVWF  FE9
04664:  MOVLW  00
04666:  ADDWFC 03,W
04668:  MOVWF  FEA
0466A:  MOVF   FEF,F
0466C:  BTFSS  FD8.2
0466E:  BRA    4828
04670:  CLRF   1B
04672:  BTFSC  FF2.7
04674:  BSF    1B.7
04676:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
04678:  MOVLB  7
0467A:  CLRF   x0B
0467C:  MOVFF  68F,70A
04680:  CLRF   x0D
04682:  MOVLW  2F
04684:  MOVWF  x0C
04686:  MOVLB  0
04688:  CALL   035E
0468C:  BTFSC  1B.7
0468E:  BSF    FF2.7
04690:  MOVF   01,W
04692:  ADDLW  4C
04694:  MOVLB  6
04696:  MOVWF  x91
04698:  MOVLW  01
0469A:  ADDWFC 02,W
0469C:  MOVWF  x92
0469E:  MOVLW  01
046A0:  ADDWF  x91,W
046A2:  MOVWF  01
046A4:  MOVLW  00
046A6:  ADDWFC x92,W
046A8:  MOVWF  03
046AA:  MOVF   01,W
046AC:  ADDLW  3E
046AE:  MOVWF  01
046B0:  MOVLW  01
046B2:  ADDWFC 03,F
046B4:  MOVF   01,W
046B6:  ADDLW  08
046B8:  MOVWF  FE9
046BA:  MOVLW  00
046BC:  ADDWFC 03,W
046BE:  MOVWF  FEA
046C0:  MOVF   FEF,F
046C2:  BTFSC  FD8.2
046C4:  BRA    47D6
046C6:  CLRF   1B
046C8:  BTFSC  FF2.7
046CA:  BSF    1B.7
046CC:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
046CE:  MOVLB  7
046D0:  CLRF   x0B
046D2:  MOVFF  68F,70A
046D6:  CLRF   x0D
046D8:  MOVLW  2F
046DA:  MOVWF  x0C
046DC:  MOVLB  0
046DE:  CALL   035E
046E2:  BTFSC  1B.7
046E4:  BSF    FF2.7
046E6:  MOVF   01,W
046E8:  ADDLW  4C
046EA:  MOVLB  6
046EC:  MOVWF  x91
046EE:  MOVLW  01
046F0:  ADDWFC 02,W
046F2:  MOVWF  x92
046F4:  MOVLW  01
046F6:  ADDWF  x91,W
046F8:  MOVWF  01
046FA:  MOVLW  00
046FC:  ADDWFC x92,W
046FE:  MOVWF  03
04700:  MOVF   01,W
04702:  ADDLW  3E
04704:  MOVWF  01
04706:  MOVLW  01
04708:  ADDWFC 03,F
0470A:  MOVF   01,W
0470C:  ADDLW  2A
0470E:  MOVWF  FE9
04710:  MOVLW  00
04712:  ADDWFC 03,W
04714:  MOVWF  FEA
04716:  CLRF   FEF
04718:  CLRF   1B
0471A:  BTFSC  FF2.7
0471C:  BSF    1B.7
0471E:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
04720:  MOVLB  7
04722:  CLRF   x0B
04724:  MOVFF  68F,70A
04728:  CLRF   x0D
0472A:  MOVLW  2F
0472C:  MOVWF  x0C
0472E:  MOVLB  0
04730:  CALL   035E
04734:  BTFSC  1B.7
04736:  BSF    FF2.7
04738:  MOVF   01,W
0473A:  ADDLW  4C
0473C:  MOVLB  6
0473E:  MOVWF  x91
04740:  MOVLW  01
04742:  ADDWFC 02,W
04744:  MOVWF  x92
04746:  MOVLW  01
04748:  ADDWF  x91,W
0474A:  MOVWF  01
0474C:  MOVLW  00
0474E:  ADDWFC x92,W
04750:  MOVWF  03
04752:  MOVF   01,W
04754:  ADDLW  3E
04756:  MOVWF  01
04758:  MOVLW  01
0475A:  ADDWFC 03,F
0475C:  MOVF   01,W
0475E:  ADDLW  2D
04760:  MOVWF  FE9
04762:  MOVLW  00
04764:  ADDWFC 03,W
04766:  MOVWF  FEA
04768:  CLRF   FEF
0476A:  CLRF   1B
0476C:  BTFSC  FF2.7
0476E:  BSF    1B.7
04770:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04772:  MOVLB  7
04774:  CLRF   x0B
04776:  MOVFF  68F,70A
0477A:  CLRF   x0D
0477C:  MOVLW  2F
0477E:  MOVWF  x0C
04780:  MOVLB  0
04782:  CALL   035E
04786:  BTFSC  1B.7
04788:  BSF    FF2.7
0478A:  MOVF   01,W
0478C:  ADDLW  4C
0478E:  MOVLB  6
04790:  MOVWF  x91
04792:  MOVLW  01
04794:  ADDWFC 02,W
04796:  MOVWF  x92
04798:  MOVLW  01
0479A:  ADDWF  x91,W
0479C:  MOVWF  01
0479E:  MOVLW  00
047A0:  ADDWFC x92,W
047A2:  MOVWF  03
047A4:  MOVF   01,W
047A6:  ADDLW  3E
047A8:  MOVWF  01
047AA:  MOVLW  01
047AC:  ADDWFC 03,F
047AE:  MOVF   01,W
047B0:  ADDLW  28
047B2:  MOVWF  FE9
047B4:  MOVLW  00
047B6:  ADDWFC 03,W
047B8:  MOVWF  FEA
047BA:  BCF    FD8.0
047BC:  RLCF   FEF,W
047BE:  CLRF   03
047C0:  MOVLB  0
047C2:  CALL   0172
047C6:  TBLRD*+
047C8:  MOVFF  FF5,03
047CC:  MOVLB  5
047CE:  ANDWF  x7F,F
047D0:  MOVF   03,W
047D2:  ANDWF  x80,F
047D4:  MOVLB  6
047D6:  CLRF   1B
047D8:  BTFSC  FF2.7
047DA:  BSF    1B.7
047DC:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
047DE:  MOVLB  7
047E0:  CLRF   x0B
047E2:  MOVFF  68F,70A
047E6:  CLRF   x0D
047E8:  MOVLW  2F
047EA:  MOVWF  x0C
047EC:  MOVLB  0
047EE:  CALL   035E
047F2:  BTFSC  1B.7
047F4:  BSF    FF2.7
047F6:  MOVF   01,W
047F8:  ADDLW  4C
047FA:  MOVLB  6
047FC:  MOVWF  x91
047FE:  MOVLW  01
04800:  ADDWFC 02,W
04802:  MOVWF  x92
04804:  MOVLW  01
04806:  ADDWF  x91,W
04808:  MOVWF  01
0480A:  MOVLW  00
0480C:  ADDWFC x92,W
0480E:  MOVWF  03
04810:  MOVF   01,W
04812:  ADDLW  3E
04814:  MOVWF  01
04816:  MOVLW  01
04818:  ADDWFC 03,F
0481A:  MOVF   01,W
0481C:  ADDLW  09
0481E:  MOVWF  FE9
04820:  MOVLW  00
04822:  ADDWFC 03,W
04824:  MOVWF  FEA
04826:  BCF    FEF.0
04828:  CLRF   1B
0482A:  BTFSC  FF2.7
0482C:  BSF    1B.7
0482E:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
04830:  MOVLB  7
04832:  CLRF   x0B
04834:  MOVFF  68F,70A
04838:  CLRF   x0D
0483A:  MOVLW  2F
0483C:  MOVWF  x0C
0483E:  MOVLB  0
04840:  CALL   035E
04844:  BTFSC  1B.7
04846:  BSF    FF2.7
04848:  MOVF   01,W
0484A:  ADDLW  4C
0484C:  MOVLB  6
0484E:  MOVWF  x91
04850:  MOVLW  01
04852:  ADDWFC 02,W
04854:  MOVWF  x92
04856:  MOVLW  01
04858:  ADDWF  x91,W
0485A:  MOVWF  01
0485C:  MOVLW  00
0485E:  ADDWFC x92,W
04860:  MOVWF  03
04862:  MOVF   01,W
04864:  ADDLW  3E
04866:  MOVWF  01
04868:  MOVLW  01
0486A:  ADDWFC 03,F
0486C:  MOVF   01,W
0486E:  ADDLW  13
04870:  MOVWF  FE9
04872:  MOVLW  00
04874:  ADDWFC 03,W
04876:  MOVWF  FEA
04878:  BTFSS  FEF.0
0487A:  BRA    4AE0
0487C:  CLRF   1B
0487E:  BTFSC  FF2.7
04880:  BSF    1B.7
04882:  BCF    FF2.7
04884:  MOVLB  7
04886:  CLRF   x0B
04888:  MOVFF  68F,70A
0488C:  CLRF   x0D
0488E:  MOVLW  2F
04890:  MOVWF  x0C
04892:  MOVLB  0
04894:  CALL   035E
04898:  BTFSC  1B.7
0489A:  BSF    FF2.7
0489C:  MOVF   01,W
0489E:  ADDLW  4C
048A0:  MOVLB  6
048A2:  MOVWF  x93
048A4:  MOVLW  01
048A6:  ADDWFC 02,W
048A8:  MOVWF  x94
048AA:  MOVLW  01
048AC:  ADDWF  x93,W
048AE:  MOVWF  01
048B0:  MOVLW  00
048B2:  ADDWFC x94,W
048B4:  MOVWF  03
048B6:  MOVF   01,W
048B8:  ADDLW  3E
048BA:  MOVWF  01
048BC:  MOVLW  01
048BE:  ADDWFC 03,F
048C0:  MOVF   01,W
048C2:  ADDLW  2D
048C4:  MOVWF  FE9
048C6:  MOVLW  00
048C8:  ADDWFC 03,W
048CA:  MOVWF  FEA
048CC:  MOVF   FEF,W
048CE:  SUBLW  04
048D0:  BZ    4926
048D2:  CLRF   1B
048D4:  BTFSC  FF2.7
048D6:  BSF    1B.7
048D8:  BCF    FF2.7
048DA:  MOVLB  7
048DC:  CLRF   x0B
048DE:  MOVFF  68F,70A
048E2:  CLRF   x0D
048E4:  MOVLW  2F
048E6:  MOVWF  x0C
048E8:  MOVLB  0
048EA:  CALL   035E
048EE:  BTFSC  1B.7
048F0:  BSF    FF2.7
048F2:  MOVF   01,W
048F4:  ADDLW  4C
048F6:  MOVLB  6
048F8:  MOVWF  x95
048FA:  MOVLW  01
048FC:  ADDWFC 02,W
048FE:  MOVWF  x96
04900:  MOVLW  01
04902:  ADDWF  x95,W
04904:  MOVWF  01
04906:  MOVLW  00
04908:  ADDWFC x96,W
0490A:  MOVWF  03
0490C:  MOVF   01,W
0490E:  ADDLW  3E
04910:  MOVWF  01
04912:  MOVLW  01
04914:  ADDWFC 03,F
04916:  MOVF   01,W
04918:  ADDLW  2D
0491A:  MOVWF  FE9
0491C:  MOVLW  00
0491E:  ADDWFC 03,W
04920:  MOVWF  FEA
04922:  DECFSZ FEF,W
04924:  BRA    4AE0
04926:  CLRF   1B
04928:  BTFSC  FF2.7
0492A:  BSF    1B.7
0492C:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
0492E:  MOVLB  7
04930:  CLRF   x0B
04932:  MOVFF  68F,70A
04936:  CLRF   x0D
04938:  MOVLW  2F
0493A:  MOVWF  x0C
0493C:  MOVLB  0
0493E:  CALL   035E
04942:  BTFSC  1B.7
04944:  BSF    FF2.7
04946:  MOVF   01,W
04948:  ADDLW  4C
0494A:  MOVLB  6
0494C:  MOVWF  x91
0494E:  MOVLW  01
04950:  ADDWFC 02,W
04952:  MOVWF  x92
04954:  MOVLW  01
04956:  ADDWF  x91,W
04958:  MOVWF  01
0495A:  MOVLW  00
0495C:  ADDWFC x92,W
0495E:  MOVWF  03
04960:  MOVF   01,W
04962:  ADDLW  3E
04964:  MOVWF  01
04966:  MOVLW  01
04968:  ADDWFC 03,F
0496A:  MOVF   01,W
0496C:  ADDLW  12
0496E:  MOVWF  FE9
04970:  MOVLW  00
04972:  ADDWFC 03,W
04974:  MOVWF  FEA
04976:  MOVF   FEF,F
04978:  BTFSC  FD8.2
0497A:  BRA    4A8E
0497C:  CLRF   1B
0497E:  BTFSC  FF2.7
04980:  BSF    1B.7
04982:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04984:  MOVLB  7
04986:  CLRF   x0B
04988:  MOVFF  68F,70A
0498C:  CLRF   x0D
0498E:  MOVLW  2F
04990:  MOVWF  x0C
04992:  MOVLB  0
04994:  CALL   035E
04998:  BTFSC  1B.7
0499A:  BSF    FF2.7
0499C:  MOVF   01,W
0499E:  ADDLW  4C
049A0:  MOVLB  6
049A2:  MOVWF  x91
049A4:  MOVLW  01
049A6:  ADDWFC 02,W
049A8:  MOVWF  x92
049AA:  MOVLW  01
049AC:  ADDWF  x91,W
049AE:  MOVWF  01
049B0:  MOVLW  00
049B2:  ADDWFC x92,W
049B4:  MOVWF  03
049B6:  MOVF   01,W
049B8:  ADDLW  3E
049BA:  MOVWF  01
049BC:  MOVLW  01
049BE:  ADDWFC 03,F
049C0:  MOVF   01,W
049C2:  ADDLW  2A
049C4:  MOVWF  FE9
049C6:  MOVLW  00
049C8:  ADDWFC 03,W
049CA:  MOVWF  FEA
049CC:  CLRF   FEF
049CE:  CLRF   1B
049D0:  BTFSC  FF2.7
049D2:  BSF    1B.7
049D4:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
049D6:  MOVLB  7
049D8:  CLRF   x0B
049DA:  MOVFF  68F,70A
049DE:  CLRF   x0D
049E0:  MOVLW  2F
049E2:  MOVWF  x0C
049E4:  MOVLB  0
049E6:  CALL   035E
049EA:  BTFSC  1B.7
049EC:  BSF    FF2.7
049EE:  MOVF   01,W
049F0:  ADDLW  4C
049F2:  MOVLB  6
049F4:  MOVWF  x91
049F6:  MOVLW  01
049F8:  ADDWFC 02,W
049FA:  MOVWF  x92
049FC:  MOVLW  01
049FE:  ADDWF  x91,W
04A00:  MOVWF  01
04A02:  MOVLW  00
04A04:  ADDWFC x92,W
04A06:  MOVWF  03
04A08:  MOVF   01,W
04A0A:  ADDLW  3E
04A0C:  MOVWF  01
04A0E:  MOVLW  01
04A10:  ADDWFC 03,F
04A12:  MOVF   01,W
04A14:  ADDLW  2D
04A16:  MOVWF  FE9
04A18:  MOVLW  00
04A1A:  ADDWFC 03,W
04A1C:  MOVWF  FEA
04A1E:  MOVLW  01
04A20:  MOVWF  FEF
04A22:  CLRF   1B
04A24:  BTFSC  FF2.7
04A26:  BSF    1B.7
04A28:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04A2A:  MOVLB  7
04A2C:  CLRF   x0B
04A2E:  MOVFF  68F,70A
04A32:  CLRF   x0D
04A34:  MOVLW  2F
04A36:  MOVWF  x0C
04A38:  MOVLB  0
04A3A:  CALL   035E
04A3E:  BTFSC  1B.7
04A40:  BSF    FF2.7
04A42:  MOVF   01,W
04A44:  ADDLW  4C
04A46:  MOVLB  6
04A48:  MOVWF  x91
04A4A:  MOVLW  01
04A4C:  ADDWFC 02,W
04A4E:  MOVWF  x92
04A50:  MOVLW  01
04A52:  ADDWF  x91,W
04A54:  MOVWF  01
04A56:  MOVLW  00
04A58:  ADDWFC x92,W
04A5A:  MOVWF  03
04A5C:  MOVF   01,W
04A5E:  ADDLW  3E
04A60:  MOVWF  01
04A62:  MOVLW  01
04A64:  ADDWFC 03,F
04A66:  MOVF   01,W
04A68:  ADDLW  29
04A6A:  MOVWF  FE9
04A6C:  MOVLW  00
04A6E:  ADDWFC 03,W
04A70:  MOVWF  FEA
04A72:  BCF    FD8.0
04A74:  RLCF   FEF,W
04A76:  CLRF   03
04A78:  MOVLB  0
04A7A:  CALL   0172
04A7E:  TBLRD*+
04A80:  MOVFF  FF5,03
04A84:  MOVLB  5
04A86:  ANDWF  x7F,F
04A88:  MOVF   03,W
04A8A:  ANDWF  x80,F
04A8C:  MOVLB  6
04A8E:  CLRF   1B
04A90:  BTFSC  FF2.7
04A92:  BSF    1B.7
04A94:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04A96:  MOVLB  7
04A98:  CLRF   x0B
04A9A:  MOVFF  68F,70A
04A9E:  CLRF   x0D
04AA0:  MOVLW  2F
04AA2:  MOVWF  x0C
04AA4:  MOVLB  0
04AA6:  CALL   035E
04AAA:  BTFSC  1B.7
04AAC:  BSF    FF2.7
04AAE:  MOVF   01,W
04AB0:  ADDLW  4C
04AB2:  MOVLB  6
04AB4:  MOVWF  x91
04AB6:  MOVLW  01
04AB8:  ADDWFC 02,W
04ABA:  MOVWF  x92
04ABC:  MOVLW  01
04ABE:  ADDWF  x91,W
04AC0:  MOVWF  01
04AC2:  MOVLW  00
04AC4:  ADDWFC x92,W
04AC6:  MOVWF  03
04AC8:  MOVF   01,W
04ACA:  ADDLW  3E
04ACC:  MOVWF  01
04ACE:  MOVLW  01
04AD0:  ADDWFC 03,F
04AD2:  MOVF   01,W
04AD4:  ADDLW  13
04AD6:  MOVWF  FE9
04AD8:  MOVLW  00
04ADA:  ADDWFC 03,W
04ADC:  MOVWF  FEA
04ADE:  BCF    FEF.0
04AE0:  CLRF   1B
04AE2:  BTFSC  FF2.7
04AE4:  BSF    1B.7
04AE6:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
04AE8:  MOVLB  7
04AEA:  CLRF   x0B
04AEC:  MOVFF  68F,70A
04AF0:  CLRF   x0D
04AF2:  MOVLW  2F
04AF4:  MOVWF  x0C
04AF6:  MOVLB  0
04AF8:  CALL   035E
04AFC:  BTFSC  1B.7
04AFE:  BSF    FF2.7
04B00:  MOVF   01,W
04B02:  ADDLW  4C
04B04:  MOVLB  6
04B06:  MOVWF  x91
04B08:  MOVLW  01
04B0A:  ADDWFC 02,W
04B0C:  MOVWF  x92
04B0E:  MOVLW  01
04B10:  ADDWF  x91,W
04B12:  MOVWF  01
04B14:  MOVLW  00
04B16:  ADDWFC x92,W
04B18:  MOVWF  03
04B1A:  MOVF   01,W
04B1C:  ADDLW  3E
04B1E:  MOVWF  01
04B20:  MOVLW  01
04B22:  ADDWFC 03,F
04B24:  MOVF   01,W
04B26:  ADDLW  1D
04B28:  MOVWF  FE9
04B2A:  MOVLW  00
04B2C:  ADDWFC 03,W
04B2E:  MOVWF  FEA
04B30:  BTFSS  FEF.0
04B32:  BRA    4D9C
04B34:  CLRF   1B
04B36:  BTFSC  FF2.7
04B38:  BSF    1B.7
04B3A:  BCF    FF2.7
04B3C:  MOVLB  7
04B3E:  CLRF   x0B
04B40:  MOVFF  68F,70A
04B44:  CLRF   x0D
04B46:  MOVLW  2F
04B48:  MOVWF  x0C
04B4A:  MOVLB  0
04B4C:  CALL   035E
04B50:  BTFSC  1B.7
04B52:  BSF    FF2.7
04B54:  MOVF   01,W
04B56:  ADDLW  4C
04B58:  MOVLB  6
04B5A:  MOVWF  x93
04B5C:  MOVLW  01
04B5E:  ADDWFC 02,W
04B60:  MOVWF  x94
04B62:  MOVLW  01
04B64:  ADDWF  x93,W
04B66:  MOVWF  01
04B68:  MOVLW  00
04B6A:  ADDWFC x94,W
04B6C:  MOVWF  03
04B6E:  MOVF   01,W
04B70:  ADDLW  3E
04B72:  MOVWF  01
04B74:  MOVLW  01
04B76:  ADDWFC 03,F
04B78:  MOVF   01,W
04B7A:  ADDLW  2D
04B7C:  MOVWF  FE9
04B7E:  MOVLW  00
04B80:  ADDWFC 03,W
04B82:  MOVWF  FEA
04B84:  MOVF   FEF,W
04B86:  SUBLW  04
04B88:  BZ    4BE2
04B8A:  CLRF   1B
04B8C:  BTFSC  FF2.7
04B8E:  BSF    1B.7
04B90:  BCF    FF2.7
04B92:  MOVLB  7
04B94:  CLRF   x0B
04B96:  MOVFF  68F,70A
04B9A:  CLRF   x0D
04B9C:  MOVLW  2F
04B9E:  MOVWF  x0C
04BA0:  MOVLB  0
04BA2:  CALL   035E
04BA6:  BTFSC  1B.7
04BA8:  BSF    FF2.7
04BAA:  MOVF   01,W
04BAC:  ADDLW  4C
04BAE:  MOVLB  6
04BB0:  MOVWF  x95
04BB2:  MOVLW  01
04BB4:  ADDWFC 02,W
04BB6:  MOVWF  x96
04BB8:  MOVLW  01
04BBA:  ADDWF  x95,W
04BBC:  MOVWF  01
04BBE:  MOVLW  00
04BC0:  ADDWFC x96,W
04BC2:  MOVWF  03
04BC4:  MOVF   01,W
04BC6:  ADDLW  3E
04BC8:  MOVWF  01
04BCA:  MOVLW  01
04BCC:  ADDWFC 03,F
04BCE:  MOVF   01,W
04BD0:  ADDLW  2D
04BD2:  MOVWF  FE9
04BD4:  MOVLW  00
04BD6:  ADDWFC 03,W
04BD8:  MOVWF  FEA
04BDA:  MOVF   FEF,W
04BDC:  SUBLW  02
04BDE:  BTFSS  FD8.2
04BE0:  BRA    4D9C
04BE2:  CLRF   1B
04BE4:  BTFSC  FF2.7
04BE6:  BSF    1B.7
04BE8:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
04BEA:  MOVLB  7
04BEC:  CLRF   x0B
04BEE:  MOVFF  68F,70A
04BF2:  CLRF   x0D
04BF4:  MOVLW  2F
04BF6:  MOVWF  x0C
04BF8:  MOVLB  0
04BFA:  CALL   035E
04BFE:  BTFSC  1B.7
04C00:  BSF    FF2.7
04C02:  MOVF   01,W
04C04:  ADDLW  4C
04C06:  MOVLB  6
04C08:  MOVWF  x91
04C0A:  MOVLW  01
04C0C:  ADDWFC 02,W
04C0E:  MOVWF  x92
04C10:  MOVLW  01
04C12:  ADDWF  x91,W
04C14:  MOVWF  01
04C16:  MOVLW  00
04C18:  ADDWFC x92,W
04C1A:  MOVWF  03
04C1C:  MOVF   01,W
04C1E:  ADDLW  3E
04C20:  MOVWF  01
04C22:  MOVLW  01
04C24:  ADDWFC 03,F
04C26:  MOVF   01,W
04C28:  ADDLW  1C
04C2A:  MOVWF  FE9
04C2C:  MOVLW  00
04C2E:  ADDWFC 03,W
04C30:  MOVWF  FEA
04C32:  MOVF   FEF,F
04C34:  BTFSC  FD8.2
04C36:  BRA    4D4A
04C38:  CLRF   1B
04C3A:  BTFSC  FF2.7
04C3C:  BSF    1B.7
04C3E:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04C40:  MOVLB  7
04C42:  CLRF   x0B
04C44:  MOVFF  68F,70A
04C48:  CLRF   x0D
04C4A:  MOVLW  2F
04C4C:  MOVWF  x0C
04C4E:  MOVLB  0
04C50:  CALL   035E
04C54:  BTFSC  1B.7
04C56:  BSF    FF2.7
04C58:  MOVF   01,W
04C5A:  ADDLW  4C
04C5C:  MOVLB  6
04C5E:  MOVWF  x91
04C60:  MOVLW  01
04C62:  ADDWFC 02,W
04C64:  MOVWF  x92
04C66:  MOVLW  01
04C68:  ADDWF  x91,W
04C6A:  MOVWF  01
04C6C:  MOVLW  00
04C6E:  ADDWFC x92,W
04C70:  MOVWF  03
04C72:  MOVF   01,W
04C74:  ADDLW  3E
04C76:  MOVWF  01
04C78:  MOVLW  01
04C7A:  ADDWFC 03,F
04C7C:  MOVF   01,W
04C7E:  ADDLW  2A
04C80:  MOVWF  FE9
04C82:  MOVLW  00
04C84:  ADDWFC 03,W
04C86:  MOVWF  FEA
04C88:  CLRF   FEF
04C8A:  CLRF   1B
04C8C:  BTFSC  FF2.7
04C8E:  BSF    1B.7
04C90:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
04C92:  MOVLB  7
04C94:  CLRF   x0B
04C96:  MOVFF  68F,70A
04C9A:  CLRF   x0D
04C9C:  MOVLW  2F
04C9E:  MOVWF  x0C
04CA0:  MOVLB  0
04CA2:  CALL   035E
04CA6:  BTFSC  1B.7
04CA8:  BSF    FF2.7
04CAA:  MOVF   01,W
04CAC:  ADDLW  4C
04CAE:  MOVLB  6
04CB0:  MOVWF  x91
04CB2:  MOVLW  01
04CB4:  ADDWFC 02,W
04CB6:  MOVWF  x92
04CB8:  MOVLW  01
04CBA:  ADDWF  x91,W
04CBC:  MOVWF  01
04CBE:  MOVLW  00
04CC0:  ADDWFC x92,W
04CC2:  MOVWF  03
04CC4:  MOVF   01,W
04CC6:  ADDLW  3E
04CC8:  MOVWF  01
04CCA:  MOVLW  01
04CCC:  ADDWFC 03,F
04CCE:  MOVF   01,W
04CD0:  ADDLW  2D
04CD2:  MOVWF  FE9
04CD4:  MOVLW  00
04CD6:  ADDWFC 03,W
04CD8:  MOVWF  FEA
04CDA:  MOVLW  02
04CDC:  MOVWF  FEF
04CDE:  CLRF   1B
04CE0:  BTFSC  FF2.7
04CE2:  BSF    1B.7
04CE4:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04CE6:  MOVLB  7
04CE8:  CLRF   x0B
04CEA:  MOVFF  68F,70A
04CEE:  CLRF   x0D
04CF0:  MOVLW  2F
04CF2:  MOVWF  x0C
04CF4:  MOVLB  0
04CF6:  CALL   035E
04CFA:  BTFSC  1B.7
04CFC:  BSF    FF2.7
04CFE:  MOVF   01,W
04D00:  ADDLW  4C
04D02:  MOVLB  6
04D04:  MOVWF  x91
04D06:  MOVLW  01
04D08:  ADDWFC 02,W
04D0A:  MOVWF  x92
04D0C:  MOVLW  01
04D0E:  ADDWF  x91,W
04D10:  MOVWF  01
04D12:  MOVLW  00
04D14:  ADDWFC x92,W
04D16:  MOVWF  03
04D18:  MOVF   01,W
04D1A:  ADDLW  3E
04D1C:  MOVWF  01
04D1E:  MOVLW  01
04D20:  ADDWFC 03,F
04D22:  MOVF   01,W
04D24:  ADDLW  28
04D26:  MOVWF  FE9
04D28:  MOVLW  00
04D2A:  ADDWFC 03,W
04D2C:  MOVWF  FEA
04D2E:  BCF    FD8.0
04D30:  RLCF   FEF,W
04D32:  CLRF   03
04D34:  MOVLB  0
04D36:  CALL   0172
04D3A:  TBLRD*+
04D3C:  MOVFF  FF5,03
04D40:  MOVLB  5
04D42:  ANDWF  x7F,F
04D44:  MOVF   03,W
04D46:  ANDWF  x80,F
04D48:  MOVLB  6
04D4A:  CLRF   1B
04D4C:  BTFSC  FF2.7
04D4E:  BSF    1B.7
04D50:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
04D52:  MOVLB  7
04D54:  CLRF   x0B
04D56:  MOVFF  68F,70A
04D5A:  CLRF   x0D
04D5C:  MOVLW  2F
04D5E:  MOVWF  x0C
04D60:  MOVLB  0
04D62:  CALL   035E
04D66:  BTFSC  1B.7
04D68:  BSF    FF2.7
04D6A:  MOVF   01,W
04D6C:  ADDLW  4C
04D6E:  MOVLB  6
04D70:  MOVWF  x91
04D72:  MOVLW  01
04D74:  ADDWFC 02,W
04D76:  MOVWF  x92
04D78:  MOVLW  01
04D7A:  ADDWF  x91,W
04D7C:  MOVWF  01
04D7E:  MOVLW  00
04D80:  ADDWFC x92,W
04D82:  MOVWF  03
04D84:  MOVF   01,W
04D86:  ADDLW  3E
04D88:  MOVWF  01
04D8A:  MOVLW  01
04D8C:  ADDWFC 03,F
04D8E:  MOVF   01,W
04D90:  ADDLW  1D
04D92:  MOVWF  FE9
04D94:  MOVLW  00
04D96:  ADDWFC 03,W
04D98:  MOVWF  FEA
04D9A:  BCF    FEF.0
04D9C:  CLRF   1B
04D9E:  BTFSC  FF2.7
04DA0:  BSF    1B.7
04DA2:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
04DA4:  MOVLB  7
04DA6:  CLRF   x0B
04DA8:  MOVFF  68F,70A
04DAC:  CLRF   x0D
04DAE:  MOVLW  2F
04DB0:  MOVWF  x0C
04DB2:  MOVLB  0
04DB4:  CALL   035E
04DB8:  BTFSC  1B.7
04DBA:  BSF    FF2.7
04DBC:  MOVF   01,W
04DBE:  ADDLW  4C
04DC0:  MOVLB  6
04DC2:  MOVWF  x91
04DC4:  MOVLW  01
04DC6:  ADDWFC 02,W
04DC8:  MOVWF  x92
04DCA:  MOVLW  01
04DCC:  ADDWF  x91,W
04DCE:  MOVWF  01
04DD0:  MOVLW  00
04DD2:  ADDWFC x92,W
04DD4:  MOVWF  03
04DD6:  MOVF   01,W
04DD8:  ADDLW  3E
04DDA:  MOVWF  01
04DDC:  MOVLW  01
04DDE:  ADDWFC 03,F
04DE0:  MOVF   01,W
04DE2:  ADDLW  27
04DE4:  MOVWF  FE9
04DE6:  MOVLW  00
04DE8:  ADDWFC 03,W
04DEA:  MOVWF  FEA
04DEC:  BTFSS  FEF.0
04DEE:  BRA    5058
04DF0:  CLRF   1B
04DF2:  BTFSC  FF2.7
04DF4:  BSF    1B.7
04DF6:  BCF    FF2.7
04DF8:  MOVLB  7
04DFA:  CLRF   x0B
04DFC:  MOVFF  68F,70A
04E00:  CLRF   x0D
04E02:  MOVLW  2F
04E04:  MOVWF  x0C
04E06:  MOVLB  0
04E08:  CALL   035E
04E0C:  BTFSC  1B.7
04E0E:  BSF    FF2.7
04E10:  MOVF   01,W
04E12:  ADDLW  4C
04E14:  MOVLB  6
04E16:  MOVWF  x93
04E18:  MOVLW  01
04E1A:  ADDWFC 02,W
04E1C:  MOVWF  x94
04E1E:  MOVLW  01
04E20:  ADDWF  x93,W
04E22:  MOVWF  01
04E24:  MOVLW  00
04E26:  ADDWFC x94,W
04E28:  MOVWF  03
04E2A:  MOVF   01,W
04E2C:  ADDLW  3E
04E2E:  MOVWF  01
04E30:  MOVLW  01
04E32:  ADDWFC 03,F
04E34:  MOVF   01,W
04E36:  ADDLW  2D
04E38:  MOVWF  FE9
04E3A:  MOVLW  00
04E3C:  ADDWFC 03,W
04E3E:  MOVWF  FEA
04E40:  MOVF   FEF,W
04E42:  SUBLW  04
04E44:  BZ    4E9E
04E46:  CLRF   1B
04E48:  BTFSC  FF2.7
04E4A:  BSF    1B.7
04E4C:  BCF    FF2.7
04E4E:  MOVLB  7
04E50:  CLRF   x0B
04E52:  MOVFF  68F,70A
04E56:  CLRF   x0D
04E58:  MOVLW  2F
04E5A:  MOVWF  x0C
04E5C:  MOVLB  0
04E5E:  CALL   035E
04E62:  BTFSC  1B.7
04E64:  BSF    FF2.7
04E66:  MOVF   01,W
04E68:  ADDLW  4C
04E6A:  MOVLB  6
04E6C:  MOVWF  x95
04E6E:  MOVLW  01
04E70:  ADDWFC 02,W
04E72:  MOVWF  x96
04E74:  MOVLW  01
04E76:  ADDWF  x95,W
04E78:  MOVWF  01
04E7A:  MOVLW  00
04E7C:  ADDWFC x96,W
04E7E:  MOVWF  03
04E80:  MOVF   01,W
04E82:  ADDLW  3E
04E84:  MOVWF  01
04E86:  MOVLW  01
04E88:  ADDWFC 03,F
04E8A:  MOVF   01,W
04E8C:  ADDLW  2D
04E8E:  MOVWF  FE9
04E90:  MOVLW  00
04E92:  ADDWFC 03,W
04E94:  MOVWF  FEA
04E96:  MOVF   FEF,W
04E98:  SUBLW  03
04E9A:  BTFSS  FD8.2
04E9C:  BRA    5058
04E9E:  CLRF   1B
04EA0:  BTFSC  FF2.7
04EA2:  BSF    1B.7
04EA4:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
04EA6:  MOVLB  7
04EA8:  CLRF   x0B
04EAA:  MOVFF  68F,70A
04EAE:  CLRF   x0D
04EB0:  MOVLW  2F
04EB2:  MOVWF  x0C
04EB4:  MOVLB  0
04EB6:  CALL   035E
04EBA:  BTFSC  1B.7
04EBC:  BSF    FF2.7
04EBE:  MOVF   01,W
04EC0:  ADDLW  4C
04EC2:  MOVLB  6
04EC4:  MOVWF  x91
04EC6:  MOVLW  01
04EC8:  ADDWFC 02,W
04ECA:  MOVWF  x92
04ECC:  MOVLW  01
04ECE:  ADDWF  x91,W
04ED0:  MOVWF  01
04ED2:  MOVLW  00
04ED4:  ADDWFC x92,W
04ED6:  MOVWF  03
04ED8:  MOVF   01,W
04EDA:  ADDLW  3E
04EDC:  MOVWF  01
04EDE:  MOVLW  01
04EE0:  ADDWFC 03,F
04EE2:  MOVF   01,W
04EE4:  ADDLW  26
04EE6:  MOVWF  FE9
04EE8:  MOVLW  00
04EEA:  ADDWFC 03,W
04EEC:  MOVWF  FEA
04EEE:  MOVF   FEF,F
04EF0:  BTFSC  FD8.2
04EF2:  BRA    5006
04EF4:  CLRF   1B
04EF6:  BTFSC  FF2.7
04EF8:  BSF    1B.7
04EFA:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04EFC:  MOVLB  7
04EFE:  CLRF   x0B
04F00:  MOVFF  68F,70A
04F04:  CLRF   x0D
04F06:  MOVLW  2F
04F08:  MOVWF  x0C
04F0A:  MOVLB  0
04F0C:  CALL   035E
04F10:  BTFSC  1B.7
04F12:  BSF    FF2.7
04F14:  MOVF   01,W
04F16:  ADDLW  4C
04F18:  MOVLB  6
04F1A:  MOVWF  x91
04F1C:  MOVLW  01
04F1E:  ADDWFC 02,W
04F20:  MOVWF  x92
04F22:  MOVLW  01
04F24:  ADDWF  x91,W
04F26:  MOVWF  01
04F28:  MOVLW  00
04F2A:  ADDWFC x92,W
04F2C:  MOVWF  03
04F2E:  MOVF   01,W
04F30:  ADDLW  3E
04F32:  MOVWF  01
04F34:  MOVLW  01
04F36:  ADDWFC 03,F
04F38:  MOVF   01,W
04F3A:  ADDLW  2A
04F3C:  MOVWF  FE9
04F3E:  MOVLW  00
04F40:  ADDWFC 03,W
04F42:  MOVWF  FEA
04F44:  CLRF   FEF
04F46:  CLRF   1B
04F48:  BTFSC  FF2.7
04F4A:  BSF    1B.7
04F4C:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
04F4E:  MOVLB  7
04F50:  CLRF   x0B
04F52:  MOVFF  68F,70A
04F56:  CLRF   x0D
04F58:  MOVLW  2F
04F5A:  MOVWF  x0C
04F5C:  MOVLB  0
04F5E:  CALL   035E
04F62:  BTFSC  1B.7
04F64:  BSF    FF2.7
04F66:  MOVF   01,W
04F68:  ADDLW  4C
04F6A:  MOVLB  6
04F6C:  MOVWF  x91
04F6E:  MOVLW  01
04F70:  ADDWFC 02,W
04F72:  MOVWF  x92
04F74:  MOVLW  01
04F76:  ADDWF  x91,W
04F78:  MOVWF  01
04F7A:  MOVLW  00
04F7C:  ADDWFC x92,W
04F7E:  MOVWF  03
04F80:  MOVF   01,W
04F82:  ADDLW  3E
04F84:  MOVWF  01
04F86:  MOVLW  01
04F88:  ADDWFC 03,F
04F8A:  MOVF   01,W
04F8C:  ADDLW  2D
04F8E:  MOVWF  FE9
04F90:  MOVLW  00
04F92:  ADDWFC 03,W
04F94:  MOVWF  FEA
04F96:  MOVLW  03
04F98:  MOVWF  FEF
04F9A:  CLRF   1B
04F9C:  BTFSC  FF2.7
04F9E:  BSF    1B.7
04FA0:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04FA2:  MOVLB  7
04FA4:  CLRF   x0B
04FA6:  MOVFF  68F,70A
04FAA:  CLRF   x0D
04FAC:  MOVLW  2F
04FAE:  MOVWF  x0C
04FB0:  MOVLB  0
04FB2:  CALL   035E
04FB6:  BTFSC  1B.7
04FB8:  BSF    FF2.7
04FBA:  MOVF   01,W
04FBC:  ADDLW  4C
04FBE:  MOVLB  6
04FC0:  MOVWF  x91
04FC2:  MOVLW  01
04FC4:  ADDWFC 02,W
04FC6:  MOVWF  x92
04FC8:  MOVLW  01
04FCA:  ADDWF  x91,W
04FCC:  MOVWF  01
04FCE:  MOVLW  00
04FD0:  ADDWFC x92,W
04FD2:  MOVWF  03
04FD4:  MOVF   01,W
04FD6:  ADDLW  3E
04FD8:  MOVWF  01
04FDA:  MOVLW  01
04FDC:  ADDWFC 03,F
04FDE:  MOVF   01,W
04FE0:  ADDLW  29
04FE2:  MOVWF  FE9
04FE4:  MOVLW  00
04FE6:  ADDWFC 03,W
04FE8:  MOVWF  FEA
04FEA:  BCF    FD8.0
04FEC:  RLCF   FEF,W
04FEE:  CLRF   03
04FF0:  MOVLB  0
04FF2:  CALL   0172
04FF6:  TBLRD*+
04FF8:  MOVFF  FF5,03
04FFC:  MOVLB  5
04FFE:  ANDWF  x7F,F
05000:  MOVF   03,W
05002:  ANDWF  x80,F
05004:  MOVLB  6
05006:  CLRF   1B
05008:  BTFSC  FF2.7
0500A:  BSF    1B.7
0500C:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
0500E:  MOVLB  7
05010:  CLRF   x0B
05012:  MOVFF  68F,70A
05016:  CLRF   x0D
05018:  MOVLW  2F
0501A:  MOVWF  x0C
0501C:  MOVLB  0
0501E:  CALL   035E
05022:  BTFSC  1B.7
05024:  BSF    FF2.7
05026:  MOVF   01,W
05028:  ADDLW  4C
0502A:  MOVLB  6
0502C:  MOVWF  x91
0502E:  MOVLW  01
05030:  ADDWFC 02,W
05032:  MOVWF  x92
05034:  MOVLW  01
05036:  ADDWF  x91,W
05038:  MOVWF  01
0503A:  MOVLW  00
0503C:  ADDWFC x92,W
0503E:  MOVWF  03
05040:  MOVF   01,W
05042:  ADDLW  3E
05044:  MOVWF  01
05046:  MOVLW  01
05048:  ADDWFC 03,F
0504A:  MOVF   01,W
0504C:  ADDLW  27
0504E:  MOVWF  FE9
05050:  MOVLW  00
05052:  ADDWFC 03,W
05054:  MOVWF  FEA
05056:  BCF    FEF.0
....................             } 
....................             
....................             break; 
05058:  MOVLB  0
0505A:  BRA    505C
....................    } 
....................    } 
0505C:  MOVLB  6
0505E:  INCF   x8F,F
05060:  GOTO   3CAC
....................    if(update_dimmers) 
05064:  BTFSS  x90.0
05066:  BRA    5070
....................       org(); 
05068:  MOVLB  0
0506A:  CALL   34D8
0506E:  MOVLB  6
.................... } 
05070:  MOVLB  0
05072:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
05096:  MOVLB  6
05098:  CLRF   xA2
0509A:  MOVF   xA2,W
0509C:  SUBLW  07
0509E:  BNC   50BE
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
050A0:  CLRF   03
050A2:  MOVF   xA2,W
050A4:  ADDWF  x9F,W
050A6:  MOVWF  FE9
050A8:  MOVF   xA0,W
050AA:  ADDWFC 03,W
050AC:  MOVWF  FEA
050AE:  MOVF   xA1,W
050B0:  SUBWF  FEF,W
050B2:  BNZ   50BA
050B4:  MOVLW  01
050B6:  MOVWF  01
050B8:  BRA    50C2
....................    } 
050BA:  INCF   xA2,F
050BC:  BRA    509A
....................  
....................    return false; 
050BE:  MOVLW  00
050C0:  MOVWF  01
.................... } 
050C2:  MOVLB  0
050C4:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
050C6:  MOVLB  6
050C8:  CLRF   x9A
050CA:  MOVLB  1
050CC:  MOVF   x3F,W
050CE:  MOVLB  6
050D0:  SUBWF  x9A,W
050D2:  BTFSC  FD8.0
050D4:  GOTO   5AC8
050D8:  CLRF   1B
050DA:  BTFSC  FF2.7
050DC:  BSF    1B.7
050DE:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
050E0:  MOVLB  7
050E2:  CLRF   x0B
050E4:  MOVFF  69A,70A
050E8:  CLRF   x0D
050EA:  MOVLW  2F
050EC:  MOVWF  x0C
050EE:  MOVLB  0
050F0:  CALL   035E
050F4:  BTFSC  1B.7
050F6:  BSF    FF2.7
050F8:  MOVFF  02,03
050FC:  MOVF   01,W
050FE:  ADDLW  8A
05100:  MOVWF  01
05102:  MOVLW  02
05104:  ADDWFC 03,F
05106:  MOVFF  01,FE9
0510A:  MOVFF  03,FEA
0510E:  MOVF   FEF,W
05110:  XORLW  65
05112:  BZ    5124
05114:  XORLW  01
05116:  BTFSC  FD8.2
05118:  BRA    5456
0511A:  XORLW  02
0511C:  BTFSC  FD8.2
0511E:  BRA    5674
05120:  GOTO   5ABE
....................          case dimmer: 
05124:  CLRF   1B
05126:  BTFSC  FF2.7
05128:  BSF    1B.7
0512A:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
0512C:  MOVLB  7
0512E:  CLRF   x0B
05130:  MOVFF  69A,70A
05134:  CLRF   x0D
05136:  MOVLW  2F
05138:  MOVWF  x0C
0513A:  MOVLB  0
0513C:  CALL   035E
05140:  BTFSC  1B.7
05142:  BSF    FF2.7
05144:  MOVF   01,W
05146:  ADDLW  4C
05148:  MOVLB  6
0514A:  MOVWF  x9B
0514C:  MOVLW  01
0514E:  ADDWFC 02,W
05150:  MOVWF  x9C
05152:  MOVLW  01
05154:  ADDWF  x9B,W
05156:  MOVWF  01
05158:  MOVLW  00
0515A:  ADDWFC x9C,W
0515C:  MOVWF  03
0515E:  MOVF   01,W
05160:  ADDLW  3E
05162:  MOVWF  01
05164:  MOVLW  01
05166:  ADDWFC 03,F
05168:  MOVF   01,W
0516A:  ADDLW  14
0516C:  MOVWF  01
0516E:  MOVLW  00
05170:  ADDWFC 03,F
05172:  MOVFF  01,69D
05176:  MOVFF  03,69E
0517A:  MOVFF  03,6A0
0517E:  MOVFF  01,69F
05182:  MOVFF  698,6A1
05186:  MOVLB  0
05188:  RCALL  5096
0518A:  MOVF   01,F
0518C:  BZ    5238
0518E:  CLRF   1B
05190:  BTFSC  FF2.7
05192:  BSF    1B.7
05194:  BCF    FF2.7
....................          { 
....................           //  printf("DIM"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
05196:  MOVLB  7
05198:  CLRF   x0B
0519A:  MOVFF  69A,70A
0519E:  CLRF   x0D
051A0:  MOVLW  2F
051A2:  MOVWF  x0C
051A4:  MOVLB  0
051A6:  CALL   035E
051AA:  BTFSC  1B.7
051AC:  BSF    FF2.7
051AE:  MOVF   01,W
051B0:  ADDLW  4C
051B2:  MOVLB  6
051B4:  MOVWF  x9B
051B6:  MOVLW  01
051B8:  ADDWFC 02,W
051BA:  MOVWF  x9C
051BC:  MOVLW  01
051BE:  ADDWF  x9B,W
051C0:  MOVWF  01
051C2:  MOVLW  00
051C4:  ADDWFC x9C,W
051C6:  MOVWF  03
051C8:  MOVF   01,W
051CA:  ADDLW  3E
051CC:  MOVWF  01
051CE:  MOVLW  01
051D0:  ADDWFC 03,F
051D2:  MOVF   01,W
051D4:  ADDLW  1C
051D6:  MOVWF  FE9
051D8:  MOVLW  00
051DA:  ADDWFC 03,W
051DC:  MOVWF  FEA
051DE:  MOVFF  699,FEF
051E2:  CLRF   1B
051E4:  BTFSC  FF2.7
051E6:  BSF    1B.7
051E8:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
051EA:  MOVLB  7
051EC:  CLRF   x0B
051EE:  MOVFF  69A,70A
051F2:  CLRF   x0D
051F4:  MOVLW  2F
051F6:  MOVWF  x0C
051F8:  MOVLB  0
051FA:  CALL   035E
051FE:  BTFSC  1B.7
05200:  BSF    FF2.7
05202:  MOVF   01,W
05204:  ADDLW  4C
05206:  MOVLB  6
05208:  MOVWF  x9B
0520A:  MOVLW  01
0520C:  ADDWFC 02,W
0520E:  MOVWF  x9C
05210:  MOVLW  01
05212:  ADDWF  x9B,W
05214:  MOVWF  01
05216:  MOVLW  00
05218:  ADDWFC x9C,W
0521A:  MOVWF  03
0521C:  MOVF   01,W
0521E:  ADDLW  3E
05220:  MOVWF  01
05222:  MOVLW  01
05224:  ADDWFC 03,F
05226:  MOVF   01,W
05228:  ADDLW  1D
0522A:  MOVWF  FE9
0522C:  MOVLW  00
0522E:  ADDWFC 03,W
05230:  MOVWF  FEA
05232:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
05234:  BRA    5452
05236:  MOVLB  0
05238:  CLRF   1B
0523A:  BTFSC  FF2.7
0523C:  BSF    1B.7
0523E:  BCF    FF2.7
05240:  MOVLB  7
05242:  CLRF   x0B
05244:  MOVFF  69A,70A
05248:  CLRF   x0D
0524A:  MOVLW  2F
0524C:  MOVWF  x0C
0524E:  MOVLB  0
05250:  CALL   035E
05254:  BTFSC  1B.7
05256:  BSF    FF2.7
05258:  MOVF   01,W
0525A:  ADDLW  4C
0525C:  MOVLB  6
0525E:  MOVWF  x9B
05260:  MOVLW  01
05262:  ADDWFC 02,W
05264:  MOVWF  x9C
05266:  MOVLW  01
05268:  ADDWF  x9B,W
0526A:  MOVWF  01
0526C:  MOVLW  00
0526E:  ADDWFC x9C,W
05270:  MOVWF  03
05272:  MOVF   01,W
05274:  ADDLW  3E
05276:  MOVWF  01
05278:  MOVLW  01
0527A:  ADDWFC 03,F
0527C:  MOVFF  01,69D
05280:  MOVFF  03,69E
05284:  MOVFF  03,6A0
05288:  MOVFF  01,69F
0528C:  MOVFF  698,6A1
05290:  MOVLB  0
05292:  RCALL  5096
05294:  MOVF   01,F
05296:  BZ    5342
05298:  CLRF   1B
0529A:  BTFSC  FF2.7
0529C:  BSF    1B.7
0529E:  BCF    FF2.7
....................          { 
....................         // printf("DIM ON"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
052A0:  MOVLB  7
052A2:  CLRF   x0B
052A4:  MOVFF  69A,70A
052A8:  CLRF   x0D
052AA:  MOVLW  2F
052AC:  MOVWF  x0C
052AE:  MOVLB  0
052B0:  CALL   035E
052B4:  BTFSC  1B.7
052B6:  BSF    FF2.7
052B8:  MOVF   01,W
052BA:  ADDLW  4C
052BC:  MOVLB  6
052BE:  MOVWF  x9B
052C0:  MOVLW  01
052C2:  ADDWFC 02,W
052C4:  MOVWF  x9C
052C6:  MOVLW  01
052C8:  ADDWF  x9B,W
052CA:  MOVWF  01
052CC:  MOVLW  00
052CE:  ADDWFC x9C,W
052D0:  MOVWF  03
052D2:  MOVF   01,W
052D4:  ADDLW  3E
052D6:  MOVWF  01
052D8:  MOVLW  01
052DA:  ADDWFC 03,F
052DC:  MOVF   01,W
052DE:  ADDLW  08
052E0:  MOVWF  FE9
052E2:  MOVLW  00
052E4:  ADDWFC 03,W
052E6:  MOVWF  FEA
052E8:  MOVFF  699,FEF
052EC:  CLRF   1B
052EE:  BTFSC  FF2.7
052F0:  BSF    1B.7
052F2:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
052F4:  MOVLB  7
052F6:  CLRF   x0B
052F8:  MOVFF  69A,70A
052FC:  CLRF   x0D
052FE:  MOVLW  2F
05300:  MOVWF  x0C
05302:  MOVLB  0
05304:  CALL   035E
05308:  BTFSC  1B.7
0530A:  BSF    FF2.7
0530C:  MOVF   01,W
0530E:  ADDLW  4C
05310:  MOVLB  6
05312:  MOVWF  x9B
05314:  MOVLW  01
05316:  ADDWFC 02,W
05318:  MOVWF  x9C
0531A:  MOVLW  01
0531C:  ADDWF  x9B,W
0531E:  MOVWF  01
05320:  MOVLW  00
05322:  ADDWFC x9C,W
05324:  MOVWF  03
05326:  MOVF   01,W
05328:  ADDLW  3E
0532A:  MOVWF  01
0532C:  MOVLW  01
0532E:  ADDWFC 03,F
05330:  MOVF   01,W
05332:  ADDLW  09
05334:  MOVWF  FE9
05336:  MOVLW  00
05338:  ADDWFC 03,W
0533A:  MOVWF  FEA
0533C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
0533E:  BRA    5452
05340:  MOVLB  0
05342:  CLRF   1B
05344:  BTFSC  FF2.7
05346:  BSF    1B.7
05348:  BCF    FF2.7
0534A:  MOVLB  7
0534C:  CLRF   x0B
0534E:  MOVFF  69A,70A
05352:  CLRF   x0D
05354:  MOVLW  2F
05356:  MOVWF  x0C
05358:  MOVLB  0
0535A:  CALL   035E
0535E:  BTFSC  1B.7
05360:  BSF    FF2.7
05362:  MOVF   01,W
05364:  ADDLW  4C
05366:  MOVLB  6
05368:  MOVWF  x9B
0536A:  MOVLW  01
0536C:  ADDWFC 02,W
0536E:  MOVWF  x9C
05370:  MOVLW  01
05372:  ADDWF  x9B,W
05374:  MOVWF  01
05376:  MOVLW  00
05378:  ADDWFC x9C,W
0537A:  MOVWF  03
0537C:  MOVF   01,W
0537E:  ADDLW  3E
05380:  MOVWF  01
05382:  MOVLW  01
05384:  ADDWFC 03,F
05386:  MOVF   01,W
05388:  ADDLW  0A
0538A:  MOVWF  01
0538C:  MOVLW  00
0538E:  ADDWFC 03,F
05390:  MOVFF  01,69D
05394:  MOVFF  03,69E
05398:  MOVFF  03,6A0
0539C:  MOVFF  01,69F
053A0:  MOVFF  698,6A1
053A4:  MOVLB  0
053A6:  RCALL  5096
053A8:  MOVF   01,F
053AA:  BZ    5454
053AC:  CLRF   1B
053AE:  BTFSC  FF2.7
053B0:  BSF    1B.7
053B2:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
053B4:  MOVLB  7
053B6:  CLRF   x0B
053B8:  MOVFF  69A,70A
053BC:  CLRF   x0D
053BE:  MOVLW  2F
053C0:  MOVWF  x0C
053C2:  MOVLB  0
053C4:  CALL   035E
053C8:  BTFSC  1B.7
053CA:  BSF    FF2.7
053CC:  MOVF   01,W
053CE:  ADDLW  4C
053D0:  MOVLB  6
053D2:  MOVWF  x9B
053D4:  MOVLW  01
053D6:  ADDWFC 02,W
053D8:  MOVWF  x9C
053DA:  MOVLW  01
053DC:  ADDWF  x9B,W
053DE:  MOVWF  01
053E0:  MOVLW  00
053E2:  ADDWFC x9C,W
053E4:  MOVWF  03
053E6:  MOVF   01,W
053E8:  ADDLW  3E
053EA:  MOVWF  01
053EC:  MOVLW  01
053EE:  ADDWFC 03,F
053F0:  MOVF   01,W
053F2:  ADDLW  12
053F4:  MOVWF  FE9
053F6:  MOVLW  00
053F8:  ADDWFC 03,W
053FA:  MOVWF  FEA
053FC:  MOVFF  699,FEF
05400:  CLRF   1B
05402:  BTFSC  FF2.7
05404:  BSF    1B.7
05406:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
05408:  MOVLB  7
0540A:  CLRF   x0B
0540C:  MOVFF  69A,70A
05410:  CLRF   x0D
05412:  MOVLW  2F
05414:  MOVWF  x0C
05416:  MOVLB  0
05418:  CALL   035E
0541C:  BTFSC  1B.7
0541E:  BSF    FF2.7
05420:  MOVF   01,W
05422:  ADDLW  4C
05424:  MOVLB  6
05426:  MOVWF  x9B
05428:  MOVLW  01
0542A:  ADDWFC 02,W
0542C:  MOVWF  x9C
0542E:  MOVLW  01
05430:  ADDWF  x9B,W
05432:  MOVWF  01
05434:  MOVLW  00
05436:  ADDWFC x9C,W
05438:  MOVWF  03
0543A:  MOVF   01,W
0543C:  ADDLW  3E
0543E:  MOVWF  01
05440:  MOVLW  01
05442:  ADDWFC 03,F
05444:  MOVF   01,W
05446:  ADDLW  13
05448:  MOVWF  FE9
0544A:  MOVLW  00
0544C:  ADDWFC 03,W
0544E:  MOVWF  FEA
05450:  BSF    FEF.0
05452:  MOVLB  0
....................          } 
....................  
....................          break; 
05454:  BRA    5AC0
....................          case _on_off: 
05456:  CLRF   1B
05458:  BTFSC  FF2.7
0545A:  BSF    1B.7
0545C:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
0545E:  MOVLB  7
05460:  CLRF   x0B
05462:  MOVFF  69A,70A
05466:  CLRF   x0D
05468:  MOVLW  2F
0546A:  MOVWF  x0C
0546C:  MOVLB  0
0546E:  CALL   035E
05472:  BTFSC  1B.7
05474:  BSF    FF2.7
05476:  MOVF   01,W
05478:  ADDLW  4C
0547A:  MOVLB  6
0547C:  MOVWF  x9B
0547E:  MOVLW  01
05480:  ADDWFC 02,W
05482:  MOVWF  x9C
05484:  MOVLW  01
05486:  ADDWF  x9B,W
05488:  MOVWF  01
0548A:  MOVLW  00
0548C:  ADDWFC x9C,W
0548E:  MOVWF  03
05490:  MOVF   01,W
05492:  ADDLW  3E
05494:  MOVWF  01
05496:  MOVLW  01
05498:  ADDWFC 03,F
0549A:  MOVFF  01,69D
0549E:  MOVFF  03,69E
054A2:  MOVFF  03,6A0
054A6:  MOVFF  01,69F
054AA:  MOVFF  698,6A1
054AE:  MOVLB  0
054B0:  RCALL  5096
054B2:  MOVF   01,F
054B4:  BZ    5560
054B6:  CLRF   1B
054B8:  BTFSC  FF2.7
054BA:  BSF    1B.7
054BC:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
054BE:  MOVLB  7
054C0:  CLRF   x0B
054C2:  MOVFF  69A,70A
054C6:  CLRF   x0D
054C8:  MOVLW  2F
054CA:  MOVWF  x0C
054CC:  MOVLB  0
054CE:  CALL   035E
054D2:  BTFSC  1B.7
054D4:  BSF    FF2.7
054D6:  MOVF   01,W
054D8:  ADDLW  4C
054DA:  MOVLB  6
054DC:  MOVWF  x9B
054DE:  MOVLW  01
054E0:  ADDWFC 02,W
054E2:  MOVWF  x9C
054E4:  MOVLW  01
054E6:  ADDWF  x9B,W
054E8:  MOVWF  01
054EA:  MOVLW  00
054EC:  ADDWFC x9C,W
054EE:  MOVWF  03
054F0:  MOVF   01,W
054F2:  ADDLW  3E
054F4:  MOVWF  01
054F6:  MOVLW  01
054F8:  ADDWFC 03,F
054FA:  MOVF   01,W
054FC:  ADDLW  08
054FE:  MOVWF  FE9
05500:  MOVLW  00
05502:  ADDWFC 03,W
05504:  MOVWF  FEA
05506:  MOVFF  699,FEF
0550A:  CLRF   1B
0550C:  BTFSC  FF2.7
0550E:  BSF    1B.7
05510:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
05512:  MOVLB  7
05514:  CLRF   x0B
05516:  MOVFF  69A,70A
0551A:  CLRF   x0D
0551C:  MOVLW  2F
0551E:  MOVWF  x0C
05520:  MOVLB  0
05522:  CALL   035E
05526:  BTFSC  1B.7
05528:  BSF    FF2.7
0552A:  MOVF   01,W
0552C:  ADDLW  4C
0552E:  MOVLB  6
05530:  MOVWF  x9B
05532:  MOVLW  01
05534:  ADDWFC 02,W
05536:  MOVWF  x9C
05538:  MOVLW  01
0553A:  ADDWF  x9B,W
0553C:  MOVWF  01
0553E:  MOVLW  00
05540:  ADDWFC x9C,W
05542:  MOVWF  03
05544:  MOVF   01,W
05546:  ADDLW  3E
05548:  MOVWF  01
0554A:  MOVLW  01
0554C:  ADDWFC 03,F
0554E:  MOVF   01,W
05550:  ADDLW  09
05552:  MOVWF  FE9
05554:  MOVLW  00
05556:  ADDWFC 03,W
05558:  MOVWF  FEA
0555A:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
0555C:  BRA    5670
0555E:  MOVLB  0
05560:  CLRF   1B
05562:  BTFSC  FF2.7
05564:  BSF    1B.7
05566:  BCF    FF2.7
05568:  MOVLB  7
0556A:  CLRF   x0B
0556C:  MOVFF  69A,70A
05570:  CLRF   x0D
05572:  MOVLW  2F
05574:  MOVWF  x0C
05576:  MOVLB  0
05578:  CALL   035E
0557C:  BTFSC  1B.7
0557E:  BSF    FF2.7
05580:  MOVF   01,W
05582:  ADDLW  4C
05584:  MOVLB  6
05586:  MOVWF  x9B
05588:  MOVLW  01
0558A:  ADDWFC 02,W
0558C:  MOVWF  x9C
0558E:  MOVLW  01
05590:  ADDWF  x9B,W
05592:  MOVWF  01
05594:  MOVLW  00
05596:  ADDWFC x9C,W
05598:  MOVWF  03
0559A:  MOVF   01,W
0559C:  ADDLW  3E
0559E:  MOVWF  01
055A0:  MOVLW  01
055A2:  ADDWFC 03,F
055A4:  MOVF   01,W
055A6:  ADDLW  0A
055A8:  MOVWF  01
055AA:  MOVLW  00
055AC:  ADDWFC 03,F
055AE:  MOVFF  01,69D
055B2:  MOVFF  03,69E
055B6:  MOVFF  03,6A0
055BA:  MOVFF  01,69F
055BE:  MOVFF  698,6A1
055C2:  MOVLB  0
055C4:  RCALL  5096
055C6:  MOVF   01,F
055C8:  BZ    5672
055CA:  CLRF   1B
055CC:  BTFSC  FF2.7
055CE:  BSF    1B.7
055D0:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
055D2:  MOVLB  7
055D4:  CLRF   x0B
055D6:  MOVFF  69A,70A
055DA:  CLRF   x0D
055DC:  MOVLW  2F
055DE:  MOVWF  x0C
055E0:  MOVLB  0
055E2:  CALL   035E
055E6:  BTFSC  1B.7
055E8:  BSF    FF2.7
055EA:  MOVF   01,W
055EC:  ADDLW  4C
055EE:  MOVLB  6
055F0:  MOVWF  x9B
055F2:  MOVLW  01
055F4:  ADDWFC 02,W
055F6:  MOVWF  x9C
055F8:  MOVLW  01
055FA:  ADDWF  x9B,W
055FC:  MOVWF  01
055FE:  MOVLW  00
05600:  ADDWFC x9C,W
05602:  MOVWF  03
05604:  MOVF   01,W
05606:  ADDLW  3E
05608:  MOVWF  01
0560A:  MOVLW  01
0560C:  ADDWFC 03,F
0560E:  MOVF   01,W
05610:  ADDLW  12
05612:  MOVWF  FE9
05614:  MOVLW  00
05616:  ADDWFC 03,W
05618:  MOVWF  FEA
0561A:  MOVFF  699,FEF
0561E:  CLRF   1B
05620:  BTFSC  FF2.7
05622:  BSF    1B.7
05624:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
05626:  MOVLB  7
05628:  CLRF   x0B
0562A:  MOVFF  69A,70A
0562E:  CLRF   x0D
05630:  MOVLW  2F
05632:  MOVWF  x0C
05634:  MOVLB  0
05636:  CALL   035E
0563A:  BTFSC  1B.7
0563C:  BSF    FF2.7
0563E:  MOVF   01,W
05640:  ADDLW  4C
05642:  MOVLB  6
05644:  MOVWF  x9B
05646:  MOVLW  01
05648:  ADDWFC 02,W
0564A:  MOVWF  x9C
0564C:  MOVLW  01
0564E:  ADDWF  x9B,W
05650:  MOVWF  01
05652:  MOVLW  00
05654:  ADDWFC x9C,W
05656:  MOVWF  03
05658:  MOVF   01,W
0565A:  ADDLW  3E
0565C:  MOVWF  01
0565E:  MOVLW  01
05660:  ADDWFC 03,F
05662:  MOVF   01,W
05664:  ADDLW  13
05666:  MOVWF  FE9
05668:  MOVLW  00
0566A:  ADDWFC 03,W
0566C:  MOVWF  FEA
0566E:  BSF    FEF.0
05670:  MOVLB  0
....................          } 
....................  
....................          break; 
05672:  BRA    5AC0
....................          case shutter: 
05674:  CLRF   1B
05676:  BTFSC  FF2.7
05678:  BSF    1B.7
0567A:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
0567C:  MOVLB  7
0567E:  CLRF   x0B
05680:  MOVFF  69A,70A
05684:  CLRF   x0D
05686:  MOVLW  2F
05688:  MOVWF  x0C
0568A:  MOVLB  0
0568C:  CALL   035E
05690:  BTFSC  1B.7
05692:  BSF    FF2.7
05694:  MOVF   01,W
05696:  ADDLW  4C
05698:  MOVLB  6
0569A:  MOVWF  x9B
0569C:  MOVLW  01
0569E:  ADDWFC 02,W
056A0:  MOVWF  x9C
056A2:  MOVLW  01
056A4:  ADDWF  x9B,W
056A6:  MOVWF  01
056A8:  MOVLW  00
056AA:  ADDWFC x9C,W
056AC:  MOVWF  03
056AE:  MOVF   01,W
056B0:  ADDLW  3E
056B2:  MOVWF  01
056B4:  MOVLW  01
056B6:  ADDWFC 03,F
056B8:  MOVFF  01,69D
056BC:  MOVFF  03,69E
056C0:  MOVFF  03,6A0
056C4:  MOVFF  01,69F
056C8:  MOVFF  698,6A1
056CC:  MOVLB  0
056CE:  RCALL  5096
056D0:  MOVF   01,F
056D2:  BZ    577E
056D4:  CLRF   1B
056D6:  BTFSC  FF2.7
056D8:  BSF    1B.7
056DA:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
056DC:  MOVLB  7
056DE:  CLRF   x0B
056E0:  MOVFF  69A,70A
056E4:  CLRF   x0D
056E6:  MOVLW  2F
056E8:  MOVWF  x0C
056EA:  MOVLB  0
056EC:  CALL   035E
056F0:  BTFSC  1B.7
056F2:  BSF    FF2.7
056F4:  MOVF   01,W
056F6:  ADDLW  4C
056F8:  MOVLB  6
056FA:  MOVWF  x9B
056FC:  MOVLW  01
056FE:  ADDWFC 02,W
05700:  MOVWF  x9C
05702:  MOVLW  01
05704:  ADDWF  x9B,W
05706:  MOVWF  01
05708:  MOVLW  00
0570A:  ADDWFC x9C,W
0570C:  MOVWF  03
0570E:  MOVF   01,W
05710:  ADDLW  3E
05712:  MOVWF  01
05714:  MOVLW  01
05716:  ADDWFC 03,F
05718:  MOVF   01,W
0571A:  ADDLW  08
0571C:  MOVWF  FE9
0571E:  MOVLW  00
05720:  ADDWFC 03,W
05722:  MOVWF  FEA
05724:  MOVFF  699,FEF
05728:  CLRF   1B
0572A:  BTFSC  FF2.7
0572C:  BSF    1B.7
0572E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
05730:  MOVLB  7
05732:  CLRF   x0B
05734:  MOVFF  69A,70A
05738:  CLRF   x0D
0573A:  MOVLW  2F
0573C:  MOVWF  x0C
0573E:  MOVLB  0
05740:  CALL   035E
05744:  BTFSC  1B.7
05746:  BSF    FF2.7
05748:  MOVF   01,W
0574A:  ADDLW  4C
0574C:  MOVLB  6
0574E:  MOVWF  x9B
05750:  MOVLW  01
05752:  ADDWFC 02,W
05754:  MOVWF  x9C
05756:  MOVLW  01
05758:  ADDWF  x9B,W
0575A:  MOVWF  01
0575C:  MOVLW  00
0575E:  ADDWFC x9C,W
05760:  MOVWF  03
05762:  MOVF   01,W
05764:  ADDLW  3E
05766:  MOVWF  01
05768:  MOVLW  01
0576A:  ADDWFC 03,F
0576C:  MOVF   01,W
0576E:  ADDLW  09
05770:  MOVWF  FE9
05772:  MOVLW  00
05774:  ADDWFC 03,W
05776:  MOVWF  FEA
05778:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
0577A:  BRA    5ABA
0577C:  MOVLB  0
0577E:  CLRF   1B
05780:  BTFSC  FF2.7
05782:  BSF    1B.7
05784:  BCF    FF2.7
05786:  MOVLB  7
05788:  CLRF   x0B
0578A:  MOVFF  69A,70A
0578E:  CLRF   x0D
05790:  MOVLW  2F
05792:  MOVWF  x0C
05794:  MOVLB  0
05796:  CALL   035E
0579A:  BTFSC  1B.7
0579C:  BSF    FF2.7
0579E:  MOVF   01,W
057A0:  ADDLW  4C
057A2:  MOVLB  6
057A4:  MOVWF  x9B
057A6:  MOVLW  01
057A8:  ADDWFC 02,W
057AA:  MOVWF  x9C
057AC:  MOVLW  01
057AE:  ADDWF  x9B,W
057B0:  MOVWF  01
057B2:  MOVLW  00
057B4:  ADDWFC x9C,W
057B6:  MOVWF  03
057B8:  MOVF   01,W
057BA:  ADDLW  3E
057BC:  MOVWF  01
057BE:  MOVLW  01
057C0:  ADDWFC 03,F
057C2:  MOVF   01,W
057C4:  ADDLW  0A
057C6:  MOVWF  01
057C8:  MOVLW  00
057CA:  ADDWFC 03,F
057CC:  MOVFF  01,69D
057D0:  MOVFF  03,69E
057D4:  MOVFF  03,6A0
057D8:  MOVFF  01,69F
057DC:  MOVFF  698,6A1
057E0:  MOVLB  0
057E2:  RCALL  5096
057E4:  MOVF   01,F
057E6:  BZ    5892
057E8:  CLRF   1B
057EA:  BTFSC  FF2.7
057EC:  BSF    1B.7
057EE:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
057F0:  MOVLB  7
057F2:  CLRF   x0B
057F4:  MOVFF  69A,70A
057F8:  CLRF   x0D
057FA:  MOVLW  2F
057FC:  MOVWF  x0C
057FE:  MOVLB  0
05800:  CALL   035E
05804:  BTFSC  1B.7
05806:  BSF    FF2.7
05808:  MOVF   01,W
0580A:  ADDLW  4C
0580C:  MOVLB  6
0580E:  MOVWF  x9B
05810:  MOVLW  01
05812:  ADDWFC 02,W
05814:  MOVWF  x9C
05816:  MOVLW  01
05818:  ADDWF  x9B,W
0581A:  MOVWF  01
0581C:  MOVLW  00
0581E:  ADDWFC x9C,W
05820:  MOVWF  03
05822:  MOVF   01,W
05824:  ADDLW  3E
05826:  MOVWF  01
05828:  MOVLW  01
0582A:  ADDWFC 03,F
0582C:  MOVF   01,W
0582E:  ADDLW  12
05830:  MOVWF  FE9
05832:  MOVLW  00
05834:  ADDWFC 03,W
05836:  MOVWF  FEA
05838:  MOVFF  699,FEF
0583C:  CLRF   1B
0583E:  BTFSC  FF2.7
05840:  BSF    1B.7
05842:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
05844:  MOVLB  7
05846:  CLRF   x0B
05848:  MOVFF  69A,70A
0584C:  CLRF   x0D
0584E:  MOVLW  2F
05850:  MOVWF  x0C
05852:  MOVLB  0
05854:  CALL   035E
05858:  BTFSC  1B.7
0585A:  BSF    FF2.7
0585C:  MOVF   01,W
0585E:  ADDLW  4C
05860:  MOVLB  6
05862:  MOVWF  x9B
05864:  MOVLW  01
05866:  ADDWFC 02,W
05868:  MOVWF  x9C
0586A:  MOVLW  01
0586C:  ADDWF  x9B,W
0586E:  MOVWF  01
05870:  MOVLW  00
05872:  ADDWFC x9C,W
05874:  MOVWF  03
05876:  MOVF   01,W
05878:  ADDLW  3E
0587A:  MOVWF  01
0587C:  MOVLW  01
0587E:  ADDWFC 03,F
05880:  MOVF   01,W
05882:  ADDLW  13
05884:  MOVWF  FE9
05886:  MOVLW  00
05888:  ADDWFC 03,W
0588A:  MOVWF  FEA
0588C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
0588E:  BRA    5ABA
05890:  MOVLB  0
05892:  CLRF   1B
05894:  BTFSC  FF2.7
05896:  BSF    1B.7
05898:  BCF    FF2.7
0589A:  MOVLB  7
0589C:  CLRF   x0B
0589E:  MOVFF  69A,70A
058A2:  CLRF   x0D
058A4:  MOVLW  2F
058A6:  MOVWF  x0C
058A8:  MOVLB  0
058AA:  CALL   035E
058AE:  BTFSC  1B.7
058B0:  BSF    FF2.7
058B2:  MOVF   01,W
058B4:  ADDLW  4C
058B6:  MOVLB  6
058B8:  MOVWF  x9B
058BA:  MOVLW  01
058BC:  ADDWFC 02,W
058BE:  MOVWF  x9C
058C0:  MOVLW  01
058C2:  ADDWF  x9B,W
058C4:  MOVWF  01
058C6:  MOVLW  00
058C8:  ADDWFC x9C,W
058CA:  MOVWF  03
058CC:  MOVF   01,W
058CE:  ADDLW  3E
058D0:  MOVWF  01
058D2:  MOVLW  01
058D4:  ADDWFC 03,F
058D6:  MOVF   01,W
058D8:  ADDLW  14
058DA:  MOVWF  01
058DC:  MOVLW  00
058DE:  ADDWFC 03,F
058E0:  MOVFF  01,69D
058E4:  MOVFF  03,69E
058E8:  MOVFF  03,6A0
058EC:  MOVFF  01,69F
058F0:  MOVFF  698,6A1
058F4:  MOVLB  0
058F6:  CALL   5096
058FA:  MOVF   01,F
058FC:  BZ    59A8
058FE:  CLRF   1B
05900:  BTFSC  FF2.7
05902:  BSF    1B.7
05904:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
05906:  MOVLB  7
05908:  CLRF   x0B
0590A:  MOVFF  69A,70A
0590E:  CLRF   x0D
05910:  MOVLW  2F
05912:  MOVWF  x0C
05914:  MOVLB  0
05916:  CALL   035E
0591A:  BTFSC  1B.7
0591C:  BSF    FF2.7
0591E:  MOVF   01,W
05920:  ADDLW  4C
05922:  MOVLB  6
05924:  MOVWF  x9B
05926:  MOVLW  01
05928:  ADDWFC 02,W
0592A:  MOVWF  x9C
0592C:  MOVLW  01
0592E:  ADDWF  x9B,W
05930:  MOVWF  01
05932:  MOVLW  00
05934:  ADDWFC x9C,W
05936:  MOVWF  03
05938:  MOVF   01,W
0593A:  ADDLW  3E
0593C:  MOVWF  01
0593E:  MOVLW  01
05940:  ADDWFC 03,F
05942:  MOVF   01,W
05944:  ADDLW  1C
05946:  MOVWF  FE9
05948:  MOVLW  00
0594A:  ADDWFC 03,W
0594C:  MOVWF  FEA
0594E:  MOVFF  699,FEF
05952:  CLRF   1B
05954:  BTFSC  FF2.7
05956:  BSF    1B.7
05958:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
0595A:  MOVLB  7
0595C:  CLRF   x0B
0595E:  MOVFF  69A,70A
05962:  CLRF   x0D
05964:  MOVLW  2F
05966:  MOVWF  x0C
05968:  MOVLB  0
0596A:  CALL   035E
0596E:  BTFSC  1B.7
05970:  BSF    FF2.7
05972:  MOVF   01,W
05974:  ADDLW  4C
05976:  MOVLB  6
05978:  MOVWF  x9B
0597A:  MOVLW  01
0597C:  ADDWFC 02,W
0597E:  MOVWF  x9C
05980:  MOVLW  01
05982:  ADDWF  x9B,W
05984:  MOVWF  01
05986:  MOVLW  00
05988:  ADDWFC x9C,W
0598A:  MOVWF  03
0598C:  MOVF   01,W
0598E:  ADDLW  3E
05990:  MOVWF  01
05992:  MOVLW  01
05994:  ADDWFC 03,F
05996:  MOVF   01,W
05998:  ADDLW  1D
0599A:  MOVWF  FE9
0599C:  MOVLW  00
0599E:  ADDWFC 03,W
059A0:  MOVWF  FEA
059A2:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
059A4:  BRA    5ABA
059A6:  MOVLB  0
059A8:  CLRF   1B
059AA:  BTFSC  FF2.7
059AC:  BSF    1B.7
059AE:  BCF    FF2.7
059B0:  MOVLB  7
059B2:  CLRF   x0B
059B4:  MOVFF  69A,70A
059B8:  CLRF   x0D
059BA:  MOVLW  2F
059BC:  MOVWF  x0C
059BE:  MOVLB  0
059C0:  CALL   035E
059C4:  BTFSC  1B.7
059C6:  BSF    FF2.7
059C8:  MOVF   01,W
059CA:  ADDLW  4C
059CC:  MOVLB  6
059CE:  MOVWF  x9B
059D0:  MOVLW  01
059D2:  ADDWFC 02,W
059D4:  MOVWF  x9C
059D6:  MOVLW  01
059D8:  ADDWF  x9B,W
059DA:  MOVWF  01
059DC:  MOVLW  00
059DE:  ADDWFC x9C,W
059E0:  MOVWF  03
059E2:  MOVF   01,W
059E4:  ADDLW  3E
059E6:  MOVWF  01
059E8:  MOVLW  01
059EA:  ADDWFC 03,F
059EC:  MOVF   01,W
059EE:  ADDLW  1E
059F0:  MOVWF  01
059F2:  MOVLW  00
059F4:  ADDWFC 03,F
059F6:  MOVFF  01,69D
059FA:  MOVFF  03,69E
059FE:  MOVFF  03,6A0
05A02:  MOVFF  01,69F
05A06:  MOVFF  698,6A1
05A0A:  MOVLB  0
05A0C:  CALL   5096
05A10:  MOVF   01,F
05A12:  BZ    5ABC
05A14:  CLRF   1B
05A16:  BTFSC  FF2.7
05A18:  BSF    1B.7
05A1A:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
05A1C:  MOVLB  7
05A1E:  CLRF   x0B
05A20:  MOVFF  69A,70A
05A24:  CLRF   x0D
05A26:  MOVLW  2F
05A28:  MOVWF  x0C
05A2A:  MOVLB  0
05A2C:  CALL   035E
05A30:  BTFSC  1B.7
05A32:  BSF    FF2.7
05A34:  MOVF   01,W
05A36:  ADDLW  4C
05A38:  MOVLB  6
05A3A:  MOVWF  x9B
05A3C:  MOVLW  01
05A3E:  ADDWFC 02,W
05A40:  MOVWF  x9C
05A42:  MOVLW  01
05A44:  ADDWF  x9B,W
05A46:  MOVWF  01
05A48:  MOVLW  00
05A4A:  ADDWFC x9C,W
05A4C:  MOVWF  03
05A4E:  MOVF   01,W
05A50:  ADDLW  3E
05A52:  MOVWF  01
05A54:  MOVLW  01
05A56:  ADDWFC 03,F
05A58:  MOVF   01,W
05A5A:  ADDLW  26
05A5C:  MOVWF  FE9
05A5E:  MOVLW  00
05A60:  ADDWFC 03,W
05A62:  MOVWF  FEA
05A64:  MOVFF  699,FEF
05A68:  CLRF   1B
05A6A:  BTFSC  FF2.7
05A6C:  BSF    1B.7
05A6E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
05A70:  MOVLB  7
05A72:  CLRF   x0B
05A74:  MOVFF  69A,70A
05A78:  CLRF   x0D
05A7A:  MOVLW  2F
05A7C:  MOVWF  x0C
05A7E:  MOVLB  0
05A80:  CALL   035E
05A84:  BTFSC  1B.7
05A86:  BSF    FF2.7
05A88:  MOVF   01,W
05A8A:  ADDLW  4C
05A8C:  MOVLB  6
05A8E:  MOVWF  x9B
05A90:  MOVLW  01
05A92:  ADDWFC 02,W
05A94:  MOVWF  x9C
05A96:  MOVLW  01
05A98:  ADDWF  x9B,W
05A9A:  MOVWF  01
05A9C:  MOVLW  00
05A9E:  ADDWFC x9C,W
05AA0:  MOVWF  03
05AA2:  MOVF   01,W
05AA4:  ADDLW  3E
05AA6:  MOVWF  01
05AA8:  MOVLW  01
05AAA:  ADDWFC 03,F
05AAC:  MOVF   01,W
05AAE:  ADDLW  27
05AB0:  MOVWF  FE9
05AB2:  MOVLW  00
05AB4:  ADDWFC 03,W
05AB6:  MOVWF  FEA
05AB8:  BSF    FEF.0
05ABA:  MOVLB  0
....................          } 
....................  
....................          break; 
05ABC:  BRA    5AC0
....................          default: 
....................          break; 
05ABE:  BRA    5AC0
....................       } 
....................    } 
05AC0:  MOVLB  6
05AC2:  INCF   x9A,F
05AC4:  GOTO   50CA
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
05AC8:  CLRF   x9A
05ACA:  MOVLB  1
05ACC:  MOVF   x3E,W
05ACE:  MOVLB  6
05AD0:  SUBWF  x9A,W
05AD2:  BTFSC  FD8.0
05AD4:  BRA    5D50
05AD6:  CLRF   1B
05AD8:  BTFSC  FF2.7
05ADA:  BSF    1B.7
05ADC:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
05ADE:  MOVLB  7
05AE0:  CLRF   x0B
05AE2:  MOVFF  69A,70A
05AE6:  CLRF   x0D
05AE8:  MOVLW  21
05AEA:  MOVWF  x0C
05AEC:  MOVLB  0
05AEE:  CALL   035E
05AF2:  BTFSC  1B.7
05AF4:  BSF    FF2.7
05AF6:  MOVFF  02,03
05AFA:  MOVF   01,W
05AFC:  ADDLW  40
05AFE:  MOVWF  01
05B00:  MOVLW  01
05B02:  ADDWFC 03,F
05B04:  MOVFF  01,FE9
05B08:  MOVFF  03,FEA
05B0C:  MOVF   FEF,W
05B0E:  XORLW  03
05B10:  BZ    5B14
05B12:  BRA    5D4A
....................          
....................           
....................          case timer: 
....................           if(value==1) 
05B14:  MOVLB  6
05B16:  DECFSZ x99,W
05B18:  BRA    5D46
05B1A:  CLRF   1B
05B1C:  BTFSC  FF2.7
05B1E:  BSF    1B.7
05B20:  BCF    FF2.7
....................           { 
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
05B22:  MOVLB  7
05B24:  CLRF   x0B
05B26:  MOVFF  69A,70A
05B2A:  CLRF   x0D
05B2C:  MOVLW  21
05B2E:  MOVWF  x0C
05B30:  MOVLB  0
05B32:  CALL   035E
05B36:  BTFSC  1B.7
05B38:  BSF    FF2.7
05B3A:  MOVF   01,W
05B3C:  ADDLW  02
05B3E:  MOVLB  6
05B40:  MOVWF  x9B
05B42:  MOVLW  00
05B44:  ADDWFC 02,W
05B46:  MOVWF  x9C
05B48:  MOVLW  01
05B4A:  ADDWF  x9B,W
05B4C:  MOVWF  01
05B4E:  MOVLW  00
05B50:  ADDWFC x9C,W
05B52:  MOVWF  03
05B54:  MOVF   01,W
05B56:  ADDLW  3E
05B58:  MOVWF  01
05B5A:  MOVLW  01
05B5C:  ADDWFC 03,F
05B5E:  MOVF   01,W
05B60:  ADDLW  09
05B62:  MOVWF  01
05B64:  MOVLW  00
05B66:  ADDWFC 03,F
05B68:  MOVFF  01,69D
05B6C:  MOVFF  03,69E
05B70:  MOVFF  03,6A0
05B74:  MOVFF  01,69F
05B78:  MOVFF  698,6A1
05B7C:  MOVLB  0
05B7E:  CALL   5096
05B82:  MOVF   01,F
05B84:  BZ    5C32
05B86:  CLRF   1B
05B88:  BTFSC  FF2.7
05B8A:  BSF    1B.7
05B8C:  BCF    FF2.7
....................          {//printf("AKI1"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
05B8E:  MOVLB  7
05B90:  CLRF   x0B
05B92:  MOVFF  69A,70A
05B96:  CLRF   x0D
05B98:  MOVLW  21
05B9A:  MOVWF  x0C
05B9C:  MOVLB  0
05B9E:  CALL   035E
05BA2:  BTFSC  1B.7
05BA4:  BSF    FF2.7
05BA6:  MOVF   01,W
05BA8:  ADDLW  02
05BAA:  MOVLB  6
05BAC:  MOVWF  x9B
05BAE:  MOVLW  00
05BB0:  ADDWFC 02,W
05BB2:  MOVWF  x9C
05BB4:  MOVLW  01
05BB6:  ADDWF  x9B,W
05BB8:  MOVWF  01
05BBA:  MOVLW  00
05BBC:  ADDWFC x9C,W
05BBE:  MOVWF  03
05BC0:  MOVF   01,W
05BC2:  ADDLW  3E
05BC4:  MOVWF  01
05BC6:  MOVLW  01
05BC8:  ADDWFC 03,F
05BCA:  MOVF   01,W
05BCC:  ADDLW  1D
05BCE:  MOVWF  FE9
05BD0:  MOVLW  00
05BD2:  ADDWFC 03,W
05BD4:  MOVWF  FEA
05BD6:  CLRF   FEC
05BD8:  MOVF   FED,F
05BDA:  CLRF   FEF
05BDC:  CLRF   1B
05BDE:  BTFSC  FF2.7
05BE0:  BSF    1B.7
05BE2:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
05BE4:  MOVLB  7
05BE6:  CLRF   x0B
05BE8:  MOVFF  69A,70A
05BEC:  CLRF   x0D
05BEE:  MOVLW  21
05BF0:  MOVWF  x0C
05BF2:  MOVLB  0
05BF4:  CALL   035E
05BF8:  BTFSC  1B.7
05BFA:  BSF    FF2.7
05BFC:  MOVF   01,W
05BFE:  ADDLW  02
05C00:  MOVLB  6
05C02:  MOVWF  x9B
05C04:  MOVLW  00
05C06:  ADDWFC 02,W
05C08:  MOVWF  x9C
05C0A:  MOVLW  01
05C0C:  ADDWF  x9B,W
05C0E:  MOVWF  01
05C10:  MOVLW  00
05C12:  ADDWFC x9C,W
05C14:  MOVWF  03
05C16:  MOVF   01,W
05C18:  ADDLW  3E
05C1A:  MOVWF  01
05C1C:  MOVLW  01
05C1E:  ADDWFC 03,F
05C20:  MOVF   01,W
05C22:  ADDLW  1F
05C24:  MOVWF  FE9
05C26:  MOVLW  00
05C28:  ADDWFC 03,W
05C2A:  MOVWF  FEA
05C2C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
05C2E:  BRA    5D46
05C30:  MOVLB  0
05C32:  CLRF   1B
05C34:  BTFSC  FF2.7
05C36:  BSF    1B.7
05C38:  BCF    FF2.7
05C3A:  MOVLB  7
05C3C:  CLRF   x0B
05C3E:  MOVFF  69A,70A
05C42:  CLRF   x0D
05C44:  MOVLW  21
05C46:  MOVWF  x0C
05C48:  MOVLB  0
05C4A:  CALL   035E
05C4E:  BTFSC  1B.7
05C50:  BSF    FF2.7
05C52:  MOVF   01,W
05C54:  ADDLW  02
05C56:  MOVLB  6
05C58:  MOVWF  x9B
05C5A:  MOVLW  00
05C5C:  ADDWFC 02,W
05C5E:  MOVWF  x9C
05C60:  MOVLW  01
05C62:  ADDWF  x9B,W
05C64:  MOVWF  01
05C66:  MOVLW  00
05C68:  ADDWFC x9C,W
05C6A:  MOVWF  03
05C6C:  MOVF   01,W
05C6E:  ADDLW  3E
05C70:  MOVWF  01
05C72:  MOVLW  01
05C74:  ADDWFC 03,F
05C76:  MOVF   01,W
05C78:  ADDLW  13
05C7A:  MOVWF  01
05C7C:  MOVLW  00
05C7E:  ADDWFC 03,F
05C80:  MOVFF  01,69D
05C84:  MOVFF  03,69E
05C88:  MOVFF  03,6A0
05C8C:  MOVFF  01,69F
05C90:  MOVFF  698,6A1
05C94:  MOVLB  0
05C96:  CALL   5096
05C9A:  MOVF   01,F
05C9C:  BZ    5D48
05C9E:  CLRF   1B
05CA0:  BTFSC  FF2.7
05CA2:  BSF    1B.7
05CA4:  BCF    FF2.7
....................          {//printf("AKI2"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
05CA6:  MOVLB  7
05CA8:  CLRF   x0B
05CAA:  MOVFF  69A,70A
05CAE:  CLRF   x0D
05CB0:  MOVLW  21
05CB2:  MOVWF  x0C
05CB4:  MOVLB  0
05CB6:  CALL   035E
05CBA:  BTFSC  1B.7
05CBC:  BSF    FF2.7
05CBE:  MOVF   01,W
05CC0:  ADDLW  02
05CC2:  MOVLB  6
05CC4:  MOVWF  x9B
05CC6:  MOVLW  00
05CC8:  ADDWFC 02,W
05CCA:  MOVWF  x9C
05CCC:  MOVLW  01
05CCE:  ADDWF  x9B,W
05CD0:  MOVWF  01
05CD2:  MOVLW  00
05CD4:  ADDWFC x9C,W
05CD6:  MOVWF  03
05CD8:  MOVF   01,W
05CDA:  ADDLW  3E
05CDC:  MOVWF  01
05CDE:  MOVLW  01
05CE0:  ADDWFC 03,F
05CE2:  MOVF   01,W
05CE4:  ADDLW  1D
05CE6:  MOVWF  FE9
05CE8:  MOVLW  00
05CEA:  ADDWFC 03,W
05CEC:  MOVWF  FEA
05CEE:  CLRF   FEC
05CF0:  MOVF   FED,F
05CF2:  CLRF   FEF
05CF4:  CLRF   1B
05CF6:  BTFSC  FF2.7
05CF8:  BSF    1B.7
05CFA:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
05CFC:  MOVLB  7
05CFE:  CLRF   x0B
05D00:  MOVFF  69A,70A
05D04:  CLRF   x0D
05D06:  MOVLW  21
05D08:  MOVWF  x0C
05D0A:  MOVLB  0
05D0C:  CALL   035E
05D10:  BTFSC  1B.7
05D12:  BSF    FF2.7
05D14:  MOVF   01,W
05D16:  ADDLW  02
05D18:  MOVLB  6
05D1A:  MOVWF  x9B
05D1C:  MOVLW  00
05D1E:  ADDWFC 02,W
05D20:  MOVWF  x9C
05D22:  MOVLW  01
05D24:  ADDWF  x9B,W
05D26:  MOVWF  01
05D28:  MOVLW  00
05D2A:  ADDWFC x9C,W
05D2C:  MOVWF  03
05D2E:  MOVF   01,W
05D30:  ADDLW  3E
05D32:  MOVWF  01
05D34:  MOVLW  01
05D36:  ADDWFC 03,F
05D38:  MOVF   01,W
05D3A:  ADDLW  1F
05D3C:  MOVWF  FE9
05D3E:  MOVLW  00
05D40:  ADDWFC 03,W
05D42:  MOVWF  FEA
05D44:  BCF    FEF.0
05D46:  MOVLB  0
....................          } 
....................          } 
....................          break; 
05D48:  BRA    5D4A
....................       } 
....................    } 
05D4A:  MOVLB  6
05D4C:  INCF   x9A,F
05D4E:  BRA    5ACA
....................           
.................... } 
05D50:  MOVLB  0
05D52:  GOTO   5D62 (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
05D56:  MOVFF  696,698
05D5A:  MOVFF  697,699
05D5E:  GOTO   50C6
....................    //TODO CAN Sending of values 
.................... } 
05D62:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
05D64:  MOVLB  6
05D66:  CLRF   x8F
05D68:  MOVLB  1
05D6A:  MOVF   x3E,W
05D6C:  MOVLB  6
05D6E:  SUBWF  x8F,W
05D70:  BTFSC  FD8.0
05D72:  GOTO   6CE8
05D76:  CLRF   1B
05D78:  BTFSC  FF2.7
05D7A:  BSF    1B.7
05D7C:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
05D7E:  MOVLB  7
05D80:  CLRF   x0B
05D82:  MOVFF  68F,70A
05D86:  CLRF   x0D
05D88:  MOVLW  21
05D8A:  MOVWF  x0C
05D8C:  MOVLB  0
05D8E:  CALL   035E
05D92:  BTFSC  1B.7
05D94:  BSF    FF2.7
05D96:  MOVFF  02,03
05D9A:  MOVF   01,W
05D9C:  ADDLW  40
05D9E:  MOVWF  01
05DA0:  MOVLW  01
05DA2:  ADDWFC 03,F
05DA4:  MOVFF  01,FE9
05DA8:  MOVFF  03,FEA
05DAC:  MOVF   FEF,W
05DAE:  BZ    5DCA
05DB0:  XORLW  02
05DB2:  BTFSC  FD8.2
05DB4:  BRA    62CE
05DB6:  XORLW  03
05DB8:  BTFSC  FD8.2
05DBA:  GOTO   6626
05DBE:  XORLW  02
05DC0:  BTFSC  FD8.2
05DC2:  GOTO   6980
05DC6:  GOTO   6CDE
....................          case dimmer_switch: 
05DCA:  CLRF   1B
05DCC:  BTFSC  FF2.7
05DCE:  BSF    1B.7
05DD0:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
05DD2:  MOVLB  7
05DD4:  CLRF   x0B
05DD6:  MOVFF  68F,70A
05DDA:  CLRF   x0D
05DDC:  MOVLW  21
05DDE:  MOVWF  x0C
05DE0:  MOVLB  0
05DE2:  CALL   035E
05DE6:  BTFSC  1B.7
05DE8:  BSF    FF2.7
05DEA:  MOVF   01,W
05DEC:  ADDLW  02
05DEE:  MOVLB  6
05DF0:  MOVWF  x90
05DF2:  MOVLW  00
05DF4:  ADDWFC 02,W
05DF6:  MOVWF  x91
05DF8:  MOVLW  01
05DFA:  ADDWF  x90,W
05DFC:  MOVWF  01
05DFE:  MOVLW  00
05E00:  ADDWFC x91,W
05E02:  MOVWF  03
05E04:  MOVF   01,W
05E06:  ADDLW  3E
05E08:  MOVWF  01
05E0A:  MOVLW  01
05E0C:  ADDWFC 03,F
05E0E:  MOVF   01,W
05E10:  ADDLW  02
05E12:  MOVWF  FE9
05E14:  MOVLW  00
05E16:  ADDWFC 03,W
05E18:  MOVWF  FEA
05E1A:  BTFSS  FEF.0
05E1C:  BRA    5F72
05E1E:  CLRF   1B
05E20:  BTFSC  FF2.7
05E22:  BSF    1B.7
05E24:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
05E26:  MOVLB  7
05E28:  CLRF   x0B
05E2A:  MOVFF  68F,70A
05E2E:  CLRF   x0D
05E30:  MOVLW  21
05E32:  MOVWF  x0C
05E34:  MOVLB  0
05E36:  CALL   035E
05E3A:  BTFSC  1B.7
05E3C:  BSF    FF2.7
05E3E:  MOVF   01,W
05E40:  ADDLW  02
05E42:  MOVLB  6
05E44:  MOVWF  x90
05E46:  MOVLW  00
05E48:  ADDWFC 02,W
05E4A:  MOVWF  x91
05E4C:  MOVLW  01
05E4E:  ADDWF  x90,W
05E50:  MOVWF  01
05E52:  MOVLW  00
05E54:  ADDWFC x91,W
05E56:  MOVWF  03
05E58:  MOVF   01,W
05E5A:  ADDLW  3E
05E5C:  MOVWF  01
05E5E:  MOVLW  01
05E60:  ADDWFC 03,F
05E62:  MOVFF  01,FE9
05E66:  MOVFF  03,FEA
05E6A:  MOVFF  FEF,692
05E6E:  CLRF   1B
05E70:  BTFSC  FF2.7
05E72:  BSF    1B.7
05E74:  BCF    FF2.7
05E76:  MOVLB  7
05E78:  CLRF   x0B
05E7A:  MOVFF  68F,70A
05E7E:  CLRF   x0D
05E80:  MOVLW  21
05E82:  MOVWF  x0C
05E84:  MOVLB  0
05E86:  CALL   035E
05E8A:  BTFSC  1B.7
05E8C:  BSF    FF2.7
05E8E:  MOVF   01,W
05E90:  ADDLW  02
05E92:  MOVLB  6
05E94:  MOVWF  x93
05E96:  MOVLW  00
05E98:  ADDWFC 02,W
05E9A:  MOVWF  x94
05E9C:  MOVLW  01
05E9E:  ADDWF  x93,W
05EA0:  MOVWF  01
05EA2:  MOVLW  00
05EA4:  ADDWFC x94,W
05EA6:  MOVWF  03
05EA8:  MOVF   01,W
05EAA:  ADDLW  3E
05EAC:  MOVWF  01
05EAE:  MOVLW  01
05EB0:  ADDWFC 03,F
05EB2:  MOVF   01,W
05EB4:  ADDLW  01
05EB6:  MOVWF  FE9
05EB8:  MOVLW  00
05EBA:  ADDWFC 03,W
05EBC:  MOVWF  FEA
05EBE:  MOVFF  FEF,695
05EC2:  MOVFF  692,696
05EC6:  MOVFF  695,697
05ECA:  MOVLB  0
05ECC:  RCALL  5D56
05ECE:  CLRF   1B
05ED0:  BTFSC  FF2.7
05ED2:  BSF    1B.7
05ED4:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
05ED6:  MOVLB  7
05ED8:  CLRF   x0B
05EDA:  MOVFF  68F,70A
05EDE:  CLRF   x0D
05EE0:  MOVLW  21
05EE2:  MOVWF  x0C
05EE4:  MOVLB  0
05EE6:  CALL   035E
05EEA:  BTFSC  1B.7
05EEC:  BSF    FF2.7
05EEE:  MOVF   01,W
05EF0:  ADDLW  02
05EF2:  MOVLB  6
05EF4:  MOVWF  x90
05EF6:  MOVLW  00
05EF8:  ADDWFC 02,W
05EFA:  MOVWF  x91
05EFC:  MOVLW  01
05EFE:  ADDWF  x90,W
05F00:  MOVWF  01
05F02:  MOVLW  00
05F04:  ADDWFC x91,W
05F06:  MOVWF  03
05F08:  MOVF   01,W
05F0A:  ADDLW  3E
05F0C:  MOVWF  01
05F0E:  MOVLW  01
05F10:  ADDWFC 03,F
05F12:  MOVF   01,W
05F14:  ADDLW  02
05F16:  MOVWF  FE9
05F18:  MOVLW  00
05F1A:  ADDWFC 03,W
05F1C:  MOVWF  FEA
05F1E:  BCF    FEF.0
05F20:  CLRF   1B
05F22:  BTFSC  FF2.7
05F24:  BSF    1B.7
05F26:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
05F28:  MOVLB  7
05F2A:  CLRF   x0B
05F2C:  MOVFF  68F,70A
05F30:  CLRF   x0D
05F32:  MOVLW  21
05F34:  MOVWF  x0C
05F36:  MOVLB  0
05F38:  CALL   035E
05F3C:  BTFSC  1B.7
05F3E:  BSF    FF2.7
05F40:  MOVF   01,W
05F42:  ADDLW  02
05F44:  MOVLB  6
05F46:  MOVWF  x90
05F48:  MOVLW  00
05F4A:  ADDWFC 02,W
05F4C:  MOVWF  x91
05F4E:  MOVLW  01
05F50:  ADDWF  x90,W
05F52:  MOVWF  01
05F54:  MOVLW  00
05F56:  ADDWFC x91,W
05F58:  MOVWF  03
05F5A:  MOVF   01,W
05F5C:  ADDLW  3E
05F5E:  MOVWF  01
05F60:  MOVLW  01
05F62:  ADDWFC 03,F
05F64:  MOVF   01,W
05F66:  ADDLW  01
05F68:  MOVWF  FE9
05F6A:  MOVLW  00
05F6C:  ADDWFC 03,W
05F6E:  MOVWF  FEA
05F70:  CLRF   FEF
05F72:  CLRF   1B
05F74:  BTFSC  FF2.7
05F76:  BSF    1B.7
05F78:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
05F7A:  MOVLB  7
05F7C:  CLRF   x0B
05F7E:  MOVFF  68F,70A
05F82:  CLRF   x0D
05F84:  MOVLW  21
05F86:  MOVWF  x0C
05F88:  MOVLB  0
05F8A:  CALL   035E
05F8E:  BTFSC  1B.7
05F90:  BSF    FF2.7
05F92:  MOVF   01,W
05F94:  ADDLW  02
05F96:  MOVLB  6
05F98:  MOVWF  x90
05F9A:  MOVLW  00
05F9C:  ADDWFC 02,W
05F9E:  MOVWF  x91
05FA0:  MOVLW  01
05FA2:  ADDWF  x90,W
05FA4:  MOVWF  01
05FA6:  MOVLW  00
05FA8:  ADDWFC x91,W
05FAA:  MOVWF  03
05FAC:  MOVF   01,W
05FAE:  ADDLW  3E
05FB0:  MOVWF  01
05FB2:  MOVLW  01
05FB4:  ADDWFC 03,F
05FB6:  MOVF   01,W
05FB8:  ADDLW  05
05FBA:  MOVWF  FE9
05FBC:  MOVLW  00
05FBE:  ADDWFC 03,W
05FC0:  MOVWF  FEA
05FC2:  BTFSS  FEF.0
05FC4:  BRA    611E
05FC6:  CLRF   1B
05FC8:  BTFSC  FF2.7
05FCA:  BSF    1B.7
05FCC:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
05FCE:  MOVLB  7
05FD0:  CLRF   x0B
05FD2:  MOVFF  68F,70A
05FD6:  CLRF   x0D
05FD8:  MOVLW  21
05FDA:  MOVWF  x0C
05FDC:  MOVLB  0
05FDE:  CALL   035E
05FE2:  BTFSC  1B.7
05FE4:  BSF    FF2.7
05FE6:  MOVF   01,W
05FE8:  ADDLW  02
05FEA:  MOVLB  6
05FEC:  MOVWF  x90
05FEE:  MOVLW  00
05FF0:  ADDWFC 02,W
05FF2:  MOVWF  x91
05FF4:  MOVLW  01
05FF6:  ADDWF  x90,W
05FF8:  MOVWF  01
05FFA:  MOVLW  00
05FFC:  ADDWFC x91,W
05FFE:  MOVWF  03
06000:  MOVF   01,W
06002:  ADDLW  3E
06004:  MOVWF  01
06006:  MOVLW  01
06008:  ADDWFC 03,F
0600A:  MOVF   01,W
0600C:  ADDLW  03
0600E:  MOVWF  FE9
06010:  MOVLW  00
06012:  ADDWFC 03,W
06014:  MOVWF  FEA
06016:  MOVFF  FEF,692
0601A:  CLRF   1B
0601C:  BTFSC  FF2.7
0601E:  BSF    1B.7
06020:  BCF    FF2.7
06022:  MOVLB  7
06024:  CLRF   x0B
06026:  MOVFF  68F,70A
0602A:  CLRF   x0D
0602C:  MOVLW  21
0602E:  MOVWF  x0C
06030:  MOVLB  0
06032:  CALL   035E
06036:  BTFSC  1B.7
06038:  BSF    FF2.7
0603A:  MOVF   01,W
0603C:  ADDLW  02
0603E:  MOVLB  6
06040:  MOVWF  x93
06042:  MOVLW  00
06044:  ADDWFC 02,W
06046:  MOVWF  x94
06048:  MOVLW  01
0604A:  ADDWF  x93,W
0604C:  MOVWF  01
0604E:  MOVLW  00
06050:  ADDWFC x94,W
06052:  MOVWF  03
06054:  MOVF   01,W
06056:  ADDLW  3E
06058:  MOVWF  01
0605A:  MOVLW  01
0605C:  ADDWFC 03,F
0605E:  MOVF   01,W
06060:  ADDLW  04
06062:  MOVWF  FE9
06064:  MOVLW  00
06066:  ADDWFC 03,W
06068:  MOVWF  FEA
0606A:  MOVFF  FEF,695
0606E:  MOVFF  692,696
06072:  MOVFF  695,697
06076:  MOVLB  0
06078:  RCALL  5D56
0607A:  CLRF   1B
0607C:  BTFSC  FF2.7
0607E:  BSF    1B.7
06080:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06082:  MOVLB  7
06084:  CLRF   x0B
06086:  MOVFF  68F,70A
0608A:  CLRF   x0D
0608C:  MOVLW  21
0608E:  MOVWF  x0C
06090:  MOVLB  0
06092:  CALL   035E
06096:  BTFSC  1B.7
06098:  BSF    FF2.7
0609A:  MOVF   01,W
0609C:  ADDLW  02
0609E:  MOVLB  6
060A0:  MOVWF  x90
060A2:  MOVLW  00
060A4:  ADDWFC 02,W
060A6:  MOVWF  x91
060A8:  MOVLW  01
060AA:  ADDWF  x90,W
060AC:  MOVWF  01
060AE:  MOVLW  00
060B0:  ADDWFC x91,W
060B2:  MOVWF  03
060B4:  MOVF   01,W
060B6:  ADDLW  3E
060B8:  MOVWF  01
060BA:  MOVLW  01
060BC:  ADDWFC 03,F
060BE:  MOVF   01,W
060C0:  ADDLW  05
060C2:  MOVWF  FE9
060C4:  MOVLW  00
060C6:  ADDWFC 03,W
060C8:  MOVWF  FEA
060CA:  BCF    FEF.0
060CC:  CLRF   1B
060CE:  BTFSC  FF2.7
060D0:  BSF    1B.7
060D2:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
060D4:  MOVLB  7
060D6:  CLRF   x0B
060D8:  MOVFF  68F,70A
060DC:  CLRF   x0D
060DE:  MOVLW  21
060E0:  MOVWF  x0C
060E2:  MOVLB  0
060E4:  CALL   035E
060E8:  BTFSC  1B.7
060EA:  BSF    FF2.7
060EC:  MOVF   01,W
060EE:  ADDLW  02
060F0:  MOVLB  6
060F2:  MOVWF  x90
060F4:  MOVLW  00
060F6:  ADDWFC 02,W
060F8:  MOVWF  x91
060FA:  MOVLW  01
060FC:  ADDWF  x90,W
060FE:  MOVWF  01
06100:  MOVLW  00
06102:  ADDWFC x91,W
06104:  MOVWF  03
06106:  MOVF   01,W
06108:  ADDLW  3E
0610A:  MOVWF  01
0610C:  MOVLW  01
0610E:  ADDWFC 03,F
06110:  MOVF   01,W
06112:  ADDLW  04
06114:  MOVWF  FE9
06116:  MOVLW  00
06118:  ADDWFC 03,W
0611A:  MOVWF  FEA
0611C:  CLRF   FEF
0611E:  CLRF   1B
06120:  BTFSC  FF2.7
06122:  BSF    1B.7
06124:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
06126:  MOVLB  7
06128:  CLRF   x0B
0612A:  MOVFF  68F,70A
0612E:  CLRF   x0D
06130:  MOVLW  21
06132:  MOVWF  x0C
06134:  MOVLB  0
06136:  CALL   035E
0613A:  BTFSC  1B.7
0613C:  BSF    FF2.7
0613E:  MOVF   01,W
06140:  ADDLW  02
06142:  MOVLB  6
06144:  MOVWF  x90
06146:  MOVLW  00
06148:  ADDWFC 02,W
0614A:  MOVWF  x91
0614C:  MOVLW  01
0614E:  ADDWF  x90,W
06150:  MOVWF  01
06152:  MOVLW  00
06154:  ADDWFC x91,W
06156:  MOVWF  03
06158:  MOVF   01,W
0615A:  ADDLW  3E
0615C:  MOVWF  01
0615E:  MOVLW  01
06160:  ADDWFC 03,F
06162:  MOVF   01,W
06164:  ADDLW  08
06166:  MOVWF  FE9
06168:  MOVLW  00
0616A:  ADDWFC 03,W
0616C:  MOVWF  FEA
0616E:  BTFSS  FEF.0
06170:  BRA    62CA
06172:  CLRF   1B
06174:  BTFSC  FF2.7
06176:  BSF    1B.7
06178:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
0617A:  MOVLB  7
0617C:  CLRF   x0B
0617E:  MOVFF  68F,70A
06182:  CLRF   x0D
06184:  MOVLW  21
06186:  MOVWF  x0C
06188:  MOVLB  0
0618A:  CALL   035E
0618E:  BTFSC  1B.7
06190:  BSF    FF2.7
06192:  MOVF   01,W
06194:  ADDLW  02
06196:  MOVLB  6
06198:  MOVWF  x90
0619A:  MOVLW  00
0619C:  ADDWFC 02,W
0619E:  MOVWF  x91
061A0:  MOVLW  01
061A2:  ADDWF  x90,W
061A4:  MOVWF  01
061A6:  MOVLW  00
061A8:  ADDWFC x91,W
061AA:  MOVWF  03
061AC:  MOVF   01,W
061AE:  ADDLW  3E
061B0:  MOVWF  01
061B2:  MOVLW  01
061B4:  ADDWFC 03,F
061B6:  MOVF   01,W
061B8:  ADDLW  06
061BA:  MOVWF  FE9
061BC:  MOVLW  00
061BE:  ADDWFC 03,W
061C0:  MOVWF  FEA
061C2:  MOVFF  FEF,692
061C6:  CLRF   1B
061C8:  BTFSC  FF2.7
061CA:  BSF    1B.7
061CC:  BCF    FF2.7
061CE:  MOVLB  7
061D0:  CLRF   x0B
061D2:  MOVFF  68F,70A
061D6:  CLRF   x0D
061D8:  MOVLW  21
061DA:  MOVWF  x0C
061DC:  MOVLB  0
061DE:  CALL   035E
061E2:  BTFSC  1B.7
061E4:  BSF    FF2.7
061E6:  MOVF   01,W
061E8:  ADDLW  02
061EA:  MOVLB  6
061EC:  MOVWF  x93
061EE:  MOVLW  00
061F0:  ADDWFC 02,W
061F2:  MOVWF  x94
061F4:  MOVLW  01
061F6:  ADDWF  x93,W
061F8:  MOVWF  01
061FA:  MOVLW  00
061FC:  ADDWFC x94,W
061FE:  MOVWF  03
06200:  MOVF   01,W
06202:  ADDLW  3E
06204:  MOVWF  01
06206:  MOVLW  01
06208:  ADDWFC 03,F
0620A:  MOVF   01,W
0620C:  ADDLW  07
0620E:  MOVWF  FE9
06210:  MOVLW  00
06212:  ADDWFC 03,W
06214:  MOVWF  FEA
06216:  MOVFF  FEF,695
0621A:  MOVFF  692,696
0621E:  MOVFF  695,697
06222:  MOVLB  0
06224:  RCALL  5D56
06226:  CLRF   1B
06228:  BTFSC  FF2.7
0622A:  BSF    1B.7
0622C:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0622E:  MOVLB  7
06230:  CLRF   x0B
06232:  MOVFF  68F,70A
06236:  CLRF   x0D
06238:  MOVLW  21
0623A:  MOVWF  x0C
0623C:  MOVLB  0
0623E:  CALL   035E
06242:  BTFSC  1B.7
06244:  BSF    FF2.7
06246:  MOVF   01,W
06248:  ADDLW  02
0624A:  MOVLB  6
0624C:  MOVWF  x90
0624E:  MOVLW  00
06250:  ADDWFC 02,W
06252:  MOVWF  x91
06254:  MOVLW  01
06256:  ADDWF  x90,W
06258:  MOVWF  01
0625A:  MOVLW  00
0625C:  ADDWFC x91,W
0625E:  MOVWF  03
06260:  MOVF   01,W
06262:  ADDLW  3E
06264:  MOVWF  01
06266:  MOVLW  01
06268:  ADDWFC 03,F
0626A:  MOVF   01,W
0626C:  ADDLW  08
0626E:  MOVWF  FE9
06270:  MOVLW  00
06272:  ADDWFC 03,W
06274:  MOVWF  FEA
06276:  BCF    FEF.0
06278:  CLRF   1B
0627A:  BTFSC  FF2.7
0627C:  BSF    1B.7
0627E:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
06280:  MOVLB  7
06282:  CLRF   x0B
06284:  MOVFF  68F,70A
06288:  CLRF   x0D
0628A:  MOVLW  21
0628C:  MOVWF  x0C
0628E:  MOVLB  0
06290:  CALL   035E
06294:  BTFSC  1B.7
06296:  BSF    FF2.7
06298:  MOVF   01,W
0629A:  ADDLW  02
0629C:  MOVLB  6
0629E:  MOVWF  x90
062A0:  MOVLW  00
062A2:  ADDWFC 02,W
062A4:  MOVWF  x91
062A6:  MOVLW  01
062A8:  ADDWF  x90,W
062AA:  MOVWF  01
062AC:  MOVLW  00
062AE:  ADDWFC x91,W
062B0:  MOVWF  03
062B2:  MOVF   01,W
062B4:  ADDLW  3E
062B6:  MOVWF  01
062B8:  MOVLW  01
062BA:  ADDWFC 03,F
062BC:  MOVF   01,W
062BE:  ADDLW  07
062C0:  MOVWF  FE9
062C2:  MOVLW  00
062C4:  ADDWFC 03,W
062C6:  MOVWF  FEA
062C8:  CLRF   FEF
....................          } 
....................  
....................          break; 
062CA:  GOTO   6CE2
....................          case button_switch: 
062CE:  CLRF   1B
062D0:  BTFSC  FF2.7
062D2:  BSF    1B.7
062D4:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
062D6:  MOVLB  7
062D8:  CLRF   x0B
062DA:  MOVFF  68F,70A
062DE:  CLRF   x0D
062E0:  MOVLW  21
062E2:  MOVWF  x0C
062E4:  MOVLB  0
062E6:  CALL   035E
062EA:  BTFSC  1B.7
062EC:  BSF    FF2.7
062EE:  MOVF   01,W
062F0:  ADDLW  02
062F2:  MOVLB  6
062F4:  MOVWF  x90
062F6:  MOVLW  00
062F8:  ADDWFC 02,W
062FA:  MOVWF  x91
062FC:  MOVLW  01
062FE:  ADDWF  x90,W
06300:  MOVWF  01
06302:  MOVLW  00
06304:  ADDWFC x91,W
06306:  MOVWF  03
06308:  MOVF   01,W
0630A:  ADDLW  3E
0630C:  MOVWF  01
0630E:  MOVLW  01
06310:  ADDWFC 03,F
06312:  MOVF   01,W
06314:  ADDLW  02
06316:  MOVWF  FE9
06318:  MOVLW  00
0631A:  ADDWFC 03,W
0631C:  MOVWF  FEA
0631E:  BTFSS  FEF.0
06320:  BRA    6476
06322:  CLRF   1B
06324:  BTFSC  FF2.7
06326:  BSF    1B.7
06328:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
0632A:  MOVLB  7
0632C:  CLRF   x0B
0632E:  MOVFF  68F,70A
06332:  CLRF   x0D
06334:  MOVLW  21
06336:  MOVWF  x0C
06338:  MOVLB  0
0633A:  CALL   035E
0633E:  BTFSC  1B.7
06340:  BSF    FF2.7
06342:  MOVF   01,W
06344:  ADDLW  02
06346:  MOVLB  6
06348:  MOVWF  x90
0634A:  MOVLW  00
0634C:  ADDWFC 02,W
0634E:  MOVWF  x91
06350:  MOVLW  01
06352:  ADDWF  x90,W
06354:  MOVWF  01
06356:  MOVLW  00
06358:  ADDWFC x91,W
0635A:  MOVWF  03
0635C:  MOVF   01,W
0635E:  ADDLW  3E
06360:  MOVWF  01
06362:  MOVLW  01
06364:  ADDWFC 03,F
06366:  MOVFF  01,FE9
0636A:  MOVFF  03,FEA
0636E:  MOVFF  FEF,692
06372:  CLRF   1B
06374:  BTFSC  FF2.7
06376:  BSF    1B.7
06378:  BCF    FF2.7
0637A:  MOVLB  7
0637C:  CLRF   x0B
0637E:  MOVFF  68F,70A
06382:  CLRF   x0D
06384:  MOVLW  21
06386:  MOVWF  x0C
06388:  MOVLB  0
0638A:  CALL   035E
0638E:  BTFSC  1B.7
06390:  BSF    FF2.7
06392:  MOVF   01,W
06394:  ADDLW  02
06396:  MOVLB  6
06398:  MOVWF  x93
0639A:  MOVLW  00
0639C:  ADDWFC 02,W
0639E:  MOVWF  x94
063A0:  MOVLW  01
063A2:  ADDWF  x93,W
063A4:  MOVWF  01
063A6:  MOVLW  00
063A8:  ADDWFC x94,W
063AA:  MOVWF  03
063AC:  MOVF   01,W
063AE:  ADDLW  3E
063B0:  MOVWF  01
063B2:  MOVLW  01
063B4:  ADDWFC 03,F
063B6:  MOVF   01,W
063B8:  ADDLW  01
063BA:  MOVWF  FE9
063BC:  MOVLW  00
063BE:  ADDWFC 03,W
063C0:  MOVWF  FEA
063C2:  MOVFF  FEF,695
063C6:  MOVFF  692,696
063CA:  MOVFF  695,697
063CE:  MOVLB  0
063D0:  RCALL  5D56
063D2:  CLRF   1B
063D4:  BTFSC  FF2.7
063D6:  BSF    1B.7
063D8:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
063DA:  MOVLB  7
063DC:  CLRF   x0B
063DE:  MOVFF  68F,70A
063E2:  CLRF   x0D
063E4:  MOVLW  21
063E6:  MOVWF  x0C
063E8:  MOVLB  0
063EA:  CALL   035E
063EE:  BTFSC  1B.7
063F0:  BSF    FF2.7
063F2:  MOVF   01,W
063F4:  ADDLW  02
063F6:  MOVLB  6
063F8:  MOVWF  x90
063FA:  MOVLW  00
063FC:  ADDWFC 02,W
063FE:  MOVWF  x91
06400:  MOVLW  01
06402:  ADDWF  x90,W
06404:  MOVWF  01
06406:  MOVLW  00
06408:  ADDWFC x91,W
0640A:  MOVWF  03
0640C:  MOVF   01,W
0640E:  ADDLW  3E
06410:  MOVWF  01
06412:  MOVLW  01
06414:  ADDWFC 03,F
06416:  MOVF   01,W
06418:  ADDLW  02
0641A:  MOVWF  FE9
0641C:  MOVLW  00
0641E:  ADDWFC 03,W
06420:  MOVWF  FEA
06422:  BCF    FEF.0
06424:  CLRF   1B
06426:  BTFSC  FF2.7
06428:  BSF    1B.7
0642A:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
0642C:  MOVLB  7
0642E:  CLRF   x0B
06430:  MOVFF  68F,70A
06434:  CLRF   x0D
06436:  MOVLW  21
06438:  MOVWF  x0C
0643A:  MOVLB  0
0643C:  CALL   035E
06440:  BTFSC  1B.7
06442:  BSF    FF2.7
06444:  MOVF   01,W
06446:  ADDLW  02
06448:  MOVLB  6
0644A:  MOVWF  x90
0644C:  MOVLW  00
0644E:  ADDWFC 02,W
06450:  MOVWF  x91
06452:  MOVLW  01
06454:  ADDWF  x90,W
06456:  MOVWF  01
06458:  MOVLW  00
0645A:  ADDWFC x91,W
0645C:  MOVWF  03
0645E:  MOVF   01,W
06460:  ADDLW  3E
06462:  MOVWF  01
06464:  MOVLW  01
06466:  ADDWFC 03,F
06468:  MOVF   01,W
0646A:  ADDLW  01
0646C:  MOVWF  FE9
0646E:  MOVLW  00
06470:  ADDWFC 03,W
06472:  MOVWF  FEA
06474:  CLRF   FEF
06476:  CLRF   1B
06478:  BTFSC  FF2.7
0647A:  BSF    1B.7
0647C:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
0647E:  MOVLB  7
06480:  CLRF   x0B
06482:  MOVFF  68F,70A
06486:  CLRF   x0D
06488:  MOVLW  21
0648A:  MOVWF  x0C
0648C:  MOVLB  0
0648E:  CALL   035E
06492:  BTFSC  1B.7
06494:  BSF    FF2.7
06496:  MOVF   01,W
06498:  ADDLW  02
0649A:  MOVLB  6
0649C:  MOVWF  x90
0649E:  MOVLW  00
064A0:  ADDWFC 02,W
064A2:  MOVWF  x91
064A4:  MOVLW  01
064A6:  ADDWF  x90,W
064A8:  MOVWF  01
064AA:  MOVLW  00
064AC:  ADDWFC x91,W
064AE:  MOVWF  03
064B0:  MOVF   01,W
064B2:  ADDLW  3E
064B4:  MOVWF  01
064B6:  MOVLW  01
064B8:  ADDWFC 03,F
064BA:  MOVF   01,W
064BC:  ADDLW  05
064BE:  MOVWF  FE9
064C0:  MOVLW  00
064C2:  ADDWFC 03,W
064C4:  MOVWF  FEA
064C6:  BTFSS  FEF.0
064C8:  BRA    6624
064CA:  CLRF   1B
064CC:  BTFSC  FF2.7
064CE:  BSF    1B.7
064D0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
064D2:  MOVLB  7
064D4:  CLRF   x0B
064D6:  MOVFF  68F,70A
064DA:  CLRF   x0D
064DC:  MOVLW  21
064DE:  MOVWF  x0C
064E0:  MOVLB  0
064E2:  CALL   035E
064E6:  BTFSC  1B.7
064E8:  BSF    FF2.7
064EA:  MOVF   01,W
064EC:  ADDLW  02
064EE:  MOVLB  6
064F0:  MOVWF  x90
064F2:  MOVLW  00
064F4:  ADDWFC 02,W
064F6:  MOVWF  x91
064F8:  MOVLW  01
064FA:  ADDWF  x90,W
064FC:  MOVWF  01
064FE:  MOVLW  00
06500:  ADDWFC x91,W
06502:  MOVWF  03
06504:  MOVF   01,W
06506:  ADDLW  3E
06508:  MOVWF  01
0650A:  MOVLW  01
0650C:  ADDWFC 03,F
0650E:  MOVF   01,W
06510:  ADDLW  03
06512:  MOVWF  FE9
06514:  MOVLW  00
06516:  ADDWFC 03,W
06518:  MOVWF  FEA
0651A:  MOVFF  FEF,692
0651E:  CLRF   1B
06520:  BTFSC  FF2.7
06522:  BSF    1B.7
06524:  BCF    FF2.7
06526:  MOVLB  7
06528:  CLRF   x0B
0652A:  MOVFF  68F,70A
0652E:  CLRF   x0D
06530:  MOVLW  21
06532:  MOVWF  x0C
06534:  MOVLB  0
06536:  CALL   035E
0653A:  BTFSC  1B.7
0653C:  BSF    FF2.7
0653E:  MOVF   01,W
06540:  ADDLW  02
06542:  MOVLB  6
06544:  MOVWF  x93
06546:  MOVLW  00
06548:  ADDWFC 02,W
0654A:  MOVWF  x94
0654C:  MOVLW  01
0654E:  ADDWF  x93,W
06550:  MOVWF  01
06552:  MOVLW  00
06554:  ADDWFC x94,W
06556:  MOVWF  03
06558:  MOVF   01,W
0655A:  ADDLW  3E
0655C:  MOVWF  01
0655E:  MOVLW  01
06560:  ADDWFC 03,F
06562:  MOVF   01,W
06564:  ADDLW  04
06566:  MOVWF  FE9
06568:  MOVLW  00
0656A:  ADDWFC 03,W
0656C:  MOVWF  FEA
0656E:  MOVFF  FEF,695
06572:  MOVFF  692,696
06576:  MOVFF  695,697
0657A:  MOVLB  0
0657C:  CALL   5D56
06580:  CLRF   1B
06582:  BTFSC  FF2.7
06584:  BSF    1B.7
06586:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06588:  MOVLB  7
0658A:  CLRF   x0B
0658C:  MOVFF  68F,70A
06590:  CLRF   x0D
06592:  MOVLW  21
06594:  MOVWF  x0C
06596:  MOVLB  0
06598:  CALL   035E
0659C:  BTFSC  1B.7
0659E:  BSF    FF2.7
065A0:  MOVF   01,W
065A2:  ADDLW  02
065A4:  MOVLB  6
065A6:  MOVWF  x90
065A8:  MOVLW  00
065AA:  ADDWFC 02,W
065AC:  MOVWF  x91
065AE:  MOVLW  01
065B0:  ADDWF  x90,W
065B2:  MOVWF  01
065B4:  MOVLW  00
065B6:  ADDWFC x91,W
065B8:  MOVWF  03
065BA:  MOVF   01,W
065BC:  ADDLW  3E
065BE:  MOVWF  01
065C0:  MOVLW  01
065C2:  ADDWFC 03,F
065C4:  MOVF   01,W
065C6:  ADDLW  05
065C8:  MOVWF  FE9
065CA:  MOVLW  00
065CC:  ADDWFC 03,W
065CE:  MOVWF  FEA
065D0:  BCF    FEF.0
065D2:  CLRF   1B
065D4:  BTFSC  FF2.7
065D6:  BSF    1B.7
065D8:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
065DA:  MOVLB  7
065DC:  CLRF   x0B
065DE:  MOVFF  68F,70A
065E2:  CLRF   x0D
065E4:  MOVLW  21
065E6:  MOVWF  x0C
065E8:  MOVLB  0
065EA:  CALL   035E
065EE:  BTFSC  1B.7
065F0:  BSF    FF2.7
065F2:  MOVF   01,W
065F4:  ADDLW  02
065F6:  MOVLB  6
065F8:  MOVWF  x90
065FA:  MOVLW  00
065FC:  ADDWFC 02,W
065FE:  MOVWF  x91
06600:  MOVLW  01
06602:  ADDWF  x90,W
06604:  MOVWF  01
06606:  MOVLW  00
06608:  ADDWFC x91,W
0660A:  MOVWF  03
0660C:  MOVF   01,W
0660E:  ADDLW  3E
06610:  MOVWF  01
06612:  MOVLW  01
06614:  ADDWFC 03,F
06616:  MOVF   01,W
06618:  ADDLW  04
0661A:  MOVWF  FE9
0661C:  MOVLW  00
0661E:  ADDWFC 03,W
06620:  MOVWF  FEA
06622:  CLRF   FEF
....................          } 
....................  
....................          break; 
06624:  BRA    6CE2
....................          case on_off_switch: 
06626:  CLRF   1B
06628:  BTFSC  FF2.7
0662A:  BSF    1B.7
0662C:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
0662E:  MOVLB  7
06630:  CLRF   x0B
06632:  MOVFF  68F,70A
06636:  CLRF   x0D
06638:  MOVLW  21
0663A:  MOVWF  x0C
0663C:  MOVLB  0
0663E:  CALL   035E
06642:  BTFSC  1B.7
06644:  BSF    FF2.7
06646:  MOVF   01,W
06648:  ADDLW  02
0664A:  MOVLB  6
0664C:  MOVWF  x90
0664E:  MOVLW  00
06650:  ADDWFC 02,W
06652:  MOVWF  x91
06654:  MOVLW  01
06656:  ADDWF  x90,W
06658:  MOVWF  01
0665A:  MOVLW  00
0665C:  ADDWFC x91,W
0665E:  MOVWF  03
06660:  MOVF   01,W
06662:  ADDLW  3E
06664:  MOVWF  01
06666:  MOVLW  01
06668:  ADDWFC 03,F
0666A:  MOVF   01,W
0666C:  ADDLW  02
0666E:  MOVWF  FE9
06670:  MOVLW  00
06672:  ADDWFC 03,W
06674:  MOVWF  FEA
06676:  BTFSS  FEF.0
06678:  BRA    67D0
0667A:  CLRF   1B
0667C:  BTFSC  FF2.7
0667E:  BSF    1B.7
06680:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
06682:  MOVLB  7
06684:  CLRF   x0B
06686:  MOVFF  68F,70A
0668A:  CLRF   x0D
0668C:  MOVLW  21
0668E:  MOVWF  x0C
06690:  MOVLB  0
06692:  CALL   035E
06696:  BTFSC  1B.7
06698:  BSF    FF2.7
0669A:  MOVF   01,W
0669C:  ADDLW  02
0669E:  MOVLB  6
066A0:  MOVWF  x90
066A2:  MOVLW  00
066A4:  ADDWFC 02,W
066A6:  MOVWF  x91
066A8:  MOVLW  01
066AA:  ADDWF  x90,W
066AC:  MOVWF  01
066AE:  MOVLW  00
066B0:  ADDWFC x91,W
066B2:  MOVWF  03
066B4:  MOVF   01,W
066B6:  ADDLW  3E
066B8:  MOVWF  01
066BA:  MOVLW  01
066BC:  ADDWFC 03,F
066BE:  MOVFF  01,FE9
066C2:  MOVFF  03,FEA
066C6:  MOVFF  FEF,692
066CA:  CLRF   1B
066CC:  BTFSC  FF2.7
066CE:  BSF    1B.7
066D0:  BCF    FF2.7
066D2:  MOVLB  7
066D4:  CLRF   x0B
066D6:  MOVFF  68F,70A
066DA:  CLRF   x0D
066DC:  MOVLW  21
066DE:  MOVWF  x0C
066E0:  MOVLB  0
066E2:  CALL   035E
066E6:  BTFSC  1B.7
066E8:  BSF    FF2.7
066EA:  MOVF   01,W
066EC:  ADDLW  02
066EE:  MOVLB  6
066F0:  MOVWF  x93
066F2:  MOVLW  00
066F4:  ADDWFC 02,W
066F6:  MOVWF  x94
066F8:  MOVLW  01
066FA:  ADDWF  x93,W
066FC:  MOVWF  01
066FE:  MOVLW  00
06700:  ADDWFC x94,W
06702:  MOVWF  03
06704:  MOVF   01,W
06706:  ADDLW  3E
06708:  MOVWF  01
0670A:  MOVLW  01
0670C:  ADDWFC 03,F
0670E:  MOVF   01,W
06710:  ADDLW  01
06712:  MOVWF  FE9
06714:  MOVLW  00
06716:  ADDWFC 03,W
06718:  MOVWF  FEA
0671A:  MOVFF  FEF,695
0671E:  MOVFF  692,696
06722:  MOVFF  695,697
06726:  MOVLB  0
06728:  CALL   5D56
0672C:  CLRF   1B
0672E:  BTFSC  FF2.7
06730:  BSF    1B.7
06732:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06734:  MOVLB  7
06736:  CLRF   x0B
06738:  MOVFF  68F,70A
0673C:  CLRF   x0D
0673E:  MOVLW  21
06740:  MOVWF  x0C
06742:  MOVLB  0
06744:  CALL   035E
06748:  BTFSC  1B.7
0674A:  BSF    FF2.7
0674C:  MOVF   01,W
0674E:  ADDLW  02
06750:  MOVLB  6
06752:  MOVWF  x90
06754:  MOVLW  00
06756:  ADDWFC 02,W
06758:  MOVWF  x91
0675A:  MOVLW  01
0675C:  ADDWF  x90,W
0675E:  MOVWF  01
06760:  MOVLW  00
06762:  ADDWFC x91,W
06764:  MOVWF  03
06766:  MOVF   01,W
06768:  ADDLW  3E
0676A:  MOVWF  01
0676C:  MOVLW  01
0676E:  ADDWFC 03,F
06770:  MOVF   01,W
06772:  ADDLW  02
06774:  MOVWF  FE9
06776:  MOVLW  00
06778:  ADDWFC 03,W
0677A:  MOVWF  FEA
0677C:  BCF    FEF.0
0677E:  CLRF   1B
06780:  BTFSC  FF2.7
06782:  BSF    1B.7
06784:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
06786:  MOVLB  7
06788:  CLRF   x0B
0678A:  MOVFF  68F,70A
0678E:  CLRF   x0D
06790:  MOVLW  21
06792:  MOVWF  x0C
06794:  MOVLB  0
06796:  CALL   035E
0679A:  BTFSC  1B.7
0679C:  BSF    FF2.7
0679E:  MOVF   01,W
067A0:  ADDLW  02
067A2:  MOVLB  6
067A4:  MOVWF  x90
067A6:  MOVLW  00
067A8:  ADDWFC 02,W
067AA:  MOVWF  x91
067AC:  MOVLW  01
067AE:  ADDWF  x90,W
067B0:  MOVWF  01
067B2:  MOVLW  00
067B4:  ADDWFC x91,W
067B6:  MOVWF  03
067B8:  MOVF   01,W
067BA:  ADDLW  3E
067BC:  MOVWF  01
067BE:  MOVLW  01
067C0:  ADDWFC 03,F
067C2:  MOVF   01,W
067C4:  ADDLW  01
067C6:  MOVWF  FE9
067C8:  MOVLW  00
067CA:  ADDWFC 03,W
067CC:  MOVWF  FEA
067CE:  CLRF   FEF
067D0:  CLRF   1B
067D2:  BTFSC  FF2.7
067D4:  BSF    1B.7
067D6:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
067D8:  MOVLB  7
067DA:  CLRF   x0B
067DC:  MOVFF  68F,70A
067E0:  CLRF   x0D
067E2:  MOVLW  21
067E4:  MOVWF  x0C
067E6:  MOVLB  0
067E8:  CALL   035E
067EC:  BTFSC  1B.7
067EE:  BSF    FF2.7
067F0:  MOVF   01,W
067F2:  ADDLW  02
067F4:  MOVLB  6
067F6:  MOVWF  x90
067F8:  MOVLW  00
067FA:  ADDWFC 02,W
067FC:  MOVWF  x91
067FE:  MOVLW  01
06800:  ADDWF  x90,W
06802:  MOVWF  01
06804:  MOVLW  00
06806:  ADDWFC x91,W
06808:  MOVWF  03
0680A:  MOVF   01,W
0680C:  ADDLW  3E
0680E:  MOVWF  01
06810:  MOVLW  01
06812:  ADDWFC 03,F
06814:  MOVF   01,W
06816:  ADDLW  05
06818:  MOVWF  FE9
0681A:  MOVLW  00
0681C:  ADDWFC 03,W
0681E:  MOVWF  FEA
06820:  BTFSS  FEF.0
06822:  BRA    697E
06824:  CLRF   1B
06826:  BTFSC  FF2.7
06828:  BSF    1B.7
0682A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
0682C:  MOVLB  7
0682E:  CLRF   x0B
06830:  MOVFF  68F,70A
06834:  CLRF   x0D
06836:  MOVLW  21
06838:  MOVWF  x0C
0683A:  MOVLB  0
0683C:  CALL   035E
06840:  BTFSC  1B.7
06842:  BSF    FF2.7
06844:  MOVF   01,W
06846:  ADDLW  02
06848:  MOVLB  6
0684A:  MOVWF  x90
0684C:  MOVLW  00
0684E:  ADDWFC 02,W
06850:  MOVWF  x91
06852:  MOVLW  01
06854:  ADDWF  x90,W
06856:  MOVWF  01
06858:  MOVLW  00
0685A:  ADDWFC x91,W
0685C:  MOVWF  03
0685E:  MOVF   01,W
06860:  ADDLW  3E
06862:  MOVWF  01
06864:  MOVLW  01
06866:  ADDWFC 03,F
06868:  MOVF   01,W
0686A:  ADDLW  03
0686C:  MOVWF  FE9
0686E:  MOVLW  00
06870:  ADDWFC 03,W
06872:  MOVWF  FEA
06874:  MOVFF  FEF,692
06878:  CLRF   1B
0687A:  BTFSC  FF2.7
0687C:  BSF    1B.7
0687E:  BCF    FF2.7
06880:  MOVLB  7
06882:  CLRF   x0B
06884:  MOVFF  68F,70A
06888:  CLRF   x0D
0688A:  MOVLW  21
0688C:  MOVWF  x0C
0688E:  MOVLB  0
06890:  CALL   035E
06894:  BTFSC  1B.7
06896:  BSF    FF2.7
06898:  MOVF   01,W
0689A:  ADDLW  02
0689C:  MOVLB  6
0689E:  MOVWF  x93
068A0:  MOVLW  00
068A2:  ADDWFC 02,W
068A4:  MOVWF  x94
068A6:  MOVLW  01
068A8:  ADDWF  x93,W
068AA:  MOVWF  01
068AC:  MOVLW  00
068AE:  ADDWFC x94,W
068B0:  MOVWF  03
068B2:  MOVF   01,W
068B4:  ADDLW  3E
068B6:  MOVWF  01
068B8:  MOVLW  01
068BA:  ADDWFC 03,F
068BC:  MOVF   01,W
068BE:  ADDLW  04
068C0:  MOVWF  FE9
068C2:  MOVLW  00
068C4:  ADDWFC 03,W
068C6:  MOVWF  FEA
068C8:  MOVFF  FEF,695
068CC:  MOVFF  692,696
068D0:  MOVFF  695,697
068D4:  MOVLB  0
068D6:  CALL   5D56
068DA:  CLRF   1B
068DC:  BTFSC  FF2.7
068DE:  BSF    1B.7
068E0:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
068E2:  MOVLB  7
068E4:  CLRF   x0B
068E6:  MOVFF  68F,70A
068EA:  CLRF   x0D
068EC:  MOVLW  21
068EE:  MOVWF  x0C
068F0:  MOVLB  0
068F2:  CALL   035E
068F6:  BTFSC  1B.7
068F8:  BSF    FF2.7
068FA:  MOVF   01,W
068FC:  ADDLW  02
068FE:  MOVLB  6
06900:  MOVWF  x90
06902:  MOVLW  00
06904:  ADDWFC 02,W
06906:  MOVWF  x91
06908:  MOVLW  01
0690A:  ADDWF  x90,W
0690C:  MOVWF  01
0690E:  MOVLW  00
06910:  ADDWFC x91,W
06912:  MOVWF  03
06914:  MOVF   01,W
06916:  ADDLW  3E
06918:  MOVWF  01
0691A:  MOVLW  01
0691C:  ADDWFC 03,F
0691E:  MOVF   01,W
06920:  ADDLW  05
06922:  MOVWF  FE9
06924:  MOVLW  00
06926:  ADDWFC 03,W
06928:  MOVWF  FEA
0692A:  BCF    FEF.0
0692C:  CLRF   1B
0692E:  BTFSC  FF2.7
06930:  BSF    1B.7
06932:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
06934:  MOVLB  7
06936:  CLRF   x0B
06938:  MOVFF  68F,70A
0693C:  CLRF   x0D
0693E:  MOVLW  21
06940:  MOVWF  x0C
06942:  MOVLB  0
06944:  CALL   035E
06948:  BTFSC  1B.7
0694A:  BSF    FF2.7
0694C:  MOVF   01,W
0694E:  ADDLW  02
06950:  MOVLB  6
06952:  MOVWF  x90
06954:  MOVLW  00
06956:  ADDWFC 02,W
06958:  MOVWF  x91
0695A:  MOVLW  01
0695C:  ADDWF  x90,W
0695E:  MOVWF  01
06960:  MOVLW  00
06962:  ADDWFC x91,W
06964:  MOVWF  03
06966:  MOVF   01,W
06968:  ADDLW  3E
0696A:  MOVWF  01
0696C:  MOVLW  01
0696E:  ADDWFC 03,F
06970:  MOVF   01,W
06972:  ADDLW  04
06974:  MOVWF  FE9
06976:  MOVLW  00
06978:  ADDWFC 03,W
0697A:  MOVWF  FEA
0697C:  CLRF   FEF
....................          } 
....................  
....................          break; 
0697E:  BRA    6CE2
....................          case timer: 
06980:  CLRF   1B
06982:  BTFSC  FF2.7
06984:  BSF    1B.7
06986:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
06988:  MOVLB  7
0698A:  CLRF   x0B
0698C:  MOVFF  68F,70A
06990:  CLRF   x0D
06992:  MOVLW  21
06994:  MOVWF  x0C
06996:  MOVLB  0
06998:  CALL   035E
0699C:  BTFSC  1B.7
0699E:  BSF    FF2.7
069A0:  MOVF   01,W
069A2:  ADDLW  02
069A4:  MOVLB  6
069A6:  MOVWF  x90
069A8:  MOVLW  00
069AA:  ADDWFC 02,W
069AC:  MOVWF  x91
069AE:  MOVLW  01
069B0:  ADDWF  x90,W
069B2:  MOVWF  01
069B4:  MOVLW  00
069B6:  ADDWFC x91,W
069B8:  MOVWF  03
069BA:  MOVF   01,W
069BC:  ADDLW  3E
069BE:  MOVWF  01
069C0:  MOVLW  01
069C2:  ADDWFC 03,F
069C4:  MOVF   01,W
069C6:  ADDLW  05
069C8:  MOVWF  FE9
069CA:  MOVLW  00
069CC:  ADDWFC 03,W
069CE:  MOVWF  FEA
069D0:  BTFSS  FEF.0
069D2:  BRA    6B2E
069D4:  CLRF   1B
069D6:  BTFSC  FF2.7
069D8:  BSF    1B.7
069DA:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
069DC:  MOVLB  7
069DE:  CLRF   x0B
069E0:  MOVFF  68F,70A
069E4:  CLRF   x0D
069E6:  MOVLW  21
069E8:  MOVWF  x0C
069EA:  MOVLB  0
069EC:  CALL   035E
069F0:  BTFSC  1B.7
069F2:  BSF    FF2.7
069F4:  MOVF   01,W
069F6:  ADDLW  02
069F8:  MOVLB  6
069FA:  MOVWF  x90
069FC:  MOVLW  00
069FE:  ADDWFC 02,W
06A00:  MOVWF  x91
06A02:  MOVLW  01
06A04:  ADDWF  x90,W
06A06:  MOVWF  01
06A08:  MOVLW  00
06A0A:  ADDWFC x91,W
06A0C:  MOVWF  03
06A0E:  MOVF   01,W
06A10:  ADDLW  3E
06A12:  MOVWF  01
06A14:  MOVLW  01
06A16:  ADDWFC 03,F
06A18:  MOVF   01,W
06A1A:  ADDLW  03
06A1C:  MOVWF  FE9
06A1E:  MOVLW  00
06A20:  ADDWFC 03,W
06A22:  MOVWF  FEA
06A24:  MOVFF  FEF,692
06A28:  CLRF   1B
06A2A:  BTFSC  FF2.7
06A2C:  BSF    1B.7
06A2E:  BCF    FF2.7
06A30:  MOVLB  7
06A32:  CLRF   x0B
06A34:  MOVFF  68F,70A
06A38:  CLRF   x0D
06A3A:  MOVLW  21
06A3C:  MOVWF  x0C
06A3E:  MOVLB  0
06A40:  CALL   035E
06A44:  BTFSC  1B.7
06A46:  BSF    FF2.7
06A48:  MOVF   01,W
06A4A:  ADDLW  02
06A4C:  MOVLB  6
06A4E:  MOVWF  x93
06A50:  MOVLW  00
06A52:  ADDWFC 02,W
06A54:  MOVWF  x94
06A56:  MOVLW  01
06A58:  ADDWF  x93,W
06A5A:  MOVWF  01
06A5C:  MOVLW  00
06A5E:  ADDWFC x94,W
06A60:  MOVWF  03
06A62:  MOVF   01,W
06A64:  ADDLW  3E
06A66:  MOVWF  01
06A68:  MOVLW  01
06A6A:  ADDWFC 03,F
06A6C:  MOVF   01,W
06A6E:  ADDLW  04
06A70:  MOVWF  FE9
06A72:  MOVLW  00
06A74:  ADDWFC 03,W
06A76:  MOVWF  FEA
06A78:  MOVFF  FEF,695
06A7C:  MOVFF  692,696
06A80:  MOVFF  695,697
06A84:  MOVLB  0
06A86:  CALL   5D56
06A8A:  CLRF   1B
06A8C:  BTFSC  FF2.7
06A8E:  BSF    1B.7
06A90:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
06A92:  MOVLB  7
06A94:  CLRF   x0B
06A96:  MOVFF  68F,70A
06A9A:  CLRF   x0D
06A9C:  MOVLW  21
06A9E:  MOVWF  x0C
06AA0:  MOVLB  0
06AA2:  CALL   035E
06AA6:  BTFSC  1B.7
06AA8:  BSF    FF2.7
06AAA:  MOVF   01,W
06AAC:  ADDLW  02
06AAE:  MOVLB  6
06AB0:  MOVWF  x90
06AB2:  MOVLW  00
06AB4:  ADDWFC 02,W
06AB6:  MOVWF  x91
06AB8:  MOVLW  01
06ABA:  ADDWF  x90,W
06ABC:  MOVWF  01
06ABE:  MOVLW  00
06AC0:  ADDWFC x91,W
06AC2:  MOVWF  03
06AC4:  MOVF   01,W
06AC6:  ADDLW  3E
06AC8:  MOVWF  01
06ACA:  MOVLW  01
06ACC:  ADDWFC 03,F
06ACE:  MOVF   01,W
06AD0:  ADDLW  05
06AD2:  MOVWF  FE9
06AD4:  MOVLW  00
06AD6:  ADDWFC 03,W
06AD8:  MOVWF  FEA
06ADA:  BCF    FEF.0
06ADC:  CLRF   1B
06ADE:  BTFSC  FF2.7
06AE0:  BSF    1B.7
06AE2:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
06AE4:  MOVLB  7
06AE6:  CLRF   x0B
06AE8:  MOVFF  68F,70A
06AEC:  CLRF   x0D
06AEE:  MOVLW  21
06AF0:  MOVWF  x0C
06AF2:  MOVLB  0
06AF4:  CALL   035E
06AF8:  BTFSC  1B.7
06AFA:  BSF    FF2.7
06AFC:  MOVF   01,W
06AFE:  ADDLW  02
06B00:  MOVLB  6
06B02:  MOVWF  x90
06B04:  MOVLW  00
06B06:  ADDWFC 02,W
06B08:  MOVWF  x91
06B0A:  MOVLW  01
06B0C:  ADDWF  x90,W
06B0E:  MOVWF  01
06B10:  MOVLW  00
06B12:  ADDWFC x91,W
06B14:  MOVWF  03
06B16:  MOVF   01,W
06B18:  ADDLW  3E
06B1A:  MOVWF  01
06B1C:  MOVLW  01
06B1E:  ADDWFC 03,F
06B20:  MOVF   01,W
06B22:  ADDLW  04
06B24:  MOVWF  FE9
06B26:  MOVLW  00
06B28:  ADDWFC 03,W
06B2A:  MOVWF  FEA
06B2C:  CLRF   FEF
06B2E:  CLRF   1B
06B30:  BTFSC  FF2.7
06B32:  BSF    1B.7
06B34:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
06B36:  MOVLB  7
06B38:  CLRF   x0B
06B3A:  MOVFF  68F,70A
06B3E:  CLRF   x0D
06B40:  MOVLW  21
06B42:  MOVWF  x0C
06B44:  MOVLB  0
06B46:  CALL   035E
06B4A:  BTFSC  1B.7
06B4C:  BSF    FF2.7
06B4E:  MOVF   01,W
06B50:  ADDLW  02
06B52:  MOVLB  6
06B54:  MOVWF  x90
06B56:  MOVLW  00
06B58:  ADDWFC 02,W
06B5A:  MOVWF  x91
06B5C:  MOVLW  01
06B5E:  ADDWF  x90,W
06B60:  MOVWF  01
06B62:  MOVLW  00
06B64:  ADDWFC x91,W
06B66:  MOVWF  03
06B68:  MOVF   01,W
06B6A:  ADDLW  3E
06B6C:  MOVWF  01
06B6E:  MOVLW  01
06B70:  ADDWFC 03,F
06B72:  MOVF   01,W
06B74:  ADDLW  08
06B76:  MOVWF  FE9
06B78:  MOVLW  00
06B7A:  ADDWFC 03,W
06B7C:  MOVWF  FEA
06B7E:  BTFSS  FEF.0
06B80:  BRA    6CDC
06B82:  CLRF   1B
06B84:  BTFSC  FF2.7
06B86:  BSF    1B.7
06B88:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
06B8A:  MOVLB  7
06B8C:  CLRF   x0B
06B8E:  MOVFF  68F,70A
06B92:  CLRF   x0D
06B94:  MOVLW  21
06B96:  MOVWF  x0C
06B98:  MOVLB  0
06B9A:  CALL   035E
06B9E:  BTFSC  1B.7
06BA0:  BSF    FF2.7
06BA2:  MOVF   01,W
06BA4:  ADDLW  02
06BA6:  MOVLB  6
06BA8:  MOVWF  x90
06BAA:  MOVLW  00
06BAC:  ADDWFC 02,W
06BAE:  MOVWF  x91
06BB0:  MOVLW  01
06BB2:  ADDWF  x90,W
06BB4:  MOVWF  01
06BB6:  MOVLW  00
06BB8:  ADDWFC x91,W
06BBA:  MOVWF  03
06BBC:  MOVF   01,W
06BBE:  ADDLW  3E
06BC0:  MOVWF  01
06BC2:  MOVLW  01
06BC4:  ADDWFC 03,F
06BC6:  MOVF   01,W
06BC8:  ADDLW  06
06BCA:  MOVWF  FE9
06BCC:  MOVLW  00
06BCE:  ADDWFC 03,W
06BD0:  MOVWF  FEA
06BD2:  MOVFF  FEF,692
06BD6:  CLRF   1B
06BD8:  BTFSC  FF2.7
06BDA:  BSF    1B.7
06BDC:  BCF    FF2.7
06BDE:  MOVLB  7
06BE0:  CLRF   x0B
06BE2:  MOVFF  68F,70A
06BE6:  CLRF   x0D
06BE8:  MOVLW  21
06BEA:  MOVWF  x0C
06BEC:  MOVLB  0
06BEE:  CALL   035E
06BF2:  BTFSC  1B.7
06BF4:  BSF    FF2.7
06BF6:  MOVF   01,W
06BF8:  ADDLW  02
06BFA:  MOVLB  6
06BFC:  MOVWF  x93
06BFE:  MOVLW  00
06C00:  ADDWFC 02,W
06C02:  MOVWF  x94
06C04:  MOVLW  01
06C06:  ADDWF  x93,W
06C08:  MOVWF  01
06C0A:  MOVLW  00
06C0C:  ADDWFC x94,W
06C0E:  MOVWF  03
06C10:  MOVF   01,W
06C12:  ADDLW  3E
06C14:  MOVWF  01
06C16:  MOVLW  01
06C18:  ADDWFC 03,F
06C1A:  MOVF   01,W
06C1C:  ADDLW  07
06C1E:  MOVWF  FE9
06C20:  MOVLW  00
06C22:  ADDWFC 03,W
06C24:  MOVWF  FEA
06C26:  MOVFF  FEF,695
06C2A:  MOVFF  692,696
06C2E:  MOVFF  695,697
06C32:  MOVLB  0
06C34:  CALL   5D56
06C38:  CLRF   1B
06C3A:  BTFSC  FF2.7
06C3C:  BSF    1B.7
06C3E:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
06C40:  MOVLB  7
06C42:  CLRF   x0B
06C44:  MOVFF  68F,70A
06C48:  CLRF   x0D
06C4A:  MOVLW  21
06C4C:  MOVWF  x0C
06C4E:  MOVLB  0
06C50:  CALL   035E
06C54:  BTFSC  1B.7
06C56:  BSF    FF2.7
06C58:  MOVF   01,W
06C5A:  ADDLW  02
06C5C:  MOVLB  6
06C5E:  MOVWF  x90
06C60:  MOVLW  00
06C62:  ADDWFC 02,W
06C64:  MOVWF  x91
06C66:  MOVLW  01
06C68:  ADDWF  x90,W
06C6A:  MOVWF  01
06C6C:  MOVLW  00
06C6E:  ADDWFC x91,W
06C70:  MOVWF  03
06C72:  MOVF   01,W
06C74:  ADDLW  3E
06C76:  MOVWF  01
06C78:  MOVLW  01
06C7A:  ADDWFC 03,F
06C7C:  MOVF   01,W
06C7E:  ADDLW  08
06C80:  MOVWF  FE9
06C82:  MOVLW  00
06C84:  ADDWFC 03,W
06C86:  MOVWF  FEA
06C88:  BCF    FEF.0
06C8A:  CLRF   1B
06C8C:  BTFSC  FF2.7
06C8E:  BSF    1B.7
06C90:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
06C92:  MOVLB  7
06C94:  CLRF   x0B
06C96:  MOVFF  68F,70A
06C9A:  CLRF   x0D
06C9C:  MOVLW  21
06C9E:  MOVWF  x0C
06CA0:  MOVLB  0
06CA2:  CALL   035E
06CA6:  BTFSC  1B.7
06CA8:  BSF    FF2.7
06CAA:  MOVF   01,W
06CAC:  ADDLW  02
06CAE:  MOVLB  6
06CB0:  MOVWF  x90
06CB2:  MOVLW  00
06CB4:  ADDWFC 02,W
06CB6:  MOVWF  x91
06CB8:  MOVLW  01
06CBA:  ADDWF  x90,W
06CBC:  MOVWF  01
06CBE:  MOVLW  00
06CC0:  ADDWFC x91,W
06CC2:  MOVWF  03
06CC4:  MOVF   01,W
06CC6:  ADDLW  3E
06CC8:  MOVWF  01
06CCA:  MOVLW  01
06CCC:  ADDWFC 03,F
06CCE:  MOVF   01,W
06CD0:  ADDLW  07
06CD2:  MOVWF  FE9
06CD4:  MOVLW  00
06CD6:  ADDWFC 03,W
06CD8:  MOVWF  FEA
06CDA:  CLRF   FEF
....................          } 
....................          break; 
06CDC:  BRA    6CE2
....................          default: 
....................          break; 
06CDE:  MOVLB  6
06CE0:  BRA    6CE2
....................       } 
....................    } 
06CE2:  INCF   x8F,F
06CE4:  GOTO   5D68
.................... } 
06CE8:  MOVLB  0
06CEA:  GOTO   8104 (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
06CEE:  MOVLB  6
06CF0:  CLRF   x8F
06CF2:  MOVLB  1
06CF4:  MOVF   x3F,W
06CF6:  MOVLB  6
06CF8:  SUBWF  x8F,W
06CFA:  BTFSC  FD8.0
06CFC:  GOTO   7530
06D00:  CLRF   1B
06D02:  BTFSC  FF2.7
06D04:  BSF    1B.7
06D06:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
06D08:  MOVLB  7
06D0A:  CLRF   x0B
06D0C:  MOVFF  68F,70A
06D10:  CLRF   x0D
06D12:  MOVLW  2F
06D14:  MOVWF  x0C
06D16:  MOVLB  0
06D18:  CALL   035E
06D1C:  BTFSC  1B.7
06D1E:  BSF    FF2.7
06D20:  MOVFF  02,03
06D24:  MOVF   01,W
06D26:  ADDLW  8A
06D28:  MOVWF  01
06D2A:  MOVLW  02
06D2C:  ADDWFC 03,F
06D2E:  MOVFF  01,FE9
06D32:  MOVFF  03,FEA
06D36:  MOVF   FEF,W
06D38:  XORLW  66
06D3A:  BZ    6D40
06D3C:  GOTO   7528
....................            case shutter: 
06D40:  CLRF   1B
06D42:  BTFSC  FF2.7
06D44:  BSF    1B.7
06D46:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
06D48:  MOVLB  7
06D4A:  CLRF   x0B
06D4C:  MOVFF  68F,70A
06D50:  CLRF   x0D
06D52:  MOVLW  2F
06D54:  MOVWF  x0C
06D56:  MOVLB  0
06D58:  CALL   035E
06D5C:  BTFSC  1B.7
06D5E:  BSF    FF2.7
06D60:  MOVF   01,W
06D62:  ADDLW  4C
06D64:  MOVLB  6
06D66:  MOVWF  x90
06D68:  MOVLW  01
06D6A:  ADDWFC 02,W
06D6C:  MOVWF  x91
06D6E:  MOVLW  01
06D70:  ADDWF  x90,W
06D72:  MOVWF  01
06D74:  MOVLW  00
06D76:  ADDWFC x91,W
06D78:  MOVWF  03
06D7A:  MOVF   01,W
06D7C:  ADDLW  3E
06D7E:  MOVWF  01
06D80:  MOVLW  01
06D82:  ADDWFC 03,F
06D84:  MOVF   01,W
06D86:  ADDLW  2D
06D88:  MOVWF  FE9
06D8A:  MOVLW  00
06D8C:  ADDWFC 03,W
06D8E:  MOVWF  FEA
06D90:  MOVF   FEF,W
06D92:  SUBLW  04
06D94:  BTFSC  FD8.2
06D96:  BRA    7524
06D98:  CLRF   1B
06D9A:  BTFSC  FF2.7
06D9C:  BSF    1B.7
06D9E:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
06DA0:  MOVLB  7
06DA2:  CLRF   x0B
06DA4:  MOVFF  68F,70A
06DA8:  CLRF   x0D
06DAA:  MOVLW  2F
06DAC:  MOVWF  x0C
06DAE:  MOVLB  0
06DB0:  CALL   035E
06DB4:  BTFSC  1B.7
06DB6:  BSF    FF2.7
06DB8:  MOVF   01,W
06DBA:  ADDLW  4C
06DBC:  MOVLB  6
06DBE:  MOVWF  x90
06DC0:  MOVLW  01
06DC2:  ADDWFC 02,W
06DC4:  MOVWF  x91
06DC6:  MOVLW  01
06DC8:  ADDWF  x90,W
06DCA:  MOVWF  01
06DCC:  MOVLW  00
06DCE:  ADDWFC x91,W
06DD0:  MOVWF  03
06DD2:  MOVF   01,W
06DD4:  ADDLW  3E
06DD6:  MOVWF  01
06DD8:  MOVLW  01
06DDA:  ADDWFC 03,F
06DDC:  MOVF   01,W
06DDE:  ADDLW  2A
06DE0:  MOVWF  FE9
06DE2:  MOVLW  00
06DE4:  ADDWFC 03,W
06DE6:  MOVWF  FEA
06DE8:  INCF   FEF,F
06DEA:  CLRF   1B
06DEC:  BTFSC  FF2.7
06DEE:  BSF    1B.7
06DF0:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
06DF2:  MOVLB  7
06DF4:  CLRF   x0B
06DF6:  MOVFF  68F,70A
06DFA:  CLRF   x0D
06DFC:  MOVLW  2F
06DFE:  MOVWF  x0C
06E00:  MOVLB  0
06E02:  CALL   035E
06E06:  BTFSC  1B.7
06E08:  BSF    FF2.7
06E0A:  MOVF   01,W
06E0C:  ADDLW  4C
06E0E:  MOVLB  6
06E10:  MOVWF  x90
06E12:  MOVLW  01
06E14:  ADDWFC 02,W
06E16:  MOVWF  x91
06E18:  MOVLW  01
06E1A:  ADDWF  x90,W
06E1C:  MOVWF  01
06E1E:  MOVLW  00
06E20:  ADDWFC x91,W
06E22:  MOVWF  03
06E24:  MOVF   01,W
06E26:  ADDLW  3E
06E28:  MOVWF  01
06E2A:  MOVLW  01
06E2C:  ADDWFC 03,F
06E2E:  MOVF   01,W
06E30:  ADDLW  2D
06E32:  MOVWF  FE9
06E34:  MOVLW  00
06E36:  ADDWFC 03,W
06E38:  MOVWF  FEA
06E3A:  MOVF   FEF,F
06E3C:  BTFSS  FD8.2
06E3E:  BRA    6FB8
06E40:  CLRF   1B
06E42:  BTFSC  FF2.7
06E44:  BSF    1B.7
06E46:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
06E48:  MOVLB  7
06E4A:  CLRF   x0B
06E4C:  MOVFF  68F,70A
06E50:  CLRF   x0D
06E52:  MOVLW  2F
06E54:  MOVWF  x0C
06E56:  MOVLB  0
06E58:  CALL   035E
06E5C:  BTFSC  1B.7
06E5E:  BSF    FF2.7
06E60:  MOVF   01,W
06E62:  ADDLW  4C
06E64:  MOVLB  6
06E66:  MOVWF  x90
06E68:  MOVLW  01
06E6A:  ADDWFC 02,W
06E6C:  MOVWF  x91
06E6E:  MOVLW  01
06E70:  ADDWF  x90,W
06E72:  MOVWF  01
06E74:  MOVLW  00
06E76:  ADDWFC x91,W
06E78:  MOVWF  03
06E7A:  MOVF   01,W
06E7C:  ADDLW  3E
06E7E:  MOVWF  01
06E80:  MOVLW  01
06E82:  ADDWFC 03,F
06E84:  MOVF   01,W
06E86:  ADDLW  2A
06E88:  MOVWF  FE9
06E8A:  MOVLW  00
06E8C:  ADDWFC 03,W
06E8E:  MOVWF  FEA
06E90:  MOVFF  FEF,692
06E94:  CLRF   1B
06E96:  BTFSC  FF2.7
06E98:  BSF    1B.7
06E9A:  BCF    FF2.7
06E9C:  MOVLB  7
06E9E:  CLRF   x0B
06EA0:  MOVFF  68F,70A
06EA4:  CLRF   x0D
06EA6:  MOVLW  2F
06EA8:  MOVWF  x0C
06EAA:  MOVLB  0
06EAC:  CALL   035E
06EB0:  BTFSC  1B.7
06EB2:  BSF    FF2.7
06EB4:  MOVF   01,W
06EB6:  ADDLW  4C
06EB8:  MOVLB  6
06EBA:  MOVWF  x93
06EBC:  MOVLW  01
06EBE:  ADDWFC 02,W
06EC0:  MOVWF  x94
06EC2:  MOVLW  01
06EC4:  ADDWF  x93,W
06EC6:  MOVWF  01
06EC8:  MOVLW  00
06ECA:  ADDWFC x94,W
06ECC:  MOVWF  03
06ECE:  MOVF   01,W
06ED0:  ADDLW  3E
06ED2:  MOVWF  01
06ED4:  MOVLW  01
06ED6:  ADDWFC 03,F
06ED8:  MOVF   01,W
06EDA:  ADDLW  2C
06EDC:  MOVWF  FE9
06EDE:  MOVLW  00
06EE0:  ADDWFC 03,W
06EE2:  MOVWF  FEA
06EE4:  MOVF   FEF,W
06EE6:  SUBWF  x92,W
06EE8:  BZ    6FB8
06EEA:  BNC   6FB8
06EEC:  CLRF   1B
06EEE:  BTFSC  FF2.7
06EF0:  BSF    1B.7
06EF2:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
06EF4:  MOVLB  7
06EF6:  CLRF   x0B
06EF8:  MOVFF  68F,70A
06EFC:  CLRF   x0D
06EFE:  MOVLW  2F
06F00:  MOVWF  x0C
06F02:  MOVLB  0
06F04:  CALL   035E
06F08:  BTFSC  1B.7
06F0A:  BSF    FF2.7
06F0C:  MOVF   01,W
06F0E:  ADDLW  4C
06F10:  MOVLB  6
06F12:  MOVWF  x90
06F14:  MOVLW  01
06F16:  ADDWFC 02,W
06F18:  MOVWF  x91
06F1A:  MOVLW  01
06F1C:  ADDWF  x90,W
06F1E:  MOVWF  01
06F20:  MOVLW  00
06F22:  ADDWFC x91,W
06F24:  MOVWF  03
06F26:  MOVF   01,W
06F28:  ADDLW  3E
06F2A:  MOVWF  01
06F2C:  MOVLW  01
06F2E:  ADDWFC 03,F
06F30:  MOVF   01,W
06F32:  ADDLW  2D
06F34:  MOVWF  FE9
06F36:  MOVLW  00
06F38:  ADDWFC 03,W
06F3A:  MOVWF  FEA
06F3C:  MOVLW  04
06F3E:  MOVWF  FEF
06F40:  CLRF   1B
06F42:  BTFSC  FF2.7
06F44:  BSF    1B.7
06F46:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
06F48:  MOVLB  7
06F4A:  CLRF   x0B
06F4C:  MOVFF  68F,70A
06F50:  CLRF   x0D
06F52:  MOVLW  2F
06F54:  MOVWF  x0C
06F56:  MOVLB  0
06F58:  CALL   035E
06F5C:  BTFSC  1B.7
06F5E:  BSF    FF2.7
06F60:  MOVF   01,W
06F62:  ADDLW  4C
06F64:  MOVLB  6
06F66:  MOVWF  x90
06F68:  MOVLW  01
06F6A:  ADDWFC 02,W
06F6C:  MOVWF  x91
06F6E:  MOVLW  01
06F70:  ADDWF  x90,W
06F72:  MOVWF  01
06F74:  MOVLW  00
06F76:  ADDWFC x91,W
06F78:  MOVWF  03
06F7A:  MOVF   01,W
06F7C:  ADDLW  3E
06F7E:  MOVWF  01
06F80:  MOVLW  01
06F82:  ADDWFC 03,F
06F84:  MOVF   01,W
06F86:  ADDLW  28
06F88:  MOVWF  FE9
06F8A:  MOVLW  00
06F8C:  ADDWFC 03,W
06F8E:  MOVWF  FEA
06F90:  BCF    FD8.0
06F92:  RLCF   FEF,W
06F94:  CLRF   03
06F96:  MOVLB  0
06F98:  CALL   0172
06F9C:  TBLRD*+
06F9E:  MOVFF  FF5,03
06FA2:  CLRF   00
06FA4:  DECF   00,F
06FA6:  XORWF  00,F
06FA8:  MOVLW  FF
06FAA:  XORWF  03,F
06FAC:  MOVF   00,W
06FAE:  MOVLB  5
06FB0:  IORWF  x7F,F
06FB2:  MOVF   03,W
06FB4:  IORWF  x80,F
06FB6:  MOVLB  6
06FB8:  CLRF   1B
06FBA:  BTFSC  FF2.7
06FBC:  BSF    1B.7
06FBE:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
06FC0:  MOVLB  7
06FC2:  CLRF   x0B
06FC4:  MOVFF  68F,70A
06FC8:  CLRF   x0D
06FCA:  MOVLW  2F
06FCC:  MOVWF  x0C
06FCE:  MOVLB  0
06FD0:  CALL   035E
06FD4:  BTFSC  1B.7
06FD6:  BSF    FF2.7
06FD8:  MOVF   01,W
06FDA:  ADDLW  4C
06FDC:  MOVLB  6
06FDE:  MOVWF  x90
06FE0:  MOVLW  01
06FE2:  ADDWFC 02,W
06FE4:  MOVWF  x91
06FE6:  MOVLW  01
06FE8:  ADDWF  x90,W
06FEA:  MOVWF  01
06FEC:  MOVLW  00
06FEE:  ADDWFC x91,W
06FF0:  MOVWF  03
06FF2:  MOVF   01,W
06FF4:  ADDLW  3E
06FF6:  MOVWF  01
06FF8:  MOVLW  01
06FFA:  ADDWFC 03,F
06FFC:  MOVF   01,W
06FFE:  ADDLW  2D
07000:  MOVWF  FE9
07002:  MOVLW  00
07004:  ADDWFC 03,W
07006:  MOVWF  FEA
07008:  DECFSZ FEF,W
0700A:  BRA    7184
0700C:  CLRF   1B
0700E:  BTFSC  FF2.7
07010:  BSF    1B.7
07012:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
07014:  MOVLB  7
07016:  CLRF   x0B
07018:  MOVFF  68F,70A
0701C:  CLRF   x0D
0701E:  MOVLW  2F
07020:  MOVWF  x0C
07022:  MOVLB  0
07024:  CALL   035E
07028:  BTFSC  1B.7
0702A:  BSF    FF2.7
0702C:  MOVF   01,W
0702E:  ADDLW  4C
07030:  MOVLB  6
07032:  MOVWF  x90
07034:  MOVLW  01
07036:  ADDWFC 02,W
07038:  MOVWF  x91
0703A:  MOVLW  01
0703C:  ADDWF  x90,W
0703E:  MOVWF  01
07040:  MOVLW  00
07042:  ADDWFC x91,W
07044:  MOVWF  03
07046:  MOVF   01,W
07048:  ADDLW  3E
0704A:  MOVWF  01
0704C:  MOVLW  01
0704E:  ADDWFC 03,F
07050:  MOVF   01,W
07052:  ADDLW  2A
07054:  MOVWF  FE9
07056:  MOVLW  00
07058:  ADDWFC 03,W
0705A:  MOVWF  FEA
0705C:  MOVFF  FEF,692
07060:  CLRF   1B
07062:  BTFSC  FF2.7
07064:  BSF    1B.7
07066:  BCF    FF2.7
07068:  MOVLB  7
0706A:  CLRF   x0B
0706C:  MOVFF  68F,70A
07070:  CLRF   x0D
07072:  MOVLW  2F
07074:  MOVWF  x0C
07076:  MOVLB  0
07078:  CALL   035E
0707C:  BTFSC  1B.7
0707E:  BSF    FF2.7
07080:  MOVF   01,W
07082:  ADDLW  4C
07084:  MOVLB  6
07086:  MOVWF  x93
07088:  MOVLW  01
0708A:  ADDWFC 02,W
0708C:  MOVWF  x94
0708E:  MOVLW  01
07090:  ADDWF  x93,W
07092:  MOVWF  01
07094:  MOVLW  00
07096:  ADDWFC x94,W
07098:  MOVWF  03
0709A:  MOVF   01,W
0709C:  ADDLW  3E
0709E:  MOVWF  01
070A0:  MOVLW  01
070A2:  ADDWFC 03,F
070A4:  MOVF   01,W
070A6:  ADDLW  2C
070A8:  MOVWF  FE9
070AA:  MOVLW  00
070AC:  ADDWFC 03,W
070AE:  MOVWF  FEA
070B0:  MOVF   FEF,W
070B2:  SUBWF  x92,W
070B4:  BZ    7184
070B6:  BNC   7184
070B8:  CLRF   1B
070BA:  BTFSC  FF2.7
070BC:  BSF    1B.7
070BE:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
070C0:  MOVLB  7
070C2:  CLRF   x0B
070C4:  MOVFF  68F,70A
070C8:  CLRF   x0D
070CA:  MOVLW  2F
070CC:  MOVWF  x0C
070CE:  MOVLB  0
070D0:  CALL   035E
070D4:  BTFSC  1B.7
070D6:  BSF    FF2.7
070D8:  MOVF   01,W
070DA:  ADDLW  4C
070DC:  MOVLB  6
070DE:  MOVWF  x90
070E0:  MOVLW  01
070E2:  ADDWFC 02,W
070E4:  MOVWF  x91
070E6:  MOVLW  01
070E8:  ADDWF  x90,W
070EA:  MOVWF  01
070EC:  MOVLW  00
070EE:  ADDWFC x91,W
070F0:  MOVWF  03
070F2:  MOVF   01,W
070F4:  ADDLW  3E
070F6:  MOVWF  01
070F8:  MOVLW  01
070FA:  ADDWFC 03,F
070FC:  MOVF   01,W
070FE:  ADDLW  2D
07100:  MOVWF  FE9
07102:  MOVLW  00
07104:  ADDWFC 03,W
07106:  MOVWF  FEA
07108:  MOVLW  04
0710A:  MOVWF  FEF
0710C:  CLRF   1B
0710E:  BTFSC  FF2.7
07110:  BSF    1B.7
07112:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
07114:  MOVLB  7
07116:  CLRF   x0B
07118:  MOVFF  68F,70A
0711C:  CLRF   x0D
0711E:  MOVLW  2F
07120:  MOVWF  x0C
07122:  MOVLB  0
07124:  CALL   035E
07128:  BTFSC  1B.7
0712A:  BSF    FF2.7
0712C:  MOVF   01,W
0712E:  ADDLW  4C
07130:  MOVLB  6
07132:  MOVWF  x90
07134:  MOVLW  01
07136:  ADDWFC 02,W
07138:  MOVWF  x91
0713A:  MOVLW  01
0713C:  ADDWF  x90,W
0713E:  MOVWF  01
07140:  MOVLW  00
07142:  ADDWFC x91,W
07144:  MOVWF  03
07146:  MOVF   01,W
07148:  ADDLW  3E
0714A:  MOVWF  01
0714C:  MOVLW  01
0714E:  ADDWFC 03,F
07150:  MOVF   01,W
07152:  ADDLW  29
07154:  MOVWF  FE9
07156:  MOVLW  00
07158:  ADDWFC 03,W
0715A:  MOVWF  FEA
0715C:  BCF    FD8.0
0715E:  RLCF   FEF,W
07160:  CLRF   03
07162:  MOVLB  0
07164:  CALL   0172
07168:  TBLRD*+
0716A:  MOVFF  FF5,03
0716E:  CLRF   00
07170:  DECF   00,F
07172:  XORWF  00,F
07174:  MOVLW  FF
07176:  XORWF  03,F
07178:  MOVF   00,W
0717A:  MOVLB  5
0717C:  IORWF  x7F,F
0717E:  MOVF   03,W
07180:  IORWF  x80,F
07182:  MOVLB  6
07184:  CLRF   1B
07186:  BTFSC  FF2.7
07188:  BSF    1B.7
0718A:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
0718C:  MOVLB  7
0718E:  CLRF   x0B
07190:  MOVFF  68F,70A
07194:  CLRF   x0D
07196:  MOVLW  2F
07198:  MOVWF  x0C
0719A:  MOVLB  0
0719C:  CALL   035E
071A0:  BTFSC  1B.7
071A2:  BSF    FF2.7
071A4:  MOVF   01,W
071A6:  ADDLW  4C
071A8:  MOVLB  6
071AA:  MOVWF  x90
071AC:  MOVLW  01
071AE:  ADDWFC 02,W
071B0:  MOVWF  x91
071B2:  MOVLW  01
071B4:  ADDWF  x90,W
071B6:  MOVWF  01
071B8:  MOVLW  00
071BA:  ADDWFC x91,W
071BC:  MOVWF  03
071BE:  MOVF   01,W
071C0:  ADDLW  3E
071C2:  MOVWF  01
071C4:  MOVLW  01
071C6:  ADDWFC 03,F
071C8:  MOVF   01,W
071CA:  ADDLW  2D
071CC:  MOVWF  FE9
071CE:  MOVLW  00
071D0:  ADDWFC 03,W
071D2:  MOVWF  FEA
071D4:  MOVF   FEF,W
071D6:  SUBLW  02
071D8:  BTFSS  FD8.2
071DA:  BRA    7354
071DC:  CLRF   1B
071DE:  BTFSC  FF2.7
071E0:  BSF    1B.7
071E2:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
071E4:  MOVLB  7
071E6:  CLRF   x0B
071E8:  MOVFF  68F,70A
071EC:  CLRF   x0D
071EE:  MOVLW  2F
071F0:  MOVWF  x0C
071F2:  MOVLB  0
071F4:  CALL   035E
071F8:  BTFSC  1B.7
071FA:  BSF    FF2.7
071FC:  MOVF   01,W
071FE:  ADDLW  4C
07200:  MOVLB  6
07202:  MOVWF  x90
07204:  MOVLW  01
07206:  ADDWFC 02,W
07208:  MOVWF  x91
0720A:  MOVLW  01
0720C:  ADDWF  x90,W
0720E:  MOVWF  01
07210:  MOVLW  00
07212:  ADDWFC x91,W
07214:  MOVWF  03
07216:  MOVF   01,W
07218:  ADDLW  3E
0721A:  MOVWF  01
0721C:  MOVLW  01
0721E:  ADDWFC 03,F
07220:  MOVF   01,W
07222:  ADDLW  2A
07224:  MOVWF  FE9
07226:  MOVLW  00
07228:  ADDWFC 03,W
0722A:  MOVWF  FEA
0722C:  MOVFF  FEF,692
07230:  CLRF   1B
07232:  BTFSC  FF2.7
07234:  BSF    1B.7
07236:  BCF    FF2.7
07238:  MOVLB  7
0723A:  CLRF   x0B
0723C:  MOVFF  68F,70A
07240:  CLRF   x0D
07242:  MOVLW  2F
07244:  MOVWF  x0C
07246:  MOVLB  0
07248:  CALL   035E
0724C:  BTFSC  1B.7
0724E:  BSF    FF2.7
07250:  MOVF   01,W
07252:  ADDLW  4C
07254:  MOVLB  6
07256:  MOVWF  x93
07258:  MOVLW  01
0725A:  ADDWFC 02,W
0725C:  MOVWF  x94
0725E:  MOVLW  01
07260:  ADDWF  x93,W
07262:  MOVWF  01
07264:  MOVLW  00
07266:  ADDWFC x94,W
07268:  MOVWF  03
0726A:  MOVF   01,W
0726C:  ADDLW  3E
0726E:  MOVWF  01
07270:  MOVLW  01
07272:  ADDWFC 03,F
07274:  MOVF   01,W
07276:  ADDLW  2B
07278:  MOVWF  FE9
0727A:  MOVLW  00
0727C:  ADDWFC 03,W
0727E:  MOVWF  FEA
07280:  MOVF   FEF,W
07282:  SUBWF  x92,W
07284:  BZ    7354
07286:  BNC   7354
07288:  CLRF   1B
0728A:  BTFSC  FF2.7
0728C:  BSF    1B.7
0728E:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07290:  MOVLB  7
07292:  CLRF   x0B
07294:  MOVFF  68F,70A
07298:  CLRF   x0D
0729A:  MOVLW  2F
0729C:  MOVWF  x0C
0729E:  MOVLB  0
072A0:  CALL   035E
072A4:  BTFSC  1B.7
072A6:  BSF    FF2.7
072A8:  MOVF   01,W
072AA:  ADDLW  4C
072AC:  MOVLB  6
072AE:  MOVWF  x90
072B0:  MOVLW  01
072B2:  ADDWFC 02,W
072B4:  MOVWF  x91
072B6:  MOVLW  01
072B8:  ADDWF  x90,W
072BA:  MOVWF  01
072BC:  MOVLW  00
072BE:  ADDWFC x91,W
072C0:  MOVWF  03
072C2:  MOVF   01,W
072C4:  ADDLW  3E
072C6:  MOVWF  01
072C8:  MOVLW  01
072CA:  ADDWFC 03,F
072CC:  MOVF   01,W
072CE:  ADDLW  2D
072D0:  MOVWF  FE9
072D2:  MOVLW  00
072D4:  ADDWFC 03,W
072D6:  MOVWF  FEA
072D8:  MOVLW  04
072DA:  MOVWF  FEF
072DC:  CLRF   1B
072DE:  BTFSC  FF2.7
072E0:  BSF    1B.7
072E2:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
072E4:  MOVLB  7
072E6:  CLRF   x0B
072E8:  MOVFF  68F,70A
072EC:  CLRF   x0D
072EE:  MOVLW  2F
072F0:  MOVWF  x0C
072F2:  MOVLB  0
072F4:  CALL   035E
072F8:  BTFSC  1B.7
072FA:  BSF    FF2.7
072FC:  MOVF   01,W
072FE:  ADDLW  4C
07300:  MOVLB  6
07302:  MOVWF  x90
07304:  MOVLW  01
07306:  ADDWFC 02,W
07308:  MOVWF  x91
0730A:  MOVLW  01
0730C:  ADDWF  x90,W
0730E:  MOVWF  01
07310:  MOVLW  00
07312:  ADDWFC x91,W
07314:  MOVWF  03
07316:  MOVF   01,W
07318:  ADDLW  3E
0731A:  MOVWF  01
0731C:  MOVLW  01
0731E:  ADDWFC 03,F
07320:  MOVF   01,W
07322:  ADDLW  28
07324:  MOVWF  FE9
07326:  MOVLW  00
07328:  ADDWFC 03,W
0732A:  MOVWF  FEA
0732C:  BCF    FD8.0
0732E:  RLCF   FEF,W
07330:  CLRF   03
07332:  MOVLB  0
07334:  CALL   0172
07338:  TBLRD*+
0733A:  MOVFF  FF5,03
0733E:  CLRF   00
07340:  DECF   00,F
07342:  XORWF  00,F
07344:  MOVLW  FF
07346:  XORWF  03,F
07348:  MOVF   00,W
0734A:  MOVLB  5
0734C:  IORWF  x7F,F
0734E:  MOVF   03,W
07350:  IORWF  x80,F
07352:  MOVLB  6
07354:  CLRF   1B
07356:  BTFSC  FF2.7
07358:  BSF    1B.7
0735A:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
0735C:  MOVLB  7
0735E:  CLRF   x0B
07360:  MOVFF  68F,70A
07364:  CLRF   x0D
07366:  MOVLW  2F
07368:  MOVWF  x0C
0736A:  MOVLB  0
0736C:  CALL   035E
07370:  BTFSC  1B.7
07372:  BSF    FF2.7
07374:  MOVF   01,W
07376:  ADDLW  4C
07378:  MOVLB  6
0737A:  MOVWF  x90
0737C:  MOVLW  01
0737E:  ADDWFC 02,W
07380:  MOVWF  x91
07382:  MOVLW  01
07384:  ADDWF  x90,W
07386:  MOVWF  01
07388:  MOVLW  00
0738A:  ADDWFC x91,W
0738C:  MOVWF  03
0738E:  MOVF   01,W
07390:  ADDLW  3E
07392:  MOVWF  01
07394:  MOVLW  01
07396:  ADDWFC 03,F
07398:  MOVF   01,W
0739A:  ADDLW  2D
0739C:  MOVWF  FE9
0739E:  MOVLW  00
073A0:  ADDWFC 03,W
073A2:  MOVWF  FEA
073A4:  MOVF   FEF,W
073A6:  SUBLW  03
073A8:  BTFSS  FD8.2
073AA:  BRA    7524
073AC:  CLRF   1B
073AE:  BTFSC  FF2.7
073B0:  BSF    1B.7
073B2:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
073B4:  MOVLB  7
073B6:  CLRF   x0B
073B8:  MOVFF  68F,70A
073BC:  CLRF   x0D
073BE:  MOVLW  2F
073C0:  MOVWF  x0C
073C2:  MOVLB  0
073C4:  CALL   035E
073C8:  BTFSC  1B.7
073CA:  BSF    FF2.7
073CC:  MOVF   01,W
073CE:  ADDLW  4C
073D0:  MOVLB  6
073D2:  MOVWF  x90
073D4:  MOVLW  01
073D6:  ADDWFC 02,W
073D8:  MOVWF  x91
073DA:  MOVLW  01
073DC:  ADDWF  x90,W
073DE:  MOVWF  01
073E0:  MOVLW  00
073E2:  ADDWFC x91,W
073E4:  MOVWF  03
073E6:  MOVF   01,W
073E8:  ADDLW  3E
073EA:  MOVWF  01
073EC:  MOVLW  01
073EE:  ADDWFC 03,F
073F0:  MOVF   01,W
073F2:  ADDLW  2A
073F4:  MOVWF  FE9
073F6:  MOVLW  00
073F8:  ADDWFC 03,W
073FA:  MOVWF  FEA
073FC:  MOVFF  FEF,692
07400:  CLRF   1B
07402:  BTFSC  FF2.7
07404:  BSF    1B.7
07406:  BCF    FF2.7
07408:  MOVLB  7
0740A:  CLRF   x0B
0740C:  MOVFF  68F,70A
07410:  CLRF   x0D
07412:  MOVLW  2F
07414:  MOVWF  x0C
07416:  MOVLB  0
07418:  CALL   035E
0741C:  BTFSC  1B.7
0741E:  BSF    FF2.7
07420:  MOVF   01,W
07422:  ADDLW  4C
07424:  MOVLB  6
07426:  MOVWF  x93
07428:  MOVLW  01
0742A:  ADDWFC 02,W
0742C:  MOVWF  x94
0742E:  MOVLW  01
07430:  ADDWF  x93,W
07432:  MOVWF  01
07434:  MOVLW  00
07436:  ADDWFC x94,W
07438:  MOVWF  03
0743A:  MOVF   01,W
0743C:  ADDLW  3E
0743E:  MOVWF  01
07440:  MOVLW  01
07442:  ADDWFC 03,F
07444:  MOVF   01,W
07446:  ADDLW  2B
07448:  MOVWF  FE9
0744A:  MOVLW  00
0744C:  ADDWFC 03,W
0744E:  MOVWF  FEA
07450:  MOVF   FEF,W
07452:  SUBWF  x92,W
07454:  BZ    7524
07456:  BNC   7524
07458:  CLRF   1B
0745A:  BTFSC  FF2.7
0745C:  BSF    1B.7
0745E:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07460:  MOVLB  7
07462:  CLRF   x0B
07464:  MOVFF  68F,70A
07468:  CLRF   x0D
0746A:  MOVLW  2F
0746C:  MOVWF  x0C
0746E:  MOVLB  0
07470:  CALL   035E
07474:  BTFSC  1B.7
07476:  BSF    FF2.7
07478:  MOVF   01,W
0747A:  ADDLW  4C
0747C:  MOVLB  6
0747E:  MOVWF  x90
07480:  MOVLW  01
07482:  ADDWFC 02,W
07484:  MOVWF  x91
07486:  MOVLW  01
07488:  ADDWF  x90,W
0748A:  MOVWF  01
0748C:  MOVLW  00
0748E:  ADDWFC x91,W
07490:  MOVWF  03
07492:  MOVF   01,W
07494:  ADDLW  3E
07496:  MOVWF  01
07498:  MOVLW  01
0749A:  ADDWFC 03,F
0749C:  MOVF   01,W
0749E:  ADDLW  2D
074A0:  MOVWF  FE9
074A2:  MOVLW  00
074A4:  ADDWFC 03,W
074A6:  MOVWF  FEA
074A8:  MOVLW  04
074AA:  MOVWF  FEF
074AC:  CLRF   1B
074AE:  BTFSC  FF2.7
074B0:  BSF    1B.7
074B2:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
074B4:  MOVLB  7
074B6:  CLRF   x0B
074B8:  MOVFF  68F,70A
074BC:  CLRF   x0D
074BE:  MOVLW  2F
074C0:  MOVWF  x0C
074C2:  MOVLB  0
074C4:  CALL   035E
074C8:  BTFSC  1B.7
074CA:  BSF    FF2.7
074CC:  MOVF   01,W
074CE:  ADDLW  4C
074D0:  MOVLB  6
074D2:  MOVWF  x90
074D4:  MOVLW  01
074D6:  ADDWFC 02,W
074D8:  MOVWF  x91
074DA:  MOVLW  01
074DC:  ADDWF  x90,W
074DE:  MOVWF  01
074E0:  MOVLW  00
074E2:  ADDWFC x91,W
074E4:  MOVWF  03
074E6:  MOVF   01,W
074E8:  ADDLW  3E
074EA:  MOVWF  01
074EC:  MOVLW  01
074EE:  ADDWFC 03,F
074F0:  MOVF   01,W
074F2:  ADDLW  29
074F4:  MOVWF  FE9
074F6:  MOVLW  00
074F8:  ADDWFC 03,W
074FA:  MOVWF  FEA
074FC:  BCF    FD8.0
074FE:  RLCF   FEF,W
07500:  CLRF   03
07502:  MOVLB  0
07504:  CALL   0172
07508:  TBLRD*+
0750A:  MOVFF  FF5,03
0750E:  CLRF   00
07510:  DECF   00,F
07512:  XORWF  00,F
07514:  MOVLW  FF
07516:  XORWF  03,F
07518:  MOVF   00,W
0751A:  MOVLB  5
0751C:  IORWF  x7F,F
0751E:  MOVF   03,W
07520:  IORWF  x80,F
07522:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
07524:  MOVLB  0
07526:  BRA    7528
....................       } 
....................    } 
07528:  MOVLB  6
0752A:  INCF   x8F,F
0752C:  GOTO   6CF2
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
07530:  CLRF   x8F
07532:  MOVLB  1
07534:  MOVF   x3E,W
07536:  MOVLB  6
07538:  SUBWF  x8F,W
0753A:  BTFSC  FD8.0
0753C:  BRA    7C36
0753E:  CLRF   1B
07540:  BTFSC  FF2.7
07542:  BSF    1B.7
07544:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
07546:  MOVLB  7
07548:  CLRF   x0B
0754A:  MOVFF  68F,70A
0754E:  CLRF   x0D
07550:  MOVLW  21
07552:  MOVWF  x0C
07554:  MOVLB  0
07556:  CALL   035E
0755A:  BTFSC  1B.7
0755C:  BSF    FF2.7
0755E:  MOVFF  02,03
07562:  MOVF   01,W
07564:  ADDLW  40
07566:  MOVWF  01
07568:  MOVLW  01
0756A:  ADDWFC 03,F
0756C:  MOVFF  01,FE9
07570:  MOVFF  03,FEA
07574:  MOVF   FEF,W
07576:  XORLW  02
07578:  BZ    7582
0757A:  XORLW  01
0757C:  BTFSC  FD8.2
0757E:  BRA    76D4
07580:  BRA    7C30
....................          case button_switch: 
07582:  CLRF   1B
07584:  BTFSC  FF2.7
07586:  BSF    1B.7
07588:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
0758A:  MOVLB  7
0758C:  CLRF   x0B
0758E:  MOVFF  68F,70A
07592:  CLRF   x0D
07594:  MOVLW  21
07596:  MOVWF  x0C
07598:  MOVLB  0
0759A:  CALL   035E
0759E:  BTFSC  1B.7
075A0:  BSF    FF2.7
075A2:  MOVF   01,W
075A4:  ADDLW  02
075A6:  MOVLB  6
075A8:  MOVWF  x90
075AA:  MOVLW  00
075AC:  ADDWFC 02,W
075AE:  MOVWF  x91
075B0:  MOVLW  01
075B2:  ADDWF  x90,W
075B4:  MOVWF  01
075B6:  MOVLW  00
075B8:  ADDWFC x91,W
075BA:  MOVWF  03
075BC:  MOVF   01,W
075BE:  ADDLW  3E
075C0:  MOVWF  01
075C2:  MOVLW  01
075C4:  ADDWFC 03,F
075C6:  MOVF   01,W
075C8:  ADDLW  08
075CA:  MOVWF  FE9
075CC:  MOVLW  00
075CE:  ADDWFC 03,W
075D0:  MOVWF  FEA
075D2:  BTFSS  FEF.0
075D4:  BRA    76D0
075D6:  CLRF   1B
075D8:  BTFSC  FF2.7
075DA:  BSF    1B.7
075DC:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
075DE:  MOVLB  7
075E0:  CLRF   x0B
075E2:  MOVFF  68F,70A
075E6:  CLRF   x0D
075E8:  MOVLW  21
075EA:  MOVWF  x0C
075EC:  MOVLB  0
075EE:  CALL   035E
075F2:  BTFSC  1B.7
075F4:  BSF    FF2.7
075F6:  MOVF   01,W
075F8:  ADDLW  02
075FA:  MOVLB  6
075FC:  MOVWF  x90
075FE:  MOVLW  00
07600:  ADDWFC 02,W
07602:  MOVWF  x91
07604:  MOVLW  01
07606:  ADDWF  x90,W
07608:  MOVWF  01
0760A:  MOVLW  00
0760C:  ADDWFC x91,W
0760E:  MOVWF  03
07610:  MOVF   01,W
07612:  ADDLW  3E
07614:  MOVWF  01
07616:  MOVLW  01
07618:  ADDWFC 03,F
0761A:  MOVF   01,W
0761C:  ADDLW  07
0761E:  MOVWF  FE9
07620:  MOVLW  00
07622:  ADDWFC 03,W
07624:  MOVWF  FEA
07626:  MOVF   FEF,F
07628:  BNZ   76D0
0762A:  CLRF   1B
0762C:  BTFSC  FF2.7
0762E:  BSF    1B.7
07630:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
07632:  MOVLB  7
07634:  CLRF   x0B
07636:  MOVFF  68F,70A
0763A:  CLRF   x0D
0763C:  MOVLW  21
0763E:  MOVWF  x0C
07640:  MOVLB  0
07642:  CALL   035E
07646:  BTFSC  1B.7
07648:  BSF    FF2.7
0764A:  MOVF   01,W
0764C:  ADDLW  02
0764E:  MOVLB  6
07650:  MOVWF  x90
07652:  MOVLW  00
07654:  ADDWFC 02,W
07656:  MOVWF  x91
07658:  MOVLW  01
0765A:  ADDWF  x90,W
0765C:  MOVWF  01
0765E:  MOVLW  00
07660:  ADDWFC x91,W
07662:  MOVWF  03
07664:  MOVF   01,W
07666:  ADDLW  3E
07668:  MOVWF  01
0766A:  MOVLW  01
0766C:  ADDWFC 03,F
0766E:  MOVF   01,W
07670:  ADDLW  01
07672:  MOVWF  FE9
07674:  MOVLW  00
07676:  ADDWFC 03,W
07678:  MOVWF  FEA
0767A:  MOVLW  01
0767C:  MOVWF  FEF
0767E:  CLRF   1B
07680:  BTFSC  FF2.7
07682:  BSF    1B.7
07684:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
07686:  MOVLB  7
07688:  CLRF   x0B
0768A:  MOVFF  68F,70A
0768E:  CLRF   x0D
07690:  MOVLW  21
07692:  MOVWF  x0C
07694:  MOVLB  0
07696:  CALL   035E
0769A:  BTFSC  1B.7
0769C:  BSF    FF2.7
0769E:  MOVF   01,W
076A0:  ADDLW  02
076A2:  MOVLB  6
076A4:  MOVWF  x90
076A6:  MOVLW  00
076A8:  ADDWFC 02,W
076AA:  MOVWF  x91
076AC:  MOVLW  01
076AE:  ADDWF  x90,W
076B0:  MOVWF  01
076B2:  MOVLW  00
076B4:  ADDWFC x91,W
076B6:  MOVWF  03
076B8:  MOVF   01,W
076BA:  ADDLW  3E
076BC:  MOVWF  01
076BE:  MOVLW  01
076C0:  ADDWFC 03,F
076C2:  MOVF   01,W
076C4:  ADDLW  02
076C6:  MOVWF  FE9
076C8:  MOVLW  00
076CA:  ADDWFC 03,W
076CC:  MOVWF  FEA
076CE:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
076D0:  MOVLB  0
076D2:  BRA    7C30
....................          case timer: 
076D4:  CLRF   1B
076D6:  BTFSC  FF2.7
076D8:  BSF    1B.7
076DA:  BCF    FF2.7
....................           
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
076DC:  MOVLB  7
076DE:  CLRF   x0B
076E0:  MOVFF  68F,70A
076E4:  CLRF   x0D
076E6:  MOVLW  21
076E8:  MOVWF  x0C
076EA:  MOVLB  0
076EC:  CALL   035E
076F0:  BTFSC  1B.7
076F2:  BSF    FF2.7
076F4:  MOVF   01,W
076F6:  ADDLW  02
076F8:  MOVLB  6
076FA:  MOVWF  x90
076FC:  MOVLW  00
076FE:  ADDWFC 02,W
07700:  MOVWF  x91
07702:  MOVLW  01
07704:  ADDWF  x90,W
07706:  MOVWF  01
07708:  MOVLW  00
0770A:  ADDWFC x91,W
0770C:  MOVWF  03
0770E:  MOVF   01,W
07710:  ADDLW  3E
07712:  MOVWF  01
07714:  MOVLW  01
07716:  ADDWFC 03,F
07718:  MOVF   01,W
0771A:  ADDLW  1F
0771C:  MOVWF  FE9
0771E:  MOVLW  00
07720:  ADDWFC 03,W
07722:  MOVWF  FEA
07724:  BTFSS  FEF.0
07726:  BRA    7C2C
07728:  CLRF   1B
0772A:  BTFSC  FF2.7
0772C:  BSF    1B.7
0772E:  BCF    FF2.7
....................           { 
....................          // printf("ACTIVE"); 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
07730:  MOVLB  7
07732:  CLRF   x0B
07734:  MOVFF  68F,70A
07738:  CLRF   x0D
0773A:  MOVLW  21
0773C:  MOVWF  x0C
0773E:  MOVLB  0
07740:  CALL   035E
07744:  BTFSC  1B.7
07746:  BSF    FF2.7
07748:  MOVF   01,W
0774A:  ADDLW  02
0774C:  MOVLB  6
0774E:  MOVWF  x90
07750:  MOVLW  00
07752:  ADDWFC 02,W
07754:  MOVWF  x91
07756:  MOVLW  01
07758:  ADDWF  x90,W
0775A:  MOVWF  01
0775C:  MOVLW  00
0775E:  ADDWFC x91,W
07760:  MOVWF  03
07762:  MOVF   01,W
07764:  ADDLW  3E
07766:  MOVWF  01
07768:  MOVLW  01
0776A:  ADDWFC 03,F
0776C:  MOVF   01,W
0776E:  ADDLW  1D
07770:  MOVWF  FE9
07772:  MOVLW  00
07774:  ADDWFC 03,W
07776:  MOVWF  FEA
07778:  MOVLW  01
0777A:  ADDWF  FEE,F
0777C:  BNC   7780
0777E:  INCF   FEF,F
07780:  CLRF   1B
07782:  BTFSC  FF2.7
07784:  BSF    1B.7
07786:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
07788:  MOVLB  7
0778A:  CLRF   x0B
0778C:  MOVFF  68F,70A
07790:  CLRF   x0D
07792:  MOVLW  21
07794:  MOVWF  x0C
07796:  MOVLB  0
07798:  CALL   035E
0779C:  BTFSC  1B.7
0779E:  BSF    FF2.7
077A0:  MOVF   01,W
077A2:  ADDLW  02
077A4:  MOVLB  6
077A6:  MOVWF  x90
077A8:  MOVLW  00
077AA:  ADDWFC 02,W
077AC:  MOVWF  x91
077AE:  MOVLW  01
077B0:  ADDWF  x90,W
077B2:  MOVWF  01
077B4:  MOVLW  00
077B6:  ADDWFC x91,W
077B8:  MOVWF  03
077BA:  MOVF   01,W
077BC:  ADDLW  3E
077BE:  MOVWF  01
077C0:  MOVLW  01
077C2:  ADDWFC 03,F
077C4:  MOVF   01,W
077C6:  ADDLW  1D
077C8:  MOVWF  FE9
077CA:  MOVLW  00
077CC:  ADDWFC 03,W
077CE:  MOVWF  FEA
077D0:  MOVFF  FEC,693
077D4:  MOVF   FED,F
077D6:  MOVFF  FEF,692
077DA:  CLRF   1B
077DC:  BTFSC  FF2.7
077DE:  BSF    1B.7
077E0:  BCF    FF2.7
077E2:  MOVLB  7
077E4:  CLRF   x0B
077E6:  MOVFF  68F,70A
077EA:  CLRF   x0D
077EC:  MOVLW  21
077EE:  MOVWF  x0C
077F0:  MOVLB  0
077F2:  CALL   035E
077F6:  BTFSC  1B.7
077F8:  BSF    FF2.7
077FA:  MOVF   01,W
077FC:  ADDLW  02
077FE:  MOVLB  6
07800:  MOVWF  x94
07802:  MOVLW  00
07804:  ADDWFC 02,W
07806:  MOVWF  x95
07808:  MOVLW  01
0780A:  ADDWF  x94,W
0780C:  MOVWF  01
0780E:  MOVLW  00
07810:  ADDWFC x95,W
07812:  MOVWF  03
07814:  MOVF   01,W
07816:  ADDLW  3E
07818:  MOVWF  01
0781A:  MOVLW  01
0781C:  ADDWFC 03,F
0781E:  MOVF   01,W
07820:  ADDLW  01
07822:  MOVWF  FE9
07824:  MOVLW  00
07826:  ADDWFC 03,W
07828:  MOVWF  FEA
0782A:  MOVFF  FEC,03
0782E:  MOVF   FED,F
07830:  MOVFF  FEF,01
07834:  MOVF   03,W
07836:  SUBWF  x93,W
07838:  BTFSS  FD8.0
0783A:  BRA    7C2C
0783C:  BNZ   7846
0783E:  MOVF   x92,W
07840:  SUBWF  01,W
07842:  BTFSC  FD8.0
07844:  BRA    7C2C
07846:  CLRF   1B
07848:  BTFSC  FF2.7
0784A:  BSF    1B.7
0784C:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
0784E:  MOVLB  7
07850:  CLRF   x0B
07852:  MOVFF  68F,70A
07856:  CLRF   x0D
07858:  MOVLW  21
0785A:  MOVWF  x0C
0785C:  MOVLB  0
0785E:  CALL   035E
07862:  BTFSC  1B.7
07864:  BSF    FF2.7
07866:  MOVF   01,W
07868:  ADDLW  02
0786A:  MOVLB  6
0786C:  MOVWF  x90
0786E:  MOVLW  00
07870:  ADDWFC 02,W
07872:  MOVWF  x91
07874:  MOVLW  01
07876:  ADDWF  x90,W
07878:  MOVWF  01
0787A:  MOVLW  00
0787C:  ADDWFC x91,W
0787E:  MOVWF  03
07880:  MOVF   01,W
07882:  ADDLW  3E
07884:  MOVWF  01
07886:  MOVLW  01
07888:  ADDWFC 03,F
0788A:  MOVFF  01,FE9
0788E:  MOVFF  03,FEA
07892:  MOVF   FEF,F
07894:  BTFSS  FD8.2
07896:  BRA    7992
07898:  CLRF   1B
0789A:  BTFSC  FF2.7
0789C:  BSF    1B.7
0789E:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
078A0:  MOVLB  7
078A2:  CLRF   x0B
078A4:  MOVFF  68F,70A
078A8:  CLRF   x0D
078AA:  MOVLW  21
078AC:  MOVWF  x0C
078AE:  MOVLB  0
078B0:  CALL   035E
078B4:  BTFSC  1B.7
078B6:  BSF    FF2.7
078B8:  MOVF   01,W
078BA:  ADDLW  02
078BC:  MOVLB  6
078BE:  MOVWF  x90
078C0:  MOVLW  00
078C2:  ADDWFC 02,W
078C4:  MOVWF  x91
078C6:  MOVLW  01
078C8:  ADDWF  x90,W
078CA:  MOVWF  01
078CC:  MOVLW  00
078CE:  ADDWFC x91,W
078D0:  MOVWF  03
078D2:  MOVF   01,W
078D4:  ADDLW  3E
078D6:  MOVWF  01
078D8:  MOVLW  01
078DA:  ADDWFC 03,F
078DC:  MOVF   01,W
078DE:  ADDLW  04
078E0:  MOVWF  FE9
078E2:  MOVLW  00
078E4:  ADDWFC 03,W
078E6:  MOVWF  FEA
078E8:  MOVLW  01
078EA:  MOVWF  FEF
078EC:  CLRF   1B
078EE:  BTFSC  FF2.7
078F0:  BSF    1B.7
078F2:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
078F4:  MOVLB  7
078F6:  CLRF   x0B
078F8:  MOVFF  68F,70A
078FC:  CLRF   x0D
078FE:  MOVLW  21
07900:  MOVWF  x0C
07902:  MOVLB  0
07904:  CALL   035E
07908:  BTFSC  1B.7
0790A:  BSF    FF2.7
0790C:  MOVF   01,W
0790E:  ADDLW  02
07910:  MOVLB  6
07912:  MOVWF  x90
07914:  MOVLW  00
07916:  ADDWFC 02,W
07918:  MOVWF  x91
0791A:  MOVLW  01
0791C:  ADDWF  x90,W
0791E:  MOVWF  01
07920:  MOVLW  00
07922:  ADDWFC x91,W
07924:  MOVWF  03
07926:  MOVF   01,W
07928:  ADDLW  3E
0792A:  MOVWF  01
0792C:  MOVLW  01
0792E:  ADDWFC 03,F
07930:  MOVF   01,W
07932:  ADDLW  05
07934:  MOVWF  FE9
07936:  MOVLW  00
07938:  ADDWFC 03,W
0793A:  MOVWF  FEA
0793C:  BSF    FEF.0
0793E:  CLRF   1B
07940:  BTFSC  FF2.7
07942:  BSF    1B.7
07944:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07946:  MOVLB  7
07948:  CLRF   x0B
0794A:  MOVFF  68F,70A
0794E:  CLRF   x0D
07950:  MOVLW  21
07952:  MOVWF  x0C
07954:  MOVLB  0
07956:  CALL   035E
0795A:  BTFSC  1B.7
0795C:  BSF    FF2.7
0795E:  MOVF   01,W
07960:  ADDLW  02
07962:  MOVLB  6
07964:  MOVWF  x90
07966:  MOVLW  00
07968:  ADDWFC 02,W
0796A:  MOVWF  x91
0796C:  MOVLW  01
0796E:  ADDWF  x90,W
07970:  MOVWF  01
07972:  MOVLW  00
07974:  ADDWFC x91,W
07976:  MOVWF  03
07978:  MOVF   01,W
0797A:  ADDLW  3E
0797C:  MOVWF  01
0797E:  MOVLW  01
07980:  ADDWFC 03,F
07982:  MOVF   01,W
07984:  ADDLW  1F
07986:  MOVWF  FE9
07988:  MOVLW  00
0798A:  ADDWFC 03,W
0798C:  MOVWF  FEA
0798E:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
07990:  BRA    7C2C
07992:  CLRF   1B
07994:  BTFSC  FF2.7
07996:  BSF    1B.7
07998:  BCF    FF2.7
0799A:  MOVLB  7
0799C:  CLRF   x0B
0799E:  MOVFF  68F,70A
079A2:  CLRF   x0D
079A4:  MOVLW  21
079A6:  MOVWF  x0C
079A8:  MOVLB  0
079AA:  CALL   035E
079AE:  BTFSC  1B.7
079B0:  BSF    FF2.7
079B2:  MOVF   01,W
079B4:  ADDLW  02
079B6:  MOVLB  6
079B8:  MOVWF  x90
079BA:  MOVLW  00
079BC:  ADDWFC 02,W
079BE:  MOVWF  x91
079C0:  MOVLW  01
079C2:  ADDWF  x90,W
079C4:  MOVWF  01
079C6:  MOVLW  00
079C8:  ADDWFC x91,W
079CA:  MOVWF  03
079CC:  MOVF   01,W
079CE:  ADDLW  3E
079D0:  MOVWF  01
079D2:  MOVLW  01
079D4:  ADDWFC 03,F
079D6:  MOVFF  01,FE9
079DA:  MOVFF  03,FEA
079DE:  DECFSZ FEF,W
079E0:  BRA    7ADC
079E2:  CLRF   1B
079E4:  BTFSC  FF2.7
079E6:  BSF    1B.7
079E8:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
079EA:  MOVLB  7
079EC:  CLRF   x0B
079EE:  MOVFF  68F,70A
079F2:  CLRF   x0D
079F4:  MOVLW  21
079F6:  MOVWF  x0C
079F8:  MOVLB  0
079FA:  CALL   035E
079FE:  BTFSC  1B.7
07A00:  BSF    FF2.7
07A02:  MOVF   01,W
07A04:  ADDLW  02
07A06:  MOVLB  6
07A08:  MOVWF  x90
07A0A:  MOVLW  00
07A0C:  ADDWFC 02,W
07A0E:  MOVWF  x91
07A10:  MOVLW  01
07A12:  ADDWF  x90,W
07A14:  MOVWF  01
07A16:  MOVLW  00
07A18:  ADDWFC x91,W
07A1A:  MOVWF  03
07A1C:  MOVF   01,W
07A1E:  ADDLW  3E
07A20:  MOVWF  01
07A22:  MOVLW  01
07A24:  ADDWFC 03,F
07A26:  MOVF   01,W
07A28:  ADDLW  07
07A2A:  MOVWF  FE9
07A2C:  MOVLW  00
07A2E:  ADDWFC 03,W
07A30:  MOVWF  FEA
07A32:  MOVLW  01
07A34:  MOVWF  FEF
07A36:  CLRF   1B
07A38:  BTFSC  FF2.7
07A3A:  BSF    1B.7
07A3C:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
07A3E:  MOVLB  7
07A40:  CLRF   x0B
07A42:  MOVFF  68F,70A
07A46:  CLRF   x0D
07A48:  MOVLW  21
07A4A:  MOVWF  x0C
07A4C:  MOVLB  0
07A4E:  CALL   035E
07A52:  BTFSC  1B.7
07A54:  BSF    FF2.7
07A56:  MOVF   01,W
07A58:  ADDLW  02
07A5A:  MOVLB  6
07A5C:  MOVWF  x90
07A5E:  MOVLW  00
07A60:  ADDWFC 02,W
07A62:  MOVWF  x91
07A64:  MOVLW  01
07A66:  ADDWF  x90,W
07A68:  MOVWF  01
07A6A:  MOVLW  00
07A6C:  ADDWFC x91,W
07A6E:  MOVWF  03
07A70:  MOVF   01,W
07A72:  ADDLW  3E
07A74:  MOVWF  01
07A76:  MOVLW  01
07A78:  ADDWFC 03,F
07A7A:  MOVF   01,W
07A7C:  ADDLW  08
07A7E:  MOVWF  FE9
07A80:  MOVLW  00
07A82:  ADDWFC 03,W
07A84:  MOVWF  FEA
07A86:  BSF    FEF.0
07A88:  CLRF   1B
07A8A:  BTFSC  FF2.7
07A8C:  BSF    1B.7
07A8E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07A90:  MOVLB  7
07A92:  CLRF   x0B
07A94:  MOVFF  68F,70A
07A98:  CLRF   x0D
07A9A:  MOVLW  21
07A9C:  MOVWF  x0C
07A9E:  MOVLB  0
07AA0:  CALL   035E
07AA4:  BTFSC  1B.7
07AA6:  BSF    FF2.7
07AA8:  MOVF   01,W
07AAA:  ADDLW  02
07AAC:  MOVLB  6
07AAE:  MOVWF  x90
07AB0:  MOVLW  00
07AB2:  ADDWFC 02,W
07AB4:  MOVWF  x91
07AB6:  MOVLW  01
07AB8:  ADDWF  x90,W
07ABA:  MOVWF  01
07ABC:  MOVLW  00
07ABE:  ADDWFC x91,W
07AC0:  MOVWF  03
07AC2:  MOVF   01,W
07AC4:  ADDLW  3E
07AC6:  MOVWF  01
07AC8:  MOVLW  01
07ACA:  ADDWFC 03,F
07ACC:  MOVF   01,W
07ACE:  ADDLW  1F
07AD0:  MOVWF  FE9
07AD2:  MOVLW  00
07AD4:  ADDWFC 03,W
07AD6:  MOVWF  FEA
07AD8:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
07ADA:  BRA    7C2C
07ADC:  CLRF   1B
07ADE:  BTFSC  FF2.7
07AE0:  BSF    1B.7
07AE2:  BCF    FF2.7
07AE4:  MOVLB  7
07AE6:  CLRF   x0B
07AE8:  MOVFF  68F,70A
07AEC:  CLRF   x0D
07AEE:  MOVLW  21
07AF0:  MOVWF  x0C
07AF2:  MOVLB  0
07AF4:  CALL   035E
07AF8:  BTFSC  1B.7
07AFA:  BSF    FF2.7
07AFC:  MOVF   01,W
07AFE:  ADDLW  02
07B00:  MOVLB  6
07B02:  MOVWF  x90
07B04:  MOVLW  00
07B06:  ADDWFC 02,W
07B08:  MOVWF  x91
07B0A:  MOVLW  01
07B0C:  ADDWF  x90,W
07B0E:  MOVWF  01
07B10:  MOVLW  00
07B12:  ADDWFC x91,W
07B14:  MOVWF  03
07B16:  MOVF   01,W
07B18:  ADDLW  3E
07B1A:  MOVWF  01
07B1C:  MOVLW  01
07B1E:  ADDWFC 03,F
07B20:  MOVFF  01,FE9
07B24:  MOVFF  03,FEA
07B28:  MOVF   FEF,W
07B2A:  SUBLW  02
07B2C:  BTFSS  FD8.2
07B2E:  BRA    7C2C
07B30:  CLRF   1B
07B32:  BTFSC  FF2.7
07B34:  BSF    1B.7
07B36:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07B38:  MOVLB  7
07B3A:  CLRF   x0B
07B3C:  MOVFF  68F,70A
07B40:  CLRF   x0D
07B42:  MOVLW  21
07B44:  MOVWF  x0C
07B46:  MOVLB  0
07B48:  CALL   035E
07B4C:  BTFSC  1B.7
07B4E:  BSF    FF2.7
07B50:  MOVF   01,W
07B52:  ADDLW  02
07B54:  MOVLB  6
07B56:  MOVWF  x90
07B58:  MOVLW  00
07B5A:  ADDWFC 02,W
07B5C:  MOVWF  x91
07B5E:  MOVLW  01
07B60:  ADDWF  x90,W
07B62:  MOVWF  01
07B64:  MOVLW  00
07B66:  ADDWFC x91,W
07B68:  MOVWF  03
07B6A:  MOVF   01,W
07B6C:  ADDLW  3E
07B6E:  MOVWF  01
07B70:  MOVLW  01
07B72:  ADDWFC 03,F
07B74:  MOVF   01,W
07B76:  ADDLW  04
07B78:  MOVWF  FE9
07B7A:  MOVLW  00
07B7C:  ADDWFC 03,W
07B7E:  MOVWF  FEA
07B80:  MOVLW  01
07B82:  MOVWF  FEF
07B84:  CLRF   1B
07B86:  BTFSC  FF2.7
07B88:  BSF    1B.7
07B8A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
07B8C:  MOVLB  7
07B8E:  CLRF   x0B
07B90:  MOVFF  68F,70A
07B94:  CLRF   x0D
07B96:  MOVLW  21
07B98:  MOVWF  x0C
07B9A:  MOVLB  0
07B9C:  CALL   035E
07BA0:  BTFSC  1B.7
07BA2:  BSF    FF2.7
07BA4:  MOVF   01,W
07BA6:  ADDLW  02
07BA8:  MOVLB  6
07BAA:  MOVWF  x90
07BAC:  MOVLW  00
07BAE:  ADDWFC 02,W
07BB0:  MOVWF  x91
07BB2:  MOVLW  01
07BB4:  ADDWF  x90,W
07BB6:  MOVWF  01
07BB8:  MOVLW  00
07BBA:  ADDWFC x91,W
07BBC:  MOVWF  03
07BBE:  MOVF   01,W
07BC0:  ADDLW  3E
07BC2:  MOVWF  01
07BC4:  MOVLW  01
07BC6:  ADDWFC 03,F
07BC8:  MOVF   01,W
07BCA:  ADDLW  05
07BCC:  MOVWF  FE9
07BCE:  MOVLW  00
07BD0:  ADDWFC 03,W
07BD2:  MOVWF  FEA
07BD4:  BSF    FEF.0
07BD6:  CLRF   1B
07BD8:  BTFSC  FF2.7
07BDA:  BSF    1B.7
07BDC:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
07BDE:  MOVLB  7
07BE0:  CLRF   x0B
07BE2:  MOVFF  68F,70A
07BE6:  CLRF   x0D
07BE8:  MOVLW  21
07BEA:  MOVWF  x0C
07BEC:  MOVLB  0
07BEE:  CALL   035E
07BF2:  BTFSC  1B.7
07BF4:  BSF    FF2.7
07BF6:  MOVF   01,W
07BF8:  ADDLW  02
07BFA:  MOVLB  6
07BFC:  MOVWF  x90
07BFE:  MOVLW  00
07C00:  ADDWFC 02,W
07C02:  MOVWF  x91
07C04:  MOVLW  01
07C06:  ADDWF  x90,W
07C08:  MOVWF  01
07C0A:  MOVLW  00
07C0C:  ADDWFC x91,W
07C0E:  MOVWF  03
07C10:  MOVF   01,W
07C12:  ADDLW  3E
07C14:  MOVWF  01
07C16:  MOVLW  01
07C18:  ADDWFC 03,F
07C1A:  MOVF   01,W
07C1C:  ADDLW  1D
07C1E:  MOVWF  FE9
07C20:  MOVLW  00
07C22:  ADDWFC 03,W
07C24:  MOVWF  FEA
07C26:  CLRF   FEC
07C28:  MOVF   FED,F
07C2A:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
07C2C:  MOVLB  0
07C2E:  BRA    7C30
....................       } 
....................    } 
07C30:  MOVLB  6
07C32:  INCF   x8F,F
07C34:  BRA    7532
.................... } 
07C36:  MOVLB  0
07C38:  GOTO   8112 (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
....................    while(!kbhit()) 
....................    { 
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
....................       delay_us(10); 
....................    } 
.................... } 
.................... void testOutputs() 
.................... { 
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
....................    while(loop) 
....................    { 
....................    while(!kbhit()){} 
....................    char c=getc(); 
....................    switch(c) 
....................    { 
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
....................          portd=(MAKE8(light_pins[0],0)); 
....................       break; 
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
....................          portd=(MAKE8(light_pins[1],0)); 
....................       break; 
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
....................          portd=(MAKE8(light_pins[2],0)); 
....................       break; 
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
....................          portd=(MAKE8(light_pins[3],0)); 
....................       break; 
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
....................          portd=(MAKE8(light_pins[4],0)); 
....................       break; 
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
....................          portd=(MAKE8(light_pins[5],0)); 
....................       break; 
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
....................          portd=(MAKE8(light_pins[6],0)); 
....................       break; 
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
....................          portd=(MAKE8(light_pins[7],0)); 
....................       break; 
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
....................          portd=(MAKE8(light_pins[8],0)); 
....................       break; 
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
....................          portd=(MAKE8(light_pins[9],0)); 
....................       break; 
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
....................          portd=(MAKE8(light_pins[10],0)); 
....................       break; 
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
....................          portd=(MAKE8(light_pins[11],0)); 
....................       break; 
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
....................          portd=(MAKE8(light_pins[12],0)); 
....................       break; 
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
....................          portd=(MAKE8(light_pins[13],0)); 
....................       break; 
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
....................          portd=(MAKE8(light_pins[14],0)); 
....................       break; 
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
....................          portd=(MAKE8(light_pins[15],0)); 
....................       break; 
....................       case 'x': 
....................          loop=false; 
....................          portc=0xFF; 
....................          portd=0xFF; 
....................       break; 
....................    } 
....................    } 
.................... } 
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
....................       printf("1-Test inputs\n\r"); 
....................       printf("2-Test outputs\n\r"); 
....................       while(!kbhit()){} 
....................       char c=getc(); 
....................       if(c=='1') 
....................          testInputs(); 
....................       else if(c=='2') 
....................          testOutputs(); 
....................       else if(c=='x') 
....................       { 
....................          setup_wdt(WDT_ON); 
....................          enable_interrupts (GLOBAL) ; 
....................          return; 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
....................  
....................  
.................... _write_eeprom(unsigned int16 adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%Lu value=%d\n\r",adress,value); 
.................... #endif 
....................    write_eeprom(adress,value); 
*
01D74:  MOVFF  6A5,FAA
01D78:  MOVFF  6A4,FA9
01D7C:  MOVFF  6A6,FA8
01D80:  BCF    FA6.6
01D82:  BCF    FA6.7
01D84:  BSF    FA6.2
01D86:  MOVF   FF2,W
01D88:  MOVWF  00
01D8A:  BCF    FF2.7
01D8C:  MOVLB  F
01D8E:  MOVLW  55
01D90:  MOVWF  FA7
01D92:  MOVLW  AA
01D94:  MOVWF  FA7
01D96:  BSF    FA6.1
01D98:  BTFSC  FA6.1
01D9A:  BRA    1D98
01D9C:  BCF    FA6.2
01D9E:  MOVF   00,W
01DA0:  IORWF  FF2,F
.................... } 
01DA2:  MOVLB  0
01DA4:  RETLW  00
....................  
.................... unsigned int16 writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
02568:  MOVLB  6
0256A:  CLRF   xEF
0256C:  MOVF   xEE,W
0256E:  SUBWF  xEF,W
02570:  BC    25B0
....................    { 
....................       *array=read_eeprom(memAdress+x); 
02572:  MOVFF  6EB,03
02576:  MOVF   xEA,W
02578:  MOVWF  FE9
0257A:  MOVFF  03,FEA
0257E:  MOVF   xEF,W
02580:  ADDWF  xEC,W
02582:  MOVWF  xF2
02584:  MOVLW  00
02586:  ADDWFC xED,W
02588:  MOVWF  xF3
0258A:  MOVFF  FF2,6F4
0258E:  BCF    FF2.7
02590:  MOVFF  6F3,FAA
02594:  MOVFF  6F2,FA9
02598:  BCF    FA6.6
0259A:  BCF    FA6.7
0259C:  BSF    FA6.0
0259E:  MOVF   FA8,W
025A0:  BTFSC  xF4.7
025A2:  BSF    FF2.7
025A4:  MOVWF  FEF
....................       ++array; 
025A6:  INCF   xEA,F
025A8:  BTFSC  FD8.2
025AA:  INCF   xEB,F
....................    } 
025AC:  INCF   xEF,F
025AE:  BRA    256C
.................... } 
025B0:  MOVLB  0
025B2:  RETLW  00
.................... void ArrayToMem(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
01E0C:  MOVLB  6
01E0E:  CLRF   xA0
01E10:  MOVF   x9F,W
01E12:  SUBWF  xA0,W
01E14:  BC    1E4C
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
01E16:  MOVF   xA0,W
01E18:  ADDWF  x9D,W
01E1A:  MOVWF  xA1
01E1C:  MOVLW  00
01E1E:  ADDWFC x9E,W
01E20:  MOVWF  xA2
01E22:  MOVFF  69C,03
01E26:  MOVFF  69B,FE9
01E2A:  MOVFF  69C,FEA
01E2E:  MOVFF  FEF,6A3
01E32:  MOVWF  xA5
01E34:  MOVFF  6A1,6A4
01E38:  MOVFF  6A3,6A6
01E3C:  MOVLB  0
01E3E:  RCALL  1D74
....................       ++array; 
01E40:  MOVLB  6
01E42:  INCF   x9B,F
01E44:  BTFSC  FD8.2
01E46:  INCF   x9C,F
....................    } 
01E48:  INCF   xA0,F
01E4A:  BRA    1E10
.................... } 
01E4C:  MOVLB  0
01E4E:  RETLW  00
.................... void readDevices() 
.................... { 
*
02CC8:  MOVLB  6
02CCA:  CLRF   x90
02CCC:  CLRF   x8F
02CCE:  CLRF   x91
02CD0:  CLRF   x92
....................    unsigned int16 mempointer=MEM_OFFSET; 
....................    unsigned int inputNumber=0; 
....................    unsigned int outputNumber=0; 
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02CD2:  MOVFF  FF2,6EA
02CD6:  BCF    FF2.7
02CD8:  MOVFF  690,FAA
02CDC:  MOVFF  68F,FA9
02CE0:  BCF    FA6.6
02CE2:  BCF    FA6.7
02CE4:  BSF    FA6.0
02CE6:  MOVF   FA8,W
02CE8:  BTFSC  xEA.7
02CEA:  BSF    FF2.7
02CEC:  SUBLW  FF
02CEE:  BTFSC  FD8.2
02CF0:  BRA    34CA
....................       switch(read_eeprom(mempointer)) 
....................       { 
02CF2:  MOVFF  FF2,6EA
02CF6:  BCF    FF2.7
02CF8:  MOVFF  690,FAA
02CFC:  MOVFF  68F,FA9
02D00:  BCF    FA6.6
02D02:  BCF    FA6.7
02D04:  BSF    FA6.0
02D06:  MOVF   FA8,W
02D08:  BTFSC  xEA.7
02D0A:  BSF    FF2.7
02D0C:  XORLW  01
02D0E:  MOVLB  0
02D10:  BZ    2D36
02D12:  XORLW  01
02D14:  BZ    2DFC
02D16:  XORLW  02
02D18:  BTFSC  FD8.2
02D1A:  BRA    2EE8
02D1C:  XORLW  01
02D1E:  BTFSC  FD8.2
02D20:  BRA    2FE0
02D22:  XORLW  66
02D24:  BTFSC  FD8.2
02D26:  BRA    3154
02D28:  XORLW  03
02D2A:  BTFSC  FD8.2
02D2C:  BRA    3254
02D2E:  XORLW  02
02D30:  BTFSC  FD8.2
02D32:  BRA    33F2
02D34:  BRA    34C6
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02D36:  MOVLB  6
02D38:  INCF   x8F,F
02D3A:  BTFSC  FD8.2
02D3C:  INCF   x90,F
02D3E:  MOVFF  FF2,6EA
02D42:  BCF    FF2.7
02D44:  MOVFF  690,FAA
02D48:  MOVFF  68F,FA9
02D4C:  BCF    FA6.6
02D4E:  BCF    FA6.7
02D50:  BSF    FA6.0
02D52:  MOVF   FA8,W
02D54:  BTFSC  xEA.7
02D56:  BSF    FF2.7
02D58:  MOVWF  x93
02D5A:  INCF   x8F,F
02D5C:  BTFSC  FD8.2
02D5E:  INCF   x90,F
02D60:  MOVFF  FF2,6EB
02D64:  BCF    FF2.7
02D66:  MOVFF  690,FAA
02D6A:  MOVFF  68F,FA9
02D6E:  BCF    FA6.6
02D70:  BCF    FA6.7
02D72:  BSF    FA6.0
02D74:  MOVF   FA8,W
02D76:  BTFSC  xEB.7
02D78:  BSF    FF2.7
02D7A:  MOVWF  x94
02D7C:  INCF   x8F,F
02D7E:  BTFSC  FD8.2
02D80:  INCF   x90,F
02D82:  MOVFF  FF2,6EC
02D86:  BCF    FF2.7
02D88:  MOVFF  690,FAA
02D8C:  MOVFF  68F,FA9
02D90:  BCF    FA6.6
02D92:  BCF    FA6.7
02D94:  BSF    FA6.0
02D96:  MOVF   FA8,W
02D98:  BTFSC  xEC.7
02D9A:  BSF    FF2.7
02D9C:  MOVWF  x95
02D9E:  CLRF   1B
02DA0:  BTFSC  FF2.7
02DA2:  BSF    1B.7
02DA4:  BCF    FF2.7
....................             //printf("on/off %d %d %d",on_adr,off_adr,real_button); 
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02DA6:  MOVLB  7
02DA8:  CLRF   x0B
02DAA:  MOVFF  691,70A
02DAE:  CLRF   x0D
02DB0:  MOVLW  21
02DB2:  MOVWF  x0C
02DB4:  MOVLB  0
02DB6:  CALL   035E
02DBA:  BTFSC  1B.7
02DBC:  BSF    FF2.7
02DBE:  MOVFF  02,03
02DC2:  MOVF   01,W
02DC4:  ADDLW  40
02DC6:  MOVWF  01
02DC8:  MOVLW  01
02DCA:  ADDWFC 03,F
02DCC:  MOVFF  01,6EA
02DD0:  MOVFF  03,6EB
02DD4:  MOVFF  693,6EC
02DD8:  MOVFF  694,6ED
02DDC:  MOVFF  03,6EF
02DE0:  MOVFF  01,6EE
02DE4:  MOVFF  695,6F0
02DE8:  MOVLB  0
02DEA:  GOTO   22E8
....................             ++inputNumber; 
02DEE:  MOVLB  6
02DF0:  INCF   x91,F
....................             ++mempointer; 
02DF2:  INCF   x8F,F
02DF4:  BTFSC  FD8.2
02DF6:  INCF   x90,F
....................          break; 
02DF8:  MOVLB  0
02DFA:  BRA    34C6
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
02DFC:  MOVLB  6
02DFE:  INCF   x8F,F
02E00:  BTFSC  FD8.2
02E02:  INCF   x90,F
02E04:  MOVFF  FF2,6EA
02E08:  BCF    FF2.7
02E0A:  MOVFF  690,FAA
02E0E:  MOVFF  68F,FA9
02E12:  BCF    FA6.6
02E14:  BCF    FA6.7
02E16:  BSF    FA6.0
02E18:  MOVF   FA8,W
02E1A:  BTFSC  xEA.7
02E1C:  BSF    FF2.7
02E1E:  MOVWF  x96
....................             on_adr=read_eeprom(++mempointer); 
02E20:  INCF   x8F,F
02E22:  BTFSC  FD8.2
02E24:  INCF   x90,F
02E26:  MOVFF  FF2,6EA
02E2A:  BCF    FF2.7
02E2C:  MOVFF  690,FAA
02E30:  MOVFF  68F,FA9
02E34:  BCF    FA6.6
02E36:  BCF    FA6.7
02E38:  BSF    FA6.0
02E3A:  MOVF   FA8,W
02E3C:  BTFSC  xEA.7
02E3E:  BSF    FF2.7
02E40:  MOVWF  x93
....................             off_adr=read_eeprom(++mempointer); 
02E42:  INCF   x8F,F
02E44:  BTFSC  FD8.2
02E46:  INCF   x90,F
02E48:  MOVFF  FF2,6EA
02E4C:  BCF    FF2.7
02E4E:  MOVFF  690,FAA
02E52:  MOVFF  68F,FA9
02E56:  BCF    FA6.6
02E58:  BCF    FA6.7
02E5A:  BSF    FA6.0
02E5C:  MOVF   FA8,W
02E5E:  BTFSC  xEA.7
02E60:  BSF    FF2.7
02E62:  MOVWF  x94
....................             real_button=read_eeprom(++mempointer); 
02E64:  INCF   x8F,F
02E66:  BTFSC  FD8.2
02E68:  INCF   x90,F
02E6A:  MOVFF  FF2,6EA
02E6E:  BCF    FF2.7
02E70:  MOVFF  690,FAA
02E74:  MOVFF  68F,FA9
02E78:  BCF    FA6.6
02E7A:  BCF    FA6.7
02E7C:  BSF    FA6.0
02E7E:  MOVF   FA8,W
02E80:  BTFSC  xEA.7
02E82:  BSF    FF2.7
02E84:  MOVWF  x95
02E86:  CLRF   1B
02E88:  BTFSC  FF2.7
02E8A:  BSF    1B.7
02E8C:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
02E8E:  MOVLB  7
02E90:  CLRF   x0B
02E92:  MOVFF  691,70A
02E96:  CLRF   x0D
02E98:  MOVLW  21
02E9A:  MOVWF  x0C
02E9C:  MOVLB  0
02E9E:  CALL   035E
02EA2:  BTFSC  1B.7
02EA4:  BSF    FF2.7
02EA6:  MOVFF  02,03
02EAA:  MOVF   01,W
02EAC:  ADDLW  40
02EAE:  MOVWF  01
02EB0:  MOVLW  01
02EB2:  ADDWFC 03,F
02EB4:  MOVFF  01,6EA
02EB8:  MOVFF  03,6EB
02EBC:  MOVFF  696,6EC
02EC0:  MOVFF  693,6ED
02EC4:  MOVFF  694,6EE
02EC8:  MOVFF  03,6F0
02ECC:  MOVFF  01,6EF
02ED0:  MOVFF  695,6F1
02ED4:  MOVLB  0
02ED6:  GOTO   2342
....................             ++inputNumber; 
02EDA:  MOVLB  6
02EDC:  INCF   x91,F
....................             ++mempointer; 
02EDE:  INCF   x8F,F
02EE0:  BTFSC  FD8.2
02EE2:  INCF   x90,F
....................          break; 
02EE4:  MOVLB  0
02EE6:  BRA    34C6
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
02EE8:  MOVLB  6
02EEA:  INCF   x8F,F
02EEC:  BTFSC  FD8.2
02EEE:  INCF   x90,F
02EF0:  MOVFF  FF2,6EA
02EF4:  BCF    FF2.7
02EF6:  MOVFF  690,FAA
02EFA:  MOVFF  68F,FA9
02EFE:  BCF    FA6.6
02F00:  BCF    FA6.7
02F02:  BSF    FA6.0
02F04:  MOVF   FA8,W
02F06:  BTFSC  xEA.7
02F08:  BSF    FF2.7
02F0A:  MOVWF  x93
....................             off_adr=read_eeprom(++mempointer); 
02F0C:  INCF   x8F,F
02F0E:  BTFSC  FD8.2
02F10:  INCF   x90,F
02F12:  MOVFF  FF2,6EA
02F16:  BCF    FF2.7
02F18:  MOVFF  690,FAA
02F1C:  MOVFF  68F,FA9
02F20:  BCF    FA6.6
02F22:  BCF    FA6.7
02F24:  BSF    FA6.0
02F26:  MOVF   FA8,W
02F28:  BTFSC  xEA.7
02F2A:  BSF    FF2.7
02F2C:  MOVWF  x94
....................             real_button=read_eeprom(++mempointer); 
02F2E:  INCF   x8F,F
02F30:  BTFSC  FD8.2
02F32:  INCF   x90,F
02F34:  MOVFF  FF2,6EA
02F38:  BCF    FF2.7
02F3A:  MOVFF  690,FAA
02F3E:  MOVFF  68F,FA9
02F42:  BCF    FA6.6
02F44:  BCF    FA6.7
02F46:  BSF    FA6.0
02F48:  MOVF   FA8,W
02F4A:  BTFSC  xEA.7
02F4C:  BSF    FF2.7
02F4E:  MOVWF  x95
....................             int1 repeat=read_eeprom(++mempointer); 
02F50:  INCF   x8F,F
02F52:  BTFSC  FD8.2
02F54:  INCF   x90,F
02F56:  MOVFF  FF2,6EA
02F5A:  BCF    FF2.7
02F5C:  MOVFF  690,FAA
02F60:  MOVFF  68F,FA9
02F64:  BCF    FA6.6
02F66:  BCF    FA6.7
02F68:  BSF    FA6.0
02F6A:  MOVF   FA8,W
02F6C:  BTFSC  xEA.7
02F6E:  BSF    FF2.7
02F70:  MOVWF  01
02F72:  BCF    x97.0
02F74:  BTFSC  01.0
02F76:  BSF    x97.0
02F78:  CLRF   1B
02F7A:  BTFSC  FF2.7
02F7C:  BSF    1B.7
02F7E:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
02F80:  MOVLB  7
02F82:  CLRF   x0B
02F84:  MOVFF  691,70A
02F88:  CLRF   x0D
02F8A:  MOVLW  21
02F8C:  MOVWF  x0C
02F8E:  MOVLB  0
02F90:  CALL   035E
02F94:  BTFSC  1B.7
02F96:  BSF    FF2.7
02F98:  MOVFF  02,03
02F9C:  MOVF   01,W
02F9E:  ADDLW  40
02FA0:  MOVWF  01
02FA2:  MOVLW  01
02FA4:  ADDWFC 03,F
02FA6:  MOVFF  01,6EA
02FAA:  MOVLB  6
02FAC:  MOVFF  03,6EB
02FB0:  MOVLW  00
02FB2:  BTFSC  x97.0
02FB4:  MOVLW  01
02FB6:  MOVFF  693,6ED
02FBA:  MOVFF  694,6EE
02FBE:  MOVFF  03,6F0
02FC2:  MOVFF  01,6EF
02FC6:  MOVFF  695,6F1
02FCA:  MOVWF  xF2
02FCC:  MOVLB  0
02FCE:  GOTO   2506
....................             ++inputNumber; 
02FD2:  MOVLB  6
02FD4:  INCF   x91,F
....................             ++mempointer; 
02FD6:  INCF   x8F,F
02FD8:  BTFSC  FD8.2
02FDA:  INCF   x90,F
....................          break; 
02FDC:  MOVLB  0
02FDE:  BRA    34C6
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
.................... #endif 
....................             ++mempointer; 
02FE0:  MOVLB  6
02FE2:  INCF   x8F,F
02FE4:  BTFSC  FD8.2
02FE6:  INCF   x90,F
....................             unsigned int start_adr[8]; 
....................           //  printf("EEPROM start %d %Lu\n\r",read_eeprom(mempointer),mempointer); 
....................             memToArray(start_adr,mempointer,8); 
02FE8:  MOVLW  06
02FEA:  MOVWF  xEB
02FEC:  MOVLW  98
02FEE:  MOVWF  xEA
02FF0:  MOVFF  690,6ED
02FF4:  MOVFF  68F,6EC
02FF8:  MOVLW  08
02FFA:  MOVWF  xEE
02FFC:  MOVLB  0
02FFE:  CALL   2568
....................             mempointer+=8; 
03002:  MOVLW  08
03004:  MOVLB  6
03006:  ADDWF  x8F,F
03008:  MOVLW  00
0300A:  ADDWFC x90,F
....................             unsigned int stop_adr[8]; 
....................           //  printf("EEPROM stop %d\n\r",read_eeprom(mempointer)); 
....................             memToArray(stop_adr,mempointer,8); 
0300C:  MOVLW  06
0300E:  MOVWF  xEB
03010:  MOVLW  A0
03012:  MOVWF  xEA
03014:  MOVFF  690,6ED
03018:  MOVFF  68F,6EC
0301C:  MOVLW  08
0301E:  MOVWF  xEE
03020:  MOVLB  0
03022:  CALL   2568
....................             mempointer+=8;           
03026:  MOVLW  08
03028:  MOVLB  6
0302A:  ADDWF  x8F,F
0302C:  MOVLW  00
0302E:  ADDWFC x90,F
....................             unsigned int out_on=read_eeprom(mempointer); 
....................           //  printf("EEPROM on %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................           //  printf("EEPROM off %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
03030:  MOVFF  FF2,6EA
03034:  BCF    FF2.7
03036:  MOVFF  690,FAA
0303A:  MOVFF  68F,FA9
0303E:  BCF    FA6.6
03040:  BCF    FA6.7
03042:  BSF    FA6.0
03044:  MOVF   FA8,W
03046:  BTFSC  xEA.7
03048:  BSF    FF2.7
0304A:  MOVWF  xA8
0304C:  INCF   x8F,F
0304E:  BTFSC  FD8.2
03050:  INCF   x90,F
03052:  MOVFF  FF2,6EB
03056:  BCF    FF2.7
03058:  MOVFF  690,FAA
0305C:  MOVFF  68F,FA9
03060:  BCF    FA6.6
03062:  BCF    FA6.7
03064:  BSF    FA6.0
03066:  MOVF   FA8,W
03068:  BTFSC  xEB.7
0306A:  BSF    FF2.7
0306C:  MOVWF  xA9
0306E:  INCF   x8F,F
03070:  BTFSC  FD8.2
03072:  INCF   x90,F
03074:  MOVFF  FF2,6EC
03078:  BCF    FF2.7
0307A:  MOVFF  690,FAA
0307E:  MOVFF  68F,FA9
03082:  BCF    FA6.6
03084:  BCF    FA6.7
03086:  BSF    FA6.0
03088:  MOVF   FA8,W
0308A:  BTFSC  xEC.7
0308C:  BSF    FF2.7
0308E:  MOVWF  xAA
03090:  INCF   x8F,F
03092:  BTFSC  FD8.2
03094:  INCF   x90,F
03096:  MOVFF  FF2,6ED
0309A:  BCF    FF2.7
0309C:  MOVFF  690,FAA
030A0:  MOVFF  68F,FA9
030A4:  BCF    FA6.6
030A6:  BCF    FA6.7
030A8:  BSF    FA6.0
030AA:  MOVF   FA8,W
030AC:  BTFSC  xED.7
030AE:  BSF    FF2.7
030B0:  CLRF   xAC
030B2:  MOVWF  xAB
....................             timeToAct<<=8; 
030B4:  MOVFF  6AB,6AC
030B8:  CLRF   xAB
....................             timeToAct|=read_eeprom(++mempointer); 
030BA:  INCF   x8F,F
030BC:  BTFSC  FD8.2
030BE:  INCF   x90,F
030C0:  MOVFF  FF2,6EA
030C4:  BCF    FF2.7
030C6:  MOVFF  690,FAA
030CA:  MOVFF  68F,FA9
030CE:  BCF    FA6.6
030D0:  BCF    FA6.7
030D2:  BSF    FA6.0
030D4:  MOVF   FA8,W
030D6:  BTFSC  xEA.7
030D8:  BSF    FF2.7
030DA:  IORWF  xAB,F
030DC:  CLRF   1B
030DE:  BTFSC  FF2.7
030E0:  BSF    1B.7
030E2:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
030E4:  MOVLB  7
030E6:  CLRF   x0B
030E8:  MOVFF  691,70A
030EC:  CLRF   x0D
030EE:  MOVLW  21
030F0:  MOVWF  x0C
030F2:  MOVLB  0
030F4:  CALL   035E
030F8:  BTFSC  1B.7
030FA:  BSF    FF2.7
030FC:  MOVFF  02,03
03100:  MOVF   01,W
03102:  ADDLW  40
03104:  MOVWF  01
03106:  MOVLW  01
03108:  ADDWFC 03,F
0310A:  MOVFF  01,6EA
0310E:  MOVLB  6
03110:  MOVFF  03,6EB
03114:  MOVLW  06
03116:  MOVWF  xED
03118:  MOVLW  98
0311A:  MOVWF  xEC
0311C:  MOVLW  06
0311E:  MOVWF  xEF
03120:  MOVLW  A0
03122:  MOVWF  xEE
03124:  MOVFF  6A8,6F0
03128:  MOVFF  6A9,6F1
0312C:  MOVFF  03,6F3
03130:  MOVFF  01,6F2
03134:  MOVFF  6AA,6F4
03138:  MOVFF  6AC,6F6
0313C:  MOVFF  6AB,6F5
03140:  MOVLB  0
03142:  GOTO   25FA
....................             ++inputNumber; 
03146:  MOVLB  6
03148:  INCF   x91,F
....................             ++mempointer; 
0314A:  INCF   x8F,F
0314C:  BTFSC  FD8.2
0314E:  INCF   x90,F
....................          break; 
03150:  MOVLB  0
03152:  BRA    34C6
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(_dim_adr,mempointer,8); 
03154:  MOVLW  06
03156:  MOVLB  6
03158:  MOVWF  xEB
0315A:  MOVLW  AD
0315C:  MOVWF  xEA
0315E:  MOVFF  690,6ED
03162:  MOVFF  68F,6EC
03166:  MOVLW  08
03168:  MOVWF  xEE
0316A:  MOVLB  0
0316C:  CALL   2568
....................             mempointer+=8; 
03170:  MOVLW  08
03172:  MOVLB  6
03174:  ADDWF  x8F,F
03176:  MOVLW  00
03178:  ADDWFC x90,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(_on_adr,mempointer,8); 
0317A:  MOVLW  06
0317C:  MOVWF  xEB
0317E:  MOVLW  B5
03180:  MOVWF  xEA
03182:  MOVFF  690,6ED
03186:  MOVFF  68F,6EC
0318A:  MOVLW  08
0318C:  MOVWF  xEE
0318E:  MOVLB  0
03190:  CALL   2568
....................             mempointer+=8;   
03194:  MOVLW  08
03196:  MOVLB  6
03198:  ADDWF  x8F,F
0319A:  MOVLW  00
0319C:  ADDWFC x90,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(_off_adr,mempointer,8); 
0319E:  MOVLW  06
031A0:  MOVWF  xEB
031A2:  MOVLW  BD
031A4:  MOVWF  xEA
031A6:  MOVFF  690,6ED
031AA:  MOVFF  68F,6EC
031AE:  MOVLW  08
031B0:  MOVWF  xEE
031B2:  MOVLB  0
031B4:  CALL   2568
....................             mempointer+=8;   
031B8:  MOVLW  08
031BA:  MOVLB  6
031BC:  ADDWF  x8F,F
031BE:  MOVLW  00
031C0:  ADDWFC x90,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
031C2:  INCF   x8F,F
031C4:  BTFSC  FD8.2
031C6:  INCF   x90,F
031C8:  MOVFF  FF2,6EA
031CC:  BCF    FF2.7
031CE:  MOVFF  690,FAA
031D2:  MOVFF  68F,FA9
031D6:  BCF    FA6.6
031D8:  BCF    FA6.7
031DA:  BSF    FA6.0
031DC:  MOVF   FA8,W
031DE:  BTFSC  xEA.7
031E0:  BSF    FF2.7
031E2:  MOVWF  xC5
031E4:  CLRF   1B
031E6:  BTFSC  FF2.7
031E8:  BSF    1B.7
031EA:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
031EC:  MOVLB  7
031EE:  CLRF   x0B
031F0:  MOVFF  692,70A
031F4:  CLRF   x0D
031F6:  MOVLW  2F
031F8:  MOVWF  x0C
031FA:  MOVLB  0
031FC:  CALL   035E
03200:  BTFSC  1B.7
03202:  BSF    FF2.7
03204:  MOVFF  02,03
03208:  MOVF   01,W
0320A:  ADDLW  8A
0320C:  MOVWF  01
0320E:  MOVLW  02
03210:  ADDWFC 03,F
03212:  MOVFF  01,6EA
03216:  MOVLB  6
03218:  MOVFF  03,6EB
0321C:  MOVLW  06
0321E:  MOVWF  xED
03220:  MOVLW  AD
03222:  MOVWF  xEC
03224:  MOVLW  06
03226:  MOVWF  xEF
03228:  MOVLW  B5
0322A:  MOVWF  xEE
0322C:  MOVLW  06
0322E:  MOVWF  xF1
03230:  MOVLW  BD
03232:  MOVWF  xF0
03234:  MOVFF  03,6F3
03238:  MOVFF  01,6F2
0323C:  MOVFF  6C5,6F4
03240:  MOVLB  0
03242:  GOTO   27F4
....................             ++outputNumber; 
03246:  MOVLB  6
03248:  INCF   x92,F
....................             ++mempointer; 
0324A:  INCF   x8F,F
0324C:  BTFSC  FD8.2
0324E:  INCF   x90,F
....................          break; 
03250:  MOVLB  0
03252:  BRA    34C6
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
03254:  MOVLW  06
03256:  MOVLB  6
03258:  MOVWF  xEB
0325A:  MOVLW  C6
0325C:  MOVWF  xEA
0325E:  MOVFF  690,6ED
03262:  MOVFF  68F,6EC
03266:  MOVLW  08
03268:  MOVWF  xEE
0326A:  MOVLB  0
0326C:  CALL   2568
....................             mempointer+=8; 
03270:  MOVLW  08
03272:  MOVLB  6
03274:  ADDWF  x8F,F
03276:  MOVLW  00
03278:  ADDWFC x90,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
0327A:  MOVLW  06
0327C:  MOVWF  xEB
0327E:  MOVLW  CE
03280:  MOVWF  xEA
03282:  MOVFF  690,6ED
03286:  MOVFF  68F,6EC
0328A:  MOVLW  08
0328C:  MOVWF  xEE
0328E:  MOVLB  0
03290:  CALL   2568
....................             mempointer+=8;   
03294:  MOVLW  08
03296:  MOVLB  6
03298:  ADDWF  x8F,F
0329A:  MOVLW  00
0329C:  ADDWFC x90,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
0329E:  MOVLW  06
032A0:  MOVWF  xEB
032A2:  MOVLW  D6
032A4:  MOVWF  xEA
032A6:  MOVFF  690,6ED
032AA:  MOVFF  68F,6EC
032AE:  MOVLW  08
032B0:  MOVWF  xEE
032B2:  MOVLB  0
032B4:  CALL   2568
....................             mempointer+=8;   
032B8:  MOVLW  08
032BA:  MOVLB  6
032BC:  ADDWF  x8F,F
032BE:  MOVLW  00
032C0:  ADDWFC x90,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
032C2:  MOVLW  06
032C4:  MOVWF  xEB
032C6:  MOVLW  DE
032C8:  MOVWF  xEA
032CA:  MOVFF  690,6ED
032CE:  MOVFF  68F,6EC
032D2:  MOVLW  08
032D4:  MOVWF  xEE
032D6:  MOVLB  0
032D8:  CALL   2568
....................             mempointer+=8; 
032DC:  MOVLW  08
032DE:  MOVLB  6
032E0:  ADDWF  x8F,F
032E2:  MOVLW  00
032E4:  ADDWFC x90,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
032E6:  INCF   x8F,F
032E8:  BTFSC  FD8.2
032EA:  INCF   x90,F
032EC:  MOVFF  FF2,6EA
032F0:  BCF    FF2.7
032F2:  MOVFF  690,FAA
032F6:  MOVFF  68F,FA9
032FA:  BCF    FA6.6
032FC:  BCF    FA6.7
032FE:  BSF    FA6.0
03300:  MOVF   FA8,W
03302:  BTFSC  xEA.7
03304:  BSF    FF2.7
03306:  MOVWF  xE6
03308:  INCF   x8F,F
0330A:  BTFSC  FD8.2
0330C:  INCF   x90,F
0330E:  MOVFF  FF2,6EB
03312:  BCF    FF2.7
03314:  MOVFF  690,FAA
03318:  MOVFF  68F,FA9
0331C:  BCF    FA6.6
0331E:  BCF    FA6.7
03320:  BSF    FA6.0
03322:  MOVF   FA8,W
03324:  BTFSC  xEB.7
03326:  BSF    FF2.7
03328:  MOVWF  xE7
0332A:  INCF   x8F,F
0332C:  BTFSC  FD8.2
0332E:  INCF   x90,F
03330:  MOVFF  FF2,6EC
03334:  BCF    FF2.7
03336:  MOVFF  690,FAA
0333A:  MOVFF  68F,FA9
0333E:  BCF    FA6.6
03340:  BCF    FA6.7
03342:  BSF    FA6.0
03344:  MOVF   FA8,W
03346:  BTFSC  xEC.7
03348:  BSF    FF2.7
0334A:  MOVWF  xE8
0334C:  INCF   x8F,F
0334E:  BTFSC  FD8.2
03350:  INCF   x90,F
03352:  MOVFF  FF2,6ED
03356:  BCF    FF2.7
03358:  MOVFF  690,FAA
0335C:  MOVFF  68F,FA9
03360:  BCF    FA6.6
03362:  BCF    FA6.7
03364:  BSF    FA6.0
03366:  MOVF   FA8,W
03368:  BTFSC  xED.7
0336A:  BSF    FF2.7
0336C:  MOVWF  xE9
0336E:  CLRF   1B
03370:  BTFSC  FF2.7
03372:  BSF    1B.7
03374:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
03376:  MOVLB  7
03378:  CLRF   x0B
0337A:  MOVFF  692,70A
0337E:  CLRF   x0D
03380:  MOVLW  2F
03382:  MOVWF  x0C
03384:  MOVLB  0
03386:  CALL   035E
0338A:  BTFSC  1B.7
0338C:  BSF    FF2.7
0338E:  MOVFF  02,03
03392:  MOVF   01,W
03394:  ADDLW  8A
03396:  MOVWF  01
03398:  MOVLW  02
0339A:  ADDWFC 03,F
0339C:  MOVFF  01,6EA
033A0:  MOVLB  6
033A2:  MOVFF  03,6EB
033A6:  MOVLW  06
033A8:  MOVWF  xED
033AA:  MOVLW  C6
033AC:  MOVWF  xEC
033AE:  MOVLW  06
033B0:  MOVWF  xEF
033B2:  MOVLW  CE
033B4:  MOVWF  xEE
033B6:  MOVLW  06
033B8:  MOVWF  xF1
033BA:  MOVLW  D6
033BC:  MOVWF  xF0
033BE:  MOVLW  06
033C0:  MOVWF  xF3
033C2:  MOVLW  DE
033C4:  MOVWF  xF2
033C6:  MOVFF  03,6F5
033CA:  MOVFF  01,6F4
033CE:  MOVFF  6E6,6F6
033D2:  MOVFF  6E7,6F7
033D6:  MOVFF  6E8,6F8
033DA:  MOVFF  6E9,6F9
033DE:  MOVLB  0
033E0:  GOTO   2980
....................             ++outputNumber; 
033E4:  MOVLB  6
033E6:  INCF   x92,F
....................             ++mempointer; 
033E8:  INCF   x8F,F
033EA:  BTFSC  FD8.2
033EC:  INCF   x90,F
....................          break; 
033EE:  MOVLB  0
033F0:  BRA    34C6
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
033F2:  MOVLW  06
033F4:  MOVLB  6
033F6:  MOVWF  xEB
033F8:  MOVLW  B5
033FA:  MOVWF  xEA
033FC:  MOVFF  690,6ED
03400:  MOVFF  68F,6EC
03404:  MOVLW  08
03406:  MOVWF  xEE
03408:  MOVLB  0
0340A:  CALL   2568
....................             mempointer+=8;   
0340E:  MOVLW  08
03410:  MOVLB  6
03412:  ADDWF  x8F,F
03414:  MOVLW  00
03416:  ADDWFC x90,F
....................             memToArray(_off_adr,mempointer,8); 
03418:  MOVLW  06
0341A:  MOVWF  xEB
0341C:  MOVLW  BD
0341E:  MOVWF  xEA
03420:  MOVFF  690,6ED
03424:  MOVFF  68F,6EC
03428:  MOVLW  08
0342A:  MOVWF  xEE
0342C:  MOVLB  0
0342E:  CALL   2568
....................             mempointer+=8;   
03432:  MOVLW  08
03434:  MOVLB  6
03436:  ADDWF  x8F,F
03438:  MOVLW  00
0343A:  ADDWFC x90,F
....................             output_pin=read_eeprom(++mempointer); 
0343C:  INCF   x8F,F
0343E:  BTFSC  FD8.2
03440:  INCF   x90,F
03442:  MOVFF  FF2,6EA
03446:  BCF    FF2.7
03448:  MOVFF  690,FAA
0344C:  MOVFF  68F,FA9
03450:  BCF    FA6.6
03452:  BCF    FA6.7
03454:  BSF    FA6.0
03456:  MOVF   FA8,W
03458:  BTFSC  xEA.7
0345A:  BSF    FF2.7
0345C:  MOVWF  xC5
0345E:  CLRF   1B
03460:  BTFSC  FF2.7
03462:  BSF    1B.7
03464:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
03466:  MOVLB  7
03468:  CLRF   x0B
0346A:  MOVFF  692,70A
0346E:  CLRF   x0D
03470:  MOVLW  2F
03472:  MOVWF  x0C
03474:  MOVLB  0
03476:  CALL   035E
0347A:  BTFSC  1B.7
0347C:  BSF    FF2.7
0347E:  MOVFF  02,03
03482:  MOVF   01,W
03484:  ADDLW  8A
03486:  MOVWF  01
03488:  MOVLW  02
0348A:  ADDWFC 03,F
0348C:  MOVFF  01,6EA
03490:  MOVLB  6
03492:  MOVFF  03,6EB
03496:  MOVLW  06
03498:  MOVWF  xED
0349A:  MOVLW  B5
0349C:  MOVWF  xEC
0349E:  MOVLW  06
034A0:  MOVWF  xEF
034A2:  MOVLW  BD
034A4:  MOVWF  xEE
034A6:  MOVFF  03,6F1
034AA:  MOVFF  01,6F0
034AE:  MOVFF  6C5,6F2
034B2:  MOVLB  0
034B4:  GOTO   2BCC
....................             ++outputNumber; 
034B8:  MOVLB  6
034BA:  INCF   x92,F
....................             ++mempointer; 
034BC:  INCF   x8F,F
034BE:  BTFSC  FD8.2
034C0:  INCF   x90,F
....................          break; 
034C2:  MOVLB  0
034C4:  BRA    34C6
....................       } 
....................     
....................    } 
034C6:  MOVLB  6
034C8:  BRA    2CD2
....................    mydevices.numberOfInputs=inputNumber; 
034CA:  MOVFF  691,13E
....................    mydevices.numberOfOutputs=outputNumber; 
034CE:  MOVFF  692,13F
....................     
.................... } 
034D2:  MOVLB  0
034D4:  GOTO   80C8 (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
....................    _write_eeprom(++writeMemPointer,dim_adr); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    ++writeMemPointer; 
....................     
.................... } 
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
01DA6:  MOVFF  63A,6A5
01DAA:  MOVFF  639,6A4
01DAE:  MOVLW  01
01DB0:  MOVLB  6
01DB2:  MOVWF  xA6
01DB4:  MOVLB  0
01DB6:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,on_adr); 
01DB8:  MOVLB  6
01DBA:  INCF   x39,F
01DBC:  BTFSC  FD8.2
01DBE:  INCF   x3A,F
01DC0:  MOVFF  63A,6A5
01DC4:  MOVFF  639,6A4
01DC8:  MOVFF  68F,6A6
01DCC:  MOVLB  0
01DCE:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,off_adr); 
01DD0:  MOVLB  6
01DD2:  INCF   x39,F
01DD4:  BTFSC  FD8.2
01DD6:  INCF   x3A,F
01DD8:  MOVFF  63A,6A5
01DDC:  MOVFF  639,6A4
01DE0:  MOVFF  690,6A6
01DE4:  MOVLB  0
01DE6:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,real_button); 
01DE8:  MOVLB  6
01DEA:  INCF   x39,F
01DEC:  BTFSC  FD8.2
01DEE:  INCF   x3A,F
01DF0:  MOVFF  63A,6A5
01DF4:  MOVFF  639,6A4
01DF8:  MOVFF  691,6A6
01DFC:  MOVLB  0
01DFE:  RCALL  1D74
....................    ++writeMemPointer; 
01E00:  MOVLB  6
01E02:  INCF   x39,F
01E04:  BTFSC  FD8.2
01E06:  INCF   x3A,F
.................... } 
01E08:  MOVLB  0
01E0A:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
*
02162:  MOVFF  63A,6A5
02166:  MOVFF  639,6A4
0216A:  MOVLW  02
0216C:  MOVLB  6
0216E:  MOVWF  xA6
02170:  MOVLB  0
02172:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,on_adr); 
02174:  MOVLB  6
02176:  INCF   x39,F
02178:  BTFSC  FD8.2
0217A:  INCF   x3A,F
0217C:  MOVFF  63A,6A5
02180:  MOVFF  639,6A4
02184:  MOVFF  68F,6A6
02188:  MOVLB  0
0218A:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,off_adr); 
0218C:  MOVLB  6
0218E:  INCF   x39,F
02190:  BTFSC  FD8.2
02192:  INCF   x3A,F
02194:  MOVFF  63A,6A5
02198:  MOVFF  639,6A4
0219C:  MOVFF  690,6A6
021A0:  MOVLB  0
021A2:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,real_button); 
021A4:  MOVLB  6
021A6:  INCF   x39,F
021A8:  BTFSC  FD8.2
021AA:  INCF   x3A,F
021AC:  MOVFF  63A,6A5
021B0:  MOVFF  639,6A4
021B4:  MOVFF  691,6A6
021B8:  MOVLB  0
021BA:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,repeat); 
021BC:  MOVLB  6
021BE:  INCF   x39,F
021C0:  BTFSC  FD8.2
021C2:  INCF   x3A,F
021C4:  MOVFF  63A,6A5
021C8:  MOVFF  639,6A4
021CC:  MOVFF  692,6A6
021D0:  MOVLB  0
021D2:  RCALL  1D74
....................     
....................    ++writeMemPointer; 
021D4:  MOVLB  6
021D6:  INCF   x39,F
021D8:  BTFSC  FD8.2
021DA:  INCF   x3A,F
.................... } 
021DC:  MOVLB  0
021DE:  RETLW  00
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
....................    ++writeMemPointer; 
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(on_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(off_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,output_pin); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
01E50:  MOVFF  63A,6A5
01E54:  MOVFF  639,6A4
01E58:  MOVLW  64
01E5A:  MOVLB  6
01E5C:  MOVWF  xA6
01E5E:  MOVLB  0
01E60:  RCALL  1D74
....................    ++writeMemPointer; 
01E62:  MOVLB  6
01E64:  INCF   x39,F
01E66:  BTFSC  FD8.2
01E68:  INCF   x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
01E6A:  MOVFF  690,69C
01E6E:  MOVFF  68F,69B
01E72:  MOVFF  63A,69E
01E76:  MOVFF  639,69D
01E7A:  MOVLW  08
01E7C:  MOVWF  x9F
01E7E:  MOVLB  0
01E80:  RCALL  1E0C
....................    writeMemPointer+=8; 
01E82:  MOVLW  08
01E84:  MOVLB  6
01E86:  ADDWF  x39,F
01E88:  MOVLW  00
01E8A:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
01E8C:  MOVFF  692,69C
01E90:  MOVFF  691,69B
01E94:  MOVFF  63A,69E
01E98:  MOVFF  639,69D
01E9C:  MOVLW  08
01E9E:  MOVWF  x9F
01EA0:  MOVLB  0
01EA2:  RCALL  1E0C
....................    writeMemPointer+=8; 
01EA4:  MOVLW  08
01EA6:  MOVLB  6
01EA8:  ADDWF  x39,F
01EAA:  MOVLW  00
01EAC:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
01EAE:  MOVFF  63A,6A5
01EB2:  MOVFF  639,6A4
01EB6:  MOVFF  693,6A6
01EBA:  MOVLB  0
01EBC:  RCALL  1D74
....................    ++writeMemPointer; 
01EBE:  MOVLB  6
01EC0:  INCF   x39,F
01EC2:  BTFSC  FD8.2
01EC4:  INCF   x3A,F
.................... } 
01EC6:  MOVLB  0
01EC8:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
*
021E0:  MOVFF  63A,6A5
021E4:  MOVFF  639,6A4
021E8:  MOVLW  66
021EA:  MOVLB  6
021EC:  MOVWF  xA6
021EE:  MOVLB  0
021F0:  RCALL  1D74
....................    ++writeMemPointer; 
021F2:  MOVLB  6
021F4:  INCF   x39,F
021F6:  BTFSC  FD8.2
021F8:  INCF   x3A,F
....................    ArrayToMem(up_adr,writeMemPointer,8); 
021FA:  MOVFF  690,69C
021FE:  MOVFF  68F,69B
02202:  MOVFF  63A,69E
02206:  MOVFF  639,69D
0220A:  MOVLW  08
0220C:  MOVWF  x9F
0220E:  MOVLB  0
02210:  RCALL  1E0C
....................    writeMemPointer+=8; 
02212:  MOVLW  08
02214:  MOVLB  6
02216:  ADDWF  x39,F
02218:  MOVLW  00
0221A:  ADDWFC x3A,F
....................    ArrayToMem(down_adr,writeMemPointer,8); 
0221C:  MOVFF  692,69C
02220:  MOVFF  691,69B
02224:  MOVFF  63A,69E
02228:  MOVFF  639,69D
0222C:  MOVLW  08
0222E:  MOVWF  x9F
02230:  MOVLB  0
02232:  RCALL  1E0C
....................    writeMemPointer+=8; 
02234:  MOVLW  08
02236:  MOVLB  6
02238:  ADDWF  x39,F
0223A:  MOVLW  00
0223C:  ADDWFC x3A,F
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
0223E:  MOVFF  694,69C
02242:  MOVFF  693,69B
02246:  MOVFF  63A,69E
0224A:  MOVFF  639,69D
0224E:  MOVLW  08
02250:  MOVWF  x9F
02252:  MOVLB  0
02254:  RCALL  1E0C
....................    writeMemPointer+=8; 
02256:  MOVLW  08
02258:  MOVLB  6
0225A:  ADDWF  x39,F
0225C:  MOVLW  00
0225E:  ADDWFC x3A,F
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
02260:  MOVFF  696,69C
02264:  MOVFF  695,69B
02268:  MOVFF  63A,69E
0226C:  MOVFF  639,69D
02270:  MOVLW  08
02272:  MOVWF  x9F
02274:  MOVLB  0
02276:  RCALL  1E0C
....................    writeMemPointer+=8; 
02278:  MOVLW  08
0227A:  MOVLB  6
0227C:  ADDWF  x39,F
0227E:  MOVLW  00
02280:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,up_output_pin); 
02282:  MOVFF  63A,6A5
02286:  MOVFF  639,6A4
0228A:  MOVFF  697,6A6
0228E:  MOVLB  0
02290:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
02292:  MOVLB  6
02294:  INCF   x39,F
02296:  BTFSC  FD8.2
02298:  INCF   x3A,F
0229A:  MOVFF  63A,6A5
0229E:  MOVFF  639,6A4
022A2:  MOVFF  698,6A6
022A6:  MOVLB  0
022A8:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
022AA:  MOVLB  6
022AC:  INCF   x39,F
022AE:  BTFSC  FD8.2
022B0:  INCF   x3A,F
022B2:  MOVFF  63A,6A5
022B6:  MOVFF  639,6A4
022BA:  MOVFF  699,6A6
022BE:  MOVLB  0
022C0:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
022C2:  MOVLB  6
022C4:  INCF   x39,F
022C6:  BTFSC  FD8.2
022C8:  INCF   x3A,F
022CA:  MOVFF  63A,6A5
022CE:  MOVFF  639,6A4
022D2:  MOVFF  69A,6A6
022D6:  MOVLB  0
022D8:  RCALL  1D74
....................    ++writeMemPointer; 
022DA:  MOVLB  6
022DC:  INCF   x39,F
022DE:  BTFSC  FD8.2
022E0:  INCF   x3A,F
.................... } 
022E2:  MOVLB  0
022E4:  GOTO   8034 (RETURN)
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    _write_eeprom(writeMemPointer,timer); 
*
0204E:  MOVFF  63A,6A5
02052:  MOVFF  639,6A4
02056:  MOVLW  03
02058:  MOVLB  6
0205A:  MOVWF  xA6
0205C:  MOVLB  0
0205E:  RCALL  1D74
....................       ++writeMemPointer; 
02060:  MOVLB  6
02062:  INCF   x39,F
02064:  BTFSC  FD8.2
02066:  INCF   x3A,F
....................    ArrayToMem(start_adr,writeMemPointer,8); 
02068:  MOVFF  690,69C
0206C:  MOVFF  68F,69B
02070:  MOVFF  63A,69E
02074:  MOVFF  639,69D
02078:  MOVLW  08
0207A:  MOVWF  x9F
0207C:  MOVLB  0
0207E:  RCALL  1E0C
....................    printf("Start adr=%d",start_adr[0]); 
02080:  MOVLB  6
02082:  MOVFF  68F,FE9
02086:  MOVFF  690,FEA
0208A:  MOVFF  FEF,698
0208E:  MOVLW  2C
02090:  MOVWF  FF6
02092:  MOVLW  03
02094:  MOVWF  FF7
02096:  MOVLW  00
02098:  MOVWF  FF8
0209A:  MOVLW  0A
0209C:  MOVWF  x99
0209E:  MOVLB  0
020A0:  BRA    1F10
020A2:  MOVFF  698,699
020A6:  MOVLW  1F
020A8:  MOVLB  6
020AA:  MOVWF  x9A
020AC:  MOVLB  0
020AE:  BRA    1F6E
....................    writeMemPointer+=8; 
020B0:  MOVLW  08
020B2:  MOVLB  6
020B4:  ADDWF  x39,F
020B6:  MOVLW  00
020B8:  ADDWFC x3A,F
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
020BA:  MOVFF  692,69C
020BE:  MOVFF  691,69B
020C2:  MOVFF  63A,69E
020C6:  MOVFF  639,69D
020CA:  MOVLW  08
020CC:  MOVWF  x9F
020CE:  MOVLB  0
020D0:  RCALL  1E0C
....................    writeMemPointer+=8; 
020D2:  MOVLW  08
020D4:  MOVLB  6
020D6:  ADDWF  x39,F
020D8:  MOVLW  00
020DA:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,out_on); 
020DC:  MOVFF  63A,6A5
020E0:  MOVFF  639,6A4
020E4:  MOVFF  693,6A6
020E8:  MOVLB  0
020EA:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,out_off); 
020EC:  MOVLB  6
020EE:  INCF   x39,F
020F0:  BTFSC  FD8.2
020F2:  INCF   x3A,F
020F4:  MOVFF  63A,6A5
020F8:  MOVFF  639,6A4
020FC:  MOVFF  694,6A6
02100:  MOVLB  0
02102:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,type); 
02104:  MOVLB  6
02106:  INCF   x39,F
02108:  BTFSC  FD8.2
0210A:  INCF   x3A,F
0210C:  MOVFF  63A,6A5
02110:  MOVFF  639,6A4
02114:  MOVFF  695,6A6
02118:  MOVLB  0
0211A:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
0211C:  MOVLB  6
0211E:  INCF   x39,F
02120:  BTFSC  FD8.2
02122:  INCF   x3A,F
02124:  MOVFF  697,698
02128:  MOVFF  63A,6A5
0212C:  MOVFF  639,6A4
02130:  MOVFF  697,6A6
02134:  MOVLB  0
02136:  RCALL  1D74
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
02138:  MOVLB  6
0213A:  INCF   x39,F
0213C:  BTFSC  FD8.2
0213E:  INCF   x3A,F
02140:  MOVFF  696,698
02144:  MOVFF  63A,6A5
02148:  MOVFF  639,6A4
0214C:  MOVFF  696,6A6
02150:  MOVLB  0
02152:  RCALL  1D74
....................    ++writeMemPointer; 
02154:  MOVLB  6
02156:  INCF   x39,F
02158:  BTFSC  FD8.2
0215A:  INCF   x3A,F
.................... } 
0215C:  MOVLB  0
0215E:  GOTO   7F1A (RETURN)
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... volatile unsigned int1 oscError=0; 
....................  
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
007D6:  MOVLW  06
007D8:  MOVLB  7
007DA:  ADDWF  x0C,W
007DC:  MOVWF  FE9
007DE:  MOVLW  00
007E0:  ADDWFC x0D,W
007E2:  MOVWF  FEA
007E4:  MOVLW  00
007E6:  BTFSC  FEF.0
007E8:  MOVLW  01
007EA:  ANDLW  01
007EC:  BNZ   08CA
007EE:  MOVLW  06
007F0:  ADDWF  x0C,W
007F2:  MOVWF  FE9
007F4:  MOVLW  00
007F6:  ADDWFC x0D,W
007F8:  MOVWF  FEA
007FA:  MOVLW  00
007FC:  BTFSC  FEF.1
007FE:  MOVLW  01
00800:  ANDLW  01
00802:  SUBLW  01
00804:  BNZ   08CA
....................    {    
....................       sw-> previous_state = button_pressed; 
00806:  MOVLW  06
00808:  ADDWF  x0C,W
0080A:  MOVWF  FE9
0080C:  MOVLW  00
0080E:  ADDWFC x0D,W
00810:  MOVWF  FEA
00812:  BCF    FEF.1
....................       if(sw->outstate==off) 
00814:  MOVLW  0B
00816:  ADDWF  x0C,W
00818:  MOVWF  FE9
0081A:  MOVLW  00
0081C:  ADDWFC x0D,W
0081E:  MOVWF  FEA
00820:  DECFSZ FEF,W
00822:  BRA    086E
....................       { 
....................          sw->outstate=on; 
00824:  MOVLW  0B
00826:  ADDWF  x0C,W
00828:  MOVWF  FE9
0082A:  MOVLW  00
0082C:  ADDWFC x0D,W
0082E:  MOVWF  FEA
00830:  CLRF   FEF
....................          sw->on.value=1; 
00832:  MOVLW  01
00834:  ADDWF  x0C,W
00836:  MOVWF  FE9
00838:  MOVLW  00
0083A:  ADDWFC x0D,W
0083C:  MOVWF  FEA
0083E:  MOVLW  01
00840:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00842:  MOVLW  02
00844:  ADDWF  x0C,W
00846:  MOVWF  FE9
00848:  MOVLW  00
0084A:  ADDWFC x0D,W
0084C:  MOVWF  FEA
0084E:  BSF    FEF.0
....................          sw->off.value=0; 
00850:  MOVLW  04
00852:  ADDWF  x0C,W
00854:  MOVWF  FE9
00856:  MOVLW  00
00858:  ADDWFC x0D,W
0085A:  MOVWF  FEA
0085C:  CLRF   FEF
....................          sw->off.needs_update=true; 
0085E:  MOVLW  05
00860:  ADDWF  x0C,W
00862:  MOVWF  FE9
00864:  MOVLW  00
00866:  ADDWFC x0D,W
00868:  MOVWF  FEA
0086A:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
0086C:  BRA    08C8
0086E:  MOVLW  0B
00870:  ADDWF  x0C,W
00872:  MOVWF  FE9
00874:  MOVLW  00
00876:  ADDWFC x0D,W
00878:  MOVWF  FEA
0087A:  MOVF   FEF,F
0087C:  BNZ   08C8
....................       { 
....................          sw->outstate=off; 
0087E:  MOVLW  0B
00880:  ADDWF  x0C,W
00882:  MOVWF  FE9
00884:  MOVLW  00
00886:  ADDWFC x0D,W
00888:  MOVWF  FEA
0088A:  MOVLW  01
0088C:  MOVWF  FEF
....................          sw->off.value=1; 
0088E:  MOVLW  04
00890:  ADDWF  x0C,W
00892:  MOVWF  FE9
00894:  MOVLW  00
00896:  ADDWFC x0D,W
00898:  MOVWF  FEA
0089A:  MOVLW  01
0089C:  MOVWF  FEF
....................          sw->off.needs_update=true; 
0089E:  MOVLW  05
008A0:  ADDWF  x0C,W
008A2:  MOVWF  FE9
008A4:  MOVLW  00
008A6:  ADDWFC x0D,W
008A8:  MOVWF  FEA
008AA:  BSF    FEF.0
....................          sw->on.value=0; 
008AC:  MOVLW  01
008AE:  ADDWF  x0C,W
008B0:  MOVWF  FE9
008B2:  MOVLW  00
008B4:  ADDWFC x0D,W
008B6:  MOVWF  FEA
008B8:  CLRF   FEF
....................          sw->on.needs_update=true; 
008BA:  MOVLW  02
008BC:  ADDWF  x0C,W
008BE:  MOVWF  FE9
008C0:  MOVLW  00
008C2:  ADDWFC x0D,W
008C4:  MOVWF  FEA
008C6:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
008C8:  BRA    08F0
008CA:  MOVLW  06
008CC:  ADDWF  x0C,W
008CE:  MOVWF  FE9
008D0:  MOVLW  00
008D2:  ADDWFC x0D,W
008D4:  MOVWF  FEA
008D6:  MOVLW  00
008D8:  BTFSC  FEF.0
008DA:  MOVLW  01
008DC:  ANDLW  01
008DE:  SUBLW  01
008E0:  BNZ   08F0
....................       sw-> previous_state = button_depressed; 
008E2:  MOVLW  06
008E4:  ADDWF  x0C,W
008E6:  MOVWF  FE9
008E8:  MOVLW  00
008EA:  ADDWFC x0D,W
008EC:  MOVWF  FEA
008EE:  BSF    FEF.1
.................... } 
008F0:  MOVLB  0
008F2:  GOTO   0E1C (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
008F6:  MOVLW  06
008F8:  MOVLB  7
008FA:  ADDWF  x0C,W
008FC:  MOVWF  FE9
008FE:  MOVLW  00
00900:  ADDWFC x0D,W
00902:  MOVWF  FEA
00904:  MOVLW  00
00906:  BTFSC  FEF.0
00908:  MOVLW  01
0090A:  ANDLW  01
0090C:  BNZ   0968
0090E:  MOVLW  07
00910:  ADDWF  x0C,W
00912:  MOVWF  FE9
00914:  MOVLW  00
00916:  ADDWFC x0D,W
00918:  MOVWF  FEA
0091A:  DECFSZ FEF,W
0091C:  BRA    0968
....................    { 
....................          sw->outstate=on; 
0091E:  MOVLW  07
00920:  ADDWF  x0C,W
00922:  MOVWF  FE9
00924:  MOVLW  00
00926:  ADDWFC x0D,W
00928:  MOVWF  FEA
0092A:  CLRF   FEF
....................          sw->on.value=1; 
0092C:  MOVLW  01
0092E:  ADDWF  x0C,W
00930:  MOVWF  FE9
00932:  MOVLW  00
00934:  ADDWFC x0D,W
00936:  MOVWF  FEA
00938:  MOVLW  01
0093A:  MOVWF  FEF
....................          sw->on.needs_update=true; 
0093C:  MOVLW  02
0093E:  ADDWF  x0C,W
00940:  MOVWF  FE9
00942:  MOVLW  00
00944:  ADDWFC x0D,W
00946:  MOVWF  FEA
00948:  BSF    FEF.0
....................          sw->off.value=0; 
0094A:  MOVLW  04
0094C:  ADDWF  x0C,W
0094E:  MOVWF  FE9
00950:  MOVLW  00
00952:  ADDWFC x0D,W
00954:  MOVWF  FEA
00956:  CLRF   FEF
....................          sw->off.needs_update=true; 
00958:  MOVLW  05
0095A:  ADDWF  x0C,W
0095C:  MOVWF  FE9
0095E:  MOVLW  00
00960:  ADDWFC x0D,W
00962:  MOVWF  FEA
00964:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
00966:  BRA    09DA
00968:  MOVLW  06
0096A:  ADDWF  x0C,W
0096C:  MOVWF  FE9
0096E:  MOVLW  00
00970:  ADDWFC x0D,W
00972:  MOVWF  FEA
00974:  MOVLW  00
00976:  BTFSC  FEF.0
00978:  MOVLW  01
0097A:  ANDLW  01
0097C:  SUBLW  01
0097E:  BNZ   09DA
00980:  MOVLW  07
00982:  ADDWF  x0C,W
00984:  MOVWF  FE9
00986:  MOVLW  00
00988:  ADDWFC x0D,W
0098A:  MOVWF  FEA
0098C:  MOVF   FEF,F
0098E:  BNZ   09DA
....................    { 
....................          sw->outstate=off; 
00990:  MOVLW  07
00992:  ADDWF  x0C,W
00994:  MOVWF  FE9
00996:  MOVLW  00
00998:  ADDWFC x0D,W
0099A:  MOVWF  FEA
0099C:  MOVLW  01
0099E:  MOVWF  FEF
....................          sw->off.value=1; 
009A0:  MOVLW  04
009A2:  ADDWF  x0C,W
009A4:  MOVWF  FE9
009A6:  MOVLW  00
009A8:  ADDWFC x0D,W
009AA:  MOVWF  FEA
009AC:  MOVLW  01
009AE:  MOVWF  FEF
....................          sw->off.needs_update=true; 
009B0:  MOVLW  05
009B2:  ADDWF  x0C,W
009B4:  MOVWF  FE9
009B6:  MOVLW  00
009B8:  ADDWFC x0D,W
009BA:  MOVWF  FEA
009BC:  BSF    FEF.0
....................          sw->on.value=0; 
009BE:  MOVLW  01
009C0:  ADDWF  x0C,W
009C2:  MOVWF  FE9
009C4:  MOVLW  00
009C6:  ADDWFC x0D,W
009C8:  MOVWF  FEA
009CA:  CLRF   FEF
....................          sw->on.needs_update=true; 
009CC:  MOVLW  02
009CE:  ADDWF  x0C,W
009D0:  MOVWF  FE9
009D2:  MOVLW  00
009D4:  ADDWFC x0D,W
009D6:  MOVWF  FEA
009D8:  BSF    FEF.0
....................    } 
.................... } 
009DA:  MOVLB  0
009DC:  GOTO   0E1C (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
003F4:  MOVLW  09
003F6:  MOVLB  7
003F8:  ADDWF  x0C,W
003FA:  MOVWF  FE9
003FC:  MOVLW  00
003FE:  ADDWFC x0D,W
00400:  MOVWF  FEA
00402:  MOVFF  FEF,70E
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
00406:  MOVLW  0E
00408:  ADDWF  x0C,W
0040A:  MOVWF  FE9
0040C:  MOVLW  00
0040E:  ADDWFC x0D,W
00410:  MOVWF  FEA
00412:  MOVLW  00
00414:  BTFSC  FEF.0
00416:  MOVLW  01
00418:  ANDLW  01
0041A:  BTFSS  FD8.2
0041C:  BRA    0628
....................    { 
....................     //  printf("STATE %u",sw->current_state); 
....................      // printf("DIF %LU",clock - sw->timer); 
....................       sw-> previous_state = button_pressed; 
0041E:  MOVLW  0E
00420:  ADDWF  x0C,W
00422:  MOVWF  FE9
00424:  MOVLW  00
00426:  ADDWFC x0D,W
00428:  MOVWF  FEA
0042A:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
0042C:  MOVLW  0A
0042E:  ADDWF  x0C,W
00430:  MOVWF  FE9
00432:  MOVLW  00
00434:  ADDWFC x0D,W
00436:  MOVWF  FEA
00438:  MOVFF  FEF,00
0043C:  MOVFF  FEC,01
00440:  MOVFF  FEC,02
00444:  MOVFF  FEC,03
00448:  MOVF   00,W
0044A:  MOVLB  6
0044C:  SUBWF  x3B,W
0044E:  MOVLB  7
00450:  MOVWF  x0F
00452:  MOVF   01,W
00454:  MOVLB  6
00456:  SUBWFB x3C,W
00458:  MOVLB  7
0045A:  MOVWF  x10
0045C:  MOVF   02,W
0045E:  MOVLB  6
00460:  SUBWFB x3D,W
00462:  MOVLB  7
00464:  MOVWF  x11
00466:  MOVF   03,W
00468:  MOVLB  6
0046A:  SUBWFB x3E,W
0046C:  MOVLB  7
0046E:  MOVWF  x12
00470:  MOVLB  6
00472:  MOVF   x43,W
00474:  MOVLB  7
00476:  SUBWF  x12,W
00478:  BNC   04A4
0047A:  BNZ   04B8
0047C:  MOVLB  6
0047E:  MOVF   x42,W
00480:  MOVLB  7
00482:  SUBWF  x11,W
00484:  BNC   04A4
00486:  BNZ   04B8
00488:  MOVLB  6
0048A:  MOVF   x41,W
0048C:  MOVLB  7
0048E:  SUBWF  x10,W
00490:  BNC   04A4
00492:  BNZ   04B8
00494:  MOVF   x0F,W
00496:  MOVLB  6
00498:  SUBWF  x40,W
0049A:  BTFSC  FD8.0
0049C:  BRA    04A2
0049E:  MOVLB  7
004A0:  BRA    04B8
004A2:  MOVLB  7
004A4:  MOVLW  0F
004A6:  ADDWF  x0C,W
004A8:  MOVWF  FE9
004AA:  MOVLW  00
004AC:  ADDWFC x0D,W
004AE:  MOVWF  FEA
004B0:  MOVF   FEF,W
004B2:  SUBLW  02
004B4:  BTFSS  FD8.2
004B6:  BRA    0626
004B8:  MOVLW  0F
004BA:  ADDWF  x0C,W
004BC:  MOVWF  FE9
004BE:  MOVLW  00
004C0:  ADDWFC x0D,W
004C2:  MOVWF  FEA
004C4:  MOVF   FEF,W
004C6:  SUBLW  04
004C8:  BTFSC  FD8.2
004CA:  BRA    0626
....................       {  
....................          if(sw->outstate==off) 
004CC:  MOVLW  0F
004CE:  ADDWF  x0C,W
004D0:  MOVWF  FE9
004D2:  MOVLW  00
004D4:  ADDWFC x0D,W
004D6:  MOVWF  FEA
004D8:  DECFSZ FEF,W
004DA:  BRA    051A
....................          { 
....................             sw->outstate=maxed; 
004DC:  MOVLW  0F
004DE:  ADDWF  x0C,W
004E0:  MOVWF  FE9
004E2:  MOVLW  00
004E4:  ADDWFC x0D,W
004E6:  MOVWF  FEA
004E8:  MOVLW  04
004EA:  MOVWF  FEF
....................             sw->on.value=1; 
004EC:  ADDWF  x0C,W
004EE:  MOVWF  FE9
004F0:  MOVLW  00
004F2:  ADDWFC x0D,W
004F4:  MOVWF  FEA
004F6:  MOVLW  01
004F8:  MOVWF  FEF
....................             sw->current_level = 127; 
004FA:  MOVLW  09
004FC:  ADDWF  x0C,W
004FE:  MOVWF  FE9
00500:  MOVLW  00
00502:  ADDWFC x0D,W
00504:  MOVWF  FEA
00506:  MOVLW  7F
00508:  MOVWF  FEF
....................             sw->on.needs_update=1; 
0050A:  MOVLW  05
0050C:  ADDWF  x0C,W
0050E:  MOVWF  FE9
00510:  MOVLW  00
00512:  ADDWFC x0D,W
00514:  MOVWF  FEA
00516:  BSF    FEF.0
....................          } 
....................         else 
00518:  BRA    0624
....................         { 
....................          sw->outstate = dimming; 
0051A:  MOVLW  0F
0051C:  ADDWF  x0C,W
0051E:  MOVWF  FE9
00520:  MOVLW  00
00522:  ADDWFC x0D,W
00524:  MOVWF  FEA
00526:  MOVLW  02
00528:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
0052A:  MOVLW  0A
0052C:  ADDWF  x0C,W
0052E:  MOVWF  FE9
00530:  MOVLW  00
00532:  ADDWFC x0D,W
00534:  MOVWF  FEA
00536:  MOVFF  FEF,00
0053A:  MOVFF  FEC,01
0053E:  MOVFF  FEC,02
00542:  MOVFF  FEC,03
00546:  MOVF   00,W
00548:  MOVLB  6
0054A:  SUBWF  x3B,W
0054C:  MOVLB  7
0054E:  MOVWF  x0F
00550:  MOVF   01,W
00552:  MOVLB  6
00554:  SUBWFB x3C,W
00556:  MOVLB  7
00558:  MOVWF  x10
0055A:  MOVF   02,W
0055C:  MOVLB  6
0055E:  SUBWFB x3D,W
00560:  MOVLB  7
00562:  MOVWF  x11
00564:  MOVF   03,W
00566:  MOVLB  6
00568:  SUBWFB x3E,W
0056A:  MOVLB  7
0056C:  MOVWF  x12
0056E:  MOVF   x12,F
00570:  BNZ   0584
00572:  MOVF   x11,F
00574:  BNZ   0584
00576:  MOVF   x10,F
00578:  BNZ   0584
0057A:  MOVF   x0F,W
0057C:  MOVLB  6
0057E:  SUBWF  x3F,W
00580:  BC    0606
00582:  MOVLB  7
....................          { 
....................             if (sw->direction == up) //para cima 
00584:  MOVLW  0E
00586:  ADDWF  x0C,W
00588:  MOVWF  FE9
0058A:  MOVLW  00
0058C:  ADDWFC x0D,W
0058E:  MOVWF  FEA
00590:  MOVLW  00
00592:  BTFSC  FEF.2
00594:  MOVLW  01
00596:  ANDLW  01
00598:  BNZ   05CA
....................             { 
....................                ++sw->current_level; 
0059A:  MOVLW  09
0059C:  ADDWF  x0C,W
0059E:  MOVWF  FE9
005A0:  MOVLW  00
005A2:  ADDWFC x0D,W
005A4:  MOVWF  FEA
005A6:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
005A8:  MOVLW  09
005AA:  ADDWF  x0C,W
005AC:  MOVWF  FE9
005AE:  MOVLW  00
005B0:  ADDWFC x0D,W
005B2:  MOVWF  FEA
005B4:  MOVF   FEF,W
005B6:  SUBLW  7F
005B8:  BNZ   05C8
005BA:  MOVLW  0E
005BC:  ADDWF  x0C,W
005BE:  MOVWF  FE9
005C0:  MOVLW  00
005C2:  ADDWFC x0D,W
005C4:  MOVWF  FEA
005C6:  BSF    FEF.2
....................             } 
....................             else//para baixo 
005C8:  BRA    0606
....................             { 
....................                --sw->current_level; 
005CA:  MOVLW  09
005CC:  ADDWF  x0C,W
005CE:  MOVWF  FE9
005D0:  MOVLW  00
005D2:  ADDWFC x0D,W
005D4:  MOVWF  FEA
005D6:  DECF   FEF,F
....................                if (sw->current_level == 0)  
005D8:  MOVLW  09
005DA:  ADDWF  x0C,W
005DC:  MOVWF  FE9
005DE:  MOVLW  00
005E0:  ADDWFC x0D,W
005E2:  MOVWF  FEA
005E4:  MOVF   FEF,F
005E6:  BNZ   0606
....................                {   
....................                   sw->direction = up; 
005E8:  MOVLW  0E
005EA:  ADDWF  x0C,W
005EC:  MOVWF  FE9
005EE:  MOVLW  00
005F0:  ADDWFC x0D,W
005F2:  MOVWF  FEA
005F4:  BCF    FEF.2
....................                   sw->off.value=1; 
005F6:  MOVLW  07
005F8:  ADDWF  x0C,W
005FA:  MOVWF  FE9
005FC:  MOVLW  00
005FE:  ADDWFC x0D,W
00600:  MOVWF  FEA
00602:  MOVLW  01
00604:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
00606:  MOVLW  0A
00608:  MOVLB  7
0060A:  ADDWF  x0C,W
0060C:  MOVWF  FE9
0060E:  MOVLW  00
00610:  ADDWFC x0D,W
00612:  MOVWF  FEA
00614:  MOVFF  63B,FEF
00618:  MOVFF  63C,FEC
0061C:  MOVFF  63D,FEC
00620:  MOVFF  63E,FEC
....................       } 
....................       } 
....................       else 
00624:  BRA    0626
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
00626:  BRA    0788
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
00628:  MOVLW  0E
0062A:  ADDWF  x0C,W
0062C:  MOVWF  FE9
0062E:  MOVLW  00
00630:  ADDWFC x0D,W
00632:  MOVWF  FEA
00634:  MOVLW  00
00636:  BTFSC  FEF.1
00638:  MOVLW  01
0063A:  ANDLW  01
0063C:  BTFSS  FD8.2
0063E:  BRA    076C
....................       { 
....................          sw->previous_state = button_depressed; 
00640:  MOVLW  0E
00642:  ADDWF  x0C,W
00644:  MOVWF  FE9
00646:  MOVLW  00
00648:  ADDWFC x0D,W
0064A:  MOVWF  FEA
0064C:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
0064E:  MOVLW  0F
00650:  ADDWF  x0C,W
00652:  MOVWF  FE9
00654:  MOVLW  00
00656:  ADDWFC x0D,W
00658:  MOVWF  FEA
0065A:  MOVF   FEF,W
0065C:  SUBLW  02
0065E:  BNZ   06A4
....................          { 
....................             sw-> outstate = on; 
00660:  MOVLW  0F
00662:  ADDWF  x0C,W
00664:  MOVWF  FE9
00666:  MOVLW  00
00668:  ADDWFC x0D,W
0066A:  MOVWF  FEA
0066C:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
0066E:  MOVLW  0E
00670:  ADDWF  x0C,W
00672:  MOVWF  FE9
00674:  MOVLW  00
00676:  ADDWFC x0D,W
00678:  MOVWF  FEA
0067A:  MOVLW  00
0067C:  BTFSC  FEF.2
0067E:  MOVLW  01
00680:  ANDLW  01
00682:  BNZ   0694
00684:  MOVLW  0E
00686:  ADDWF  x0C,W
00688:  MOVWF  FE9
0068A:  MOVLW  00
0068C:  ADDWFC x0D,W
0068E:  MOVWF  FEA
00690:  BSF    FEF.2
....................             else sw->direction = up; 
00692:  BRA    06A2
00694:  MOVLW  0E
00696:  ADDWF  x0C,W
00698:  MOVWF  FE9
0069A:  MOVLW  00
0069C:  ADDWFC x0D,W
0069E:  MOVWF  FEA
006A0:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
006A2:  BRA    076C
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
006A4:  MOVLW  0F
006A6:  ADDWF  x0C,W
006A8:  MOVWF  FE9
006AA:  MOVLW  00
006AC:  ADDWFC x0D,W
006AE:  MOVWF  FEA
006B0:  DECFSZ FEF,W
006B2:  BRA    06F0
....................             { 
....................                sw->outstate=on; 
006B4:  MOVLW  0F
006B6:  ADDWF  x0C,W
006B8:  MOVWF  FE9
006BA:  MOVLW  00
006BC:  ADDWFC x0D,W
006BE:  MOVWF  FEA
006C0:  CLRF   FEF
....................                sw->on.value=1; 
006C2:  MOVLW  04
006C4:  ADDWF  x0C,W
006C6:  MOVWF  FE9
006C8:  MOVLW  00
006CA:  ADDWFC x0D,W
006CC:  MOVWF  FEA
006CE:  MOVLW  01
006D0:  MOVWF  FEF
....................                sw->direction = down; 
006D2:  MOVLW  0E
006D4:  ADDWF  x0C,W
006D6:  MOVWF  FE9
006D8:  MOVLW  00
006DA:  ADDWFC x0D,W
006DC:  MOVWF  FEA
006DE:  BSF    FEF.2
....................                sw->on.needs_update=true; 
006E0:  MOVLW  05
006E2:  ADDWF  x0C,W
006E4:  MOVWF  FE9
006E6:  MOVLW  00
006E8:  ADDWFC x0D,W
006EA:  MOVWF  FEA
006EC:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
006EE:  BRA    076C
006F0:  MOVLW  0F
006F2:  ADDWF  x0C,W
006F4:  MOVWF  FE9
006F6:  MOVLW  00
006F8:  ADDWFC x0D,W
006FA:  MOVWF  FEA
006FC:  MOVF   FEF,F
006FE:  BNZ   073E
....................             { 
....................                sw->outstate=off; 
00700:  MOVLW  0F
00702:  ADDWF  x0C,W
00704:  MOVWF  FE9
00706:  MOVLW  00
00708:  ADDWFC x0D,W
0070A:  MOVWF  FEA
0070C:  MOVLW  01
0070E:  MOVWF  FEF
....................                sw->off.value=1; 
00710:  MOVLW  07
00712:  ADDWF  x0C,W
00714:  MOVWF  FE9
00716:  MOVLW  00
00718:  ADDWFC x0D,W
0071A:  MOVWF  FEA
0071C:  MOVLW  01
0071E:  MOVWF  FEF
....................                sw->direction = up; 
00720:  MOVLW  0E
00722:  ADDWF  x0C,W
00724:  MOVWF  FE9
00726:  MOVLW  00
00728:  ADDWFC x0D,W
0072A:  MOVWF  FEA
0072C:  BCF    FEF.2
....................                sw->off.needs_update=true; 
0072E:  MOVLW  08
00730:  ADDWF  x0C,W
00732:  MOVWF  FE9
00734:  MOVLW  00
00736:  ADDWFC x0D,W
00738:  MOVWF  FEA
0073A:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
0073C:  BRA    076C
0073E:  MOVLW  0F
00740:  ADDWF  x0C,W
00742:  MOVWF  FE9
00744:  MOVLW  00
00746:  ADDWFC x0D,W
00748:  MOVWF  FEA
0074A:  MOVF   FEF,W
0074C:  SUBLW  04
0074E:  BNZ   076C
....................             { 
....................                sw->outstate=on; 
00750:  MOVLW  0F
00752:  ADDWF  x0C,W
00754:  MOVWF  FE9
00756:  MOVLW  00
00758:  ADDWFC x0D,W
0075A:  MOVWF  FEA
0075C:  CLRF   FEF
....................                sw->direction = down; 
0075E:  MOVLW  0E
00760:  ADDWF  x0C,W
00762:  MOVWF  FE9
00764:  MOVLW  00
00766:  ADDWFC x0D,W
00768:  MOVWF  FEA
0076A:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
0076C:  MOVLW  0A
0076E:  ADDWF  x0C,W
00770:  MOVWF  FE9
00772:  MOVLW  00
00774:  ADDWFC x0D,W
00776:  MOVWF  FEA
00778:  MOVFF  63B,FEF
0077C:  MOVFF  63C,FEC
00780:  MOVFF  63D,FEC
00784:  MOVFF  63E,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
00788:  MOVLW  09
0078A:  ADDWF  x0C,W
0078C:  MOVWF  FE9
0078E:  MOVLW  00
00790:  ADDWFC x0D,W
00792:  MOVWF  FEA
00794:  MOVF   FEF,W
00796:  SUBWF  x0E,W
00798:  BZ    07D0
....................    { 
....................       sw->dim_level.value=sw->current_level; 
0079A:  MOVLW  01
0079C:  ADDWF  x0C,W
0079E:  MOVWF  01
007A0:  MOVLW  00
007A2:  ADDWFC x0D,W
007A4:  MOVWF  03
007A6:  MOVLW  09
007A8:  ADDWF  x0C,W
007AA:  MOVWF  FE9
007AC:  MOVLW  00
007AE:  ADDWFC x0D,W
007B0:  MOVWF  FEA
007B2:  MOVFF  FEF,711
007B6:  MOVFF  03,FEA
007BA:  MOVFF  01,FE9
007BE:  MOVFF  711,FEF
....................       sw->dim_level.needs_update=true; 
007C2:  MOVLW  02
007C4:  ADDWF  x0C,W
007C6:  MOVWF  FE9
007C8:  MOVLW  00
007CA:  ADDWFC x0D,W
007CC:  MOVWF  FEA
007CE:  BSF    FEF.0
....................    } 
.................... } 
007D0:  MOVLB  0
007D2:  GOTO   0E1C (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
009E0:  MOVLB  7
009E2:  CLRF   x09
009E4:  MOVLB  1
009E6:  MOVF   x3E,W
009E8:  MOVLB  7
009EA:  SUBWF  x09,W
009EC:  BTFSC  FD8.0
009EE:  BRA    0E22
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
009F0:  CLRF   x0B
009F2:  MOVFF  709,70A
009F6:  CLRF   x0D
009F8:  MOVLW  21
009FA:  MOVWF  x0C
009FC:  MOVLB  0
009FE:  RCALL  035E
00A00:  MOVFF  02,03
00A04:  MOVF   01,W
00A06:  ADDLW  40
00A08:  MOVWF  01
00A0A:  MOVLW  01
00A0C:  ADDWFC 03,F
00A0E:  MOVFF  01,FE9
00A12:  MOVFF  03,FEA
00A16:  MOVF   FEF,W
00A18:  BZ    0A2E
00A1A:  XORLW  03
00A1C:  BTFSC  FD8.2
00A1E:  BRA    0B74
00A20:  XORLW  02
00A22:  BTFSC  FD8.2
00A24:  BRA    0B76
00A26:  XORLW  03
00A28:  BTFSC  FD8.2
00A2A:  BRA    0CC8
00A2C:  BRA    0E1A
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00A2E:  MOVLB  7
00A30:  CLRF   x0B
00A32:  MOVFF  709,70A
00A36:  CLRF   x0D
00A38:  MOVLW  21
00A3A:  MOVWF  x0C
00A3C:  MOVLB  0
00A3E:  RCALL  035E
00A40:  MOVF   01,W
00A42:  ADDLW  02
00A44:  MOVLB  7
00A46:  MOVWF  x0A
00A48:  MOVLW  00
00A4A:  ADDWFC 02,W
00A4C:  MOVWF  x0B
00A4E:  MOVLW  01
00A50:  ADDWF  x0A,W
00A52:  MOVWF  01
00A54:  MOVLW  00
00A56:  ADDWFC x0B,W
00A58:  MOVWF  03
00A5A:  MOVF   01,W
00A5C:  ADDLW  3E
00A5E:  MOVWF  01
00A60:  MOVLW  01
00A62:  ADDWFC 03,F
00A64:  MOVF   01,W
00A66:  ADDLW  10
00A68:  MOVWF  FE9
00A6A:  MOVLW  00
00A6C:  ADDWFC 03,W
00A6E:  MOVWF  FEA
00A70:  MOVFF  FEF,70C
00A74:  MOVFF  70C,70D
00A78:  MOVLW  01
00A7A:  MOVWF  x0E
00A7C:  MOVLW  0F
00A7E:  MOVWF  x10
00A80:  MOVLW  92
00A82:  MOVWF  x0F
00A84:  MOVLB  0
00A86:  RCALL  0380
00A88:  MOVFF  70C,70D
00A8C:  MOVLW  0F
00A8E:  MOVLB  7
00A90:  MOVWF  x0F
00A92:  MOVLW  80
00A94:  MOVWF  x0E
00A96:  MOVLB  0
00A98:  RCALL  03C2
00A9A:  BTFSS  01.0
00A9C:  BRA    0AE6
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00A9E:  MOVLB  7
00AA0:  CLRF   x0B
00AA2:  MOVFF  709,70A
00AA6:  CLRF   x0D
00AA8:  MOVLW  21
00AAA:  MOVWF  x0C
00AAC:  MOVLB  0
00AAE:  RCALL  035E
00AB0:  MOVF   01,W
00AB2:  ADDLW  02
00AB4:  MOVLB  7
00AB6:  MOVWF  x0A
00AB8:  MOVLW  00
00ABA:  ADDWFC 02,W
00ABC:  MOVWF  x0B
00ABE:  MOVLW  01
00AC0:  ADDWF  x0A,W
00AC2:  MOVWF  01
00AC4:  MOVLW  00
00AC6:  ADDWFC x0B,W
00AC8:  MOVWF  03
00ACA:  MOVF   01,W
00ACC:  ADDLW  3E
00ACE:  MOVWF  01
00AD0:  MOVLW  01
00AD2:  ADDWFC 03,F
00AD4:  MOVF   01,W
00AD6:  ADDLW  0E
00AD8:  MOVWF  FE9
00ADA:  MOVLW  00
00ADC:  ADDWFC 03,W
00ADE:  MOVWF  FEA
00AE0:  BSF    FEF.0
....................             } 
....................             else  
00AE2:  BRA    0B2A
00AE4:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00AE6:  MOVLB  7
00AE8:  CLRF   x0B
00AEA:  MOVFF  709,70A
00AEE:  CLRF   x0D
00AF0:  MOVLW  21
00AF2:  MOVWF  x0C
00AF4:  MOVLB  0
00AF6:  RCALL  035E
00AF8:  MOVF   01,W
00AFA:  ADDLW  02
00AFC:  MOVLB  7
00AFE:  MOVWF  x0A
00B00:  MOVLW  00
00B02:  ADDWFC 02,W
00B04:  MOVWF  x0B
00B06:  MOVLW  01
00B08:  ADDWF  x0A,W
00B0A:  MOVWF  01
00B0C:  MOVLW  00
00B0E:  ADDWFC x0B,W
00B10:  MOVWF  03
00B12:  MOVF   01,W
00B14:  ADDLW  3E
00B16:  MOVWF  01
00B18:  MOVLW  01
00B1A:  ADDWFC 03,F
00B1C:  MOVF   01,W
00B1E:  ADDLW  0E
00B20:  MOVWF  FE9
00B22:  MOVLW  00
00B24:  ADDWFC 03,W
00B26:  MOVWF  FEA
00B28:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00B2A:  CLRF   x0B
00B2C:  MOVFF  709,70A
00B30:  CLRF   x0D
00B32:  MOVLW  21
00B34:  MOVWF  x0C
00B36:  MOVLB  0
00B38:  RCALL  035E
00B3A:  MOVF   01,W
00B3C:  ADDLW  02
00B3E:  MOVLB  7
00B40:  MOVWF  x0A
00B42:  MOVLW  00
00B44:  ADDWFC 02,W
00B46:  MOVWF  x0B
00B48:  MOVLW  01
00B4A:  ADDWF  x0A,W
00B4C:  MOVWF  01
00B4E:  MOVLW  00
00B50:  ADDWFC x0B,W
00B52:  MOVWF  03
00B54:  MOVF   01,W
00B56:  ADDLW  3E
00B58:  MOVWF  01
00B5A:  MOVLW  01
00B5C:  ADDWFC 03,F
00B5E:  MOVFF  01,70A
00B62:  MOVFF  03,70B
00B66:  MOVFF  03,70D
00B6A:  MOVFF  01,70C
00B6E:  MOVLB  0
00B70:  BRA    03F4
....................             break; 
00B72:  BRA    0E1C
....................     case timer: 
....................  
....................            break; 
00B74:  BRA    0E1C
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00B76:  MOVLB  7
00B78:  CLRF   x0B
00B7A:  MOVFF  709,70A
00B7E:  CLRF   x0D
00B80:  MOVLW  21
00B82:  MOVWF  x0C
00B84:  MOVLB  0
00B86:  CALL   035E
00B8A:  MOVF   01,W
00B8C:  ADDLW  02
00B8E:  MOVLB  7
00B90:  MOVWF  x0A
00B92:  MOVLW  00
00B94:  ADDWFC 02,W
00B96:  MOVWF  x0B
00B98:  MOVLW  01
00B9A:  ADDWF  x0A,W
00B9C:  MOVWF  01
00B9E:  MOVLW  00
00BA0:  ADDWFC x0B,W
00BA2:  MOVWF  03
00BA4:  MOVF   01,W
00BA6:  ADDLW  3E
00BA8:  MOVWF  01
00BAA:  MOVLW  01
00BAC:  ADDWFC 03,F
00BAE:  MOVF   01,W
00BB0:  ADDLW  0C
00BB2:  MOVWF  FE9
00BB4:  MOVLW  00
00BB6:  ADDWFC 03,W
00BB8:  MOVWF  FEA
00BBA:  MOVFF  FEF,70C
00BBE:  MOVFF  70C,70D
00BC2:  MOVLW  01
00BC4:  MOVWF  x0E
00BC6:  MOVLW  0F
00BC8:  MOVWF  x10
00BCA:  MOVLW  92
00BCC:  MOVWF  x0F
00BCE:  MOVLB  0
00BD0:  CALL   0380
00BD4:  MOVFF  70C,70D
00BD8:  MOVLW  0F
00BDA:  MOVLB  7
00BDC:  MOVWF  x0F
00BDE:  MOVLW  80
00BE0:  MOVWF  x0E
00BE2:  MOVLB  0
00BE4:  CALL   03C2
00BE8:  BTFSS  01.0
00BEA:  BRA    0C36
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00BEC:  MOVLB  7
00BEE:  CLRF   x0B
00BF0:  MOVFF  709,70A
00BF4:  CLRF   x0D
00BF6:  MOVLW  21
00BF8:  MOVWF  x0C
00BFA:  MOVLB  0
00BFC:  CALL   035E
00C00:  MOVF   01,W
00C02:  ADDLW  02
00C04:  MOVLB  7
00C06:  MOVWF  x0A
00C08:  MOVLW  00
00C0A:  ADDWFC 02,W
00C0C:  MOVWF  x0B
00C0E:  MOVLW  01
00C10:  ADDWF  x0A,W
00C12:  MOVWF  01
00C14:  MOVLW  00
00C16:  ADDWFC x0B,W
00C18:  MOVWF  03
00C1A:  MOVF   01,W
00C1C:  ADDLW  3E
00C1E:  MOVWF  01
00C20:  MOVLW  01
00C22:  ADDWFC 03,F
00C24:  MOVF   01,W
00C26:  ADDLW  06
00C28:  MOVWF  FE9
00C2A:  MOVLW  00
00C2C:  ADDWFC 03,W
00C2E:  MOVWF  FEA
00C30:  BSF    FEF.0
....................             } 
....................             else  
00C32:  BRA    0C7C
00C34:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00C36:  MOVLB  7
00C38:  CLRF   x0B
00C3A:  MOVFF  709,70A
00C3E:  CLRF   x0D
00C40:  MOVLW  21
00C42:  MOVWF  x0C
00C44:  MOVLB  0
00C46:  CALL   035E
00C4A:  MOVF   01,W
00C4C:  ADDLW  02
00C4E:  MOVLB  7
00C50:  MOVWF  x0A
00C52:  MOVLW  00
00C54:  ADDWFC 02,W
00C56:  MOVWF  x0B
00C58:  MOVLW  01
00C5A:  ADDWF  x0A,W
00C5C:  MOVWF  01
00C5E:  MOVLW  00
00C60:  ADDWFC x0B,W
00C62:  MOVWF  03
00C64:  MOVF   01,W
00C66:  ADDLW  3E
00C68:  MOVWF  01
00C6A:  MOVLW  01
00C6C:  ADDWFC 03,F
00C6E:  MOVF   01,W
00C70:  ADDLW  06
00C72:  MOVWF  FE9
00C74:  MOVLW  00
00C76:  ADDWFC 03,W
00C78:  MOVWF  FEA
00C7A:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00C7C:  CLRF   x0B
00C7E:  MOVFF  709,70A
00C82:  CLRF   x0D
00C84:  MOVLW  21
00C86:  MOVWF  x0C
00C88:  MOVLB  0
00C8A:  CALL   035E
00C8E:  MOVF   01,W
00C90:  ADDLW  02
00C92:  MOVLB  7
00C94:  MOVWF  x0A
00C96:  MOVLW  00
00C98:  ADDWFC 02,W
00C9A:  MOVWF  x0B
00C9C:  MOVLW  01
00C9E:  ADDWF  x0A,W
00CA0:  MOVWF  01
00CA2:  MOVLW  00
00CA4:  ADDWFC x0B,W
00CA6:  MOVWF  03
00CA8:  MOVF   01,W
00CAA:  ADDLW  3E
00CAC:  MOVWF  01
00CAE:  MOVLW  01
00CB0:  ADDWFC 03,F
00CB2:  MOVFF  01,70A
00CB6:  MOVFF  03,70B
00CBA:  MOVFF  03,70D
00CBE:  MOVFF  01,70C
00CC2:  MOVLB  0
00CC4:  BRA    07D6
....................     break; 
00CC6:  BRA    0E1C
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00CC8:  MOVLB  7
00CCA:  CLRF   x0B
00CCC:  MOVFF  709,70A
00CD0:  CLRF   x0D
00CD2:  MOVLW  21
00CD4:  MOVWF  x0C
00CD6:  MOVLB  0
00CD8:  CALL   035E
00CDC:  MOVF   01,W
00CDE:  ADDLW  02
00CE0:  MOVLB  7
00CE2:  MOVWF  x0A
00CE4:  MOVLW  00
00CE6:  ADDWFC 02,W
00CE8:  MOVWF  x0B
00CEA:  MOVLW  01
00CEC:  ADDWF  x0A,W
00CEE:  MOVWF  01
00CF0:  MOVLW  00
00CF2:  ADDWFC x0B,W
00CF4:  MOVWF  03
00CF6:  MOVF   01,W
00CF8:  ADDLW  3E
00CFA:  MOVWF  01
00CFC:  MOVLW  01
00CFE:  ADDWFC 03,F
00D00:  MOVF   01,W
00D02:  ADDLW  09
00D04:  MOVWF  FE9
00D06:  MOVLW  00
00D08:  ADDWFC 03,W
00D0A:  MOVWF  FEA
00D0C:  MOVFF  FEF,70C
00D10:  MOVFF  70C,70D
00D14:  MOVLW  01
00D16:  MOVWF  x0E
00D18:  MOVLW  0F
00D1A:  MOVWF  x10
00D1C:  MOVLW  92
00D1E:  MOVWF  x0F
00D20:  MOVLB  0
00D22:  CALL   0380
00D26:  MOVFF  70C,70D
00D2A:  MOVLW  0F
00D2C:  MOVLB  7
00D2E:  MOVWF  x0F
00D30:  MOVLW  80
00D32:  MOVWF  x0E
00D34:  MOVLB  0
00D36:  CALL   03C2
00D3A:  BTFSS  01.0
00D3C:  BRA    0D88
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00D3E:  MOVLB  7
00D40:  CLRF   x0B
00D42:  MOVFF  709,70A
00D46:  CLRF   x0D
00D48:  MOVLW  21
00D4A:  MOVWF  x0C
00D4C:  MOVLB  0
00D4E:  CALL   035E
00D52:  MOVF   01,W
00D54:  ADDLW  02
00D56:  MOVLB  7
00D58:  MOVWF  x0A
00D5A:  MOVLW  00
00D5C:  ADDWFC 02,W
00D5E:  MOVWF  x0B
00D60:  MOVLW  01
00D62:  ADDWF  x0A,W
00D64:  MOVWF  01
00D66:  MOVLW  00
00D68:  ADDWFC x0B,W
00D6A:  MOVWF  03
00D6C:  MOVF   01,W
00D6E:  ADDLW  3E
00D70:  MOVWF  01
00D72:  MOVLW  01
00D74:  ADDWFC 03,F
00D76:  MOVF   01,W
00D78:  ADDLW  06
00D7A:  MOVWF  FE9
00D7C:  MOVLW  00
00D7E:  ADDWFC 03,W
00D80:  MOVWF  FEA
00D82:  BSF    FEF.0
....................             } 
....................             else  
00D84:  BRA    0DCE
00D86:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00D88:  MOVLB  7
00D8A:  CLRF   x0B
00D8C:  MOVFF  709,70A
00D90:  CLRF   x0D
00D92:  MOVLW  21
00D94:  MOVWF  x0C
00D96:  MOVLB  0
00D98:  CALL   035E
00D9C:  MOVF   01,W
00D9E:  ADDLW  02
00DA0:  MOVLB  7
00DA2:  MOVWF  x0A
00DA4:  MOVLW  00
00DA6:  ADDWFC 02,W
00DA8:  MOVWF  x0B
00DAA:  MOVLW  01
00DAC:  ADDWF  x0A,W
00DAE:  MOVWF  01
00DB0:  MOVLW  00
00DB2:  ADDWFC x0B,W
00DB4:  MOVWF  03
00DB6:  MOVF   01,W
00DB8:  ADDLW  3E
00DBA:  MOVWF  01
00DBC:  MOVLW  01
00DBE:  ADDWFC 03,F
00DC0:  MOVF   01,W
00DC2:  ADDLW  06
00DC4:  MOVWF  FE9
00DC6:  MOVLW  00
00DC8:  ADDWFC 03,W
00DCA:  MOVWF  FEA
00DCC:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00DCE:  CLRF   x0B
00DD0:  MOVFF  709,70A
00DD4:  CLRF   x0D
00DD6:  MOVLW  21
00DD8:  MOVWF  x0C
00DDA:  MOVLB  0
00DDC:  CALL   035E
00DE0:  MOVF   01,W
00DE2:  ADDLW  02
00DE4:  MOVLB  7
00DE6:  MOVWF  x0A
00DE8:  MOVLW  00
00DEA:  ADDWFC 02,W
00DEC:  MOVWF  x0B
00DEE:  MOVLW  01
00DF0:  ADDWF  x0A,W
00DF2:  MOVWF  01
00DF4:  MOVLW  00
00DF6:  ADDWFC x0B,W
00DF8:  MOVWF  03
00DFA:  MOVF   01,W
00DFC:  ADDLW  3E
00DFE:  MOVWF  01
00E00:  MOVLW  01
00E02:  ADDWFC 03,F
00E04:  MOVFF  01,70A
00E08:  MOVFF  03,70B
00E0C:  MOVFF  03,70D
00E10:  MOVFF  01,70C
00E14:  MOVLB  0
00E16:  BRA    08F6
....................     break; 
00E18:  BRA    0E1C
....................     default: 
....................  
....................             break;  
00E1A:  BRA    0E1C
....................             } 
....................  
....................    } 
00E1C:  MOVLB  7
00E1E:  INCF   x09,F
00E20:  BRA    09E4
.................... } 
00E22:  MOVLB  0
00E24:  GOTO   0E42 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00E28:  MOVLW  01
00E2A:  MOVLB  6
00E2C:  ADDWF  x3B,F
00E2E:  BTFSC  FD8.0
00E30:  INCF   x3C,F
00E32:  BTFSC  FD8.2
00E34:  INCF   x3D,F
00E36:  BTFSC  FD8.2
00E38:  INCF   x3E,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00E3A:  BTFSS  x3B.1
00E3C:  BRA    0E44
00E3E:  MOVLB  0
00E40:  BRA    09E0
00E42:  MOVLB  6
.................... } 
....................  
00E44:  BCF    FF2.2
00E46:  MOVLB  0
00E48:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
00E4C:  BSF    xB5.5
.................... } 
00E4E:  BCF    F9E.0
00E50:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
00E54:  MOVLB  6
00E56:  INCF   x46,F
....................    if(clockT2temp==200)//1 second call 
00E58:  MOVF   x46,W
00E5A:  SUBLW  C8
00E5C:  BNZ   0E76
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00E5E:  CLRF   x46
....................       ++secClock; 
00E60:  MOVLW  01
00E62:  ADDWF  24,F
00E64:  BTFSC  FD8.0
00E66:  INCF   25,F
00E68:  BTFSC  FD8.2
00E6A:  INCF   26,F
00E6C:  BTFSC  FD8.2
00E6E:  INCF   27,F
....................       secondFlag=true; 
00E70:  MOVLB  0
00E72:  BSF    xB5.4
00E74:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00E76:  BCF    F9E.1
00E78:  MOVLB  0
00E7A:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
.................... /* 
.................... portc=0xFF;//MAKE8(onoffsvalue,1); 
.................... portd=0xFF;//MAKE8(onoffsvalue,0); 
.................... CCP_1=36819; 
.................... set_timer1(0); 
.................... return;*/ 
....................  
....................          portc=MAKE8(onoffsvalue,1); 
00E7E:  MOVLB  5
00E80:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00E84:  MOVFF  57F,F83
....................   
....................    { 
....................          if (organizado) 
00E88:  MOVLB  0
00E8A:  BTFSS  xB5.2
00E8C:  BRA    0EB0
....................          { 
....................             organizado=0; 
00E8E:  BCF    xB5.2
....................             if (actmat)  
00E90:  BTFSS  xB5.3
00E92:  BRA    0EA4
....................             { 
....................                actmat=0; 
00E94:  BCF    xB5.3
....................                pointer=delays1; 
00E96:  MOVLW  05
00E98:  MOVLB  5
00E9A:  MOVWF  x7C
00E9C:  MOVLW  91
00E9E:  MOVWF  x7B
....................             } 
....................             else 
00EA0:  BRA    0EB0
00EA2:  MOVLB  0
....................             { 
....................                actmat=1; 
00EA4:  BSF    xB5.3
....................                pointer=delays2; 
00EA6:  MOVLW  05
00EA8:  MOVLB  5
00EAA:  MOVWF  x7C
00EAC:  MOVLW  D5
00EAE:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00EB0:  MOVLB  5
00EB2:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00EB4:  MOVLB  7
00EB6:  CLRF   x0B
00EB8:  CLRF   x0C
*
00F24:  MOVFF  02,70A
00F28:  MOVFF  01,709
00F2C:  BCF    FD8.0
00F2E:  RLCF   01,W
00F30:  MOVWF  02
00F32:  RLCF   x0A,W
00F34:  MOVWF  03
00F36:  MOVF   02,W
00F38:  MOVLB  0
00F3A:  CALL   01A6
00F3E:  TBLRD*+
00F40:  MOVFF  FF5,03
00F44:  MOVWF  FBE
00F46:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
00F4A:  MOVLW  10
00F4C:  MOVLB  7
00F4E:  MOVWF  x0B
00F50:  CLRF   x0C
*
00FBC:  MOVFF  01,57E
....................           
....................    } 
....................          set_timer1(0); 
00FC0:  CLRF   FCF
00FC2:  CLRF   FCE
....................          syncError=false; 
00FC4:  MOVLB  0
00FC6:  BCF    xB5.5
.................... } 
....................  
00FC8:  BCF    FF2.1
00FCA:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {  /* 
.................... portc=(portc & MAKE8(0b1111111111111110,1)); 
.................... portd=(portd & MAKE8(0b1111111111111110,0)); 
.................... return;*/ 
....................     // while(true){}; 
....................    if(mnumluzes!=0) 
00FCE:  MOVLB  5
00FD0:  MOVF   x7E,F
00FD2:  BTFSC  FD8.2
00FD4:  BRA    10FA
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
00FD6:  MOVFF  57D,70B
00FDA:  MOVLW  01
00FDC:  MOVLB  7
00FDE:  MOVWF  x0C
*
0104A:  MOVFF  02,70A
0104E:  MOVFF  01,709
....................       portc=(portc & MAKE8(auxccp,1)); 
01052:  MOVF   x0A,W
01054:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
01056:  MOVF   x09,W
01058:  ANDWF  F83,F
....................       ++vez; 
0105A:  MOVLB  5
0105C:  INCF   x7D,F
....................       --mnumluzes; 
0105E:  DECF   x7E,F
....................       CCP_1=matrizluz[fpointer(vez,0)]; 
01060:  MOVFF  57D,70B
01064:  MOVLB  7
01066:  CLRF   x0C
*
010D2:  MOVFF  02,70C
010D6:  MOVFF  01,70B
010DA:  BCF    FD8.0
010DC:  RLCF   01,W
010DE:  MOVWF  02
010E0:  RLCF   x0C,W
010E2:  MOVWF  03
010E4:  MOVF   02,W
010E6:  MOVLB  0
010E8:  CALL   01A6
010EC:  TBLRD*+
010EE:  MOVFF  FF5,03
010F2:  MOVWF  FBE
010F4:  MOVFF  03,FBF
010F8:  MOVLB  5
....................    } 
.................... } 
....................  
010FA:  BCF    F9E.2
010FC:  MOVLB  0
010FE:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
01102:  BCF    F9E.5
01104:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
01108:  BCF    F9E.4
0110A:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
0110E:  BCF    FA1.3
01110:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
....................    oscError=1; 
01114:  BSF    xB5.6
.................... } 
....................  
01116:  BCF    FA1.7
01118:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
016C4:  RCALL  1314
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
016C6:  BCF    FA4.0
016C8:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
016CC:  RCALL  1314
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
016CE:  BCF    FA4.1
016D0:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01AF4:  RCALL  18DA
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01AF6:  BCF    FA4.2
01AF8:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01AFC:  RCALL  18DA
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01AFE:  BCF    FA4.3
01B00:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01B04:  RCALL  18DA
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01B06:  BCF    FA4.4
01B08:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01B0C:  BCF    FA4.7
01B0E:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01B12:  BCF    FA4.5
01B14:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    enable_interrupts (int_canrx0); 
*
05074:  BSF    FA3.0
....................    enable_interrupts (int_canrx1); 
05076:  BSF    FA3.1
....................    enable_interrupts (int_cantx0); 
05078:  BSF    FA3.2
....................    enable_interrupts (int_cantx1); 
0507A:  BSF    FA3.3
....................    enable_interrupts (int_cantx2); 
0507C:  BSF    FA3.4
....................    enable_interrupts (int_canirx); 
0507E:  BSF    FA3.7
....................    enable_interrupts (int_canerr); 
05080:  BSF    FA3.5
....................    enable_interrupts(INT_CCP1); 
05082:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
05084:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
05086:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
05088:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
0508A:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    enable_interrupts (int_OSCF) ; 
0508C:  BSF    FA0.7
....................    enable_interrupts (GLOBAL) ; 
0508E:  MOVLW  C0
05090:  IORWF  FF2,F
.................... } 
05092:  GOTO   80D4 (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01CC2:  BRA    1B6E
....................    can_set_mode (CAN_OP_CONFIG) ;   
01CC4:  MOVLW  04
01CC6:  MOVLB  6
01CC8:  MOVWF  x8F
01CCA:  MOVLB  0
01CCC:  RCALL  1B18
....................    BRGCON1.brp = 4; 
01CCE:  MOVLW  C0
01CD0:  ANDWF  F70,W
01CD2:  IORLW  04
01CD4:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01CD6:  MOVLW  3F
01CD8:  ANDWF  F70,W
01CDA:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01CDC:  MOVLW  F8
01CDE:  ANDWF  F71,W
01CE0:  IORLW  02
01CE2:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01CE4:  MOVLW  C7
01CE6:  ANDWF  F71,W
01CE8:  IORLW  28
01CEA:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01CEC:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01CEE:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01CF0:  MOVLW  F8
01CF2:  ANDWF  F72,W
01CF4:  IORLW  05
01CF6:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01CF8:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01CFA:  MOVLB  6
01CFC:  CLRF   x8F
01CFE:  MOVLB  0
01D00:  RCALL  1B18
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01D02:  MOVLW  81
01D04:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01D06:  MOVLW  95
01D08:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01D0A:  MOVLW  60
01D0C:  IORLW  06
01D0E:  MOVWF  FCA
01D10:  MOVLW  F1
01D12:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01D14:  MOVLW  0A
01D16:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01D18:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01D1A:  MOVF   FC1,W
01D1C:  ANDLW  C0
01D1E:  IORLW  0F
01D20:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01D22:  MOVF   FC0,W
01D24:  ANDLW  C0
01D26:  MOVWF  FC0
01D28:  BCF    FC0.7
01D2A:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01D2C:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01D2E:  BCF    FC6.5
01D30:  BCF    F94.5
01D32:  BSF    F94.4
01D34:  BCF    F94.3
01D36:  MOVLW  01
01D38:  MOVWF  FC6
01D3A:  MOVLW  00
01D3C:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01D3E:  MOVLW  07
01D40:  MOVWF  FB4
01D42:  MOVF   F95,W
01D44:  MOVWF  F95
01D46:  MOVF   F96,W
01D48:  MOVWF  F96
01D4A:  CLRWDT
01D4C:  MOVLW  20
01D4E:  MOVWF  00
01D50:  DECFSZ 00,F
01D52:  BRA    1D50
01D54:  BRA    1D56
01D56:  MOVF   FB4,W
01D58:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01D5A:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01D5C:  CLRF   FB1
....................     
....................   // setup_wdt(WDT_ON); 
....................    output_low(PIN_B1); 
01D5E:  BCF    F93.1
01D60:  BCF    F8A.1
....................    output_low(PIN_B6); 
01D62:  BCF    F93.6
01D64:  BCF    F8A.6
....................    output_low(PIN_B7); 
01D66:  BCF    F93.7
01D68:  BCF    F8A.7
....................    output_low(PIN_E3); 
01D6A:  BCF    F96.3
01D6C:  BCF    F8D.3
....................    #use fast_io(C) 
....................    #use fast_io(D) 
....................    setup_wdt (WDT_ON) ; 
01D6E:  BSF    FD1.0
....................    } 
01D70:  GOTO   7E46 (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
07C3C:  CLRF   FF8
07C3E:  BCF    FD0.7
07C40:  BSF    07.7
07C42:  CLRF   FEA
07C44:  CLRF   FE9
07C46:  BCF    F93.5
07C48:  BSF    F8A.5
07C4A:  CLRF   27
07C4C:  CLRF   26
07C4E:  CLRF   25
07C50:  CLRF   24
07C52:  CLRF   28
07C54:  BCF    xB5.0
07C56:  CLRF   xB6
07C58:  BSF    xB5.1
07C5A:  MOVLB  5
07C5C:  CLRF   x7A
07C5E:  MOVLB  0
07C60:  BCF    xB5.3
07C62:  MOVLB  5
07C64:  CLRF   x7E
07C66:  MOVLW  FF
07C68:  MOVWF  x80
07C6A:  MOVWF  x7F
07C6C:  MOVLB  6
07C6E:  CLRF   x3A
07C70:  CLRF   x39
07C72:  MOVLB  0
07C74:  BCF    xB5.6
07C76:  MOVLB  6
07C78:  CLRF   x3F
07C7A:  CLRF   x43
07C7C:  CLRF   x42
07C7E:  CLRF   x41
07C80:  MOVLW  27
07C82:  MOVWF  x40
07C84:  MOVF   FC1,W
07C86:  ANDLW  C0
07C88:  IORLW  0F
07C8A:  MOVWF  FC1
07C8C:  MOVLW  07
07C8E:  MOVWF  FB4
07C90:  CLRF   1C
07C92:  MOVLW  01
07C94:  MOVWF  1D
07C96:  MOVLW  02
07C98:  MOVWF  1E
07C9A:  MOVLW  03
07C9C:  MOVWF  1F
07C9E:  MOVLW  04
07CA0:  MOVWF  20
07CA2:  MOVLW  05
07CA4:  MOVWF  21
07CA6:  MOVLW  20
07CA8:  MOVWF  22
07CAA:  MOVLW  21
07CAC:  MOVWF  23
07CAE:  MOVLW  0B
07CB0:  MOVLB  1
07CB2:  MOVWF  x39
07CB4:  CLRF   x3A
07CB6:  CLRF   x3B
07CB8:  CLRF   x3C
07CBA:  MOVLB  5
07CBC:  CLRF   x81
07CBE:  CLRF   x82
07CC0:  CLRF   x83
07CC2:  CLRF   x84
07CC4:  CLRF   x85
07CC6:  CLRF   x86
07CC8:  CLRF   x87
07CCA:  CLRF   x88
07CCC:  CLRF   x89
07CCE:  CLRF   x8A
07CD0:  CLRF   x8B
07CD2:  CLRF   x8C
07CD4:  CLRF   x8D
07CD6:  CLRF   x8E
07CD8:  CLRF   x8F
07CDA:  CLRF   x90
07CDC:  CLRF   x91
07CDE:  CLRF   x92
07CE0:  CLRF   x93
07CE2:  CLRF   x94
07CE4:  CLRF   x95
07CE6:  CLRF   x96
07CE8:  MOVLW  01
07CEA:  MOVWF  x97
07CEC:  CLRF   x98
07CEE:  CLRF   x99
07CF0:  CLRF   x9A
07CF2:  MOVLW  02
07CF4:  MOVWF  x9B
07CF6:  CLRF   x9C
07CF8:  CLRF   x9D
07CFA:  CLRF   x9E
07CFC:  MOVLW  03
07CFE:  MOVWF  x9F
07D00:  CLRF   xA0
07D02:  CLRF   xA1
07D04:  CLRF   xA2
07D06:  MOVLW  04
07D08:  MOVWF  xA3
07D0A:  CLRF   xA4
07D0C:  CLRF   xA5
07D0E:  CLRF   xA6
07D10:  MOVLW  05
07D12:  MOVWF  xA7
07D14:  CLRF   xA8
07D16:  CLRF   xA9
07D18:  CLRF   xAA
07D1A:  MOVLW  06
07D1C:  MOVWF  xAB
07D1E:  CLRF   xAC
07D20:  CLRF   xAD
07D22:  CLRF   xAE
07D24:  MOVLW  07
07D26:  MOVWF  xAF
07D28:  CLRF   xB0
07D2A:  CLRF   xB1
07D2C:  CLRF   xB2
07D2E:  MOVLW  08
07D30:  MOVWF  xB3
07D32:  CLRF   xB4
07D34:  CLRF   xB5
07D36:  CLRF   xB6
07D38:  MOVLW  09
07D3A:  MOVWF  xB7
07D3C:  CLRF   xB8
07D3E:  CLRF   xB9
07D40:  CLRF   xBA
07D42:  MOVLW  0A
07D44:  MOVWF  xBB
07D46:  CLRF   xBC
07D48:  CLRF   xBD
07D4A:  CLRF   xBE
07D4C:  MOVLW  0B
07D4E:  MOVWF  xBF
07D50:  CLRF   xC0
07D52:  CLRF   xC1
07D54:  CLRF   xC2
07D56:  MOVLW  0C
07D58:  MOVWF  xC3
07D5A:  CLRF   xC4
07D5C:  CLRF   xC5
07D5E:  CLRF   xC6
07D60:  MOVLW  0D
07D62:  MOVWF  xC7
07D64:  CLRF   xC8
07D66:  CLRF   xC9
07D68:  CLRF   xCA
07D6A:  MOVLW  0E
07D6C:  MOVWF  xCB
07D6E:  CLRF   xCC
07D70:  CLRF   xCD
07D72:  CLRF   xCE
07D74:  MOVLW  0F
07D76:  MOVWF  xCF
07D78:  CLRF   xD0
07D7A:  CLRF   xD1
07D7C:  CLRF   xD2
07D7E:  CLRF   xD3
07D80:  CLRF   xD4
07D82:  CLRF   xD5
07D84:  CLRF   xD6
07D86:  CLRF   xD7
07D88:  CLRF   xD8
07D8A:  CLRF   xD9
07D8C:  CLRF   xDA
07D8E:  MOVLW  01
07D90:  MOVWF  xDB
07D92:  CLRF   xDC
07D94:  CLRF   xDD
07D96:  CLRF   xDE
07D98:  MOVLW  02
07D9A:  MOVWF  xDF
07D9C:  CLRF   xE0
07D9E:  CLRF   xE1
07DA0:  CLRF   xE2
07DA2:  MOVLW  03
07DA4:  MOVWF  xE3
07DA6:  CLRF   xE4
07DA8:  CLRF   xE5
07DAA:  CLRF   xE6
07DAC:  MOVLW  04
07DAE:  MOVWF  xE7
07DB0:  CLRF   xE8
07DB2:  CLRF   xE9
07DB4:  CLRF   xEA
07DB6:  MOVLW  05
07DB8:  MOVWF  xEB
07DBA:  CLRF   xEC
07DBC:  CLRF   xED
07DBE:  CLRF   xEE
07DC0:  MOVLW  06
07DC2:  MOVWF  xEF
07DC4:  CLRF   xF0
07DC6:  CLRF   xF1
07DC8:  CLRF   xF2
07DCA:  MOVLW  07
07DCC:  MOVWF  xF3
07DCE:  CLRF   xF4
07DD0:  CLRF   xF5
07DD2:  CLRF   xF6
07DD4:  MOVLW  08
07DD6:  MOVWF  xF7
07DD8:  CLRF   xF8
07DDA:  CLRF   xF9
07DDC:  CLRF   xFA
07DDE:  MOVLW  09
07DE0:  MOVWF  xFB
07DE2:  CLRF   xFC
07DE4:  CLRF   xFD
07DE6:  CLRF   xFE
07DE8:  MOVLW  0A
07DEA:  MOVWF  xFF
07DEC:  MOVLB  6
07DEE:  CLRF   x00
07DF0:  CLRF   x01
07DF2:  CLRF   x02
07DF4:  MOVLW  0B
07DF6:  MOVWF  x03
07DF8:  CLRF   x04
07DFA:  CLRF   x05
07DFC:  CLRF   x06
07DFE:  MOVLW  0C
07E00:  MOVWF  x07
07E02:  CLRF   x08
07E04:  CLRF   x09
07E06:  CLRF   x0A
07E08:  MOVLW  0D
07E0A:  MOVWF  x0B
07E0C:  CLRF   x0C
07E0E:  CLRF   x0D
07E10:  CLRF   x0E
07E12:  MOVLW  0E
07E14:  MOVWF  x0F
07E16:  CLRF   x10
07E18:  CLRF   x11
07E1A:  CLRF   x12
07E1C:  MOVLW  0F
07E1E:  MOVWF  x13
07E20:  CLRF   x14
07E22:  CLRF   x15
07E24:  CLRF   x16
07E26:  CLRF   x17
07E28:  CLRF   x18
07E2A:  CLRF   x46
....................    mydevices.numberOfInputs=0; 
07E2C:  MOVLB  1
07E2E:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
07E30:  CLRF   x3F
....................    clock = 0; 
07E32:  MOVLB  6
07E34:  CLRF   x3E
07E36:  CLRF   x3D
07E38:  CLRF   x3C
07E3A:  CLRF   x3B
....................    ledErrorCounter=0;    
07E3C:  CLRF   x45
07E3E:  CLRF   x44
....................    hw_setup(); 
07E40:  MOVLB  0
07E42:  GOTO   1CC2
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////SALA////////////////////////////// 
....................  /*  eeprom_on_off_init(20,21,6);//2 int Grande a comecar da esquerda 
....................    eeprom_on_off_init(22,23,0);//2  
....................    //eeprom_dimmer_init(40,41,42,7);//2 
....................    eeprom_on_off_init(41,42,7);//2 
....................    eeprom_on_off_init(26,27,3);//2 
....................     
....................     
....................     
....................    ///Sanca parede grande 
....................    unsigned int on_adr[8]={20,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={21,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,3);//Sanca parede grande 
....................    eeprom_onOff_out_init(on_adr,off_adr,5);//Sanca parede grande 
....................     
....................    ///Sanca parede rosa 
....................    unsigned int on_adrr[8]={22,255,255,255,255,255,255,255}; 
....................    unsigned int off_adrr[8]={23,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,7);//Sanca parede grande 
....................    on_adrr[1]=26; 
....................    off_adrr[1]=27; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,4);//Sanca parede grande 
....................     
....................     ///VARANDA 
....................    unsigned int dimmer_dim_adr[8]={40,255,255,255,255,255,255,255};  
....................    unsigned int dimmer_on_adr[8]={41,255,255,255,255,255,255,255}; 
....................    unsigned int dimmer_off_adr[8]={42,255,255,255,255,255,255,255}; 
....................    //eeprom_dimmer_out_init(dimmer_dim_adr,dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................    eeprom_onOff_out_init(dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................     
....................    eeprom_button_init(28,29,4,true);//estores down 
....................    eeprom_button_init(30,31,5,true);//estores up 
....................    unsigned int up_adr[8]={30,255,255,255,255,255,255,255}; 
....................    unsigned int down_adr[8]={28,255,255,255,255,255,255,255}; 
....................    unsigned int x_adr[8]={255,255,255,255,255,255,255,255}; 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,8,9,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,10,11,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,12,13,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,14,15,0,10); 
....................    */ 
....................    /////////////////////////////////////////////////7 
....................     
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 on_adr off_adr real_button inicia botao 
07E46:  MOVLW  01
07E48:  MOVLB  6
07E4A:  MOVWF  x8F
07E4C:  MOVLW  02
07E4E:  MOVWF  x90
07E50:  MOVWF  x91
07E52:  MOVLB  0
07E54:  CALL   1DA6
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
07E58:  MOVLW  01
07E5A:  MOVLB  6
07E5C:  MOVWF  x47
07E5E:  MOVLW  FF
07E60:  MOVWF  x48
07E62:  MOVWF  x49
07E64:  MOVWF  x4A
07E66:  MOVWF  x4B
07E68:  MOVWF  x4C
07E6A:  MOVWF  x4D
07E6C:  MOVWF  x4E
....................    unsigned int off_adr[8]={2,10,255,255,255,255,255,255}; 
07E6E:  MOVLW  02
07E70:  MOVWF  x4F
07E72:  MOVLW  0A
07E74:  MOVWF  x50
07E76:  MOVLW  FF
07E78:  MOVWF  x51
07E7A:  MOVWF  x52
07E7C:  MOVWF  x53
07E7E:  MOVWF  x54
07E80:  MOVWF  x55
07E82:  MOVWF  x56
....................   
....................    unsigned int nill_adr[8]={255,255,255,255,255,255,255,255};   
07E84:  MOVWF  x57
07E86:  MOVWF  x58
07E88:  MOVWF  x59
07E8A:  MOVWF  x5A
07E8C:  MOVWF  x5B
07E8E:  MOVWF  x5C
07E90:  MOVWF  x5D
07E92:  MOVWF  x5E
....................    unsigned int ventax_off_adr[8]={16,255,255,255,255,255,255,255}; 
07E94:  MOVLW  10
07E96:  MOVWF  x5F
07E98:  MOVLW  FF
07E9A:  MOVWF  x60
07E9C:  MOVWF  x61
07E9E:  MOVWF  x62
07EA0:  MOVWF  x63
07EA2:  MOVWF  x64
07EA4:  MOVWF  x65
07EA6:  MOVWF  x66
....................  
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
07EA8:  MOVLW  01
07EAA:  MOVWF  x67
07EAC:  MOVLW  FF
07EAE:  MOVWF  x68
07EB0:  MOVWF  x69
07EB2:  MOVWF  x6A
07EB4:  MOVWF  x6B
07EB6:  MOVWF  x6C
07EB8:  MOVWF  x6D
07EBA:  MOVWF  x6E
....................    eeprom_onOff_out_init(on_adr,off_adr,4);//SANCA? 
07EBC:  MOVLW  06
07EBE:  MOVWF  x90
07EC0:  MOVLW  47
07EC2:  MOVWF  x8F
07EC4:  MOVLW  06
07EC6:  MOVWF  x92
07EC8:  MOVLW  4F
07ECA:  MOVWF  x91
07ECC:  MOVLW  04
07ECE:  MOVWF  x93
07ED0:  MOVLB  0
07ED2:  CALL   1E50
....................     
....................    //outputs 4=sanca 3=casabanho 2=casa de banho 9=ventax 1=corredor 
....................    ///casa de banho 
....................    eeprom_on_off_init(3,4,4);//interruptor casa de banho??   
07ED6:  MOVLW  03
07ED8:  MOVLB  6
07EDA:  MOVWF  x8F
07EDC:  MOVLW  04
07EDE:  MOVWF  x90
07EE0:  MOVWF  x91
07EE2:  MOVLB  0
07EE4:  CALL   1DA6
....................    off_adr[0]=4; 
07EE8:  MOVLW  04
07EEA:  MOVLB  6
07EEC:  MOVWF  x4F
....................    on_adr[0]=3; 
07EEE:  MOVLW  03
07EF0:  MOVWF  x47
....................    eeprom_timer_init(off_adr,on_adr,15,16,time_off,60); 
07EF2:  MOVLW  06
07EF4:  MOVWF  x90
07EF6:  MOVLW  4F
07EF8:  MOVWF  x8F
07EFA:  MOVLW  06
07EFC:  MOVWF  x92
07EFE:  MOVLW  47
07F00:  MOVWF  x91
07F02:  MOVLW  0F
07F04:  MOVWF  x93
07F06:  MOVLW  10
07F08:  MOVWF  x94
07F0A:  MOVLW  01
07F0C:  MOVWF  x95
07F0E:  CLRF   x97
07F10:  MOVLW  3C
07F12:  MOVWF  x96
07F14:  MOVLB  0
07F16:  GOTO   204E
....................    eeprom_onOff_out_init(on_adr,off_adr,3); //luz casa de banho 
07F1A:  MOVLW  06
07F1C:  MOVLB  6
07F1E:  MOVWF  x90
07F20:  MOVLW  47
07F22:  MOVWF  x8F
07F24:  MOVLW  06
07F26:  MOVWF  x92
07F28:  MOVLW  4F
07F2A:  MOVWF  x91
07F2C:  MOVLW  03
07F2E:  MOVWF  x93
07F30:  MOVLB  0
07F32:  CALL   1E50
....................    eeprom_onOff_out_init(on_adr,off_adr,2); //luz2 casa de banho 
07F36:  MOVLW  06
07F38:  MOVLB  6
07F3A:  MOVWF  x90
07F3C:  MOVLW  47
07F3E:  MOVWF  x8F
07F40:  MOVLW  06
07F42:  MOVWF  x92
07F44:  MOVLW  4F
07F46:  MOVWF  x91
07F48:  MOVLW  02
07F4A:  MOVWF  x93
07F4C:  MOVLB  0
07F4E:  CALL   1E50
....................    eeprom_onOff_out_init(on_adr,ventax_off_adr,9);//VENTAX 
07F52:  MOVLW  06
07F54:  MOVLB  6
07F56:  MOVWF  x90
07F58:  MOVLW  47
07F5A:  MOVWF  x8F
07F5C:  MOVLW  06
07F5E:  MOVWF  x92
07F60:  MOVLW  5F
07F62:  MOVWF  x91
07F64:  MOVLW  09
07F66:  MOVWF  x93
07F68:  MOVLB  0
07F6A:  CALL   1E50
....................    ///fim casa de banho 
....................     
....................    //corredor 
....................    eeprom_on_off_init(17,18,5);//interruptor luz corredor 
07F6E:  MOVLW  11
07F70:  MOVLB  6
07F72:  MOVWF  x8F
07F74:  MOVLW  12
07F76:  MOVWF  x90
07F78:  MOVLW  05
07F7A:  MOVWF  x91
07F7C:  MOVLB  0
07F7E:  CALL   1DA6
....................    unsigned int corredor_on_adr[8]={17,255,255,255,255,255,255,255}; 
07F82:  MOVLW  11
07F84:  MOVLB  6
07F86:  MOVWF  x6F
07F88:  MOVLW  FF
07F8A:  MOVWF  x70
07F8C:  MOVWF  x71
07F8E:  MOVWF  x72
07F90:  MOVWF  x73
07F92:  MOVWF  x74
07F94:  MOVWF  x75
07F96:  MOVWF  x76
....................    unsigned int corredor_off_adr[8]={18,255,255,255,255,255,255,255}; 
07F98:  MOVLW  12
07F9A:  MOVWF  x77
07F9C:  MOVLW  FF
07F9E:  MOVWF  x78
07FA0:  MOVWF  x79
07FA2:  MOVWF  x7A
07FA4:  MOVWF  x7B
07FA6:  MOVWF  x7C
07FA8:  MOVWF  x7D
07FAA:  MOVWF  x7E
....................    eeprom_onOff_out_init(corredor_on_adr,corredor_off_adr,1); //luz corredor 
07FAC:  MOVLW  06
07FAE:  MOVWF  x90
07FB0:  MOVLW  6F
07FB2:  MOVWF  x8F
07FB4:  MOVLW  06
07FB6:  MOVWF  x92
07FB8:  MOVLW  77
07FBA:  MOVWF  x91
07FBC:  MOVLW  01
07FBE:  MOVWF  x93
07FC0:  MOVLB  0
07FC2:  CALL   1E50
....................    //fim corredor 
....................     
....................    eeprom_button_init(5,6,0,true);//2 //estores 
07FC6:  MOVLW  05
07FC8:  MOVLB  6
07FCA:  MOVWF  x8F
07FCC:  MOVLW  06
07FCE:  MOVWF  x90
07FD0:  CLRF   x91
07FD2:  MOVLW  01
07FD4:  MOVWF  x92
07FD6:  MOVLB  0
07FD8:  CALL   2162
....................    eeprom_button_init(7,8,1,true);//2 
07FDC:  MOVLW  07
07FDE:  MOVLB  6
07FE0:  MOVWF  x8F
07FE2:  MOVLW  08
07FE4:  MOVWF  x90
07FE6:  MOVLW  01
07FE8:  MOVWF  x91
07FEA:  MOVWF  x92
07FEC:  MOVLB  0
07FEE:  CALL   2162
....................     
....................    off_adr[0]=255; 
07FF2:  MOVLW  FF
07FF4:  MOVLB  6
07FF6:  MOVWF  x4F
....................    off_adr[1]=255; 
07FF8:  MOVWF  x50
....................    on_adr[0]=5; 
07FFA:  MOVLW  05
07FFC:  MOVWF  x47
....................    x_adr[0]=7; 
07FFE:  MOVLW  07
08000:  MOVWF  x67
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,0,10);//up down fullup full down 
08002:  MOVLW  06
08004:  MOVWF  x90
08006:  MOVLW  47
08008:  MOVWF  x8F
0800A:  MOVLW  06
0800C:  MOVWF  x92
0800E:  MOVLW  67
08010:  MOVWF  x91
08012:  MOVLW  06
08014:  MOVWF  x94
08016:  MOVLW  4F
08018:  MOVWF  x93
0801A:  MOVLW  06
0801C:  MOVWF  x96
0801E:  MOVLW  4F
08020:  MOVWF  x95
08022:  MOVLW  0B
08024:  MOVWF  x97
08026:  MOVLW  0A
08028:  MOVWF  x98
0802A:  CLRF   x99
0802C:  MOVWF  x9A
0802E:  MOVLB  0
08030:  GOTO   21E0
....................     
....................    eeprom_on_off_init(9,10,6); 
08034:  MOVLW  09
08036:  MOVLB  6
08038:  MOVWF  x8F
0803A:  MOVLW  0A
0803C:  MOVWF  x90
0803E:  MOVLW  06
08040:  MOVWF  x91
08042:  MOVLB  0
08044:  CALL   1DA6
....................    eeprom_on_off_init(20,21,7); 
08048:  MOVLW  14
0804A:  MOVLB  6
0804C:  MOVWF  x8F
0804E:  MOVLW  15
08050:  MOVWF  x90
08052:  MOVLW  07
08054:  MOVWF  x91
08056:  MOVLB  0
08058:  CALL   1DA6
....................    unsigned int cama_on_adr[8]={9,255,255,255,255,255,255,255}; 
0805C:  MOVLW  09
0805E:  MOVLB  6
08060:  MOVWF  x7F
08062:  MOVLW  FF
08064:  MOVWF  x80
08066:  MOVWF  x81
08068:  MOVWF  x82
0806A:  MOVWF  x83
0806C:  MOVWF  x84
0806E:  MOVWF  x85
08070:  MOVWF  x86
....................    unsigned int cama_off_adr[8]={10,255,255,255,255,255,255,255}; 
08072:  MOVLW  0A
08074:  MOVWF  x87
08076:  MOVLW  FF
08078:  MOVWF  x88
0807A:  MOVWF  x89
0807C:  MOVWF  x8A
0807E:  MOVWF  x8B
08080:  MOVWF  x8C
08082:  MOVWF  x8D
08084:  MOVWF  x8E
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,7); 
08086:  MOVLW  06
08088:  MOVWF  x90
0808A:  MOVLW  7F
0808C:  MOVWF  x8F
0808E:  MOVLW  06
08090:  MOVWF  x92
08092:  MOVLW  87
08094:  MOVWF  x91
08096:  MOVLW  07
08098:  MOVWF  x93
0809A:  MOVLB  0
0809C:  CALL   1E50
....................    cama_on_adr[0]=20; 
080A0:  MOVLW  14
080A2:  MOVLB  6
080A4:  MOVWF  x7F
....................    cama_off_adr[0]=21; 
080A6:  MOVLW  15
080A8:  MOVWF  x87
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,6); 
080AA:  MOVLW  06
080AC:  MOVWF  x90
080AE:  MOVLW  7F
080B0:  MOVWF  x8F
080B2:  MOVLW  06
080B4:  MOVWF  x92
080B6:  MOVLW  87
080B8:  MOVWF  x91
080BA:  MOVLW  06
080BC:  MOVWF  x93
080BE:  MOVLB  0
080C0:  CALL   1E50
....................    /////////////////////////////////////////////////7 
....................     
....................    readDevices(); 
080C4:  GOTO   2CC8
.................... #ifdef DEBUG   
....................     printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
.................... #endif 
....................    dimmer_outputs_init(); 
080C8:  GOTO   3B0C
....................    // printf("start %Lu %Lu %Lu\n\r",fpointer(N_LUZES,0),delays1[N_LUZES][0],delays2[N_LUZES][0]);  
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
080CC:  CALL   3CA6
.................... // printf("start %Lu\n\r",fpointer(N_LUZES,0));  
....................  interrupts_enable(); 
080D0:  GOTO   5074
....................  
....................    while(true){ 
....................    restart_wdt(); 
080D4:  CLRWDT
....................    if(syncError || oscError) 
080D6:  BTFSC  xB5.5
080D8:  BRA    80DE
080DA:  BTFSS  xB5.6
080DC:  BRA    8100
....................    {   
....................       ++ledErrorCounter; 
080DE:  MOVLB  6
080E0:  INCF   x44,F
080E2:  BTFSC  FD8.2
080E4:  INCF   x45,F
....................       if(ledErrorCounter>1000) 
080E6:  MOVF   x45,W
080E8:  SUBLW  02
080EA:  BC    80FE
080EC:  XORLW  FF
080EE:  BNZ   80F6
080F0:  MOVF   x44,W
080F2:  SUBLW  E8
080F4:  BC    80FE
....................       { 
....................          output_toggle(LED); 
080F6:  BCF    F96.2
080F8:  BTG    F8D.2
....................          ledErrorCounter=0; 
080FA:  CLRF   x45
080FC:  CLRF   x44
080FE:  MOVLB  0
....................       } 
....................    } 
.................... #ifdef DEBUG 
....................    if(kbhit()) 
....................    { 
....................       setup_wdt(WDT_OFF); 
....................       disable_interrupts (GLOBAL) ; 
....................       goDebug(); 
....................    } 
.................... #endif 
....................    process_outpoints(); 
08100:  GOTO   5D64
....................    write_outputs(); 
08104:  CALL   3CA6
....................    if(secondFlag) 
08108:  BTFSS  xB5.4
0810A:  BRA    811E
....................    { 
....................       secondFlag=false; 
0810C:  BCF    xB5.4
....................       processTimedEvents(); 
0810E:  GOTO   6CEE
....................       if(!syncError && !oscError) output_toggle(LED); 
08112:  BTFSC  xB5.5
08114:  BRA    811E
08116:  BTFSC  xB5.6
08118:  BRA    811E
0811A:  BCF    F96.2
0811C:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
0811E:  BRA    80D4
.................... } 
....................  
08120:  BRA    8120

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 1401   NOBROWNOUT NOWDT BORV45 NOPUT WDT1024
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0030   NOSTVREN DEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
