CCS PCH C Compiler, Version 4.106, 32200               05-Set-11 21:11

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 31708 bytes (33%)
                         Largest free fragment is 33824
               RAM used: 1606 (48%) at main() level
                         1794 (54%) worst case
               Stack:    8 worst case (4 in main + 4 for interrupts)

*
00000:  GOTO   7846
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0DEA
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0E0E
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0E16
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0E40
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   10CC
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   10D2
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   0F98
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   10D8
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1AD6
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1ADC
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1ACE
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1AC6
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1ABE
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   1696
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   168E
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   10DE
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT1024                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV45                   //Brownout reset at 2.0V 
.................... #FUSES PUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOLPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... //#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
01F54:  BCF    F93.5
01F56:  BCF    F8A.5
01F58:  MOVLW  08
01F5A:  MOVWF  01
01F5C:  BRA    1F5E
01F5E:  NOP   
01F60:  BSF    01.7
01F62:  BRA    1F84
01F64:  BCF    01.7
01F66:  MOVLB  6
01F68:  RRCF   xBE,F
01F6A:  MOVLB  0
01F6C:  BTFSC  FD8.0
01F6E:  BSF    F8A.5
01F70:  BTFSS  FD8.0
01F72:  BCF    F8A.5
01F74:  BSF    01.6
01F76:  BRA    1F84
01F78:  BCF    01.6
01F7A:  DECFSZ 01,F
01F7C:  BRA    1F66
01F7E:  BRA    1F80
01F80:  NOP   
01F82:  BSF    F8A.5
01F84:  MOVLW  16
01F86:  MOVWF  FE9
01F88:  DECFSZ FE9,F
01F8A:  BRA    1F88
01F8C:  BRA    1F8E
01F8E:  CLRWDT
01F90:  BTFSC  01.7
01F92:  BRA    1F64
01F94:  BTFSC  01.6
01F96:  BRA    1F78
01F98:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01B40:  MOVLW  04
01B42:  MOVLB  6
01B44:  MOVWF  x5E
01B46:  MOVLB  0
01B48:  RCALL  1AEA
....................    can_set_baud(); 
01B4A:  BRA    1B10
....................  
....................    RXB0CON=0; 
01B4C:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01B4E:  MOVLW  9F
01B50:  ANDWF  F60,W
01B52:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01B54:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01B56:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01B5A:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01B5C:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01B5E:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01B60:  BCF    F73.6
01B62:  CLRF   1B
01B64:  BTFSC  FF2.7
01B66:  BSF    1B.7
01B68:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01B6A:  MOVLW  0F
01B6C:  MOVLB  6
01B6E:  MOVWF  xF6
01B70:  MOVLW  1B
01B72:  MOVWF  xF5
01B74:  CLRF   xFA
01B76:  CLRF   xF9
01B78:  CLRF   xF8
01B7A:  CLRF   xF7
01B7C:  CLRF   xFB
01B7E:  MOVLB  0
01B80:  RCALL  169E
01B82:  BTFSC  1B.7
01B84:  BSF    FF2.7
01B86:  CLRF   1B
01B88:  BTFSC  FF2.7
01B8A:  BSF    1B.7
01B8C:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01B8E:  MOVLW  0F
01B90:  MOVLB  6
01B92:  MOVWF  xF6
01B94:  MOVLW  03
01B96:  MOVWF  xF5
01B98:  CLRF   xFA
01B9A:  CLRF   xF9
01B9C:  CLRF   xF8
01B9E:  CLRF   xF7
01BA0:  CLRF   xFB
01BA2:  MOVLB  0
01BA4:  RCALL  169E
01BA6:  BTFSC  1B.7
01BA8:  BSF    FF2.7
01BAA:  CLRF   1B
01BAC:  BTFSC  FF2.7
01BAE:  BSF    1B.7
01BB0:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01BB2:  MOVLW  0F
01BB4:  MOVLB  6
01BB6:  MOVWF  xF6
01BB8:  MOVLW  07
01BBA:  MOVWF  xF5
01BBC:  CLRF   xFA
01BBE:  CLRF   xF9
01BC0:  CLRF   xF8
01BC2:  CLRF   xF7
01BC4:  CLRF   xFB
01BC6:  MOVLB  0
01BC8:  RCALL  169E
01BCA:  BTFSC  1B.7
01BCC:  BSF    FF2.7
01BCE:  CLRF   1B
01BD0:  BTFSC  FF2.7
01BD2:  BSF    1B.7
01BD4:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01BD6:  MOVLW  0F
01BD8:  MOVLB  6
01BDA:  MOVWF  xF6
01BDC:  MOVLW  1F
01BDE:  MOVWF  xF5
01BE0:  CLRF   xFA
01BE2:  CLRF   xF9
01BE4:  CLRF   xF8
01BE6:  CLRF   xF7
01BE8:  CLRF   xFB
01BEA:  MOVLB  0
01BEC:  RCALL  169E
01BEE:  BTFSC  1B.7
01BF0:  BSF    FF2.7
01BF2:  CLRF   1B
01BF4:  BTFSC  FF2.7
01BF6:  BSF    1B.7
01BF8:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01BFA:  MOVLW  0F
01BFC:  MOVLB  6
01BFE:  MOVWF  xF6
01C00:  MOVLW  0B
01C02:  MOVWF  xF5
01C04:  CLRF   xFA
01C06:  CLRF   xF9
01C08:  CLRF   xF8
01C0A:  CLRF   xF7
01C0C:  CLRF   xFB
01C0E:  MOVLB  0
01C10:  RCALL  169E
01C12:  BTFSC  1B.7
01C14:  BSF    FF2.7
01C16:  CLRF   1B
01C18:  BTFSC  FF2.7
01C1A:  BSF    1B.7
01C1C:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01C1E:  MOVLW  0F
01C20:  MOVLB  6
01C22:  MOVWF  xF6
01C24:  MOVWF  xF5
01C26:  CLRF   xFA
01C28:  CLRF   xF9
01C2A:  CLRF   xF8
01C2C:  CLRF   xF7
01C2E:  CLRF   xFB
01C30:  MOVLB  0
01C32:  RCALL  169E
01C34:  BTFSC  1B.7
01C36:  BSF    FF2.7
01C38:  CLRF   1B
01C3A:  BTFSC  FF2.7
01C3C:  BSF    1B.7
01C3E:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01C40:  MOVLW  0F
01C42:  MOVLB  6
01C44:  MOVWF  xF6
01C46:  MOVLW  13
01C48:  MOVWF  xF5
01C4A:  CLRF   xFA
01C4C:  CLRF   xF9
01C4E:  CLRF   xF8
01C50:  CLRF   xF7
01C52:  CLRF   xFB
01C54:  MOVLB  0
01C56:  RCALL  169E
01C58:  BTFSC  1B.7
01C5A:  BSF    FF2.7
01C5C:  CLRF   1B
01C5E:  BTFSC  FF2.7
01C60:  BSF    1B.7
01C62:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01C64:  MOVLW  0F
01C66:  MOVLB  6
01C68:  MOVWF  xF6
01C6A:  MOVLW  17
01C6C:  MOVWF  xF5
01C6E:  CLRF   xFA
01C70:  CLRF   xF9
01C72:  CLRF   xF8
01C74:  CLRF   xF7
01C76:  CLRF   xFB
01C78:  MOVLB  0
01C7A:  RCALL  169E
01C7C:  BTFSC  1B.7
01C7E:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01C80:  MOVF   F93,W
01C82:  ANDLW  FB
01C84:  IORLW  08
01C86:  MOVLB  6
01C88:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01C8A:  CLRF   x5E
01C8C:  MOVLB  0
01C8E:  RCALL  1AEA
.................... } 
01C90:  GOTO   1C96 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01B10:  MOVLW  C0
01B12:  ANDWF  F70,W
01B14:  IORLW  04
01B16:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01B18:  MOVLW  3F
01B1A:  ANDWF  F70,W
01B1C:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01B1E:  MOVLW  F8
01B20:  ANDWF  F71,W
01B22:  IORLW  02
01B24:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01B26:  MOVLW  C7
01B28:  ANDWF  F71,W
01B2A:  IORLW  28
01B2C:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01B2E:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01B30:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01B32:  MOVLW  F8
01B34:  ANDWF  F72,W
01B36:  IORLW  05
01B38:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01B3A:  BCF    F72.6
.................... } 
01B3C:  GOTO   1B4C (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01AEA:  MOVLB  6
01AEC:  SWAPF  x5E,W
01AEE:  ANDLW  70
01AF0:  MOVWF  00
01AF2:  BCF    FD8.0
01AF4:  RLCF   00,F
01AF6:  MOVLW  1F
01AF8:  ANDWF  F6F,W
01AFA:  IORWF  00,W
01AFC:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01AFE:  MOVFF  F6E,00
01B02:  SWAPF  00,F
01B04:  RRCF   00,W
01B06:  ANDLW  07
01B08:  SUBWF  x5E,W
01B0A:  BNZ   1AFE
.................... } 
01B0C:  MOVLB  0
01B0E:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
0169E:  MOVFF  6F6,6FD
016A2:  MOVFF  6F5,6FC
....................  
....................    if (ext) {  //extended 
016A6:  MOVLB  6
016A8:  MOVF   xFB,F
016AA:  BZ    1750
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
016AC:  MOVFF  6FC,FE9
016B0:  MOVFF  6FD,FEA
016B4:  MOVFF  6F7,FEF
....................  
....................       //eidh 
....................       ptr--; 
016B8:  MOVF   xFC,W
016BA:  BTFSC  FD8.2
016BC:  DECF   xFD,F
016BE:  DECF   xFC,F
....................       *ptr=make8(id,1); //8:15 
016C0:  MOVFF  6FC,FE9
016C4:  MOVFF  6FD,FEA
016C8:  MOVFF  6F8,FEF
....................  
....................       //sidl 
....................       ptr--; 
016CC:  MOVF   xFC,W
016CE:  BTFSC  FD8.2
016D0:  DECF   xFD,F
016D2:  DECF   xFC,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
016D4:  MOVFF  6FC,FE9
016D8:  MOVFF  6FD,FEA
016DC:  MOVF   xF9,W
016DE:  ANDLW  03
016E0:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
016E2:  MOVFF  6FC,FE9
016E6:  MOVFF  6FD,FEA
016EA:  MOVFF  6F9,00
016EE:  RLCF   00,F
016F0:  RLCF   00,F
016F2:  RLCF   00,F
016F4:  MOVLW  F8
016F6:  ANDWF  00,F
016F8:  MOVF   00,W
016FA:  ANDLW  E0
016FC:  IORWF  FEF,W
016FE:  MOVWF  FEF
....................       *ptr|=0x08; 
01700:  MOVFF  6FC,FE9
01704:  MOVFF  6FD,FEA
01708:  MOVF   FEF,W
0170A:  IORLW  08
0170C:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
0170E:  MOVF   xFC,W
01710:  BTFSC  FD8.2
01712:  DECF   xFD,F
01714:  DECF   xFC,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
01716:  MOVFF  6FC,FE9
0171A:  MOVFF  6FD,FEA
0171E:  MOVFF  6F9,00
01722:  SWAPF  00,F
01724:  RRCF   00,F
01726:  MOVLW  07
01728:  ANDWF  00,F
0172A:  MOVF   00,W
0172C:  ANDLW  07
0172E:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
01730:  MOVFF  6FC,FE9
01734:  MOVFF  6FD,FEA
01738:  MOVFF  6FA,00
0173C:  RLCF   00,F
0173E:  RLCF   00,F
01740:  RLCF   00,F
01742:  MOVLW  F8
01744:  ANDWF  00,F
01746:  MOVF   00,W
01748:  ANDLW  F8
0174A:  IORWF  FEF,W
0174C:  MOVWF  FEF
....................    } 
....................    else {   //standard 
0174E:  BRA    17CE
....................       //eidl 
....................       *ptr=0; 
01750:  MOVFF  6FC,FE9
01754:  MOVFF  6FD,FEA
01758:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
0175A:  MOVF   xFC,W
0175C:  BTFSC  FD8.2
0175E:  DECF   xFD,F
01760:  DECF   xFC,F
....................       *ptr=0; 
01762:  MOVFF  6FC,FE9
01766:  MOVFF  6FD,FEA
0176A:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
0176C:  MOVF   xFC,W
0176E:  BTFSC  FD8.2
01770:  DECF   xFD,F
01772:  DECF   xFC,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
01774:  MOVFF  6FC,FE9
01778:  MOVFF  6FD,FEA
0177C:  MOVFF  6F7,00
01780:  SWAPF  00,F
01782:  RLCF   00,F
01784:  MOVLW  E0
01786:  ANDWF  00,F
01788:  MOVF   00,W
0178A:  ANDLW  E0
0178C:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
0178E:  MOVF   xFC,W
01790:  BTFSC  FD8.2
01792:  DECF   xFD,F
01794:  DECF   xFC,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01796:  MOVFF  6FC,FE9
0179A:  MOVFF  6FD,FEA
0179E:  MOVFF  6F7,00
017A2:  RRCF   00,F
017A4:  RRCF   00,F
017A6:  RRCF   00,F
017A8:  MOVLW  1F
017AA:  ANDWF  00,F
017AC:  MOVF   00,W
017AE:  ANDLW  1F
017B0:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
017B2:  MOVFF  6FC,FE9
017B6:  MOVFF  6FD,FEA
017BA:  MOVFF  6F8,00
017BE:  SWAPF  00,F
017C0:  RLCF   00,F
017C2:  MOVLW  E0
017C4:  ANDWF  00,F
017C6:  MOVF   00,W
017C8:  ANDLW  E0
017CA:  IORWF  FEF,W
017CC:  MOVWF  FEF
....................    } 
.................... } 
017CE:  MOVLB  0
017D0:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
010E6:  MOVLB  6
010E8:  CLRF   xF7
010EA:  CLRF   xF6
010EC:  CLRF   xF5
010EE:  CLRF   xF4
....................    ptr=addr; 
010F0:  MOVFF  6F2,6F9
010F4:  MOVFF  6F1,6F8
....................  
....................    if (ext) { 
010F8:  MOVF   xF3,F
010FA:  BTFSC  FD8.2
010FC:  BRA    1224
....................       ret=*ptr;  //eidl 
010FE:  MOVFF  6F9,03
01102:  MOVFF  6F8,FE9
01106:  MOVFF  6F9,FEA
0110A:  MOVFF  FEF,00
0110E:  CLRF   01
01110:  CLRF   02
01112:  CLRF   03
01114:  MOVFF  03,6F7
01118:  MOVFF  02,6F6
0111C:  MOVFF  01,6F5
01120:  MOVFF  00,6F4
....................  
....................       ptr--;     //eidh 
01124:  MOVF   xF8,W
01126:  BTFSC  FD8.2
01128:  DECF   xF9,F
0112A:  DECF   xF8,F
....................       ret|=((int32)*ptr << 8); 
0112C:  MOVFF  6F8,FE9
01130:  MOVFF  6F9,FEA
01134:  MOVF   FEF,W
01136:  CLRF   xFC
01138:  CLRF   xFB
0113A:  MOVWF  xFA
0113C:  CLRF   00
0113E:  MOVF   00,W
01140:  IORWF  xF4,F
01142:  MOVF   xFA,W
01144:  IORWF  xF5,F
01146:  MOVF   xFB,W
01148:  IORWF  xF6,F
0114A:  MOVF   xFC,W
0114C:  IORWF  xF7,F
....................  
....................       ptr--;     //sidl 
0114E:  MOVF   xF8,W
01150:  BTFSC  FD8.2
01152:  DECF   xF9,F
01154:  DECF   xF8,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
01156:  MOVFF  6F8,FE9
0115A:  MOVFF  6F9,FEA
0115E:  MOVF   FEF,W
01160:  CLRF   xFD
01162:  CLRF   xFC
01164:  CLRF   xFB
01166:  MOVWF  xFA
01168:  MOVLW  03
0116A:  ANDWF  xFA,F
0116C:  CLRF   xFB
0116E:  CLRF   xFC
01170:  CLRF   xFD
01172:  CLRF   00
01174:  CLRF   01
01176:  MOVF   00,W
01178:  IORWF  xF4,F
0117A:  MOVF   01,W
0117C:  IORWF  xF5,F
0117E:  MOVF   xFA,W
01180:  IORWF  xF6,F
01182:  MOVF   xFB,W
01184:  IORWF  xF7,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
01186:  MOVFF  6F8,FE9
0118A:  MOVFF  6F9,FEA
0118E:  MOVF   FEF,W
01190:  CLRF   xFD
01192:  CLRF   xFC
01194:  CLRF   xFB
01196:  MOVWF  xFA
01198:  MOVLW  E0
0119A:  ANDWF  xFA,F
0119C:  CLRF   xFB
0119E:  CLRF   xFC
011A0:  CLRF   xFD
011A2:  CLRF   00
011A4:  RLCF   xFA,W
011A6:  MOVWF  01
011A8:  RLCF   xFB,W
011AA:  MOVWF  02
011AC:  RLCF   xFC,W
011AE:  MOVWF  03
011B0:  RLCF   01,F
011B2:  RLCF   02,F
011B4:  RLCF   03,F
011B6:  RLCF   01,F
011B8:  RLCF   02,F
011BA:  RLCF   03,F
011BC:  RLCF   01,F
011BE:  RLCF   02,F
011C0:  RLCF   03,F
011C2:  RLCF   01,F
011C4:  RLCF   02,F
011C6:  RLCF   03,F
011C8:  MOVLW  E0
011CA:  ANDWF  01,F
011CC:  MOVF   00,W
011CE:  IORWF  xF4,F
011D0:  MOVF   01,W
011D2:  IORWF  xF5,F
011D4:  MOVF   02,W
011D6:  IORWF  xF6,F
011D8:  MOVF   03,W
011DA:  IORWF  xF7,F
....................  
....................       ptr--;     //sidh 
011DC:  MOVF   xF8,W
011DE:  BTFSC  FD8.2
011E0:  DECF   xF9,F
011E2:  DECF   xF8,F
....................       ret|=((int32)*ptr << 21); 
011E4:  MOVFF  6F8,FE9
011E8:  MOVFF  6F9,FEA
011EC:  MOVF   FEF,W
011EE:  CLRF   xFB
011F0:  MOVWF  xFA
011F2:  CLRF   00
011F4:  CLRF   01
011F6:  RLCF   xFA,W
011F8:  MOVWF  02
011FA:  RLCF   xFB,W
011FC:  MOVWF  03
011FE:  RLCF   02,F
01200:  RLCF   03,F
01202:  RLCF   02,F
01204:  RLCF   03,F
01206:  RLCF   02,F
01208:  RLCF   03,F
0120A:  RLCF   02,F
0120C:  RLCF   03,F
0120E:  MOVLW  E0
01210:  ANDWF  02,F
01212:  MOVF   00,W
01214:  IORWF  xF4,F
01216:  MOVF   01,W
01218:  IORWF  xF5,F
0121A:  MOVF   02,W
0121C:  IORWF  xF6,F
0121E:  MOVF   03,W
01220:  IORWF  xF7,F
....................  
....................    } 
....................    else { 
01222:  BRA    12CA
....................       ptr-=2;    //sidl 
01224:  MOVLW  02
01226:  SUBWF  xF8,F
01228:  MOVLW  00
0122A:  SUBWFB xF9,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
0122C:  MOVFF  6F8,FE9
01230:  MOVFF  6F9,FEA
01234:  MOVF   FEF,W
01236:  CLRF   xFD
01238:  CLRF   xFC
0123A:  CLRF   xFB
0123C:  MOVWF  xFA
0123E:  MOVLW  E0
01240:  ANDWF  xFA,F
01242:  CLRF   xFB
01244:  CLRF   xFC
01246:  CLRF   xFD
01248:  RRCF   xFD,W
0124A:  MOVWF  xF7
0124C:  RRCF   xFC,W
0124E:  MOVWF  xF6
01250:  RRCF   xFB,W
01252:  MOVWF  xF5
01254:  RRCF   xFA,W
01256:  MOVWF  xF4
01258:  RRCF   xF7,F
0125A:  RRCF   xF6,F
0125C:  RRCF   xF5,F
0125E:  RRCF   xF4,F
01260:  RRCF   xF7,F
01262:  RRCF   xF6,F
01264:  RRCF   xF5,F
01266:  RRCF   xF4,F
01268:  RRCF   xF7,F
0126A:  RRCF   xF6,F
0126C:  RRCF   xF5,F
0126E:  RRCF   xF4,F
01270:  RRCF   xF7,F
01272:  RRCF   xF6,F
01274:  RRCF   xF5,F
01276:  RRCF   xF4,F
01278:  MOVLW  07
0127A:  ANDWF  xF7,F
....................  
....................       ptr--;     //sidh 
0127C:  MOVF   xF8,W
0127E:  BTFSC  FD8.2
01280:  DECF   xF9,F
01282:  DECF   xF8,F
....................       ret|=((int32)*ptr << 3); 
01284:  MOVFF  6F8,FE9
01288:  MOVFF  6F9,FEA
0128C:  MOVF   FEF,W
0128E:  CLRF   xFD
01290:  CLRF   xFC
01292:  CLRF   xFB
01294:  MOVWF  xFA
01296:  RLCF   xFA,W
01298:  MOVWF  00
0129A:  RLCF   xFB,W
0129C:  MOVWF  01
0129E:  RLCF   xFC,W
012A0:  MOVWF  02
012A2:  RLCF   xFD,W
012A4:  MOVWF  03
012A6:  RLCF   00,F
012A8:  RLCF   01,F
012AA:  RLCF   02,F
012AC:  RLCF   03,F
012AE:  RLCF   00,F
012B0:  RLCF   01,F
012B2:  RLCF   02,F
012B4:  RLCF   03,F
012B6:  MOVLW  F8
012B8:  ANDWF  00,F
012BA:  MOVF   00,W
012BC:  IORWF  xF4,F
012BE:  MOVF   01,W
012C0:  IORWF  xF5,F
012C2:  MOVF   02,W
012C4:  IORWF  xF6,F
012C6:  MOVF   03,W
012C8:  IORWF  xF7,F
....................    } 
....................  
....................    return(ret); 
012CA:  MOVFF  6F4,00
012CE:  MOVFF  6F5,01
012D2:  MOVFF  6F6,02
012D6:  MOVFF  6F7,03
.................... } 
012DA:  MOVLB  0
012DC:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
017D2:  MOVLW  0F
017D4:  MOVLB  6
017D6:  MOVWF  xF3
017D8:  MOVLW  66
017DA:  MOVWF  xF2
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
017DC:  MOVLB  F
017DE:  BTFSC  x40.3
017E0:  BRA    17F2
....................       CANCON.win=CAN_WIN_TX0; 
017E2:  MOVLW  F1
017E4:  ANDWF  F6F,W
017E6:  IORLW  08
017E8:  MOVWF  F6F
....................       port=0; 
017EA:  MOVLB  6
017EC:  CLRF   xF4
....................    } 
....................    else if (!TXB1CON.txreq) { 
017EE:  BRA    1826
017F0:  MOVLB  F
017F2:  BTFSC  x30.3
017F4:  BRA    1808
....................       CANCON.win=CAN_WIN_TX1; 
017F6:  MOVLW  F1
017F8:  ANDWF  F6F,W
017FA:  IORLW  06
017FC:  MOVWF  F6F
....................       port=1; 
017FE:  MOVLW  01
01800:  MOVLB  6
01802:  MOVWF  xF4
....................    } 
....................    else if (!TXB2CON.txreq) { 
01804:  BRA    1826
01806:  MOVLB  F
01808:  BTFSC  x20.3
0180A:  BRA    181E
....................       CANCON.win=CAN_WIN_TX2; 
0180C:  MOVLW  F1
0180E:  ANDWF  F6F,W
01810:  IORLW  04
01812:  MOVWF  F6F
....................       port=2; 
01814:  MOVLW  02
01816:  MOVLB  6
01818:  MOVWF  xF4
....................    } 
....................    else { 
0181A:  BRA    1826
0181C:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
0181E:  MOVLW  00
01820:  MOVWF  01
01822:  BRA    189E
01824:  MOVLB  6
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
01826:  MOVF   xEE,W
01828:  ANDLW  03
0182A:  MOVWF  00
0182C:  MOVLW  FC
0182E:  ANDWF  F60,W
01830:  IORWF  00,W
01832:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
01834:  MOVLW  0F
01836:  MOVWF  xF6
01838:  MOVLW  64
0183A:  MOVWF  xF5
0183C:  MOVFF  6EA,6FA
01840:  MOVFF  6E9,6F9
01844:  MOVFF  6E8,6F8
01848:  MOVFF  6E7,6F7
0184C:  MOVFF  6EF,6FB
01850:  MOVLB  0
01852:  RCALL  169E
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
01854:  MOVFF  6ED,F65
....................    TXBaDLC.rtr=rtr; 
01858:  BCF    F65.6
0185A:  MOVLB  6
0185C:  BTFSC  xF0.0
0185E:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
01860:  CLRF   xF1
01862:  MOVF   xED,W
01864:  SUBWF  xF1,W
01866:  BC    1890
....................       *txd0=*data; 
01868:  MOVFF  6EB,FE9
0186C:  MOVFF  6EC,FEA
01870:  MOVFF  FEF,6F7
01874:  MOVFF  6F3,FEA
01878:  MOVFF  6F2,FE9
0187C:  MOVFF  6F7,FEF
....................       txd0++; 
01880:  INCF   xF2,F
01882:  BTFSC  FD8.2
01884:  INCF   xF3,F
....................       data++; 
01886:  INCF   xEB,F
01888:  BTFSC  FD8.2
0188A:  INCF   xEC,F
....................     } 
0188C:  INCF   xF1,F
0188E:  BRA    1862
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
01890:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
01892:  MOVLW  F1
01894:  ANDWF  F6F,W
01896:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
01898:  MOVLW  01
0189A:  MOVWF  01
0189C:  MOVLB  F
.................... } 
0189E:  MOVLB  0
018A0:  GOTO   1AB6 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
012F8:  BTFSS  F60.7
012FA:  BRA    132A
*
01580:  BTFSS  F60.7
01582:  BRA    15B2
....................         CANCON.win=CAN_WIN_RX0; 
*
012FC:  MOVLW  F1
012FE:  ANDWF  F6F,W
01300:  MOVWF  F6F
*
01584:  MOVLW  F1
01586:  ANDWF  F6F,W
01588:  MOVWF  F6F
....................         stat.buffer=0; 
*
01302:  BCF    xDA.4
*
0158A:  BCF    xDA.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
01304:  BCF    FA4.0
*
0158C:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
01306:  BCF    xDA.0
01308:  BTFSC  F74.7
0130A:  BSF    xDA.0
*
0158E:  BCF    xDA.0
01590:  BTFSC  F74.7
01592:  BSF    xDA.0
....................         COMSTAT.rx0ovfl=0; 
*
0130C:  BCF    F74.7
*
01594:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
0130E:  BTFSS  F60.2
01310:  BRA    1328
*
01596:  BTFSS  F60.2
01598:  BRA    15B0
....................          stat.filthit=RXB0CON.filthit0; 
*
01312:  MOVLW  00
01314:  BTFSC  F60.0
01316:  MOVLW  01
01318:  ANDLW  07
0131A:  MOVWF  00
0131C:  BCF    FD8.0
0131E:  RLCF   00,F
01320:  MOVLW  F1
01322:  ANDWF  xDA,W
01324:  IORWF  00,W
01326:  MOVWF  xDA
*
0159A:  MOVLW  00
0159C:  BTFSC  F60.0
0159E:  MOVLW  01
015A0:  ANDLW  07
015A2:  MOVWF  00
015A4:  BCF    FD8.0
015A6:  RLCF   00,F
015A8:  MOVLW  F1
015AA:  ANDWF  xDA,W
015AC:  IORWF  00,W
015AE:  MOVWF  xDA
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
01328:  BRA    136A
0132A:  MOVLB  F
0132C:  BTFSS  x50.7
0132E:  BRA    1362
*
015B0:  BRA    15F2
015B2:  MOVLB  F
015B4:  BTFSS  x50.7
015B6:  BRA    15EA
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
01330:  MOVLW  F1
01332:  ANDWF  F6F,W
01334:  IORLW  0A
01336:  MOVWF  F6F
*
015B8:  MOVLW  F1
015BA:  ANDWF  F6F,W
015BC:  IORLW  0A
015BE:  MOVWF  F6F
....................         stat.buffer=1; 
*
01338:  MOVLB  6
0133A:  BSF    xDA.4
*
015C0:  MOVLB  6
015C2:  BSF    xDA.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
0133C:  BCF    FA4.1
*
015C4:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
0133E:  BCF    xDA.0
01340:  BTFSC  F74.6
01342:  BSF    xDA.0
*
015C6:  BCF    xDA.0
015C8:  BTFSC  F74.6
015CA:  BSF    xDA.0
....................         COMSTAT.rx1ovfl=0; 
*
01344:  BCF    F74.6
*
015CC:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
01346:  MOVLB  F
01348:  MOVF   x50,W
0134A:  ANDLW  07
0134C:  ANDLW  07
0134E:  MOVWF  00
01350:  BCF    FD8.0
01352:  RLCF   00,F
01354:  MOVLW  F1
01356:  MOVLB  6
01358:  ANDWF  xDA,W
0135A:  IORWF  00,W
0135C:  MOVWF  xDA
*
015CE:  MOVLB  F
015D0:  MOVF   x50,W
015D2:  ANDLW  07
015D4:  ANDLW  07
015D6:  MOVWF  00
015D8:  BCF    FD8.0
015DA:  RLCF   00,F
015DC:  MOVLW  F1
015DE:  MOVLB  6
015E0:  ANDWF  xDA,W
015E2:  IORWF  00,W
015E4:  MOVWF  xDA
....................     } 
....................     else { 
*
0135E:  BRA    136A
01360:  MOVLB  F
*
015E6:  BRA    15F2
015E8:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
01362:  MOVLW  00
01364:  MOVWF  01
01366:  BRA    1400
01368:  MOVLB  6
*
015EA:  MOVLW  00
015EC:  MOVWF  01
015EE:  BRA    1688
015F0:  MOVLB  6
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
0136A:  MOVF   F65,W
0136C:  ANDLW  0F
0136E:  MOVWF  xD9
*
015F2:  MOVF   F65,W
015F4:  ANDLW  0F
015F6:  MOVWF  xD9
....................     stat.rtr=RXBaDLC.rtr; 
*
01370:  BCF    xDA.5
01372:  BTFSC  F65.6
01374:  BSF    xDA.5
*
015F8:  BCF    xDA.5
015FA:  BTFSC  F65.6
015FC:  BSF    xDA.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
01376:  BCF    xDA.6
01378:  BTFSC  F62.3
0137A:  BSF    xDA.6
*
015FE:  BCF    xDA.6
01600:  BTFSC  F62.3
01602:  BSF    xDA.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
0137C:  MOVLW  00
0137E:  BTFSC  xDA.6
01380:  MOVLW  01
01382:  MOVWF  xEA
01384:  MOVLW  0F
01386:  MOVWF  xF2
01388:  MOVLW  64
0138A:  MOVWF  xF1
0138C:  MOVFF  6EA,6F3
01390:  MOVLB  0
01392:  RCALL  10E6
01394:  MOVFF  03,6D8
01398:  MOVFF  02,6D7
0139C:  MOVFF  01,6D6
013A0:  MOVFF  00,6D5
*
01604:  MOVLW  00
01606:  BTFSC  xDA.6
01608:  MOVLW  01
0160A:  MOVWF  xEA
0160C:  MOVLW  0F
0160E:  MOVWF  xF2
01610:  MOVLW  64
01612:  MOVWF  xF1
01614:  MOVFF  6EA,6F3
01618:  MOVLB  0
0161A:  RCALL  10E6
0161C:  MOVFF  03,6D8
01620:  MOVFF  02,6D7
01624:  MOVFF  01,6D6
01628:  MOVFF  00,6D5
....................  
....................     ptr = &TXRXBaD0; 
*
013A4:  MOVLW  0F
013A6:  MOVLB  6
013A8:  MOVWF  xE9
013AA:  MOVLW  66
013AC:  MOVWF  xE8
*
0162C:  MOVLW  0F
0162E:  MOVLB  6
01630:  MOVWF  xE9
01632:  MOVLW  66
01634:  MOVWF  xE8
....................     for ( i = 0; i < len; i++ ) { 
*
013AE:  CLRF   xE7
013B0:  MOVF   xD9,W
013B2:  SUBWF  xE7,W
013B4:  BC    13DE
*
01636:  CLRF   xE7
01638:  MOVF   xD9,W
0163A:  SUBWF  xE7,W
0163C:  BC    1666
....................         *data = *ptr; 
*
013B6:  MOVFF  6E8,FE9
013BA:  MOVFF  6E9,FEA
013BE:  MOVFF  FEF,6EC
013C2:  MOVFF  6E6,FEA
013C6:  MOVFF  6E5,FE9
013CA:  MOVFF  6EC,FEF
*
0163E:  MOVFF  6E8,FE9
01642:  MOVFF  6E9,FEA
01646:  MOVFF  FEF,6EC
0164A:  MOVFF  6E6,FEA
0164E:  MOVFF  6E5,FE9
01652:  MOVFF  6EC,FEF
....................         data++; 
*
013CE:  INCF   xE5,F
013D0:  BTFSC  FD8.2
013D2:  INCF   xE6,F
*
01656:  INCF   xE5,F
01658:  BTFSC  FD8.2
0165A:  INCF   xE6,F
....................         ptr++; 
*
013D4:  INCF   xE8,F
013D6:  BTFSC  FD8.2
013D8:  INCF   xE9,F
*
0165C:  INCF   xE8,F
0165E:  BTFSC  FD8.2
01660:  INCF   xE9,F
....................     } 
*
013DA:  INCF   xE7,F
013DC:  BRA    13B0
*
01662:  INCF   xE7,F
01664:  BRA    1638
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
013DE:  MOVLW  F1
013E0:  ANDWF  F6F,W
013E2:  MOVWF  F6F
*
01666:  MOVLW  F1
01668:  ANDWF  F6F,W
0166A:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
013E4:  BCF    xDA.7
013E6:  BTFSC  FA4.7
013E8:  BSF    xDA.7
*
0166C:  BCF    xDA.7
0166E:  BTFSC  FA4.7
01670:  BSF    xDA.7
....................     CAN_INT_IRXIF = 0; 
*
013EA:  BCF    FA4.7
*
01672:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
013EC:  BTFSS  xDA.4
013EE:  BRA    13F8
*
01674:  BTFSS  xDA.4
01676:  BRA    1680
....................       RXB1CON.rxful=0; 
*
013F0:  MOVLB  F
013F2:  BCF    x50.7
*
01678:  MOVLB  F
0167A:  BCF    x50.7
....................     } 
....................     else { 
*
013F4:  BRA    13FC
013F6:  MOVLB  6
*
0167C:  BRA    1684
0167E:  MOVLB  6
....................       RXB0CON.rxful=0; 
*
013F8:  BCF    F60.7
013FA:  MOVLB  F
*
01680:  BCF    F60.7
01682:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
013FC:  MOVLW  01
013FE:  MOVWF  01
*
01684:  MOVLW  01
01686:  MOVWF  01
01688:  MOVLB  6
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
012DE:  MOVF   28,W
012E0:  SUBLW  FF
012E2:  BNZ   12E6
....................       can_rspoint++; 
012E4:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
012E6:  MOVF   28,W
012E8:  SUBLW  09
012EA:  BTFSS  FD8.0
012EC:  BRA    1576
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
012EE:  MOVLW  06
012F0:  MOVLB  6
012F2:  MOVWF  xE6
012F4:  MOVLW  DB
012F6:  MOVWF  xE5
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
01400:  MOVLB  6
01402:  CLRF   xE4
01404:  MOVF   xE4,F
01406:  BNZ   1448
....................          if(rx_id==can_filter[j]) 
01408:  MOVF   xE4,W
0140A:  MULLW  04
0140C:  MOVF   FF3,W
0140E:  CLRF   03
01410:  ADDLW  39
01412:  MOVWF  FE9
01414:  MOVLW  01
01416:  ADDWFC 03,W
01418:  MOVWF  FEA
0141A:  MOVFF  FEF,00
0141E:  MOVFF  FEC,01
01422:  MOVFF  FEC,02
01426:  MOVFF  FEC,03
0142A:  MOVF   00,W
0142C:  SUBWF  xD5,W
0142E:  BNZ   1444
01430:  MOVF   01,W
01432:  SUBWF  xD6,W
01434:  BNZ   1444
01436:  MOVF   02,W
01438:  SUBWF  xD7,W
0143A:  BNZ   1444
0143C:  MOVF   03,W
0143E:  SUBWF  xD8,W
01440:  BNZ   1444
....................             return; 
01442:  BRA    168A
01444:  INCF   xE4,F
01446:  BRA    1404
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
01448:  MOVF   28,W
0144A:  MULLW  0E
0144C:  MOVF   FF3,W
0144E:  CLRF   xE6
01450:  MOVWF  xE5
01452:  MOVLW  29
01454:  ADDWF  xE5,W
01456:  MOVWF  FE9
01458:  MOVLW  00
0145A:  ADDWFC xE6,W
0145C:  MOVWF  FEA
0145E:  MOVFF  6D8,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
01462:  MOVF   28,W
01464:  MULLW  0E
01466:  MOVF   FF3,W
01468:  CLRF   xE6
0146A:  MOVWF  xE5
0146C:  MOVLW  01
0146E:  ADDWF  xE5,W
01470:  MOVWF  01
01472:  MOVLW  00
01474:  ADDWFC xE6,W
01476:  MOVWF  03
01478:  MOVF   01,W
0147A:  ADDLW  29
0147C:  MOVWF  FE9
0147E:  MOVLW  00
01480:  ADDWFC 03,W
01482:  MOVWF  FEA
01484:  MOVFF  6D7,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
01488:  MOVF   28,W
0148A:  MULLW  0E
0148C:  MOVF   FF3,W
0148E:  CLRF   xE6
01490:  MOVWF  xE5
01492:  MOVLW  02
01494:  ADDWF  xE5,W
01496:  MOVWF  01
01498:  MOVLW  00
0149A:  ADDWFC xE6,W
0149C:  MOVWF  03
0149E:  MOVF   01,W
014A0:  ADDLW  29
014A2:  MOVWF  FE9
014A4:  MOVLW  00
014A6:  ADDWFC 03,W
014A8:  MOVWF  FEA
014AA:  MOVFF  6D6,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
014AE:  MOVF   28,W
014B0:  MULLW  0E
014B2:  MOVF   FF3,W
014B4:  CLRF   xE6
014B6:  MOVWF  xE5
014B8:  MOVLW  03
014BA:  ADDWF  xE5,W
014BC:  MOVWF  01
014BE:  MOVLW  00
014C0:  ADDWFC xE6,W
014C2:  MOVWF  03
014C4:  MOVF   01,W
014C6:  ADDLW  29
014C8:  MOVWF  FE9
014CA:  MOVLW  00
014CC:  ADDWFC 03,W
014CE:  MOVWF  FEA
014D0:  MOVFF  6D5,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
014D4:  MOVF   28,W
014D6:  MULLW  0E
014D8:  MOVF   FF3,W
014DA:  CLRF   xE6
014DC:  MOVWF  xE5
014DE:  MOVLW  04
014E0:  ADDWF  xE5,W
014E2:  MOVWF  01
014E4:  MOVLW  00
014E6:  ADDWFC xE6,W
014E8:  MOVWF  03
014EA:  MOVF   01,W
014EC:  ADDLW  29
014EE:  MOVWF  FE9
014F0:  MOVLW  00
014F2:  ADDWFC 03,W
014F4:  MOVWF  FEA
014F6:  MOVFF  6D9,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
014FA:  MOVF   28,W
014FC:  MULLW  0E
014FE:  MOVF   FF3,W
01500:  CLRF   xE6
01502:  MOVWF  xE5
01504:  MOVLW  05
01506:  ADDWF  xE5,W
01508:  MOVWF  01
0150A:  MOVLW  00
0150C:  ADDWFC xE6,W
0150E:  MOVWF  03
01510:  MOVF   01,W
01512:  ADDLW  29
01514:  MOVWF  FE9
01516:  MOVLW  00
01518:  ADDWFC 03,W
0151A:  MOVWF  FEA
0151C:  MOVFF  6DA,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
01520:  CLRF   xE3
01522:  MOVF   xD9,W
01524:  SUBWF  xE3,W
01526:  BC    1570
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
01528:  MOVF   28,W
0152A:  MULLW  0E
0152C:  MOVF   FF3,W
0152E:  CLRF   xE6
01530:  MOVWF  xE5
01532:  MOVLW  06
01534:  ADDWF  xE3,W
01536:  CLRF   03
01538:  ADDWF  xE5,W
0153A:  MOVWF  01
0153C:  MOVF   xE6,W
0153E:  ADDWFC 03,F
01540:  MOVF   01,W
01542:  ADDLW  29
01544:  MOVWF  01
01546:  MOVLW  00
01548:  ADDWFC 03,F
0154A:  MOVFF  03,6E6
0154E:  CLRF   03
01550:  MOVF   xE3,W
01552:  ADDLW  DB
01554:  MOVWF  FE9
01556:  MOVLW  06
01558:  ADDWFC 03,W
0155A:  MOVWF  FEA
0155C:  MOVFF  FEF,6E7
01560:  MOVFF  6E6,FEA
01564:  MOVFF  01,FE9
01568:  MOVFF  6E7,FEF
....................       } 
0156C:  INCF   xE3,F
0156E:  BRA    1522
....................  
....................       can_rspoint++; 
01570:  INCF   28,F
....................    } 
....................    else 
01572:  BRA    168A
01574:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01576:  MOVLW  06
01578:  MOVLB  6
0157A:  MOVWF  xE6
0157C:  MOVLW  DB
0157E:  MOVWF  xE5
.................... } 
*
0168A:  MOVLB  0
0168C:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
018A4:  MOVF   xB6,W
018A6:  SUBLW  0A
018A8:  BNZ   18AC
....................    { 
....................       can_tspoint--; 
018AA:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
018AC:  MOVF   xB6,W
018AE:  SUBLW  FF
018B0:  BTFSC  FD8.2
018B2:  BRA    1ABA
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
018B4:  MOVF   xB6,W
018B6:  MULLW  0D
018B8:  MOVF   FF3,W
018BA:  MOVLB  6
018BC:  CLRF   xE6
018BE:  MOVWF  xE5
018C0:  MOVLW  B7
018C2:  ADDWF  xE5,W
018C4:  MOVWF  FE9
018C6:  MOVLW  00
018C8:  ADDWFC xE6,W
018CA:  MOVWF  FEA
018CC:  MOVFF  FEF,6E5
018D0:  MOVLB  0
018D2:  MOVF   xB6,W
018D4:  MULLW  0D
018D6:  MOVF   FF3,W
018D8:  MOVLB  6
018DA:  CLRF   xE7
018DC:  MOVWF  xE6
018DE:  MOVLW  01
018E0:  ADDWF  xE6,W
018E2:  MOVWF  01
018E4:  MOVLW  00
018E6:  ADDWFC xE7,W
018E8:  MOVWF  03
018EA:  MOVF   01,W
018EC:  ADDLW  B7
018EE:  MOVWF  FE9
018F0:  MOVLW  00
018F2:  ADDWFC 03,W
018F4:  MOVWF  FEA
018F6:  MOVFF  FEF,6E6
018FA:  MOVLB  0
018FC:  MOVF   xB6,W
018FE:  MULLW  0D
01900:  MOVF   FF3,W
01902:  MOVLB  6
01904:  CLRF   xE8
01906:  MOVWF  xE7
01908:  MOVLW  02
0190A:  ADDWF  xE7,W
0190C:  MOVWF  01
0190E:  MOVLW  00
01910:  ADDWFC xE8,W
01912:  MOVWF  03
01914:  MOVF   01,W
01916:  ADDLW  B7
01918:  MOVWF  FE9
0191A:  MOVLW  00
0191C:  ADDWFC 03,W
0191E:  MOVWF  FEA
01920:  MOVFF  FEF,6E7
01924:  MOVLB  0
01926:  MOVF   xB6,W
01928:  MULLW  0D
0192A:  MOVF   FF3,W
0192C:  MOVLB  6
0192E:  CLRF   xE9
01930:  MOVWF  xE8
01932:  MOVLW  03
01934:  ADDWF  xE8,W
01936:  MOVWF  01
01938:  MOVLW  00
0193A:  ADDWFC xE9,W
0193C:  MOVWF  03
0193E:  MOVF   01,W
01940:  ADDLW  B7
01942:  MOVWF  FE9
01944:  MOVLW  00
01946:  ADDWFC 03,W
01948:  MOVWF  FEA
0194A:  MOVFF  FEF,6E8
0194E:  MOVFF  6E5,6D8
01952:  MOVFF  6E6,6D7
01956:  MOVFF  6E7,6D6
0195A:  MOVFF  6E8,6D5
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
0195E:  MOVLB  0
01960:  MOVF   xB6,W
01962:  MULLW  0D
01964:  MOVF   FF3,W
01966:  MOVLB  6
01968:  CLRF   xE6
0196A:  MOVWF  xE5
0196C:  MOVLW  0C
0196E:  ADDWF  xE5,W
01970:  MOVWF  01
01972:  MOVLW  00
01974:  ADDWFC xE6,W
01976:  MOVWF  03
01978:  MOVF   01,W
0197A:  ADDLW  B7
0197C:  MOVWF  FE9
0197E:  MOVLW  00
01980:  ADDWFC 03,W
01982:  MOVWF  FEA
01984:  SWAPF  FEF,W
01986:  MOVWF  xD9
01988:  MOVLW  0F
0198A:  ANDWF  xD9,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
0198C:  MOVLB  0
0198E:  MOVF   xB6,W
01990:  MULLW  0D
01992:  MOVF   FF3,W
01994:  MOVLB  6
01996:  CLRF   xE6
01998:  MOVWF  xE5
0199A:  MOVLW  0C
0199C:  ADDWF  xE5,W
0199E:  MOVWF  01
019A0:  MOVLW  00
019A2:  ADDWFC xE6,W
019A4:  MOVWF  03
019A6:  MOVF   01,W
019A8:  ADDLW  B7
019AA:  MOVWF  FE9
019AC:  MOVLW  00
019AE:  ADDWFC 03,W
019B0:  MOVWF  FEA
019B2:  MOVF   FEF,W
019B4:  ANDLW  0C
019B6:  MOVWF  00
019B8:  RRCF   00,W
019BA:  MOVWF  xDA
019BC:  RRCF   xDA,F
019BE:  MOVLW  3F
019C0:  ANDWF  xDA,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
019C2:  MOVLB  0
019C4:  MOVF   xB6,W
019C6:  MULLW  0D
019C8:  MOVF   FF3,W
019CA:  MOVLB  6
019CC:  CLRF   xE6
019CE:  MOVWF  xE5
019D0:  MOVLW  0C
019D2:  ADDWF  xE5,W
019D4:  MOVWF  01
019D6:  MOVLW  00
019D8:  ADDWFC xE6,W
019DA:  MOVWF  03
019DC:  MOVF   01,W
019DE:  ADDLW  B7
019E0:  MOVWF  FE9
019E2:  MOVLW  00
019E4:  ADDWFC 03,W
019E6:  MOVWF  FEA
019E8:  MOVFF  FEF,6E5
019EC:  BCF    xE3.0
019EE:  BTFSC  xE5.1
019F0:  BSF    xE3.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
019F2:  MOVLB  0
019F4:  MOVF   xB6,W
019F6:  MULLW  0D
019F8:  MOVF   FF3,W
019FA:  MOVLB  6
019FC:  CLRF   xE6
019FE:  MOVWF  xE5
01A00:  MOVLW  0C
01A02:  ADDWF  xE5,W
01A04:  MOVWF  01
01A06:  MOVLW  00
01A08:  ADDWFC xE6,W
01A0A:  MOVWF  03
01A0C:  MOVF   01,W
01A0E:  ADDLW  B7
01A10:  MOVWF  FE9
01A12:  MOVLW  00
01A14:  ADDWFC 03,W
01A16:  MOVWF  FEA
01A18:  MOVFF  FEF,6E5
01A1C:  BCF    xE3.1
01A1E:  BTFSC  xE5.0
01A20:  BSF    xE3.1
....................  
....................       for(i=0;i<tx_length;i++) 
01A22:  CLRF   xE4
01A24:  MOVF   xD9,W
01A26:  SUBWF  xE4,W
01A28:  BC    1A7A
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01A2A:  CLRF   03
01A2C:  MOVF   xE4,W
01A2E:  ADDLW  DB
01A30:  MOVWF  01
01A32:  MOVLW  06
01A34:  ADDWFC 03,F
01A36:  MOVFF  01,6E5
01A3A:  MOVFF  03,6E6
01A3E:  MOVLB  0
01A40:  MOVF   xB6,W
01A42:  MULLW  0D
01A44:  MOVF   FF3,W
01A46:  MOVLB  6
01A48:  CLRF   xE8
01A4A:  MOVWF  xE7
01A4C:  MOVLW  04
01A4E:  ADDWF  xE4,W
01A50:  CLRF   03
01A52:  ADDWF  xE7,W
01A54:  MOVWF  01
01A56:  MOVF   xE8,W
01A58:  ADDWFC 03,F
01A5A:  MOVF   01,W
01A5C:  ADDLW  B7
01A5E:  MOVWF  FE9
01A60:  MOVLW  00
01A62:  ADDWFC 03,W
01A64:  MOVWF  FEA
01A66:  MOVFF  FEF,6E7
01A6A:  MOVFF  6E6,FEA
01A6E:  MOVFF  6E5,FE9
01A72:  MOVFF  6E7,FEF
....................       } 
01A76:  INCF   xE4,F
01A78:  BRA    1A24
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01A7A:  MOVLW  00
01A7C:  BTFSC  xE3.0
01A7E:  MOVLW  01
01A80:  MOVWF  xE5
01A82:  MOVLW  00
01A84:  BTFSC  xE3.1
01A86:  MOVLW  01
01A88:  MOVWF  xE6
01A8A:  MOVFF  6D8,6EA
01A8E:  MOVFF  6D7,6E9
01A92:  MOVFF  6D6,6E8
01A96:  MOVFF  6D5,6E7
01A9A:  MOVLW  06
01A9C:  MOVWF  xEC
01A9E:  MOVLW  DB
01AA0:  MOVWF  xEB
01AA2:  MOVFF  6D9,6ED
01AA6:  MOVFF  6DA,6EE
01AAA:  MOVFF  6E5,6EF
01AAE:  MOVFF  6E6,6F0
01AB2:  MOVLB  0
01AB4:  BRA    17D2
....................  
....................       can_tspoint--; 
01AB6:  DECF   xB6,F
....................    } 
....................    else 
01AB8:  BRA    1ABC
....................       return; 
01ABA:  BRA    1ABC
.................... } 
01ABC:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... //#define DEBUG 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
0239A:  MOVLB  6
0239C:  CLRF   xD1
0239E:  MOVF   xD0,W
023A0:  SUBWF  xD1,W
023A2:  BC    23D6
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
023A4:  CLRF   03
023A6:  MOVF   xD1,W
023A8:  ADDWF  xCE,W
023AA:  MOVWF  01
023AC:  MOVF   xCF,W
023AE:  ADDWFC 03,F
023B0:  MOVFF  03,6D3
023B4:  MOVFF  6CC,FE9
023B8:  MOVFF  6CD,FEA
023BC:  MOVFF  FEF,6D4
023C0:  MOVFF  6D3,FEA
023C4:  MOVFF  01,FE9
023C8:  MOVFF  6D4,FEF
....................       ++origin; 
023CC:  INCF   xCC,F
023CE:  BTFSC  FD8.2
023D0:  INCF   xCD,F
....................    } 
023D2:  INCF   xD1,F
023D4:  BRA    239E
.................... } 
023D6:  MOVLB  0
023D8:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
02130:  MOVLB  6
02132:  MOVFF  6BD,FE9
02136:  MOVFF  6BE,FEA
0213A:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
0213C:  MOVLW  01
0213E:  ADDWF  xBD,W
02140:  MOVWF  01
02142:  MOVLW  00
02144:  ADDWFC xBE,W
02146:  MOVFF  01,FE9
0214A:  MOVWF  FEA
0214C:  MOVFF  6BA,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
02150:  MOVLW  01
02152:  ADDWF  xBD,W
02154:  MOVWF  01
02156:  MOVLW  00
02158:  ADDWFC xBE,W
0215A:  MOVWF  03
0215C:  MOVF   01,W
0215E:  ADDLW  03
02160:  MOVWF  FE9
02162:  MOVLW  00
02164:  ADDWFC 03,W
02166:  MOVWF  FEA
02168:  MOVFF  6BB,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
0216C:  MOVLW  01
0216E:  ADDWF  xBD,W
02170:  MOVWF  01
02172:  MOVLW  00
02174:  ADDWFC xBE,W
02176:  MOVWF  03
02178:  MOVF   01,W
0217A:  ADDLW  06
0217C:  MOVWF  FE9
0217E:  MOVLW  00
02180:  ADDWFC 03,W
02182:  MOVWF  FEA
02184:  MOVFF  6BC,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
02188:  MOVLW  01
0218A:  ADDWF  xBD,W
0218C:  MOVWF  01
0218E:  MOVLW  00
02190:  ADDWFC xBE,W
02192:  MOVWF  03
02194:  MOVF   01,W
02196:  ADDLW  0E
02198:  MOVWF  FE9
0219A:  MOVLW  00
0219C:  ADDWFC 03,W
0219E:  MOVWF  FEA
021A0:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
021A2:  MOVLW  01
021A4:  ADDWF  xBD,W
021A6:  MOVWF  01
021A8:  MOVLW  00
021AA:  ADDWFC xBE,W
021AC:  MOVWF  03
021AE:  MOVF   01,W
021B0:  ADDLW  0F
021B2:  MOVWF  FE9
021B4:  MOVLW  00
021B6:  ADDWFC 03,W
021B8:  MOVWF  FEA
021BA:  MOVLW  01
021BC:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
021BE:  ADDWF  xBD,W
021C0:  MOVWF  01
021C2:  MOVLW  00
021C4:  ADDWFC xBE,W
021C6:  MOVWF  03
021C8:  MOVF   01,W
021CA:  ADDLW  09
021CC:  MOVWF  FE9
021CE:  MOVLW  00
021D0:  ADDWFC 03,W
021D2:  MOVWF  FEA
021D4:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
021D6:  MOVLW  01
021D8:  ADDWF  xBD,W
021DA:  MOVWF  01
021DC:  MOVLW  00
021DE:  ADDWFC xBE,W
021E0:  MOVWF  03
021E2:  MOVF   01,W
021E4:  ADDLW  0E
021E6:  MOVWF  FE9
021E8:  MOVLW  00
021EA:  ADDWFC 03,W
021EC:  MOVWF  FEA
021EE:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
021F0:  MOVLW  01
021F2:  ADDWF  xBD,W
021F4:  MOVWF  01
021F6:  MOVLW  00
021F8:  ADDWFC xBE,W
021FA:  MOVWF  03
021FC:  MOVF   01,W
021FE:  ADDLW  02
02200:  MOVWF  FE9
02202:  MOVLW  00
02204:  ADDWFC 03,W
02206:  MOVWF  FEA
02208:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
0220A:  MOVLW  01
0220C:  ADDWF  xBD,W
0220E:  MOVWF  01
02210:  MOVLW  00
02212:  ADDWFC xBE,W
02214:  MOVWF  03
02216:  MOVF   01,W
02218:  ADDLW  05
0221A:  MOVWF  FE9
0221C:  MOVLW  00
0221E:  ADDWFC 03,W
02220:  MOVWF  FEA
02222:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
02224:  MOVLW  01
02226:  ADDWF  xBD,W
02228:  MOVWF  01
0222A:  MOVLW  00
0222C:  ADDWFC xBE,W
0222E:  MOVWF  03
02230:  MOVF   01,W
02232:  ADDLW  08
02234:  MOVWF  FE9
02236:  MOVLW  00
02238:  ADDWFC 03,W
0223A:  MOVWF  FEA
0223C:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
0223E:  MOVLW  01
02240:  ADDWF  xBD,W
02242:  MOVWF  01
02244:  MOVLW  00
02246:  ADDWFC xBE,W
02248:  MOVWF  03
0224A:  MOVF   01,W
0224C:  ADDLW  01
0224E:  MOVWF  FE9
02250:  MOVLW  00
02252:  ADDWFC 03,W
02254:  MOVWF  FEA
02256:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
02258:  MOVLW  01
0225A:  ADDWF  xBD,W
0225C:  MOVWF  01
0225E:  MOVLW  00
02260:  ADDWFC xBE,W
02262:  MOVWF  03
02264:  MOVF   01,W
02266:  ADDLW  04
02268:  MOVWF  FE9
0226A:  MOVLW  00
0226C:  ADDWFC 03,W
0226E:  MOVWF  FEA
02270:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
02272:  MOVLW  01
02274:  ADDWF  xBD,W
02276:  MOVWF  01
02278:  MOVLW  00
0227A:  ADDWFC xBE,W
0227C:  MOVWF  03
0227E:  MOVF   01,W
02280:  ADDLW  07
02282:  MOVWF  FE9
02284:  MOVLW  00
02286:  ADDWFC 03,W
02288:  MOVWF  FEA
0228A:  MOVLW  01
0228C:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
0228E:  ADDWF  xBD,W
02290:  MOVWF  01
02292:  MOVLW  00
02294:  ADDWFC xBE,W
02296:  MOVWF  03
02298:  MOVF   01,W
0229A:  ADDLW  10
0229C:  MOVWF  01
0229E:  MOVLW  00
022A0:  ADDWFC 03,F
022A2:  MOVFF  03,6C3
022A6:  CLRF   03
022A8:  MOVF   xBF,W
022AA:  ADDLW  1C
022AC:  MOVWF  FE9
022AE:  MOVLW  00
022B0:  ADDWFC 03,W
022B2:  MOVWF  FEA
022B4:  MOVFF  FEF,6C4
022B8:  MOVFF  6C3,FEA
022BC:  MOVFF  01,FE9
022C0:  MOVFF  6C4,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
022C4:  MOVLW  01
022C6:  ADDWF  xBD,W
022C8:  MOVWF  01
022CA:  MOVLW  00
022CC:  ADDWFC xBE,W
022CE:  MOVWF  03
022D0:  MOVF   01,W
022D2:  ADDLW  0A
022D4:  MOVWF  FE9
022D6:  MOVLW  00
022D8:  ADDWFC 03,W
022DA:  MOVWF  FEA
022DC:  MOVF   FEE,F
022DE:  MOVF   FEE,F
022E0:  CLRF   FEC
022E2:  MOVF   FED,F
022E4:  CLRF   FEF
022E6:  MOVF   FED,F
022E8:  CLRF   FEF
022EA:  MOVF   FED,F
022EC:  CLRF   FEF
.................... } 
022EE:  MOVLB  0
022F0:  GOTO   2CC8 (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
020D6:  MOVLB  6
020D8:  MOVFF  6BC,FE9
020DC:  MOVFF  6BD,FEA
020E0:  MOVLW  01
020E2:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
020E4:  MOVFF  6BA,6BF
....................       sw.off.adress=off_adr; 
020E8:  MOVFF  6BB,6C2
....................       sw.previous_state=button_depressed; 
020EC:  BSF    xC5.1
....................       sw.outstate=off; 
020EE:  MOVWF  xCA
....................       sw.on.needs_update=0; 
020F0:  BCF    xC1.0
....................       sw.off.needs_update=0; 
020F2:  BCF    xC4.0
....................       sw.on.value=0; 
020F4:  CLRF   xC0
....................       sw.off.value=0; 
020F6:  CLRF   xC3
....................       sw.realbutton=inputs[real_button]; 
020F8:  CLRF   03
020FA:  MOVF   xBE,W
020FC:  ADDLW  1C
020FE:  MOVWF  FE9
02100:  MOVLW  00
02102:  ADDWFC 03,W
02104:  MOVWF  FEA
02106:  MOVFF  FEF,6CB
....................       input->device=sw; 
0210A:  MOVLW  01
0210C:  ADDWF  xBC,W
0210E:  MOVWF  FE9
02110:  MOVLW  00
02112:  ADDWFC xBD,W
02114:  MOVWF  FEA
02116:  MOVLW  06
02118:  MOVWF  FE2
0211A:  MOVLW  BF
0211C:  MOVWF  FE1
0211E:  MOVLW  20
02120:  MOVWF  01
02122:  MOVFF  FE6,FEE
02126:  DECFSZ 01,F
02128:  BRA    2122
.................... } 
0212A:  MOVLB  0
0212C:  GOTO   2BFA (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
022F4:  MOVLB  6
022F6:  MOVFF  6BD,FE9
022FA:  MOVFF  6BE,FEA
022FE:  MOVLW  02
02300:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
02302:  MOVFF  6BB,6C1
....................       sw.off.adress=off_adr; 
02306:  MOVFF  6BC,6C4
....................       sw.previous_state=button_depressed; 
0230A:  BSF    xC7.1
....................       sw.outstate=off; 
0230C:  MOVLW  01
0230E:  MOVWF  xC8
....................       sw.on.needs_update=0; 
02310:  BCF    xC3.0
....................       sw.off.needs_update=0; 
02312:  BCF    xC6.0
....................       sw.on.value=0; 
02314:  CLRF   xC2
....................       sw.off.value=0; 
02316:  CLRF   xC5
....................       sw.repeat=repeat; 
02318:  BCF    xC9.0
0231A:  BTFSC  xC0.0
0231C:  BSF    xC9.0
....................       sw.realbutton=inputs[real_button]; 
0231E:  CLRF   03
02320:  MOVF   xBF,W
02322:  ADDLW  1C
02324:  MOVWF  FE9
02326:  MOVLW  00
02328:  ADDWFC 03,W
0232A:  MOVWF  FEA
0232C:  MOVFF  FEF,6CA
....................       input->device=sw; 
02330:  MOVLW  01
02332:  ADDWF  xBD,W
02334:  MOVWF  FE9
02336:  MOVLW  00
02338:  ADDWFC xBE,W
0233A:  MOVWF  FEA
0233C:  MOVLW  06
0233E:  MOVWF  FE2
02340:  MOVLW  C1
02342:  MOVWF  FE1
02344:  MOVLW  20
02346:  MOVWF  01
02348:  MOVFF  FE6,FEE
0234C:  DECFSZ 01,F
0234E:  BRA    2348
.................... } 
02350:  MOVLB  0
02352:  GOTO   2DA2 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
025D0:  MOVLB  6
025D2:  MOVFF  6C0,FE9
025D6:  MOVFF  6C1,FEA
025DA:  MOVLW  65
025DC:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
025DE:  MOVLW  01
025E0:  ADDWF  xC0,W
025E2:  MOVWF  01
025E4:  MOVLW  00
025E6:  ADDWFC xC1,W
025E8:  MOVWF  03
025EA:  MOVF   01,W
025EC:  ADDLW  1D
025EE:  MOVWF  FE9
025F0:  MOVLW  00
025F2:  ADDWFC 03,W
025F4:  MOVWF  FEA
025F6:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
025F8:  MOVLW  01
025FA:  ADDWF  xC0,W
025FC:  MOVWF  01
025FE:  MOVLW  00
02600:  ADDWFC xC1,W
02602:  MOVWF  03
02604:  MOVF   01,W
02606:  ADDLW  09
02608:  MOVWF  FE9
0260A:  MOVLW  00
0260C:  ADDWFC 03,W
0260E:  MOVWF  FEA
02610:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02612:  MOVLW  01
02614:  ADDWF  xC0,W
02616:  MOVWF  01
02618:  MOVLW  00
0261A:  ADDWFC xC1,W
0261C:  MOVWF  03
0261E:  MOVF   01,W
02620:  ADDLW  13
02622:  MOVWF  FE9
02624:  MOVLW  00
02626:  ADDWFC 03,W
02628:  MOVWF  FEA
0262A:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
0262C:  MOVLW  01
0262E:  ADDWF  xC0,W
02630:  MOVWF  01
02632:  MOVLW  00
02634:  ADDWFC xC1,W
02636:  MOVWF  03
02638:  MOVF   01,W
0263A:  ADDLW  1C
0263C:  MOVWF  FE9
0263E:  MOVLW  00
02640:  ADDWFC 03,W
02642:  MOVWF  FEA
02644:  MOVLW  7F
02646:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
02648:  MOVLW  01
0264A:  ADDWF  xC0,W
0264C:  MOVWF  01
0264E:  MOVLW  00
02650:  ADDWFC xC1,W
02652:  MOVWF  03
02654:  MOVF   01,W
02656:  ADDLW  08
02658:  MOVWF  FE9
0265A:  MOVLW  00
0265C:  ADDWFC 03,W
0265E:  MOVWF  FEA
02660:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
02662:  MOVLW  01
02664:  ADDWF  xC0,W
02666:  MOVWF  01
02668:  MOVLW  00
0266A:  ADDWFC xC1,W
0266C:  MOVWF  03
0266E:  MOVF   01,W
02670:  ADDLW  12
02672:  MOVWF  FE9
02674:  MOVLW  00
02676:  ADDWFC 03,W
02678:  MOVWF  FEA
0267A:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
0267C:  MOVLW  01
0267E:  ADDWF  xC0,W
02680:  MOVWF  01
02682:  MOVLW  00
02684:  ADDWFC xC1,W
02686:  MOVWF  03
02688:  MOVF   01,W
0268A:  ADDLW  1F
0268C:  MOVWF  FE9
0268E:  MOVLW  00
02690:  ADDWFC 03,W
02692:  MOVWF  FEA
02694:  MOVFF  6C2,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
02698:  MOVLW  01
0269A:  ADDWF  xC0,W
0269C:  MOVWF  01
0269E:  MOVLW  00
026A0:  ADDWFC xC1,W
026A2:  MOVWF  03
026A4:  MOVF   01,W
026A6:  ADDLW  14
026A8:  MOVWF  01
026AA:  MOVLW  00
026AC:  ADDWFC 03,F
026AE:  MOVFF  01,6C5
026B2:  MOVFF  03,6C6
026B6:  MOVFF  6BB,6CD
026BA:  MOVFF  6BA,6CC
026BE:  MOVFF  03,6CF
026C2:  MOVFF  01,6CE
026C6:  MOVLW  08
026C8:  MOVWF  xD0
026CA:  MOVLB  0
026CC:  RCALL  239A
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
026CE:  MOVLW  01
026D0:  MOVLB  6
026D2:  ADDWF  xC0,W
026D4:  MOVWF  01
026D6:  MOVLW  00
026D8:  ADDWFC xC1,W
026DA:  MOVWF  03
026DC:  MOVFF  01,6C5
026E0:  MOVWF  xC6
026E2:  MOVFF  6BD,6CD
026E6:  MOVFF  6BC,6CC
026EA:  MOVWF  xCF
026EC:  MOVFF  01,6CE
026F0:  MOVLW  08
026F2:  MOVWF  xD0
026F4:  MOVLB  0
026F6:  RCALL  239A
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
026F8:  MOVLW  01
026FA:  MOVLB  6
026FC:  ADDWF  xC0,W
026FE:  MOVWF  01
02700:  MOVLW  00
02702:  ADDWFC xC1,W
02704:  MOVWF  03
02706:  MOVF   01,W
02708:  ADDLW  0A
0270A:  MOVWF  01
0270C:  MOVLW  00
0270E:  ADDWFC 03,F
02710:  MOVFF  01,6C5
02714:  MOVFF  03,6C6
02718:  MOVFF  6BF,6CD
0271C:  MOVFF  6BE,6CC
02720:  MOVFF  03,6CF
02724:  MOVFF  01,6CE
02728:  MOVLW  08
0272A:  MOVWF  xD0
0272C:  MOVLB  0
0272E:  RCALL  239A
....................    ((struct light)output->device).out_state=_off; 
02730:  MOVLW  01
02732:  MOVLB  6
02734:  ADDWF  xC0,W
02736:  MOVWF  01
02738:  MOVLW  00
0273A:  ADDWFC xC1,W
0273C:  MOVWF  03
0273E:  MOVF   01,W
02740:  ADDLW  1E
02742:  MOVWF  FE9
02744:  MOVLW  00
02746:  ADDWFC 03,W
02748:  MOVWF  FEA
0274A:  MOVLW  01
0274C:  MOVWF  FEF
.................... } 
0274E:  MOVLB  0
02750:  GOTO   2FBE (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02996:  MOVLB  6
02998:  MOVFF  6BE,FE9
0299C:  MOVFF  6BF,FEA
029A0:  MOVLW  64
029A2:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
029A4:  MOVLW  01
029A6:  ADDWF  xBE,W
029A8:  MOVWF  01
029AA:  MOVLW  00
029AC:  ADDWFC xBF,W
029AE:  MOVWF  03
029B0:  MOVF   01,W
029B2:  ADDLW  09
029B4:  MOVWF  FE9
029B6:  MOVLW  00
029B8:  ADDWFC 03,W
029BA:  MOVWF  FEA
029BC:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
029BE:  MOVLW  01
029C0:  ADDWF  xBE,W
029C2:  MOVWF  01
029C4:  MOVLW  00
029C6:  ADDWFC xBF,W
029C8:  MOVWF  03
029CA:  MOVF   01,W
029CC:  ADDLW  13
029CE:  MOVWF  FE9
029D0:  MOVLW  00
029D2:  ADDWFC 03,W
029D4:  MOVWF  FEA
029D6:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
029D8:  MOVLW  01
029DA:  ADDWF  xBE,W
029DC:  MOVWF  01
029DE:  MOVLW  00
029E0:  ADDWFC xBF,W
029E2:  MOVWF  03
029E4:  MOVF   01,W
029E6:  ADDLW  08
029E8:  MOVWF  FE9
029EA:  MOVLW  00
029EC:  ADDWFC 03,W
029EE:  MOVWF  FEA
029F0:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
029F2:  MOVLW  01
029F4:  ADDWF  xBE,W
029F6:  MOVWF  01
029F8:  MOVLW  00
029FA:  ADDWFC xBF,W
029FC:  MOVWF  03
029FE:  MOVF   01,W
02A00:  ADDLW  12
02A02:  MOVWF  FE9
02A04:  MOVLW  00
02A06:  ADDWFC 03,W
02A08:  MOVWF  FEA
02A0A:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02A0C:  MOVLW  01
02A0E:  ADDWF  xBE,W
02A10:  MOVWF  01
02A12:  MOVLW  00
02A14:  ADDWFC xBF,W
02A16:  MOVWF  03
02A18:  MOVF   01,W
02A1A:  ADDLW  14
02A1C:  MOVWF  FE9
02A1E:  MOVLW  00
02A20:  ADDWFC 03,W
02A22:  MOVWF  FEA
02A24:  MOVFF  6C0,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02A28:  MOVLW  01
02A2A:  ADDWF  xBE,W
02A2C:  MOVWF  01
02A2E:  MOVLW  00
02A30:  ADDWFC xBF,W
02A32:  MOVWF  03
02A34:  MOVFF  01,6C3
02A38:  MOVWF  xC4
02A3A:  MOVFF  6BB,6CD
02A3E:  MOVFF  6BA,6CC
02A42:  MOVWF  xCF
02A44:  MOVFF  01,6CE
02A48:  MOVLW  08
02A4A:  MOVWF  xD0
02A4C:  MOVLB  0
02A4E:  RCALL  239A
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02A50:  MOVLW  01
02A52:  MOVLB  6
02A54:  ADDWF  xBE,W
02A56:  MOVWF  01
02A58:  MOVLW  00
02A5A:  ADDWFC xBF,W
02A5C:  MOVWF  03
02A5E:  MOVF   01,W
02A60:  ADDLW  0A
02A62:  MOVWF  01
02A64:  MOVLW  00
02A66:  ADDWFC 03,F
02A68:  MOVFF  01,6C3
02A6C:  MOVFF  03,6C4
02A70:  MOVFF  6BD,6CD
02A74:  MOVFF  6BC,6CC
02A78:  MOVFF  03,6CF
02A7C:  MOVFF  01,6CE
02A80:  MOVLW  08
02A82:  MOVWF  xD0
02A84:  MOVLB  0
02A86:  RCALL  239A
.................... } 
02A88:  GOTO   31D6 (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
02754:  MOVLB  6
02756:  MOVFF  6C2,FE9
0275A:  MOVFF  6C3,FEA
0275E:  MOVLW  66
02760:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
02762:  MOVLW  01
02764:  ADDWF  xC2,W
02766:  MOVWF  01
02768:  MOVLW  00
0276A:  ADDWFC xC3,W
0276C:  MOVWF  03
0276E:  MOVF   01,W
02770:  ADDLW  09
02772:  MOVWF  FE9
02774:  MOVLW  00
02776:  ADDWFC 03,W
02778:  MOVWF  FEA
0277A:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
0277C:  MOVLW  01
0277E:  ADDWF  xC2,W
02780:  MOVWF  01
02782:  MOVLW  00
02784:  ADDWFC xC3,W
02786:  MOVWF  03
02788:  MOVF   01,W
0278A:  ADDLW  13
0278C:  MOVWF  FE9
0278E:  MOVLW  00
02790:  ADDWFC 03,W
02792:  MOVWF  FEA
02794:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
02796:  MOVLW  01
02798:  ADDWF  xC2,W
0279A:  MOVWF  01
0279C:  MOVLW  00
0279E:  ADDWFC xC3,W
027A0:  MOVWF  03
027A2:  MOVF   01,W
027A4:  ADDLW  08
027A6:  MOVWF  FE9
027A8:  MOVLW  00
027AA:  ADDWFC 03,W
027AC:  MOVWF  FEA
027AE:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
027B0:  MOVLW  01
027B2:  ADDWF  xC2,W
027B4:  MOVWF  01
027B6:  MOVLW  00
027B8:  ADDWFC xC3,W
027BA:  MOVWF  03
027BC:  MOVF   01,W
027BE:  ADDLW  12
027C0:  MOVWF  FE9
027C2:  MOVLW  00
027C4:  ADDWFC 03,W
027C6:  MOVWF  FEA
027C8:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
027CA:  MOVLW  01
027CC:  ADDWF  xC2,W
027CE:  MOVWF  01
027D0:  MOVLW  00
027D2:  ADDWFC xC3,W
027D4:  MOVWF  03
027D6:  MOVF   01,W
027D8:  ADDLW  1D
027DA:  MOVWF  FE9
027DC:  MOVLW  00
027DE:  ADDWFC 03,W
027E0:  MOVWF  FEA
027E2:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
027E4:  MOVLW  01
027E6:  ADDWF  xC2,W
027E8:  MOVWF  01
027EA:  MOVLW  00
027EC:  ADDWFC xC3,W
027EE:  MOVWF  03
027F0:  MOVF   01,W
027F2:  ADDLW  27
027F4:  MOVWF  FE9
027F6:  MOVLW  00
027F8:  ADDWFC 03,W
027FA:  MOVWF  FEA
027FC:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
027FE:  MOVLW  01
02800:  ADDWF  xC2,W
02802:  MOVWF  01
02804:  MOVLW  00
02806:  ADDWFC xC3,W
02808:  MOVWF  03
0280A:  MOVF   01,W
0280C:  ADDLW  1C
0280E:  MOVWF  FE9
02810:  MOVLW  00
02812:  ADDWFC 03,W
02814:  MOVWF  FEA
02816:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
02818:  MOVLW  01
0281A:  ADDWF  xC2,W
0281C:  MOVWF  01
0281E:  MOVLW  00
02820:  ADDWFC xC3,W
02822:  MOVWF  03
02824:  MOVF   01,W
02826:  ADDLW  26
02828:  MOVWF  FE9
0282A:  MOVLW  00
0282C:  ADDWFC 03,W
0282E:  MOVWF  FEA
02830:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
02832:  MOVLW  01
02834:  ADDWF  xC2,W
02836:  MOVWF  01
02838:  MOVLW  00
0283A:  ADDWFC xC3,W
0283C:  MOVWF  03
0283E:  MOVF   01,W
02840:  ADDLW  28
02842:  MOVWF  FE9
02844:  MOVLW  00
02846:  ADDWFC 03,W
02848:  MOVWF  FEA
0284A:  MOVFF  6C4,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
0284E:  MOVLW  01
02850:  ADDWF  xC2,W
02852:  MOVWF  01
02854:  MOVLW  00
02856:  ADDWFC xC3,W
02858:  MOVWF  03
0285A:  MOVF   01,W
0285C:  ADDLW  29
0285E:  MOVWF  FE9
02860:  MOVLW  00
02862:  ADDWFC 03,W
02864:  MOVWF  FEA
02866:  MOVFF  6C5,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
0286A:  MOVLW  01
0286C:  ADDWF  xC2,W
0286E:  MOVWF  01
02870:  MOVLW  00
02872:  ADDWFC xC3,W
02874:  MOVWF  03
02876:  MOVF   01,W
02878:  ADDLW  2B
0287A:  MOVWF  FE9
0287C:  MOVLW  00
0287E:  ADDWFC 03,W
02880:  MOVWF  FEA
02882:  MOVFF  6C7,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
02886:  MOVLW  01
02888:  ADDWF  xC2,W
0288A:  MOVWF  01
0288C:  MOVLW  00
0288E:  ADDWFC xC3,W
02890:  MOVWF  03
02892:  MOVF   01,W
02894:  ADDLW  2C
02896:  MOVWF  FE9
02898:  MOVLW  00
0289A:  ADDWFC 03,W
0289C:  MOVWF  FEA
0289E:  MOVFF  6C6,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
028A2:  MOVLW  01
028A4:  ADDWF  xC2,W
028A6:  MOVWF  01
028A8:  MOVLW  00
028AA:  ADDWFC xC3,W
028AC:  MOVWF  03
028AE:  MOVFF  01,6CA
028B2:  MOVWF  xCB
028B4:  MOVFF  6BB,6CD
028B8:  MOVFF  6BA,6CC
028BC:  MOVWF  xCF
028BE:  MOVFF  01,6CE
028C2:  MOVLW  08
028C4:  MOVWF  xD0
028C6:  MOVLB  0
028C8:  RCALL  239A
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
028CA:  MOVLW  01
028CC:  MOVLB  6
028CE:  ADDWF  xC2,W
028D0:  MOVWF  01
028D2:  MOVLW  00
028D4:  ADDWFC xC3,W
028D6:  MOVWF  03
028D8:  MOVF   01,W
028DA:  ADDLW  0A
028DC:  MOVWF  01
028DE:  MOVLW  00
028E0:  ADDWFC 03,F
028E2:  MOVFF  01,6CA
028E6:  MOVFF  03,6CB
028EA:  MOVFF  6BD,6CD
028EE:  MOVFF  6BC,6CC
028F2:  MOVFF  03,6CF
028F6:  MOVFF  01,6CE
028FA:  MOVLW  08
028FC:  MOVWF  xD0
028FE:  MOVLB  0
02900:  RCALL  239A
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02902:  MOVLW  01
02904:  MOVLB  6
02906:  ADDWF  xC2,W
02908:  MOVWF  01
0290A:  MOVLW  00
0290C:  ADDWFC xC3,W
0290E:  MOVWF  03
02910:  MOVF   01,W
02912:  ADDLW  14
02914:  MOVWF  01
02916:  MOVLW  00
02918:  ADDWFC 03,F
0291A:  MOVFF  01,6CA
0291E:  MOVFF  03,6CB
02922:  MOVFF  6BF,6CD
02926:  MOVFF  6BE,6CC
0292A:  MOVFF  03,6CF
0292E:  MOVFF  01,6CE
02932:  MOVLW  08
02934:  MOVWF  xD0
02936:  MOVLB  0
02938:  RCALL  239A
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
0293A:  MOVLW  01
0293C:  MOVLB  6
0293E:  ADDWF  xC2,W
02940:  MOVWF  01
02942:  MOVLW  00
02944:  ADDWFC xC3,W
02946:  MOVWF  03
02948:  MOVF   01,W
0294A:  ADDLW  1E
0294C:  MOVWF  01
0294E:  MOVLW  00
02950:  ADDWFC 03,F
02952:  MOVFF  01,6CA
02956:  MOVFF  03,6CB
0295A:  MOVFF  6C1,6CD
0295E:  MOVFF  6C0,6CC
02962:  MOVFF  03,6CF
02966:  MOVFF  01,6CE
0296A:  MOVLW  08
0296C:  MOVWF  xD0
0296E:  MOVLB  0
02970:  RCALL  239A
....................    ((struct shutter)output->device).state=idle; 
02972:  MOVLW  01
02974:  MOVLB  6
02976:  ADDWF  xC2,W
02978:  MOVWF  01
0297A:  MOVLW  00
0297C:  ADDWFC xC3,W
0297E:  MOVWF  03
02980:  MOVF   01,W
02982:  ADDLW  2D
02984:  MOVWF  FE9
02986:  MOVLW  00
02988:  ADDWFC 03,W
0298A:  MOVWF  FEA
0298C:  MOVLW  04
0298E:  MOVWF  FEF
.................... } 
02990:  MOVLB  0
02992:  GOTO   311E (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
023DA:  MOVLB  6
023DC:  MOVFF  6C0,FE9
023E0:  MOVFF  6C1,FEA
023E4:  MOVLW  03
023E6:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
023E8:  MOVLW  01
023EA:  ADDWF  xC0,W
023EC:  MOVWF  01
023EE:  MOVLW  00
023F0:  ADDWFC xC1,W
023F2:  MOVWF  03
023F4:  MOVF   01,W
023F6:  ADDLW  05
023F8:  MOVWF  FE9
023FA:  MOVLW  00
023FC:  ADDWFC 03,W
023FE:  MOVWF  FEA
02400:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02402:  MOVLW  01
02404:  ADDWF  xC0,W
02406:  MOVWF  01
02408:  MOVLW  00
0240A:  ADDWFC xC1,W
0240C:  MOVWF  03
0240E:  MOVF   01,W
02410:  ADDLW  08
02412:  MOVWF  FE9
02414:  MOVLW  00
02416:  ADDWFC 03,W
02418:  MOVWF  FEA
0241A:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
0241C:  MOVLW  01
0241E:  ADDWF  xC0,W
02420:  MOVWF  01
02422:  MOVLW  00
02424:  ADDWFC xC1,W
02426:  MOVWF  03
02428:  MOVF   01,W
0242A:  ADDLW  04
0242C:  MOVWF  FE9
0242E:  MOVLW  00
02430:  ADDWFC 03,W
02432:  MOVWF  FEA
02434:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
02436:  MOVLW  01
02438:  ADDWF  xC0,W
0243A:  MOVWF  01
0243C:  MOVLW  00
0243E:  ADDWFC xC1,W
02440:  MOVWF  03
02442:  MOVF   01,W
02444:  ADDLW  07
02446:  MOVWF  FE9
02448:  MOVLW  00
0244A:  ADDWFC 03,W
0244C:  MOVWF  FEA
0244E:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
02450:  MOVLW  01
02452:  ADDWF  xC0,W
02454:  MOVWF  01
02456:  MOVLW  00
02458:  ADDWFC xC1,W
0245A:  MOVWF  03
0245C:  MOVF   01,W
0245E:  ADDLW  12
02460:  MOVWF  FE9
02462:  MOVLW  00
02464:  ADDWFC 03,W
02466:  MOVWF  FEA
02468:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
0246A:  MOVLW  01
0246C:  ADDWF  xC0,W
0246E:  MOVWF  01
02470:  MOVLW  00
02472:  ADDWFC xC1,W
02474:  MOVWF  03
02476:  MOVF   01,W
02478:  ADDLW  1C
0247A:  MOVWF  FE9
0247C:  MOVLW  00
0247E:  ADDWFC 03,W
02480:  MOVWF  FEA
02482:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
02484:  MOVLW  01
02486:  ADDWF  xC0,W
02488:  MOVWF  01
0248A:  MOVLW  00
0248C:  ADDWFC xC1,W
0248E:  MOVWF  03
02490:  MOVF   01,W
02492:  ADDLW  11
02494:  MOVWF  FE9
02496:  MOVLW  00
02498:  ADDWFC 03,W
0249A:  MOVWF  FEA
0249C:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
0249E:  MOVLW  01
024A0:  ADDWF  xC0,W
024A2:  MOVWF  01
024A4:  MOVLW  00
024A6:  ADDWFC xC1,W
024A8:  MOVWF  03
024AA:  MOVF   01,W
024AC:  ADDLW  1B
024AE:  MOVWF  FE9
024B0:  MOVLW  00
024B2:  ADDWFC 03,W
024B4:  MOVWF  FEA
024B6:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
024B8:  MOVLW  01
024BA:  ADDWF  xC0,W
024BC:  MOVWF  01
024BE:  MOVLW  00
024C0:  ADDWFC xC1,W
024C2:  MOVWF  03
024C4:  MOVF   01,W
024C6:  ADDLW  1D
024C8:  MOVWF  FE9
024CA:  MOVLW  00
024CC:  ADDWFC 03,W
024CE:  MOVWF  FEA
024D0:  CLRF   FEC
024D2:  MOVF   FED,F
024D4:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
024D6:  MOVLW  01
024D8:  ADDWF  xC0,W
024DA:  MOVWF  01
024DC:  MOVLW  00
024DE:  ADDWFC xC1,W
024E0:  MOVFF  01,FE9
024E4:  MOVWF  FEA
024E6:  MOVFF  6C2,FEF
....................    ((struct timer)input->device).active=false; 
024EA:  MOVLW  01
024EC:  ADDWF  xC0,W
024EE:  MOVWF  01
024F0:  MOVLW  00
024F2:  ADDWFC xC1,W
024F4:  MOVWF  03
024F6:  MOVF   01,W
024F8:  ADDLW  1F
024FA:  MOVWF  FE9
024FC:  MOVLW  00
024FE:  ADDWFC 03,W
02500:  MOVWF  FEA
02502:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02504:  MOVLW  01
02506:  ADDWF  xC0,W
02508:  MOVWF  01
0250A:  MOVLW  00
0250C:  ADDWFC xC1,W
0250E:  MOVWF  03
02510:  MOVF   01,W
02512:  ADDLW  01
02514:  MOVWF  FE9
02516:  MOVLW  00
02518:  ADDWFC 03,W
0251A:  MOVWF  FEA
0251C:  MOVFF  6C4,FEC
02520:  MOVF   FED,F
02522:  MOVFF  6C3,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
02526:  MOVLW  01
02528:  ADDWF  xC0,W
0252A:  MOVWF  01
0252C:  MOVLW  00
0252E:  ADDWFC xC1,W
02530:  MOVWF  03
02532:  MOVF   01,W
02534:  ADDLW  03
02536:  MOVWF  FE9
02538:  MOVLW  00
0253A:  ADDWFC 03,W
0253C:  MOVWF  FEA
0253E:  MOVFF  6BE,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
02542:  MOVLW  01
02544:  ADDWF  xC0,W
02546:  MOVWF  01
02548:  MOVLW  00
0254A:  ADDWFC xC1,W
0254C:  MOVWF  03
0254E:  MOVF   01,W
02550:  ADDLW  06
02552:  MOVWF  FE9
02554:  MOVLW  00
02556:  ADDWFC 03,W
02558:  MOVWF  FEA
0255A:  MOVFF  6BF,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
0255E:  MOVLW  01
02560:  ADDWF  xC0,W
02562:  MOVWF  01
02564:  MOVLW  00
02566:  ADDWFC xC1,W
02568:  MOVWF  03
0256A:  MOVF   01,W
0256C:  ADDLW  09
0256E:  MOVWF  01
02570:  MOVLW  00
02572:  ADDWFC 03,F
02574:  MOVFF  01,6C7
02578:  MOVFF  03,6C8
0257C:  MOVFF  6BB,6CD
02580:  MOVFF  6BA,6CC
02584:  MOVFF  03,6CF
02588:  MOVFF  01,6CE
0258C:  MOVLW  08
0258E:  MOVWF  xD0
02590:  MOVLB  0
02592:  RCALL  239A
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
02594:  MOVLW  01
02596:  MOVLB  6
02598:  ADDWF  xC0,W
0259A:  MOVWF  01
0259C:  MOVLW  00
0259E:  ADDWFC xC1,W
025A0:  MOVWF  03
025A2:  MOVF   01,W
025A4:  ADDLW  13
025A6:  MOVWF  01
025A8:  MOVLW  00
025AA:  ADDWFC 03,F
025AC:  MOVFF  01,6C7
025B0:  MOVFF  03,6C8
025B4:  MOVFF  6BD,6CD
025B8:  MOVFF  6BC,6CC
025BC:  MOVFF  03,6CF
025C0:  MOVFF  01,6CE
025C4:  MOVLW  08
025C6:  MOVWF  xD0
025C8:  MOVLB  0
025CA:  RCALL  239A
.................... } 
025CC:  GOTO   2EE2 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... int used_dimmers=0; 
.................... #use fast_io(C) 
.................... #use fast_io(D) 
....................  
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00E82:  BCF    FD8.0
00E84:  RLCF   xD7,W
00E86:  MOVWF  00
00E88:  BCF    FD8.0
00E8A:  RLCF   00,F
00E8C:  MOVF   00,W
00E8E:  MOVLB  5
00E90:  ADDWF  x7B,W
00E92:  MOVLB  6
00E94:  MOVWF  xDB
00E96:  MOVLW  00
00E98:  MOVLB  5
00E9A:  ADDWFC x7C,W
00E9C:  MOVLB  6
00E9E:  MOVWF  xDC
00EA0:  BCF    FD8.0
00EA2:  RLCF   xD8,W
00EA4:  ADDWF  xDB,W
00EA6:  MOVWF  xD9
00EA8:  MOVLW  00
00EAA:  ADDWFC xDC,W
00EAC:  MOVWF  xDA
*
00F1A:  BCF    FD8.0
00F1C:  RLCF   xD7,W
00F1E:  MOVWF  00
00F20:  BCF    FD8.0
00F22:  RLCF   00,F
00F24:  MOVF   00,W
00F26:  MOVLB  5
00F28:  ADDWF  x7B,W
00F2A:  MOVLB  6
00F2C:  MOVWF  xDB
00F2E:  MOVLW  00
00F30:  MOVLB  5
00F32:  ADDWFC x7C,W
00F34:  MOVLB  6
00F36:  MOVWF  xDC
00F38:  BCF    FD8.0
00F3A:  RLCF   xD8,W
00F3C:  ADDWF  xDB,W
00F3E:  MOVWF  xD9
00F40:  MOVLW  00
00F42:  ADDWFC xDC,W
00F44:  MOVWF  xDA
*
00FAA:  BCF    FD8.0
00FAC:  RLCF   xD7,W
00FAE:  MOVWF  00
00FB0:  BCF    FD8.0
00FB2:  RLCF   00,F
00FB4:  MOVF   00,W
00FB6:  MOVLB  5
00FB8:  ADDWF  x7B,W
00FBA:  MOVLB  6
00FBC:  MOVWF  xDB
00FBE:  MOVLW  00
00FC0:  MOVLB  5
00FC2:  ADDWFC x7C,W
00FC4:  MOVLB  6
00FC6:  MOVWF  xDC
00FC8:  BCF    FD8.0
00FCA:  RLCF   xD8,W
00FCC:  ADDWF  xDB,W
00FCE:  MOVWF  xD9
00FD0:  MOVLW  00
00FD2:  ADDWFC xDC,W
00FD4:  MOVWF  xDA
*
01032:  BCF    FD8.0
01034:  RLCF   xD7,W
01036:  MOVWF  00
01038:  BCF    FD8.0
0103A:  RLCF   00,F
0103C:  MOVF   00,W
0103E:  MOVLB  5
01040:  ADDWF  x7B,W
01042:  MOVLB  6
01044:  MOVWF  xDB
01046:  MOVLW  00
01048:  MOVLB  5
0104A:  ADDWFC x7C,W
0104C:  MOVLB  6
0104E:  MOVWF  xDC
01050:  BCF    FD8.0
01052:  RLCF   xD8,W
01054:  ADDWF  xDB,W
01056:  MOVWF  xD9
01058:  MOVLW  00
0105A:  ADDWFC xDC,W
0105C:  MOVWF  xDA
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
00EAE:  BCF    FD8.0
00EB0:  RLCF   xD7,W
00EB2:  MOVWF  00
00EB4:  BCF    FD8.0
00EB6:  RLCF   00,F
00EB8:  MOVF   00,W
00EBA:  MOVLB  5
00EBC:  ADDWF  x7B,W
00EBE:  MOVLB  6
00EC0:  MOVWF  xDB
00EC2:  MOVLW  00
00EC4:  MOVLB  5
00EC6:  ADDWFC x7C,W
00EC8:  MOVLB  6
00ECA:  MOVWF  xDC
00ECC:  BCF    FD8.0
00ECE:  RLCF   xD8,W
00ED0:  ADDWF  xDB,W
00ED2:  MOVWF  01
00ED4:  MOVLW  00
00ED6:  ADDWFC xDC,W
00ED8:  MOVWF  03
00EDA:  MOVFF  01,FE9
00EDE:  MOVWF  FEA
00EE0:  MOVFF  FEF,01
00EE4:  INCF   FE9,F
00EE6:  MOVF   FEF,W
00EE8:  DECF   FE9,F
00EEA:  MOVWF  02
*
00F46:  BCF    FD8.0
00F48:  RLCF   xD7,W
00F4A:  MOVWF  00
00F4C:  BCF    FD8.0
00F4E:  RLCF   00,F
00F50:  MOVF   00,W
00F52:  MOVLB  5
00F54:  ADDWF  x7B,W
00F56:  MOVLB  6
00F58:  MOVWF  xDB
00F5A:  MOVLW  00
00F5C:  MOVLB  5
00F5E:  ADDWFC x7C,W
00F60:  MOVLB  6
00F62:  MOVWF  xDC
00F64:  BCF    FD8.0
00F66:  RLCF   xD8,W
00F68:  ADDWF  xDB,W
00F6A:  MOVWF  01
00F6C:  MOVLW  00
00F6E:  ADDWFC xDC,W
00F70:  MOVWF  03
00F72:  MOVFF  01,FE9
00F76:  MOVWF  FEA
00F78:  MOVFF  FEF,01
00F7C:  INCF   FE9,F
00F7E:  MOVF   FEF,W
00F80:  DECF   FE9,F
00F82:  MOVWF  02
*
00FD6:  BCF    FD8.0
00FD8:  RLCF   xD7,W
00FDA:  MOVWF  00
00FDC:  BCF    FD8.0
00FDE:  RLCF   00,F
00FE0:  MOVF   00,W
00FE2:  MOVLB  5
00FE4:  ADDWF  x7B,W
00FE6:  MOVLB  6
00FE8:  MOVWF  xDB
00FEA:  MOVLW  00
00FEC:  MOVLB  5
00FEE:  ADDWFC x7C,W
00FF0:  MOVLB  6
00FF2:  MOVWF  xDC
00FF4:  BCF    FD8.0
00FF6:  RLCF   xD8,W
00FF8:  ADDWF  xDB,W
00FFA:  MOVWF  01
00FFC:  MOVLW  00
00FFE:  ADDWFC xDC,W
01000:  MOVWF  03
01002:  MOVFF  01,FE9
01006:  MOVWF  FEA
01008:  MOVFF  FEF,01
0100C:  INCF   FE9,F
0100E:  MOVF   FEF,W
01010:  DECF   FE9,F
01012:  MOVWF  02
*
0105E:  BCF    FD8.0
01060:  RLCF   xD7,W
01062:  MOVWF  00
01064:  BCF    FD8.0
01066:  RLCF   00,F
01068:  MOVF   00,W
0106A:  MOVLB  5
0106C:  ADDWF  x7B,W
0106E:  MOVLB  6
01070:  MOVWF  xDB
01072:  MOVLW  00
01074:  MOVLB  5
01076:  ADDWFC x7C,W
01078:  MOVLB  6
0107A:  MOVWF  xDC
0107C:  BCF    FD8.0
0107E:  RLCF   xD8,W
01080:  ADDWF  xDB,W
01082:  MOVWF  01
01084:  MOVLW  00
01086:  ADDWFC xDC,W
01088:  MOVWF  03
0108A:  MOVFF  01,FE9
0108E:  MOVWF  FEA
01090:  MOVFF  FEF,01
01094:  INCF   FE9,F
01096:  MOVF   FEF,W
01098:  DECF   FE9,F
0109A:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
031F2:  MOVLB  6
031F4:  CLRF   xA0
031F6:  BSF    xA1.0
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
031F8:  CLRF   xA2
031FA:  MOVLB  5
031FC:  MOVF   x7A,W
031FE:  MOVLB  6
03200:  SUBWF  xA2,W
03202:  BC    3292
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
03204:  MOVF   xA2,W
03206:  MULLW  04
03208:  MOVF   FF3,W
0320A:  CLRF   xA7
0320C:  MOVWF  xA6
0320E:  MOVLW  60
03210:  ADDWF  xA6,W
03212:  MOVWF  01
03214:  MOVLW  06
03216:  ADDWFC xA7,W
03218:  MOVWF  03
0321A:  MOVWF  xA7
0321C:  CLRF   03
0321E:  MOVF   xA2,W
03220:  ADDLW  81
03222:  MOVWF  FE9
03224:  MOVLW  05
03226:  ADDWFC 03,W
03228:  MOVWF  FEA
0322A:  MOVF   FEF,W
0322C:  CLRF   03
0322E:  MOVFF  6A7,FEA
03232:  MOVFF  01,FE9
03236:  MOVFF  03,FEC
0323A:  MOVF   FED,F
0323C:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
0323E:  MOVF   xA2,W
03240:  MULLW  04
03242:  MOVF   FF3,W
03244:  CLRF   xA7
03246:  MOVWF  xA6
03248:  MOVLW  02
0324A:  ADDWF  xA6,W
0324C:  MOVWF  01
0324E:  MOVLW  00
03250:  ADDWFC xA7,W
03252:  MOVWF  03
03254:  MOVF   01,W
03256:  ADDLW  60
03258:  MOVWF  01
0325A:  MOVLW  06
0325C:  ADDWFC 03,F
0325E:  MOVFF  03,6A7
03262:  BCF    FD8.0
03264:  RLCF   xA2,W
03266:  CLRF   03
03268:  ADDLW  19
0326A:  MOVWF  FE9
0326C:  MOVLW  06
0326E:  ADDWFC 03,W
03270:  MOVWF  FEA
03272:  MOVFF  FEC,03
03276:  MOVF   FED,F
03278:  MOVFF  FEF,6A8
0327C:  MOVFF  6A7,FEA
03280:  MOVFF  01,FE9
03284:  MOVFF  03,FEC
03288:  MOVF   FED,F
0328A:  MOVFF  6A8,FEF
....................      } 
0328E:  INCF   xA2,F
03290:  BRA    31FA
....................  
....................      WHILE(again) 
....................      { 
03292:  BTFSS  xA1.0
03294:  BRA    345C
....................         again = 0; 
03296:  BCF    xA1.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
03298:  CLRF   xA2
0329A:  MOVLW  01
0329C:  MOVLB  5
0329E:  SUBWF  x7A,W
032A0:  MOVLB  6
032A2:  SUBWF  xA2,W
032A4:  BTFSC  FD8.0
032A6:  BRA    345A
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
032A8:  MOVF   xA2,W
032AA:  MULLW  04
032AC:  MOVF   FF3,W
032AE:  CLRF   xA7
032B0:  MOVWF  xA6
032B2:  MOVLW  60
032B4:  ADDWF  xA6,W
032B6:  MOVWF  FE9
032B8:  MOVLW  06
032BA:  ADDWFC xA7,W
032BC:  MOVWF  FEA
032BE:  MOVFF  FEC,6A7
032C2:  MOVF   FED,F
032C4:  MOVFF  FEF,6A6
032C8:  MOVLW  01
032CA:  ADDWF  xA2,W
032CC:  MULLW  04
032CE:  MOVF   FF3,W
032D0:  CLRF   xA9
032D2:  MOVWF  xA8
032D4:  MOVLW  60
032D6:  ADDWF  xA8,W
032D8:  MOVWF  FE9
032DA:  MOVLW  06
032DC:  ADDWFC xA9,W
032DE:  MOVWF  FEA
032E0:  MOVFF  FEC,03
032E4:  MOVF   FED,F
032E6:  MOVFF  FEF,01
032EA:  MOVF   xA7,W
032EC:  SUBWF  03,W
032EE:  BTFSS  FD8.0
032F0:  BRA    3456
032F2:  BNZ   32FC
032F4:  MOVF   01,W
032F6:  SUBWF  xA6,W
032F8:  BTFSC  FD8.0
032FA:  BRA    3456
....................            { 
....................               again = 1; 
032FC:  BSF    xA1.0
....................               fl = tempd[fa][0]; 
032FE:  MOVF   xA2,W
03300:  MULLW  04
03302:  MOVF   FF3,W
03304:  CLRF   xA7
03306:  MOVWF  xA6
03308:  MOVLW  60
0330A:  ADDWF  xA6,W
0330C:  MOVWF  FE9
0330E:  MOVLW  06
03310:  ADDWFC xA7,W
03312:  MOVWF  FEA
03314:  MOVFF  FEC,03
03318:  MOVF   FED,F
0331A:  MOVFF  FEF,6A3
0331E:  MOVFF  03,6A4
....................               tempd[fa][0] = tempd[fa + 1][0]; 
03322:  MOVF   xA2,W
03324:  MULLW  04
03326:  MOVF   FF3,W
03328:  CLRF   xA7
0332A:  MOVWF  xA6
0332C:  MOVLW  60
0332E:  ADDWF  xA6,W
03330:  MOVWF  01
03332:  MOVLW  06
03334:  ADDWFC xA7,W
03336:  MOVWF  03
03338:  MOVWF  xA7
0333A:  MOVLW  01
0333C:  ADDWF  xA2,W
0333E:  MULLW  04
03340:  MOVF   FF3,W
03342:  CLRF   xA9
03344:  MOVWF  xA8
03346:  MOVLW  60
03348:  ADDWF  xA8,W
0334A:  MOVWF  FE9
0334C:  MOVLW  06
0334E:  ADDWFC xA9,W
03350:  MOVWF  FEA
03352:  MOVFF  FEC,03
03356:  MOVF   FED,F
03358:  MOVFF  FEF,6A8
0335C:  MOVFF  6A7,FEA
03360:  MOVFF  01,FE9
03364:  MOVFF  03,FEC
03368:  MOVF   FED,F
0336A:  MOVFF  6A8,FEF
....................               tempd[fa + 1][0] = fl; 
0336E:  MOVLW  01
03370:  ADDWF  xA2,W
03372:  MULLW  04
03374:  MOVF   FF3,W
03376:  CLRF   xA7
03378:  MOVWF  xA6
0337A:  MOVLW  60
0337C:  ADDWF  xA6,W
0337E:  MOVWF  FE9
03380:  MOVLW  06
03382:  ADDWFC xA7,W
03384:  MOVWF  FEA
03386:  MOVFF  6A4,FEC
0338A:  MOVF   FED,F
0338C:  MOVFF  6A3,FEF
....................               fl = tempd[fa][1]; 
03390:  MOVF   xA2,W
03392:  MULLW  04
03394:  MOVF   FF3,W
03396:  CLRF   xA7
03398:  MOVWF  xA6
0339A:  MOVLW  02
0339C:  ADDWF  xA6,W
0339E:  MOVWF  01
033A0:  MOVLW  00
033A2:  ADDWFC xA7,W
033A4:  MOVWF  03
033A6:  MOVF   01,W
033A8:  ADDLW  60
033AA:  MOVWF  FE9
033AC:  MOVLW  06
033AE:  ADDWFC 03,W
033B0:  MOVWF  FEA
033B2:  MOVFF  FEC,03
033B6:  MOVF   FED,F
033B8:  MOVFF  FEF,6A3
033BC:  MOVFF  03,6A4
....................               tempd[fa][1] = tempd[fa + 1][1]; 
033C0:  MOVF   xA2,W
033C2:  MULLW  04
033C4:  MOVF   FF3,W
033C6:  CLRF   xA7
033C8:  MOVWF  xA6
033CA:  MOVLW  02
033CC:  ADDWF  xA6,W
033CE:  MOVWF  01
033D0:  MOVLW  00
033D2:  ADDWFC xA7,W
033D4:  MOVWF  03
033D6:  MOVF   01,W
033D8:  ADDLW  60
033DA:  MOVWF  01
033DC:  MOVLW  06
033DE:  ADDWFC 03,F
033E0:  MOVFF  01,6A6
033E4:  MOVFF  03,6A7
033E8:  MOVLW  01
033EA:  ADDWF  xA2,W
033EC:  MULLW  04
033EE:  MOVF   FF3,W
033F0:  CLRF   xA9
033F2:  MOVWF  xA8
033F4:  MOVLW  02
033F6:  ADDWF  xA8,W
033F8:  MOVWF  01
033FA:  MOVLW  00
033FC:  ADDWFC xA9,W
033FE:  MOVWF  03
03400:  MOVF   01,W
03402:  ADDLW  60
03404:  MOVWF  FE9
03406:  MOVLW  06
03408:  ADDWFC 03,W
0340A:  MOVWF  FEA
0340C:  MOVFF  FEC,03
03410:  MOVF   FED,F
03412:  MOVFF  FEF,6A8
03416:  MOVFF  6A7,FEA
0341A:  MOVFF  6A6,FE9
0341E:  MOVFF  03,FEC
03422:  MOVF   FED,F
03424:  MOVFF  6A8,FEF
....................               tempd[fa + 1][1] = fl; 
03428:  MOVLW  01
0342A:  ADDWF  xA2,W
0342C:  MULLW  04
0342E:  MOVF   FF3,W
03430:  CLRF   xA7
03432:  MOVWF  xA6
03434:  MOVLW  02
03436:  ADDWF  xA6,W
03438:  MOVWF  01
0343A:  MOVLW  00
0343C:  ADDWFC xA7,W
0343E:  MOVWF  03
03440:  MOVF   01,W
03442:  ADDLW  60
03444:  MOVWF  FE9
03446:  MOVLW  06
03448:  ADDWFC 03,W
0344A:  MOVWF  FEA
0344C:  MOVFF  6A4,FEC
03450:  MOVF   FED,F
03452:  MOVFF  6A3,FEF
....................            } 
....................         } 
03456:  INCF   xA2,F
03458:  BRA    329A
....................      } 
0345A:  BRA    3292
....................      /* for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0)numluzes = 0;//luzes todas off 
0345C:  MOVF   x60,F
0345E:  BNZ   3468
03460:  MOVF   x61,F
03462:  BNZ   3468
03464:  CLRF   xA0
....................      ELSE 
03466:  BRA    3808
....................      { 
....................         numluzes = 1; 
03468:  MOVLW  01
0346A:  MOVWF  xA0
....................         afa = 0; 
0346C:  CLRF   xA5
....................         IF(actmat) 
0346E:  MOVLB  0
03470:  BTFSS  xB5.3
03472:  BRA    3486
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
03474:  MOVFF  661,592
03478:  MOVFF  660,591
....................            delays1[0][1] = tempd[0][1]; 
0347C:  MOVFF  663,594
03480:  MOVFF  662,593
....................         } 
....................  
....................         ELSE 
03484:  BRA    3496
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
03486:  MOVFF  661,5D6
0348A:  MOVFF  660,5D5
....................            delays2[0][1] = tempd[0][1]; 
0348E:  MOVFF  663,5D8
03492:  MOVFF  662,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
03496:  MOVLW  01
03498:  MOVLB  6
0349A:  MOVWF  xA2
0349C:  MOVLB  5
0349E:  MOVF   x7A,W
034A0:  MOVLB  6
034A2:  SUBWF  xA2,W
034A4:  BTFSC  FD8.0
034A6:  BRA    3808
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
034A8:  MOVF   xA2,W
034AA:  MULLW  04
034AC:  MOVF   FF3,W
034AE:  CLRF   xA7
034B0:  MOVWF  xA6
034B2:  MOVLW  60
034B4:  ADDWF  xA6,W
034B6:  MOVWF  FE9
034B8:  MOVLW  06
034BA:  ADDWFC xA7,W
034BC:  MOVWF  FEA
034BE:  MOVFF  FEC,6A7
034C2:  MOVF   FED,F
034C4:  MOVFF  FEF,6A6
034C8:  MOVLW  01
034CA:  SUBWF  xA2,W
034CC:  MULLW  04
034CE:  MOVF   FF3,W
034D0:  CLRF   xA9
034D2:  MOVWF  xA8
034D4:  MOVLW  60
034D6:  ADDWF  xA8,W
034D8:  MOVWF  FE9
034DA:  MOVLW  06
034DC:  ADDWFC xA9,W
034DE:  MOVWF  FEA
034E0:  MOVFF  FEC,03
034E4:  MOVF   FED,F
034E6:  MOVF   FEF,W
034E8:  SUBWF  xA6,W
034EA:  BNZ   34F2
034EC:  MOVF   03,W
034EE:  SUBWF  xA7,W
034F0:  BZ    34F6
034F2:  MOVLW  00
034F4:  BRA    34F8
034F6:  MOVLW  01
034F8:  MOVWF  xA6
034FA:  MOVF   xA2,W
034FC:  MULLW  04
034FE:  MOVF   FF3,W
03500:  CLRF   xA8
03502:  MOVWF  xA7
03504:  MOVLW  60
03506:  ADDWF  xA7,W
03508:  MOVWF  FE9
0350A:  MOVLW  06
0350C:  ADDWFC xA8,W
0350E:  MOVWF  FEA
03510:  MOVF   FEF,F
03512:  BNZ   3518
03514:  MOVF   FEC,F
03516:  BZ    351C
03518:  MOVLW  00
0351A:  BRA    351E
0351C:  MOVLW  01
0351E:  XORLW  00
03520:  BZ    3526
03522:  MOVLW  00
03524:  BRA    3528
03526:  MOVLW  01
03528:  ANDWF  xA6,W
0352A:  BTFSC  FD8.2
0352C:  BRA    3668
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
0352E:  MOVLB  0
03530:  BTFSS  xB5.3
03532:  BRA    35CE
03534:  MOVLB  6
03536:  MOVF   xA5,W
03538:  MULLW  04
0353A:  MOVF   FF3,W
0353C:  CLRF   xA7
0353E:  MOVWF  xA6
03540:  MOVLW  02
03542:  ADDWF  xA6,W
03544:  MOVWF  01
03546:  MOVLW  00
03548:  ADDWFC xA7,W
0354A:  MOVWF  03
0354C:  MOVF   01,W
0354E:  ADDLW  91
03550:  MOVWF  01
03552:  MOVLW  05
03554:  ADDWFC 03,F
03556:  MOVFF  01,6A6
0355A:  MOVFF  03,6A7
0355E:  MOVF   xA5,W
03560:  MULLW  04
03562:  MOVF   FF3,W
03564:  CLRF   xA9
03566:  MOVWF  xA8
03568:  MOVLW  02
0356A:  ADDWF  xA8,W
0356C:  MOVWF  01
0356E:  MOVLW  00
03570:  ADDWFC xA9,W
03572:  MOVWF  03
03574:  MOVF   01,W
03576:  ADDLW  91
03578:  MOVWF  FE9
0357A:  MOVLW  05
0357C:  ADDWFC 03,W
0357E:  MOVWF  FEA
03580:  MOVFF  FEC,6A9
03584:  MOVF   FED,F
03586:  MOVFF  FEF,6A8
0358A:  MOVF   xA2,W
0358C:  MULLW  04
0358E:  MOVF   FF3,W
03590:  CLRF   xAB
03592:  MOVWF  xAA
03594:  MOVLW  02
03596:  ADDWF  xAA,W
03598:  MOVWF  01
0359A:  MOVLW  00
0359C:  ADDWFC xAB,W
0359E:  MOVWF  03
035A0:  MOVF   01,W
035A2:  ADDLW  60
035A4:  MOVWF  FE9
035A6:  MOVLW  06
035A8:  ADDWFC 03,W
035AA:  MOVWF  FEA
035AC:  MOVFF  FEC,03
035B0:  MOVF   FED,F
035B2:  MOVF   FEF,W
035B4:  ANDWF  xA8,W
035B6:  MOVWF  00
035B8:  MOVF   03,W
035BA:  ANDWF  xA9,W
035BC:  MOVFF  6A7,FEA
035C0:  MOVFF  6A6,FE9
035C4:  MOVWF  FEC
035C6:  MOVF   FED,F
035C8:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
035CC:  BRA    3666
035CE:  MOVLB  6
035D0:  MOVF   xA5,W
035D2:  MULLW  04
035D4:  MOVF   FF3,W
035D6:  CLRF   xA7
035D8:  MOVWF  xA6
035DA:  MOVLW  02
035DC:  ADDWF  xA6,W
035DE:  MOVWF  01
035E0:  MOVLW  00
035E2:  ADDWFC xA7,W
035E4:  MOVWF  03
035E6:  MOVF   01,W
035E8:  ADDLW  D5
035EA:  MOVWF  01
035EC:  MOVLW  05
035EE:  ADDWFC 03,F
035F0:  MOVFF  01,6A6
035F4:  MOVFF  03,6A7
035F8:  MOVF   xA5,W
035FA:  MULLW  04
035FC:  MOVF   FF3,W
035FE:  CLRF   xA9
03600:  MOVWF  xA8
03602:  MOVLW  02
03604:  ADDWF  xA8,W
03606:  MOVWF  01
03608:  MOVLW  00
0360A:  ADDWFC xA9,W
0360C:  MOVWF  03
0360E:  MOVF   01,W
03610:  ADDLW  D5
03612:  MOVWF  FE9
03614:  MOVLW  05
03616:  ADDWFC 03,W
03618:  MOVWF  FEA
0361A:  MOVFF  FEC,6A9
0361E:  MOVF   FED,F
03620:  MOVFF  FEF,6A8
03624:  MOVF   xA2,W
03626:  MULLW  04
03628:  MOVF   FF3,W
0362A:  CLRF   xAB
0362C:  MOVWF  xAA
0362E:  MOVLW  02
03630:  ADDWF  xAA,W
03632:  MOVWF  01
03634:  MOVLW  00
03636:  ADDWFC xAB,W
03638:  MOVWF  03
0363A:  MOVF   01,W
0363C:  ADDLW  60
0363E:  MOVWF  FE9
03640:  MOVLW  06
03642:  ADDWFC 03,W
03644:  MOVWF  FEA
03646:  MOVFF  FEC,03
0364A:  MOVF   FED,F
0364C:  MOVF   FEF,W
0364E:  ANDWF  xA8,W
03650:  MOVWF  00
03652:  MOVF   03,W
03654:  ANDWF  xA9,W
03656:  MOVFF  6A7,FEA
0365A:  MOVFF  6A6,FE9
0365E:  MOVWF  FEC
03660:  MOVF   FED,F
03662:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
03666:  BRA    3804
03668:  MOVF   xA2,W
0366A:  MULLW  04
0366C:  MOVF   FF3,W
0366E:  CLRF   xA7
03670:  MOVWF  xA6
03672:  MOVLW  60
03674:  ADDWF  xA6,W
03676:  MOVWF  FE9
03678:  MOVLW  06
0367A:  ADDWFC xA7,W
0367C:  MOVWF  FEA
0367E:  MOVF   FEF,F
03680:  BNZ   3686
03682:  MOVF   FEC,F
03684:  BZ    368A
03686:  MOVLW  00
03688:  BRA    368C
0368A:  MOVLW  01
0368C:  XORLW  00
0368E:  BTFSS  FD8.2
03690:  BRA    3804
....................            { 
....................               ++afa; 
03692:  INCF   xA5,F
....................               IF(actmat) 
03694:  MOVLB  0
03696:  BTFSS  xB5.3
03698:  BRA    3750
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
0369A:  MOVLB  6
0369C:  MOVF   xA5,W
0369E:  MULLW  04
036A0:  MOVF   FF3,W
036A2:  CLRF   xA7
036A4:  MOVWF  xA6
036A6:  MOVLW  91
036A8:  ADDWF  xA6,W
036AA:  MOVWF  01
036AC:  MOVLW  05
036AE:  ADDWFC xA7,W
036B0:  MOVWF  03
036B2:  MOVWF  xA7
036B4:  MOVF   xA2,W
036B6:  MULLW  04
036B8:  MOVF   FF3,W
036BA:  CLRF   xA9
036BC:  MOVWF  xA8
036BE:  MOVLW  60
036C0:  ADDWF  xA8,W
036C2:  MOVWF  FE9
036C4:  MOVLW  06
036C6:  ADDWFC xA9,W
036C8:  MOVWF  FEA
036CA:  MOVFF  FEC,03
036CE:  MOVF   FED,F
036D0:  MOVFF  FEF,6A8
036D4:  MOVFF  6A7,FEA
036D8:  MOVFF  01,FE9
036DC:  MOVFF  03,FEC
036E0:  MOVF   FED,F
036E2:  MOVFF  6A8,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
036E6:  MOVF   xA5,W
036E8:  MULLW  04
036EA:  MOVF   FF3,W
036EC:  CLRF   xA7
036EE:  MOVWF  xA6
036F0:  MOVLW  02
036F2:  ADDWF  xA6,W
036F4:  MOVWF  01
036F6:  MOVLW  00
036F8:  ADDWFC xA7,W
036FA:  MOVWF  03
036FC:  MOVF   01,W
036FE:  ADDLW  91
03700:  MOVWF  01
03702:  MOVLW  05
03704:  ADDWFC 03,F
03706:  MOVFF  01,6A6
0370A:  MOVFF  03,6A7
0370E:  MOVF   xA2,W
03710:  MULLW  04
03712:  MOVF   FF3,W
03714:  CLRF   xA9
03716:  MOVWF  xA8
03718:  MOVLW  02
0371A:  ADDWF  xA8,W
0371C:  MOVWF  01
0371E:  MOVLW  00
03720:  ADDWFC xA9,W
03722:  MOVWF  03
03724:  MOVF   01,W
03726:  ADDLW  60
03728:  MOVWF  FE9
0372A:  MOVLW  06
0372C:  ADDWFC 03,W
0372E:  MOVWF  FEA
03730:  MOVFF  FEC,03
03734:  MOVF   FED,F
03736:  MOVFF  FEF,6A8
0373A:  MOVFF  6A7,FEA
0373E:  MOVFF  6A6,FE9
03742:  MOVFF  03,FEC
03746:  MOVF   FED,F
03748:  MOVFF  6A8,FEF
....................               } 
....................  
....................               ELSE 
0374C:  BRA    3802
0374E:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
03750:  MOVLB  6
03752:  MOVF   xA5,W
03754:  MULLW  04
03756:  MOVF   FF3,W
03758:  CLRF   xA7
0375A:  MOVWF  xA6
0375C:  MOVLW  D5
0375E:  ADDWF  xA6,W
03760:  MOVWF  01
03762:  MOVLW  05
03764:  ADDWFC xA7,W
03766:  MOVWF  03
03768:  MOVWF  xA7
0376A:  MOVF   xA2,W
0376C:  MULLW  04
0376E:  MOVF   FF3,W
03770:  CLRF   xA9
03772:  MOVWF  xA8
03774:  MOVLW  60
03776:  ADDWF  xA8,W
03778:  MOVWF  FE9
0377A:  MOVLW  06
0377C:  ADDWFC xA9,W
0377E:  MOVWF  FEA
03780:  MOVFF  FEC,03
03784:  MOVF   FED,F
03786:  MOVFF  FEF,6A8
0378A:  MOVFF  6A7,FEA
0378E:  MOVFF  01,FE9
03792:  MOVFF  03,FEC
03796:  MOVF   FED,F
03798:  MOVFF  6A8,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
0379C:  MOVF   xA5,W
0379E:  MULLW  04
037A0:  MOVF   FF3,W
037A2:  CLRF   xA7
037A4:  MOVWF  xA6
037A6:  MOVLW  02
037A8:  ADDWF  xA6,W
037AA:  MOVWF  01
037AC:  MOVLW  00
037AE:  ADDWFC xA7,W
037B0:  MOVWF  03
037B2:  MOVF   01,W
037B4:  ADDLW  D5
037B6:  MOVWF  01
037B8:  MOVLW  05
037BA:  ADDWFC 03,F
037BC:  MOVFF  01,6A6
037C0:  MOVFF  03,6A7
037C4:  MOVF   xA2,W
037C6:  MULLW  04
037C8:  MOVF   FF3,W
037CA:  CLRF   xA9
037CC:  MOVWF  xA8
037CE:  MOVLW  02
037D0:  ADDWF  xA8,W
037D2:  MOVWF  01
037D4:  MOVLW  00
037D6:  ADDWFC xA9,W
037D8:  MOVWF  03
037DA:  MOVF   01,W
037DC:  ADDLW  60
037DE:  MOVWF  FE9
037E0:  MOVLW  06
037E2:  ADDWFC 03,W
037E4:  MOVWF  FEA
037E6:  MOVFF  FEC,03
037EA:  MOVF   FED,F
037EC:  MOVFF  FEF,6A8
037F0:  MOVFF  6A7,FEA
037F4:  MOVFF  6A6,FE9
037F8:  MOVFF  03,FEC
037FC:  MOVF   FED,F
037FE:  MOVFF  6A8,FEF
....................               } 
....................                //printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03802:  INCF   xA0,F
....................            } 
....................         } 
03804:  INCF   xA2,F
03806:  BRA    349C
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03808:  MOVLB  0
0380A:  BTFSS  xB5.3
0380C:  BRA    3818
0380E:  MOVLB  5
03810:  CLRF   xD2
03812:  MOVFF  6A0,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03816:  BRA    3820
03818:  MOVLB  6
0381A:  CLRF   x16
0381C:  MOVFF  6A0,615
....................     // printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................       
....................      organizado=1; 
03820:  MOVLB  0
03822:  BSF    xB5.2
....................   } 
03824:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03826:  MOVLB  5
03828:  CLRF   xD2
0382A:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
0382C:  MOVLB  6
0382E:  CLRF   x16
03830:  CLRF   x15
....................    portc=0xFF; 
03832:  MOVLW  FF
03834:  MOVWF  F82
....................    portd=0xFF; 
03836:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03838:  MOVLW  00
0383A:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
0383C:  MOVWF  F95
....................    portc=0xFF; 
0383E:  MOVLW  FF
03840:  MOVWF  F82
....................    portd=0xFF; 
03842:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03844:  CLRF   x5E
03846:  MOVLB  1
03848:  MOVF   x3F,W
0384A:  MOVLB  6
0384C:  SUBWF  x5E,W
0384E:  BTFSC  FD8.0
03850:  BRA    397A
03852:  CLRF   1B
03854:  BTFSC  FF2.7
03856:  BSF    1B.7
03858:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
0385A:  CLRF   xD7
0385C:  MOVFF  65E,6D6
03860:  CLRF   xD9
03862:  MOVLW  2F
03864:  MOVWF  xD8
03866:  MOVLB  0
03868:  CALL   0360
0386C:  BTFSC  1B.7
0386E:  BSF    FF2.7
03870:  MOVFF  02,03
03874:  MOVF   01,W
03876:  ADDLW  8A
03878:  MOVWF  01
0387A:  MOVLW  02
0387C:  ADDWFC 03,F
0387E:  MOVFF  01,FE9
03882:  MOVFF  03,FEA
03886:  MOVF   FEF,W
03888:  XORLW  65
0388A:  BZ    388E
0388C:  BRA    3974
....................          case dimmer: 
.................... #ifdef DEBUG 
....................          printf("used dimmer!!!\n\r"); 
.................... #endif 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
0388E:  BCF    FD8.0
03890:  MOVLB  5
03892:  RLCF   x7A,W
03894:  CLRF   03
03896:  ADDLW  19
03898:  MOVWF  01
0389A:  MOVLW  06
0389C:  ADDWFC 03,F
0389E:  MOVFF  01,65F
038A2:  MOVLB  6
038A4:  MOVFF  03,660
038A8:  CLRF   1B
038AA:  BTFSC  FF2.7
038AC:  BSF    1B.7
038AE:  BCF    FF2.7
038B0:  CLRF   xD7
038B2:  MOVFF  65E,6D6
038B6:  CLRF   xD9
038B8:  MOVLW  2F
038BA:  MOVWF  xD8
038BC:  MOVLB  0
038BE:  CALL   0360
038C2:  BTFSC  1B.7
038C4:  BSF    FF2.7
038C6:  MOVF   01,W
038C8:  ADDLW  4C
038CA:  MOVLB  6
038CC:  MOVWF  x61
038CE:  MOVLW  01
038D0:  ADDWFC 02,W
038D2:  MOVWF  x62
038D4:  MOVLW  01
038D6:  ADDWF  x61,W
038D8:  MOVWF  01
038DA:  MOVLW  00
038DC:  ADDWFC x62,W
038DE:  MOVWF  03
038E0:  MOVF   01,W
038E2:  ADDLW  3E
038E4:  MOVWF  01
038E6:  MOVLW  01
038E8:  ADDWFC 03,F
038EA:  MOVF   01,W
038EC:  ADDLW  1F
038EE:  MOVWF  FE9
038F0:  MOVLW  00
038F2:  ADDWFC 03,W
038F4:  MOVWF  FEA
038F6:  BCF    FD8.0
038F8:  RLCF   FEF,W
038FA:  CLRF   03
038FC:  MOVLB  0
038FE:  CALL   0172
03902:  TBLRD*+
03904:  MOVFF  FF5,03
03908:  MOVLB  6
0390A:  MOVFF  660,FEA
0390E:  MOVFF  65F,FE9
03912:  MOVFF  03,FEC
03916:  MOVF   FED,F
03918:  MOVWF  FEF
0391A:  CLRF   1B
0391C:  BTFSC  FF2.7
0391E:  BSF    1B.7
03920:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
03922:  CLRF   xD7
03924:  MOVFF  65E,6D6
03928:  CLRF   xD9
0392A:  MOVLW  2F
0392C:  MOVWF  xD8
0392E:  MOVLB  0
03930:  CALL   0360
03934:  BTFSC  1B.7
03936:  BSF    FF2.7
03938:  MOVF   01,W
0393A:  ADDLW  4C
0393C:  MOVLB  6
0393E:  MOVWF  x5F
03940:  MOVLW  01
03942:  ADDWFC 02,W
03944:  MOVWF  x60
03946:  MOVLW  01
03948:  ADDWF  x5F,W
0394A:  MOVWF  01
0394C:  MOVLW  00
0394E:  ADDWFC x60,W
03950:  MOVWF  03
03952:  MOVF   01,W
03954:  ADDLW  3E
03956:  MOVWF  01
03958:  MOVLW  01
0395A:  ADDWFC 03,F
0395C:  MOVF   01,W
0395E:  ADDLW  20
03960:  MOVWF  FE9
03962:  MOVLW  00
03964:  ADDWFC 03,W
03966:  MOVWF  FEA
03968:  MOVFF  57A,FEF
....................             ++used_dimmers;           
0396C:  MOVLB  5
0396E:  INCF   x7A,F
....................          break; 
03970:  MOVLB  0
03972:  BRA    3974
....................       } 
....................    } 
03974:  MOVLB  6
03976:  INCF   x5E,F
03978:  BRA    3846
....................    if(used_dimmers>0) 
0397A:  MOVLB  5
0397C:  MOVF   x7A,F
0397E:  BZ    39A4
....................    { 
....................    actmat=0; 
03980:  MOVLB  0
03982:  BCF    xB5.3
....................    pointer=delays1; 
03984:  MOVLW  05
03986:  MOVLB  5
03988:  MOVWF  x7C
0398A:  MOVLW  91
0398C:  MOVWF  x7B
....................    org(); 
0398E:  MOVLB  0
03990:  RCALL  31F2
....................    pointer=delays2; 
03992:  MOVLW  05
03994:  MOVLB  5
03996:  MOVWF  x7C
03998:  MOVLW  D5
0399A:  MOVWF  x7B
....................    actmat=1; 
0399C:  MOVLB  0
0399E:  BSF    xB5.3
....................    org(); 
039A0:  RCALL  31F2
039A2:  MOVLB  5
....................    } 
.................... } 
039A4:  MOVLB  0
039A6:  GOTO   7B7A (RETURN)
....................  
.................... void write_outputs() 
.................... { 
039AA:  MOVLB  6
039AC:  BCF    x5F.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
039AE:  CLRF   x5E
039B0:  MOVLB  1
039B2:  MOVF   x3F,W
039B4:  MOVLB  6
039B6:  SUBWF  x5E,W
039B8:  BTFSC  FD8.0
039BA:  GOTO   4CFC
039BE:  CLRF   1B
039C0:  BTFSC  FF2.7
039C2:  BSF    1B.7
039C4:  BCF    FF2.7
....................    { 
....................       //printf("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
039C6:  CLRF   xD7
039C8:  MOVFF  65E,6D6
039CC:  CLRF   xD9
039CE:  MOVLW  2F
039D0:  MOVWF  xD8
039D2:  MOVLB  0
039D4:  CALL   0360
039D8:  BTFSC  1B.7
039DA:  BSF    FF2.7
039DC:  MOVFF  02,03
039E0:  MOVF   01,W
039E2:  ADDLW  8A
039E4:  MOVWF  01
039E6:  MOVLW  02
039E8:  ADDWFC 03,F
039EA:  MOVFF  01,FE9
039EE:  MOVFF  03,FEA
039F2:  MOVF   FEF,W
039F4:  XORLW  65
039F6:  BZ    3A0A
039F8:  XORLW  01
039FA:  BTFSC  FD8.2
039FC:  BRA    3F76
039FE:  XORLW  02
03A00:  BTFSC  FD8.2
03A02:  GOTO   4246
03A06:  GOTO   4CF4
....................          case dimmer: 
03A0A:  CLRF   1B
03A0C:  BTFSC  FF2.7
03A0E:  BSF    1B.7
03A10:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
03A12:  MOVLB  6
03A14:  CLRF   xD7
03A16:  MOVFF  65E,6D6
03A1A:  CLRF   xD9
03A1C:  MOVLW  2F
03A1E:  MOVWF  xD8
03A20:  MOVLB  0
03A22:  CALL   0360
03A26:  BTFSC  1B.7
03A28:  BSF    FF2.7
03A2A:  MOVF   01,W
03A2C:  ADDLW  4C
03A2E:  MOVLB  6
03A30:  MOVWF  x60
03A32:  MOVLW  01
03A34:  ADDWFC 02,W
03A36:  MOVWF  x61
03A38:  MOVLW  01
03A3A:  ADDWF  x60,W
03A3C:  MOVWF  01
03A3E:  MOVLW  00
03A40:  ADDWFC x61,W
03A42:  MOVWF  03
03A44:  MOVF   01,W
03A46:  ADDLW  3E
03A48:  MOVWF  01
03A4A:  MOVLW  01
03A4C:  ADDWFC 03,F
03A4E:  MOVF   01,W
03A50:  ADDLW  1D
03A52:  MOVWF  FE9
03A54:  MOVLW  00
03A56:  ADDWFC 03,W
03A58:  MOVWF  FEA
03A5A:  BTFSS  FEF.0
03A5C:  BRA    3BC2
03A5E:  CLRF   1B
03A60:  BTFSC  FF2.7
03A62:  BSF    1B.7
03A64:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
03A66:  CLRF   xD7
03A68:  MOVFF  65E,6D6
03A6C:  CLRF   xD9
03A6E:  MOVLW  2F
03A70:  MOVWF  xD8
03A72:  MOVLB  0
03A74:  CALL   0360
03A78:  BTFSC  1B.7
03A7A:  BSF    FF2.7
03A7C:  MOVF   01,W
03A7E:  ADDLW  4C
03A80:  MOVLB  6
03A82:  MOVWF  x60
03A84:  MOVLW  01
03A86:  ADDWFC 02,W
03A88:  MOVWF  x61
03A8A:  MOVLW  01
03A8C:  ADDWF  x60,W
03A8E:  MOVWF  01
03A90:  MOVLW  00
03A92:  ADDWFC x61,W
03A94:  MOVWF  03
03A96:  MOVF   01,W
03A98:  ADDLW  3E
03A9A:  MOVWF  01
03A9C:  MOVLW  01
03A9E:  ADDWFC 03,F
03AA0:  MOVF   01,W
03AA2:  ADDLW  1E
03AA4:  MOVWF  FE9
03AA6:  MOVLW  00
03AA8:  ADDWFC 03,W
03AAA:  MOVWF  FEA
03AAC:  MOVF   FEF,F
03AAE:  BNZ   3B72
03AB0:  CLRF   1B
03AB2:  BTFSC  FF2.7
03AB4:  BSF    1B.7
03AB6:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03AB8:  CLRF   xD7
03ABA:  MOVFF  65E,6D6
03ABE:  CLRF   xD9
03AC0:  MOVLW  2F
03AC2:  MOVWF  xD8
03AC4:  MOVLB  0
03AC6:  CALL   0360
03ACA:  BTFSC  1B.7
03ACC:  BSF    FF2.7
03ACE:  MOVF   01,W
03AD0:  ADDLW  4C
03AD2:  MOVLB  6
03AD4:  MOVWF  x60
03AD6:  MOVLW  01
03AD8:  ADDWFC 02,W
03ADA:  MOVWF  x61
03ADC:  MOVLW  01
03ADE:  ADDWF  x60,W
03AE0:  MOVWF  01
03AE2:  MOVLW  00
03AE4:  ADDWFC x61,W
03AE6:  MOVWF  03
03AE8:  MOVF   01,W
03AEA:  ADDLW  3E
03AEC:  MOVWF  01
03AEE:  MOVLW  01
03AF0:  ADDWFC 03,F
03AF2:  MOVF   01,W
03AF4:  ADDLW  20
03AF6:  MOVWF  FE9
03AF8:  MOVLW  00
03AFA:  ADDWFC 03,W
03AFC:  MOVWF  FEA
03AFE:  CLRF   03
03B00:  MOVF   FEF,W
03B02:  ADDLW  81
03B04:  MOVWF  01
03B06:  MOVLW  05
03B08:  ADDWFC 03,F
03B0A:  MOVFF  01,662
03B0E:  MOVFF  03,663
03B12:  CLRF   1B
03B14:  BTFSC  FF2.7
03B16:  BSF    1B.7
03B18:  BCF    FF2.7
03B1A:  CLRF   xD7
03B1C:  MOVFF  65E,6D6
03B20:  CLRF   xD9
03B22:  MOVLW  2F
03B24:  MOVWF  xD8
03B26:  MOVLB  0
03B28:  CALL   0360
03B2C:  BTFSC  1B.7
03B2E:  BSF    FF2.7
03B30:  MOVF   01,W
03B32:  ADDLW  4C
03B34:  MOVLB  6
03B36:  MOVWF  x64
03B38:  MOVLW  01
03B3A:  ADDWFC 02,W
03B3C:  MOVWF  x65
03B3E:  MOVLW  01
03B40:  ADDWF  x64,W
03B42:  MOVWF  01
03B44:  MOVLW  00
03B46:  ADDWFC x65,W
03B48:  MOVWF  03
03B4A:  MOVF   01,W
03B4C:  ADDLW  3E
03B4E:  MOVWF  01
03B50:  MOVLW  01
03B52:  ADDWFC 03,F
03B54:  MOVF   01,W
03B56:  ADDLW  1C
03B58:  MOVWF  FE9
03B5A:  MOVLW  00
03B5C:  ADDWFC 03,W
03B5E:  MOVWF  FEA
03B60:  MOVFF  FEF,666
03B64:  MOVFF  663,FEA
03B68:  MOVFF  662,FE9
03B6C:  MOVFF  666,FEF
....................                   update_dimmers=true; 
03B70:  BSF    x5F.0
03B72:  CLRF   1B
03B74:  BTFSC  FF2.7
03B76:  BSF    1B.7
03B78:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
03B7A:  CLRF   xD7
03B7C:  MOVFF  65E,6D6
03B80:  CLRF   xD9
03B82:  MOVLW  2F
03B84:  MOVWF  xD8
03B86:  MOVLB  0
03B88:  CALL   0360
03B8C:  BTFSC  1B.7
03B8E:  BSF    FF2.7
03B90:  MOVF   01,W
03B92:  ADDLW  4C
03B94:  MOVLB  6
03B96:  MOVWF  x60
03B98:  MOVLW  01
03B9A:  ADDWFC 02,W
03B9C:  MOVWF  x61
03B9E:  MOVLW  01
03BA0:  ADDWF  x60,W
03BA2:  MOVWF  01
03BA4:  MOVLW  00
03BA6:  ADDWFC x61,W
03BA8:  MOVWF  03
03BAA:  MOVF   01,W
03BAC:  ADDLW  3E
03BAE:  MOVWF  01
03BB0:  MOVLW  01
03BB2:  ADDWFC 03,F
03BB4:  MOVF   01,W
03BB6:  ADDLW  1D
03BB8:  MOVWF  FE9
03BBA:  MOVLW  00
03BBC:  ADDWFC 03,W
03BBE:  MOVWF  FEA
03BC0:  BCF    FEF.0
03BC2:  CLRF   1B
03BC4:  BTFSC  FF2.7
03BC6:  BSF    1B.7
03BC8:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
03BCA:  CLRF   xD7
03BCC:  MOVFF  65E,6D6
03BD0:  CLRF   xD9
03BD2:  MOVLW  2F
03BD4:  MOVWF  xD8
03BD6:  MOVLB  0
03BD8:  CALL   0360
03BDC:  BTFSC  1B.7
03BDE:  BSF    FF2.7
03BE0:  MOVF   01,W
03BE2:  ADDLW  4C
03BE4:  MOVLB  6
03BE6:  MOVWF  x60
03BE8:  MOVLW  01
03BEA:  ADDWFC 02,W
03BEC:  MOVWF  x61
03BEE:  MOVLW  01
03BF0:  ADDWF  x60,W
03BF2:  MOVWF  01
03BF4:  MOVLW  00
03BF6:  ADDWFC x61,W
03BF8:  MOVWF  03
03BFA:  MOVF   01,W
03BFC:  ADDLW  3E
03BFE:  MOVWF  01
03C00:  MOVLW  01
03C02:  ADDWFC 03,F
03C04:  MOVF   01,W
03C06:  ADDLW  13
03C08:  MOVWF  FE9
03C0A:  MOVLW  00
03C0C:  ADDWFC 03,W
03C0E:  MOVWF  FEA
03C10:  BTFSS  FEF.0
03C12:  BRA    3D68
03C14:  CLRF   1B
03C16:  BTFSC  FF2.7
03C18:  BSF    1B.7
03C1A:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
03C1C:  CLRF   xD7
03C1E:  MOVFF  65E,6D6
03C22:  CLRF   xD9
03C24:  MOVLW  2F
03C26:  MOVWF  xD8
03C28:  MOVLB  0
03C2A:  CALL   0360
03C2E:  BTFSC  1B.7
03C30:  BSF    FF2.7
03C32:  MOVF   01,W
03C34:  ADDLW  4C
03C36:  MOVLB  6
03C38:  MOVWF  x60
03C3A:  MOVLW  01
03C3C:  ADDWFC 02,W
03C3E:  MOVWF  x61
03C40:  MOVLW  01
03C42:  ADDWF  x60,W
03C44:  MOVWF  01
03C46:  MOVLW  00
03C48:  ADDWFC x61,W
03C4A:  MOVWF  03
03C4C:  MOVF   01,W
03C4E:  ADDLW  3E
03C50:  MOVWF  01
03C52:  MOVLW  01
03C54:  ADDWFC 03,F
03C56:  MOVF   01,W
03C58:  ADDLW  12
03C5A:  MOVWF  FE9
03C5C:  MOVLW  00
03C5E:  ADDWFC 03,W
03C60:  MOVWF  FEA
03C62:  MOVF   FEF,F
03C64:  BZ    3D18
03C66:  CLRF   1B
03C68:  BTFSC  FF2.7
03C6A:  BSF    1B.7
03C6C:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
03C6E:  CLRF   xD7
03C70:  MOVFF  65E,6D6
03C74:  CLRF   xD9
03C76:  MOVLW  2F
03C78:  MOVWF  xD8
03C7A:  MOVLB  0
03C7C:  CALL   0360
03C80:  BTFSC  1B.7
03C82:  BSF    FF2.7
03C84:  MOVF   01,W
03C86:  ADDLW  4C
03C88:  MOVLB  6
03C8A:  MOVWF  x60
03C8C:  MOVLW  01
03C8E:  ADDWFC 02,W
03C90:  MOVWF  x61
03C92:  MOVLW  01
03C94:  ADDWF  x60,W
03C96:  MOVWF  01
03C98:  MOVLW  00
03C9A:  ADDWFC x61,W
03C9C:  MOVWF  03
03C9E:  MOVF   01,W
03CA0:  ADDLW  3E
03CA2:  MOVWF  01
03CA4:  MOVLW  01
03CA6:  ADDWFC 03,F
03CA8:  MOVF   01,W
03CAA:  ADDLW  1E
03CAC:  MOVWF  FE9
03CAE:  MOVLW  00
03CB0:  ADDWFC 03,W
03CB2:  MOVWF  FEA
03CB4:  MOVLW  01
03CB6:  MOVWF  FEF
03CB8:  CLRF   1B
03CBA:  BTFSC  FF2.7
03CBC:  BSF    1B.7
03CBE:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
03CC0:  CLRF   xD7
03CC2:  MOVFF  65E,6D6
03CC6:  CLRF   xD9
03CC8:  MOVLW  2F
03CCA:  MOVWF  xD8
03CCC:  MOVLB  0
03CCE:  CALL   0360
03CD2:  BTFSC  1B.7
03CD4:  BSF    FF2.7
03CD6:  MOVF   01,W
03CD8:  ADDLW  4C
03CDA:  MOVLB  6
03CDC:  MOVWF  x60
03CDE:  MOVLW  01
03CE0:  ADDWFC 02,W
03CE2:  MOVWF  x61
03CE4:  MOVLW  01
03CE6:  ADDWF  x60,W
03CE8:  MOVWF  01
03CEA:  MOVLW  00
03CEC:  ADDWFC x61,W
03CEE:  MOVWF  03
03CF0:  MOVF   01,W
03CF2:  ADDLW  3E
03CF4:  MOVWF  01
03CF6:  MOVLW  01
03CF8:  ADDWFC 03,F
03CFA:  MOVF   01,W
03CFC:  ADDLW  20
03CFE:  MOVWF  FE9
03D00:  MOVLW  00
03D02:  ADDWFC 03,W
03D04:  MOVWF  FEA
03D06:  CLRF   03
03D08:  MOVF   FEF,W
03D0A:  ADDLW  81
03D0C:  MOVWF  FE9
03D0E:  MOVLW  05
03D10:  ADDWFC 03,W
03D12:  MOVWF  FEA
03D14:  CLRF   FEF
....................                   update_dimmers=true; 
03D16:  BSF    x5F.0
03D18:  CLRF   1B
03D1A:  BTFSC  FF2.7
03D1C:  BSF    1B.7
03D1E:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
03D20:  CLRF   xD7
03D22:  MOVFF  65E,6D6
03D26:  CLRF   xD9
03D28:  MOVLW  2F
03D2A:  MOVWF  xD8
03D2C:  MOVLB  0
03D2E:  CALL   0360
03D32:  BTFSC  1B.7
03D34:  BSF    FF2.7
03D36:  MOVF   01,W
03D38:  ADDLW  4C
03D3A:  MOVLB  6
03D3C:  MOVWF  x60
03D3E:  MOVLW  01
03D40:  ADDWFC 02,W
03D42:  MOVWF  x61
03D44:  MOVLW  01
03D46:  ADDWF  x60,W
03D48:  MOVWF  01
03D4A:  MOVLW  00
03D4C:  ADDWFC x61,W
03D4E:  MOVWF  03
03D50:  MOVF   01,W
03D52:  ADDLW  3E
03D54:  MOVWF  01
03D56:  MOVLW  01
03D58:  ADDWFC 03,F
03D5A:  MOVF   01,W
03D5C:  ADDLW  13
03D5E:  MOVWF  FE9
03D60:  MOVLW  00
03D62:  ADDWFC 03,W
03D64:  MOVWF  FEA
03D66:  BCF    FEF.0
03D68:  CLRF   1B
03D6A:  BTFSC  FF2.7
03D6C:  BSF    1B.7
03D6E:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
03D70:  CLRF   xD7
03D72:  MOVFF  65E,6D6
03D76:  CLRF   xD9
03D78:  MOVLW  2F
03D7A:  MOVWF  xD8
03D7C:  MOVLB  0
03D7E:  CALL   0360
03D82:  BTFSC  1B.7
03D84:  BSF    FF2.7
03D86:  MOVF   01,W
03D88:  ADDLW  4C
03D8A:  MOVLB  6
03D8C:  MOVWF  x60
03D8E:  MOVLW  01
03D90:  ADDWFC 02,W
03D92:  MOVWF  x61
03D94:  MOVLW  01
03D96:  ADDWF  x60,W
03D98:  MOVWF  01
03D9A:  MOVLW  00
03D9C:  ADDWFC x61,W
03D9E:  MOVWF  03
03DA0:  MOVF   01,W
03DA2:  ADDLW  3E
03DA4:  MOVWF  01
03DA6:  MOVLW  01
03DA8:  ADDWFC 03,F
03DAA:  MOVF   01,W
03DAC:  ADDLW  09
03DAE:  MOVWF  FE9
03DB0:  MOVLW  00
03DB2:  ADDWFC 03,W
03DB4:  MOVWF  FEA
03DB6:  BTFSS  FEF.0
03DB8:  BRA    3F70
03DBA:  CLRF   1B
03DBC:  BTFSC  FF2.7
03DBE:  BSF    1B.7
03DC0:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
03DC2:  CLRF   xD7
03DC4:  MOVFF  65E,6D6
03DC8:  CLRF   xD9
03DCA:  MOVLW  2F
03DCC:  MOVWF  xD8
03DCE:  MOVLB  0
03DD0:  CALL   0360
03DD4:  BTFSC  1B.7
03DD6:  BSF    FF2.7
03DD8:  MOVF   01,W
03DDA:  ADDLW  4C
03DDC:  MOVLB  6
03DDE:  MOVWF  x60
03DE0:  MOVLW  01
03DE2:  ADDWFC 02,W
03DE4:  MOVWF  x61
03DE6:  MOVLW  01
03DE8:  ADDWF  x60,W
03DEA:  MOVWF  01
03DEC:  MOVLW  00
03DEE:  ADDWFC x61,W
03DF0:  MOVWF  03
03DF2:  MOVF   01,W
03DF4:  ADDLW  3E
03DF6:  MOVWF  01
03DF8:  MOVLW  01
03DFA:  ADDWFC 03,F
03DFC:  MOVF   01,W
03DFE:  ADDLW  08
03E00:  MOVWF  FE9
03E02:  MOVLW  00
03E04:  ADDWFC 03,W
03E06:  MOVWF  FEA
03E08:  MOVF   FEF,F
03E0A:  BTFSC  FD8.2
03E0C:  BRA    3F20
03E0E:  CLRF   1B
03E10:  BTFSC  FF2.7
03E12:  BSF    1B.7
03E14:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
03E16:  CLRF   xD7
03E18:  MOVFF  65E,6D6
03E1C:  CLRF   xD9
03E1E:  MOVLW  2F
03E20:  MOVWF  xD8
03E22:  MOVLB  0
03E24:  CALL   0360
03E28:  BTFSC  1B.7
03E2A:  BSF    FF2.7
03E2C:  MOVF   01,W
03E2E:  ADDLW  4C
03E30:  MOVLB  6
03E32:  MOVWF  x60
03E34:  MOVLW  01
03E36:  ADDWFC 02,W
03E38:  MOVWF  x61
03E3A:  MOVLW  01
03E3C:  ADDWF  x60,W
03E3E:  MOVWF  01
03E40:  MOVLW  00
03E42:  ADDWFC x61,W
03E44:  MOVWF  03
03E46:  MOVF   01,W
03E48:  ADDLW  3E
03E4A:  MOVWF  01
03E4C:  MOVLW  01
03E4E:  ADDWFC 03,F
03E50:  MOVF   01,W
03E52:  ADDLW  1E
03E54:  MOVWF  FE9
03E56:  MOVLW  00
03E58:  ADDWFC 03,W
03E5A:  MOVWF  FEA
03E5C:  CLRF   FEF
03E5E:  CLRF   1B
03E60:  BTFSC  FF2.7
03E62:  BSF    1B.7
03E64:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03E66:  CLRF   xD7
03E68:  MOVFF  65E,6D6
03E6C:  CLRF   xD9
03E6E:  MOVLW  2F
03E70:  MOVWF  xD8
03E72:  MOVLB  0
03E74:  CALL   0360
03E78:  BTFSC  1B.7
03E7A:  BSF    FF2.7
03E7C:  MOVF   01,W
03E7E:  ADDLW  4C
03E80:  MOVLB  6
03E82:  MOVWF  x60
03E84:  MOVLW  01
03E86:  ADDWFC 02,W
03E88:  MOVWF  x61
03E8A:  MOVLW  01
03E8C:  ADDWF  x60,W
03E8E:  MOVWF  01
03E90:  MOVLW  00
03E92:  ADDWFC x61,W
03E94:  MOVWF  03
03E96:  MOVF   01,W
03E98:  ADDLW  3E
03E9A:  MOVWF  01
03E9C:  MOVLW  01
03E9E:  ADDWFC 03,F
03EA0:  MOVF   01,W
03EA2:  ADDLW  20
03EA4:  MOVWF  FE9
03EA6:  MOVLW  00
03EA8:  ADDWFC 03,W
03EAA:  MOVWF  FEA
03EAC:  CLRF   03
03EAE:  MOVF   FEF,W
03EB0:  ADDLW  81
03EB2:  MOVWF  01
03EB4:  MOVLW  05
03EB6:  ADDWFC 03,F
03EB8:  MOVFF  01,662
03EBC:  MOVFF  03,663
03EC0:  CLRF   1B
03EC2:  BTFSC  FF2.7
03EC4:  BSF    1B.7
03EC6:  BCF    FF2.7
03EC8:  CLRF   xD7
03ECA:  MOVFF  65E,6D6
03ECE:  CLRF   xD9
03ED0:  MOVLW  2F
03ED2:  MOVWF  xD8
03ED4:  MOVLB  0
03ED6:  CALL   0360
03EDA:  BTFSC  1B.7
03EDC:  BSF    FF2.7
03EDE:  MOVF   01,W
03EE0:  ADDLW  4C
03EE2:  MOVLB  6
03EE4:  MOVWF  x64
03EE6:  MOVLW  01
03EE8:  ADDWFC 02,W
03EEA:  MOVWF  x65
03EEC:  MOVLW  01
03EEE:  ADDWF  x64,W
03EF0:  MOVWF  01
03EF2:  MOVLW  00
03EF4:  ADDWFC x65,W
03EF6:  MOVWF  03
03EF8:  MOVF   01,W
03EFA:  ADDLW  3E
03EFC:  MOVWF  01
03EFE:  MOVLW  01
03F00:  ADDWFC 03,F
03F02:  MOVF   01,W
03F04:  ADDLW  1C
03F06:  MOVWF  FE9
03F08:  MOVLW  00
03F0A:  ADDWFC 03,W
03F0C:  MOVWF  FEA
03F0E:  MOVFF  FEF,666
03F12:  MOVFF  663,FEA
03F16:  MOVFF  662,FE9
03F1A:  MOVFF  666,FEF
....................                   update_dimmers=true; 
03F1E:  BSF    x5F.0
03F20:  CLRF   1B
03F22:  BTFSC  FF2.7
03F24:  BSF    1B.7
03F26:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
03F28:  CLRF   xD7
03F2A:  MOVFF  65E,6D6
03F2E:  CLRF   xD9
03F30:  MOVLW  2F
03F32:  MOVWF  xD8
03F34:  MOVLB  0
03F36:  CALL   0360
03F3A:  BTFSC  1B.7
03F3C:  BSF    FF2.7
03F3E:  MOVF   01,W
03F40:  ADDLW  4C
03F42:  MOVLB  6
03F44:  MOVWF  x60
03F46:  MOVLW  01
03F48:  ADDWFC 02,W
03F4A:  MOVWF  x61
03F4C:  MOVLW  01
03F4E:  ADDWF  x60,W
03F50:  MOVWF  01
03F52:  MOVLW  00
03F54:  ADDWFC x61,W
03F56:  MOVWF  03
03F58:  MOVF   01,W
03F5A:  ADDLW  3E
03F5C:  MOVWF  01
03F5E:  MOVLW  01
03F60:  ADDWFC 03,F
03F62:  MOVF   01,W
03F64:  ADDLW  09
03F66:  MOVWF  FE9
03F68:  MOVLW  00
03F6A:  ADDWFC 03,W
03F6C:  MOVWF  FEA
03F6E:  BCF    FEF.0
....................             } 
....................          break; 
03F70:  MOVLB  0
03F72:  GOTO   4CF4
....................          case _on_off: 
03F76:  CLRF   1B
03F78:  BTFSC  FF2.7
03F7A:  BSF    1B.7
03F7C:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
03F7E:  MOVLB  6
03F80:  CLRF   xD7
03F82:  MOVFF  65E,6D6
03F86:  CLRF   xD9
03F88:  MOVLW  2F
03F8A:  MOVWF  xD8
03F8C:  MOVLB  0
03F8E:  CALL   0360
03F92:  BTFSC  1B.7
03F94:  BSF    FF2.7
03F96:  MOVF   01,W
03F98:  ADDLW  4C
03F9A:  MOVLB  6
03F9C:  MOVWF  x60
03F9E:  MOVLW  01
03FA0:  ADDWFC 02,W
03FA2:  MOVWF  x61
03FA4:  MOVLW  01
03FA6:  ADDWF  x60,W
03FA8:  MOVWF  01
03FAA:  MOVLW  00
03FAC:  ADDWFC x61,W
03FAE:  MOVWF  03
03FB0:  MOVF   01,W
03FB2:  ADDLW  3E
03FB4:  MOVWF  01
03FB6:  MOVLW  01
03FB8:  ADDWFC 03,F
03FBA:  MOVF   01,W
03FBC:  ADDLW  13
03FBE:  MOVWF  FE9
03FC0:  MOVLW  00
03FC2:  ADDWFC 03,W
03FC4:  MOVWF  FEA
03FC6:  BTFSS  FEF.0
03FC8:  BRA    40E2
03FCA:  CLRF   1B
03FCC:  BTFSC  FF2.7
03FCE:  BSF    1B.7
03FD0:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
03FD2:  CLRF   xD7
03FD4:  MOVFF  65E,6D6
03FD8:  CLRF   xD9
03FDA:  MOVLW  2F
03FDC:  MOVWF  xD8
03FDE:  MOVLB  0
03FE0:  CALL   0360
03FE4:  BTFSC  1B.7
03FE6:  BSF    FF2.7
03FE8:  MOVF   01,W
03FEA:  ADDLW  4C
03FEC:  MOVLB  6
03FEE:  MOVWF  x60
03FF0:  MOVLW  01
03FF2:  ADDWFC 02,W
03FF4:  MOVWF  x61
03FF6:  MOVLW  01
03FF8:  ADDWF  x60,W
03FFA:  MOVWF  01
03FFC:  MOVLW  00
03FFE:  ADDWFC x61,W
04000:  MOVWF  03
04002:  MOVF   01,W
04004:  ADDLW  3E
04006:  MOVWF  01
04008:  MOVLW  01
0400A:  ADDWFC 03,F
0400C:  MOVF   01,W
0400E:  ADDLW  12
04010:  MOVWF  FE9
04012:  MOVLW  00
04014:  ADDWFC 03,W
04016:  MOVWF  FEA
04018:  MOVF   FEF,F
0401A:  BZ    4092
0401C:  CLRF   1B
0401E:  BTFSC  FF2.7
04020:  BSF    1B.7
04022:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04024:  CLRF   xD7
04026:  MOVFF  65E,6D6
0402A:  CLRF   xD9
0402C:  MOVLW  2F
0402E:  MOVWF  xD8
04030:  MOVLB  0
04032:  CALL   0360
04036:  BTFSC  1B.7
04038:  BSF    FF2.7
0403A:  MOVF   01,W
0403C:  ADDLW  4C
0403E:  MOVLB  6
04040:  MOVWF  x60
04042:  MOVLW  01
04044:  ADDWFC 02,W
04046:  MOVWF  x61
04048:  MOVLW  01
0404A:  ADDWF  x60,W
0404C:  MOVWF  01
0404E:  MOVLW  00
04050:  ADDWFC x61,W
04052:  MOVWF  03
04054:  MOVF   01,W
04056:  ADDLW  3E
04058:  MOVWF  01
0405A:  MOVLW  01
0405C:  ADDWFC 03,F
0405E:  MOVF   01,W
04060:  ADDLW  14
04062:  MOVWF  FE9
04064:  MOVLW  00
04066:  ADDWFC 03,W
04068:  MOVWF  FEA
0406A:  BCF    FD8.0
0406C:  RLCF   FEF,W
0406E:  CLRF   03
04070:  MOVLB  0
04072:  CALL   0172
04076:  TBLRD*+
04078:  MOVFF  FF5,03
0407C:  CLRF   00
0407E:  DECF   00,F
04080:  XORWF  00,F
04082:  MOVLW  FF
04084:  XORWF  03,F
04086:  MOVF   00,W
04088:  MOVLB  5
0408A:  IORWF  x7F,F
0408C:  MOVF   03,W
0408E:  IORWF  x80,F
04090:  MOVLB  6
04092:  CLRF   1B
04094:  BTFSC  FF2.7
04096:  BSF    1B.7
04098:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
0409A:  CLRF   xD7
0409C:  MOVFF  65E,6D6
040A0:  CLRF   xD9
040A2:  MOVLW  2F
040A4:  MOVWF  xD8
040A6:  MOVLB  0
040A8:  CALL   0360
040AC:  BTFSC  1B.7
040AE:  BSF    FF2.7
040B0:  MOVF   01,W
040B2:  ADDLW  4C
040B4:  MOVLB  6
040B6:  MOVWF  x60
040B8:  MOVLW  01
040BA:  ADDWFC 02,W
040BC:  MOVWF  x61
040BE:  MOVLW  01
040C0:  ADDWF  x60,W
040C2:  MOVWF  01
040C4:  MOVLW  00
040C6:  ADDWFC x61,W
040C8:  MOVWF  03
040CA:  MOVF   01,W
040CC:  ADDLW  3E
040CE:  MOVWF  01
040D0:  MOVLW  01
040D2:  ADDWFC 03,F
040D4:  MOVF   01,W
040D6:  ADDLW  13
040D8:  MOVWF  FE9
040DA:  MOVLW  00
040DC:  ADDWFC 03,W
040DE:  MOVWF  FEA
040E0:  BCF    FEF.0
040E2:  CLRF   1B
040E4:  BTFSC  FF2.7
040E6:  BSF    1B.7
040E8:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
040EA:  CLRF   xD7
040EC:  MOVFF  65E,6D6
040F0:  CLRF   xD9
040F2:  MOVLW  2F
040F4:  MOVWF  xD8
040F6:  MOVLB  0
040F8:  CALL   0360
040FC:  BTFSC  1B.7
040FE:  BSF    FF2.7
04100:  MOVF   01,W
04102:  ADDLW  4C
04104:  MOVLB  6
04106:  MOVWF  x60
04108:  MOVLW  01
0410A:  ADDWFC 02,W
0410C:  MOVWF  x61
0410E:  MOVLW  01
04110:  ADDWF  x60,W
04112:  MOVWF  01
04114:  MOVLW  00
04116:  ADDWFC x61,W
04118:  MOVWF  03
0411A:  MOVF   01,W
0411C:  ADDLW  3E
0411E:  MOVWF  01
04120:  MOVLW  01
04122:  ADDWFC 03,F
04124:  MOVF   01,W
04126:  ADDLW  09
04128:  MOVWF  FE9
0412A:  MOVLW  00
0412C:  ADDWFC 03,W
0412E:  MOVWF  FEA
04130:  BTFSS  FEF.0
04132:  BRA    4240
04134:  CLRF   1B
04136:  BTFSC  FF2.7
04138:  BSF    1B.7
0413A:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
0413C:  CLRF   xD7
0413E:  MOVFF  65E,6D6
04142:  CLRF   xD9
04144:  MOVLW  2F
04146:  MOVWF  xD8
04148:  MOVLB  0
0414A:  CALL   0360
0414E:  BTFSC  1B.7
04150:  BSF    FF2.7
04152:  MOVF   01,W
04154:  ADDLW  4C
04156:  MOVLB  6
04158:  MOVWF  x60
0415A:  MOVLW  01
0415C:  ADDWFC 02,W
0415E:  MOVWF  x61
04160:  MOVLW  01
04162:  ADDWF  x60,W
04164:  MOVWF  01
04166:  MOVLW  00
04168:  ADDWFC x61,W
0416A:  MOVWF  03
0416C:  MOVF   01,W
0416E:  ADDLW  3E
04170:  MOVWF  01
04172:  MOVLW  01
04174:  ADDWFC 03,F
04176:  MOVF   01,W
04178:  ADDLW  08
0417A:  MOVWF  FE9
0417C:  MOVLW  00
0417E:  ADDWFC 03,W
04180:  MOVWF  FEA
04182:  MOVF   FEF,F
04184:  BZ    41F0
04186:  CLRF   1B
04188:  BTFSC  FF2.7
0418A:  BSF    1B.7
0418C:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
0418E:  CLRF   xD7
04190:  MOVFF  65E,6D6
04194:  CLRF   xD9
04196:  MOVLW  2F
04198:  MOVWF  xD8
0419A:  MOVLB  0
0419C:  CALL   0360
041A0:  BTFSC  1B.7
041A2:  BSF    FF2.7
041A4:  MOVF   01,W
041A6:  ADDLW  4C
041A8:  MOVLB  6
041AA:  MOVWF  x60
041AC:  MOVLW  01
041AE:  ADDWFC 02,W
041B0:  MOVWF  x61
041B2:  MOVLW  01
041B4:  ADDWF  x60,W
041B6:  MOVWF  01
041B8:  MOVLW  00
041BA:  ADDWFC x61,W
041BC:  MOVWF  03
041BE:  MOVF   01,W
041C0:  ADDLW  3E
041C2:  MOVWF  01
041C4:  MOVLW  01
041C6:  ADDWFC 03,F
041C8:  MOVF   01,W
041CA:  ADDLW  14
041CC:  MOVWF  FE9
041CE:  MOVLW  00
041D0:  ADDWFC 03,W
041D2:  MOVWF  FEA
041D4:  BCF    FD8.0
041D6:  RLCF   FEF,W
041D8:  CLRF   03
041DA:  MOVLB  0
041DC:  CALL   0172
041E0:  TBLRD*+
041E2:  MOVFF  FF5,03
041E6:  MOVLB  5
041E8:  ANDWF  x7F,F
041EA:  MOVF   03,W
041EC:  ANDWF  x80,F
041EE:  MOVLB  6
041F0:  CLRF   1B
041F2:  BTFSC  FF2.7
041F4:  BSF    1B.7
041F6:  BCF    FF2.7
....................                   
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
041F8:  CLRF   xD7
041FA:  MOVFF  65E,6D6
041FE:  CLRF   xD9
04200:  MOVLW  2F
04202:  MOVWF  xD8
04204:  MOVLB  0
04206:  CALL   0360
0420A:  BTFSC  1B.7
0420C:  BSF    FF2.7
0420E:  MOVF   01,W
04210:  ADDLW  4C
04212:  MOVLB  6
04214:  MOVWF  x60
04216:  MOVLW  01
04218:  ADDWFC 02,W
0421A:  MOVWF  x61
0421C:  MOVLW  01
0421E:  ADDWF  x60,W
04220:  MOVWF  01
04222:  MOVLW  00
04224:  ADDWFC x61,W
04226:  MOVWF  03
04228:  MOVF   01,W
0422A:  ADDLW  3E
0422C:  MOVWF  01
0422E:  MOVLW  01
04230:  ADDWFC 03,F
04232:  MOVF   01,W
04234:  ADDLW  09
04236:  MOVWF  FE9
04238:  MOVLW  00
0423A:  ADDWFC 03,W
0423C:  MOVWF  FEA
0423E:  BCF    FEF.0
....................             } 
....................          break; 
04240:  MOVLB  0
04242:  GOTO   4CF4
....................            case shutter: 
04246:  CLRF   1B
04248:  BTFSC  FF2.7
0424A:  BSF    1B.7
0424C:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
0424E:  MOVLB  6
04250:  CLRF   xD7
04252:  MOVFF  65E,6D6
04256:  CLRF   xD9
04258:  MOVLW  2F
0425A:  MOVWF  xD8
0425C:  MOVLB  0
0425E:  CALL   0360
04262:  BTFSC  1B.7
04264:  BSF    FF2.7
04266:  MOVF   01,W
04268:  ADDLW  4C
0426A:  MOVLB  6
0426C:  MOVWF  x60
0426E:  MOVLW  01
04270:  ADDWFC 02,W
04272:  MOVWF  x61
04274:  MOVLW  01
04276:  ADDWF  x60,W
04278:  MOVWF  01
0427A:  MOVLW  00
0427C:  ADDWFC x61,W
0427E:  MOVWF  03
04280:  MOVF   01,W
04282:  ADDLW  3E
04284:  MOVWF  01
04286:  MOVLW  01
04288:  ADDWFC 03,F
0428A:  MOVF   01,W
0428C:  ADDLW  09
0428E:  MOVWF  FE9
04290:  MOVLW  00
04292:  ADDWFC 03,W
04294:  MOVWF  FEA
04296:  BTFSS  FEF.0
04298:  BRA    44F0
0429A:  CLRF   1B
0429C:  BTFSC  FF2.7
0429E:  BSF    1B.7
042A0:  BCF    FF2.7
042A2:  CLRF   xD7
042A4:  MOVFF  65E,6D6
042A8:  CLRF   xD9
042AA:  MOVLW  2F
042AC:  MOVWF  xD8
042AE:  MOVLB  0
042B0:  CALL   0360
042B4:  BTFSC  1B.7
042B6:  BSF    FF2.7
042B8:  MOVF   01,W
042BA:  ADDLW  4C
042BC:  MOVLB  6
042BE:  MOVWF  x62
042C0:  MOVLW  01
042C2:  ADDWFC 02,W
042C4:  MOVWF  x63
042C6:  MOVLW  01
042C8:  ADDWF  x62,W
042CA:  MOVWF  01
042CC:  MOVLW  00
042CE:  ADDWFC x63,W
042D0:  MOVWF  03
042D2:  MOVF   01,W
042D4:  ADDLW  3E
042D6:  MOVWF  01
042D8:  MOVLW  01
042DA:  ADDWFC 03,F
042DC:  MOVF   01,W
042DE:  ADDLW  2D
042E0:  MOVWF  FE9
042E2:  MOVLW  00
042E4:  ADDWFC 03,W
042E6:  MOVWF  FEA
042E8:  MOVF   FEF,W
042EA:  SUBLW  04
042EC:  BZ    4342
042EE:  CLRF   1B
042F0:  BTFSC  FF2.7
042F2:  BSF    1B.7
042F4:  BCF    FF2.7
042F6:  CLRF   xD7
042F8:  MOVFF  65E,6D6
042FC:  CLRF   xD9
042FE:  MOVLW  2F
04300:  MOVWF  xD8
04302:  MOVLB  0
04304:  CALL   0360
04308:  BTFSC  1B.7
0430A:  BSF    FF2.7
0430C:  MOVF   01,W
0430E:  ADDLW  4C
04310:  MOVLB  6
04312:  MOVWF  x64
04314:  MOVLW  01
04316:  ADDWFC 02,W
04318:  MOVWF  x65
0431A:  MOVLW  01
0431C:  ADDWF  x64,W
0431E:  MOVWF  01
04320:  MOVLW  00
04322:  ADDWFC x65,W
04324:  MOVWF  03
04326:  MOVF   01,W
04328:  ADDLW  3E
0432A:  MOVWF  01
0432C:  MOVLW  01
0432E:  ADDWFC 03,F
04330:  MOVF   01,W
04332:  ADDLW  2D
04334:  MOVWF  FE9
04336:  MOVLW  00
04338:  ADDWFC 03,W
0433A:  MOVWF  FEA
0433C:  MOVF   FEF,F
0433E:  BTFSS  FD8.2
04340:  BRA    44F0
04342:  CLRF   1B
04344:  BTFSC  FF2.7
04346:  BSF    1B.7
04348:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
0434A:  CLRF   xD7
0434C:  MOVFF  65E,6D6
04350:  CLRF   xD9
04352:  MOVLW  2F
04354:  MOVWF  xD8
04356:  MOVLB  0
04358:  CALL   0360
0435C:  BTFSC  1B.7
0435E:  BSF    FF2.7
04360:  MOVF   01,W
04362:  ADDLW  4C
04364:  MOVLB  6
04366:  MOVWF  x60
04368:  MOVLW  01
0436A:  ADDWFC 02,W
0436C:  MOVWF  x61
0436E:  MOVLW  01
04370:  ADDWF  x60,W
04372:  MOVWF  01
04374:  MOVLW  00
04376:  ADDWFC x61,W
04378:  MOVWF  03
0437A:  MOVF   01,W
0437C:  ADDLW  3E
0437E:  MOVWF  01
04380:  MOVLW  01
04382:  ADDWFC 03,F
04384:  MOVF   01,W
04386:  ADDLW  08
04388:  MOVWF  FE9
0438A:  MOVLW  00
0438C:  ADDWFC 03,W
0438E:  MOVWF  FEA
04390:  MOVF   FEF,F
04392:  BTFSC  FD8.2
04394:  BRA    44A0
04396:  CLRF   1B
04398:  BTFSC  FF2.7
0439A:  BSF    1B.7
0439C:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
0439E:  CLRF   xD7
043A0:  MOVFF  65E,6D6
043A4:  CLRF   xD9
043A6:  MOVLW  2F
043A8:  MOVWF  xD8
043AA:  MOVLB  0
043AC:  CALL   0360
043B0:  BTFSC  1B.7
043B2:  BSF    FF2.7
043B4:  MOVF   01,W
043B6:  ADDLW  4C
043B8:  MOVLB  6
043BA:  MOVWF  x60
043BC:  MOVLW  01
043BE:  ADDWFC 02,W
043C0:  MOVWF  x61
043C2:  MOVLW  01
043C4:  ADDWF  x60,W
043C6:  MOVWF  01
043C8:  MOVLW  00
043CA:  ADDWFC x61,W
043CC:  MOVWF  03
043CE:  MOVF   01,W
043D0:  ADDLW  3E
043D2:  MOVWF  01
043D4:  MOVLW  01
043D6:  ADDWFC 03,F
043D8:  MOVF   01,W
043DA:  ADDLW  2A
043DC:  MOVWF  FE9
043DE:  MOVLW  00
043E0:  ADDWFC 03,W
043E2:  MOVWF  FEA
043E4:  CLRF   FEF
043E6:  CLRF   1B
043E8:  BTFSC  FF2.7
043EA:  BSF    1B.7
043EC:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
043EE:  CLRF   xD7
043F0:  MOVFF  65E,6D6
043F4:  CLRF   xD9
043F6:  MOVLW  2F
043F8:  MOVWF  xD8
043FA:  MOVLB  0
043FC:  CALL   0360
04400:  BTFSC  1B.7
04402:  BSF    FF2.7
04404:  MOVF   01,W
04406:  ADDLW  4C
04408:  MOVLB  6
0440A:  MOVWF  x60
0440C:  MOVLW  01
0440E:  ADDWFC 02,W
04410:  MOVWF  x61
04412:  MOVLW  01
04414:  ADDWF  x60,W
04416:  MOVWF  01
04418:  MOVLW  00
0441A:  ADDWFC x61,W
0441C:  MOVWF  03
0441E:  MOVF   01,W
04420:  ADDLW  3E
04422:  MOVWF  01
04424:  MOVLW  01
04426:  ADDWFC 03,F
04428:  MOVF   01,W
0442A:  ADDLW  2D
0442C:  MOVWF  FE9
0442E:  MOVLW  00
04430:  ADDWFC 03,W
04432:  MOVWF  FEA
04434:  CLRF   FEF
04436:  CLRF   1B
04438:  BTFSC  FF2.7
0443A:  BSF    1B.7
0443C:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
0443E:  CLRF   xD7
04440:  MOVFF  65E,6D6
04444:  CLRF   xD9
04446:  MOVLW  2F
04448:  MOVWF  xD8
0444A:  MOVLB  0
0444C:  CALL   0360
04450:  BTFSC  1B.7
04452:  BSF    FF2.7
04454:  MOVF   01,W
04456:  ADDLW  4C
04458:  MOVLB  6
0445A:  MOVWF  x60
0445C:  MOVLW  01
0445E:  ADDWFC 02,W
04460:  MOVWF  x61
04462:  MOVLW  01
04464:  ADDWF  x60,W
04466:  MOVWF  01
04468:  MOVLW  00
0446A:  ADDWFC x61,W
0446C:  MOVWF  03
0446E:  MOVF   01,W
04470:  ADDLW  3E
04472:  MOVWF  01
04474:  MOVLW  01
04476:  ADDWFC 03,F
04478:  MOVF   01,W
0447A:  ADDLW  28
0447C:  MOVWF  FE9
0447E:  MOVLW  00
04480:  ADDWFC 03,W
04482:  MOVWF  FEA
04484:  BCF    FD8.0
04486:  RLCF   FEF,W
04488:  CLRF   03
0448A:  MOVLB  0
0448C:  CALL   0172
04490:  TBLRD*+
04492:  MOVFF  FF5,03
04496:  MOVLB  5
04498:  ANDWF  x7F,F
0449A:  MOVF   03,W
0449C:  ANDWF  x80,F
0449E:  MOVLB  6
044A0:  CLRF   1B
044A2:  BTFSC  FF2.7
044A4:  BSF    1B.7
044A6:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
044A8:  CLRF   xD7
044AA:  MOVFF  65E,6D6
044AE:  CLRF   xD9
044B0:  MOVLW  2F
044B2:  MOVWF  xD8
044B4:  MOVLB  0
044B6:  CALL   0360
044BA:  BTFSC  1B.7
044BC:  BSF    FF2.7
044BE:  MOVF   01,W
044C0:  ADDLW  4C
044C2:  MOVLB  6
044C4:  MOVWF  x60
044C6:  MOVLW  01
044C8:  ADDWFC 02,W
044CA:  MOVWF  x61
044CC:  MOVLW  01
044CE:  ADDWF  x60,W
044D0:  MOVWF  01
044D2:  MOVLW  00
044D4:  ADDWFC x61,W
044D6:  MOVWF  03
044D8:  MOVF   01,W
044DA:  ADDLW  3E
044DC:  MOVWF  01
044DE:  MOVLW  01
044E0:  ADDWFC 03,F
044E2:  MOVF   01,W
044E4:  ADDLW  09
044E6:  MOVWF  FE9
044E8:  MOVLW  00
044EA:  ADDWFC 03,W
044EC:  MOVWF  FEA
044EE:  BCF    FEF.0
044F0:  CLRF   1B
044F2:  BTFSC  FF2.7
044F4:  BSF    1B.7
044F6:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
044F8:  CLRF   xD7
044FA:  MOVFF  65E,6D6
044FE:  CLRF   xD9
04500:  MOVLW  2F
04502:  MOVWF  xD8
04504:  MOVLB  0
04506:  CALL   0360
0450A:  BTFSC  1B.7
0450C:  BSF    FF2.7
0450E:  MOVF   01,W
04510:  ADDLW  4C
04512:  MOVLB  6
04514:  MOVWF  x60
04516:  MOVLW  01
04518:  ADDWFC 02,W
0451A:  MOVWF  x61
0451C:  MOVLW  01
0451E:  ADDWF  x60,W
04520:  MOVWF  01
04522:  MOVLW  00
04524:  ADDWFC x61,W
04526:  MOVWF  03
04528:  MOVF   01,W
0452A:  ADDLW  3E
0452C:  MOVWF  01
0452E:  MOVLW  01
04530:  ADDWFC 03,F
04532:  MOVF   01,W
04534:  ADDLW  13
04536:  MOVWF  FE9
04538:  MOVLW  00
0453A:  ADDWFC 03,W
0453C:  MOVWF  FEA
0453E:  BTFSS  FEF.0
04540:  BRA    4798
04542:  CLRF   1B
04544:  BTFSC  FF2.7
04546:  BSF    1B.7
04548:  BCF    FF2.7
0454A:  CLRF   xD7
0454C:  MOVFF  65E,6D6
04550:  CLRF   xD9
04552:  MOVLW  2F
04554:  MOVWF  xD8
04556:  MOVLB  0
04558:  CALL   0360
0455C:  BTFSC  1B.7
0455E:  BSF    FF2.7
04560:  MOVF   01,W
04562:  ADDLW  4C
04564:  MOVLB  6
04566:  MOVWF  x62
04568:  MOVLW  01
0456A:  ADDWFC 02,W
0456C:  MOVWF  x63
0456E:  MOVLW  01
04570:  ADDWF  x62,W
04572:  MOVWF  01
04574:  MOVLW  00
04576:  ADDWFC x63,W
04578:  MOVWF  03
0457A:  MOVF   01,W
0457C:  ADDLW  3E
0457E:  MOVWF  01
04580:  MOVLW  01
04582:  ADDWFC 03,F
04584:  MOVF   01,W
04586:  ADDLW  2D
04588:  MOVWF  FE9
0458A:  MOVLW  00
0458C:  ADDWFC 03,W
0458E:  MOVWF  FEA
04590:  MOVF   FEF,W
04592:  SUBLW  04
04594:  BZ    45E8
04596:  CLRF   1B
04598:  BTFSC  FF2.7
0459A:  BSF    1B.7
0459C:  BCF    FF2.7
0459E:  CLRF   xD7
045A0:  MOVFF  65E,6D6
045A4:  CLRF   xD9
045A6:  MOVLW  2F
045A8:  MOVWF  xD8
045AA:  MOVLB  0
045AC:  CALL   0360
045B0:  BTFSC  1B.7
045B2:  BSF    FF2.7
045B4:  MOVF   01,W
045B6:  ADDLW  4C
045B8:  MOVLB  6
045BA:  MOVWF  x64
045BC:  MOVLW  01
045BE:  ADDWFC 02,W
045C0:  MOVWF  x65
045C2:  MOVLW  01
045C4:  ADDWF  x64,W
045C6:  MOVWF  01
045C8:  MOVLW  00
045CA:  ADDWFC x65,W
045CC:  MOVWF  03
045CE:  MOVF   01,W
045D0:  ADDLW  3E
045D2:  MOVWF  01
045D4:  MOVLW  01
045D6:  ADDWFC 03,F
045D8:  MOVF   01,W
045DA:  ADDLW  2D
045DC:  MOVWF  FE9
045DE:  MOVLW  00
045E0:  ADDWFC 03,W
045E2:  MOVWF  FEA
045E4:  DECFSZ FEF,W
045E6:  BRA    4798
045E8:  CLRF   1B
045EA:  BTFSC  FF2.7
045EC:  BSF    1B.7
045EE:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
045F0:  CLRF   xD7
045F2:  MOVFF  65E,6D6
045F6:  CLRF   xD9
045F8:  MOVLW  2F
045FA:  MOVWF  xD8
045FC:  MOVLB  0
045FE:  CALL   0360
04602:  BTFSC  1B.7
04604:  BSF    FF2.7
04606:  MOVF   01,W
04608:  ADDLW  4C
0460A:  MOVLB  6
0460C:  MOVWF  x60
0460E:  MOVLW  01
04610:  ADDWFC 02,W
04612:  MOVWF  x61
04614:  MOVLW  01
04616:  ADDWF  x60,W
04618:  MOVWF  01
0461A:  MOVLW  00
0461C:  ADDWFC x61,W
0461E:  MOVWF  03
04620:  MOVF   01,W
04622:  ADDLW  3E
04624:  MOVWF  01
04626:  MOVLW  01
04628:  ADDWFC 03,F
0462A:  MOVF   01,W
0462C:  ADDLW  12
0462E:  MOVWF  FE9
04630:  MOVLW  00
04632:  ADDWFC 03,W
04634:  MOVWF  FEA
04636:  MOVF   FEF,F
04638:  BTFSC  FD8.2
0463A:  BRA    4748
0463C:  CLRF   1B
0463E:  BTFSC  FF2.7
04640:  BSF    1B.7
04642:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04644:  CLRF   xD7
04646:  MOVFF  65E,6D6
0464A:  CLRF   xD9
0464C:  MOVLW  2F
0464E:  MOVWF  xD8
04650:  MOVLB  0
04652:  CALL   0360
04656:  BTFSC  1B.7
04658:  BSF    FF2.7
0465A:  MOVF   01,W
0465C:  ADDLW  4C
0465E:  MOVLB  6
04660:  MOVWF  x60
04662:  MOVLW  01
04664:  ADDWFC 02,W
04666:  MOVWF  x61
04668:  MOVLW  01
0466A:  ADDWF  x60,W
0466C:  MOVWF  01
0466E:  MOVLW  00
04670:  ADDWFC x61,W
04672:  MOVWF  03
04674:  MOVF   01,W
04676:  ADDLW  3E
04678:  MOVWF  01
0467A:  MOVLW  01
0467C:  ADDWFC 03,F
0467E:  MOVF   01,W
04680:  ADDLW  2A
04682:  MOVWF  FE9
04684:  MOVLW  00
04686:  ADDWFC 03,W
04688:  MOVWF  FEA
0468A:  CLRF   FEF
0468C:  CLRF   1B
0468E:  BTFSC  FF2.7
04690:  BSF    1B.7
04692:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
04694:  CLRF   xD7
04696:  MOVFF  65E,6D6
0469A:  CLRF   xD9
0469C:  MOVLW  2F
0469E:  MOVWF  xD8
046A0:  MOVLB  0
046A2:  CALL   0360
046A6:  BTFSC  1B.7
046A8:  BSF    FF2.7
046AA:  MOVF   01,W
046AC:  ADDLW  4C
046AE:  MOVLB  6
046B0:  MOVWF  x60
046B2:  MOVLW  01
046B4:  ADDWFC 02,W
046B6:  MOVWF  x61
046B8:  MOVLW  01
046BA:  ADDWF  x60,W
046BC:  MOVWF  01
046BE:  MOVLW  00
046C0:  ADDWFC x61,W
046C2:  MOVWF  03
046C4:  MOVF   01,W
046C6:  ADDLW  3E
046C8:  MOVWF  01
046CA:  MOVLW  01
046CC:  ADDWFC 03,F
046CE:  MOVF   01,W
046D0:  ADDLW  2D
046D2:  MOVWF  FE9
046D4:  MOVLW  00
046D6:  ADDWFC 03,W
046D8:  MOVWF  FEA
046DA:  MOVLW  01
046DC:  MOVWF  FEF
046DE:  CLRF   1B
046E0:  BTFSC  FF2.7
046E2:  BSF    1B.7
046E4:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
046E6:  CLRF   xD7
046E8:  MOVFF  65E,6D6
046EC:  CLRF   xD9
046EE:  MOVLW  2F
046F0:  MOVWF  xD8
046F2:  MOVLB  0
046F4:  CALL   0360
046F8:  BTFSC  1B.7
046FA:  BSF    FF2.7
046FC:  MOVF   01,W
046FE:  ADDLW  4C
04700:  MOVLB  6
04702:  MOVWF  x60
04704:  MOVLW  01
04706:  ADDWFC 02,W
04708:  MOVWF  x61
0470A:  MOVLW  01
0470C:  ADDWF  x60,W
0470E:  MOVWF  01
04710:  MOVLW  00
04712:  ADDWFC x61,W
04714:  MOVWF  03
04716:  MOVF   01,W
04718:  ADDLW  3E
0471A:  MOVWF  01
0471C:  MOVLW  01
0471E:  ADDWFC 03,F
04720:  MOVF   01,W
04722:  ADDLW  29
04724:  MOVWF  FE9
04726:  MOVLW  00
04728:  ADDWFC 03,W
0472A:  MOVWF  FEA
0472C:  BCF    FD8.0
0472E:  RLCF   FEF,W
04730:  CLRF   03
04732:  MOVLB  0
04734:  CALL   0172
04738:  TBLRD*+
0473A:  MOVFF  FF5,03
0473E:  MOVLB  5
04740:  ANDWF  x7F,F
04742:  MOVF   03,W
04744:  ANDWF  x80,F
04746:  MOVLB  6
04748:  CLRF   1B
0474A:  BTFSC  FF2.7
0474C:  BSF    1B.7
0474E:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04750:  CLRF   xD7
04752:  MOVFF  65E,6D6
04756:  CLRF   xD9
04758:  MOVLW  2F
0475A:  MOVWF  xD8
0475C:  MOVLB  0
0475E:  CALL   0360
04762:  BTFSC  1B.7
04764:  BSF    FF2.7
04766:  MOVF   01,W
04768:  ADDLW  4C
0476A:  MOVLB  6
0476C:  MOVWF  x60
0476E:  MOVLW  01
04770:  ADDWFC 02,W
04772:  MOVWF  x61
04774:  MOVLW  01
04776:  ADDWF  x60,W
04778:  MOVWF  01
0477A:  MOVLW  00
0477C:  ADDWFC x61,W
0477E:  MOVWF  03
04780:  MOVF   01,W
04782:  ADDLW  3E
04784:  MOVWF  01
04786:  MOVLW  01
04788:  ADDWFC 03,F
0478A:  MOVF   01,W
0478C:  ADDLW  13
0478E:  MOVWF  FE9
04790:  MOVLW  00
04792:  ADDWFC 03,W
04794:  MOVWF  FEA
04796:  BCF    FEF.0
04798:  CLRF   1B
0479A:  BTFSC  FF2.7
0479C:  BSF    1B.7
0479E:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
047A0:  CLRF   xD7
047A2:  MOVFF  65E,6D6
047A6:  CLRF   xD9
047A8:  MOVLW  2F
047AA:  MOVWF  xD8
047AC:  MOVLB  0
047AE:  CALL   0360
047B2:  BTFSC  1B.7
047B4:  BSF    FF2.7
047B6:  MOVF   01,W
047B8:  ADDLW  4C
047BA:  MOVLB  6
047BC:  MOVWF  x60
047BE:  MOVLW  01
047C0:  ADDWFC 02,W
047C2:  MOVWF  x61
047C4:  MOVLW  01
047C6:  ADDWF  x60,W
047C8:  MOVWF  01
047CA:  MOVLW  00
047CC:  ADDWFC x61,W
047CE:  MOVWF  03
047D0:  MOVF   01,W
047D2:  ADDLW  3E
047D4:  MOVWF  01
047D6:  MOVLW  01
047D8:  ADDWFC 03,F
047DA:  MOVF   01,W
047DC:  ADDLW  1D
047DE:  MOVWF  FE9
047E0:  MOVLW  00
047E2:  ADDWFC 03,W
047E4:  MOVWF  FEA
047E6:  BTFSS  FEF.0
047E8:  BRA    4A44
047EA:  CLRF   1B
047EC:  BTFSC  FF2.7
047EE:  BSF    1B.7
047F0:  BCF    FF2.7
047F2:  CLRF   xD7
047F4:  MOVFF  65E,6D6
047F8:  CLRF   xD9
047FA:  MOVLW  2F
047FC:  MOVWF  xD8
047FE:  MOVLB  0
04800:  CALL   0360
04804:  BTFSC  1B.7
04806:  BSF    FF2.7
04808:  MOVF   01,W
0480A:  ADDLW  4C
0480C:  MOVLB  6
0480E:  MOVWF  x62
04810:  MOVLW  01
04812:  ADDWFC 02,W
04814:  MOVWF  x63
04816:  MOVLW  01
04818:  ADDWF  x62,W
0481A:  MOVWF  01
0481C:  MOVLW  00
0481E:  ADDWFC x63,W
04820:  MOVWF  03
04822:  MOVF   01,W
04824:  ADDLW  3E
04826:  MOVWF  01
04828:  MOVLW  01
0482A:  ADDWFC 03,F
0482C:  MOVF   01,W
0482E:  ADDLW  2D
04830:  MOVWF  FE9
04832:  MOVLW  00
04834:  ADDWFC 03,W
04836:  MOVWF  FEA
04838:  MOVF   FEF,W
0483A:  SUBLW  04
0483C:  BZ    4894
0483E:  CLRF   1B
04840:  BTFSC  FF2.7
04842:  BSF    1B.7
04844:  BCF    FF2.7
04846:  CLRF   xD7
04848:  MOVFF  65E,6D6
0484C:  CLRF   xD9
0484E:  MOVLW  2F
04850:  MOVWF  xD8
04852:  MOVLB  0
04854:  CALL   0360
04858:  BTFSC  1B.7
0485A:  BSF    FF2.7
0485C:  MOVF   01,W
0485E:  ADDLW  4C
04860:  MOVLB  6
04862:  MOVWF  x64
04864:  MOVLW  01
04866:  ADDWFC 02,W
04868:  MOVWF  x65
0486A:  MOVLW  01
0486C:  ADDWF  x64,W
0486E:  MOVWF  01
04870:  MOVLW  00
04872:  ADDWFC x65,W
04874:  MOVWF  03
04876:  MOVF   01,W
04878:  ADDLW  3E
0487A:  MOVWF  01
0487C:  MOVLW  01
0487E:  ADDWFC 03,F
04880:  MOVF   01,W
04882:  ADDLW  2D
04884:  MOVWF  FE9
04886:  MOVLW  00
04888:  ADDWFC 03,W
0488A:  MOVWF  FEA
0488C:  MOVF   FEF,W
0488E:  SUBLW  02
04890:  BTFSS  FD8.2
04892:  BRA    4A44
04894:  CLRF   1B
04896:  BTFSC  FF2.7
04898:  BSF    1B.7
0489A:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
0489C:  CLRF   xD7
0489E:  MOVFF  65E,6D6
048A2:  CLRF   xD9
048A4:  MOVLW  2F
048A6:  MOVWF  xD8
048A8:  MOVLB  0
048AA:  CALL   0360
048AE:  BTFSC  1B.7
048B0:  BSF    FF2.7
048B2:  MOVF   01,W
048B4:  ADDLW  4C
048B6:  MOVLB  6
048B8:  MOVWF  x60
048BA:  MOVLW  01
048BC:  ADDWFC 02,W
048BE:  MOVWF  x61
048C0:  MOVLW  01
048C2:  ADDWF  x60,W
048C4:  MOVWF  01
048C6:  MOVLW  00
048C8:  ADDWFC x61,W
048CA:  MOVWF  03
048CC:  MOVF   01,W
048CE:  ADDLW  3E
048D0:  MOVWF  01
048D2:  MOVLW  01
048D4:  ADDWFC 03,F
048D6:  MOVF   01,W
048D8:  ADDLW  1C
048DA:  MOVWF  FE9
048DC:  MOVLW  00
048DE:  ADDWFC 03,W
048E0:  MOVWF  FEA
048E2:  MOVF   FEF,F
048E4:  BTFSC  FD8.2
048E6:  BRA    49F4
048E8:  CLRF   1B
048EA:  BTFSC  FF2.7
048EC:  BSF    1B.7
048EE:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
048F0:  CLRF   xD7
048F2:  MOVFF  65E,6D6
048F6:  CLRF   xD9
048F8:  MOVLW  2F
048FA:  MOVWF  xD8
048FC:  MOVLB  0
048FE:  CALL   0360
04902:  BTFSC  1B.7
04904:  BSF    FF2.7
04906:  MOVF   01,W
04908:  ADDLW  4C
0490A:  MOVLB  6
0490C:  MOVWF  x60
0490E:  MOVLW  01
04910:  ADDWFC 02,W
04912:  MOVWF  x61
04914:  MOVLW  01
04916:  ADDWF  x60,W
04918:  MOVWF  01
0491A:  MOVLW  00
0491C:  ADDWFC x61,W
0491E:  MOVWF  03
04920:  MOVF   01,W
04922:  ADDLW  3E
04924:  MOVWF  01
04926:  MOVLW  01
04928:  ADDWFC 03,F
0492A:  MOVF   01,W
0492C:  ADDLW  2A
0492E:  MOVWF  FE9
04930:  MOVLW  00
04932:  ADDWFC 03,W
04934:  MOVWF  FEA
04936:  CLRF   FEF
04938:  CLRF   1B
0493A:  BTFSC  FF2.7
0493C:  BSF    1B.7
0493E:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
04940:  CLRF   xD7
04942:  MOVFF  65E,6D6
04946:  CLRF   xD9
04948:  MOVLW  2F
0494A:  MOVWF  xD8
0494C:  MOVLB  0
0494E:  CALL   0360
04952:  BTFSC  1B.7
04954:  BSF    FF2.7
04956:  MOVF   01,W
04958:  ADDLW  4C
0495A:  MOVLB  6
0495C:  MOVWF  x60
0495E:  MOVLW  01
04960:  ADDWFC 02,W
04962:  MOVWF  x61
04964:  MOVLW  01
04966:  ADDWF  x60,W
04968:  MOVWF  01
0496A:  MOVLW  00
0496C:  ADDWFC x61,W
0496E:  MOVWF  03
04970:  MOVF   01,W
04972:  ADDLW  3E
04974:  MOVWF  01
04976:  MOVLW  01
04978:  ADDWFC 03,F
0497A:  MOVF   01,W
0497C:  ADDLW  2D
0497E:  MOVWF  FE9
04980:  MOVLW  00
04982:  ADDWFC 03,W
04984:  MOVWF  FEA
04986:  MOVLW  02
04988:  MOVWF  FEF
0498A:  CLRF   1B
0498C:  BTFSC  FF2.7
0498E:  BSF    1B.7
04990:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04992:  CLRF   xD7
04994:  MOVFF  65E,6D6
04998:  CLRF   xD9
0499A:  MOVLW  2F
0499C:  MOVWF  xD8
0499E:  MOVLB  0
049A0:  CALL   0360
049A4:  BTFSC  1B.7
049A6:  BSF    FF2.7
049A8:  MOVF   01,W
049AA:  ADDLW  4C
049AC:  MOVLB  6
049AE:  MOVWF  x60
049B0:  MOVLW  01
049B2:  ADDWFC 02,W
049B4:  MOVWF  x61
049B6:  MOVLW  01
049B8:  ADDWF  x60,W
049BA:  MOVWF  01
049BC:  MOVLW  00
049BE:  ADDWFC x61,W
049C0:  MOVWF  03
049C2:  MOVF   01,W
049C4:  ADDLW  3E
049C6:  MOVWF  01
049C8:  MOVLW  01
049CA:  ADDWFC 03,F
049CC:  MOVF   01,W
049CE:  ADDLW  28
049D0:  MOVWF  FE9
049D2:  MOVLW  00
049D4:  ADDWFC 03,W
049D6:  MOVWF  FEA
049D8:  BCF    FD8.0
049DA:  RLCF   FEF,W
049DC:  CLRF   03
049DE:  MOVLB  0
049E0:  CALL   0172
049E4:  TBLRD*+
049E6:  MOVFF  FF5,03
049EA:  MOVLB  5
049EC:  ANDWF  x7F,F
049EE:  MOVF   03,W
049F0:  ANDWF  x80,F
049F2:  MOVLB  6
049F4:  CLRF   1B
049F6:  BTFSC  FF2.7
049F8:  BSF    1B.7
049FA:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
049FC:  CLRF   xD7
049FE:  MOVFF  65E,6D6
04A02:  CLRF   xD9
04A04:  MOVLW  2F
04A06:  MOVWF  xD8
04A08:  MOVLB  0
04A0A:  CALL   0360
04A0E:  BTFSC  1B.7
04A10:  BSF    FF2.7
04A12:  MOVF   01,W
04A14:  ADDLW  4C
04A16:  MOVLB  6
04A18:  MOVWF  x60
04A1A:  MOVLW  01
04A1C:  ADDWFC 02,W
04A1E:  MOVWF  x61
04A20:  MOVLW  01
04A22:  ADDWF  x60,W
04A24:  MOVWF  01
04A26:  MOVLW  00
04A28:  ADDWFC x61,W
04A2A:  MOVWF  03
04A2C:  MOVF   01,W
04A2E:  ADDLW  3E
04A30:  MOVWF  01
04A32:  MOVLW  01
04A34:  ADDWFC 03,F
04A36:  MOVF   01,W
04A38:  ADDLW  1D
04A3A:  MOVWF  FE9
04A3C:  MOVLW  00
04A3E:  ADDWFC 03,W
04A40:  MOVWF  FEA
04A42:  BCF    FEF.0
04A44:  CLRF   1B
04A46:  BTFSC  FF2.7
04A48:  BSF    1B.7
04A4A:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
04A4C:  CLRF   xD7
04A4E:  MOVFF  65E,6D6
04A52:  CLRF   xD9
04A54:  MOVLW  2F
04A56:  MOVWF  xD8
04A58:  MOVLB  0
04A5A:  CALL   0360
04A5E:  BTFSC  1B.7
04A60:  BSF    FF2.7
04A62:  MOVF   01,W
04A64:  ADDLW  4C
04A66:  MOVLB  6
04A68:  MOVWF  x60
04A6A:  MOVLW  01
04A6C:  ADDWFC 02,W
04A6E:  MOVWF  x61
04A70:  MOVLW  01
04A72:  ADDWF  x60,W
04A74:  MOVWF  01
04A76:  MOVLW  00
04A78:  ADDWFC x61,W
04A7A:  MOVWF  03
04A7C:  MOVF   01,W
04A7E:  ADDLW  3E
04A80:  MOVWF  01
04A82:  MOVLW  01
04A84:  ADDWFC 03,F
04A86:  MOVF   01,W
04A88:  ADDLW  27
04A8A:  MOVWF  FE9
04A8C:  MOVLW  00
04A8E:  ADDWFC 03,W
04A90:  MOVWF  FEA
04A92:  BTFSS  FEF.0
04A94:  BRA    4CF0
04A96:  CLRF   1B
04A98:  BTFSC  FF2.7
04A9A:  BSF    1B.7
04A9C:  BCF    FF2.7
04A9E:  CLRF   xD7
04AA0:  MOVFF  65E,6D6
04AA4:  CLRF   xD9
04AA6:  MOVLW  2F
04AA8:  MOVWF  xD8
04AAA:  MOVLB  0
04AAC:  CALL   0360
04AB0:  BTFSC  1B.7
04AB2:  BSF    FF2.7
04AB4:  MOVF   01,W
04AB6:  ADDLW  4C
04AB8:  MOVLB  6
04ABA:  MOVWF  x62
04ABC:  MOVLW  01
04ABE:  ADDWFC 02,W
04AC0:  MOVWF  x63
04AC2:  MOVLW  01
04AC4:  ADDWF  x62,W
04AC6:  MOVWF  01
04AC8:  MOVLW  00
04ACA:  ADDWFC x63,W
04ACC:  MOVWF  03
04ACE:  MOVF   01,W
04AD0:  ADDLW  3E
04AD2:  MOVWF  01
04AD4:  MOVLW  01
04AD6:  ADDWFC 03,F
04AD8:  MOVF   01,W
04ADA:  ADDLW  2D
04ADC:  MOVWF  FE9
04ADE:  MOVLW  00
04AE0:  ADDWFC 03,W
04AE2:  MOVWF  FEA
04AE4:  MOVF   FEF,W
04AE6:  SUBLW  04
04AE8:  BZ    4B40
04AEA:  CLRF   1B
04AEC:  BTFSC  FF2.7
04AEE:  BSF    1B.7
04AF0:  BCF    FF2.7
04AF2:  CLRF   xD7
04AF4:  MOVFF  65E,6D6
04AF8:  CLRF   xD9
04AFA:  MOVLW  2F
04AFC:  MOVWF  xD8
04AFE:  MOVLB  0
04B00:  CALL   0360
04B04:  BTFSC  1B.7
04B06:  BSF    FF2.7
04B08:  MOVF   01,W
04B0A:  ADDLW  4C
04B0C:  MOVLB  6
04B0E:  MOVWF  x64
04B10:  MOVLW  01
04B12:  ADDWFC 02,W
04B14:  MOVWF  x65
04B16:  MOVLW  01
04B18:  ADDWF  x64,W
04B1A:  MOVWF  01
04B1C:  MOVLW  00
04B1E:  ADDWFC x65,W
04B20:  MOVWF  03
04B22:  MOVF   01,W
04B24:  ADDLW  3E
04B26:  MOVWF  01
04B28:  MOVLW  01
04B2A:  ADDWFC 03,F
04B2C:  MOVF   01,W
04B2E:  ADDLW  2D
04B30:  MOVWF  FE9
04B32:  MOVLW  00
04B34:  ADDWFC 03,W
04B36:  MOVWF  FEA
04B38:  MOVF   FEF,W
04B3A:  SUBLW  03
04B3C:  BTFSS  FD8.2
04B3E:  BRA    4CF0
04B40:  CLRF   1B
04B42:  BTFSC  FF2.7
04B44:  BSF    1B.7
04B46:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
04B48:  CLRF   xD7
04B4A:  MOVFF  65E,6D6
04B4E:  CLRF   xD9
04B50:  MOVLW  2F
04B52:  MOVWF  xD8
04B54:  MOVLB  0
04B56:  CALL   0360
04B5A:  BTFSC  1B.7
04B5C:  BSF    FF2.7
04B5E:  MOVF   01,W
04B60:  ADDLW  4C
04B62:  MOVLB  6
04B64:  MOVWF  x60
04B66:  MOVLW  01
04B68:  ADDWFC 02,W
04B6A:  MOVWF  x61
04B6C:  MOVLW  01
04B6E:  ADDWF  x60,W
04B70:  MOVWF  01
04B72:  MOVLW  00
04B74:  ADDWFC x61,W
04B76:  MOVWF  03
04B78:  MOVF   01,W
04B7A:  ADDLW  3E
04B7C:  MOVWF  01
04B7E:  MOVLW  01
04B80:  ADDWFC 03,F
04B82:  MOVF   01,W
04B84:  ADDLW  26
04B86:  MOVWF  FE9
04B88:  MOVLW  00
04B8A:  ADDWFC 03,W
04B8C:  MOVWF  FEA
04B8E:  MOVF   FEF,F
04B90:  BTFSC  FD8.2
04B92:  BRA    4CA0
04B94:  CLRF   1B
04B96:  BTFSC  FF2.7
04B98:  BSF    1B.7
04B9A:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04B9C:  CLRF   xD7
04B9E:  MOVFF  65E,6D6
04BA2:  CLRF   xD9
04BA4:  MOVLW  2F
04BA6:  MOVWF  xD8
04BA8:  MOVLB  0
04BAA:  CALL   0360
04BAE:  BTFSC  1B.7
04BB0:  BSF    FF2.7
04BB2:  MOVF   01,W
04BB4:  ADDLW  4C
04BB6:  MOVLB  6
04BB8:  MOVWF  x60
04BBA:  MOVLW  01
04BBC:  ADDWFC 02,W
04BBE:  MOVWF  x61
04BC0:  MOVLW  01
04BC2:  ADDWF  x60,W
04BC4:  MOVWF  01
04BC6:  MOVLW  00
04BC8:  ADDWFC x61,W
04BCA:  MOVWF  03
04BCC:  MOVF   01,W
04BCE:  ADDLW  3E
04BD0:  MOVWF  01
04BD2:  MOVLW  01
04BD4:  ADDWFC 03,F
04BD6:  MOVF   01,W
04BD8:  ADDLW  2A
04BDA:  MOVWF  FE9
04BDC:  MOVLW  00
04BDE:  ADDWFC 03,W
04BE0:  MOVWF  FEA
04BE2:  CLRF   FEF
04BE4:  CLRF   1B
04BE6:  BTFSC  FF2.7
04BE8:  BSF    1B.7
04BEA:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
04BEC:  CLRF   xD7
04BEE:  MOVFF  65E,6D6
04BF2:  CLRF   xD9
04BF4:  MOVLW  2F
04BF6:  MOVWF  xD8
04BF8:  MOVLB  0
04BFA:  CALL   0360
04BFE:  BTFSC  1B.7
04C00:  BSF    FF2.7
04C02:  MOVF   01,W
04C04:  ADDLW  4C
04C06:  MOVLB  6
04C08:  MOVWF  x60
04C0A:  MOVLW  01
04C0C:  ADDWFC 02,W
04C0E:  MOVWF  x61
04C10:  MOVLW  01
04C12:  ADDWF  x60,W
04C14:  MOVWF  01
04C16:  MOVLW  00
04C18:  ADDWFC x61,W
04C1A:  MOVWF  03
04C1C:  MOVF   01,W
04C1E:  ADDLW  3E
04C20:  MOVWF  01
04C22:  MOVLW  01
04C24:  ADDWFC 03,F
04C26:  MOVF   01,W
04C28:  ADDLW  2D
04C2A:  MOVWF  FE9
04C2C:  MOVLW  00
04C2E:  ADDWFC 03,W
04C30:  MOVWF  FEA
04C32:  MOVLW  03
04C34:  MOVWF  FEF
04C36:  CLRF   1B
04C38:  BTFSC  FF2.7
04C3A:  BSF    1B.7
04C3C:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04C3E:  CLRF   xD7
04C40:  MOVFF  65E,6D6
04C44:  CLRF   xD9
04C46:  MOVLW  2F
04C48:  MOVWF  xD8
04C4A:  MOVLB  0
04C4C:  CALL   0360
04C50:  BTFSC  1B.7
04C52:  BSF    FF2.7
04C54:  MOVF   01,W
04C56:  ADDLW  4C
04C58:  MOVLB  6
04C5A:  MOVWF  x60
04C5C:  MOVLW  01
04C5E:  ADDWFC 02,W
04C60:  MOVWF  x61
04C62:  MOVLW  01
04C64:  ADDWF  x60,W
04C66:  MOVWF  01
04C68:  MOVLW  00
04C6A:  ADDWFC x61,W
04C6C:  MOVWF  03
04C6E:  MOVF   01,W
04C70:  ADDLW  3E
04C72:  MOVWF  01
04C74:  MOVLW  01
04C76:  ADDWFC 03,F
04C78:  MOVF   01,W
04C7A:  ADDLW  29
04C7C:  MOVWF  FE9
04C7E:  MOVLW  00
04C80:  ADDWFC 03,W
04C82:  MOVWF  FEA
04C84:  BCF    FD8.0
04C86:  RLCF   FEF,W
04C88:  CLRF   03
04C8A:  MOVLB  0
04C8C:  CALL   0172
04C90:  TBLRD*+
04C92:  MOVFF  FF5,03
04C96:  MOVLB  5
04C98:  ANDWF  x7F,F
04C9A:  MOVF   03,W
04C9C:  ANDWF  x80,F
04C9E:  MOVLB  6
04CA0:  CLRF   1B
04CA2:  BTFSC  FF2.7
04CA4:  BSF    1B.7
04CA6:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
04CA8:  CLRF   xD7
04CAA:  MOVFF  65E,6D6
04CAE:  CLRF   xD9
04CB0:  MOVLW  2F
04CB2:  MOVWF  xD8
04CB4:  MOVLB  0
04CB6:  CALL   0360
04CBA:  BTFSC  1B.7
04CBC:  BSF    FF2.7
04CBE:  MOVF   01,W
04CC0:  ADDLW  4C
04CC2:  MOVLB  6
04CC4:  MOVWF  x60
04CC6:  MOVLW  01
04CC8:  ADDWFC 02,W
04CCA:  MOVWF  x61
04CCC:  MOVLW  01
04CCE:  ADDWF  x60,W
04CD0:  MOVWF  01
04CD2:  MOVLW  00
04CD4:  ADDWFC x61,W
04CD6:  MOVWF  03
04CD8:  MOVF   01,W
04CDA:  ADDLW  3E
04CDC:  MOVWF  01
04CDE:  MOVLW  01
04CE0:  ADDWFC 03,F
04CE2:  MOVF   01,W
04CE4:  ADDLW  27
04CE6:  MOVWF  FE9
04CE8:  MOVLW  00
04CEA:  ADDWFC 03,W
04CEC:  MOVWF  FEA
04CEE:  BCF    FEF.0
....................             } 
....................             
....................             break; 
04CF0:  MOVLB  0
04CF2:  BRA    4CF4
....................    } 
....................    } 
04CF4:  MOVLB  6
04CF6:  INCF   x5E,F
04CF8:  GOTO   39B0
....................    if(update_dimmers) 
04CFC:  BTFSS  x5F.0
04CFE:  BRA    4D08
....................       org(); 
04D00:  MOVLB  0
04D02:  CALL   31F2
04D06:  MOVLB  6
.................... } 
04D08:  MOVLB  0
04D0A:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
04D5A:  MOVLB  6
04D5C:  CLRF   x71
04D5E:  MOVF   x71,W
04D60:  SUBLW  07
04D62:  BNC   4D82
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
04D64:  CLRF   03
04D66:  MOVF   x71,W
04D68:  ADDWF  x6E,W
04D6A:  MOVWF  FE9
04D6C:  MOVF   x6F,W
04D6E:  ADDWFC 03,W
04D70:  MOVWF  FEA
04D72:  MOVF   x70,W
04D74:  SUBWF  FEF,W
04D76:  BNZ   4D7E
04D78:  MOVLW  01
04D7A:  MOVWF  01
04D7C:  BRA    4D86
....................    } 
04D7E:  INCF   x71,F
04D80:  BRA    4D5E
....................  
....................    return false; 
04D82:  MOVLW  00
04D84:  MOVWF  01
.................... } 
04D86:  MOVLB  0
04D88:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
04D8A:  MOVLB  6
04D8C:  CLRF   x69
04D8E:  MOVLB  1
04D90:  MOVF   x3F,W
04D92:  MOVLB  6
04D94:  SUBWF  x69,W
04D96:  BTFSC  FD8.0
04D98:  GOTO   5778
04D9C:  CLRF   1B
04D9E:  BTFSC  FF2.7
04DA0:  BSF    1B.7
04DA2:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
04DA4:  CLRF   xD7
04DA6:  MOVFF  669,6D6
04DAA:  CLRF   xD9
04DAC:  MOVLW  2F
04DAE:  MOVWF  xD8
04DB0:  MOVLB  0
04DB2:  CALL   0360
04DB6:  BTFSC  1B.7
04DB8:  BSF    FF2.7
04DBA:  MOVFF  02,03
04DBE:  MOVF   01,W
04DC0:  ADDLW  8A
04DC2:  MOVWF  01
04DC4:  MOVLW  02
04DC6:  ADDWFC 03,F
04DC8:  MOVFF  01,FE9
04DCC:  MOVFF  03,FEA
04DD0:  MOVF   FEF,W
04DD2:  XORLW  65
04DD4:  BZ    4DE6
04DD6:  XORLW  01
04DD8:  BTFSC  FD8.2
04DDA:  BRA    5112
04DDC:  XORLW  02
04DDE:  BTFSC  FD8.2
04DE0:  BRA    532C
04DE2:  GOTO   576E
....................          case dimmer: 
04DE6:  CLRF   1B
04DE8:  BTFSC  FF2.7
04DEA:  BSF    1B.7
04DEC:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
04DEE:  MOVLB  6
04DF0:  CLRF   xD7
04DF2:  MOVFF  669,6D6
04DF6:  CLRF   xD9
04DF8:  MOVLW  2F
04DFA:  MOVWF  xD8
04DFC:  MOVLB  0
04DFE:  CALL   0360
04E02:  BTFSC  1B.7
04E04:  BSF    FF2.7
04E06:  MOVF   01,W
04E08:  ADDLW  4C
04E0A:  MOVLB  6
04E0C:  MOVWF  x6A
04E0E:  MOVLW  01
04E10:  ADDWFC 02,W
04E12:  MOVWF  x6B
04E14:  MOVLW  01
04E16:  ADDWF  x6A,W
04E18:  MOVWF  01
04E1A:  MOVLW  00
04E1C:  ADDWFC x6B,W
04E1E:  MOVWF  03
04E20:  MOVF   01,W
04E22:  ADDLW  3E
04E24:  MOVWF  01
04E26:  MOVLW  01
04E28:  ADDWFC 03,F
04E2A:  MOVF   01,W
04E2C:  ADDLW  14
04E2E:  MOVWF  01
04E30:  MOVLW  00
04E32:  ADDWFC 03,F
04E34:  MOVFF  01,66C
04E38:  MOVFF  03,66D
04E3C:  MOVFF  03,66F
04E40:  MOVFF  01,66E
04E44:  MOVFF  667,670
04E48:  MOVLB  0
04E4A:  RCALL  4D5A
04E4C:  MOVF   01,F
04E4E:  BZ    4EF8
04E50:  CLRF   1B
04E52:  BTFSC  FF2.7
04E54:  BSF    1B.7
04E56:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
04E58:  MOVLB  6
04E5A:  CLRF   xD7
04E5C:  MOVFF  669,6D6
04E60:  CLRF   xD9
04E62:  MOVLW  2F
04E64:  MOVWF  xD8
04E66:  MOVLB  0
04E68:  CALL   0360
04E6C:  BTFSC  1B.7
04E6E:  BSF    FF2.7
04E70:  MOVF   01,W
04E72:  ADDLW  4C
04E74:  MOVLB  6
04E76:  MOVWF  x6A
04E78:  MOVLW  01
04E7A:  ADDWFC 02,W
04E7C:  MOVWF  x6B
04E7E:  MOVLW  01
04E80:  ADDWF  x6A,W
04E82:  MOVWF  01
04E84:  MOVLW  00
04E86:  ADDWFC x6B,W
04E88:  MOVWF  03
04E8A:  MOVF   01,W
04E8C:  ADDLW  3E
04E8E:  MOVWF  01
04E90:  MOVLW  01
04E92:  ADDWFC 03,F
04E94:  MOVF   01,W
04E96:  ADDLW  1C
04E98:  MOVWF  FE9
04E9A:  MOVLW  00
04E9C:  ADDWFC 03,W
04E9E:  MOVWF  FEA
04EA0:  MOVFF  668,FEF
04EA4:  CLRF   1B
04EA6:  BTFSC  FF2.7
04EA8:  BSF    1B.7
04EAA:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
04EAC:  CLRF   xD7
04EAE:  MOVFF  669,6D6
04EB2:  CLRF   xD9
04EB4:  MOVLW  2F
04EB6:  MOVWF  xD8
04EB8:  MOVLB  0
04EBA:  CALL   0360
04EBE:  BTFSC  1B.7
04EC0:  BSF    FF2.7
04EC2:  MOVF   01,W
04EC4:  ADDLW  4C
04EC6:  MOVLB  6
04EC8:  MOVWF  x6A
04ECA:  MOVLW  01
04ECC:  ADDWFC 02,W
04ECE:  MOVWF  x6B
04ED0:  MOVLW  01
04ED2:  ADDWF  x6A,W
04ED4:  MOVWF  01
04ED6:  MOVLW  00
04ED8:  ADDWFC x6B,W
04EDA:  MOVWF  03
04EDC:  MOVF   01,W
04EDE:  ADDLW  3E
04EE0:  MOVWF  01
04EE2:  MOVLW  01
04EE4:  ADDWFC 03,F
04EE6:  MOVF   01,W
04EE8:  ADDLW  1D
04EEA:  MOVWF  FE9
04EEC:  MOVLW  00
04EEE:  ADDWFC 03,W
04EF0:  MOVWF  FEA
04EF2:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
04EF4:  BRA    510E
04EF6:  MOVLB  0
04EF8:  CLRF   1B
04EFA:  BTFSC  FF2.7
04EFC:  BSF    1B.7
04EFE:  BCF    FF2.7
04F00:  MOVLB  6
04F02:  CLRF   xD7
04F04:  MOVFF  669,6D6
04F08:  CLRF   xD9
04F0A:  MOVLW  2F
04F0C:  MOVWF  xD8
04F0E:  MOVLB  0
04F10:  CALL   0360
04F14:  BTFSC  1B.7
04F16:  BSF    FF2.7
04F18:  MOVF   01,W
04F1A:  ADDLW  4C
04F1C:  MOVLB  6
04F1E:  MOVWF  x6A
04F20:  MOVLW  01
04F22:  ADDWFC 02,W
04F24:  MOVWF  x6B
04F26:  MOVLW  01
04F28:  ADDWF  x6A,W
04F2A:  MOVWF  01
04F2C:  MOVLW  00
04F2E:  ADDWFC x6B,W
04F30:  MOVWF  03
04F32:  MOVF   01,W
04F34:  ADDLW  3E
04F36:  MOVWF  01
04F38:  MOVLW  01
04F3A:  ADDWFC 03,F
04F3C:  MOVFF  01,66C
04F40:  MOVFF  03,66D
04F44:  MOVFF  03,66F
04F48:  MOVFF  01,66E
04F4C:  MOVFF  667,670
04F50:  MOVLB  0
04F52:  RCALL  4D5A
04F54:  MOVF   01,F
04F56:  BZ    5000
04F58:  CLRF   1B
04F5A:  BTFSC  FF2.7
04F5C:  BSF    1B.7
04F5E:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
04F60:  MOVLB  6
04F62:  CLRF   xD7
04F64:  MOVFF  669,6D6
04F68:  CLRF   xD9
04F6A:  MOVLW  2F
04F6C:  MOVWF  xD8
04F6E:  MOVLB  0
04F70:  CALL   0360
04F74:  BTFSC  1B.7
04F76:  BSF    FF2.7
04F78:  MOVF   01,W
04F7A:  ADDLW  4C
04F7C:  MOVLB  6
04F7E:  MOVWF  x6A
04F80:  MOVLW  01
04F82:  ADDWFC 02,W
04F84:  MOVWF  x6B
04F86:  MOVLW  01
04F88:  ADDWF  x6A,W
04F8A:  MOVWF  01
04F8C:  MOVLW  00
04F8E:  ADDWFC x6B,W
04F90:  MOVWF  03
04F92:  MOVF   01,W
04F94:  ADDLW  3E
04F96:  MOVWF  01
04F98:  MOVLW  01
04F9A:  ADDWFC 03,F
04F9C:  MOVF   01,W
04F9E:  ADDLW  08
04FA0:  MOVWF  FE9
04FA2:  MOVLW  00
04FA4:  ADDWFC 03,W
04FA6:  MOVWF  FEA
04FA8:  MOVFF  668,FEF
04FAC:  CLRF   1B
04FAE:  BTFSC  FF2.7
04FB0:  BSF    1B.7
04FB2:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
04FB4:  CLRF   xD7
04FB6:  MOVFF  669,6D6
04FBA:  CLRF   xD9
04FBC:  MOVLW  2F
04FBE:  MOVWF  xD8
04FC0:  MOVLB  0
04FC2:  CALL   0360
04FC6:  BTFSC  1B.7
04FC8:  BSF    FF2.7
04FCA:  MOVF   01,W
04FCC:  ADDLW  4C
04FCE:  MOVLB  6
04FD0:  MOVWF  x6A
04FD2:  MOVLW  01
04FD4:  ADDWFC 02,W
04FD6:  MOVWF  x6B
04FD8:  MOVLW  01
04FDA:  ADDWF  x6A,W
04FDC:  MOVWF  01
04FDE:  MOVLW  00
04FE0:  ADDWFC x6B,W
04FE2:  MOVWF  03
04FE4:  MOVF   01,W
04FE6:  ADDLW  3E
04FE8:  MOVWF  01
04FEA:  MOVLW  01
04FEC:  ADDWFC 03,F
04FEE:  MOVF   01,W
04FF0:  ADDLW  09
04FF2:  MOVWF  FE9
04FF4:  MOVLW  00
04FF6:  ADDWFC 03,W
04FF8:  MOVWF  FEA
04FFA:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
04FFC:  BRA    510E
04FFE:  MOVLB  0
05000:  CLRF   1B
05002:  BTFSC  FF2.7
05004:  BSF    1B.7
05006:  BCF    FF2.7
05008:  MOVLB  6
0500A:  CLRF   xD7
0500C:  MOVFF  669,6D6
05010:  CLRF   xD9
05012:  MOVLW  2F
05014:  MOVWF  xD8
05016:  MOVLB  0
05018:  CALL   0360
0501C:  BTFSC  1B.7
0501E:  BSF    FF2.7
05020:  MOVF   01,W
05022:  ADDLW  4C
05024:  MOVLB  6
05026:  MOVWF  x6A
05028:  MOVLW  01
0502A:  ADDWFC 02,W
0502C:  MOVWF  x6B
0502E:  MOVLW  01
05030:  ADDWF  x6A,W
05032:  MOVWF  01
05034:  MOVLW  00
05036:  ADDWFC x6B,W
05038:  MOVWF  03
0503A:  MOVF   01,W
0503C:  ADDLW  3E
0503E:  MOVWF  01
05040:  MOVLW  01
05042:  ADDWFC 03,F
05044:  MOVF   01,W
05046:  ADDLW  0A
05048:  MOVWF  01
0504A:  MOVLW  00
0504C:  ADDWFC 03,F
0504E:  MOVFF  01,66C
05052:  MOVFF  03,66D
05056:  MOVFF  03,66F
0505A:  MOVFF  01,66E
0505E:  MOVFF  667,670
05062:  MOVLB  0
05064:  RCALL  4D5A
05066:  MOVF   01,F
05068:  BZ    5110
0506A:  CLRF   1B
0506C:  BTFSC  FF2.7
0506E:  BSF    1B.7
05070:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
05072:  MOVLB  6
05074:  CLRF   xD7
05076:  MOVFF  669,6D6
0507A:  CLRF   xD9
0507C:  MOVLW  2F
0507E:  MOVWF  xD8
05080:  MOVLB  0
05082:  CALL   0360
05086:  BTFSC  1B.7
05088:  BSF    FF2.7
0508A:  MOVF   01,W
0508C:  ADDLW  4C
0508E:  MOVLB  6
05090:  MOVWF  x6A
05092:  MOVLW  01
05094:  ADDWFC 02,W
05096:  MOVWF  x6B
05098:  MOVLW  01
0509A:  ADDWF  x6A,W
0509C:  MOVWF  01
0509E:  MOVLW  00
050A0:  ADDWFC x6B,W
050A2:  MOVWF  03
050A4:  MOVF   01,W
050A6:  ADDLW  3E
050A8:  MOVWF  01
050AA:  MOVLW  01
050AC:  ADDWFC 03,F
050AE:  MOVF   01,W
050B0:  ADDLW  12
050B2:  MOVWF  FE9
050B4:  MOVLW  00
050B6:  ADDWFC 03,W
050B8:  MOVWF  FEA
050BA:  MOVFF  668,FEF
050BE:  CLRF   1B
050C0:  BTFSC  FF2.7
050C2:  BSF    1B.7
050C4:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
050C6:  CLRF   xD7
050C8:  MOVFF  669,6D6
050CC:  CLRF   xD9
050CE:  MOVLW  2F
050D0:  MOVWF  xD8
050D2:  MOVLB  0
050D4:  CALL   0360
050D8:  BTFSC  1B.7
050DA:  BSF    FF2.7
050DC:  MOVF   01,W
050DE:  ADDLW  4C
050E0:  MOVLB  6
050E2:  MOVWF  x6A
050E4:  MOVLW  01
050E6:  ADDWFC 02,W
050E8:  MOVWF  x6B
050EA:  MOVLW  01
050EC:  ADDWF  x6A,W
050EE:  MOVWF  01
050F0:  MOVLW  00
050F2:  ADDWFC x6B,W
050F4:  MOVWF  03
050F6:  MOVF   01,W
050F8:  ADDLW  3E
050FA:  MOVWF  01
050FC:  MOVLW  01
050FE:  ADDWFC 03,F
05100:  MOVF   01,W
05102:  ADDLW  13
05104:  MOVWF  FE9
05106:  MOVLW  00
05108:  ADDWFC 03,W
0510A:  MOVWF  FEA
0510C:  BSF    FEF.0
0510E:  MOVLB  0
....................          } 
....................  
....................          break; 
05110:  BRA    5770
....................          case _on_off: 
05112:  CLRF   1B
05114:  BTFSC  FF2.7
05116:  BSF    1B.7
05118:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
0511A:  MOVLB  6
0511C:  CLRF   xD7
0511E:  MOVFF  669,6D6
05122:  CLRF   xD9
05124:  MOVLW  2F
05126:  MOVWF  xD8
05128:  MOVLB  0
0512A:  CALL   0360
0512E:  BTFSC  1B.7
05130:  BSF    FF2.7
05132:  MOVF   01,W
05134:  ADDLW  4C
05136:  MOVLB  6
05138:  MOVWF  x6A
0513A:  MOVLW  01
0513C:  ADDWFC 02,W
0513E:  MOVWF  x6B
05140:  MOVLW  01
05142:  ADDWF  x6A,W
05144:  MOVWF  01
05146:  MOVLW  00
05148:  ADDWFC x6B,W
0514A:  MOVWF  03
0514C:  MOVF   01,W
0514E:  ADDLW  3E
05150:  MOVWF  01
05152:  MOVLW  01
05154:  ADDWFC 03,F
05156:  MOVFF  01,66C
0515A:  MOVFF  03,66D
0515E:  MOVFF  03,66F
05162:  MOVFF  01,66E
05166:  MOVFF  667,670
0516A:  MOVLB  0
0516C:  RCALL  4D5A
0516E:  MOVF   01,F
05170:  BZ    521A
05172:  CLRF   1B
05174:  BTFSC  FF2.7
05176:  BSF    1B.7
05178:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
0517A:  MOVLB  6
0517C:  CLRF   xD7
0517E:  MOVFF  669,6D6
05182:  CLRF   xD9
05184:  MOVLW  2F
05186:  MOVWF  xD8
05188:  MOVLB  0
0518A:  CALL   0360
0518E:  BTFSC  1B.7
05190:  BSF    FF2.7
05192:  MOVF   01,W
05194:  ADDLW  4C
05196:  MOVLB  6
05198:  MOVWF  x6A
0519A:  MOVLW  01
0519C:  ADDWFC 02,W
0519E:  MOVWF  x6B
051A0:  MOVLW  01
051A2:  ADDWF  x6A,W
051A4:  MOVWF  01
051A6:  MOVLW  00
051A8:  ADDWFC x6B,W
051AA:  MOVWF  03
051AC:  MOVF   01,W
051AE:  ADDLW  3E
051B0:  MOVWF  01
051B2:  MOVLW  01
051B4:  ADDWFC 03,F
051B6:  MOVF   01,W
051B8:  ADDLW  08
051BA:  MOVWF  FE9
051BC:  MOVLW  00
051BE:  ADDWFC 03,W
051C0:  MOVWF  FEA
051C2:  MOVFF  668,FEF
051C6:  CLRF   1B
051C8:  BTFSC  FF2.7
051CA:  BSF    1B.7
051CC:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
051CE:  CLRF   xD7
051D0:  MOVFF  669,6D6
051D4:  CLRF   xD9
051D6:  MOVLW  2F
051D8:  MOVWF  xD8
051DA:  MOVLB  0
051DC:  CALL   0360
051E0:  BTFSC  1B.7
051E2:  BSF    FF2.7
051E4:  MOVF   01,W
051E6:  ADDLW  4C
051E8:  MOVLB  6
051EA:  MOVWF  x6A
051EC:  MOVLW  01
051EE:  ADDWFC 02,W
051F0:  MOVWF  x6B
051F2:  MOVLW  01
051F4:  ADDWF  x6A,W
051F6:  MOVWF  01
051F8:  MOVLW  00
051FA:  ADDWFC x6B,W
051FC:  MOVWF  03
051FE:  MOVF   01,W
05200:  ADDLW  3E
05202:  MOVWF  01
05204:  MOVLW  01
05206:  ADDWFC 03,F
05208:  MOVF   01,W
0520A:  ADDLW  09
0520C:  MOVWF  FE9
0520E:  MOVLW  00
05210:  ADDWFC 03,W
05212:  MOVWF  FEA
05214:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
05216:  BRA    5328
05218:  MOVLB  0
0521A:  CLRF   1B
0521C:  BTFSC  FF2.7
0521E:  BSF    1B.7
05220:  BCF    FF2.7
05222:  MOVLB  6
05224:  CLRF   xD7
05226:  MOVFF  669,6D6
0522A:  CLRF   xD9
0522C:  MOVLW  2F
0522E:  MOVWF  xD8
05230:  MOVLB  0
05232:  CALL   0360
05236:  BTFSC  1B.7
05238:  BSF    FF2.7
0523A:  MOVF   01,W
0523C:  ADDLW  4C
0523E:  MOVLB  6
05240:  MOVWF  x6A
05242:  MOVLW  01
05244:  ADDWFC 02,W
05246:  MOVWF  x6B
05248:  MOVLW  01
0524A:  ADDWF  x6A,W
0524C:  MOVWF  01
0524E:  MOVLW  00
05250:  ADDWFC x6B,W
05252:  MOVWF  03
05254:  MOVF   01,W
05256:  ADDLW  3E
05258:  MOVWF  01
0525A:  MOVLW  01
0525C:  ADDWFC 03,F
0525E:  MOVF   01,W
05260:  ADDLW  0A
05262:  MOVWF  01
05264:  MOVLW  00
05266:  ADDWFC 03,F
05268:  MOVFF  01,66C
0526C:  MOVFF  03,66D
05270:  MOVFF  03,66F
05274:  MOVFF  01,66E
05278:  MOVFF  667,670
0527C:  MOVLB  0
0527E:  RCALL  4D5A
05280:  MOVF   01,F
05282:  BZ    532A
05284:  CLRF   1B
05286:  BTFSC  FF2.7
05288:  BSF    1B.7
0528A:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
0528C:  MOVLB  6
0528E:  CLRF   xD7
05290:  MOVFF  669,6D6
05294:  CLRF   xD9
05296:  MOVLW  2F
05298:  MOVWF  xD8
0529A:  MOVLB  0
0529C:  CALL   0360
052A0:  BTFSC  1B.7
052A2:  BSF    FF2.7
052A4:  MOVF   01,W
052A6:  ADDLW  4C
052A8:  MOVLB  6
052AA:  MOVWF  x6A
052AC:  MOVLW  01
052AE:  ADDWFC 02,W
052B0:  MOVWF  x6B
052B2:  MOVLW  01
052B4:  ADDWF  x6A,W
052B6:  MOVWF  01
052B8:  MOVLW  00
052BA:  ADDWFC x6B,W
052BC:  MOVWF  03
052BE:  MOVF   01,W
052C0:  ADDLW  3E
052C2:  MOVWF  01
052C4:  MOVLW  01
052C6:  ADDWFC 03,F
052C8:  MOVF   01,W
052CA:  ADDLW  12
052CC:  MOVWF  FE9
052CE:  MOVLW  00
052D0:  ADDWFC 03,W
052D2:  MOVWF  FEA
052D4:  MOVFF  668,FEF
052D8:  CLRF   1B
052DA:  BTFSC  FF2.7
052DC:  BSF    1B.7
052DE:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
052E0:  CLRF   xD7
052E2:  MOVFF  669,6D6
052E6:  CLRF   xD9
052E8:  MOVLW  2F
052EA:  MOVWF  xD8
052EC:  MOVLB  0
052EE:  CALL   0360
052F2:  BTFSC  1B.7
052F4:  BSF    FF2.7
052F6:  MOVF   01,W
052F8:  ADDLW  4C
052FA:  MOVLB  6
052FC:  MOVWF  x6A
052FE:  MOVLW  01
05300:  ADDWFC 02,W
05302:  MOVWF  x6B
05304:  MOVLW  01
05306:  ADDWF  x6A,W
05308:  MOVWF  01
0530A:  MOVLW  00
0530C:  ADDWFC x6B,W
0530E:  MOVWF  03
05310:  MOVF   01,W
05312:  ADDLW  3E
05314:  MOVWF  01
05316:  MOVLW  01
05318:  ADDWFC 03,F
0531A:  MOVF   01,W
0531C:  ADDLW  13
0531E:  MOVWF  FE9
05320:  MOVLW  00
05322:  ADDWFC 03,W
05324:  MOVWF  FEA
05326:  BSF    FEF.0
05328:  MOVLB  0
....................          } 
....................  
....................          break; 
0532A:  BRA    5770
....................          case shutter: 
0532C:  CLRF   1B
0532E:  BTFSC  FF2.7
05330:  BSF    1B.7
05332:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
05334:  MOVLB  6
05336:  CLRF   xD7
05338:  MOVFF  669,6D6
0533C:  CLRF   xD9
0533E:  MOVLW  2F
05340:  MOVWF  xD8
05342:  MOVLB  0
05344:  CALL   0360
05348:  BTFSC  1B.7
0534A:  BSF    FF2.7
0534C:  MOVF   01,W
0534E:  ADDLW  4C
05350:  MOVLB  6
05352:  MOVWF  x6A
05354:  MOVLW  01
05356:  ADDWFC 02,W
05358:  MOVWF  x6B
0535A:  MOVLW  01
0535C:  ADDWF  x6A,W
0535E:  MOVWF  01
05360:  MOVLW  00
05362:  ADDWFC x6B,W
05364:  MOVWF  03
05366:  MOVF   01,W
05368:  ADDLW  3E
0536A:  MOVWF  01
0536C:  MOVLW  01
0536E:  ADDWFC 03,F
05370:  MOVFF  01,66C
05374:  MOVFF  03,66D
05378:  MOVFF  03,66F
0537C:  MOVFF  01,66E
05380:  MOVFF  667,670
05384:  MOVLB  0
05386:  RCALL  4D5A
05388:  MOVF   01,F
0538A:  BZ    5434
0538C:  CLRF   1B
0538E:  BTFSC  FF2.7
05390:  BSF    1B.7
05392:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
05394:  MOVLB  6
05396:  CLRF   xD7
05398:  MOVFF  669,6D6
0539C:  CLRF   xD9
0539E:  MOVLW  2F
053A0:  MOVWF  xD8
053A2:  MOVLB  0
053A4:  CALL   0360
053A8:  BTFSC  1B.7
053AA:  BSF    FF2.7
053AC:  MOVF   01,W
053AE:  ADDLW  4C
053B0:  MOVLB  6
053B2:  MOVWF  x6A
053B4:  MOVLW  01
053B6:  ADDWFC 02,W
053B8:  MOVWF  x6B
053BA:  MOVLW  01
053BC:  ADDWF  x6A,W
053BE:  MOVWF  01
053C0:  MOVLW  00
053C2:  ADDWFC x6B,W
053C4:  MOVWF  03
053C6:  MOVF   01,W
053C8:  ADDLW  3E
053CA:  MOVWF  01
053CC:  MOVLW  01
053CE:  ADDWFC 03,F
053D0:  MOVF   01,W
053D2:  ADDLW  08
053D4:  MOVWF  FE9
053D6:  MOVLW  00
053D8:  ADDWFC 03,W
053DA:  MOVWF  FEA
053DC:  MOVFF  668,FEF
053E0:  CLRF   1B
053E2:  BTFSC  FF2.7
053E4:  BSF    1B.7
053E6:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
053E8:  CLRF   xD7
053EA:  MOVFF  669,6D6
053EE:  CLRF   xD9
053F0:  MOVLW  2F
053F2:  MOVWF  xD8
053F4:  MOVLB  0
053F6:  CALL   0360
053FA:  BTFSC  1B.7
053FC:  BSF    FF2.7
053FE:  MOVF   01,W
05400:  ADDLW  4C
05402:  MOVLB  6
05404:  MOVWF  x6A
05406:  MOVLW  01
05408:  ADDWFC 02,W
0540A:  MOVWF  x6B
0540C:  MOVLW  01
0540E:  ADDWF  x6A,W
05410:  MOVWF  01
05412:  MOVLW  00
05414:  ADDWFC x6B,W
05416:  MOVWF  03
05418:  MOVF   01,W
0541A:  ADDLW  3E
0541C:  MOVWF  01
0541E:  MOVLW  01
05420:  ADDWFC 03,F
05422:  MOVF   01,W
05424:  ADDLW  09
05426:  MOVWF  FE9
05428:  MOVLW  00
0542A:  ADDWFC 03,W
0542C:  MOVWF  FEA
0542E:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
05430:  BRA    576A
05432:  MOVLB  0
05434:  CLRF   1B
05436:  BTFSC  FF2.7
05438:  BSF    1B.7
0543A:  BCF    FF2.7
0543C:  MOVLB  6
0543E:  CLRF   xD7
05440:  MOVFF  669,6D6
05444:  CLRF   xD9
05446:  MOVLW  2F
05448:  MOVWF  xD8
0544A:  MOVLB  0
0544C:  CALL   0360
05450:  BTFSC  1B.7
05452:  BSF    FF2.7
05454:  MOVF   01,W
05456:  ADDLW  4C
05458:  MOVLB  6
0545A:  MOVWF  x6A
0545C:  MOVLW  01
0545E:  ADDWFC 02,W
05460:  MOVWF  x6B
05462:  MOVLW  01
05464:  ADDWF  x6A,W
05466:  MOVWF  01
05468:  MOVLW  00
0546A:  ADDWFC x6B,W
0546C:  MOVWF  03
0546E:  MOVF   01,W
05470:  ADDLW  3E
05472:  MOVWF  01
05474:  MOVLW  01
05476:  ADDWFC 03,F
05478:  MOVF   01,W
0547A:  ADDLW  0A
0547C:  MOVWF  01
0547E:  MOVLW  00
05480:  ADDWFC 03,F
05482:  MOVFF  01,66C
05486:  MOVFF  03,66D
0548A:  MOVFF  03,66F
0548E:  MOVFF  01,66E
05492:  MOVFF  667,670
05496:  MOVLB  0
05498:  RCALL  4D5A
0549A:  MOVF   01,F
0549C:  BZ    5546
0549E:  CLRF   1B
054A0:  BTFSC  FF2.7
054A2:  BSF    1B.7
054A4:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
054A6:  MOVLB  6
054A8:  CLRF   xD7
054AA:  MOVFF  669,6D6
054AE:  CLRF   xD9
054B0:  MOVLW  2F
054B2:  MOVWF  xD8
054B4:  MOVLB  0
054B6:  CALL   0360
054BA:  BTFSC  1B.7
054BC:  BSF    FF2.7
054BE:  MOVF   01,W
054C0:  ADDLW  4C
054C2:  MOVLB  6
054C4:  MOVWF  x6A
054C6:  MOVLW  01
054C8:  ADDWFC 02,W
054CA:  MOVWF  x6B
054CC:  MOVLW  01
054CE:  ADDWF  x6A,W
054D0:  MOVWF  01
054D2:  MOVLW  00
054D4:  ADDWFC x6B,W
054D6:  MOVWF  03
054D8:  MOVF   01,W
054DA:  ADDLW  3E
054DC:  MOVWF  01
054DE:  MOVLW  01
054E0:  ADDWFC 03,F
054E2:  MOVF   01,W
054E4:  ADDLW  12
054E6:  MOVWF  FE9
054E8:  MOVLW  00
054EA:  ADDWFC 03,W
054EC:  MOVWF  FEA
054EE:  MOVFF  668,FEF
054F2:  CLRF   1B
054F4:  BTFSC  FF2.7
054F6:  BSF    1B.7
054F8:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
054FA:  CLRF   xD7
054FC:  MOVFF  669,6D6
05500:  CLRF   xD9
05502:  MOVLW  2F
05504:  MOVWF  xD8
05506:  MOVLB  0
05508:  CALL   0360
0550C:  BTFSC  1B.7
0550E:  BSF    FF2.7
05510:  MOVF   01,W
05512:  ADDLW  4C
05514:  MOVLB  6
05516:  MOVWF  x6A
05518:  MOVLW  01
0551A:  ADDWFC 02,W
0551C:  MOVWF  x6B
0551E:  MOVLW  01
05520:  ADDWF  x6A,W
05522:  MOVWF  01
05524:  MOVLW  00
05526:  ADDWFC x6B,W
05528:  MOVWF  03
0552A:  MOVF   01,W
0552C:  ADDLW  3E
0552E:  MOVWF  01
05530:  MOVLW  01
05532:  ADDWFC 03,F
05534:  MOVF   01,W
05536:  ADDLW  13
05538:  MOVWF  FE9
0553A:  MOVLW  00
0553C:  ADDWFC 03,W
0553E:  MOVWF  FEA
05540:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
05542:  BRA    576A
05544:  MOVLB  0
05546:  CLRF   1B
05548:  BTFSC  FF2.7
0554A:  BSF    1B.7
0554C:  BCF    FF2.7
0554E:  MOVLB  6
05550:  CLRF   xD7
05552:  MOVFF  669,6D6
05556:  CLRF   xD9
05558:  MOVLW  2F
0555A:  MOVWF  xD8
0555C:  MOVLB  0
0555E:  CALL   0360
05562:  BTFSC  1B.7
05564:  BSF    FF2.7
05566:  MOVF   01,W
05568:  ADDLW  4C
0556A:  MOVLB  6
0556C:  MOVWF  x6A
0556E:  MOVLW  01
05570:  ADDWFC 02,W
05572:  MOVWF  x6B
05574:  MOVLW  01
05576:  ADDWF  x6A,W
05578:  MOVWF  01
0557A:  MOVLW  00
0557C:  ADDWFC x6B,W
0557E:  MOVWF  03
05580:  MOVF   01,W
05582:  ADDLW  3E
05584:  MOVWF  01
05586:  MOVLW  01
05588:  ADDWFC 03,F
0558A:  MOVF   01,W
0558C:  ADDLW  14
0558E:  MOVWF  01
05590:  MOVLW  00
05592:  ADDWFC 03,F
05594:  MOVFF  01,66C
05598:  MOVFF  03,66D
0559C:  MOVFF  03,66F
055A0:  MOVFF  01,66E
055A4:  MOVFF  667,670
055A8:  MOVLB  0
055AA:  CALL   4D5A
055AE:  MOVF   01,F
055B0:  BZ    565A
055B2:  CLRF   1B
055B4:  BTFSC  FF2.7
055B6:  BSF    1B.7
055B8:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
055BA:  MOVLB  6
055BC:  CLRF   xD7
055BE:  MOVFF  669,6D6
055C2:  CLRF   xD9
055C4:  MOVLW  2F
055C6:  MOVWF  xD8
055C8:  MOVLB  0
055CA:  CALL   0360
055CE:  BTFSC  1B.7
055D0:  BSF    FF2.7
055D2:  MOVF   01,W
055D4:  ADDLW  4C
055D6:  MOVLB  6
055D8:  MOVWF  x6A
055DA:  MOVLW  01
055DC:  ADDWFC 02,W
055DE:  MOVWF  x6B
055E0:  MOVLW  01
055E2:  ADDWF  x6A,W
055E4:  MOVWF  01
055E6:  MOVLW  00
055E8:  ADDWFC x6B,W
055EA:  MOVWF  03
055EC:  MOVF   01,W
055EE:  ADDLW  3E
055F0:  MOVWF  01
055F2:  MOVLW  01
055F4:  ADDWFC 03,F
055F6:  MOVF   01,W
055F8:  ADDLW  1C
055FA:  MOVWF  FE9
055FC:  MOVLW  00
055FE:  ADDWFC 03,W
05600:  MOVWF  FEA
05602:  MOVFF  668,FEF
05606:  CLRF   1B
05608:  BTFSC  FF2.7
0560A:  BSF    1B.7
0560C:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
0560E:  CLRF   xD7
05610:  MOVFF  669,6D6
05614:  CLRF   xD9
05616:  MOVLW  2F
05618:  MOVWF  xD8
0561A:  MOVLB  0
0561C:  CALL   0360
05620:  BTFSC  1B.7
05622:  BSF    FF2.7
05624:  MOVF   01,W
05626:  ADDLW  4C
05628:  MOVLB  6
0562A:  MOVWF  x6A
0562C:  MOVLW  01
0562E:  ADDWFC 02,W
05630:  MOVWF  x6B
05632:  MOVLW  01
05634:  ADDWF  x6A,W
05636:  MOVWF  01
05638:  MOVLW  00
0563A:  ADDWFC x6B,W
0563C:  MOVWF  03
0563E:  MOVF   01,W
05640:  ADDLW  3E
05642:  MOVWF  01
05644:  MOVLW  01
05646:  ADDWFC 03,F
05648:  MOVF   01,W
0564A:  ADDLW  1D
0564C:  MOVWF  FE9
0564E:  MOVLW  00
05650:  ADDWFC 03,W
05652:  MOVWF  FEA
05654:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
05656:  BRA    576A
05658:  MOVLB  0
0565A:  CLRF   1B
0565C:  BTFSC  FF2.7
0565E:  BSF    1B.7
05660:  BCF    FF2.7
05662:  MOVLB  6
05664:  CLRF   xD7
05666:  MOVFF  669,6D6
0566A:  CLRF   xD9
0566C:  MOVLW  2F
0566E:  MOVWF  xD8
05670:  MOVLB  0
05672:  CALL   0360
05676:  BTFSC  1B.7
05678:  BSF    FF2.7
0567A:  MOVF   01,W
0567C:  ADDLW  4C
0567E:  MOVLB  6
05680:  MOVWF  x6A
05682:  MOVLW  01
05684:  ADDWFC 02,W
05686:  MOVWF  x6B
05688:  MOVLW  01
0568A:  ADDWF  x6A,W
0568C:  MOVWF  01
0568E:  MOVLW  00
05690:  ADDWFC x6B,W
05692:  MOVWF  03
05694:  MOVF   01,W
05696:  ADDLW  3E
05698:  MOVWF  01
0569A:  MOVLW  01
0569C:  ADDWFC 03,F
0569E:  MOVF   01,W
056A0:  ADDLW  1E
056A2:  MOVWF  01
056A4:  MOVLW  00
056A6:  ADDWFC 03,F
056A8:  MOVFF  01,66C
056AC:  MOVFF  03,66D
056B0:  MOVFF  03,66F
056B4:  MOVFF  01,66E
056B8:  MOVFF  667,670
056BC:  MOVLB  0
056BE:  CALL   4D5A
056C2:  MOVF   01,F
056C4:  BZ    576C
056C6:  CLRF   1B
056C8:  BTFSC  FF2.7
056CA:  BSF    1B.7
056CC:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
056CE:  MOVLB  6
056D0:  CLRF   xD7
056D2:  MOVFF  669,6D6
056D6:  CLRF   xD9
056D8:  MOVLW  2F
056DA:  MOVWF  xD8
056DC:  MOVLB  0
056DE:  CALL   0360
056E2:  BTFSC  1B.7
056E4:  BSF    FF2.7
056E6:  MOVF   01,W
056E8:  ADDLW  4C
056EA:  MOVLB  6
056EC:  MOVWF  x6A
056EE:  MOVLW  01
056F0:  ADDWFC 02,W
056F2:  MOVWF  x6B
056F4:  MOVLW  01
056F6:  ADDWF  x6A,W
056F8:  MOVWF  01
056FA:  MOVLW  00
056FC:  ADDWFC x6B,W
056FE:  MOVWF  03
05700:  MOVF   01,W
05702:  ADDLW  3E
05704:  MOVWF  01
05706:  MOVLW  01
05708:  ADDWFC 03,F
0570A:  MOVF   01,W
0570C:  ADDLW  26
0570E:  MOVWF  FE9
05710:  MOVLW  00
05712:  ADDWFC 03,W
05714:  MOVWF  FEA
05716:  MOVFF  668,FEF
0571A:  CLRF   1B
0571C:  BTFSC  FF2.7
0571E:  BSF    1B.7
05720:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
05722:  CLRF   xD7
05724:  MOVFF  669,6D6
05728:  CLRF   xD9
0572A:  MOVLW  2F
0572C:  MOVWF  xD8
0572E:  MOVLB  0
05730:  CALL   0360
05734:  BTFSC  1B.7
05736:  BSF    FF2.7
05738:  MOVF   01,W
0573A:  ADDLW  4C
0573C:  MOVLB  6
0573E:  MOVWF  x6A
05740:  MOVLW  01
05742:  ADDWFC 02,W
05744:  MOVWF  x6B
05746:  MOVLW  01
05748:  ADDWF  x6A,W
0574A:  MOVWF  01
0574C:  MOVLW  00
0574E:  ADDWFC x6B,W
05750:  MOVWF  03
05752:  MOVF   01,W
05754:  ADDLW  3E
05756:  MOVWF  01
05758:  MOVLW  01
0575A:  ADDWFC 03,F
0575C:  MOVF   01,W
0575E:  ADDLW  27
05760:  MOVWF  FE9
05762:  MOVLW  00
05764:  ADDWFC 03,W
05766:  MOVWF  FEA
05768:  BSF    FEF.0
0576A:  MOVLB  0
....................          } 
....................  
....................          break; 
0576C:  BRA    5770
....................          default: 
....................          break; 
0576E:  BRA    5770
....................       } 
....................    } 
05770:  MOVLB  6
05772:  INCF   x69,F
05774:  GOTO   4D8E
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
05778:  CLRF   x69
0577A:  MOVLB  1
0577C:  MOVF   x3E,W
0577E:  MOVLB  6
05780:  SUBWF  x69,W
05782:  BTFSC  FD8.0
05784:  BRA    59F4
05786:  CLRF   1B
05788:  BTFSC  FF2.7
0578A:  BSF    1B.7
0578C:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
0578E:  CLRF   xD7
05790:  MOVFF  669,6D6
05794:  CLRF   xD9
05796:  MOVLW  21
05798:  MOVWF  xD8
0579A:  MOVLB  0
0579C:  CALL   0360
057A0:  BTFSC  1B.7
057A2:  BSF    FF2.7
057A4:  MOVFF  02,03
057A8:  MOVF   01,W
057AA:  ADDLW  40
057AC:  MOVWF  01
057AE:  MOVLW  01
057B0:  ADDWFC 03,F
057B2:  MOVFF  01,FE9
057B6:  MOVFF  03,FEA
057BA:  MOVF   FEF,W
057BC:  XORLW  03
057BE:  BZ    57C2
057C0:  BRA    59EE
....................          case timer: 
057C2:  CLRF   1B
057C4:  BTFSC  FF2.7
057C6:  BSF    1B.7
057C8:  BCF    FF2.7
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
057CA:  MOVLB  6
057CC:  CLRF   xD7
057CE:  MOVFF  669,6D6
057D2:  CLRF   xD9
057D4:  MOVLW  21
057D6:  MOVWF  xD8
057D8:  MOVLB  0
057DA:  CALL   0360
057DE:  BTFSC  1B.7
057E0:  BSF    FF2.7
057E2:  MOVF   01,W
057E4:  ADDLW  02
057E6:  MOVLB  6
057E8:  MOVWF  x6A
057EA:  MOVLW  00
057EC:  ADDWFC 02,W
057EE:  MOVWF  x6B
057F0:  MOVLW  01
057F2:  ADDWF  x6A,W
057F4:  MOVWF  01
057F6:  MOVLW  00
057F8:  ADDWFC x6B,W
057FA:  MOVWF  03
057FC:  MOVF   01,W
057FE:  ADDLW  3E
05800:  MOVWF  01
05802:  MOVLW  01
05804:  ADDWFC 03,F
05806:  MOVF   01,W
05808:  ADDLW  09
0580A:  MOVWF  01
0580C:  MOVLW  00
0580E:  ADDWFC 03,F
05810:  MOVFF  01,66C
05814:  MOVFF  03,66D
05818:  MOVFF  03,66F
0581C:  MOVFF  01,66E
05820:  MOVFF  667,670
05824:  MOVLB  0
05826:  CALL   4D5A
0582A:  MOVF   01,F
0582C:  BZ    58D8
0582E:  CLRF   1B
05830:  BTFSC  FF2.7
05832:  BSF    1B.7
05834:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
05836:  MOVLB  6
05838:  CLRF   xD7
0583A:  MOVFF  669,6D6
0583E:  CLRF   xD9
05840:  MOVLW  21
05842:  MOVWF  xD8
05844:  MOVLB  0
05846:  CALL   0360
0584A:  BTFSC  1B.7
0584C:  BSF    FF2.7
0584E:  MOVF   01,W
05850:  ADDLW  02
05852:  MOVLB  6
05854:  MOVWF  x6A
05856:  MOVLW  00
05858:  ADDWFC 02,W
0585A:  MOVWF  x6B
0585C:  MOVLW  01
0585E:  ADDWF  x6A,W
05860:  MOVWF  01
05862:  MOVLW  00
05864:  ADDWFC x6B,W
05866:  MOVWF  03
05868:  MOVF   01,W
0586A:  ADDLW  3E
0586C:  MOVWF  01
0586E:  MOVLW  01
05870:  ADDWFC 03,F
05872:  MOVF   01,W
05874:  ADDLW  1D
05876:  MOVWF  FE9
05878:  MOVLW  00
0587A:  ADDWFC 03,W
0587C:  MOVWF  FEA
0587E:  CLRF   FEC
05880:  MOVF   FED,F
05882:  CLRF   FEF
05884:  CLRF   1B
05886:  BTFSC  FF2.7
05888:  BSF    1B.7
0588A:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
0588C:  CLRF   xD7
0588E:  MOVFF  669,6D6
05892:  CLRF   xD9
05894:  MOVLW  21
05896:  MOVWF  xD8
05898:  MOVLB  0
0589A:  CALL   0360
0589E:  BTFSC  1B.7
058A0:  BSF    FF2.7
058A2:  MOVF   01,W
058A4:  ADDLW  02
058A6:  MOVLB  6
058A8:  MOVWF  x6A
058AA:  MOVLW  00
058AC:  ADDWFC 02,W
058AE:  MOVWF  x6B
058B0:  MOVLW  01
058B2:  ADDWF  x6A,W
058B4:  MOVWF  01
058B6:  MOVLW  00
058B8:  ADDWFC x6B,W
058BA:  MOVWF  03
058BC:  MOVF   01,W
058BE:  ADDLW  3E
058C0:  MOVWF  01
058C2:  MOVLW  01
058C4:  ADDWFC 03,F
058C6:  MOVF   01,W
058C8:  ADDLW  1F
058CA:  MOVWF  FE9
058CC:  MOVLW  00
058CE:  ADDWFC 03,W
058D0:  MOVWF  FEA
058D2:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
058D4:  BRA    59EA
058D6:  MOVLB  0
058D8:  CLRF   1B
058DA:  BTFSC  FF2.7
058DC:  BSF    1B.7
058DE:  BCF    FF2.7
058E0:  MOVLB  6
058E2:  CLRF   xD7
058E4:  MOVFF  669,6D6
058E8:  CLRF   xD9
058EA:  MOVLW  21
058EC:  MOVWF  xD8
058EE:  MOVLB  0
058F0:  CALL   0360
058F4:  BTFSC  1B.7
058F6:  BSF    FF2.7
058F8:  MOVF   01,W
058FA:  ADDLW  02
058FC:  MOVLB  6
058FE:  MOVWF  x6A
05900:  MOVLW  00
05902:  ADDWFC 02,W
05904:  MOVWF  x6B
05906:  MOVLW  01
05908:  ADDWF  x6A,W
0590A:  MOVWF  01
0590C:  MOVLW  00
0590E:  ADDWFC x6B,W
05910:  MOVWF  03
05912:  MOVF   01,W
05914:  ADDLW  3E
05916:  MOVWF  01
05918:  MOVLW  01
0591A:  ADDWFC 03,F
0591C:  MOVF   01,W
0591E:  ADDLW  13
05920:  MOVWF  01
05922:  MOVLW  00
05924:  ADDWFC 03,F
05926:  MOVFF  01,66C
0592A:  MOVFF  03,66D
0592E:  MOVFF  03,66F
05932:  MOVFF  01,66E
05936:  MOVFF  667,670
0593A:  MOVLB  0
0593C:  CALL   4D5A
05940:  MOVF   01,F
05942:  BZ    59EC
05944:  CLRF   1B
05946:  BTFSC  FF2.7
05948:  BSF    1B.7
0594A:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
0594C:  MOVLB  6
0594E:  CLRF   xD7
05950:  MOVFF  669,6D6
05954:  CLRF   xD9
05956:  MOVLW  21
05958:  MOVWF  xD8
0595A:  MOVLB  0
0595C:  CALL   0360
05960:  BTFSC  1B.7
05962:  BSF    FF2.7
05964:  MOVF   01,W
05966:  ADDLW  02
05968:  MOVLB  6
0596A:  MOVWF  x6A
0596C:  MOVLW  00
0596E:  ADDWFC 02,W
05970:  MOVWF  x6B
05972:  MOVLW  01
05974:  ADDWF  x6A,W
05976:  MOVWF  01
05978:  MOVLW  00
0597A:  ADDWFC x6B,W
0597C:  MOVWF  03
0597E:  MOVF   01,W
05980:  ADDLW  3E
05982:  MOVWF  01
05984:  MOVLW  01
05986:  ADDWFC 03,F
05988:  MOVF   01,W
0598A:  ADDLW  1D
0598C:  MOVWF  FE9
0598E:  MOVLW  00
05990:  ADDWFC 03,W
05992:  MOVWF  FEA
05994:  CLRF   FEC
05996:  MOVF   FED,F
05998:  CLRF   FEF
0599A:  CLRF   1B
0599C:  BTFSC  FF2.7
0599E:  BSF    1B.7
059A0:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
059A2:  CLRF   xD7
059A4:  MOVFF  669,6D6
059A8:  CLRF   xD9
059AA:  MOVLW  21
059AC:  MOVWF  xD8
059AE:  MOVLB  0
059B0:  CALL   0360
059B4:  BTFSC  1B.7
059B6:  BSF    FF2.7
059B8:  MOVF   01,W
059BA:  ADDLW  02
059BC:  MOVLB  6
059BE:  MOVWF  x6A
059C0:  MOVLW  00
059C2:  ADDWFC 02,W
059C4:  MOVWF  x6B
059C6:  MOVLW  01
059C8:  ADDWF  x6A,W
059CA:  MOVWF  01
059CC:  MOVLW  00
059CE:  ADDWFC x6B,W
059D0:  MOVWF  03
059D2:  MOVF   01,W
059D4:  ADDLW  3E
059D6:  MOVWF  01
059D8:  MOVLW  01
059DA:  ADDWFC 03,F
059DC:  MOVF   01,W
059DE:  ADDLW  1F
059E0:  MOVWF  FE9
059E2:  MOVLW  00
059E4:  ADDWFC 03,W
059E6:  MOVWF  FEA
059E8:  BCF    FEF.0
059EA:  MOVLB  0
....................          } 
....................          break; 
059EC:  BRA    59EE
....................       } 
....................    } 
059EE:  MOVLB  6
059F0:  INCF   x69,F
059F2:  BRA    577A
....................           
.................... } 
059F4:  MOVLB  0
059F6:  GOTO   5A06 (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
059FA:  MOVFF  665,667
059FE:  MOVFF  666,668
05A02:  GOTO   4D8A
....................    //TODO CAN Sending of values 
.................... } 
05A06:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
05A08:  MOVLB  6
05A0A:  CLRF   x5E
05A0C:  MOVLB  1
05A0E:  MOVF   x3E,W
05A10:  MOVLB  6
05A12:  SUBWF  x5E,W
05A14:  BTFSC  FD8.0
05A16:  GOTO   694A
05A1A:  CLRF   1B
05A1C:  BTFSC  FF2.7
05A1E:  BSF    1B.7
05A20:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
05A22:  CLRF   xD7
05A24:  MOVFF  65E,6D6
05A28:  CLRF   xD9
05A2A:  MOVLW  21
05A2C:  MOVWF  xD8
05A2E:  MOVLB  0
05A30:  CALL   0360
05A34:  BTFSC  1B.7
05A36:  BSF    FF2.7
05A38:  MOVFF  02,03
05A3C:  MOVF   01,W
05A3E:  ADDLW  40
05A40:  MOVWF  01
05A42:  MOVLW  01
05A44:  ADDWFC 03,F
05A46:  MOVFF  01,FE9
05A4A:  MOVFF  03,FEA
05A4E:  MOVF   FEF,W
05A50:  BZ    5A6C
05A52:  XORLW  02
05A54:  BTFSC  FD8.2
05A56:  BRA    5F5A
05A58:  XORLW  03
05A5A:  BTFSC  FD8.2
05A5C:  GOTO   62A4
05A60:  XORLW  02
05A62:  BTFSC  FD8.2
05A64:  GOTO   65F0
05A68:  GOTO   6940
....................          case dimmer_switch: 
05A6C:  CLRF   1B
05A6E:  BTFSC  FF2.7
05A70:  BSF    1B.7
05A72:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
05A74:  MOVLB  6
05A76:  CLRF   xD7
05A78:  MOVFF  65E,6D6
05A7C:  CLRF   xD9
05A7E:  MOVLW  21
05A80:  MOVWF  xD8
05A82:  MOVLB  0
05A84:  CALL   0360
05A88:  BTFSC  1B.7
05A8A:  BSF    FF2.7
05A8C:  MOVF   01,W
05A8E:  ADDLW  02
05A90:  MOVLB  6
05A92:  MOVWF  x5F
05A94:  MOVLW  00
05A96:  ADDWFC 02,W
05A98:  MOVWF  x60
05A9A:  MOVLW  01
05A9C:  ADDWF  x5F,W
05A9E:  MOVWF  01
05AA0:  MOVLW  00
05AA2:  ADDWFC x60,W
05AA4:  MOVWF  03
05AA6:  MOVF   01,W
05AA8:  ADDLW  3E
05AAA:  MOVWF  01
05AAC:  MOVLW  01
05AAE:  ADDWFC 03,F
05AB0:  MOVF   01,W
05AB2:  ADDLW  02
05AB4:  MOVWF  FE9
05AB6:  MOVLW  00
05AB8:  ADDWFC 03,W
05ABA:  MOVWF  FEA
05ABC:  BTFSS  FEF.0
05ABE:  BRA    5C0E
05AC0:  CLRF   1B
05AC2:  BTFSC  FF2.7
05AC4:  BSF    1B.7
05AC6:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
05AC8:  CLRF   xD7
05ACA:  MOVFF  65E,6D6
05ACE:  CLRF   xD9
05AD0:  MOVLW  21
05AD2:  MOVWF  xD8
05AD4:  MOVLB  0
05AD6:  CALL   0360
05ADA:  BTFSC  1B.7
05ADC:  BSF    FF2.7
05ADE:  MOVF   01,W
05AE0:  ADDLW  02
05AE2:  MOVLB  6
05AE4:  MOVWF  x5F
05AE6:  MOVLW  00
05AE8:  ADDWFC 02,W
05AEA:  MOVWF  x60
05AEC:  MOVLW  01
05AEE:  ADDWF  x5F,W
05AF0:  MOVWF  01
05AF2:  MOVLW  00
05AF4:  ADDWFC x60,W
05AF6:  MOVWF  03
05AF8:  MOVF   01,W
05AFA:  ADDLW  3E
05AFC:  MOVWF  01
05AFE:  MOVLW  01
05B00:  ADDWFC 03,F
05B02:  MOVFF  01,FE9
05B06:  MOVFF  03,FEA
05B0A:  MOVFF  FEF,661
05B0E:  CLRF   1B
05B10:  BTFSC  FF2.7
05B12:  BSF    1B.7
05B14:  BCF    FF2.7
05B16:  CLRF   xD7
05B18:  MOVFF  65E,6D6
05B1C:  CLRF   xD9
05B1E:  MOVLW  21
05B20:  MOVWF  xD8
05B22:  MOVLB  0
05B24:  CALL   0360
05B28:  BTFSC  1B.7
05B2A:  BSF    FF2.7
05B2C:  MOVF   01,W
05B2E:  ADDLW  02
05B30:  MOVLB  6
05B32:  MOVWF  x62
05B34:  MOVLW  00
05B36:  ADDWFC 02,W
05B38:  MOVWF  x63
05B3A:  MOVLW  01
05B3C:  ADDWF  x62,W
05B3E:  MOVWF  01
05B40:  MOVLW  00
05B42:  ADDWFC x63,W
05B44:  MOVWF  03
05B46:  MOVF   01,W
05B48:  ADDLW  3E
05B4A:  MOVWF  01
05B4C:  MOVLW  01
05B4E:  ADDWFC 03,F
05B50:  MOVF   01,W
05B52:  ADDLW  01
05B54:  MOVWF  FE9
05B56:  MOVLW  00
05B58:  ADDWFC 03,W
05B5A:  MOVWF  FEA
05B5C:  MOVFF  FEF,664
05B60:  MOVFF  661,665
05B64:  MOVFF  664,666
05B68:  MOVLB  0
05B6A:  RCALL  59FA
05B6C:  CLRF   1B
05B6E:  BTFSC  FF2.7
05B70:  BSF    1B.7
05B72:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
05B74:  MOVLB  6
05B76:  CLRF   xD7
05B78:  MOVFF  65E,6D6
05B7C:  CLRF   xD9
05B7E:  MOVLW  21
05B80:  MOVWF  xD8
05B82:  MOVLB  0
05B84:  CALL   0360
05B88:  BTFSC  1B.7
05B8A:  BSF    FF2.7
05B8C:  MOVF   01,W
05B8E:  ADDLW  02
05B90:  MOVLB  6
05B92:  MOVWF  x5F
05B94:  MOVLW  00
05B96:  ADDWFC 02,W
05B98:  MOVWF  x60
05B9A:  MOVLW  01
05B9C:  ADDWF  x5F,W
05B9E:  MOVWF  01
05BA0:  MOVLW  00
05BA2:  ADDWFC x60,W
05BA4:  MOVWF  03
05BA6:  MOVF   01,W
05BA8:  ADDLW  3E
05BAA:  MOVWF  01
05BAC:  MOVLW  01
05BAE:  ADDWFC 03,F
05BB0:  MOVF   01,W
05BB2:  ADDLW  02
05BB4:  MOVWF  FE9
05BB6:  MOVLW  00
05BB8:  ADDWFC 03,W
05BBA:  MOVWF  FEA
05BBC:  BCF    FEF.0
05BBE:  CLRF   1B
05BC0:  BTFSC  FF2.7
05BC2:  BSF    1B.7
05BC4:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
05BC6:  CLRF   xD7
05BC8:  MOVFF  65E,6D6
05BCC:  CLRF   xD9
05BCE:  MOVLW  21
05BD0:  MOVWF  xD8
05BD2:  MOVLB  0
05BD4:  CALL   0360
05BD8:  BTFSC  1B.7
05BDA:  BSF    FF2.7
05BDC:  MOVF   01,W
05BDE:  ADDLW  02
05BE0:  MOVLB  6
05BE2:  MOVWF  x5F
05BE4:  MOVLW  00
05BE6:  ADDWFC 02,W
05BE8:  MOVWF  x60
05BEA:  MOVLW  01
05BEC:  ADDWF  x5F,W
05BEE:  MOVWF  01
05BF0:  MOVLW  00
05BF2:  ADDWFC x60,W
05BF4:  MOVWF  03
05BF6:  MOVF   01,W
05BF8:  ADDLW  3E
05BFA:  MOVWF  01
05BFC:  MOVLW  01
05BFE:  ADDWFC 03,F
05C00:  MOVF   01,W
05C02:  ADDLW  01
05C04:  MOVWF  FE9
05C06:  MOVLW  00
05C08:  ADDWFC 03,W
05C0A:  MOVWF  FEA
05C0C:  CLRF   FEF
05C0E:  CLRF   1B
05C10:  BTFSC  FF2.7
05C12:  BSF    1B.7
05C14:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
05C16:  CLRF   xD7
05C18:  MOVFF  65E,6D6
05C1C:  CLRF   xD9
05C1E:  MOVLW  21
05C20:  MOVWF  xD8
05C22:  MOVLB  0
05C24:  CALL   0360
05C28:  BTFSC  1B.7
05C2A:  BSF    FF2.7
05C2C:  MOVF   01,W
05C2E:  ADDLW  02
05C30:  MOVLB  6
05C32:  MOVWF  x5F
05C34:  MOVLW  00
05C36:  ADDWFC 02,W
05C38:  MOVWF  x60
05C3A:  MOVLW  01
05C3C:  ADDWF  x5F,W
05C3E:  MOVWF  01
05C40:  MOVLW  00
05C42:  ADDWFC x60,W
05C44:  MOVWF  03
05C46:  MOVF   01,W
05C48:  ADDLW  3E
05C4A:  MOVWF  01
05C4C:  MOVLW  01
05C4E:  ADDWFC 03,F
05C50:  MOVF   01,W
05C52:  ADDLW  05
05C54:  MOVWF  FE9
05C56:  MOVLW  00
05C58:  ADDWFC 03,W
05C5A:  MOVWF  FEA
05C5C:  BTFSS  FEF.0
05C5E:  BRA    5DB2
05C60:  CLRF   1B
05C62:  BTFSC  FF2.7
05C64:  BSF    1B.7
05C66:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
05C68:  CLRF   xD7
05C6A:  MOVFF  65E,6D6
05C6E:  CLRF   xD9
05C70:  MOVLW  21
05C72:  MOVWF  xD8
05C74:  MOVLB  0
05C76:  CALL   0360
05C7A:  BTFSC  1B.7
05C7C:  BSF    FF2.7
05C7E:  MOVF   01,W
05C80:  ADDLW  02
05C82:  MOVLB  6
05C84:  MOVWF  x5F
05C86:  MOVLW  00
05C88:  ADDWFC 02,W
05C8A:  MOVWF  x60
05C8C:  MOVLW  01
05C8E:  ADDWF  x5F,W
05C90:  MOVWF  01
05C92:  MOVLW  00
05C94:  ADDWFC x60,W
05C96:  MOVWF  03
05C98:  MOVF   01,W
05C9A:  ADDLW  3E
05C9C:  MOVWF  01
05C9E:  MOVLW  01
05CA0:  ADDWFC 03,F
05CA2:  MOVF   01,W
05CA4:  ADDLW  03
05CA6:  MOVWF  FE9
05CA8:  MOVLW  00
05CAA:  ADDWFC 03,W
05CAC:  MOVWF  FEA
05CAE:  MOVFF  FEF,661
05CB2:  CLRF   1B
05CB4:  BTFSC  FF2.7
05CB6:  BSF    1B.7
05CB8:  BCF    FF2.7
05CBA:  CLRF   xD7
05CBC:  MOVFF  65E,6D6
05CC0:  CLRF   xD9
05CC2:  MOVLW  21
05CC4:  MOVWF  xD8
05CC6:  MOVLB  0
05CC8:  CALL   0360
05CCC:  BTFSC  1B.7
05CCE:  BSF    FF2.7
05CD0:  MOVF   01,W
05CD2:  ADDLW  02
05CD4:  MOVLB  6
05CD6:  MOVWF  x62
05CD8:  MOVLW  00
05CDA:  ADDWFC 02,W
05CDC:  MOVWF  x63
05CDE:  MOVLW  01
05CE0:  ADDWF  x62,W
05CE2:  MOVWF  01
05CE4:  MOVLW  00
05CE6:  ADDWFC x63,W
05CE8:  MOVWF  03
05CEA:  MOVF   01,W
05CEC:  ADDLW  3E
05CEE:  MOVWF  01
05CF0:  MOVLW  01
05CF2:  ADDWFC 03,F
05CF4:  MOVF   01,W
05CF6:  ADDLW  04
05CF8:  MOVWF  FE9
05CFA:  MOVLW  00
05CFC:  ADDWFC 03,W
05CFE:  MOVWF  FEA
05D00:  MOVFF  FEF,664
05D04:  MOVFF  661,665
05D08:  MOVFF  664,666
05D0C:  MOVLB  0
05D0E:  RCALL  59FA
05D10:  CLRF   1B
05D12:  BTFSC  FF2.7
05D14:  BSF    1B.7
05D16:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
05D18:  MOVLB  6
05D1A:  CLRF   xD7
05D1C:  MOVFF  65E,6D6
05D20:  CLRF   xD9
05D22:  MOVLW  21
05D24:  MOVWF  xD8
05D26:  MOVLB  0
05D28:  CALL   0360
05D2C:  BTFSC  1B.7
05D2E:  BSF    FF2.7
05D30:  MOVF   01,W
05D32:  ADDLW  02
05D34:  MOVLB  6
05D36:  MOVWF  x5F
05D38:  MOVLW  00
05D3A:  ADDWFC 02,W
05D3C:  MOVWF  x60
05D3E:  MOVLW  01
05D40:  ADDWF  x5F,W
05D42:  MOVWF  01
05D44:  MOVLW  00
05D46:  ADDWFC x60,W
05D48:  MOVWF  03
05D4A:  MOVF   01,W
05D4C:  ADDLW  3E
05D4E:  MOVWF  01
05D50:  MOVLW  01
05D52:  ADDWFC 03,F
05D54:  MOVF   01,W
05D56:  ADDLW  05
05D58:  MOVWF  FE9
05D5A:  MOVLW  00
05D5C:  ADDWFC 03,W
05D5E:  MOVWF  FEA
05D60:  BCF    FEF.0
05D62:  CLRF   1B
05D64:  BTFSC  FF2.7
05D66:  BSF    1B.7
05D68:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
05D6A:  CLRF   xD7
05D6C:  MOVFF  65E,6D6
05D70:  CLRF   xD9
05D72:  MOVLW  21
05D74:  MOVWF  xD8
05D76:  MOVLB  0
05D78:  CALL   0360
05D7C:  BTFSC  1B.7
05D7E:  BSF    FF2.7
05D80:  MOVF   01,W
05D82:  ADDLW  02
05D84:  MOVLB  6
05D86:  MOVWF  x5F
05D88:  MOVLW  00
05D8A:  ADDWFC 02,W
05D8C:  MOVWF  x60
05D8E:  MOVLW  01
05D90:  ADDWF  x5F,W
05D92:  MOVWF  01
05D94:  MOVLW  00
05D96:  ADDWFC x60,W
05D98:  MOVWF  03
05D9A:  MOVF   01,W
05D9C:  ADDLW  3E
05D9E:  MOVWF  01
05DA0:  MOVLW  01
05DA2:  ADDWFC 03,F
05DA4:  MOVF   01,W
05DA6:  ADDLW  04
05DA8:  MOVWF  FE9
05DAA:  MOVLW  00
05DAC:  ADDWFC 03,W
05DAE:  MOVWF  FEA
05DB0:  CLRF   FEF
05DB2:  CLRF   1B
05DB4:  BTFSC  FF2.7
05DB6:  BSF    1B.7
05DB8:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
05DBA:  CLRF   xD7
05DBC:  MOVFF  65E,6D6
05DC0:  CLRF   xD9
05DC2:  MOVLW  21
05DC4:  MOVWF  xD8
05DC6:  MOVLB  0
05DC8:  CALL   0360
05DCC:  BTFSC  1B.7
05DCE:  BSF    FF2.7
05DD0:  MOVF   01,W
05DD2:  ADDLW  02
05DD4:  MOVLB  6
05DD6:  MOVWF  x5F
05DD8:  MOVLW  00
05DDA:  ADDWFC 02,W
05DDC:  MOVWF  x60
05DDE:  MOVLW  01
05DE0:  ADDWF  x5F,W
05DE2:  MOVWF  01
05DE4:  MOVLW  00
05DE6:  ADDWFC x60,W
05DE8:  MOVWF  03
05DEA:  MOVF   01,W
05DEC:  ADDLW  3E
05DEE:  MOVWF  01
05DF0:  MOVLW  01
05DF2:  ADDWFC 03,F
05DF4:  MOVF   01,W
05DF6:  ADDLW  08
05DF8:  MOVWF  FE9
05DFA:  MOVLW  00
05DFC:  ADDWFC 03,W
05DFE:  MOVWF  FEA
05E00:  BTFSS  FEF.0
05E02:  BRA    5F56
05E04:  CLRF   1B
05E06:  BTFSC  FF2.7
05E08:  BSF    1B.7
05E0A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
05E0C:  CLRF   xD7
05E0E:  MOVFF  65E,6D6
05E12:  CLRF   xD9
05E14:  MOVLW  21
05E16:  MOVWF  xD8
05E18:  MOVLB  0
05E1A:  CALL   0360
05E1E:  BTFSC  1B.7
05E20:  BSF    FF2.7
05E22:  MOVF   01,W
05E24:  ADDLW  02
05E26:  MOVLB  6
05E28:  MOVWF  x5F
05E2A:  MOVLW  00
05E2C:  ADDWFC 02,W
05E2E:  MOVWF  x60
05E30:  MOVLW  01
05E32:  ADDWF  x5F,W
05E34:  MOVWF  01
05E36:  MOVLW  00
05E38:  ADDWFC x60,W
05E3A:  MOVWF  03
05E3C:  MOVF   01,W
05E3E:  ADDLW  3E
05E40:  MOVWF  01
05E42:  MOVLW  01
05E44:  ADDWFC 03,F
05E46:  MOVF   01,W
05E48:  ADDLW  06
05E4A:  MOVWF  FE9
05E4C:  MOVLW  00
05E4E:  ADDWFC 03,W
05E50:  MOVWF  FEA
05E52:  MOVFF  FEF,661
05E56:  CLRF   1B
05E58:  BTFSC  FF2.7
05E5A:  BSF    1B.7
05E5C:  BCF    FF2.7
05E5E:  CLRF   xD7
05E60:  MOVFF  65E,6D6
05E64:  CLRF   xD9
05E66:  MOVLW  21
05E68:  MOVWF  xD8
05E6A:  MOVLB  0
05E6C:  CALL   0360
05E70:  BTFSC  1B.7
05E72:  BSF    FF2.7
05E74:  MOVF   01,W
05E76:  ADDLW  02
05E78:  MOVLB  6
05E7A:  MOVWF  x62
05E7C:  MOVLW  00
05E7E:  ADDWFC 02,W
05E80:  MOVWF  x63
05E82:  MOVLW  01
05E84:  ADDWF  x62,W
05E86:  MOVWF  01
05E88:  MOVLW  00
05E8A:  ADDWFC x63,W
05E8C:  MOVWF  03
05E8E:  MOVF   01,W
05E90:  ADDLW  3E
05E92:  MOVWF  01
05E94:  MOVLW  01
05E96:  ADDWFC 03,F
05E98:  MOVF   01,W
05E9A:  ADDLW  07
05E9C:  MOVWF  FE9
05E9E:  MOVLW  00
05EA0:  ADDWFC 03,W
05EA2:  MOVWF  FEA
05EA4:  MOVFF  FEF,664
05EA8:  MOVFF  661,665
05EAC:  MOVFF  664,666
05EB0:  MOVLB  0
05EB2:  RCALL  59FA
05EB4:  CLRF   1B
05EB6:  BTFSC  FF2.7
05EB8:  BSF    1B.7
05EBA:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
05EBC:  MOVLB  6
05EBE:  CLRF   xD7
05EC0:  MOVFF  65E,6D6
05EC4:  CLRF   xD9
05EC6:  MOVLW  21
05EC8:  MOVWF  xD8
05ECA:  MOVLB  0
05ECC:  CALL   0360
05ED0:  BTFSC  1B.7
05ED2:  BSF    FF2.7
05ED4:  MOVF   01,W
05ED6:  ADDLW  02
05ED8:  MOVLB  6
05EDA:  MOVWF  x5F
05EDC:  MOVLW  00
05EDE:  ADDWFC 02,W
05EE0:  MOVWF  x60
05EE2:  MOVLW  01
05EE4:  ADDWF  x5F,W
05EE6:  MOVWF  01
05EE8:  MOVLW  00
05EEA:  ADDWFC x60,W
05EEC:  MOVWF  03
05EEE:  MOVF   01,W
05EF0:  ADDLW  3E
05EF2:  MOVWF  01
05EF4:  MOVLW  01
05EF6:  ADDWFC 03,F
05EF8:  MOVF   01,W
05EFA:  ADDLW  08
05EFC:  MOVWF  FE9
05EFE:  MOVLW  00
05F00:  ADDWFC 03,W
05F02:  MOVWF  FEA
05F04:  BCF    FEF.0
05F06:  CLRF   1B
05F08:  BTFSC  FF2.7
05F0A:  BSF    1B.7
05F0C:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
05F0E:  CLRF   xD7
05F10:  MOVFF  65E,6D6
05F14:  CLRF   xD9
05F16:  MOVLW  21
05F18:  MOVWF  xD8
05F1A:  MOVLB  0
05F1C:  CALL   0360
05F20:  BTFSC  1B.7
05F22:  BSF    FF2.7
05F24:  MOVF   01,W
05F26:  ADDLW  02
05F28:  MOVLB  6
05F2A:  MOVWF  x5F
05F2C:  MOVLW  00
05F2E:  ADDWFC 02,W
05F30:  MOVWF  x60
05F32:  MOVLW  01
05F34:  ADDWF  x5F,W
05F36:  MOVWF  01
05F38:  MOVLW  00
05F3A:  ADDWFC x60,W
05F3C:  MOVWF  03
05F3E:  MOVF   01,W
05F40:  ADDLW  3E
05F42:  MOVWF  01
05F44:  MOVLW  01
05F46:  ADDWFC 03,F
05F48:  MOVF   01,W
05F4A:  ADDLW  07
05F4C:  MOVWF  FE9
05F4E:  MOVLW  00
05F50:  ADDWFC 03,W
05F52:  MOVWF  FEA
05F54:  CLRF   FEF
....................          } 
....................  
....................          break; 
05F56:  GOTO   6944
....................          case button_switch: 
05F5A:  CLRF   1B
05F5C:  BTFSC  FF2.7
05F5E:  BSF    1B.7
05F60:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
05F62:  MOVLB  6
05F64:  CLRF   xD7
05F66:  MOVFF  65E,6D6
05F6A:  CLRF   xD9
05F6C:  MOVLW  21
05F6E:  MOVWF  xD8
05F70:  MOVLB  0
05F72:  CALL   0360
05F76:  BTFSC  1B.7
05F78:  BSF    FF2.7
05F7A:  MOVF   01,W
05F7C:  ADDLW  02
05F7E:  MOVLB  6
05F80:  MOVWF  x5F
05F82:  MOVLW  00
05F84:  ADDWFC 02,W
05F86:  MOVWF  x60
05F88:  MOVLW  01
05F8A:  ADDWF  x5F,W
05F8C:  MOVWF  01
05F8E:  MOVLW  00
05F90:  ADDWFC x60,W
05F92:  MOVWF  03
05F94:  MOVF   01,W
05F96:  ADDLW  3E
05F98:  MOVWF  01
05F9A:  MOVLW  01
05F9C:  ADDWFC 03,F
05F9E:  MOVF   01,W
05FA0:  ADDLW  02
05FA2:  MOVWF  FE9
05FA4:  MOVLW  00
05FA6:  ADDWFC 03,W
05FA8:  MOVWF  FEA
05FAA:  BTFSS  FEF.0
05FAC:  BRA    60FC
05FAE:  CLRF   1B
05FB0:  BTFSC  FF2.7
05FB2:  BSF    1B.7
05FB4:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
05FB6:  CLRF   xD7
05FB8:  MOVFF  65E,6D6
05FBC:  CLRF   xD9
05FBE:  MOVLW  21
05FC0:  MOVWF  xD8
05FC2:  MOVLB  0
05FC4:  CALL   0360
05FC8:  BTFSC  1B.7
05FCA:  BSF    FF2.7
05FCC:  MOVF   01,W
05FCE:  ADDLW  02
05FD0:  MOVLB  6
05FD2:  MOVWF  x5F
05FD4:  MOVLW  00
05FD6:  ADDWFC 02,W
05FD8:  MOVWF  x60
05FDA:  MOVLW  01
05FDC:  ADDWF  x5F,W
05FDE:  MOVWF  01
05FE0:  MOVLW  00
05FE2:  ADDWFC x60,W
05FE4:  MOVWF  03
05FE6:  MOVF   01,W
05FE8:  ADDLW  3E
05FEA:  MOVWF  01
05FEC:  MOVLW  01
05FEE:  ADDWFC 03,F
05FF0:  MOVFF  01,FE9
05FF4:  MOVFF  03,FEA
05FF8:  MOVFF  FEF,661
05FFC:  CLRF   1B
05FFE:  BTFSC  FF2.7
06000:  BSF    1B.7
06002:  BCF    FF2.7
06004:  CLRF   xD7
06006:  MOVFF  65E,6D6
0600A:  CLRF   xD9
0600C:  MOVLW  21
0600E:  MOVWF  xD8
06010:  MOVLB  0
06012:  CALL   0360
06016:  BTFSC  1B.7
06018:  BSF    FF2.7
0601A:  MOVF   01,W
0601C:  ADDLW  02
0601E:  MOVLB  6
06020:  MOVWF  x62
06022:  MOVLW  00
06024:  ADDWFC 02,W
06026:  MOVWF  x63
06028:  MOVLW  01
0602A:  ADDWF  x62,W
0602C:  MOVWF  01
0602E:  MOVLW  00
06030:  ADDWFC x63,W
06032:  MOVWF  03
06034:  MOVF   01,W
06036:  ADDLW  3E
06038:  MOVWF  01
0603A:  MOVLW  01
0603C:  ADDWFC 03,F
0603E:  MOVF   01,W
06040:  ADDLW  01
06042:  MOVWF  FE9
06044:  MOVLW  00
06046:  ADDWFC 03,W
06048:  MOVWF  FEA
0604A:  MOVFF  FEF,664
0604E:  MOVFF  661,665
06052:  MOVFF  664,666
06056:  MOVLB  0
06058:  RCALL  59FA
0605A:  CLRF   1B
0605C:  BTFSC  FF2.7
0605E:  BSF    1B.7
06060:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06062:  MOVLB  6
06064:  CLRF   xD7
06066:  MOVFF  65E,6D6
0606A:  CLRF   xD9
0606C:  MOVLW  21
0606E:  MOVWF  xD8
06070:  MOVLB  0
06072:  CALL   0360
06076:  BTFSC  1B.7
06078:  BSF    FF2.7
0607A:  MOVF   01,W
0607C:  ADDLW  02
0607E:  MOVLB  6
06080:  MOVWF  x5F
06082:  MOVLW  00
06084:  ADDWFC 02,W
06086:  MOVWF  x60
06088:  MOVLW  01
0608A:  ADDWF  x5F,W
0608C:  MOVWF  01
0608E:  MOVLW  00
06090:  ADDWFC x60,W
06092:  MOVWF  03
06094:  MOVF   01,W
06096:  ADDLW  3E
06098:  MOVWF  01
0609A:  MOVLW  01
0609C:  ADDWFC 03,F
0609E:  MOVF   01,W
060A0:  ADDLW  02
060A2:  MOVWF  FE9
060A4:  MOVLW  00
060A6:  ADDWFC 03,W
060A8:  MOVWF  FEA
060AA:  BCF    FEF.0
060AC:  CLRF   1B
060AE:  BTFSC  FF2.7
060B0:  BSF    1B.7
060B2:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
060B4:  CLRF   xD7
060B6:  MOVFF  65E,6D6
060BA:  CLRF   xD9
060BC:  MOVLW  21
060BE:  MOVWF  xD8
060C0:  MOVLB  0
060C2:  CALL   0360
060C6:  BTFSC  1B.7
060C8:  BSF    FF2.7
060CA:  MOVF   01,W
060CC:  ADDLW  02
060CE:  MOVLB  6
060D0:  MOVWF  x5F
060D2:  MOVLW  00
060D4:  ADDWFC 02,W
060D6:  MOVWF  x60
060D8:  MOVLW  01
060DA:  ADDWF  x5F,W
060DC:  MOVWF  01
060DE:  MOVLW  00
060E0:  ADDWFC x60,W
060E2:  MOVWF  03
060E4:  MOVF   01,W
060E6:  ADDLW  3E
060E8:  MOVWF  01
060EA:  MOVLW  01
060EC:  ADDWFC 03,F
060EE:  MOVF   01,W
060F0:  ADDLW  01
060F2:  MOVWF  FE9
060F4:  MOVLW  00
060F6:  ADDWFC 03,W
060F8:  MOVWF  FEA
060FA:  CLRF   FEF
060FC:  CLRF   1B
060FE:  BTFSC  FF2.7
06100:  BSF    1B.7
06102:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
06104:  CLRF   xD7
06106:  MOVFF  65E,6D6
0610A:  CLRF   xD9
0610C:  MOVLW  21
0610E:  MOVWF  xD8
06110:  MOVLB  0
06112:  CALL   0360
06116:  BTFSC  1B.7
06118:  BSF    FF2.7
0611A:  MOVF   01,W
0611C:  ADDLW  02
0611E:  MOVLB  6
06120:  MOVWF  x5F
06122:  MOVLW  00
06124:  ADDWFC 02,W
06126:  MOVWF  x60
06128:  MOVLW  01
0612A:  ADDWF  x5F,W
0612C:  MOVWF  01
0612E:  MOVLW  00
06130:  ADDWFC x60,W
06132:  MOVWF  03
06134:  MOVF   01,W
06136:  ADDLW  3E
06138:  MOVWF  01
0613A:  MOVLW  01
0613C:  ADDWFC 03,F
0613E:  MOVF   01,W
06140:  ADDLW  05
06142:  MOVWF  FE9
06144:  MOVLW  00
06146:  ADDWFC 03,W
06148:  MOVWF  FEA
0614A:  BTFSS  FEF.0
0614C:  BRA    62A2
0614E:  CLRF   1B
06150:  BTFSC  FF2.7
06152:  BSF    1B.7
06154:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
06156:  CLRF   xD7
06158:  MOVFF  65E,6D6
0615C:  CLRF   xD9
0615E:  MOVLW  21
06160:  MOVWF  xD8
06162:  MOVLB  0
06164:  CALL   0360
06168:  BTFSC  1B.7
0616A:  BSF    FF2.7
0616C:  MOVF   01,W
0616E:  ADDLW  02
06170:  MOVLB  6
06172:  MOVWF  x5F
06174:  MOVLW  00
06176:  ADDWFC 02,W
06178:  MOVWF  x60
0617A:  MOVLW  01
0617C:  ADDWF  x5F,W
0617E:  MOVWF  01
06180:  MOVLW  00
06182:  ADDWFC x60,W
06184:  MOVWF  03
06186:  MOVF   01,W
06188:  ADDLW  3E
0618A:  MOVWF  01
0618C:  MOVLW  01
0618E:  ADDWFC 03,F
06190:  MOVF   01,W
06192:  ADDLW  03
06194:  MOVWF  FE9
06196:  MOVLW  00
06198:  ADDWFC 03,W
0619A:  MOVWF  FEA
0619C:  MOVFF  FEF,661
061A0:  CLRF   1B
061A2:  BTFSC  FF2.7
061A4:  BSF    1B.7
061A6:  BCF    FF2.7
061A8:  CLRF   xD7
061AA:  MOVFF  65E,6D6
061AE:  CLRF   xD9
061B0:  MOVLW  21
061B2:  MOVWF  xD8
061B4:  MOVLB  0
061B6:  CALL   0360
061BA:  BTFSC  1B.7
061BC:  BSF    FF2.7
061BE:  MOVF   01,W
061C0:  ADDLW  02
061C2:  MOVLB  6
061C4:  MOVWF  x62
061C6:  MOVLW  00
061C8:  ADDWFC 02,W
061CA:  MOVWF  x63
061CC:  MOVLW  01
061CE:  ADDWF  x62,W
061D0:  MOVWF  01
061D2:  MOVLW  00
061D4:  ADDWFC x63,W
061D6:  MOVWF  03
061D8:  MOVF   01,W
061DA:  ADDLW  3E
061DC:  MOVWF  01
061DE:  MOVLW  01
061E0:  ADDWFC 03,F
061E2:  MOVF   01,W
061E4:  ADDLW  04
061E6:  MOVWF  FE9
061E8:  MOVLW  00
061EA:  ADDWFC 03,W
061EC:  MOVWF  FEA
061EE:  MOVFF  FEF,664
061F2:  MOVFF  661,665
061F6:  MOVFF  664,666
061FA:  MOVLB  0
061FC:  CALL   59FA
06200:  CLRF   1B
06202:  BTFSC  FF2.7
06204:  BSF    1B.7
06206:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06208:  MOVLB  6
0620A:  CLRF   xD7
0620C:  MOVFF  65E,6D6
06210:  CLRF   xD9
06212:  MOVLW  21
06214:  MOVWF  xD8
06216:  MOVLB  0
06218:  CALL   0360
0621C:  BTFSC  1B.7
0621E:  BSF    FF2.7
06220:  MOVF   01,W
06222:  ADDLW  02
06224:  MOVLB  6
06226:  MOVWF  x5F
06228:  MOVLW  00
0622A:  ADDWFC 02,W
0622C:  MOVWF  x60
0622E:  MOVLW  01
06230:  ADDWF  x5F,W
06232:  MOVWF  01
06234:  MOVLW  00
06236:  ADDWFC x60,W
06238:  MOVWF  03
0623A:  MOVF   01,W
0623C:  ADDLW  3E
0623E:  MOVWF  01
06240:  MOVLW  01
06242:  ADDWFC 03,F
06244:  MOVF   01,W
06246:  ADDLW  05
06248:  MOVWF  FE9
0624A:  MOVLW  00
0624C:  ADDWFC 03,W
0624E:  MOVWF  FEA
06250:  BCF    FEF.0
06252:  CLRF   1B
06254:  BTFSC  FF2.7
06256:  BSF    1B.7
06258:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
0625A:  CLRF   xD7
0625C:  MOVFF  65E,6D6
06260:  CLRF   xD9
06262:  MOVLW  21
06264:  MOVWF  xD8
06266:  MOVLB  0
06268:  CALL   0360
0626C:  BTFSC  1B.7
0626E:  BSF    FF2.7
06270:  MOVF   01,W
06272:  ADDLW  02
06274:  MOVLB  6
06276:  MOVWF  x5F
06278:  MOVLW  00
0627A:  ADDWFC 02,W
0627C:  MOVWF  x60
0627E:  MOVLW  01
06280:  ADDWF  x5F,W
06282:  MOVWF  01
06284:  MOVLW  00
06286:  ADDWFC x60,W
06288:  MOVWF  03
0628A:  MOVF   01,W
0628C:  ADDLW  3E
0628E:  MOVWF  01
06290:  MOVLW  01
06292:  ADDWFC 03,F
06294:  MOVF   01,W
06296:  ADDLW  04
06298:  MOVWF  FE9
0629A:  MOVLW  00
0629C:  ADDWFC 03,W
0629E:  MOVWF  FEA
062A0:  CLRF   FEF
....................          } 
....................  
....................          break; 
062A2:  BRA    6944
....................          case on_off_switch: 
062A4:  CLRF   1B
062A6:  BTFSC  FF2.7
062A8:  BSF    1B.7
062AA:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
062AC:  MOVLB  6
062AE:  CLRF   xD7
062B0:  MOVFF  65E,6D6
062B4:  CLRF   xD9
062B6:  MOVLW  21
062B8:  MOVWF  xD8
062BA:  MOVLB  0
062BC:  CALL   0360
062C0:  BTFSC  1B.7
062C2:  BSF    FF2.7
062C4:  MOVF   01,W
062C6:  ADDLW  02
062C8:  MOVLB  6
062CA:  MOVWF  x5F
062CC:  MOVLW  00
062CE:  ADDWFC 02,W
062D0:  MOVWF  x60
062D2:  MOVLW  01
062D4:  ADDWF  x5F,W
062D6:  MOVWF  01
062D8:  MOVLW  00
062DA:  ADDWFC x60,W
062DC:  MOVWF  03
062DE:  MOVF   01,W
062E0:  ADDLW  3E
062E2:  MOVWF  01
062E4:  MOVLW  01
062E6:  ADDWFC 03,F
062E8:  MOVF   01,W
062EA:  ADDLW  02
062EC:  MOVWF  FE9
062EE:  MOVLW  00
062F0:  ADDWFC 03,W
062F2:  MOVWF  FEA
062F4:  BTFSS  FEF.0
062F6:  BRA    6448
062F8:  CLRF   1B
062FA:  BTFSC  FF2.7
062FC:  BSF    1B.7
062FE:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
06300:  CLRF   xD7
06302:  MOVFF  65E,6D6
06306:  CLRF   xD9
06308:  MOVLW  21
0630A:  MOVWF  xD8
0630C:  MOVLB  0
0630E:  CALL   0360
06312:  BTFSC  1B.7
06314:  BSF    FF2.7
06316:  MOVF   01,W
06318:  ADDLW  02
0631A:  MOVLB  6
0631C:  MOVWF  x5F
0631E:  MOVLW  00
06320:  ADDWFC 02,W
06322:  MOVWF  x60
06324:  MOVLW  01
06326:  ADDWF  x5F,W
06328:  MOVWF  01
0632A:  MOVLW  00
0632C:  ADDWFC x60,W
0632E:  MOVWF  03
06330:  MOVF   01,W
06332:  ADDLW  3E
06334:  MOVWF  01
06336:  MOVLW  01
06338:  ADDWFC 03,F
0633A:  MOVFF  01,FE9
0633E:  MOVFF  03,FEA
06342:  MOVFF  FEF,661
06346:  CLRF   1B
06348:  BTFSC  FF2.7
0634A:  BSF    1B.7
0634C:  BCF    FF2.7
0634E:  CLRF   xD7
06350:  MOVFF  65E,6D6
06354:  CLRF   xD9
06356:  MOVLW  21
06358:  MOVWF  xD8
0635A:  MOVLB  0
0635C:  CALL   0360
06360:  BTFSC  1B.7
06362:  BSF    FF2.7
06364:  MOVF   01,W
06366:  ADDLW  02
06368:  MOVLB  6
0636A:  MOVWF  x62
0636C:  MOVLW  00
0636E:  ADDWFC 02,W
06370:  MOVWF  x63
06372:  MOVLW  01
06374:  ADDWF  x62,W
06376:  MOVWF  01
06378:  MOVLW  00
0637A:  ADDWFC x63,W
0637C:  MOVWF  03
0637E:  MOVF   01,W
06380:  ADDLW  3E
06382:  MOVWF  01
06384:  MOVLW  01
06386:  ADDWFC 03,F
06388:  MOVF   01,W
0638A:  ADDLW  01
0638C:  MOVWF  FE9
0638E:  MOVLW  00
06390:  ADDWFC 03,W
06392:  MOVWF  FEA
06394:  MOVFF  FEF,664
06398:  MOVFF  661,665
0639C:  MOVFF  664,666
063A0:  MOVLB  0
063A2:  CALL   59FA
063A6:  CLRF   1B
063A8:  BTFSC  FF2.7
063AA:  BSF    1B.7
063AC:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
063AE:  MOVLB  6
063B0:  CLRF   xD7
063B2:  MOVFF  65E,6D6
063B6:  CLRF   xD9
063B8:  MOVLW  21
063BA:  MOVWF  xD8
063BC:  MOVLB  0
063BE:  CALL   0360
063C2:  BTFSC  1B.7
063C4:  BSF    FF2.7
063C6:  MOVF   01,W
063C8:  ADDLW  02
063CA:  MOVLB  6
063CC:  MOVWF  x5F
063CE:  MOVLW  00
063D0:  ADDWFC 02,W
063D2:  MOVWF  x60
063D4:  MOVLW  01
063D6:  ADDWF  x5F,W
063D8:  MOVWF  01
063DA:  MOVLW  00
063DC:  ADDWFC x60,W
063DE:  MOVWF  03
063E0:  MOVF   01,W
063E2:  ADDLW  3E
063E4:  MOVWF  01
063E6:  MOVLW  01
063E8:  ADDWFC 03,F
063EA:  MOVF   01,W
063EC:  ADDLW  02
063EE:  MOVWF  FE9
063F0:  MOVLW  00
063F2:  ADDWFC 03,W
063F4:  MOVWF  FEA
063F6:  BCF    FEF.0
063F8:  CLRF   1B
063FA:  BTFSC  FF2.7
063FC:  BSF    1B.7
063FE:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
06400:  CLRF   xD7
06402:  MOVFF  65E,6D6
06406:  CLRF   xD9
06408:  MOVLW  21
0640A:  MOVWF  xD8
0640C:  MOVLB  0
0640E:  CALL   0360
06412:  BTFSC  1B.7
06414:  BSF    FF2.7
06416:  MOVF   01,W
06418:  ADDLW  02
0641A:  MOVLB  6
0641C:  MOVWF  x5F
0641E:  MOVLW  00
06420:  ADDWFC 02,W
06422:  MOVWF  x60
06424:  MOVLW  01
06426:  ADDWF  x5F,W
06428:  MOVWF  01
0642A:  MOVLW  00
0642C:  ADDWFC x60,W
0642E:  MOVWF  03
06430:  MOVF   01,W
06432:  ADDLW  3E
06434:  MOVWF  01
06436:  MOVLW  01
06438:  ADDWFC 03,F
0643A:  MOVF   01,W
0643C:  ADDLW  01
0643E:  MOVWF  FE9
06440:  MOVLW  00
06442:  ADDWFC 03,W
06444:  MOVWF  FEA
06446:  CLRF   FEF
06448:  CLRF   1B
0644A:  BTFSC  FF2.7
0644C:  BSF    1B.7
0644E:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
06450:  CLRF   xD7
06452:  MOVFF  65E,6D6
06456:  CLRF   xD9
06458:  MOVLW  21
0645A:  MOVWF  xD8
0645C:  MOVLB  0
0645E:  CALL   0360
06462:  BTFSC  1B.7
06464:  BSF    FF2.7
06466:  MOVF   01,W
06468:  ADDLW  02
0646A:  MOVLB  6
0646C:  MOVWF  x5F
0646E:  MOVLW  00
06470:  ADDWFC 02,W
06472:  MOVWF  x60
06474:  MOVLW  01
06476:  ADDWF  x5F,W
06478:  MOVWF  01
0647A:  MOVLW  00
0647C:  ADDWFC x60,W
0647E:  MOVWF  03
06480:  MOVF   01,W
06482:  ADDLW  3E
06484:  MOVWF  01
06486:  MOVLW  01
06488:  ADDWFC 03,F
0648A:  MOVF   01,W
0648C:  ADDLW  05
0648E:  MOVWF  FE9
06490:  MOVLW  00
06492:  ADDWFC 03,W
06494:  MOVWF  FEA
06496:  BTFSS  FEF.0
06498:  BRA    65EE
0649A:  CLRF   1B
0649C:  BTFSC  FF2.7
0649E:  BSF    1B.7
064A0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
064A2:  CLRF   xD7
064A4:  MOVFF  65E,6D6
064A8:  CLRF   xD9
064AA:  MOVLW  21
064AC:  MOVWF  xD8
064AE:  MOVLB  0
064B0:  CALL   0360
064B4:  BTFSC  1B.7
064B6:  BSF    FF2.7
064B8:  MOVF   01,W
064BA:  ADDLW  02
064BC:  MOVLB  6
064BE:  MOVWF  x5F
064C0:  MOVLW  00
064C2:  ADDWFC 02,W
064C4:  MOVWF  x60
064C6:  MOVLW  01
064C8:  ADDWF  x5F,W
064CA:  MOVWF  01
064CC:  MOVLW  00
064CE:  ADDWFC x60,W
064D0:  MOVWF  03
064D2:  MOVF   01,W
064D4:  ADDLW  3E
064D6:  MOVWF  01
064D8:  MOVLW  01
064DA:  ADDWFC 03,F
064DC:  MOVF   01,W
064DE:  ADDLW  03
064E0:  MOVWF  FE9
064E2:  MOVLW  00
064E4:  ADDWFC 03,W
064E6:  MOVWF  FEA
064E8:  MOVFF  FEF,661
064EC:  CLRF   1B
064EE:  BTFSC  FF2.7
064F0:  BSF    1B.7
064F2:  BCF    FF2.7
064F4:  CLRF   xD7
064F6:  MOVFF  65E,6D6
064FA:  CLRF   xD9
064FC:  MOVLW  21
064FE:  MOVWF  xD8
06500:  MOVLB  0
06502:  CALL   0360
06506:  BTFSC  1B.7
06508:  BSF    FF2.7
0650A:  MOVF   01,W
0650C:  ADDLW  02
0650E:  MOVLB  6
06510:  MOVWF  x62
06512:  MOVLW  00
06514:  ADDWFC 02,W
06516:  MOVWF  x63
06518:  MOVLW  01
0651A:  ADDWF  x62,W
0651C:  MOVWF  01
0651E:  MOVLW  00
06520:  ADDWFC x63,W
06522:  MOVWF  03
06524:  MOVF   01,W
06526:  ADDLW  3E
06528:  MOVWF  01
0652A:  MOVLW  01
0652C:  ADDWFC 03,F
0652E:  MOVF   01,W
06530:  ADDLW  04
06532:  MOVWF  FE9
06534:  MOVLW  00
06536:  ADDWFC 03,W
06538:  MOVWF  FEA
0653A:  MOVFF  FEF,664
0653E:  MOVFF  661,665
06542:  MOVFF  664,666
06546:  MOVLB  0
06548:  CALL   59FA
0654C:  CLRF   1B
0654E:  BTFSC  FF2.7
06550:  BSF    1B.7
06552:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06554:  MOVLB  6
06556:  CLRF   xD7
06558:  MOVFF  65E,6D6
0655C:  CLRF   xD9
0655E:  MOVLW  21
06560:  MOVWF  xD8
06562:  MOVLB  0
06564:  CALL   0360
06568:  BTFSC  1B.7
0656A:  BSF    FF2.7
0656C:  MOVF   01,W
0656E:  ADDLW  02
06570:  MOVLB  6
06572:  MOVWF  x5F
06574:  MOVLW  00
06576:  ADDWFC 02,W
06578:  MOVWF  x60
0657A:  MOVLW  01
0657C:  ADDWF  x5F,W
0657E:  MOVWF  01
06580:  MOVLW  00
06582:  ADDWFC x60,W
06584:  MOVWF  03
06586:  MOVF   01,W
06588:  ADDLW  3E
0658A:  MOVWF  01
0658C:  MOVLW  01
0658E:  ADDWFC 03,F
06590:  MOVF   01,W
06592:  ADDLW  05
06594:  MOVWF  FE9
06596:  MOVLW  00
06598:  ADDWFC 03,W
0659A:  MOVWF  FEA
0659C:  BCF    FEF.0
0659E:  CLRF   1B
065A0:  BTFSC  FF2.7
065A2:  BSF    1B.7
065A4:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
065A6:  CLRF   xD7
065A8:  MOVFF  65E,6D6
065AC:  CLRF   xD9
065AE:  MOVLW  21
065B0:  MOVWF  xD8
065B2:  MOVLB  0
065B4:  CALL   0360
065B8:  BTFSC  1B.7
065BA:  BSF    FF2.7
065BC:  MOVF   01,W
065BE:  ADDLW  02
065C0:  MOVLB  6
065C2:  MOVWF  x5F
065C4:  MOVLW  00
065C6:  ADDWFC 02,W
065C8:  MOVWF  x60
065CA:  MOVLW  01
065CC:  ADDWF  x5F,W
065CE:  MOVWF  01
065D0:  MOVLW  00
065D2:  ADDWFC x60,W
065D4:  MOVWF  03
065D6:  MOVF   01,W
065D8:  ADDLW  3E
065DA:  MOVWF  01
065DC:  MOVLW  01
065DE:  ADDWFC 03,F
065E0:  MOVF   01,W
065E2:  ADDLW  04
065E4:  MOVWF  FE9
065E6:  MOVLW  00
065E8:  ADDWFC 03,W
065EA:  MOVWF  FEA
065EC:  CLRF   FEF
....................          } 
....................  
....................          break; 
065EE:  BRA    6944
....................          case timer: 
065F0:  CLRF   1B
065F2:  BTFSC  FF2.7
065F4:  BSF    1B.7
065F6:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
065F8:  MOVLB  6
065FA:  CLRF   xD7
065FC:  MOVFF  65E,6D6
06600:  CLRF   xD9
06602:  MOVLW  21
06604:  MOVWF  xD8
06606:  MOVLB  0
06608:  CALL   0360
0660C:  BTFSC  1B.7
0660E:  BSF    FF2.7
06610:  MOVF   01,W
06612:  ADDLW  02
06614:  MOVLB  6
06616:  MOVWF  x5F
06618:  MOVLW  00
0661A:  ADDWFC 02,W
0661C:  MOVWF  x60
0661E:  MOVLW  01
06620:  ADDWF  x5F,W
06622:  MOVWF  01
06624:  MOVLW  00
06626:  ADDWFC x60,W
06628:  MOVWF  03
0662A:  MOVF   01,W
0662C:  ADDLW  3E
0662E:  MOVWF  01
06630:  MOVLW  01
06632:  ADDWFC 03,F
06634:  MOVF   01,W
06636:  ADDLW  05
06638:  MOVWF  FE9
0663A:  MOVLW  00
0663C:  ADDWFC 03,W
0663E:  MOVWF  FEA
06640:  BTFSS  FEF.0
06642:  BRA    6798
06644:  CLRF   1B
06646:  BTFSC  FF2.7
06648:  BSF    1B.7
0664A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
0664C:  CLRF   xD7
0664E:  MOVFF  65E,6D6
06652:  CLRF   xD9
06654:  MOVLW  21
06656:  MOVWF  xD8
06658:  MOVLB  0
0665A:  CALL   0360
0665E:  BTFSC  1B.7
06660:  BSF    FF2.7
06662:  MOVF   01,W
06664:  ADDLW  02
06666:  MOVLB  6
06668:  MOVWF  x5F
0666A:  MOVLW  00
0666C:  ADDWFC 02,W
0666E:  MOVWF  x60
06670:  MOVLW  01
06672:  ADDWF  x5F,W
06674:  MOVWF  01
06676:  MOVLW  00
06678:  ADDWFC x60,W
0667A:  MOVWF  03
0667C:  MOVF   01,W
0667E:  ADDLW  3E
06680:  MOVWF  01
06682:  MOVLW  01
06684:  ADDWFC 03,F
06686:  MOVF   01,W
06688:  ADDLW  03
0668A:  MOVWF  FE9
0668C:  MOVLW  00
0668E:  ADDWFC 03,W
06690:  MOVWF  FEA
06692:  MOVFF  FEF,661
06696:  CLRF   1B
06698:  BTFSC  FF2.7
0669A:  BSF    1B.7
0669C:  BCF    FF2.7
0669E:  CLRF   xD7
066A0:  MOVFF  65E,6D6
066A4:  CLRF   xD9
066A6:  MOVLW  21
066A8:  MOVWF  xD8
066AA:  MOVLB  0
066AC:  CALL   0360
066B0:  BTFSC  1B.7
066B2:  BSF    FF2.7
066B4:  MOVF   01,W
066B6:  ADDLW  02
066B8:  MOVLB  6
066BA:  MOVWF  x62
066BC:  MOVLW  00
066BE:  ADDWFC 02,W
066C0:  MOVWF  x63
066C2:  MOVLW  01
066C4:  ADDWF  x62,W
066C6:  MOVWF  01
066C8:  MOVLW  00
066CA:  ADDWFC x63,W
066CC:  MOVWF  03
066CE:  MOVF   01,W
066D0:  ADDLW  3E
066D2:  MOVWF  01
066D4:  MOVLW  01
066D6:  ADDWFC 03,F
066D8:  MOVF   01,W
066DA:  ADDLW  04
066DC:  MOVWF  FE9
066DE:  MOVLW  00
066E0:  ADDWFC 03,W
066E2:  MOVWF  FEA
066E4:  MOVFF  FEF,664
066E8:  MOVFF  661,665
066EC:  MOVFF  664,666
066F0:  MOVLB  0
066F2:  CALL   59FA
066F6:  CLRF   1B
066F8:  BTFSC  FF2.7
066FA:  BSF    1B.7
066FC:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
066FE:  MOVLB  6
06700:  CLRF   xD7
06702:  MOVFF  65E,6D6
06706:  CLRF   xD9
06708:  MOVLW  21
0670A:  MOVWF  xD8
0670C:  MOVLB  0
0670E:  CALL   0360
06712:  BTFSC  1B.7
06714:  BSF    FF2.7
06716:  MOVF   01,W
06718:  ADDLW  02
0671A:  MOVLB  6
0671C:  MOVWF  x5F
0671E:  MOVLW  00
06720:  ADDWFC 02,W
06722:  MOVWF  x60
06724:  MOVLW  01
06726:  ADDWF  x5F,W
06728:  MOVWF  01
0672A:  MOVLW  00
0672C:  ADDWFC x60,W
0672E:  MOVWF  03
06730:  MOVF   01,W
06732:  ADDLW  3E
06734:  MOVWF  01
06736:  MOVLW  01
06738:  ADDWFC 03,F
0673A:  MOVF   01,W
0673C:  ADDLW  05
0673E:  MOVWF  FE9
06740:  MOVLW  00
06742:  ADDWFC 03,W
06744:  MOVWF  FEA
06746:  BCF    FEF.0
06748:  CLRF   1B
0674A:  BTFSC  FF2.7
0674C:  BSF    1B.7
0674E:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
06750:  CLRF   xD7
06752:  MOVFF  65E,6D6
06756:  CLRF   xD9
06758:  MOVLW  21
0675A:  MOVWF  xD8
0675C:  MOVLB  0
0675E:  CALL   0360
06762:  BTFSC  1B.7
06764:  BSF    FF2.7
06766:  MOVF   01,W
06768:  ADDLW  02
0676A:  MOVLB  6
0676C:  MOVWF  x5F
0676E:  MOVLW  00
06770:  ADDWFC 02,W
06772:  MOVWF  x60
06774:  MOVLW  01
06776:  ADDWF  x5F,W
06778:  MOVWF  01
0677A:  MOVLW  00
0677C:  ADDWFC x60,W
0677E:  MOVWF  03
06780:  MOVF   01,W
06782:  ADDLW  3E
06784:  MOVWF  01
06786:  MOVLW  01
06788:  ADDWFC 03,F
0678A:  MOVF   01,W
0678C:  ADDLW  04
0678E:  MOVWF  FE9
06790:  MOVLW  00
06792:  ADDWFC 03,W
06794:  MOVWF  FEA
06796:  CLRF   FEF
06798:  CLRF   1B
0679A:  BTFSC  FF2.7
0679C:  BSF    1B.7
0679E:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
067A0:  CLRF   xD7
067A2:  MOVFF  65E,6D6
067A6:  CLRF   xD9
067A8:  MOVLW  21
067AA:  MOVWF  xD8
067AC:  MOVLB  0
067AE:  CALL   0360
067B2:  BTFSC  1B.7
067B4:  BSF    FF2.7
067B6:  MOVF   01,W
067B8:  ADDLW  02
067BA:  MOVLB  6
067BC:  MOVWF  x5F
067BE:  MOVLW  00
067C0:  ADDWFC 02,W
067C2:  MOVWF  x60
067C4:  MOVLW  01
067C6:  ADDWF  x5F,W
067C8:  MOVWF  01
067CA:  MOVLW  00
067CC:  ADDWFC x60,W
067CE:  MOVWF  03
067D0:  MOVF   01,W
067D2:  ADDLW  3E
067D4:  MOVWF  01
067D6:  MOVLW  01
067D8:  ADDWFC 03,F
067DA:  MOVF   01,W
067DC:  ADDLW  08
067DE:  MOVWF  FE9
067E0:  MOVLW  00
067E2:  ADDWFC 03,W
067E4:  MOVWF  FEA
067E6:  BTFSS  FEF.0
067E8:  BRA    693E
067EA:  CLRF   1B
067EC:  BTFSC  FF2.7
067EE:  BSF    1B.7
067F0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
067F2:  CLRF   xD7
067F4:  MOVFF  65E,6D6
067F8:  CLRF   xD9
067FA:  MOVLW  21
067FC:  MOVWF  xD8
067FE:  MOVLB  0
06800:  CALL   0360
06804:  BTFSC  1B.7
06806:  BSF    FF2.7
06808:  MOVF   01,W
0680A:  ADDLW  02
0680C:  MOVLB  6
0680E:  MOVWF  x5F
06810:  MOVLW  00
06812:  ADDWFC 02,W
06814:  MOVWF  x60
06816:  MOVLW  01
06818:  ADDWF  x5F,W
0681A:  MOVWF  01
0681C:  MOVLW  00
0681E:  ADDWFC x60,W
06820:  MOVWF  03
06822:  MOVF   01,W
06824:  ADDLW  3E
06826:  MOVWF  01
06828:  MOVLW  01
0682A:  ADDWFC 03,F
0682C:  MOVF   01,W
0682E:  ADDLW  06
06830:  MOVWF  FE9
06832:  MOVLW  00
06834:  ADDWFC 03,W
06836:  MOVWF  FEA
06838:  MOVFF  FEF,661
0683C:  CLRF   1B
0683E:  BTFSC  FF2.7
06840:  BSF    1B.7
06842:  BCF    FF2.7
06844:  CLRF   xD7
06846:  MOVFF  65E,6D6
0684A:  CLRF   xD9
0684C:  MOVLW  21
0684E:  MOVWF  xD8
06850:  MOVLB  0
06852:  CALL   0360
06856:  BTFSC  1B.7
06858:  BSF    FF2.7
0685A:  MOVF   01,W
0685C:  ADDLW  02
0685E:  MOVLB  6
06860:  MOVWF  x62
06862:  MOVLW  00
06864:  ADDWFC 02,W
06866:  MOVWF  x63
06868:  MOVLW  01
0686A:  ADDWF  x62,W
0686C:  MOVWF  01
0686E:  MOVLW  00
06870:  ADDWFC x63,W
06872:  MOVWF  03
06874:  MOVF   01,W
06876:  ADDLW  3E
06878:  MOVWF  01
0687A:  MOVLW  01
0687C:  ADDWFC 03,F
0687E:  MOVF   01,W
06880:  ADDLW  07
06882:  MOVWF  FE9
06884:  MOVLW  00
06886:  ADDWFC 03,W
06888:  MOVWF  FEA
0688A:  MOVFF  FEF,664
0688E:  MOVFF  661,665
06892:  MOVFF  664,666
06896:  MOVLB  0
06898:  CALL   59FA
0689C:  CLRF   1B
0689E:  BTFSC  FF2.7
068A0:  BSF    1B.7
068A2:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
068A4:  MOVLB  6
068A6:  CLRF   xD7
068A8:  MOVFF  65E,6D6
068AC:  CLRF   xD9
068AE:  MOVLW  21
068B0:  MOVWF  xD8
068B2:  MOVLB  0
068B4:  CALL   0360
068B8:  BTFSC  1B.7
068BA:  BSF    FF2.7
068BC:  MOVF   01,W
068BE:  ADDLW  02
068C0:  MOVLB  6
068C2:  MOVWF  x5F
068C4:  MOVLW  00
068C6:  ADDWFC 02,W
068C8:  MOVWF  x60
068CA:  MOVLW  01
068CC:  ADDWF  x5F,W
068CE:  MOVWF  01
068D0:  MOVLW  00
068D2:  ADDWFC x60,W
068D4:  MOVWF  03
068D6:  MOVF   01,W
068D8:  ADDLW  3E
068DA:  MOVWF  01
068DC:  MOVLW  01
068DE:  ADDWFC 03,F
068E0:  MOVF   01,W
068E2:  ADDLW  08
068E4:  MOVWF  FE9
068E6:  MOVLW  00
068E8:  ADDWFC 03,W
068EA:  MOVWF  FEA
068EC:  BCF    FEF.0
068EE:  CLRF   1B
068F0:  BTFSC  FF2.7
068F2:  BSF    1B.7
068F4:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
068F6:  CLRF   xD7
068F8:  MOVFF  65E,6D6
068FC:  CLRF   xD9
068FE:  MOVLW  21
06900:  MOVWF  xD8
06902:  MOVLB  0
06904:  CALL   0360
06908:  BTFSC  1B.7
0690A:  BSF    FF2.7
0690C:  MOVF   01,W
0690E:  ADDLW  02
06910:  MOVLB  6
06912:  MOVWF  x5F
06914:  MOVLW  00
06916:  ADDWFC 02,W
06918:  MOVWF  x60
0691A:  MOVLW  01
0691C:  ADDWF  x5F,W
0691E:  MOVWF  01
06920:  MOVLW  00
06922:  ADDWFC x60,W
06924:  MOVWF  03
06926:  MOVF   01,W
06928:  ADDLW  3E
0692A:  MOVWF  01
0692C:  MOVLW  01
0692E:  ADDWFC 03,F
06930:  MOVF   01,W
06932:  ADDLW  07
06934:  MOVWF  FE9
06936:  MOVLW  00
06938:  ADDWFC 03,W
0693A:  MOVWF  FEA
0693C:  CLRF   FEF
....................          } 
....................          break; 
0693E:  BRA    6944
....................          default: 
....................          break; 
06940:  MOVLB  6
06942:  BRA    6944
....................       } 
....................    } 
06944:  INCF   x5E,F
06946:  GOTO   5A0C
.................... } 
0694A:  MOVLB  0
0694C:  GOTO   7BC2 (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
06950:  MOVLB  6
06952:  CLRF   x5E
06954:  MOVLB  1
06956:  MOVF   x3F,W
06958:  MOVLB  6
0695A:  SUBWF  x5E,W
0695C:  BTFSC  FD8.0
0695E:  GOTO   7164
06962:  CLRF   1B
06964:  BTFSC  FF2.7
06966:  BSF    1B.7
06968:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
0696A:  CLRF   xD7
0696C:  MOVFF  65E,6D6
06970:  CLRF   xD9
06972:  MOVLW  2F
06974:  MOVWF  xD8
06976:  MOVLB  0
06978:  CALL   0360
0697C:  BTFSC  1B.7
0697E:  BSF    FF2.7
06980:  MOVFF  02,03
06984:  MOVF   01,W
06986:  ADDLW  8A
06988:  MOVWF  01
0698A:  MOVLW  02
0698C:  ADDWFC 03,F
0698E:  MOVFF  01,FE9
06992:  MOVFF  03,FEA
06996:  MOVF   FEF,W
06998:  XORLW  66
0699A:  BZ    699E
0699C:  BRA    715C
....................            case shutter: 
0699E:  CLRF   1B
069A0:  BTFSC  FF2.7
069A2:  BSF    1B.7
069A4:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
069A6:  MOVLB  6
069A8:  CLRF   xD7
069AA:  MOVFF  65E,6D6
069AE:  CLRF   xD9
069B0:  MOVLW  2F
069B2:  MOVWF  xD8
069B4:  MOVLB  0
069B6:  CALL   0360
069BA:  BTFSC  1B.7
069BC:  BSF    FF2.7
069BE:  MOVF   01,W
069C0:  ADDLW  4C
069C2:  MOVLB  6
069C4:  MOVWF  x5F
069C6:  MOVLW  01
069C8:  ADDWFC 02,W
069CA:  MOVWF  x60
069CC:  MOVLW  01
069CE:  ADDWF  x5F,W
069D0:  MOVWF  01
069D2:  MOVLW  00
069D4:  ADDWFC x60,W
069D6:  MOVWF  03
069D8:  MOVF   01,W
069DA:  ADDLW  3E
069DC:  MOVWF  01
069DE:  MOVLW  01
069E0:  ADDWFC 03,F
069E2:  MOVF   01,W
069E4:  ADDLW  2D
069E6:  MOVWF  FE9
069E8:  MOVLW  00
069EA:  ADDWFC 03,W
069EC:  MOVWF  FEA
069EE:  MOVF   FEF,W
069F0:  SUBLW  04
069F2:  BTFSC  FD8.2
069F4:  BRA    7158
069F6:  CLRF   1B
069F8:  BTFSC  FF2.7
069FA:  BSF    1B.7
069FC:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
069FE:  CLRF   xD7
06A00:  MOVFF  65E,6D6
06A04:  CLRF   xD9
06A06:  MOVLW  2F
06A08:  MOVWF  xD8
06A0A:  MOVLB  0
06A0C:  CALL   0360
06A10:  BTFSC  1B.7
06A12:  BSF    FF2.7
06A14:  MOVF   01,W
06A16:  ADDLW  4C
06A18:  MOVLB  6
06A1A:  MOVWF  x5F
06A1C:  MOVLW  01
06A1E:  ADDWFC 02,W
06A20:  MOVWF  x60
06A22:  MOVLW  01
06A24:  ADDWF  x5F,W
06A26:  MOVWF  01
06A28:  MOVLW  00
06A2A:  ADDWFC x60,W
06A2C:  MOVWF  03
06A2E:  MOVF   01,W
06A30:  ADDLW  3E
06A32:  MOVWF  01
06A34:  MOVLW  01
06A36:  ADDWFC 03,F
06A38:  MOVF   01,W
06A3A:  ADDLW  2A
06A3C:  MOVWF  FE9
06A3E:  MOVLW  00
06A40:  ADDWFC 03,W
06A42:  MOVWF  FEA
06A44:  INCF   FEF,F
06A46:  CLRF   1B
06A48:  BTFSC  FF2.7
06A4A:  BSF    1B.7
06A4C:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
06A4E:  CLRF   xD7
06A50:  MOVFF  65E,6D6
06A54:  CLRF   xD9
06A56:  MOVLW  2F
06A58:  MOVWF  xD8
06A5A:  MOVLB  0
06A5C:  CALL   0360
06A60:  BTFSC  1B.7
06A62:  BSF    FF2.7
06A64:  MOVF   01,W
06A66:  ADDLW  4C
06A68:  MOVLB  6
06A6A:  MOVWF  x5F
06A6C:  MOVLW  01
06A6E:  ADDWFC 02,W
06A70:  MOVWF  x60
06A72:  MOVLW  01
06A74:  ADDWF  x5F,W
06A76:  MOVWF  01
06A78:  MOVLW  00
06A7A:  ADDWFC x60,W
06A7C:  MOVWF  03
06A7E:  MOVF   01,W
06A80:  ADDLW  3E
06A82:  MOVWF  01
06A84:  MOVLW  01
06A86:  ADDWFC 03,F
06A88:  MOVF   01,W
06A8A:  ADDLW  2D
06A8C:  MOVWF  FE9
06A8E:  MOVLW  00
06A90:  ADDWFC 03,W
06A92:  MOVWF  FEA
06A94:  MOVF   FEF,F
06A96:  BTFSS  FD8.2
06A98:  BRA    6C0A
06A9A:  CLRF   1B
06A9C:  BTFSC  FF2.7
06A9E:  BSF    1B.7
06AA0:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
06AA2:  CLRF   xD7
06AA4:  MOVFF  65E,6D6
06AA8:  CLRF   xD9
06AAA:  MOVLW  2F
06AAC:  MOVWF  xD8
06AAE:  MOVLB  0
06AB0:  CALL   0360
06AB4:  BTFSC  1B.7
06AB6:  BSF    FF2.7
06AB8:  MOVF   01,W
06ABA:  ADDLW  4C
06ABC:  MOVLB  6
06ABE:  MOVWF  x5F
06AC0:  MOVLW  01
06AC2:  ADDWFC 02,W
06AC4:  MOVWF  x60
06AC6:  MOVLW  01
06AC8:  ADDWF  x5F,W
06ACA:  MOVWF  01
06ACC:  MOVLW  00
06ACE:  ADDWFC x60,W
06AD0:  MOVWF  03
06AD2:  MOVF   01,W
06AD4:  ADDLW  3E
06AD6:  MOVWF  01
06AD8:  MOVLW  01
06ADA:  ADDWFC 03,F
06ADC:  MOVF   01,W
06ADE:  ADDLW  2A
06AE0:  MOVWF  FE9
06AE2:  MOVLW  00
06AE4:  ADDWFC 03,W
06AE6:  MOVWF  FEA
06AE8:  MOVFF  FEF,661
06AEC:  CLRF   1B
06AEE:  BTFSC  FF2.7
06AF0:  BSF    1B.7
06AF2:  BCF    FF2.7
06AF4:  CLRF   xD7
06AF6:  MOVFF  65E,6D6
06AFA:  CLRF   xD9
06AFC:  MOVLW  2F
06AFE:  MOVWF  xD8
06B00:  MOVLB  0
06B02:  CALL   0360
06B06:  BTFSC  1B.7
06B08:  BSF    FF2.7
06B0A:  MOVF   01,W
06B0C:  ADDLW  4C
06B0E:  MOVLB  6
06B10:  MOVWF  x62
06B12:  MOVLW  01
06B14:  ADDWFC 02,W
06B16:  MOVWF  x63
06B18:  MOVLW  01
06B1A:  ADDWF  x62,W
06B1C:  MOVWF  01
06B1E:  MOVLW  00
06B20:  ADDWFC x63,W
06B22:  MOVWF  03
06B24:  MOVF   01,W
06B26:  ADDLW  3E
06B28:  MOVWF  01
06B2A:  MOVLW  01
06B2C:  ADDWFC 03,F
06B2E:  MOVF   01,W
06B30:  ADDLW  2C
06B32:  MOVWF  FE9
06B34:  MOVLW  00
06B36:  ADDWFC 03,W
06B38:  MOVWF  FEA
06B3A:  MOVF   FEF,W
06B3C:  SUBWF  x61,W
06B3E:  BZ    6C0A
06B40:  BNC   6C0A
06B42:  CLRF   1B
06B44:  BTFSC  FF2.7
06B46:  BSF    1B.7
06B48:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
06B4A:  CLRF   xD7
06B4C:  MOVFF  65E,6D6
06B50:  CLRF   xD9
06B52:  MOVLW  2F
06B54:  MOVWF  xD8
06B56:  MOVLB  0
06B58:  CALL   0360
06B5C:  BTFSC  1B.7
06B5E:  BSF    FF2.7
06B60:  MOVF   01,W
06B62:  ADDLW  4C
06B64:  MOVLB  6
06B66:  MOVWF  x5F
06B68:  MOVLW  01
06B6A:  ADDWFC 02,W
06B6C:  MOVWF  x60
06B6E:  MOVLW  01
06B70:  ADDWF  x5F,W
06B72:  MOVWF  01
06B74:  MOVLW  00
06B76:  ADDWFC x60,W
06B78:  MOVWF  03
06B7A:  MOVF   01,W
06B7C:  ADDLW  3E
06B7E:  MOVWF  01
06B80:  MOVLW  01
06B82:  ADDWFC 03,F
06B84:  MOVF   01,W
06B86:  ADDLW  2D
06B88:  MOVWF  FE9
06B8A:  MOVLW  00
06B8C:  ADDWFC 03,W
06B8E:  MOVWF  FEA
06B90:  MOVLW  04
06B92:  MOVWF  FEF
06B94:  CLRF   1B
06B96:  BTFSC  FF2.7
06B98:  BSF    1B.7
06B9A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
06B9C:  CLRF   xD7
06B9E:  MOVFF  65E,6D6
06BA2:  CLRF   xD9
06BA4:  MOVLW  2F
06BA6:  MOVWF  xD8
06BA8:  MOVLB  0
06BAA:  CALL   0360
06BAE:  BTFSC  1B.7
06BB0:  BSF    FF2.7
06BB2:  MOVF   01,W
06BB4:  ADDLW  4C
06BB6:  MOVLB  6
06BB8:  MOVWF  x5F
06BBA:  MOVLW  01
06BBC:  ADDWFC 02,W
06BBE:  MOVWF  x60
06BC0:  MOVLW  01
06BC2:  ADDWF  x5F,W
06BC4:  MOVWF  01
06BC6:  MOVLW  00
06BC8:  ADDWFC x60,W
06BCA:  MOVWF  03
06BCC:  MOVF   01,W
06BCE:  ADDLW  3E
06BD0:  MOVWF  01
06BD2:  MOVLW  01
06BD4:  ADDWFC 03,F
06BD6:  MOVF   01,W
06BD8:  ADDLW  28
06BDA:  MOVWF  FE9
06BDC:  MOVLW  00
06BDE:  ADDWFC 03,W
06BE0:  MOVWF  FEA
06BE2:  BCF    FD8.0
06BE4:  RLCF   FEF,W
06BE6:  CLRF   03
06BE8:  MOVLB  0
06BEA:  CALL   0172
06BEE:  TBLRD*+
06BF0:  MOVFF  FF5,03
06BF4:  CLRF   00
06BF6:  DECF   00,F
06BF8:  XORWF  00,F
06BFA:  MOVLW  FF
06BFC:  XORWF  03,F
06BFE:  MOVF   00,W
06C00:  MOVLB  5
06C02:  IORWF  x7F,F
06C04:  MOVF   03,W
06C06:  IORWF  x80,F
06C08:  MOVLB  6
06C0A:  CLRF   1B
06C0C:  BTFSC  FF2.7
06C0E:  BSF    1B.7
06C10:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
06C12:  CLRF   xD7
06C14:  MOVFF  65E,6D6
06C18:  CLRF   xD9
06C1A:  MOVLW  2F
06C1C:  MOVWF  xD8
06C1E:  MOVLB  0
06C20:  CALL   0360
06C24:  BTFSC  1B.7
06C26:  BSF    FF2.7
06C28:  MOVF   01,W
06C2A:  ADDLW  4C
06C2C:  MOVLB  6
06C2E:  MOVWF  x5F
06C30:  MOVLW  01
06C32:  ADDWFC 02,W
06C34:  MOVWF  x60
06C36:  MOVLW  01
06C38:  ADDWF  x5F,W
06C3A:  MOVWF  01
06C3C:  MOVLW  00
06C3E:  ADDWFC x60,W
06C40:  MOVWF  03
06C42:  MOVF   01,W
06C44:  ADDLW  3E
06C46:  MOVWF  01
06C48:  MOVLW  01
06C4A:  ADDWFC 03,F
06C4C:  MOVF   01,W
06C4E:  ADDLW  2D
06C50:  MOVWF  FE9
06C52:  MOVLW  00
06C54:  ADDWFC 03,W
06C56:  MOVWF  FEA
06C58:  DECFSZ FEF,W
06C5A:  BRA    6DCC
06C5C:  CLRF   1B
06C5E:  BTFSC  FF2.7
06C60:  BSF    1B.7
06C62:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
06C64:  CLRF   xD7
06C66:  MOVFF  65E,6D6
06C6A:  CLRF   xD9
06C6C:  MOVLW  2F
06C6E:  MOVWF  xD8
06C70:  MOVLB  0
06C72:  CALL   0360
06C76:  BTFSC  1B.7
06C78:  BSF    FF2.7
06C7A:  MOVF   01,W
06C7C:  ADDLW  4C
06C7E:  MOVLB  6
06C80:  MOVWF  x5F
06C82:  MOVLW  01
06C84:  ADDWFC 02,W
06C86:  MOVWF  x60
06C88:  MOVLW  01
06C8A:  ADDWF  x5F,W
06C8C:  MOVWF  01
06C8E:  MOVLW  00
06C90:  ADDWFC x60,W
06C92:  MOVWF  03
06C94:  MOVF   01,W
06C96:  ADDLW  3E
06C98:  MOVWF  01
06C9A:  MOVLW  01
06C9C:  ADDWFC 03,F
06C9E:  MOVF   01,W
06CA0:  ADDLW  2A
06CA2:  MOVWF  FE9
06CA4:  MOVLW  00
06CA6:  ADDWFC 03,W
06CA8:  MOVWF  FEA
06CAA:  MOVFF  FEF,661
06CAE:  CLRF   1B
06CB0:  BTFSC  FF2.7
06CB2:  BSF    1B.7
06CB4:  BCF    FF2.7
06CB6:  CLRF   xD7
06CB8:  MOVFF  65E,6D6
06CBC:  CLRF   xD9
06CBE:  MOVLW  2F
06CC0:  MOVWF  xD8
06CC2:  MOVLB  0
06CC4:  CALL   0360
06CC8:  BTFSC  1B.7
06CCA:  BSF    FF2.7
06CCC:  MOVF   01,W
06CCE:  ADDLW  4C
06CD0:  MOVLB  6
06CD2:  MOVWF  x62
06CD4:  MOVLW  01
06CD6:  ADDWFC 02,W
06CD8:  MOVWF  x63
06CDA:  MOVLW  01
06CDC:  ADDWF  x62,W
06CDE:  MOVWF  01
06CE0:  MOVLW  00
06CE2:  ADDWFC x63,W
06CE4:  MOVWF  03
06CE6:  MOVF   01,W
06CE8:  ADDLW  3E
06CEA:  MOVWF  01
06CEC:  MOVLW  01
06CEE:  ADDWFC 03,F
06CF0:  MOVF   01,W
06CF2:  ADDLW  2C
06CF4:  MOVWF  FE9
06CF6:  MOVLW  00
06CF8:  ADDWFC 03,W
06CFA:  MOVWF  FEA
06CFC:  MOVF   FEF,W
06CFE:  SUBWF  x61,W
06D00:  BZ    6DCC
06D02:  BNC   6DCC
06D04:  CLRF   1B
06D06:  BTFSC  FF2.7
06D08:  BSF    1B.7
06D0A:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
06D0C:  CLRF   xD7
06D0E:  MOVFF  65E,6D6
06D12:  CLRF   xD9
06D14:  MOVLW  2F
06D16:  MOVWF  xD8
06D18:  MOVLB  0
06D1A:  CALL   0360
06D1E:  BTFSC  1B.7
06D20:  BSF    FF2.7
06D22:  MOVF   01,W
06D24:  ADDLW  4C
06D26:  MOVLB  6
06D28:  MOVWF  x5F
06D2A:  MOVLW  01
06D2C:  ADDWFC 02,W
06D2E:  MOVWF  x60
06D30:  MOVLW  01
06D32:  ADDWF  x5F,W
06D34:  MOVWF  01
06D36:  MOVLW  00
06D38:  ADDWFC x60,W
06D3A:  MOVWF  03
06D3C:  MOVF   01,W
06D3E:  ADDLW  3E
06D40:  MOVWF  01
06D42:  MOVLW  01
06D44:  ADDWFC 03,F
06D46:  MOVF   01,W
06D48:  ADDLW  2D
06D4A:  MOVWF  FE9
06D4C:  MOVLW  00
06D4E:  ADDWFC 03,W
06D50:  MOVWF  FEA
06D52:  MOVLW  04
06D54:  MOVWF  FEF
06D56:  CLRF   1B
06D58:  BTFSC  FF2.7
06D5A:  BSF    1B.7
06D5C:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
06D5E:  CLRF   xD7
06D60:  MOVFF  65E,6D6
06D64:  CLRF   xD9
06D66:  MOVLW  2F
06D68:  MOVWF  xD8
06D6A:  MOVLB  0
06D6C:  CALL   0360
06D70:  BTFSC  1B.7
06D72:  BSF    FF2.7
06D74:  MOVF   01,W
06D76:  ADDLW  4C
06D78:  MOVLB  6
06D7A:  MOVWF  x5F
06D7C:  MOVLW  01
06D7E:  ADDWFC 02,W
06D80:  MOVWF  x60
06D82:  MOVLW  01
06D84:  ADDWF  x5F,W
06D86:  MOVWF  01
06D88:  MOVLW  00
06D8A:  ADDWFC x60,W
06D8C:  MOVWF  03
06D8E:  MOVF   01,W
06D90:  ADDLW  3E
06D92:  MOVWF  01
06D94:  MOVLW  01
06D96:  ADDWFC 03,F
06D98:  MOVF   01,W
06D9A:  ADDLW  29
06D9C:  MOVWF  FE9
06D9E:  MOVLW  00
06DA0:  ADDWFC 03,W
06DA2:  MOVWF  FEA
06DA4:  BCF    FD8.0
06DA6:  RLCF   FEF,W
06DA8:  CLRF   03
06DAA:  MOVLB  0
06DAC:  CALL   0172
06DB0:  TBLRD*+
06DB2:  MOVFF  FF5,03
06DB6:  CLRF   00
06DB8:  DECF   00,F
06DBA:  XORWF  00,F
06DBC:  MOVLW  FF
06DBE:  XORWF  03,F
06DC0:  MOVF   00,W
06DC2:  MOVLB  5
06DC4:  IORWF  x7F,F
06DC6:  MOVF   03,W
06DC8:  IORWF  x80,F
06DCA:  MOVLB  6
06DCC:  CLRF   1B
06DCE:  BTFSC  FF2.7
06DD0:  BSF    1B.7
06DD2:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
06DD4:  CLRF   xD7
06DD6:  MOVFF  65E,6D6
06DDA:  CLRF   xD9
06DDC:  MOVLW  2F
06DDE:  MOVWF  xD8
06DE0:  MOVLB  0
06DE2:  CALL   0360
06DE6:  BTFSC  1B.7
06DE8:  BSF    FF2.7
06DEA:  MOVF   01,W
06DEC:  ADDLW  4C
06DEE:  MOVLB  6
06DF0:  MOVWF  x5F
06DF2:  MOVLW  01
06DF4:  ADDWFC 02,W
06DF6:  MOVWF  x60
06DF8:  MOVLW  01
06DFA:  ADDWF  x5F,W
06DFC:  MOVWF  01
06DFE:  MOVLW  00
06E00:  ADDWFC x60,W
06E02:  MOVWF  03
06E04:  MOVF   01,W
06E06:  ADDLW  3E
06E08:  MOVWF  01
06E0A:  MOVLW  01
06E0C:  ADDWFC 03,F
06E0E:  MOVF   01,W
06E10:  ADDLW  2D
06E12:  MOVWF  FE9
06E14:  MOVLW  00
06E16:  ADDWFC 03,W
06E18:  MOVWF  FEA
06E1A:  MOVF   FEF,W
06E1C:  SUBLW  02
06E1E:  BTFSS  FD8.2
06E20:  BRA    6F92
06E22:  CLRF   1B
06E24:  BTFSC  FF2.7
06E26:  BSF    1B.7
06E28:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
06E2A:  CLRF   xD7
06E2C:  MOVFF  65E,6D6
06E30:  CLRF   xD9
06E32:  MOVLW  2F
06E34:  MOVWF  xD8
06E36:  MOVLB  0
06E38:  CALL   0360
06E3C:  BTFSC  1B.7
06E3E:  BSF    FF2.7
06E40:  MOVF   01,W
06E42:  ADDLW  4C
06E44:  MOVLB  6
06E46:  MOVWF  x5F
06E48:  MOVLW  01
06E4A:  ADDWFC 02,W
06E4C:  MOVWF  x60
06E4E:  MOVLW  01
06E50:  ADDWF  x5F,W
06E52:  MOVWF  01
06E54:  MOVLW  00
06E56:  ADDWFC x60,W
06E58:  MOVWF  03
06E5A:  MOVF   01,W
06E5C:  ADDLW  3E
06E5E:  MOVWF  01
06E60:  MOVLW  01
06E62:  ADDWFC 03,F
06E64:  MOVF   01,W
06E66:  ADDLW  2A
06E68:  MOVWF  FE9
06E6A:  MOVLW  00
06E6C:  ADDWFC 03,W
06E6E:  MOVWF  FEA
06E70:  MOVFF  FEF,661
06E74:  CLRF   1B
06E76:  BTFSC  FF2.7
06E78:  BSF    1B.7
06E7A:  BCF    FF2.7
06E7C:  CLRF   xD7
06E7E:  MOVFF  65E,6D6
06E82:  CLRF   xD9
06E84:  MOVLW  2F
06E86:  MOVWF  xD8
06E88:  MOVLB  0
06E8A:  CALL   0360
06E8E:  BTFSC  1B.7
06E90:  BSF    FF2.7
06E92:  MOVF   01,W
06E94:  ADDLW  4C
06E96:  MOVLB  6
06E98:  MOVWF  x62
06E9A:  MOVLW  01
06E9C:  ADDWFC 02,W
06E9E:  MOVWF  x63
06EA0:  MOVLW  01
06EA2:  ADDWF  x62,W
06EA4:  MOVWF  01
06EA6:  MOVLW  00
06EA8:  ADDWFC x63,W
06EAA:  MOVWF  03
06EAC:  MOVF   01,W
06EAE:  ADDLW  3E
06EB0:  MOVWF  01
06EB2:  MOVLW  01
06EB4:  ADDWFC 03,F
06EB6:  MOVF   01,W
06EB8:  ADDLW  2B
06EBA:  MOVWF  FE9
06EBC:  MOVLW  00
06EBE:  ADDWFC 03,W
06EC0:  MOVWF  FEA
06EC2:  MOVF   FEF,W
06EC4:  SUBWF  x61,W
06EC6:  BZ    6F92
06EC8:  BNC   6F92
06ECA:  CLRF   1B
06ECC:  BTFSC  FF2.7
06ECE:  BSF    1B.7
06ED0:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
06ED2:  CLRF   xD7
06ED4:  MOVFF  65E,6D6
06ED8:  CLRF   xD9
06EDA:  MOVLW  2F
06EDC:  MOVWF  xD8
06EDE:  MOVLB  0
06EE0:  CALL   0360
06EE4:  BTFSC  1B.7
06EE6:  BSF    FF2.7
06EE8:  MOVF   01,W
06EEA:  ADDLW  4C
06EEC:  MOVLB  6
06EEE:  MOVWF  x5F
06EF0:  MOVLW  01
06EF2:  ADDWFC 02,W
06EF4:  MOVWF  x60
06EF6:  MOVLW  01
06EF8:  ADDWF  x5F,W
06EFA:  MOVWF  01
06EFC:  MOVLW  00
06EFE:  ADDWFC x60,W
06F00:  MOVWF  03
06F02:  MOVF   01,W
06F04:  ADDLW  3E
06F06:  MOVWF  01
06F08:  MOVLW  01
06F0A:  ADDWFC 03,F
06F0C:  MOVF   01,W
06F0E:  ADDLW  2D
06F10:  MOVWF  FE9
06F12:  MOVLW  00
06F14:  ADDWFC 03,W
06F16:  MOVWF  FEA
06F18:  MOVLW  04
06F1A:  MOVWF  FEF
06F1C:  CLRF   1B
06F1E:  BTFSC  FF2.7
06F20:  BSF    1B.7
06F22:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
06F24:  CLRF   xD7
06F26:  MOVFF  65E,6D6
06F2A:  CLRF   xD9
06F2C:  MOVLW  2F
06F2E:  MOVWF  xD8
06F30:  MOVLB  0
06F32:  CALL   0360
06F36:  BTFSC  1B.7
06F38:  BSF    FF2.7
06F3A:  MOVF   01,W
06F3C:  ADDLW  4C
06F3E:  MOVLB  6
06F40:  MOVWF  x5F
06F42:  MOVLW  01
06F44:  ADDWFC 02,W
06F46:  MOVWF  x60
06F48:  MOVLW  01
06F4A:  ADDWF  x5F,W
06F4C:  MOVWF  01
06F4E:  MOVLW  00
06F50:  ADDWFC x60,W
06F52:  MOVWF  03
06F54:  MOVF   01,W
06F56:  ADDLW  3E
06F58:  MOVWF  01
06F5A:  MOVLW  01
06F5C:  ADDWFC 03,F
06F5E:  MOVF   01,W
06F60:  ADDLW  28
06F62:  MOVWF  FE9
06F64:  MOVLW  00
06F66:  ADDWFC 03,W
06F68:  MOVWF  FEA
06F6A:  BCF    FD8.0
06F6C:  RLCF   FEF,W
06F6E:  CLRF   03
06F70:  MOVLB  0
06F72:  CALL   0172
06F76:  TBLRD*+
06F78:  MOVFF  FF5,03
06F7C:  CLRF   00
06F7E:  DECF   00,F
06F80:  XORWF  00,F
06F82:  MOVLW  FF
06F84:  XORWF  03,F
06F86:  MOVF   00,W
06F88:  MOVLB  5
06F8A:  IORWF  x7F,F
06F8C:  MOVF   03,W
06F8E:  IORWF  x80,F
06F90:  MOVLB  6
06F92:  CLRF   1B
06F94:  BTFSC  FF2.7
06F96:  BSF    1B.7
06F98:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
06F9A:  CLRF   xD7
06F9C:  MOVFF  65E,6D6
06FA0:  CLRF   xD9
06FA2:  MOVLW  2F
06FA4:  MOVWF  xD8
06FA6:  MOVLB  0
06FA8:  CALL   0360
06FAC:  BTFSC  1B.7
06FAE:  BSF    FF2.7
06FB0:  MOVF   01,W
06FB2:  ADDLW  4C
06FB4:  MOVLB  6
06FB6:  MOVWF  x5F
06FB8:  MOVLW  01
06FBA:  ADDWFC 02,W
06FBC:  MOVWF  x60
06FBE:  MOVLW  01
06FC0:  ADDWF  x5F,W
06FC2:  MOVWF  01
06FC4:  MOVLW  00
06FC6:  ADDWFC x60,W
06FC8:  MOVWF  03
06FCA:  MOVF   01,W
06FCC:  ADDLW  3E
06FCE:  MOVWF  01
06FD0:  MOVLW  01
06FD2:  ADDWFC 03,F
06FD4:  MOVF   01,W
06FD6:  ADDLW  2D
06FD8:  MOVWF  FE9
06FDA:  MOVLW  00
06FDC:  ADDWFC 03,W
06FDE:  MOVWF  FEA
06FE0:  MOVF   FEF,W
06FE2:  SUBLW  03
06FE4:  BTFSS  FD8.2
06FE6:  BRA    7158
06FE8:  CLRF   1B
06FEA:  BTFSC  FF2.7
06FEC:  BSF    1B.7
06FEE:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
06FF0:  CLRF   xD7
06FF2:  MOVFF  65E,6D6
06FF6:  CLRF   xD9
06FF8:  MOVLW  2F
06FFA:  MOVWF  xD8
06FFC:  MOVLB  0
06FFE:  CALL   0360
07002:  BTFSC  1B.7
07004:  BSF    FF2.7
07006:  MOVF   01,W
07008:  ADDLW  4C
0700A:  MOVLB  6
0700C:  MOVWF  x5F
0700E:  MOVLW  01
07010:  ADDWFC 02,W
07012:  MOVWF  x60
07014:  MOVLW  01
07016:  ADDWF  x5F,W
07018:  MOVWF  01
0701A:  MOVLW  00
0701C:  ADDWFC x60,W
0701E:  MOVWF  03
07020:  MOVF   01,W
07022:  ADDLW  3E
07024:  MOVWF  01
07026:  MOVLW  01
07028:  ADDWFC 03,F
0702A:  MOVF   01,W
0702C:  ADDLW  2A
0702E:  MOVWF  FE9
07030:  MOVLW  00
07032:  ADDWFC 03,W
07034:  MOVWF  FEA
07036:  MOVFF  FEF,661
0703A:  CLRF   1B
0703C:  BTFSC  FF2.7
0703E:  BSF    1B.7
07040:  BCF    FF2.7
07042:  CLRF   xD7
07044:  MOVFF  65E,6D6
07048:  CLRF   xD9
0704A:  MOVLW  2F
0704C:  MOVWF  xD8
0704E:  MOVLB  0
07050:  CALL   0360
07054:  BTFSC  1B.7
07056:  BSF    FF2.7
07058:  MOVF   01,W
0705A:  ADDLW  4C
0705C:  MOVLB  6
0705E:  MOVWF  x62
07060:  MOVLW  01
07062:  ADDWFC 02,W
07064:  MOVWF  x63
07066:  MOVLW  01
07068:  ADDWF  x62,W
0706A:  MOVWF  01
0706C:  MOVLW  00
0706E:  ADDWFC x63,W
07070:  MOVWF  03
07072:  MOVF   01,W
07074:  ADDLW  3E
07076:  MOVWF  01
07078:  MOVLW  01
0707A:  ADDWFC 03,F
0707C:  MOVF   01,W
0707E:  ADDLW  2B
07080:  MOVWF  FE9
07082:  MOVLW  00
07084:  ADDWFC 03,W
07086:  MOVWF  FEA
07088:  MOVF   FEF,W
0708A:  SUBWF  x61,W
0708C:  BZ    7158
0708E:  BNC   7158
07090:  CLRF   1B
07092:  BTFSC  FF2.7
07094:  BSF    1B.7
07096:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07098:  CLRF   xD7
0709A:  MOVFF  65E,6D6
0709E:  CLRF   xD9
070A0:  MOVLW  2F
070A2:  MOVWF  xD8
070A4:  MOVLB  0
070A6:  CALL   0360
070AA:  BTFSC  1B.7
070AC:  BSF    FF2.7
070AE:  MOVF   01,W
070B0:  ADDLW  4C
070B2:  MOVLB  6
070B4:  MOVWF  x5F
070B6:  MOVLW  01
070B8:  ADDWFC 02,W
070BA:  MOVWF  x60
070BC:  MOVLW  01
070BE:  ADDWF  x5F,W
070C0:  MOVWF  01
070C2:  MOVLW  00
070C4:  ADDWFC x60,W
070C6:  MOVWF  03
070C8:  MOVF   01,W
070CA:  ADDLW  3E
070CC:  MOVWF  01
070CE:  MOVLW  01
070D0:  ADDWFC 03,F
070D2:  MOVF   01,W
070D4:  ADDLW  2D
070D6:  MOVWF  FE9
070D8:  MOVLW  00
070DA:  ADDWFC 03,W
070DC:  MOVWF  FEA
070DE:  MOVLW  04
070E0:  MOVWF  FEF
070E2:  CLRF   1B
070E4:  BTFSC  FF2.7
070E6:  BSF    1B.7
070E8:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
070EA:  CLRF   xD7
070EC:  MOVFF  65E,6D6
070F0:  CLRF   xD9
070F2:  MOVLW  2F
070F4:  MOVWF  xD8
070F6:  MOVLB  0
070F8:  CALL   0360
070FC:  BTFSC  1B.7
070FE:  BSF    FF2.7
07100:  MOVF   01,W
07102:  ADDLW  4C
07104:  MOVLB  6
07106:  MOVWF  x5F
07108:  MOVLW  01
0710A:  ADDWFC 02,W
0710C:  MOVWF  x60
0710E:  MOVLW  01
07110:  ADDWF  x5F,W
07112:  MOVWF  01
07114:  MOVLW  00
07116:  ADDWFC x60,W
07118:  MOVWF  03
0711A:  MOVF   01,W
0711C:  ADDLW  3E
0711E:  MOVWF  01
07120:  MOVLW  01
07122:  ADDWFC 03,F
07124:  MOVF   01,W
07126:  ADDLW  29
07128:  MOVWF  FE9
0712A:  MOVLW  00
0712C:  ADDWFC 03,W
0712E:  MOVWF  FEA
07130:  BCF    FD8.0
07132:  RLCF   FEF,W
07134:  CLRF   03
07136:  MOVLB  0
07138:  CALL   0172
0713C:  TBLRD*+
0713E:  MOVFF  FF5,03
07142:  CLRF   00
07144:  DECF   00,F
07146:  XORWF  00,F
07148:  MOVLW  FF
0714A:  XORWF  03,F
0714C:  MOVF   00,W
0714E:  MOVLB  5
07150:  IORWF  x7F,F
07152:  MOVF   03,W
07154:  IORWF  x80,F
07156:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
07158:  MOVLB  0
0715A:  BRA    715C
....................       } 
....................    } 
0715C:  MOVLB  6
0715E:  INCF   x5E,F
07160:  GOTO   6954
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
07164:  CLRF   x5E
07166:  MOVLB  1
07168:  MOVF   x3E,W
0716A:  MOVLB  6
0716C:  SUBWF  x5E,W
0716E:  BTFSC  FD8.0
07170:  BRA    7840
07172:  CLRF   1B
07174:  BTFSC  FF2.7
07176:  BSF    1B.7
07178:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
0717A:  CLRF   xD7
0717C:  MOVFF  65E,6D6
07180:  CLRF   xD9
07182:  MOVLW  21
07184:  MOVWF  xD8
07186:  MOVLB  0
07188:  CALL   0360
0718C:  BTFSC  1B.7
0718E:  BSF    FF2.7
07190:  MOVFF  02,03
07194:  MOVF   01,W
07196:  ADDLW  40
07198:  MOVWF  01
0719A:  MOVLW  01
0719C:  ADDWFC 03,F
0719E:  MOVFF  01,FE9
071A2:  MOVFF  03,FEA
071A6:  MOVF   FEF,W
071A8:  XORLW  02
071AA:  BZ    71B4
071AC:  XORLW  01
071AE:  BTFSC  FD8.2
071B0:  BRA    7300
071B2:  BRA    783A
....................          case button_switch: 
071B4:  CLRF   1B
071B6:  BTFSC  FF2.7
071B8:  BSF    1B.7
071BA:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
071BC:  MOVLB  6
071BE:  CLRF   xD7
071C0:  MOVFF  65E,6D6
071C4:  CLRF   xD9
071C6:  MOVLW  21
071C8:  MOVWF  xD8
071CA:  MOVLB  0
071CC:  CALL   0360
071D0:  BTFSC  1B.7
071D2:  BSF    FF2.7
071D4:  MOVF   01,W
071D6:  ADDLW  02
071D8:  MOVLB  6
071DA:  MOVWF  x5F
071DC:  MOVLW  00
071DE:  ADDWFC 02,W
071E0:  MOVWF  x60
071E2:  MOVLW  01
071E4:  ADDWF  x5F,W
071E6:  MOVWF  01
071E8:  MOVLW  00
071EA:  ADDWFC x60,W
071EC:  MOVWF  03
071EE:  MOVF   01,W
071F0:  ADDLW  3E
071F2:  MOVWF  01
071F4:  MOVLW  01
071F6:  ADDWFC 03,F
071F8:  MOVF   01,W
071FA:  ADDLW  08
071FC:  MOVWF  FE9
071FE:  MOVLW  00
07200:  ADDWFC 03,W
07202:  MOVWF  FEA
07204:  BTFSS  FEF.0
07206:  BRA    72FC
07208:  CLRF   1B
0720A:  BTFSC  FF2.7
0720C:  BSF    1B.7
0720E:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
07210:  CLRF   xD7
07212:  MOVFF  65E,6D6
07216:  CLRF   xD9
07218:  MOVLW  21
0721A:  MOVWF  xD8
0721C:  MOVLB  0
0721E:  CALL   0360
07222:  BTFSC  1B.7
07224:  BSF    FF2.7
07226:  MOVF   01,W
07228:  ADDLW  02
0722A:  MOVLB  6
0722C:  MOVWF  x5F
0722E:  MOVLW  00
07230:  ADDWFC 02,W
07232:  MOVWF  x60
07234:  MOVLW  01
07236:  ADDWF  x5F,W
07238:  MOVWF  01
0723A:  MOVLW  00
0723C:  ADDWFC x60,W
0723E:  MOVWF  03
07240:  MOVF   01,W
07242:  ADDLW  3E
07244:  MOVWF  01
07246:  MOVLW  01
07248:  ADDWFC 03,F
0724A:  MOVF   01,W
0724C:  ADDLW  07
0724E:  MOVWF  FE9
07250:  MOVLW  00
07252:  ADDWFC 03,W
07254:  MOVWF  FEA
07256:  MOVF   FEF,F
07258:  BNZ   72FC
0725A:  CLRF   1B
0725C:  BTFSC  FF2.7
0725E:  BSF    1B.7
07260:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
07262:  CLRF   xD7
07264:  MOVFF  65E,6D6
07268:  CLRF   xD9
0726A:  MOVLW  21
0726C:  MOVWF  xD8
0726E:  MOVLB  0
07270:  CALL   0360
07274:  BTFSC  1B.7
07276:  BSF    FF2.7
07278:  MOVF   01,W
0727A:  ADDLW  02
0727C:  MOVLB  6
0727E:  MOVWF  x5F
07280:  MOVLW  00
07282:  ADDWFC 02,W
07284:  MOVWF  x60
07286:  MOVLW  01
07288:  ADDWF  x5F,W
0728A:  MOVWF  01
0728C:  MOVLW  00
0728E:  ADDWFC x60,W
07290:  MOVWF  03
07292:  MOVF   01,W
07294:  ADDLW  3E
07296:  MOVWF  01
07298:  MOVLW  01
0729A:  ADDWFC 03,F
0729C:  MOVF   01,W
0729E:  ADDLW  01
072A0:  MOVWF  FE9
072A2:  MOVLW  00
072A4:  ADDWFC 03,W
072A6:  MOVWF  FEA
072A8:  MOVLW  01
072AA:  MOVWF  FEF
072AC:  CLRF   1B
072AE:  BTFSC  FF2.7
072B0:  BSF    1B.7
072B2:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
072B4:  CLRF   xD7
072B6:  MOVFF  65E,6D6
072BA:  CLRF   xD9
072BC:  MOVLW  21
072BE:  MOVWF  xD8
072C0:  MOVLB  0
072C2:  CALL   0360
072C6:  BTFSC  1B.7
072C8:  BSF    FF2.7
072CA:  MOVF   01,W
072CC:  ADDLW  02
072CE:  MOVLB  6
072D0:  MOVWF  x5F
072D2:  MOVLW  00
072D4:  ADDWFC 02,W
072D6:  MOVWF  x60
072D8:  MOVLW  01
072DA:  ADDWF  x5F,W
072DC:  MOVWF  01
072DE:  MOVLW  00
072E0:  ADDWFC x60,W
072E2:  MOVWF  03
072E4:  MOVF   01,W
072E6:  ADDLW  3E
072E8:  MOVWF  01
072EA:  MOVLW  01
072EC:  ADDWFC 03,F
072EE:  MOVF   01,W
072F0:  ADDLW  02
072F2:  MOVWF  FE9
072F4:  MOVLW  00
072F6:  ADDWFC 03,W
072F8:  MOVWF  FEA
072FA:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
072FC:  MOVLB  0
072FE:  BRA    783A
....................          case timer: 
07300:  CLRF   1B
07302:  BTFSC  FF2.7
07304:  BSF    1B.7
07306:  BCF    FF2.7
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
07308:  MOVLB  6
0730A:  CLRF   xD7
0730C:  MOVFF  65E,6D6
07310:  CLRF   xD9
07312:  MOVLW  21
07314:  MOVWF  xD8
07316:  MOVLB  0
07318:  CALL   0360
0731C:  BTFSC  1B.7
0731E:  BSF    FF2.7
07320:  MOVF   01,W
07322:  ADDLW  02
07324:  MOVLB  6
07326:  MOVWF  x5F
07328:  MOVLW  00
0732A:  ADDWFC 02,W
0732C:  MOVWF  x60
0732E:  MOVLW  01
07330:  ADDWF  x5F,W
07332:  MOVWF  01
07334:  MOVLW  00
07336:  ADDWFC x60,W
07338:  MOVWF  03
0733A:  MOVF   01,W
0733C:  ADDLW  3E
0733E:  MOVWF  01
07340:  MOVLW  01
07342:  ADDWFC 03,F
07344:  MOVF   01,W
07346:  ADDLW  1F
07348:  MOVWF  FE9
0734A:  MOVLW  00
0734C:  ADDWFC 03,W
0734E:  MOVWF  FEA
07350:  BTFSS  FEF.0
07352:  BRA    7836
07354:  CLRF   1B
07356:  BTFSC  FF2.7
07358:  BSF    1B.7
0735A:  BCF    FF2.7
....................           { 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
0735C:  CLRF   xD7
0735E:  MOVFF  65E,6D6
07362:  CLRF   xD9
07364:  MOVLW  21
07366:  MOVWF  xD8
07368:  MOVLB  0
0736A:  CALL   0360
0736E:  BTFSC  1B.7
07370:  BSF    FF2.7
07372:  MOVF   01,W
07374:  ADDLW  02
07376:  MOVLB  6
07378:  MOVWF  x5F
0737A:  MOVLW  00
0737C:  ADDWFC 02,W
0737E:  MOVWF  x60
07380:  MOVLW  01
07382:  ADDWF  x5F,W
07384:  MOVWF  01
07386:  MOVLW  00
07388:  ADDWFC x60,W
0738A:  MOVWF  03
0738C:  MOVF   01,W
0738E:  ADDLW  3E
07390:  MOVWF  01
07392:  MOVLW  01
07394:  ADDWFC 03,F
07396:  MOVF   01,W
07398:  ADDLW  1D
0739A:  MOVWF  FE9
0739C:  MOVLW  00
0739E:  ADDWFC 03,W
073A0:  MOVWF  FEA
073A2:  MOVLW  01
073A4:  ADDWF  FEE,F
073A6:  BNC   73AA
073A8:  INCF   FEF,F
073AA:  CLRF   1B
073AC:  BTFSC  FF2.7
073AE:  BSF    1B.7
073B0:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
073B2:  CLRF   xD7
073B4:  MOVFF  65E,6D6
073B8:  CLRF   xD9
073BA:  MOVLW  21
073BC:  MOVWF  xD8
073BE:  MOVLB  0
073C0:  CALL   0360
073C4:  BTFSC  1B.7
073C6:  BSF    FF2.7
073C8:  MOVF   01,W
073CA:  ADDLW  02
073CC:  MOVLB  6
073CE:  MOVWF  x5F
073D0:  MOVLW  00
073D2:  ADDWFC 02,W
073D4:  MOVWF  x60
073D6:  MOVLW  01
073D8:  ADDWF  x5F,W
073DA:  MOVWF  01
073DC:  MOVLW  00
073DE:  ADDWFC x60,W
073E0:  MOVWF  03
073E2:  MOVF   01,W
073E4:  ADDLW  3E
073E6:  MOVWF  01
073E8:  MOVLW  01
073EA:  ADDWFC 03,F
073EC:  MOVF   01,W
073EE:  ADDLW  1D
073F0:  MOVWF  FE9
073F2:  MOVLW  00
073F4:  ADDWFC 03,W
073F6:  MOVWF  FEA
073F8:  MOVFF  FEC,662
073FC:  MOVF   FED,F
073FE:  MOVFF  FEF,661
07402:  CLRF   1B
07404:  BTFSC  FF2.7
07406:  BSF    1B.7
07408:  BCF    FF2.7
0740A:  CLRF   xD7
0740C:  MOVFF  65E,6D6
07410:  CLRF   xD9
07412:  MOVLW  21
07414:  MOVWF  xD8
07416:  MOVLB  0
07418:  CALL   0360
0741C:  BTFSC  1B.7
0741E:  BSF    FF2.7
07420:  MOVF   01,W
07422:  ADDLW  02
07424:  MOVLB  6
07426:  MOVWF  x63
07428:  MOVLW  00
0742A:  ADDWFC 02,W
0742C:  MOVWF  x64
0742E:  MOVLW  01
07430:  ADDWF  x63,W
07432:  MOVWF  01
07434:  MOVLW  00
07436:  ADDWFC x64,W
07438:  MOVWF  03
0743A:  MOVF   01,W
0743C:  ADDLW  3E
0743E:  MOVWF  01
07440:  MOVLW  01
07442:  ADDWFC 03,F
07444:  MOVF   01,W
07446:  ADDLW  01
07448:  MOVWF  FE9
0744A:  MOVLW  00
0744C:  ADDWFC 03,W
0744E:  MOVWF  FEA
07450:  MOVFF  FEC,03
07454:  MOVF   FED,F
07456:  MOVFF  FEF,01
0745A:  MOVF   03,W
0745C:  SUBWF  x62,W
0745E:  BTFSS  FD8.0
07460:  BRA    7836
07462:  BNZ   746C
07464:  MOVF   x61,W
07466:  SUBWF  01,W
07468:  BTFSC  FD8.0
0746A:  BRA    7836
0746C:  CLRF   1B
0746E:  BTFSC  FF2.7
07470:  BSF    1B.7
07472:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
07474:  CLRF   xD7
07476:  MOVFF  65E,6D6
0747A:  CLRF   xD9
0747C:  MOVLW  21
0747E:  MOVWF  xD8
07480:  MOVLB  0
07482:  CALL   0360
07486:  BTFSC  1B.7
07488:  BSF    FF2.7
0748A:  MOVF   01,W
0748C:  ADDLW  02
0748E:  MOVLB  6
07490:  MOVWF  x5F
07492:  MOVLW  00
07494:  ADDWFC 02,W
07496:  MOVWF  x60
07498:  MOVLW  01
0749A:  ADDWF  x5F,W
0749C:  MOVWF  01
0749E:  MOVLW  00
074A0:  ADDWFC x60,W
074A2:  MOVWF  03
074A4:  MOVF   01,W
074A6:  ADDLW  3E
074A8:  MOVWF  01
074AA:  MOVLW  01
074AC:  ADDWFC 03,F
074AE:  MOVFF  01,FE9
074B2:  MOVFF  03,FEA
074B6:  MOVF   FEF,F
074B8:  BNZ   75AE
074BA:  CLRF   1B
074BC:  BTFSC  FF2.7
074BE:  BSF    1B.7
074C0:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
074C2:  CLRF   xD7
074C4:  MOVFF  65E,6D6
074C8:  CLRF   xD9
074CA:  MOVLW  21
074CC:  MOVWF  xD8
074CE:  MOVLB  0
074D0:  CALL   0360
074D4:  BTFSC  1B.7
074D6:  BSF    FF2.7
074D8:  MOVF   01,W
074DA:  ADDLW  02
074DC:  MOVLB  6
074DE:  MOVWF  x5F
074E0:  MOVLW  00
074E2:  ADDWFC 02,W
074E4:  MOVWF  x60
074E6:  MOVLW  01
074E8:  ADDWF  x5F,W
074EA:  MOVWF  01
074EC:  MOVLW  00
074EE:  ADDWFC x60,W
074F0:  MOVWF  03
074F2:  MOVF   01,W
074F4:  ADDLW  3E
074F6:  MOVWF  01
074F8:  MOVLW  01
074FA:  ADDWFC 03,F
074FC:  MOVF   01,W
074FE:  ADDLW  04
07500:  MOVWF  FE9
07502:  MOVLW  00
07504:  ADDWFC 03,W
07506:  MOVWF  FEA
07508:  MOVLW  01
0750A:  MOVWF  FEF
0750C:  CLRF   1B
0750E:  BTFSC  FF2.7
07510:  BSF    1B.7
07512:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
07514:  CLRF   xD7
07516:  MOVFF  65E,6D6
0751A:  CLRF   xD9
0751C:  MOVLW  21
0751E:  MOVWF  xD8
07520:  MOVLB  0
07522:  CALL   0360
07526:  BTFSC  1B.7
07528:  BSF    FF2.7
0752A:  MOVF   01,W
0752C:  ADDLW  02
0752E:  MOVLB  6
07530:  MOVWF  x5F
07532:  MOVLW  00
07534:  ADDWFC 02,W
07536:  MOVWF  x60
07538:  MOVLW  01
0753A:  ADDWF  x5F,W
0753C:  MOVWF  01
0753E:  MOVLW  00
07540:  ADDWFC x60,W
07542:  MOVWF  03
07544:  MOVF   01,W
07546:  ADDLW  3E
07548:  MOVWF  01
0754A:  MOVLW  01
0754C:  ADDWFC 03,F
0754E:  MOVF   01,W
07550:  ADDLW  05
07552:  MOVWF  FE9
07554:  MOVLW  00
07556:  ADDWFC 03,W
07558:  MOVWF  FEA
0755A:  BSF    FEF.0
0755C:  CLRF   1B
0755E:  BTFSC  FF2.7
07560:  BSF    1B.7
07562:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07564:  CLRF   xD7
07566:  MOVFF  65E,6D6
0756A:  CLRF   xD9
0756C:  MOVLW  21
0756E:  MOVWF  xD8
07570:  MOVLB  0
07572:  CALL   0360
07576:  BTFSC  1B.7
07578:  BSF    FF2.7
0757A:  MOVF   01,W
0757C:  ADDLW  02
0757E:  MOVLB  6
07580:  MOVWF  x5F
07582:  MOVLW  00
07584:  ADDWFC 02,W
07586:  MOVWF  x60
07588:  MOVLW  01
0758A:  ADDWF  x5F,W
0758C:  MOVWF  01
0758E:  MOVLW  00
07590:  ADDWFC x60,W
07592:  MOVWF  03
07594:  MOVF   01,W
07596:  ADDLW  3E
07598:  MOVWF  01
0759A:  MOVLW  01
0759C:  ADDWFC 03,F
0759E:  MOVF   01,W
075A0:  ADDLW  1F
075A2:  MOVWF  FE9
075A4:  MOVLW  00
075A6:  ADDWFC 03,W
075A8:  MOVWF  FEA
075AA:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
075AC:  BRA    7836
075AE:  CLRF   1B
075B0:  BTFSC  FF2.7
075B2:  BSF    1B.7
075B4:  BCF    FF2.7
075B6:  CLRF   xD7
075B8:  MOVFF  65E,6D6
075BC:  CLRF   xD9
075BE:  MOVLW  21
075C0:  MOVWF  xD8
075C2:  MOVLB  0
075C4:  CALL   0360
075C8:  BTFSC  1B.7
075CA:  BSF    FF2.7
075CC:  MOVF   01,W
075CE:  ADDLW  02
075D0:  MOVLB  6
075D2:  MOVWF  x5F
075D4:  MOVLW  00
075D6:  ADDWFC 02,W
075D8:  MOVWF  x60
075DA:  MOVLW  01
075DC:  ADDWF  x5F,W
075DE:  MOVWF  01
075E0:  MOVLW  00
075E2:  ADDWFC x60,W
075E4:  MOVWF  03
075E6:  MOVF   01,W
075E8:  ADDLW  3E
075EA:  MOVWF  01
075EC:  MOVLW  01
075EE:  ADDWFC 03,F
075F0:  MOVFF  01,FE9
075F4:  MOVFF  03,FEA
075F8:  DECFSZ FEF,W
075FA:  BRA    76F0
075FC:  CLRF   1B
075FE:  BTFSC  FF2.7
07600:  BSF    1B.7
07602:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
07604:  CLRF   xD7
07606:  MOVFF  65E,6D6
0760A:  CLRF   xD9
0760C:  MOVLW  21
0760E:  MOVWF  xD8
07610:  MOVLB  0
07612:  CALL   0360
07616:  BTFSC  1B.7
07618:  BSF    FF2.7
0761A:  MOVF   01,W
0761C:  ADDLW  02
0761E:  MOVLB  6
07620:  MOVWF  x5F
07622:  MOVLW  00
07624:  ADDWFC 02,W
07626:  MOVWF  x60
07628:  MOVLW  01
0762A:  ADDWF  x5F,W
0762C:  MOVWF  01
0762E:  MOVLW  00
07630:  ADDWFC x60,W
07632:  MOVWF  03
07634:  MOVF   01,W
07636:  ADDLW  3E
07638:  MOVWF  01
0763A:  MOVLW  01
0763C:  ADDWFC 03,F
0763E:  MOVF   01,W
07640:  ADDLW  07
07642:  MOVWF  FE9
07644:  MOVLW  00
07646:  ADDWFC 03,W
07648:  MOVWF  FEA
0764A:  MOVLW  01
0764C:  MOVWF  FEF
0764E:  CLRF   1B
07650:  BTFSC  FF2.7
07652:  BSF    1B.7
07654:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
07656:  CLRF   xD7
07658:  MOVFF  65E,6D6
0765C:  CLRF   xD9
0765E:  MOVLW  21
07660:  MOVWF  xD8
07662:  MOVLB  0
07664:  CALL   0360
07668:  BTFSC  1B.7
0766A:  BSF    FF2.7
0766C:  MOVF   01,W
0766E:  ADDLW  02
07670:  MOVLB  6
07672:  MOVWF  x5F
07674:  MOVLW  00
07676:  ADDWFC 02,W
07678:  MOVWF  x60
0767A:  MOVLW  01
0767C:  ADDWF  x5F,W
0767E:  MOVWF  01
07680:  MOVLW  00
07682:  ADDWFC x60,W
07684:  MOVWF  03
07686:  MOVF   01,W
07688:  ADDLW  3E
0768A:  MOVWF  01
0768C:  MOVLW  01
0768E:  ADDWFC 03,F
07690:  MOVF   01,W
07692:  ADDLW  08
07694:  MOVWF  FE9
07696:  MOVLW  00
07698:  ADDWFC 03,W
0769A:  MOVWF  FEA
0769C:  BSF    FEF.0
0769E:  CLRF   1B
076A0:  BTFSC  FF2.7
076A2:  BSF    1B.7
076A4:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
076A6:  CLRF   xD7
076A8:  MOVFF  65E,6D6
076AC:  CLRF   xD9
076AE:  MOVLW  21
076B0:  MOVWF  xD8
076B2:  MOVLB  0
076B4:  CALL   0360
076B8:  BTFSC  1B.7
076BA:  BSF    FF2.7
076BC:  MOVF   01,W
076BE:  ADDLW  02
076C0:  MOVLB  6
076C2:  MOVWF  x5F
076C4:  MOVLW  00
076C6:  ADDWFC 02,W
076C8:  MOVWF  x60
076CA:  MOVLW  01
076CC:  ADDWF  x5F,W
076CE:  MOVWF  01
076D0:  MOVLW  00
076D2:  ADDWFC x60,W
076D4:  MOVWF  03
076D6:  MOVF   01,W
076D8:  ADDLW  3E
076DA:  MOVWF  01
076DC:  MOVLW  01
076DE:  ADDWFC 03,F
076E0:  MOVF   01,W
076E2:  ADDLW  1F
076E4:  MOVWF  FE9
076E6:  MOVLW  00
076E8:  ADDWFC 03,W
076EA:  MOVWF  FEA
076EC:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
076EE:  BRA    7836
076F0:  CLRF   1B
076F2:  BTFSC  FF2.7
076F4:  BSF    1B.7
076F6:  BCF    FF2.7
076F8:  CLRF   xD7
076FA:  MOVFF  65E,6D6
076FE:  CLRF   xD9
07700:  MOVLW  21
07702:  MOVWF  xD8
07704:  MOVLB  0
07706:  CALL   0360
0770A:  BTFSC  1B.7
0770C:  BSF    FF2.7
0770E:  MOVF   01,W
07710:  ADDLW  02
07712:  MOVLB  6
07714:  MOVWF  x5F
07716:  MOVLW  00
07718:  ADDWFC 02,W
0771A:  MOVWF  x60
0771C:  MOVLW  01
0771E:  ADDWF  x5F,W
07720:  MOVWF  01
07722:  MOVLW  00
07724:  ADDWFC x60,W
07726:  MOVWF  03
07728:  MOVF   01,W
0772A:  ADDLW  3E
0772C:  MOVWF  01
0772E:  MOVLW  01
07730:  ADDWFC 03,F
07732:  MOVFF  01,FE9
07736:  MOVFF  03,FEA
0773A:  MOVF   FEF,W
0773C:  SUBLW  02
0773E:  BNZ   7836
07740:  CLRF   1B
07742:  BTFSC  FF2.7
07744:  BSF    1B.7
07746:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07748:  CLRF   xD7
0774A:  MOVFF  65E,6D6
0774E:  CLRF   xD9
07750:  MOVLW  21
07752:  MOVWF  xD8
07754:  MOVLB  0
07756:  CALL   0360
0775A:  BTFSC  1B.7
0775C:  BSF    FF2.7
0775E:  MOVF   01,W
07760:  ADDLW  02
07762:  MOVLB  6
07764:  MOVWF  x5F
07766:  MOVLW  00
07768:  ADDWFC 02,W
0776A:  MOVWF  x60
0776C:  MOVLW  01
0776E:  ADDWF  x5F,W
07770:  MOVWF  01
07772:  MOVLW  00
07774:  ADDWFC x60,W
07776:  MOVWF  03
07778:  MOVF   01,W
0777A:  ADDLW  3E
0777C:  MOVWF  01
0777E:  MOVLW  01
07780:  ADDWFC 03,F
07782:  MOVF   01,W
07784:  ADDLW  04
07786:  MOVWF  FE9
07788:  MOVLW  00
0778A:  ADDWFC 03,W
0778C:  MOVWF  FEA
0778E:  MOVLW  01
07790:  MOVWF  FEF
07792:  CLRF   1B
07794:  BTFSC  FF2.7
07796:  BSF    1B.7
07798:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
0779A:  CLRF   xD7
0779C:  MOVFF  65E,6D6
077A0:  CLRF   xD9
077A2:  MOVLW  21
077A4:  MOVWF  xD8
077A6:  MOVLB  0
077A8:  CALL   0360
077AC:  BTFSC  1B.7
077AE:  BSF    FF2.7
077B0:  MOVF   01,W
077B2:  ADDLW  02
077B4:  MOVLB  6
077B6:  MOVWF  x5F
077B8:  MOVLW  00
077BA:  ADDWFC 02,W
077BC:  MOVWF  x60
077BE:  MOVLW  01
077C0:  ADDWF  x5F,W
077C2:  MOVWF  01
077C4:  MOVLW  00
077C6:  ADDWFC x60,W
077C8:  MOVWF  03
077CA:  MOVF   01,W
077CC:  ADDLW  3E
077CE:  MOVWF  01
077D0:  MOVLW  01
077D2:  ADDWFC 03,F
077D4:  MOVF   01,W
077D6:  ADDLW  05
077D8:  MOVWF  FE9
077DA:  MOVLW  00
077DC:  ADDWFC 03,W
077DE:  MOVWF  FEA
077E0:  BSF    FEF.0
077E2:  CLRF   1B
077E4:  BTFSC  FF2.7
077E6:  BSF    1B.7
077E8:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
077EA:  CLRF   xD7
077EC:  MOVFF  65E,6D6
077F0:  CLRF   xD9
077F2:  MOVLW  21
077F4:  MOVWF  xD8
077F6:  MOVLB  0
077F8:  CALL   0360
077FC:  BTFSC  1B.7
077FE:  BSF    FF2.7
07800:  MOVF   01,W
07802:  ADDLW  02
07804:  MOVLB  6
07806:  MOVWF  x5F
07808:  MOVLW  00
0780A:  ADDWFC 02,W
0780C:  MOVWF  x60
0780E:  MOVLW  01
07810:  ADDWF  x5F,W
07812:  MOVWF  01
07814:  MOVLW  00
07816:  ADDWFC x60,W
07818:  MOVWF  03
0781A:  MOVF   01,W
0781C:  ADDLW  3E
0781E:  MOVWF  01
07820:  MOVLW  01
07822:  ADDWFC 03,F
07824:  MOVF   01,W
07826:  ADDLW  1D
07828:  MOVWF  FE9
0782A:  MOVLW  00
0782C:  ADDWFC 03,W
0782E:  MOVWF  FEA
07830:  CLRF   FEC
07832:  MOVF   FED,F
07834:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
07836:  MOVLB  0
07838:  BRA    783A
....................       } 
....................    } 
0783A:  MOVLB  6
0783C:  INCF   x5E,F
0783E:  BRA    7166
.................... } 
07840:  MOVLB  0
07842:  GOTO   7BD0 (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
....................    while(!kbhit()) 
....................    { 
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
....................       delay_us(10); 
....................    } 
.................... } 
.................... void testOutputs() 
.................... { 
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
....................    while(loop) 
....................    { 
....................    while(!kbhit()){} 
....................    char c=getc(); 
....................    switch(c) 
....................    { 
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
....................          portd=(MAKE8(light_pins[0],0)); 
....................       break; 
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
....................          portd=(MAKE8(light_pins[1],0)); 
....................       break; 
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
....................          portd=(MAKE8(light_pins[2],0)); 
....................       break; 
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
....................          portd=(MAKE8(light_pins[3],0)); 
....................       break; 
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
....................          portd=(MAKE8(light_pins[4],0)); 
....................       break; 
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
....................          portd=(MAKE8(light_pins[5],0)); 
....................       break; 
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
....................          portd=(MAKE8(light_pins[6],0)); 
....................       break; 
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
....................          portd=(MAKE8(light_pins[7],0)); 
....................       break; 
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
....................          portd=(MAKE8(light_pins[8],0)); 
....................       break; 
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
....................          portd=(MAKE8(light_pins[9],0)); 
....................       break; 
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
....................          portd=(MAKE8(light_pins[10],0)); 
....................       break; 
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
....................          portd=(MAKE8(light_pins[11],0)); 
....................       break; 
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
....................          portd=(MAKE8(light_pins[12],0)); 
....................       break; 
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
....................          portd=(MAKE8(light_pins[13],0)); 
....................       break; 
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
....................          portd=(MAKE8(light_pins[14],0)); 
....................       break; 
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
....................          portd=(MAKE8(light_pins[15],0)); 
....................       break; 
....................       case 'x': 
....................          loop=false; 
....................          portc=0xFF; 
....................          portd=0xFF; 
....................       break; 
....................    } 
....................    } 
.................... } 
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
....................       printf("1-Test inputs\n\r"); 
....................       printf("2-Test outputs\n\r"); 
....................       while(!kbhit()){} 
....................       char c=getc(); 
....................       if(c=='1') 
....................          testInputs(); 
....................       else if(c=='2') 
....................          testOutputs(); 
....................       else if(c=='x') 
....................       { 
....................          setup_wdt(WDT_ON); 
....................          enable_interrupts (GLOBAL) ; 
....................          return; 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
....................  
....................  
.................... _write_eeprom(int adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%d value=%d\n\r",adress,value); 
.................... #endif 
....................    write_eeprom(adress,value); 
*
01D3C:  CLRF   FAA
01D3E:  MOVFF  671,FA9
01D42:  MOVFF  672,FA8
01D46:  BCF    FA6.6
01D48:  BCF    FA6.7
01D4A:  BSF    FA6.2
01D4C:  MOVF   FF2,W
01D4E:  MOVWF  00
01D50:  BCF    FF2.7
01D52:  MOVLB  F
01D54:  MOVLW  55
01D56:  MOVWF  FA7
01D58:  MOVLW  AA
01D5A:  MOVWF  FA7
01D5C:  BSF    FA6.1
01D5E:  BTFSC  FA6.1
01D60:  BRA    1D5E
01D62:  BCF    FA6.2
01D64:  MOVF   00,W
01D66:  IORWF  FF2,F
.................... } 
01D68:  MOVLB  0
01D6A:  RETLW  00
....................  
.................... int writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,int memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
02356:  MOVLB  6
02358:  CLRF   xBC
0235A:  MOVF   xBB,W
0235C:  SUBWF  xBC,W
0235E:  BC    2396
....................    { 
....................       *array=read_eeprom(memAdress+x); 
02360:  MOVFF  6B9,03
02364:  MOVF   xB8,W
02366:  MOVWF  FE9
02368:  MOVFF  03,FEA
0236C:  MOVF   xBC,W
0236E:  ADDWF  xBA,W
02370:  MOVWF  xBF
02372:  MOVFF  FF2,6C0
02376:  BCF    FF2.7
02378:  CLRF   FAA
0237A:  MOVFF  6BF,FA9
0237E:  BCF    FA6.6
02380:  BCF    FA6.7
02382:  BSF    FA6.0
02384:  MOVF   FA8,W
02386:  BTFSC  xC0.7
02388:  BSF    FF2.7
0238A:  MOVWF  FEF
....................       ++array; 
0238C:  INCF   xB8,F
0238E:  BTFSC  FD8.2
02390:  INCF   xB9,F
....................    } 
02392:  INCF   xBC,F
02394:  BRA    235A
.................... } 
02396:  MOVLB  0
02398:  RETLW  00
.................... void ArrayToMem(int * array,int memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
01DB2:  MOVLB  6
01DB4:  CLRF   x6E
01DB6:  MOVF   x6D,W
01DB8:  SUBWF  x6E,W
01DBA:  BC    1DE8
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
01DBC:  MOVF   x6E,W
01DBE:  ADDWF  x6C,W
01DC0:  MOVWF  x6F
01DC2:  MOVFF  66B,03
01DC6:  MOVFF  66A,FE9
01DCA:  MOVFF  66B,FEA
01DCE:  MOVFF  FEF,670
01DD2:  MOVWF  x71
01DD4:  MOVFF  670,672
01DD8:  MOVLB  0
01DDA:  RCALL  1D3C
....................       ++array; 
01DDC:  MOVLB  6
01DDE:  INCF   x6A,F
01DE0:  BTFSC  FD8.2
01DE2:  INCF   x6B,F
....................    } 
01DE4:  INCF   x6E,F
01DE6:  BRA    1DB6
.................... } 
01DE8:  MOVLB  0
01DEA:  RETLW  00
.................... void readDevices() 
.................... { 
*
02A8C:  MOVLB  6
02A8E:  CLRF   x5E
02A90:  CLRF   x5F
02A92:  CLRF   x60
....................    int mempointer=MEM_OFFSET; 
....................    int inputNumber=0; 
....................    int outputNumber=0; 
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02A94:  MOVFF  FF2,6B8
02A98:  BCF    FF2.7
02A9A:  CLRF   FAA
02A9C:  MOVFF  65E,FA9
02AA0:  BCF    FA6.6
02AA2:  BCF    FA6.7
02AA4:  BSF    FA6.0
02AA6:  MOVF   FA8,W
02AA8:  BTFSC  xB8.7
02AAA:  BSF    FF2.7
02AAC:  SUBLW  FF
02AAE:  BTFSC  FD8.2
02AB0:  BRA    31E4
....................       switch(read_eeprom(mempointer)) 
....................       { 
02AB2:  MOVFF  FF2,6B8
02AB6:  BCF    FF2.7
02AB8:  CLRF   FAA
02ABA:  MOVFF  65E,FA9
02ABE:  BCF    FA6.6
02AC0:  BCF    FA6.7
02AC2:  BSF    FA6.0
02AC4:  MOVF   FA8,W
02AC6:  BTFSC  xB8.7
02AC8:  BSF    FF2.7
02ACA:  XORLW  01
02ACC:  MOVLB  0
02ACE:  BZ    2AF6
02AD0:  XORLW  01
02AD2:  BTFSC  FD8.2
02AD4:  BRA    2C04
02AD6:  XORLW  02
02AD8:  BTFSC  FD8.2
02ADA:  BRA    2CD2
02ADC:  XORLW  01
02ADE:  BTFSC  FD8.2
02AE0:  BRA    2DAC
02AE2:  XORLW  66
02AE4:  BTFSC  FD8.2
02AE6:  BRA    2EEC
02AE8:  XORLW  03
02AEA:  BTFSC  FD8.2
02AEC:  BRA    2FC8
02AEE:  XORLW  02
02AF0:  BTFSC  FD8.2
02AF2:  BRA    3128
02AF4:  BRA    31E0
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02AF6:  MOVLB  6
02AF8:  INCF   x5E,F
02AFA:  MOVFF  FF2,6B8
02AFE:  BCF    FF2.7
02B00:  CLRF   FAA
02B02:  MOVFF  65E,FA9
02B06:  BCF    FA6.6
02B08:  BCF    FA6.7
02B0A:  BSF    FA6.0
02B0C:  MOVF   FA8,W
02B0E:  BTFSC  xB8.7
02B10:  BSF    FF2.7
02B12:  MOVWF  x61
02B14:  INCF   x5E,F
02B16:  MOVFF  FF2,6B9
02B1A:  BCF    FF2.7
02B1C:  CLRF   FAA
02B1E:  MOVFF  65E,FA9
02B22:  BCF    FA6.6
02B24:  BCF    FA6.7
02B26:  BSF    FA6.0
02B28:  MOVF   FA8,W
02B2A:  BTFSC  xB9.7
02B2C:  BSF    FF2.7
02B2E:  MOVWF  x62
02B30:  INCF   x5E,F
02B32:  MOVFF  FF2,6BA
02B36:  BCF    FF2.7
02B38:  CLRF   FAA
02B3A:  MOVFF  65E,FA9
02B3E:  BCF    FA6.6
02B40:  BCF    FA6.7
02B42:  BSF    FA6.0
02B44:  MOVF   FA8,W
02B46:  BTFSC  xBA.7
02B48:  BSF    FF2.7
02B4A:  MOVWF  x63
....................             printf("on/off %d %d %d",on_adr,off_adr,real_button); 
02B4C:  MOVLW  2C
02B4E:  MOVWF  FF6
02B50:  MOVLW  03
02B52:  MOVWF  FF7
02B54:  MOVLW  00
02B56:  MOVWF  FF8
02B58:  MOVLW  07
02B5A:  MOVWF  xB8
02B5C:  MOVLB  0
02B5E:  GOTO   1F9A
02B62:  MOVFF  661,6B8
02B66:  MOVLW  1F
02B68:  MOVLB  6
02B6A:  MOVWF  xB9
02B6C:  MOVLB  0
02B6E:  CALL   1FF8
02B72:  MOVLW  20
02B74:  MOVLB  6
02B76:  MOVWF  xBE
02B78:  MOVLB  0
02B7A:  CALL   1F54
02B7E:  MOVFF  662,6B8
02B82:  MOVLW  1F
02B84:  MOVLB  6
02B86:  MOVWF  xB9
02B88:  MOVLB  0
02B8A:  CALL   1FF8
02B8E:  MOVLW  20
02B90:  MOVLB  6
02B92:  MOVWF  xBE
02B94:  MOVLB  0
02B96:  CALL   1F54
02B9A:  MOVFF  663,6B8
02B9E:  MOVLW  1F
02BA0:  MOVLB  6
02BA2:  MOVWF  xB9
02BA4:  MOVLB  0
02BA6:  CALL   1FF8
02BAA:  CLRF   1B
02BAC:  BTFSC  FF2.7
02BAE:  BSF    1B.7
02BB0:  BCF    FF2.7
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02BB2:  MOVLB  6
02BB4:  CLRF   xD7
02BB6:  MOVFF  65F,6D6
02BBA:  CLRF   xD9
02BBC:  MOVLW  21
02BBE:  MOVWF  xD8
02BC0:  MOVLB  0
02BC2:  CALL   0360
02BC6:  BTFSC  1B.7
02BC8:  BSF    FF2.7
02BCA:  MOVFF  02,03
02BCE:  MOVF   01,W
02BD0:  ADDLW  40
02BD2:  MOVWF  01
02BD4:  MOVLW  01
02BD6:  ADDWFC 03,F
02BD8:  MOVFF  01,6B8
02BDC:  MOVFF  03,6B9
02BE0:  MOVFF  661,6BA
02BE4:  MOVFF  662,6BB
02BE8:  MOVFF  03,6BD
02BEC:  MOVFF  01,6BC
02BF0:  MOVFF  663,6BE
02BF4:  MOVLB  0
02BF6:  GOTO   20D6
....................             ++inputNumber; 
02BFA:  MOVLB  6
02BFC:  INCF   x5F,F
....................             ++mempointer; 
02BFE:  INCF   x5E,F
....................          break; 
02C00:  MOVLB  0
02C02:  BRA    31E0
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
02C04:  MOVLB  6
02C06:  INCF   x5E,F
02C08:  MOVFF  FF2,6B8
02C0C:  BCF    FF2.7
02C0E:  CLRF   FAA
02C10:  MOVFF  65E,FA9
02C14:  BCF    FA6.6
02C16:  BCF    FA6.7
02C18:  BSF    FA6.0
02C1A:  MOVF   FA8,W
02C1C:  BTFSC  xB8.7
02C1E:  BSF    FF2.7
02C20:  MOVWF  x64
....................             on_adr=read_eeprom(++mempointer); 
02C22:  INCF   x5E,F
02C24:  MOVFF  FF2,6B8
02C28:  BCF    FF2.7
02C2A:  CLRF   FAA
02C2C:  MOVFF  65E,FA9
02C30:  BCF    FA6.6
02C32:  BCF    FA6.7
02C34:  BSF    FA6.0
02C36:  MOVF   FA8,W
02C38:  BTFSC  xB8.7
02C3A:  BSF    FF2.7
02C3C:  MOVWF  x61
....................             off_adr=read_eeprom(++mempointer); 
02C3E:  INCF   x5E,F
02C40:  MOVFF  FF2,6B8
02C44:  BCF    FF2.7
02C46:  CLRF   FAA
02C48:  MOVFF  65E,FA9
02C4C:  BCF    FA6.6
02C4E:  BCF    FA6.7
02C50:  BSF    FA6.0
02C52:  MOVF   FA8,W
02C54:  BTFSC  xB8.7
02C56:  BSF    FF2.7
02C58:  MOVWF  x62
....................             real_button=read_eeprom(++mempointer); 
02C5A:  INCF   x5E,F
02C5C:  MOVFF  FF2,6B8
02C60:  BCF    FF2.7
02C62:  CLRF   FAA
02C64:  MOVFF  65E,FA9
02C68:  BCF    FA6.6
02C6A:  BCF    FA6.7
02C6C:  BSF    FA6.0
02C6E:  MOVF   FA8,W
02C70:  BTFSC  xB8.7
02C72:  BSF    FF2.7
02C74:  MOVWF  x63
02C76:  CLRF   1B
02C78:  BTFSC  FF2.7
02C7A:  BSF    1B.7
02C7C:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
02C7E:  CLRF   xD7
02C80:  MOVFF  65F,6D6
02C84:  CLRF   xD9
02C86:  MOVLW  21
02C88:  MOVWF  xD8
02C8A:  MOVLB  0
02C8C:  CALL   0360
02C90:  BTFSC  1B.7
02C92:  BSF    FF2.7
02C94:  MOVFF  02,03
02C98:  MOVF   01,W
02C9A:  ADDLW  40
02C9C:  MOVWF  01
02C9E:  MOVLW  01
02CA0:  ADDWFC 03,F
02CA2:  MOVFF  01,6B8
02CA6:  MOVFF  03,6B9
02CAA:  MOVFF  664,6BA
02CAE:  MOVFF  661,6BB
02CB2:  MOVFF  662,6BC
02CB6:  MOVFF  03,6BE
02CBA:  MOVFF  01,6BD
02CBE:  MOVFF  663,6BF
02CC2:  MOVLB  0
02CC4:  GOTO   2130
....................             ++inputNumber; 
02CC8:  MOVLB  6
02CCA:  INCF   x5F,F
....................             ++mempointer; 
02CCC:  INCF   x5E,F
....................          break; 
02CCE:  MOVLB  0
02CD0:  BRA    31E0
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
02CD2:  MOVLB  6
02CD4:  INCF   x5E,F
02CD6:  MOVFF  FF2,6B8
02CDA:  BCF    FF2.7
02CDC:  CLRF   FAA
02CDE:  MOVFF  65E,FA9
02CE2:  BCF    FA6.6
02CE4:  BCF    FA6.7
02CE6:  BSF    FA6.0
02CE8:  MOVF   FA8,W
02CEA:  BTFSC  xB8.7
02CEC:  BSF    FF2.7
02CEE:  MOVWF  x61
....................             off_adr=read_eeprom(++mempointer); 
02CF0:  INCF   x5E,F
02CF2:  MOVFF  FF2,6B8
02CF6:  BCF    FF2.7
02CF8:  CLRF   FAA
02CFA:  MOVFF  65E,FA9
02CFE:  BCF    FA6.6
02D00:  BCF    FA6.7
02D02:  BSF    FA6.0
02D04:  MOVF   FA8,W
02D06:  BTFSC  xB8.7
02D08:  BSF    FF2.7
02D0A:  MOVWF  x62
....................             real_button=read_eeprom(++mempointer); 
02D0C:  INCF   x5E,F
02D0E:  MOVFF  FF2,6B8
02D12:  BCF    FF2.7
02D14:  CLRF   FAA
02D16:  MOVFF  65E,FA9
02D1A:  BCF    FA6.6
02D1C:  BCF    FA6.7
02D1E:  BSF    FA6.0
02D20:  MOVF   FA8,W
02D22:  BTFSC  xB8.7
02D24:  BSF    FF2.7
02D26:  MOVWF  x63
....................             int1 repeat=read_eeprom(++mempointer); 
02D28:  INCF   x5E,F
02D2A:  MOVFF  FF2,6B8
02D2E:  BCF    FF2.7
02D30:  CLRF   FAA
02D32:  MOVFF  65E,FA9
02D36:  BCF    FA6.6
02D38:  BCF    FA6.7
02D3A:  BSF    FA6.0
02D3C:  MOVF   FA8,W
02D3E:  BTFSC  xB8.7
02D40:  BSF    FF2.7
02D42:  MOVWF  01
02D44:  BCF    x65.0
02D46:  BTFSC  01.0
02D48:  BSF    x65.0
02D4A:  CLRF   1B
02D4C:  BTFSC  FF2.7
02D4E:  BSF    1B.7
02D50:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
02D52:  CLRF   xD7
02D54:  MOVFF  65F,6D6
02D58:  CLRF   xD9
02D5A:  MOVLW  21
02D5C:  MOVWF  xD8
02D5E:  MOVLB  0
02D60:  CALL   0360
02D64:  BTFSC  1B.7
02D66:  BSF    FF2.7
02D68:  MOVFF  02,03
02D6C:  MOVF   01,W
02D6E:  ADDLW  40
02D70:  MOVWF  01
02D72:  MOVLW  01
02D74:  ADDWFC 03,F
02D76:  MOVFF  01,6B8
02D7A:  MOVLB  6
02D7C:  MOVFF  03,6B9
02D80:  MOVLW  00
02D82:  BTFSC  x65.0
02D84:  MOVLW  01
02D86:  MOVFF  661,6BB
02D8A:  MOVFF  662,6BC
02D8E:  MOVFF  03,6BE
02D92:  MOVFF  01,6BD
02D96:  MOVFF  663,6BF
02D9A:  MOVWF  xC0
02D9C:  MOVLB  0
02D9E:  GOTO   22F4
....................             ++inputNumber; 
02DA2:  MOVLB  6
02DA4:  INCF   x5F,F
....................             ++mempointer; 
02DA6:  INCF   x5E,F
....................          break; 
02DA8:  MOVLB  0
02DAA:  BRA    31E0
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
.................... #endif 
....................  
....................             unsigned int start_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02DAC:  MOVLW  06
02DAE:  MOVLB  6
02DB0:  MOVWF  xB9
02DB2:  MOVLW  66
02DB4:  MOVWF  xB8
02DB6:  MOVFF  65E,6BA
02DBA:  MOVLW  08
02DBC:  MOVWF  xBB
02DBE:  MOVLB  0
02DC0:  CALL   2356
....................             mempointer+=8; 
02DC4:  MOVLW  08
02DC6:  MOVLB  6
02DC8:  ADDWF  x5E,F
....................             unsigned int stop_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02DCA:  MOVLW  06
02DCC:  MOVWF  xB9
02DCE:  MOVLW  66
02DD0:  MOVWF  xB8
02DD2:  MOVFF  65E,6BA
02DD6:  MOVLW  08
02DD8:  MOVWF  xBB
02DDA:  MOVLB  0
02DDC:  CALL   2356
....................             mempointer+=8;           
02DE0:  MOVLW  08
02DE2:  MOVLB  6
02DE4:  ADDWF  x5E,F
....................             unsigned int out_on=read_eeprom(++mempointer); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
02DE6:  INCF   x5E,F
02DE8:  MOVFF  FF2,6B8
02DEC:  BCF    FF2.7
02DEE:  CLRF   FAA
02DF0:  MOVFF  65E,FA9
02DF4:  BCF    FA6.6
02DF6:  BCF    FA6.7
02DF8:  BSF    FA6.0
02DFA:  MOVF   FA8,W
02DFC:  BTFSC  xB8.7
02DFE:  BSF    FF2.7
02E00:  MOVWF  x76
02E02:  INCF   x5E,F
02E04:  MOVFF  FF2,6B9
02E08:  BCF    FF2.7
02E0A:  CLRF   FAA
02E0C:  MOVFF  65E,FA9
02E10:  BCF    FA6.6
02E12:  BCF    FA6.7
02E14:  BSF    FA6.0
02E16:  MOVF   FA8,W
02E18:  BTFSC  xB9.7
02E1A:  BSF    FF2.7
02E1C:  MOVWF  x77
02E1E:  INCF   x5E,F
02E20:  MOVFF  FF2,6BA
02E24:  BCF    FF2.7
02E26:  CLRF   FAA
02E28:  MOVFF  65E,FA9
02E2C:  BCF    FA6.6
02E2E:  BCF    FA6.7
02E30:  BSF    FA6.0
02E32:  MOVF   FA8,W
02E34:  BTFSC  xBA.7
02E36:  BSF    FF2.7
02E38:  MOVWF  x78
02E3A:  INCF   x5E,F
02E3C:  MOVFF  FF2,6BB
02E40:  BCF    FF2.7
02E42:  CLRF   FAA
02E44:  MOVFF  65E,FA9
02E48:  BCF    FA6.6
02E4A:  BCF    FA6.7
02E4C:  BSF    FA6.0
02E4E:  MOVF   FA8,W
02E50:  BTFSC  xBB.7
02E52:  BSF    FF2.7
02E54:  CLRF   x7A
02E56:  MOVWF  x79
....................             timeToAct<<=8; 
02E58:  MOVFF  679,67A
02E5C:  CLRF   x79
....................             timeToAct|=read_eeprom(++mempointer); 
02E5E:  INCF   x5E,F
02E60:  MOVFF  FF2,6B8
02E64:  BCF    FF2.7
02E66:  CLRF   FAA
02E68:  MOVFF  65E,FA9
02E6C:  BCF    FA6.6
02E6E:  BCF    FA6.7
02E70:  BSF    FA6.0
02E72:  MOVF   FA8,W
02E74:  BTFSC  xB8.7
02E76:  BSF    FF2.7
02E78:  IORWF  x79,F
02E7A:  CLRF   1B
02E7C:  BTFSC  FF2.7
02E7E:  BSF    1B.7
02E80:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
02E82:  CLRF   xD7
02E84:  MOVFF  65F,6D6
02E88:  CLRF   xD9
02E8A:  MOVLW  21
02E8C:  MOVWF  xD8
02E8E:  MOVLB  0
02E90:  CALL   0360
02E94:  BTFSC  1B.7
02E96:  BSF    FF2.7
02E98:  MOVFF  02,03
02E9C:  MOVF   01,W
02E9E:  ADDLW  40
02EA0:  MOVWF  01
02EA2:  MOVLW  01
02EA4:  ADDWFC 03,F
02EA6:  MOVFF  01,6B8
02EAA:  MOVLB  6
02EAC:  MOVFF  03,6B9
02EB0:  MOVLW  06
02EB2:  MOVWF  xBB
02EB4:  MOVLW  66
02EB6:  MOVWF  xBA
02EB8:  MOVLW  06
02EBA:  MOVWF  xBD
02EBC:  MOVLW  6E
02EBE:  MOVWF  xBC
02EC0:  MOVFF  676,6BE
02EC4:  MOVFF  677,6BF
02EC8:  MOVFF  03,6C1
02ECC:  MOVFF  01,6C0
02ED0:  MOVFF  678,6C2
02ED4:  MOVFF  67A,6C4
02ED8:  MOVFF  679,6C3
02EDC:  MOVLB  0
02EDE:  GOTO   23DA
....................             ++inputNumber; 
02EE2:  MOVLB  6
02EE4:  INCF   x5F,F
....................             ++mempointer; 
02EE6:  INCF   x5E,F
....................          break; 
02EE8:  MOVLB  0
02EEA:  BRA    31E0
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02EEC:  MOVLW  06
02EEE:  MOVLB  6
02EF0:  MOVWF  xB9
02EF2:  MOVLW  66
02EF4:  MOVWF  xB8
02EF6:  MOVFF  65E,6BA
02EFA:  MOVLW  08
02EFC:  MOVWF  xBB
02EFE:  MOVLB  0
02F00:  CALL   2356
....................             mempointer+=8; 
02F04:  MOVLW  08
02F06:  MOVLB  6
02F08:  ADDWF  x5E,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02F0A:  MOVLW  06
02F0C:  MOVWF  xB9
02F0E:  MOVLW  66
02F10:  MOVWF  xB8
02F12:  MOVFF  65E,6BA
02F16:  MOVLW  08
02F18:  MOVWF  xBB
02F1A:  MOVLB  0
02F1C:  CALL   2356
....................             mempointer+=8;   
02F20:  MOVLW  08
02F22:  MOVLB  6
02F24:  ADDWF  x5E,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02F26:  MOVLW  06
02F28:  MOVWF  xB9
02F2A:  MOVLW  66
02F2C:  MOVWF  xB8
02F2E:  MOVFF  65E,6BA
02F32:  MOVLW  08
02F34:  MOVWF  xBB
02F36:  MOVLB  0
02F38:  CALL   2356
....................             mempointer+=8;   
02F3C:  MOVLW  08
02F3E:  MOVLB  6
02F40:  ADDWF  x5E,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
02F42:  INCF   x5E,F
02F44:  MOVFF  FF2,6B8
02F48:  BCF    FF2.7
02F4A:  CLRF   FAA
02F4C:  MOVFF  65E,FA9
02F50:  BCF    FA6.6
02F52:  BCF    FA6.7
02F54:  BSF    FA6.0
02F56:  MOVF   FA8,W
02F58:  BTFSC  xB8.7
02F5A:  BSF    FF2.7
02F5C:  MOVWF  x93
02F5E:  CLRF   1B
02F60:  BTFSC  FF2.7
02F62:  BSF    1B.7
02F64:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
02F66:  CLRF   xD7
02F68:  MOVFF  660,6D6
02F6C:  CLRF   xD9
02F6E:  MOVLW  2F
02F70:  MOVWF  xD8
02F72:  MOVLB  0
02F74:  CALL   0360
02F78:  BTFSC  1B.7
02F7A:  BSF    FF2.7
02F7C:  MOVFF  02,03
02F80:  MOVF   01,W
02F82:  ADDLW  8A
02F84:  MOVWF  01
02F86:  MOVLW  02
02F88:  ADDWFC 03,F
02F8A:  MOVFF  01,6B8
02F8E:  MOVLB  6
02F90:  MOVFF  03,6B9
02F94:  MOVLW  06
02F96:  MOVWF  xBB
02F98:  MOVLW  7B
02F9A:  MOVWF  xBA
02F9C:  MOVLW  06
02F9E:  MOVWF  xBD
02FA0:  MOVLW  83
02FA2:  MOVWF  xBC
02FA4:  MOVLW  06
02FA6:  MOVWF  xBF
02FA8:  MOVLW  8B
02FAA:  MOVWF  xBE
02FAC:  MOVFF  03,6C1
02FB0:  MOVFF  01,6C0
02FB4:  MOVFF  693,6C2
02FB8:  MOVLB  0
02FBA:  GOTO   25D0
....................             ++outputNumber; 
02FBE:  MOVLB  6
02FC0:  INCF   x60,F
....................             ++mempointer; 
02FC2:  INCF   x5E,F
....................          break; 
02FC4:  MOVLB  0
02FC6:  BRA    31E0
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
02FC8:  MOVLW  06
02FCA:  MOVLB  6
02FCC:  MOVWF  xB9
02FCE:  MOVLW  94
02FD0:  MOVWF  xB8
02FD2:  MOVFF  65E,6BA
02FD6:  MOVLW  08
02FD8:  MOVWF  xBB
02FDA:  MOVLB  0
02FDC:  CALL   2356
....................             mempointer+=8; 
02FE0:  MOVLW  08
02FE2:  MOVLB  6
02FE4:  ADDWF  x5E,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
02FE6:  MOVLW  06
02FE8:  MOVWF  xB9
02FEA:  MOVLW  9C
02FEC:  MOVWF  xB8
02FEE:  MOVFF  65E,6BA
02FF2:  MOVLW  08
02FF4:  MOVWF  xBB
02FF6:  MOVLB  0
02FF8:  CALL   2356
....................             mempointer+=8;   
02FFC:  MOVLW  08
02FFE:  MOVLB  6
03000:  ADDWF  x5E,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
03002:  MOVLW  06
03004:  MOVWF  xB9
03006:  MOVLW  A4
03008:  MOVWF  xB8
0300A:  MOVFF  65E,6BA
0300E:  MOVLW  08
03010:  MOVWF  xBB
03012:  MOVLB  0
03014:  CALL   2356
....................             mempointer+=8;   
03018:  MOVLW  08
0301A:  MOVLB  6
0301C:  ADDWF  x5E,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
0301E:  MOVLW  06
03020:  MOVWF  xB9
03022:  MOVLW  AC
03024:  MOVWF  xB8
03026:  MOVFF  65E,6BA
0302A:  MOVLW  08
0302C:  MOVWF  xBB
0302E:  MOVLB  0
03030:  CALL   2356
....................             mempointer+=8; 
03034:  MOVLW  08
03036:  MOVLB  6
03038:  ADDWF  x5E,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
0303A:  INCF   x5E,F
0303C:  MOVFF  FF2,6B8
03040:  BCF    FF2.7
03042:  CLRF   FAA
03044:  MOVFF  65E,FA9
03048:  BCF    FA6.6
0304A:  BCF    FA6.7
0304C:  BSF    FA6.0
0304E:  MOVF   FA8,W
03050:  BTFSC  xB8.7
03052:  BSF    FF2.7
03054:  MOVWF  xB4
03056:  INCF   x5E,F
03058:  MOVFF  FF2,6B9
0305C:  BCF    FF2.7
0305E:  CLRF   FAA
03060:  MOVFF  65E,FA9
03064:  BCF    FA6.6
03066:  BCF    FA6.7
03068:  BSF    FA6.0
0306A:  MOVF   FA8,W
0306C:  BTFSC  xB9.7
0306E:  BSF    FF2.7
03070:  MOVWF  xB5
03072:  INCF   x5E,F
03074:  MOVFF  FF2,6BA
03078:  BCF    FF2.7
0307A:  CLRF   FAA
0307C:  MOVFF  65E,FA9
03080:  BCF    FA6.6
03082:  BCF    FA6.7
03084:  BSF    FA6.0
03086:  MOVF   FA8,W
03088:  BTFSC  xBA.7
0308A:  BSF    FF2.7
0308C:  MOVWF  xB6
0308E:  INCF   x5E,F
03090:  MOVFF  FF2,6BB
03094:  BCF    FF2.7
03096:  CLRF   FAA
03098:  MOVFF  65E,FA9
0309C:  BCF    FA6.6
0309E:  BCF    FA6.7
030A0:  BSF    FA6.0
030A2:  MOVF   FA8,W
030A4:  BTFSC  xBB.7
030A6:  BSF    FF2.7
030A8:  MOVWF  xB7
030AA:  CLRF   1B
030AC:  BTFSC  FF2.7
030AE:  BSF    1B.7
030B0:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
030B2:  CLRF   xD7
030B4:  MOVFF  660,6D6
030B8:  CLRF   xD9
030BA:  MOVLW  2F
030BC:  MOVWF  xD8
030BE:  MOVLB  0
030C0:  CALL   0360
030C4:  BTFSC  1B.7
030C6:  BSF    FF2.7
030C8:  MOVFF  02,03
030CC:  MOVF   01,W
030CE:  ADDLW  8A
030D0:  MOVWF  01
030D2:  MOVLW  02
030D4:  ADDWFC 03,F
030D6:  MOVFF  01,6B8
030DA:  MOVLB  6
030DC:  MOVFF  03,6B9
030E0:  MOVLW  06
030E2:  MOVWF  xBB
030E4:  MOVLW  94
030E6:  MOVWF  xBA
030E8:  MOVLW  06
030EA:  MOVWF  xBD
030EC:  MOVLW  9C
030EE:  MOVWF  xBC
030F0:  MOVLW  06
030F2:  MOVWF  xBF
030F4:  MOVLW  A4
030F6:  MOVWF  xBE
030F8:  MOVLW  06
030FA:  MOVWF  xC1
030FC:  MOVLW  AC
030FE:  MOVWF  xC0
03100:  MOVFF  03,6C3
03104:  MOVFF  01,6C2
03108:  MOVFF  6B4,6C4
0310C:  MOVFF  6B5,6C5
03110:  MOVFF  6B6,6C6
03114:  MOVFF  6B7,6C7
03118:  MOVLB  0
0311A:  GOTO   2754
....................             ++outputNumber; 
0311E:  MOVLB  6
03120:  INCF   x60,F
....................             ++mempointer; 
03122:  INCF   x5E,F
....................          break; 
03124:  MOVLB  0
03126:  BRA    31E0
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
03128:  MOVLW  06
0312A:  MOVLB  6
0312C:  MOVWF  xB9
0312E:  MOVLW  83
03130:  MOVWF  xB8
03132:  MOVFF  65E,6BA
03136:  MOVLW  08
03138:  MOVWF  xBB
0313A:  MOVLB  0
0313C:  CALL   2356
....................             mempointer+=8;   
03140:  MOVLW  08
03142:  MOVLB  6
03144:  ADDWF  x5E,F
....................             memToArray(_off_adr,mempointer,8); 
03146:  MOVLW  06
03148:  MOVWF  xB9
0314A:  MOVLW  8B
0314C:  MOVWF  xB8
0314E:  MOVFF  65E,6BA
03152:  MOVLW  08
03154:  MOVWF  xBB
03156:  MOVLB  0
03158:  CALL   2356
....................             mempointer+=8;   
0315C:  MOVLW  08
0315E:  MOVLB  6
03160:  ADDWF  x5E,F
....................             output_pin=read_eeprom(++mempointer); 
03162:  INCF   x5E,F
03164:  MOVFF  FF2,6B8
03168:  BCF    FF2.7
0316A:  CLRF   FAA
0316C:  MOVFF  65E,FA9
03170:  BCF    FA6.6
03172:  BCF    FA6.7
03174:  BSF    FA6.0
03176:  MOVF   FA8,W
03178:  BTFSC  xB8.7
0317A:  BSF    FF2.7
0317C:  MOVWF  x93
0317E:  CLRF   1B
03180:  BTFSC  FF2.7
03182:  BSF    1B.7
03184:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
03186:  CLRF   xD7
03188:  MOVFF  660,6D6
0318C:  CLRF   xD9
0318E:  MOVLW  2F
03190:  MOVWF  xD8
03192:  MOVLB  0
03194:  CALL   0360
03198:  BTFSC  1B.7
0319A:  BSF    FF2.7
0319C:  MOVFF  02,03
031A0:  MOVF   01,W
031A2:  ADDLW  8A
031A4:  MOVWF  01
031A6:  MOVLW  02
031A8:  ADDWFC 03,F
031AA:  MOVFF  01,6B8
031AE:  MOVLB  6
031B0:  MOVFF  03,6B9
031B4:  MOVLW  06
031B6:  MOVWF  xBB
031B8:  MOVLW  83
031BA:  MOVWF  xBA
031BC:  MOVLW  06
031BE:  MOVWF  xBD
031C0:  MOVLW  8B
031C2:  MOVWF  xBC
031C4:  MOVFF  03,6BF
031C8:  MOVFF  01,6BE
031CC:  MOVFF  693,6C0
031D0:  MOVLB  0
031D2:  GOTO   2996
....................             ++outputNumber; 
031D6:  MOVLB  6
031D8:  INCF   x60,F
....................             ++mempointer; 
031DA:  INCF   x5E,F
....................          break; 
031DC:  MOVLB  0
031DE:  BRA    31E0
....................       } 
....................     
....................    } 
031E0:  MOVLB  6
031E2:  BRA    2A94
....................    mydevices.numberOfInputs=inputNumber; 
031E4:  MOVFF  65F,13E
....................    mydevices.numberOfOutputs=outputNumber; 
031E8:  MOVFF  660,13F
....................     
.................... } 
031EC:  MOVLB  0
031EE:  GOTO   7B76 (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
....................    _write_eeprom(++writeMemPointer,dim_adr); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    ++writeMemPointer; 
....................     
.................... } 
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
01D6C:  MOVFF  639,671
01D70:  MOVLW  01
01D72:  MOVLB  6
01D74:  MOVWF  x72
01D76:  MOVLB  0
01D78:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,on_adr); 
01D7A:  MOVLB  6
01D7C:  INCF   x39,F
01D7E:  MOVFF  639,671
01D82:  MOVFF  65E,672
01D86:  MOVLB  0
01D88:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,off_adr); 
01D8A:  MOVLB  6
01D8C:  INCF   x39,F
01D8E:  MOVFF  639,671
01D92:  MOVFF  65F,672
01D96:  MOVLB  0
01D98:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,real_button); 
01D9A:  MOVLB  6
01D9C:  INCF   x39,F
01D9E:  MOVFF  639,671
01DA2:  MOVFF  660,672
01DA6:  MOVLB  0
01DA8:  RCALL  1D3C
....................    ++writeMemPointer; 
01DAA:  MOVLB  6
01DAC:  INCF   x39,F
.................... } 
01DAE:  MOVLB  0
01DB0:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
*
01E44:  MOVFF  639,671
01E48:  MOVLW  02
01E4A:  MOVLB  6
01E4C:  MOVWF  x72
01E4E:  MOVLB  0
01E50:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,on_adr); 
01E52:  MOVLB  6
01E54:  INCF   x39,F
01E56:  MOVFF  639,671
01E5A:  MOVFF  65E,672
01E5E:  MOVLB  0
01E60:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,off_adr); 
01E62:  MOVLB  6
01E64:  INCF   x39,F
01E66:  MOVFF  639,671
01E6A:  MOVFF  65F,672
01E6E:  MOVLB  0
01E70:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,real_button); 
01E72:  MOVLB  6
01E74:  INCF   x39,F
01E76:  MOVFF  639,671
01E7A:  MOVFF  660,672
01E7E:  MOVLB  0
01E80:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,repeat); 
01E82:  MOVLB  6
01E84:  INCF   x39,F
01E86:  MOVFF  639,671
01E8A:  MOVFF  661,672
01E8E:  MOVLB  0
01E90:  RCALL  1D3C
....................     
....................    ++writeMemPointer; 
01E92:  MOVLB  6
01E94:  INCF   x39,F
.................... } 
01E96:  MOVLB  0
01E98:  RETLW  00
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
....................    ++writeMemPointer; 
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(on_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(off_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,output_pin); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
01DEC:  MOVFF  639,671
01DF0:  MOVLW  64
01DF2:  MOVLB  6
01DF4:  MOVWF  x72
01DF6:  MOVLB  0
01DF8:  RCALL  1D3C
....................    ++writeMemPointer; 
01DFA:  MOVLB  6
01DFC:  INCF   x39,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
01DFE:  MOVFF  65F,66B
01E02:  MOVFF  65E,66A
01E06:  MOVFF  639,66C
01E0A:  MOVLW  08
01E0C:  MOVWF  x6D
01E0E:  MOVLB  0
01E10:  RCALL  1DB2
....................    writeMemPointer+=8; 
01E12:  MOVLW  08
01E14:  MOVLB  6
01E16:  ADDWF  x39,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
01E18:  MOVFF  661,66B
01E1C:  MOVFF  660,66A
01E20:  MOVFF  639,66C
01E24:  MOVWF  x6D
01E26:  MOVLB  0
01E28:  RCALL  1DB2
....................    writeMemPointer+=8; 
01E2A:  MOVLW  08
01E2C:  MOVLB  6
01E2E:  ADDWF  x39,F
....................    _write_eeprom(writeMemPointer,output_pin); 
01E30:  MOVFF  639,671
01E34:  MOVFF  662,672
01E38:  MOVLB  0
01E3A:  RCALL  1D3C
....................    ++writeMemPointer; 
01E3C:  MOVLB  6
01E3E:  INCF   x39,F
.................... } 
01E40:  MOVLB  0
01E42:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
*
01E9A:  MOVFF  639,671
01E9E:  MOVLW  66
01EA0:  MOVLB  6
01EA2:  MOVWF  x72
01EA4:  MOVLB  0
01EA6:  RCALL  1D3C
....................    ++writeMemPointer; 
01EA8:  MOVLB  6
01EAA:  INCF   x39,F
....................    ArrayToMem(up_adr,writeMemPointer,8); 
01EAC:  MOVFF  65F,66B
01EB0:  MOVFF  65E,66A
01EB4:  MOVFF  639,66C
01EB8:  MOVLW  08
01EBA:  MOVWF  x6D
01EBC:  MOVLB  0
01EBE:  RCALL  1DB2
....................    writeMemPointer+=8; 
01EC0:  MOVLW  08
01EC2:  MOVLB  6
01EC4:  ADDWF  x39,F
....................    ArrayToMem(down_adr,writeMemPointer,8); 
01EC6:  MOVFF  661,66B
01ECA:  MOVFF  660,66A
01ECE:  MOVFF  639,66C
01ED2:  MOVWF  x6D
01ED4:  MOVLB  0
01ED6:  RCALL  1DB2
....................    writeMemPointer+=8; 
01ED8:  MOVLW  08
01EDA:  MOVLB  6
01EDC:  ADDWF  x39,F
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
01EDE:  MOVFF  663,66B
01EE2:  MOVFF  662,66A
01EE6:  MOVFF  639,66C
01EEA:  MOVWF  x6D
01EEC:  MOVLB  0
01EEE:  RCALL  1DB2
....................    writeMemPointer+=8; 
01EF0:  MOVLW  08
01EF2:  MOVLB  6
01EF4:  ADDWF  x39,F
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
01EF6:  MOVFF  665,66B
01EFA:  MOVFF  664,66A
01EFE:  MOVFF  639,66C
01F02:  MOVWF  x6D
01F04:  MOVLB  0
01F06:  RCALL  1DB2
....................    writeMemPointer+=8; 
01F08:  MOVLW  08
01F0A:  MOVLB  6
01F0C:  ADDWF  x39,F
....................    _write_eeprom(writeMemPointer,up_output_pin); 
01F0E:  MOVFF  639,671
01F12:  MOVFF  666,672
01F16:  MOVLB  0
01F18:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
01F1A:  MOVLB  6
01F1C:  INCF   x39,F
01F1E:  MOVFF  639,671
01F22:  MOVFF  667,672
01F26:  MOVLB  0
01F28:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
01F2A:  MOVLB  6
01F2C:  INCF   x39,F
01F2E:  MOVFF  639,671
01F32:  MOVFF  668,672
01F36:  MOVLB  0
01F38:  RCALL  1D3C
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
01F3A:  MOVLB  6
01F3C:  INCF   x39,F
01F3E:  MOVFF  639,671
01F42:  MOVFF  669,672
01F46:  MOVLB  0
01F48:  RCALL  1D3C
....................    ++writeMemPointer; 
01F4A:  MOVLB  6
01F4C:  INCF   x39,F
.................... } 
01F4E:  MOVLB  0
01F50:  GOTO   7B5E (RETURN)
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    ArrayToMem(start_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,out_on); 
....................    _write_eeprom(++writeMemPointer,out_off); 
....................    _write_eeprom(++writeMemPointer,type); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
....................    ++writeMemPointer; 
.................... } 
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... volatile unsigned int1 oscError=0; 
....................  
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
0079C:  MOVLW  06
0079E:  MOVLB  6
007A0:  ADDWF  xD8,W
007A2:  MOVWF  FE9
007A4:  MOVLW  00
007A6:  ADDWFC xD9,W
007A8:  MOVWF  FEA
007AA:  MOVLW  00
007AC:  BTFSC  FEF.0
007AE:  MOVLW  01
007B0:  ANDLW  01
007B2:  BNZ   0890
007B4:  MOVLW  06
007B6:  ADDWF  xD8,W
007B8:  MOVWF  FE9
007BA:  MOVLW  00
007BC:  ADDWFC xD9,W
007BE:  MOVWF  FEA
007C0:  MOVLW  00
007C2:  BTFSC  FEF.1
007C4:  MOVLW  01
007C6:  ANDLW  01
007C8:  SUBLW  01
007CA:  BNZ   0890
....................    {    
....................       sw-> previous_state = button_pressed; 
007CC:  MOVLW  06
007CE:  ADDWF  xD8,W
007D0:  MOVWF  FE9
007D2:  MOVLW  00
007D4:  ADDWFC xD9,W
007D6:  MOVWF  FEA
007D8:  BCF    FEF.1
....................       if(sw->outstate==off) 
007DA:  MOVLW  0B
007DC:  ADDWF  xD8,W
007DE:  MOVWF  FE9
007E0:  MOVLW  00
007E2:  ADDWFC xD9,W
007E4:  MOVWF  FEA
007E6:  DECFSZ FEF,W
007E8:  BRA    0834
....................       { 
....................          sw->outstate=on; 
007EA:  MOVLW  0B
007EC:  ADDWF  xD8,W
007EE:  MOVWF  FE9
007F0:  MOVLW  00
007F2:  ADDWFC xD9,W
007F4:  MOVWF  FEA
007F6:  CLRF   FEF
....................          sw->on.value=1; 
007F8:  MOVLW  01
007FA:  ADDWF  xD8,W
007FC:  MOVWF  FE9
007FE:  MOVLW  00
00800:  ADDWFC xD9,W
00802:  MOVWF  FEA
00804:  MOVLW  01
00806:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00808:  MOVLW  02
0080A:  ADDWF  xD8,W
0080C:  MOVWF  FE9
0080E:  MOVLW  00
00810:  ADDWFC xD9,W
00812:  MOVWF  FEA
00814:  BSF    FEF.0
....................          sw->off.value=0; 
00816:  MOVLW  04
00818:  ADDWF  xD8,W
0081A:  MOVWF  FE9
0081C:  MOVLW  00
0081E:  ADDWFC xD9,W
00820:  MOVWF  FEA
00822:  CLRF   FEF
....................          sw->off.needs_update=true; 
00824:  MOVLW  05
00826:  ADDWF  xD8,W
00828:  MOVWF  FE9
0082A:  MOVLW  00
0082C:  ADDWFC xD9,W
0082E:  MOVWF  FEA
00830:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
00832:  BRA    088E
00834:  MOVLW  0B
00836:  ADDWF  xD8,W
00838:  MOVWF  FE9
0083A:  MOVLW  00
0083C:  ADDWFC xD9,W
0083E:  MOVWF  FEA
00840:  MOVF   FEF,F
00842:  BNZ   088E
....................       { 
....................          sw->outstate=off; 
00844:  MOVLW  0B
00846:  ADDWF  xD8,W
00848:  MOVWF  FE9
0084A:  MOVLW  00
0084C:  ADDWFC xD9,W
0084E:  MOVWF  FEA
00850:  MOVLW  01
00852:  MOVWF  FEF
....................          sw->off.value=1; 
00854:  MOVLW  04
00856:  ADDWF  xD8,W
00858:  MOVWF  FE9
0085A:  MOVLW  00
0085C:  ADDWFC xD9,W
0085E:  MOVWF  FEA
00860:  MOVLW  01
00862:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00864:  MOVLW  05
00866:  ADDWF  xD8,W
00868:  MOVWF  FE9
0086A:  MOVLW  00
0086C:  ADDWFC xD9,W
0086E:  MOVWF  FEA
00870:  BSF    FEF.0
....................          sw->on.value=0; 
00872:  MOVLW  01
00874:  ADDWF  xD8,W
00876:  MOVWF  FE9
00878:  MOVLW  00
0087A:  ADDWFC xD9,W
0087C:  MOVWF  FEA
0087E:  CLRF   FEF
....................          sw->on.needs_update=true; 
00880:  MOVLW  02
00882:  ADDWF  xD8,W
00884:  MOVWF  FE9
00886:  MOVLW  00
00888:  ADDWFC xD9,W
0088A:  MOVWF  FEA
0088C:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
0088E:  BRA    08B6
00890:  MOVLW  06
00892:  ADDWF  xD8,W
00894:  MOVWF  FE9
00896:  MOVLW  00
00898:  ADDWFC xD9,W
0089A:  MOVWF  FEA
0089C:  MOVLW  00
0089E:  BTFSC  FEF.0
008A0:  MOVLW  01
008A2:  ANDLW  01
008A4:  SUBLW  01
008A6:  BNZ   08B6
....................       sw-> previous_state = button_depressed; 
008A8:  MOVLW  06
008AA:  ADDWF  xD8,W
008AC:  MOVWF  FE9
008AE:  MOVLW  00
008B0:  ADDWFC xD9,W
008B2:  MOVWF  FEA
008B4:  BSF    FEF.1
.................... } 
008B6:  MOVLB  0
008B8:  GOTO   0DDE (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
008BC:  MOVLW  06
008BE:  MOVLB  6
008C0:  ADDWF  xD8,W
008C2:  MOVWF  FE9
008C4:  MOVLW  00
008C6:  ADDWFC xD9,W
008C8:  MOVWF  FEA
008CA:  MOVLW  00
008CC:  BTFSC  FEF.0
008CE:  MOVLW  01
008D0:  ANDLW  01
008D2:  BNZ   092E
008D4:  MOVLW  07
008D6:  ADDWF  xD8,W
008D8:  MOVWF  FE9
008DA:  MOVLW  00
008DC:  ADDWFC xD9,W
008DE:  MOVWF  FEA
008E0:  DECFSZ FEF,W
008E2:  BRA    092E
....................    { 
....................          sw->outstate=on; 
008E4:  MOVLW  07
008E6:  ADDWF  xD8,W
008E8:  MOVWF  FE9
008EA:  MOVLW  00
008EC:  ADDWFC xD9,W
008EE:  MOVWF  FEA
008F0:  CLRF   FEF
....................          sw->on.value=1; 
008F2:  MOVLW  01
008F4:  ADDWF  xD8,W
008F6:  MOVWF  FE9
008F8:  MOVLW  00
008FA:  ADDWFC xD9,W
008FC:  MOVWF  FEA
008FE:  MOVLW  01
00900:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00902:  MOVLW  02
00904:  ADDWF  xD8,W
00906:  MOVWF  FE9
00908:  MOVLW  00
0090A:  ADDWFC xD9,W
0090C:  MOVWF  FEA
0090E:  BSF    FEF.0
....................          sw->off.value=0; 
00910:  MOVLW  04
00912:  ADDWF  xD8,W
00914:  MOVWF  FE9
00916:  MOVLW  00
00918:  ADDWFC xD9,W
0091A:  MOVWF  FEA
0091C:  CLRF   FEF
....................          sw->off.needs_update=true; 
0091E:  MOVLW  05
00920:  ADDWF  xD8,W
00922:  MOVWF  FE9
00924:  MOVLW  00
00926:  ADDWFC xD9,W
00928:  MOVWF  FEA
0092A:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
0092C:  BRA    09A0
0092E:  MOVLW  06
00930:  ADDWF  xD8,W
00932:  MOVWF  FE9
00934:  MOVLW  00
00936:  ADDWFC xD9,W
00938:  MOVWF  FEA
0093A:  MOVLW  00
0093C:  BTFSC  FEF.0
0093E:  MOVLW  01
00940:  ANDLW  01
00942:  SUBLW  01
00944:  BNZ   09A0
00946:  MOVLW  07
00948:  ADDWF  xD8,W
0094A:  MOVWF  FE9
0094C:  MOVLW  00
0094E:  ADDWFC xD9,W
00950:  MOVWF  FEA
00952:  MOVF   FEF,F
00954:  BNZ   09A0
....................    { 
....................          sw->outstate=off; 
00956:  MOVLW  07
00958:  ADDWF  xD8,W
0095A:  MOVWF  FE9
0095C:  MOVLW  00
0095E:  ADDWFC xD9,W
00960:  MOVWF  FEA
00962:  MOVLW  01
00964:  MOVWF  FEF
....................          sw->off.value=1; 
00966:  MOVLW  04
00968:  ADDWF  xD8,W
0096A:  MOVWF  FE9
0096C:  MOVLW  00
0096E:  ADDWFC xD9,W
00970:  MOVWF  FEA
00972:  MOVLW  01
00974:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00976:  MOVLW  05
00978:  ADDWF  xD8,W
0097A:  MOVWF  FE9
0097C:  MOVLW  00
0097E:  ADDWFC xD9,W
00980:  MOVWF  FEA
00982:  BSF    FEF.0
....................          sw->on.value=0; 
00984:  MOVLW  01
00986:  ADDWF  xD8,W
00988:  MOVWF  FE9
0098A:  MOVLW  00
0098C:  ADDWFC xD9,W
0098E:  MOVWF  FEA
00990:  CLRF   FEF
....................          sw->on.needs_update=true; 
00992:  MOVLW  02
00994:  ADDWF  xD8,W
00996:  MOVWF  FE9
00998:  MOVLW  00
0099A:  ADDWFC xD9,W
0099C:  MOVWF  FEA
0099E:  BSF    FEF.0
....................    } 
.................... } 
009A0:  MOVLB  0
009A2:  GOTO   0DDE (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
003F6:  MOVLW  09
003F8:  MOVLB  6
003FA:  ADDWF  xD8,W
003FC:  MOVWF  FE9
003FE:  MOVLW  00
00400:  ADDWFC xD9,W
00402:  MOVWF  FEA
00404:  MOVFF  FEF,6DA
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
00408:  MOVLW  0E
0040A:  ADDWF  xD8,W
0040C:  MOVWF  FE9
0040E:  MOVLW  00
00410:  ADDWFC xD9,W
00412:  MOVWF  FEA
00414:  MOVLW  00
00416:  BTFSC  FEF.0
00418:  MOVLW  01
0041A:  ANDLW  01
0041C:  BTFSS  FD8.2
0041E:  BRA    05EE
....................    { 
....................     //  printf("STATE %u",sw->current_state); 
....................      // printf("DIF %LU",clock - sw->timer); 
....................       sw-> previous_state = button_pressed; 
00420:  MOVLW  0E
00422:  ADDWF  xD8,W
00424:  MOVWF  FE9
00426:  MOVLW  00
00428:  ADDWFC xD9,W
0042A:  MOVWF  FEA
0042C:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
0042E:  MOVLW  0A
00430:  ADDWF  xD8,W
00432:  MOVWF  FE9
00434:  MOVLW  00
00436:  ADDWFC xD9,W
00438:  MOVWF  FEA
0043A:  MOVFF  FEF,00
0043E:  MOVFF  FEC,01
00442:  MOVFF  FEC,02
00446:  MOVFF  FEC,03
0044A:  MOVF   00,W
0044C:  SUBWF  x3A,W
0044E:  MOVWF  xDB
00450:  MOVF   01,W
00452:  SUBWFB x3B,W
00454:  MOVWF  xDC
00456:  MOVF   02,W
00458:  SUBWFB x3C,W
0045A:  MOVWF  xDD
0045C:  MOVF   03,W
0045E:  SUBWFB x3D,W
00460:  MOVWF  xDE
00462:  MOVF   x42,W
00464:  SUBWF  xDE,W
00466:  BNC   0480
00468:  BNZ   0494
0046A:  MOVF   x41,W
0046C:  SUBWF  xDD,W
0046E:  BNC   0480
00470:  BNZ   0494
00472:  MOVF   x40,W
00474:  SUBWF  xDC,W
00476:  BNC   0480
00478:  BNZ   0494
0047A:  MOVF   xDB,W
0047C:  SUBWF  x3F,W
0047E:  BNC   0494
00480:  MOVLW  0F
00482:  ADDWF  xD8,W
00484:  MOVWF  FE9
00486:  MOVLW  00
00488:  ADDWFC xD9,W
0048A:  MOVWF  FEA
0048C:  MOVF   FEF,W
0048E:  SUBLW  02
00490:  BTFSS  FD8.2
00492:  BRA    05EC
00494:  MOVLW  0F
00496:  ADDWF  xD8,W
00498:  MOVWF  FE9
0049A:  MOVLW  00
0049C:  ADDWFC xD9,W
0049E:  MOVWF  FEA
004A0:  MOVF   FEF,W
004A2:  SUBLW  04
004A4:  BTFSC  FD8.2
004A6:  BRA    05EC
....................       {  
....................          if(sw->outstate==off) 
004A8:  MOVLW  0F
004AA:  ADDWF  xD8,W
004AC:  MOVWF  FE9
004AE:  MOVLW  00
004B0:  ADDWFC xD9,W
004B2:  MOVWF  FEA
004B4:  DECFSZ FEF,W
004B6:  BRA    04F6
....................          { 
....................             sw->outstate=maxed; 
004B8:  MOVLW  0F
004BA:  ADDWF  xD8,W
004BC:  MOVWF  FE9
004BE:  MOVLW  00
004C0:  ADDWFC xD9,W
004C2:  MOVWF  FEA
004C4:  MOVLW  04
004C6:  MOVWF  FEF
....................             sw->on.value=1; 
004C8:  ADDWF  xD8,W
004CA:  MOVWF  FE9
004CC:  MOVLW  00
004CE:  ADDWFC xD9,W
004D0:  MOVWF  FEA
004D2:  MOVLW  01
004D4:  MOVWF  FEF
....................             sw->current_level = 127; 
004D6:  MOVLW  09
004D8:  ADDWF  xD8,W
004DA:  MOVWF  FE9
004DC:  MOVLW  00
004DE:  ADDWFC xD9,W
004E0:  MOVWF  FEA
004E2:  MOVLW  7F
004E4:  MOVWF  FEF
....................             sw->on.needs_update=1; 
004E6:  MOVLW  05
004E8:  ADDWF  xD8,W
004EA:  MOVWF  FE9
004EC:  MOVLW  00
004EE:  ADDWFC xD9,W
004F0:  MOVWF  FEA
004F2:  BSF    FEF.0
....................          } 
....................         else 
004F4:  BRA    05EA
....................         { 
....................          sw->outstate = dimming; 
004F6:  MOVLW  0F
004F8:  ADDWF  xD8,W
004FA:  MOVWF  FE9
004FC:  MOVLW  00
004FE:  ADDWFC xD9,W
00500:  MOVWF  FEA
00502:  MOVLW  02
00504:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
00506:  MOVLW  0A
00508:  ADDWF  xD8,W
0050A:  MOVWF  FE9
0050C:  MOVLW  00
0050E:  ADDWFC xD9,W
00510:  MOVWF  FEA
00512:  MOVFF  FEF,00
00516:  MOVFF  FEC,01
0051A:  MOVFF  FEC,02
0051E:  MOVFF  FEC,03
00522:  MOVF   00,W
00524:  SUBWF  x3A,W
00526:  MOVWF  xDB
00528:  MOVF   01,W
0052A:  SUBWFB x3B,W
0052C:  MOVWF  xDC
0052E:  MOVF   02,W
00530:  SUBWFB x3C,W
00532:  MOVWF  xDD
00534:  MOVF   03,W
00536:  SUBWFB x3D,W
00538:  MOVWF  xDE
0053A:  MOVF   xDE,F
0053C:  BNZ   054C
0053E:  MOVF   xDD,F
00540:  BNZ   054C
00542:  MOVF   xDC,F
00544:  BNZ   054C
00546:  MOVF   xDB,W
00548:  SUBWF  x3E,W
0054A:  BC    05CE
....................          { 
....................             if (sw->direction == up) //para cima 
0054C:  MOVLW  0E
0054E:  ADDWF  xD8,W
00550:  MOVWF  FE9
00552:  MOVLW  00
00554:  ADDWFC xD9,W
00556:  MOVWF  FEA
00558:  MOVLW  00
0055A:  BTFSC  FEF.2
0055C:  MOVLW  01
0055E:  ANDLW  01
00560:  BNZ   0592
....................             { 
....................                ++sw->current_level; 
00562:  MOVLW  09
00564:  ADDWF  xD8,W
00566:  MOVWF  FE9
00568:  MOVLW  00
0056A:  ADDWFC xD9,W
0056C:  MOVWF  FEA
0056E:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
00570:  MOVLW  09
00572:  ADDWF  xD8,W
00574:  MOVWF  FE9
00576:  MOVLW  00
00578:  ADDWFC xD9,W
0057A:  MOVWF  FEA
0057C:  MOVF   FEF,W
0057E:  SUBLW  7F
00580:  BNZ   0590
00582:  MOVLW  0E
00584:  ADDWF  xD8,W
00586:  MOVWF  FE9
00588:  MOVLW  00
0058A:  ADDWFC xD9,W
0058C:  MOVWF  FEA
0058E:  BSF    FEF.2
....................             } 
....................             else//para baixo 
00590:  BRA    05CE
....................             { 
....................                --sw->current_level; 
00592:  MOVLW  09
00594:  ADDWF  xD8,W
00596:  MOVWF  FE9
00598:  MOVLW  00
0059A:  ADDWFC xD9,W
0059C:  MOVWF  FEA
0059E:  DECF   FEF,F
....................                if (sw->current_level == 0)  
005A0:  MOVLW  09
005A2:  ADDWF  xD8,W
005A4:  MOVWF  FE9
005A6:  MOVLW  00
005A8:  ADDWFC xD9,W
005AA:  MOVWF  FEA
005AC:  MOVF   FEF,F
005AE:  BNZ   05CE
....................                {   
....................                   sw->direction = up; 
005B0:  MOVLW  0E
005B2:  ADDWF  xD8,W
005B4:  MOVWF  FE9
005B6:  MOVLW  00
005B8:  ADDWFC xD9,W
005BA:  MOVWF  FEA
005BC:  BCF    FEF.2
....................                   sw->off.value=1; 
005BE:  MOVLW  07
005C0:  ADDWF  xD8,W
005C2:  MOVWF  FE9
005C4:  MOVLW  00
005C6:  ADDWFC xD9,W
005C8:  MOVWF  FEA
005CA:  MOVLW  01
005CC:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
005CE:  MOVLW  0A
005D0:  ADDWF  xD8,W
005D2:  MOVWF  FE9
005D4:  MOVLW  00
005D6:  ADDWFC xD9,W
005D8:  MOVWF  FEA
005DA:  MOVFF  63A,FEF
005DE:  MOVFF  63B,FEC
005E2:  MOVFF  63C,FEC
005E6:  MOVFF  63D,FEC
....................       } 
....................       } 
....................       else 
005EA:  BRA    05EC
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
005EC:  BRA    074E
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
005EE:  MOVLW  0E
005F0:  ADDWF  xD8,W
005F2:  MOVWF  FE9
005F4:  MOVLW  00
005F6:  ADDWFC xD9,W
005F8:  MOVWF  FEA
005FA:  MOVLW  00
005FC:  BTFSC  FEF.1
005FE:  MOVLW  01
00600:  ANDLW  01
00602:  BTFSS  FD8.2
00604:  BRA    0732
....................       { 
....................          sw->previous_state = button_depressed; 
00606:  MOVLW  0E
00608:  ADDWF  xD8,W
0060A:  MOVWF  FE9
0060C:  MOVLW  00
0060E:  ADDWFC xD9,W
00610:  MOVWF  FEA
00612:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
00614:  MOVLW  0F
00616:  ADDWF  xD8,W
00618:  MOVWF  FE9
0061A:  MOVLW  00
0061C:  ADDWFC xD9,W
0061E:  MOVWF  FEA
00620:  MOVF   FEF,W
00622:  SUBLW  02
00624:  BNZ   066A
....................          { 
....................             sw-> outstate = on; 
00626:  MOVLW  0F
00628:  ADDWF  xD8,W
0062A:  MOVWF  FE9
0062C:  MOVLW  00
0062E:  ADDWFC xD9,W
00630:  MOVWF  FEA
00632:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
00634:  MOVLW  0E
00636:  ADDWF  xD8,W
00638:  MOVWF  FE9
0063A:  MOVLW  00
0063C:  ADDWFC xD9,W
0063E:  MOVWF  FEA
00640:  MOVLW  00
00642:  BTFSC  FEF.2
00644:  MOVLW  01
00646:  ANDLW  01
00648:  BNZ   065A
0064A:  MOVLW  0E
0064C:  ADDWF  xD8,W
0064E:  MOVWF  FE9
00650:  MOVLW  00
00652:  ADDWFC xD9,W
00654:  MOVWF  FEA
00656:  BSF    FEF.2
....................             else sw->direction = up; 
00658:  BRA    0668
0065A:  MOVLW  0E
0065C:  ADDWF  xD8,W
0065E:  MOVWF  FE9
00660:  MOVLW  00
00662:  ADDWFC xD9,W
00664:  MOVWF  FEA
00666:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
00668:  BRA    0732
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
0066A:  MOVLW  0F
0066C:  ADDWF  xD8,W
0066E:  MOVWF  FE9
00670:  MOVLW  00
00672:  ADDWFC xD9,W
00674:  MOVWF  FEA
00676:  DECFSZ FEF,W
00678:  BRA    06B6
....................             { 
....................                sw->outstate=on; 
0067A:  MOVLW  0F
0067C:  ADDWF  xD8,W
0067E:  MOVWF  FE9
00680:  MOVLW  00
00682:  ADDWFC xD9,W
00684:  MOVWF  FEA
00686:  CLRF   FEF
....................                sw->on.value=1; 
00688:  MOVLW  04
0068A:  ADDWF  xD8,W
0068C:  MOVWF  FE9
0068E:  MOVLW  00
00690:  ADDWFC xD9,W
00692:  MOVWF  FEA
00694:  MOVLW  01
00696:  MOVWF  FEF
....................                sw->direction = down; 
00698:  MOVLW  0E
0069A:  ADDWF  xD8,W
0069C:  MOVWF  FE9
0069E:  MOVLW  00
006A0:  ADDWFC xD9,W
006A2:  MOVWF  FEA
006A4:  BSF    FEF.2
....................                sw->on.needs_update=true; 
006A6:  MOVLW  05
006A8:  ADDWF  xD8,W
006AA:  MOVWF  FE9
006AC:  MOVLW  00
006AE:  ADDWFC xD9,W
006B0:  MOVWF  FEA
006B2:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
006B4:  BRA    0732
006B6:  MOVLW  0F
006B8:  ADDWF  xD8,W
006BA:  MOVWF  FE9
006BC:  MOVLW  00
006BE:  ADDWFC xD9,W
006C0:  MOVWF  FEA
006C2:  MOVF   FEF,F
006C4:  BNZ   0704
....................             { 
....................                sw->outstate=off; 
006C6:  MOVLW  0F
006C8:  ADDWF  xD8,W
006CA:  MOVWF  FE9
006CC:  MOVLW  00
006CE:  ADDWFC xD9,W
006D0:  MOVWF  FEA
006D2:  MOVLW  01
006D4:  MOVWF  FEF
....................                sw->off.value=1; 
006D6:  MOVLW  07
006D8:  ADDWF  xD8,W
006DA:  MOVWF  FE9
006DC:  MOVLW  00
006DE:  ADDWFC xD9,W
006E0:  MOVWF  FEA
006E2:  MOVLW  01
006E4:  MOVWF  FEF
....................                sw->direction = up; 
006E6:  MOVLW  0E
006E8:  ADDWF  xD8,W
006EA:  MOVWF  FE9
006EC:  MOVLW  00
006EE:  ADDWFC xD9,W
006F0:  MOVWF  FEA
006F2:  BCF    FEF.2
....................                sw->off.needs_update=true; 
006F4:  MOVLW  08
006F6:  ADDWF  xD8,W
006F8:  MOVWF  FE9
006FA:  MOVLW  00
006FC:  ADDWFC xD9,W
006FE:  MOVWF  FEA
00700:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
00702:  BRA    0732
00704:  MOVLW  0F
00706:  ADDWF  xD8,W
00708:  MOVWF  FE9
0070A:  MOVLW  00
0070C:  ADDWFC xD9,W
0070E:  MOVWF  FEA
00710:  MOVF   FEF,W
00712:  SUBLW  04
00714:  BNZ   0732
....................             { 
....................                sw->outstate=on; 
00716:  MOVLW  0F
00718:  ADDWF  xD8,W
0071A:  MOVWF  FE9
0071C:  MOVLW  00
0071E:  ADDWFC xD9,W
00720:  MOVWF  FEA
00722:  CLRF   FEF
....................                sw->direction = down; 
00724:  MOVLW  0E
00726:  ADDWF  xD8,W
00728:  MOVWF  FE9
0072A:  MOVLW  00
0072C:  ADDWFC xD9,W
0072E:  MOVWF  FEA
00730:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
00732:  MOVLW  0A
00734:  ADDWF  xD8,W
00736:  MOVWF  FE9
00738:  MOVLW  00
0073A:  ADDWFC xD9,W
0073C:  MOVWF  FEA
0073E:  MOVFF  63A,FEF
00742:  MOVFF  63B,FEC
00746:  MOVFF  63C,FEC
0074A:  MOVFF  63D,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
0074E:  MOVLW  09
00750:  ADDWF  xD8,W
00752:  MOVWF  FE9
00754:  MOVLW  00
00756:  ADDWFC xD9,W
00758:  MOVWF  FEA
0075A:  MOVF   FEF,W
0075C:  SUBWF  xDA,W
0075E:  BZ    0796
....................    { 
....................       sw->dim_level.value=sw->current_level; 
00760:  MOVLW  01
00762:  ADDWF  xD8,W
00764:  MOVWF  01
00766:  MOVLW  00
00768:  ADDWFC xD9,W
0076A:  MOVWF  03
0076C:  MOVLW  09
0076E:  ADDWF  xD8,W
00770:  MOVWF  FE9
00772:  MOVLW  00
00774:  ADDWFC xD9,W
00776:  MOVWF  FEA
00778:  MOVFF  FEF,6DD
0077C:  MOVFF  03,FEA
00780:  MOVFF  01,FE9
00784:  MOVFF  6DD,FEF
....................       sw->dim_level.needs_update=true; 
00788:  MOVLW  02
0078A:  ADDWF  xD8,W
0078C:  MOVWF  FE9
0078E:  MOVLW  00
00790:  ADDWFC xD9,W
00792:  MOVWF  FEA
00794:  BSF    FEF.0
....................    } 
.................... } 
00796:  MOVLB  0
00798:  GOTO   0DDE (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
009A6:  MOVLB  6
009A8:  CLRF   xD5
009AA:  MOVLB  1
009AC:  MOVF   x3E,W
009AE:  MOVLB  6
009B0:  SUBWF  xD5,W
009B2:  BTFSC  FD8.0
009B4:  BRA    0DE4
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
009B6:  CLRF   xD7
009B8:  MOVFF  6D5,6D6
009BC:  CLRF   xD9
009BE:  MOVLW  21
009C0:  MOVWF  xD8
009C2:  MOVLB  0
009C4:  RCALL  0360
009C6:  MOVFF  02,03
009CA:  MOVF   01,W
009CC:  ADDLW  40
009CE:  MOVWF  01
009D0:  MOVLW  01
009D2:  ADDWFC 03,F
009D4:  MOVFF  01,FE9
009D8:  MOVFF  03,FEA
009DC:  MOVF   FEF,W
009DE:  BZ    09F4
009E0:  XORLW  03
009E2:  BTFSC  FD8.2
009E4:  BRA    0B3A
009E6:  XORLW  02
009E8:  BTFSC  FD8.2
009EA:  BRA    0B3C
009EC:  XORLW  03
009EE:  BTFSC  FD8.2
009F0:  BRA    0C8A
009F2:  BRA    0DDC
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
009F4:  MOVLB  6
009F6:  CLRF   xD7
009F8:  MOVFF  6D5,6D6
009FC:  CLRF   xD9
009FE:  MOVLW  21
00A00:  MOVWF  xD8
00A02:  MOVLB  0
00A04:  RCALL  0360
00A06:  MOVF   01,W
00A08:  ADDLW  02
00A0A:  MOVLB  6
00A0C:  MOVWF  xD6
00A0E:  MOVLW  00
00A10:  ADDWFC 02,W
00A12:  MOVWF  xD7
00A14:  MOVLW  01
00A16:  ADDWF  xD6,W
00A18:  MOVWF  01
00A1A:  MOVLW  00
00A1C:  ADDWFC xD7,W
00A1E:  MOVWF  03
00A20:  MOVF   01,W
00A22:  ADDLW  3E
00A24:  MOVWF  01
00A26:  MOVLW  01
00A28:  ADDWFC 03,F
00A2A:  MOVF   01,W
00A2C:  ADDLW  10
00A2E:  MOVWF  FE9
00A30:  MOVLW  00
00A32:  ADDWFC 03,W
00A34:  MOVWF  FEA
00A36:  MOVFF  FEF,6D8
00A3A:  MOVFF  6D8,6D9
00A3E:  MOVLW  01
00A40:  MOVWF  xDA
00A42:  MOVLW  0F
00A44:  MOVWF  xDC
00A46:  MOVLW  92
00A48:  MOVWF  xDB
00A4A:  MOVLB  0
00A4C:  RCALL  0382
00A4E:  MOVFF  6D8,6D9
00A52:  MOVLW  0F
00A54:  MOVLB  6
00A56:  MOVWF  xDB
00A58:  MOVLW  80
00A5A:  MOVWF  xDA
00A5C:  MOVLB  0
00A5E:  RCALL  03C4
00A60:  BTFSS  01.0
00A62:  BRA    0AAC
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00A64:  MOVLB  6
00A66:  CLRF   xD7
00A68:  MOVFF  6D5,6D6
00A6C:  CLRF   xD9
00A6E:  MOVLW  21
00A70:  MOVWF  xD8
00A72:  MOVLB  0
00A74:  RCALL  0360
00A76:  MOVF   01,W
00A78:  ADDLW  02
00A7A:  MOVLB  6
00A7C:  MOVWF  xD6
00A7E:  MOVLW  00
00A80:  ADDWFC 02,W
00A82:  MOVWF  xD7
00A84:  MOVLW  01
00A86:  ADDWF  xD6,W
00A88:  MOVWF  01
00A8A:  MOVLW  00
00A8C:  ADDWFC xD7,W
00A8E:  MOVWF  03
00A90:  MOVF   01,W
00A92:  ADDLW  3E
00A94:  MOVWF  01
00A96:  MOVLW  01
00A98:  ADDWFC 03,F
00A9A:  MOVF   01,W
00A9C:  ADDLW  0E
00A9E:  MOVWF  FE9
00AA0:  MOVLW  00
00AA2:  ADDWFC 03,W
00AA4:  MOVWF  FEA
00AA6:  BSF    FEF.0
....................             } 
....................             else  
00AA8:  BRA    0AF0
00AAA:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00AAC:  MOVLB  6
00AAE:  CLRF   xD7
00AB0:  MOVFF  6D5,6D6
00AB4:  CLRF   xD9
00AB6:  MOVLW  21
00AB8:  MOVWF  xD8
00ABA:  MOVLB  0
00ABC:  RCALL  0360
00ABE:  MOVF   01,W
00AC0:  ADDLW  02
00AC2:  MOVLB  6
00AC4:  MOVWF  xD6
00AC6:  MOVLW  00
00AC8:  ADDWFC 02,W
00ACA:  MOVWF  xD7
00ACC:  MOVLW  01
00ACE:  ADDWF  xD6,W
00AD0:  MOVWF  01
00AD2:  MOVLW  00
00AD4:  ADDWFC xD7,W
00AD6:  MOVWF  03
00AD8:  MOVF   01,W
00ADA:  ADDLW  3E
00ADC:  MOVWF  01
00ADE:  MOVLW  01
00AE0:  ADDWFC 03,F
00AE2:  MOVF   01,W
00AE4:  ADDLW  0E
00AE6:  MOVWF  FE9
00AE8:  MOVLW  00
00AEA:  ADDWFC 03,W
00AEC:  MOVWF  FEA
00AEE:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00AF0:  CLRF   xD7
00AF2:  MOVFF  6D5,6D6
00AF6:  CLRF   xD9
00AF8:  MOVLW  21
00AFA:  MOVWF  xD8
00AFC:  MOVLB  0
00AFE:  RCALL  0360
00B00:  MOVF   01,W
00B02:  ADDLW  02
00B04:  MOVLB  6
00B06:  MOVWF  xD6
00B08:  MOVLW  00
00B0A:  ADDWFC 02,W
00B0C:  MOVWF  xD7
00B0E:  MOVLW  01
00B10:  ADDWF  xD6,W
00B12:  MOVWF  01
00B14:  MOVLW  00
00B16:  ADDWFC xD7,W
00B18:  MOVWF  03
00B1A:  MOVF   01,W
00B1C:  ADDLW  3E
00B1E:  MOVWF  01
00B20:  MOVLW  01
00B22:  ADDWFC 03,F
00B24:  MOVFF  01,6D6
00B28:  MOVFF  03,6D7
00B2C:  MOVFF  03,6D9
00B30:  MOVFF  01,6D8
00B34:  MOVLB  0
00B36:  BRA    03F6
....................             break; 
00B38:  BRA    0DDE
....................     case timer: 
....................  
....................            break; 
00B3A:  BRA    0DDE
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00B3C:  MOVLB  6
00B3E:  CLRF   xD7
00B40:  MOVFF  6D5,6D6
00B44:  CLRF   xD9
00B46:  MOVLW  21
00B48:  MOVWF  xD8
00B4A:  MOVLB  0
00B4C:  RCALL  0360
00B4E:  MOVF   01,W
00B50:  ADDLW  02
00B52:  MOVLB  6
00B54:  MOVWF  xD6
00B56:  MOVLW  00
00B58:  ADDWFC 02,W
00B5A:  MOVWF  xD7
00B5C:  MOVLW  01
00B5E:  ADDWF  xD6,W
00B60:  MOVWF  01
00B62:  MOVLW  00
00B64:  ADDWFC xD7,W
00B66:  MOVWF  03
00B68:  MOVF   01,W
00B6A:  ADDLW  3E
00B6C:  MOVWF  01
00B6E:  MOVLW  01
00B70:  ADDWFC 03,F
00B72:  MOVF   01,W
00B74:  ADDLW  0C
00B76:  MOVWF  FE9
00B78:  MOVLW  00
00B7A:  ADDWFC 03,W
00B7C:  MOVWF  FEA
00B7E:  MOVFF  FEF,6D8
00B82:  MOVFF  6D8,6D9
00B86:  MOVLW  01
00B88:  MOVWF  xDA
00B8A:  MOVLW  0F
00B8C:  MOVWF  xDC
00B8E:  MOVLW  92
00B90:  MOVWF  xDB
00B92:  MOVLB  0
00B94:  CALL   0382
00B98:  MOVFF  6D8,6D9
00B9C:  MOVLW  0F
00B9E:  MOVLB  6
00BA0:  MOVWF  xDB
00BA2:  MOVLW  80
00BA4:  MOVWF  xDA
00BA6:  MOVLB  0
00BA8:  RCALL  03C4
00BAA:  BTFSS  01.0
00BAC:  BRA    0BF8
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00BAE:  MOVLB  6
00BB0:  CLRF   xD7
00BB2:  MOVFF  6D5,6D6
00BB6:  CLRF   xD9
00BB8:  MOVLW  21
00BBA:  MOVWF  xD8
00BBC:  MOVLB  0
00BBE:  CALL   0360
00BC2:  MOVF   01,W
00BC4:  ADDLW  02
00BC6:  MOVLB  6
00BC8:  MOVWF  xD6
00BCA:  MOVLW  00
00BCC:  ADDWFC 02,W
00BCE:  MOVWF  xD7
00BD0:  MOVLW  01
00BD2:  ADDWF  xD6,W
00BD4:  MOVWF  01
00BD6:  MOVLW  00
00BD8:  ADDWFC xD7,W
00BDA:  MOVWF  03
00BDC:  MOVF   01,W
00BDE:  ADDLW  3E
00BE0:  MOVWF  01
00BE2:  MOVLW  01
00BE4:  ADDWFC 03,F
00BE6:  MOVF   01,W
00BE8:  ADDLW  06
00BEA:  MOVWF  FE9
00BEC:  MOVLW  00
00BEE:  ADDWFC 03,W
00BF0:  MOVWF  FEA
00BF2:  BSF    FEF.0
....................             } 
....................             else  
00BF4:  BRA    0C3E
00BF6:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00BF8:  MOVLB  6
00BFA:  CLRF   xD7
00BFC:  MOVFF  6D5,6D6
00C00:  CLRF   xD9
00C02:  MOVLW  21
00C04:  MOVWF  xD8
00C06:  MOVLB  0
00C08:  CALL   0360
00C0C:  MOVF   01,W
00C0E:  ADDLW  02
00C10:  MOVLB  6
00C12:  MOVWF  xD6
00C14:  MOVLW  00
00C16:  ADDWFC 02,W
00C18:  MOVWF  xD7
00C1A:  MOVLW  01
00C1C:  ADDWF  xD6,W
00C1E:  MOVWF  01
00C20:  MOVLW  00
00C22:  ADDWFC xD7,W
00C24:  MOVWF  03
00C26:  MOVF   01,W
00C28:  ADDLW  3E
00C2A:  MOVWF  01
00C2C:  MOVLW  01
00C2E:  ADDWFC 03,F
00C30:  MOVF   01,W
00C32:  ADDLW  06
00C34:  MOVWF  FE9
00C36:  MOVLW  00
00C38:  ADDWFC 03,W
00C3A:  MOVWF  FEA
00C3C:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00C3E:  CLRF   xD7
00C40:  MOVFF  6D5,6D6
00C44:  CLRF   xD9
00C46:  MOVLW  21
00C48:  MOVWF  xD8
00C4A:  MOVLB  0
00C4C:  CALL   0360
00C50:  MOVF   01,W
00C52:  ADDLW  02
00C54:  MOVLB  6
00C56:  MOVWF  xD6
00C58:  MOVLW  00
00C5A:  ADDWFC 02,W
00C5C:  MOVWF  xD7
00C5E:  MOVLW  01
00C60:  ADDWF  xD6,W
00C62:  MOVWF  01
00C64:  MOVLW  00
00C66:  ADDWFC xD7,W
00C68:  MOVWF  03
00C6A:  MOVF   01,W
00C6C:  ADDLW  3E
00C6E:  MOVWF  01
00C70:  MOVLW  01
00C72:  ADDWFC 03,F
00C74:  MOVFF  01,6D6
00C78:  MOVFF  03,6D7
00C7C:  MOVFF  03,6D9
00C80:  MOVFF  01,6D8
00C84:  MOVLB  0
00C86:  BRA    079C
....................     break; 
00C88:  BRA    0DDE
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00C8A:  MOVLB  6
00C8C:  CLRF   xD7
00C8E:  MOVFF  6D5,6D6
00C92:  CLRF   xD9
00C94:  MOVLW  21
00C96:  MOVWF  xD8
00C98:  MOVLB  0
00C9A:  CALL   0360
00C9E:  MOVF   01,W
00CA0:  ADDLW  02
00CA2:  MOVLB  6
00CA4:  MOVWF  xD6
00CA6:  MOVLW  00
00CA8:  ADDWFC 02,W
00CAA:  MOVWF  xD7
00CAC:  MOVLW  01
00CAE:  ADDWF  xD6,W
00CB0:  MOVWF  01
00CB2:  MOVLW  00
00CB4:  ADDWFC xD7,W
00CB6:  MOVWF  03
00CB8:  MOVF   01,W
00CBA:  ADDLW  3E
00CBC:  MOVWF  01
00CBE:  MOVLW  01
00CC0:  ADDWFC 03,F
00CC2:  MOVF   01,W
00CC4:  ADDLW  09
00CC6:  MOVWF  FE9
00CC8:  MOVLW  00
00CCA:  ADDWFC 03,W
00CCC:  MOVWF  FEA
00CCE:  MOVFF  FEF,6D8
00CD2:  MOVFF  6D8,6D9
00CD6:  MOVLW  01
00CD8:  MOVWF  xDA
00CDA:  MOVLW  0F
00CDC:  MOVWF  xDC
00CDE:  MOVLW  92
00CE0:  MOVWF  xDB
00CE2:  MOVLB  0
00CE4:  CALL   0382
00CE8:  MOVFF  6D8,6D9
00CEC:  MOVLW  0F
00CEE:  MOVLB  6
00CF0:  MOVWF  xDB
00CF2:  MOVLW  80
00CF4:  MOVWF  xDA
00CF6:  MOVLB  0
00CF8:  CALL   03C4
00CFC:  BTFSS  01.0
00CFE:  BRA    0D4A
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00D00:  MOVLB  6
00D02:  CLRF   xD7
00D04:  MOVFF  6D5,6D6
00D08:  CLRF   xD9
00D0A:  MOVLW  21
00D0C:  MOVWF  xD8
00D0E:  MOVLB  0
00D10:  CALL   0360
00D14:  MOVF   01,W
00D16:  ADDLW  02
00D18:  MOVLB  6
00D1A:  MOVWF  xD6
00D1C:  MOVLW  00
00D1E:  ADDWFC 02,W
00D20:  MOVWF  xD7
00D22:  MOVLW  01
00D24:  ADDWF  xD6,W
00D26:  MOVWF  01
00D28:  MOVLW  00
00D2A:  ADDWFC xD7,W
00D2C:  MOVWF  03
00D2E:  MOVF   01,W
00D30:  ADDLW  3E
00D32:  MOVWF  01
00D34:  MOVLW  01
00D36:  ADDWFC 03,F
00D38:  MOVF   01,W
00D3A:  ADDLW  06
00D3C:  MOVWF  FE9
00D3E:  MOVLW  00
00D40:  ADDWFC 03,W
00D42:  MOVWF  FEA
00D44:  BSF    FEF.0
....................             } 
....................             else  
00D46:  BRA    0D90
00D48:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00D4A:  MOVLB  6
00D4C:  CLRF   xD7
00D4E:  MOVFF  6D5,6D6
00D52:  CLRF   xD9
00D54:  MOVLW  21
00D56:  MOVWF  xD8
00D58:  MOVLB  0
00D5A:  CALL   0360
00D5E:  MOVF   01,W
00D60:  ADDLW  02
00D62:  MOVLB  6
00D64:  MOVWF  xD6
00D66:  MOVLW  00
00D68:  ADDWFC 02,W
00D6A:  MOVWF  xD7
00D6C:  MOVLW  01
00D6E:  ADDWF  xD6,W
00D70:  MOVWF  01
00D72:  MOVLW  00
00D74:  ADDWFC xD7,W
00D76:  MOVWF  03
00D78:  MOVF   01,W
00D7A:  ADDLW  3E
00D7C:  MOVWF  01
00D7E:  MOVLW  01
00D80:  ADDWFC 03,F
00D82:  MOVF   01,W
00D84:  ADDLW  06
00D86:  MOVWF  FE9
00D88:  MOVLW  00
00D8A:  ADDWFC 03,W
00D8C:  MOVWF  FEA
00D8E:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00D90:  CLRF   xD7
00D92:  MOVFF  6D5,6D6
00D96:  CLRF   xD9
00D98:  MOVLW  21
00D9A:  MOVWF  xD8
00D9C:  MOVLB  0
00D9E:  CALL   0360
00DA2:  MOVF   01,W
00DA4:  ADDLW  02
00DA6:  MOVLB  6
00DA8:  MOVWF  xD6
00DAA:  MOVLW  00
00DAC:  ADDWFC 02,W
00DAE:  MOVWF  xD7
00DB0:  MOVLW  01
00DB2:  ADDWF  xD6,W
00DB4:  MOVWF  01
00DB6:  MOVLW  00
00DB8:  ADDWFC xD7,W
00DBA:  MOVWF  03
00DBC:  MOVF   01,W
00DBE:  ADDLW  3E
00DC0:  MOVWF  01
00DC2:  MOVLW  01
00DC4:  ADDWFC 03,F
00DC6:  MOVFF  01,6D6
00DCA:  MOVFF  03,6D7
00DCE:  MOVFF  03,6D9
00DD2:  MOVFF  01,6D8
00DD6:  MOVLB  0
00DD8:  BRA    08BC
....................     break; 
00DDA:  BRA    0DDE
....................     default: 
....................  
....................             break;  
00DDC:  BRA    0DDE
....................             } 
....................  
....................    } 
00DDE:  MOVLB  6
00DE0:  INCF   xD5,F
00DE2:  BRA    09AA
.................... } 
00DE4:  MOVLB  0
00DE6:  GOTO   0E04 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00DEA:  MOVLW  01
00DEC:  MOVLB  6
00DEE:  ADDWF  x3A,F
00DF0:  BTFSC  FD8.0
00DF2:  INCF   x3B,F
00DF4:  BTFSC  FD8.2
00DF6:  INCF   x3C,F
00DF8:  BTFSC  FD8.2
00DFA:  INCF   x3D,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00DFC:  BTFSS  x3A.1
00DFE:  BRA    0E06
00E00:  MOVLB  0
00E02:  BRA    09A6
00E04:  MOVLB  6
.................... } 
....................  
00E06:  BCF    FF2.2
00E08:  MOVLB  0
00E0A:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
00E0E:  BSF    xB5.5
.................... } 
00E10:  BCF    F9E.0
00E12:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
00E16:  MOVLB  6
00E18:  INCF   x45,F
....................    if(clockT2temp==200)//1 second call 
00E1A:  MOVF   x45,W
00E1C:  SUBLW  C8
00E1E:  BNZ   0E38
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00E20:  CLRF   x45
....................       ++secClock; 
00E22:  MOVLW  01
00E24:  ADDWF  24,F
00E26:  BTFSC  FD8.0
00E28:  INCF   25,F
00E2A:  BTFSC  FD8.2
00E2C:  INCF   26,F
00E2E:  BTFSC  FD8.2
00E30:  INCF   27,F
....................       secondFlag=true; 
00E32:  MOVLB  0
00E34:  BSF    xB5.4
00E36:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00E38:  BCF    F9E.1
00E3A:  MOVLB  0
00E3C:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................          portc=MAKE8(onoffsvalue,1); 
00E40:  MOVLB  5
00E42:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00E46:  MOVFF  57F,F83
....................   if(mnumluzes!=0) 
00E4A:  MOVF   x7E,F
00E4C:  BTFSC  FD8.2
00E4E:  BRA    0F8A
....................    { 
....................          if (organizado) 
00E50:  MOVLB  0
00E52:  BTFSS  xB5.2
00E54:  BRA    0E78
....................          { 
....................             organizado=0; 
00E56:  BCF    xB5.2
....................             if (actmat)  
00E58:  BTFSS  xB5.3
00E5A:  BRA    0E6C
....................             { 
....................                actmat=0; 
00E5C:  BCF    xB5.3
....................                pointer=delays1; 
00E5E:  MOVLW  05
00E60:  MOVLB  5
00E62:  MOVWF  x7C
00E64:  MOVLW  91
00E66:  MOVWF  x7B
....................             } 
....................             else 
00E68:  BRA    0E78
00E6A:  MOVLB  0
....................             { 
....................                actmat=1; 
00E6C:  BSF    xB5.3
....................                pointer=delays2; 
00E6E:  MOVLW  05
00E70:  MOVLB  5
00E72:  MOVWF  x7C
00E74:  MOVLW  D5
00E76:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00E78:  MOVLB  5
00E7A:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00E7C:  MOVLB  6
00E7E:  CLRF   xD7
00E80:  CLRF   xD8
*
00EEC:  MOVFF  02,6D6
00EF0:  MOVFF  01,6D5
00EF4:  BCF    FD8.0
00EF6:  RLCF   01,W
00EF8:  MOVWF  02
00EFA:  RLCF   xD6,W
00EFC:  MOVWF  03
00EFE:  MOVF   02,W
00F00:  MOVLB  0
00F02:  CALL   01A6
00F06:  TBLRD*+
00F08:  MOVFF  FF5,03
00F0C:  MOVWF  FBE
00F0E:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
00F12:  MOVLW  10
00F14:  MOVLB  6
00F16:  MOVWF  xD7
00F18:  CLRF   xD8
*
00F84:  MOVFF  01,57E
00F88:  MOVLB  5
....................           
....................    } 
....................          set_timer1(0); 
00F8A:  CLRF   FCF
00F8C:  CLRF   FCE
....................          syncError=false; 
00F8E:  MOVLB  0
00F90:  BCF    xB5.5
.................... } 
....................  
00F92:  BCF    FF2.1
00F94:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {   
....................    if(mnumluzes!=0) 
00F98:  MOVLB  5
00F9A:  MOVF   x7E,F
00F9C:  BTFSC  FD8.2
00F9E:  BRA    10C4
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
00FA0:  MOVFF  57D,6D7
00FA4:  MOVLW  01
00FA6:  MOVLB  6
00FA8:  MOVWF  xD8
*
01014:  MOVFF  02,6D6
01018:  MOVFF  01,6D5
....................       portc=(portc & MAKE8(auxccp,1)); 
0101C:  MOVF   xD6,W
0101E:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
01020:  MOVF   xD5,W
01022:  ANDWF  F83,F
....................       ++vez; 
01024:  MOVLB  5
01026:  INCF   x7D,F
....................       --mnumluzes; 
01028:  DECF   x7E,F
....................       CCP_1=matrizluz[fpointer(vez,0)]; 
0102A:  MOVFF  57D,6D7
0102E:  MOVLB  6
01030:  CLRF   xD8
*
0109C:  MOVFF  02,6D8
010A0:  MOVFF  01,6D7
010A4:  BCF    FD8.0
010A6:  RLCF   01,W
010A8:  MOVWF  02
010AA:  RLCF   xD8,W
010AC:  MOVWF  03
010AE:  MOVF   02,W
010B0:  MOVLB  0
010B2:  CALL   01A6
010B6:  TBLRD*+
010B8:  MOVFF  FF5,03
010BC:  MOVWF  FBE
010BE:  MOVFF  03,FBF
010C2:  MOVLB  5
....................    } 
.................... } 
....................  
010C4:  BCF    F9E.2
010C6:  MOVLB  0
010C8:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
010CC:  BCF    F9E.5
010CE:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
010D2:  BCF    F9E.4
010D4:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
010D8:  BCF    FA1.3
010DA:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
....................    oscError=1; 
010DE:  BSF    xB5.6
.................... } 
....................  
010E0:  BCF    FA1.7
010E2:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
0168E:  RCALL  12DE
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01690:  BCF    FA4.0
01692:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
01696:  RCALL  12DE
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01698:  BCF    FA4.1
0169A:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01ABE:  RCALL  18A4
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01AC0:  BCF    FA4.2
01AC2:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01AC6:  RCALL  18A4
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01AC8:  BCF    FA4.3
01ACA:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01ACE:  RCALL  18A4
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01AD0:  BCF    FA4.4
01AD2:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01AD6:  BCF    FA4.7
01AD8:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01ADC:  BCF    FA4.5
01ADE:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    enable_interrupts (int_canrx0); 
*
04D0C:  BSF    FA3.0
....................    enable_interrupts (int_canrx1); 
04D0E:  BSF    FA3.1
....................    enable_interrupts (int_cantx0); 
04D10:  BSF    FA3.2
....................    enable_interrupts (int_cantx1); 
04D12:  BSF    FA3.3
....................    enable_interrupts (int_cantx2); 
04D14:  BSF    FA3.4
....................    enable_interrupts (int_canirx); 
04D16:  BSF    FA3.7
....................    enable_interrupts (int_canerr); 
04D18:  BSF    FA3.5
....................    enable_interrupts(INT_CCP1); 
04D1A:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
04D1C:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
04D1E:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
04D20:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
04D22:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    enable_interrupts (int_OSCF) ; 
04D24:  BSF    FA0.7
....................    enable_interrupts (GLOBAL) ; 
04D26:  MOVLW  C0
04D28:  IORWF  FF2,F
.................... } 
04D2A:  GOTO   7B82 (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01C94:  BRA    1B40
....................    can_set_mode (CAN_OP_CONFIG) ;   
01C96:  MOVLW  04
01C98:  MOVLB  6
01C9A:  MOVWF  x5E
01C9C:  MOVLB  0
01C9E:  RCALL  1AEA
....................    BRGCON1.brp = 4; 
01CA0:  MOVLW  C0
01CA2:  ANDWF  F70,W
01CA4:  IORLW  04
01CA6:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01CA8:  MOVLW  3F
01CAA:  ANDWF  F70,W
01CAC:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01CAE:  MOVLW  F8
01CB0:  ANDWF  F71,W
01CB2:  IORLW  02
01CB4:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01CB6:  MOVLW  C7
01CB8:  ANDWF  F71,W
01CBA:  IORLW  28
01CBC:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01CBE:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01CC0:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01CC2:  MOVLW  F8
01CC4:  ANDWF  F72,W
01CC6:  IORLW  05
01CC8:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01CCA:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01CCC:  MOVLB  6
01CCE:  CLRF   x5E
01CD0:  MOVLB  0
01CD2:  RCALL  1AEA
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01CD4:  MOVLW  81
01CD6:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01CD8:  MOVLW  95
01CDA:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01CDC:  MOVLW  60
01CDE:  IORLW  06
01CE0:  MOVWF  FCA
01CE2:  MOVLW  F1
01CE4:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01CE6:  MOVLW  0A
01CE8:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01CEA:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01CEC:  MOVF   FC1,W
01CEE:  ANDLW  C0
01CF0:  IORLW  0F
01CF2:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01CF4:  MOVF   FC0,W
01CF6:  ANDLW  C0
01CF8:  MOVWF  FC0
01CFA:  BCF    FC0.7
01CFC:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01CFE:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01D00:  BCF    FC6.5
01D02:  MOVLW  01
01D04:  MOVWF  FC6
01D06:  MOVLW  00
01D08:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01D0A:  MOVLW  07
01D0C:  MOVWF  FB4
01D0E:  MOVF   F95,W
01D10:  MOVWF  F95
01D12:  MOVF   F96,W
01D14:  MOVWF  F96
01D16:  CLRWDT
01D18:  MOVLW  20
01D1A:  MOVWF  00
01D1C:  DECFSZ 00,F
01D1E:  BRA    1D1C
01D20:  BRA    1D22
01D22:  MOVF   FB4,W
01D24:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01D26:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01D28:  CLRF   FB1
....................     
....................    setup_wdt(WDT_ON); 
01D2A:  BSF    FD1.0
....................    output_low(PIN_B1); 
01D2C:  BCF    F93.1
01D2E:  BCF    F8A.1
....................    output_low(PIN_B6); 
01D30:  BCF    F93.6
01D32:  BCF    F8A.6
....................    output_low(PIN_B7); 
01D34:  BCF    F93.7
01D36:  BCF    F8A.7
....................    //setup_wdt (WDT_ON) ; 
....................    } 
01D38:  GOTO   7A4E (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
07846:  CLRF   FF8
07848:  BCF    FD0.7
0784A:  BSF    07.7
0784C:  CLRF   FEA
0784E:  CLRF   FE9
07850:  BCF    F93.5
07852:  BSF    F8A.5
07854:  CLRF   27
07856:  CLRF   26
07858:  CLRF   25
0785A:  CLRF   24
0785C:  CLRF   28
0785E:  BCF    xB5.0
07860:  CLRF   xB6
07862:  BSF    xB5.1
07864:  MOVLB  5
07866:  CLRF   x7A
07868:  MOVLB  0
0786A:  BCF    xB5.3
0786C:  MOVLB  5
0786E:  CLRF   x7E
07870:  MOVLW  FF
07872:  MOVWF  x80
07874:  MOVWF  x7F
07876:  MOVLB  6
07878:  CLRF   x39
0787A:  MOVLB  0
0787C:  BCF    xB5.6
0787E:  MOVLB  6
07880:  CLRF   x3E
07882:  CLRF   x42
07884:  CLRF   x41
07886:  CLRF   x40
07888:  MOVLW  27
0788A:  MOVWF  x3F
0788C:  MOVF   FC1,W
0788E:  ANDLW  C0
07890:  IORLW  0F
07892:  MOVWF  FC1
07894:  MOVLW  07
07896:  MOVWF  FB4
07898:  CLRF   1C
0789A:  MOVLW  01
0789C:  MOVWF  1D
0789E:  MOVLW  02
078A0:  MOVWF  1E
078A2:  MOVLW  03
078A4:  MOVWF  1F
078A6:  MOVLW  04
078A8:  MOVWF  20
078AA:  MOVLW  05
078AC:  MOVWF  21
078AE:  MOVLW  20
078B0:  MOVWF  22
078B2:  MOVLW  21
078B4:  MOVWF  23
078B6:  MOVLW  0B
078B8:  MOVLB  1
078BA:  MOVWF  x39
078BC:  CLRF   x3A
078BE:  CLRF   x3B
078C0:  CLRF   x3C
078C2:  MOVLB  5
078C4:  CLRF   x81
078C6:  CLRF   x82
078C8:  CLRF   x83
078CA:  CLRF   x84
078CC:  CLRF   x85
078CE:  CLRF   x86
078D0:  CLRF   x87
078D2:  CLRF   x88
078D4:  CLRF   x89
078D6:  CLRF   x8A
078D8:  CLRF   x8B
078DA:  CLRF   x8C
078DC:  CLRF   x8D
078DE:  CLRF   x8E
078E0:  CLRF   x8F
078E2:  CLRF   x90
078E4:  CLRF   x91
078E6:  CLRF   x92
078E8:  CLRF   x93
078EA:  CLRF   x94
078EC:  CLRF   x95
078EE:  CLRF   x96
078F0:  MOVLW  01
078F2:  MOVWF  x97
078F4:  CLRF   x98
078F6:  CLRF   x99
078F8:  CLRF   x9A
078FA:  MOVLW  02
078FC:  MOVWF  x9B
078FE:  CLRF   x9C
07900:  CLRF   x9D
07902:  CLRF   x9E
07904:  MOVLW  03
07906:  MOVWF  x9F
07908:  CLRF   xA0
0790A:  CLRF   xA1
0790C:  CLRF   xA2
0790E:  MOVLW  04
07910:  MOVWF  xA3
07912:  CLRF   xA4
07914:  CLRF   xA5
07916:  CLRF   xA6
07918:  MOVLW  05
0791A:  MOVWF  xA7
0791C:  CLRF   xA8
0791E:  CLRF   xA9
07920:  CLRF   xAA
07922:  MOVLW  06
07924:  MOVWF  xAB
07926:  CLRF   xAC
07928:  CLRF   xAD
0792A:  CLRF   xAE
0792C:  MOVLW  07
0792E:  MOVWF  xAF
07930:  CLRF   xB0
07932:  CLRF   xB1
07934:  CLRF   xB2
07936:  MOVLW  08
07938:  MOVWF  xB3
0793A:  CLRF   xB4
0793C:  CLRF   xB5
0793E:  CLRF   xB6
07940:  MOVLW  09
07942:  MOVWF  xB7
07944:  CLRF   xB8
07946:  CLRF   xB9
07948:  CLRF   xBA
0794A:  MOVLW  0A
0794C:  MOVWF  xBB
0794E:  CLRF   xBC
07950:  CLRF   xBD
07952:  CLRF   xBE
07954:  MOVLW  0B
07956:  MOVWF  xBF
07958:  CLRF   xC0
0795A:  CLRF   xC1
0795C:  CLRF   xC2
0795E:  MOVLW  0C
07960:  MOVWF  xC3
07962:  CLRF   xC4
07964:  CLRF   xC5
07966:  CLRF   xC6
07968:  MOVLW  0D
0796A:  MOVWF  xC7
0796C:  CLRF   xC8
0796E:  CLRF   xC9
07970:  CLRF   xCA
07972:  MOVLW  0E
07974:  MOVWF  xCB
07976:  CLRF   xCC
07978:  CLRF   xCD
0797A:  CLRF   xCE
0797C:  MOVLW  0F
0797E:  MOVWF  xCF
07980:  CLRF   xD0
07982:  CLRF   xD1
07984:  CLRF   xD2
07986:  CLRF   xD3
07988:  CLRF   xD4
0798A:  CLRF   xD5
0798C:  CLRF   xD6
0798E:  CLRF   xD7
07990:  CLRF   xD8
07992:  CLRF   xD9
07994:  CLRF   xDA
07996:  MOVLW  01
07998:  MOVWF  xDB
0799A:  CLRF   xDC
0799C:  CLRF   xDD
0799E:  CLRF   xDE
079A0:  MOVLW  02
079A2:  MOVWF  xDF
079A4:  CLRF   xE0
079A6:  CLRF   xE1
079A8:  CLRF   xE2
079AA:  MOVLW  03
079AC:  MOVWF  xE3
079AE:  CLRF   xE4
079B0:  CLRF   xE5
079B2:  CLRF   xE6
079B4:  MOVLW  04
079B6:  MOVWF  xE7
079B8:  CLRF   xE8
079BA:  CLRF   xE9
079BC:  CLRF   xEA
079BE:  MOVLW  05
079C0:  MOVWF  xEB
079C2:  CLRF   xEC
079C4:  CLRF   xED
079C6:  CLRF   xEE
079C8:  MOVLW  06
079CA:  MOVWF  xEF
079CC:  CLRF   xF0
079CE:  CLRF   xF1
079D0:  CLRF   xF2
079D2:  MOVLW  07
079D4:  MOVWF  xF3
079D6:  CLRF   xF4
079D8:  CLRF   xF5
079DA:  CLRF   xF6
079DC:  MOVLW  08
079DE:  MOVWF  xF7
079E0:  CLRF   xF8
079E2:  CLRF   xF9
079E4:  CLRF   xFA
079E6:  MOVLW  09
079E8:  MOVWF  xFB
079EA:  CLRF   xFC
079EC:  CLRF   xFD
079EE:  CLRF   xFE
079F0:  MOVLW  0A
079F2:  MOVWF  xFF
079F4:  MOVLB  6
079F6:  CLRF   x00
079F8:  CLRF   x01
079FA:  CLRF   x02
079FC:  MOVLW  0B
079FE:  MOVWF  x03
07A00:  CLRF   x04
07A02:  CLRF   x05
07A04:  CLRF   x06
07A06:  MOVLW  0C
07A08:  MOVWF  x07
07A0A:  CLRF   x08
07A0C:  CLRF   x09
07A0E:  CLRF   x0A
07A10:  MOVLW  0D
07A12:  MOVWF  x0B
07A14:  CLRF   x0C
07A16:  CLRF   x0D
07A18:  CLRF   x0E
07A1A:  MOVLW  0E
07A1C:  MOVWF  x0F
07A1E:  CLRF   x10
07A20:  CLRF   x11
07A22:  CLRF   x12
07A24:  MOVLW  0F
07A26:  MOVWF  x13
07A28:  CLRF   x14
07A2A:  CLRF   x15
07A2C:  CLRF   x16
07A2E:  CLRF   x17
07A30:  CLRF   x18
07A32:  CLRF   x45
....................    mydevices.numberOfInputs=0; 
07A34:  MOVLB  1
07A36:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
07A38:  CLRF   x3F
....................    clock = 0; 
07A3A:  MOVLB  6
07A3C:  CLRF   x3D
07A3E:  CLRF   x3C
07A40:  CLRF   x3B
07A42:  CLRF   x3A
....................    ledErrorCounter=0;    
07A44:  CLRF   x44
07A46:  CLRF   x43
....................    hw_setup(); 
07A48:  MOVLB  0
07A4A:  GOTO   1C94
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 
07A4E:  MOVLW  01
07A50:  MOVLB  6
07A52:  MOVWF  x5E
07A54:  MOVLW  02
07A56:  MOVWF  x5F
07A58:  MOVWF  x60
07A5A:  MOVLB  0
07A5C:  CALL   1D6C
....................    unsigned int off_adr[8]={2,10,255,255,255,255,255,255}; 
07A60:  MOVLW  02
07A62:  MOVLB  6
07A64:  MOVWF  x46
07A66:  MOVLW  0A
07A68:  MOVWF  x47
07A6A:  MOVLW  FF
07A6C:  MOVWF  x48
07A6E:  MOVWF  x49
07A70:  MOVWF  x4A
07A72:  MOVWF  x4B
07A74:  MOVWF  x4C
07A76:  MOVWF  x4D
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
07A78:  MOVLW  01
07A7A:  MOVWF  x4E
07A7C:  MOVLW  FF
07A7E:  MOVWF  x4F
07A80:  MOVWF  x50
07A82:  MOVWF  x51
07A84:  MOVWF  x52
07A86:  MOVWF  x53
07A88:  MOVWF  x54
07A8A:  MOVWF  x55
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
07A8C:  MOVLW  01
07A8E:  MOVWF  x56
07A90:  MOVLW  FF
07A92:  MOVWF  x57
07A94:  MOVWF  x58
07A96:  MOVWF  x59
07A98:  MOVWF  x5A
07A9A:  MOVWF  x5B
07A9C:  MOVWF  x5C
07A9E:  MOVWF  x5D
....................    eeprom_onOff_out_init(on_adr,off_adr,4); 
07AA0:  MOVLW  06
07AA2:  MOVWF  x5F
07AA4:  MOVLW  4E
07AA6:  MOVWF  x5E
07AA8:  MOVLW  06
07AAA:  MOVWF  x61
07AAC:  MOVLW  46
07AAE:  MOVWF  x60
07AB0:  MOVLW  04
07AB2:  MOVWF  x62
07AB4:  MOVLB  0
07AB6:  CALL   1DEC
....................    eeprom_on_off_init(3,4,4); 
07ABA:  MOVLW  03
07ABC:  MOVLB  6
07ABE:  MOVWF  x5E
07AC0:  MOVLW  04
07AC2:  MOVWF  x5F
07AC4:  MOVWF  x60
07AC6:  MOVLB  0
07AC8:  CALL   1D6C
....................    off_adr[0]=4; 
07ACC:  MOVLW  04
07ACE:  MOVLB  6
07AD0:  MOVWF  x46
....................    on_adr[0]=3; 
07AD2:  MOVLW  03
07AD4:  MOVWF  x4E
....................    eeprom_onOff_out_init(on_adr,off_adr,3); 
07AD6:  MOVLW  06
07AD8:  MOVWF  x5F
07ADA:  MOVLW  4E
07ADC:  MOVWF  x5E
07ADE:  MOVLW  06
07AE0:  MOVWF  x61
07AE2:  MOVLW  46
07AE4:  MOVWF  x60
07AE6:  MOVLW  03
07AE8:  MOVWF  x62
07AEA:  MOVLB  0
07AEC:  CALL   1DEC
....................    eeprom_button_init(5,6,0,true);//2 
07AF0:  MOVLW  05
07AF2:  MOVLB  6
07AF4:  MOVWF  x5E
07AF6:  MOVLW  06
07AF8:  MOVWF  x5F
07AFA:  CLRF   x60
07AFC:  MOVLW  01
07AFE:  MOVWF  x61
07B00:  MOVLB  0
07B02:  CALL   1E44
....................    eeprom_button_init(7,8,1,true);//2 
07B06:  MOVLW  07
07B08:  MOVLB  6
07B0A:  MOVWF  x5E
07B0C:  MOVLW  08
07B0E:  MOVWF  x5F
07B10:  MOVLW  01
07B12:  MOVWF  x60
07B14:  MOVWF  x61
07B16:  MOVLB  0
07B18:  CALL   1E44
....................    off_adr[0]=255; 
07B1C:  MOVLW  FF
07B1E:  MOVLB  6
07B20:  MOVWF  x46
....................    off_adr[1]=255; 
07B22:  MOVWF  x47
....................     
....................    on_adr[0]=5; 
07B24:  MOVLW  05
07B26:  MOVWF  x4E
....................    x_adr[0]=7; 
07B28:  MOVLW  07
07B2A:  MOVWF  x56
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,0,10); 
07B2C:  MOVLW  06
07B2E:  MOVWF  x5F
07B30:  MOVLW  4E
07B32:  MOVWF  x5E
07B34:  MOVLW  06
07B36:  MOVWF  x61
07B38:  MOVLW  56
07B3A:  MOVWF  x60
07B3C:  MOVLW  06
07B3E:  MOVWF  x63
07B40:  MOVLW  46
07B42:  MOVWF  x62
07B44:  MOVLW  06
07B46:  MOVWF  x65
07B48:  MOVLW  46
07B4A:  MOVWF  x64
07B4C:  MOVLW  0B
07B4E:  MOVWF  x66
07B50:  MOVLW  0A
07B52:  MOVWF  x67
07B54:  CLRF   x68
07B56:  MOVWF  x69
07B58:  MOVLB  0
07B5A:  GOTO   1E9A
....................    eeprom_on_off_init(9,10,7); 
07B5E:  MOVLW  09
07B60:  MOVLB  6
07B62:  MOVWF  x5E
07B64:  MOVLW  0A
07B66:  MOVWF  x5F
07B68:  MOVLW  07
07B6A:  MOVWF  x60
07B6C:  MOVLB  0
07B6E:  CALL   1D6C
....................    /////////////////////////////////////////////////7 
....................     
....................     
....................    readDevices(); 
07B72:  GOTO   2A8C
.................... #ifdef DEBUG   
....................     printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
.................... #endif 
....................     
....................    dimmer_outputs_init(); 
07B76:  GOTO   3826
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
07B7A:  CALL   39AA
....................   
....................  interrupts_enable(); 
07B7E:  GOTO   4D0C
....................  printf("start\n\r"); 
07B82:  MOVLW  E2
07B84:  MOVWF  FF6
07B86:  MOVLW  1A
07B88:  MOVWF  FF7
07B8A:  MOVLW  00
07B8C:  MOVWF  FF8
07B8E:  GOTO   4D2E
....................    while(true){ 
....................    restart_wdt(); 
07B92:  CLRWDT
....................    if(syncError || oscError) 
07B94:  BTFSC  xB5.5
07B96:  BRA    7B9C
07B98:  BTFSS  xB5.6
07B9A:  BRA    7BBE
....................    {   
....................       ++ledErrorCounter; 
07B9C:  MOVLB  6
07B9E:  INCF   x43,F
07BA0:  BTFSC  FD8.2
07BA2:  INCF   x44,F
....................       if(ledErrorCounter>1000) 
07BA4:  MOVF   x44,W
07BA6:  SUBLW  02
07BA8:  BC    7BBC
07BAA:  XORLW  FF
07BAC:  BNZ   7BB4
07BAE:  MOVF   x43,W
07BB0:  SUBLW  E8
07BB2:  BC    7BBC
....................       { 
....................          output_toggle(LED); 
07BB4:  BCF    F96.2
07BB6:  BTG    F8D.2
....................          ledErrorCounter=0; 
07BB8:  CLRF   x44
07BBA:  CLRF   x43
07BBC:  MOVLB  0
....................       } 
....................    } 
.................... #ifdef DEBUG 
....................    if(kbhit()) 
....................    { 
....................       setup_wdt(WDT_OFF); 
....................       disable_interrupts (GLOBAL) ; 
....................       goDebug(); 
....................    } 
.................... #endif 
....................    process_outpoints(); 
07BBE:  GOTO   5A08
....................    write_outputs(); 
07BC2:  CALL   39AA
....................    if(secondFlag) 
07BC6:  BTFSS  xB5.4
07BC8:  BRA    7BDC
....................    { 
....................       secondFlag=false; 
07BCA:  BCF    xB5.4
....................       processTimedEvents(); 
07BCC:  GOTO   6950
....................       if(!syncError && !oscError) output_toggle(LED); 
07BD0:  BTFSC  xB5.5
07BD2:  BRA    7BDC
07BD4:  BTFSC  xB5.6
07BD6:  BRA    7BDC
07BD8:  BCF    F96.2
07BDA:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
07BDC:  BRA    7B92
.................... } 
....................  
07BDE:  BRA    7BDE

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 1401   NOBROWNOUT NOWDT BORV45 NOPUT WDT1024
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0030   NOSTVREN DEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
