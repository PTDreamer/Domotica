CCS PCH C Compiler, Version 4.106, 32200               30-Ago-11 16:23

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 27138 bytes (28%)
                         Largest free fragment is 38394
               RAM used: 1321 (40%) at main() level
                         1444 (44%) worst case
               Stack:    8 worst case (4 in main + 4 for interrupts)

*
00000:  GOTO   67CC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0D7A
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0D9E
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0DA6
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0DD0
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   105C
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   1062
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   0F28
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   1068
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1A64
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1A6A
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1A5C
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1A54
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1A4C
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   1624
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   161C
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   106E
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
028DC:  BCF    F93.5
028DE:  BCF    F8A.5
028E0:  MOVLW  08
028E2:  MOVWF  01
028E4:  BRA    28E6
028E6:  NOP   
028E8:  BSF    01.7
028EA:  BRA    290C
028EC:  BCF    01.7
028EE:  MOVLB  5
028F0:  RRCF   x2E,F
028F2:  MOVLB  0
028F4:  BTFSC  FD8.0
028F6:  BSF    F8A.5
028F8:  BTFSS  FD8.0
028FA:  BCF    F8A.5
028FC:  BSF    01.6
028FE:  BRA    290C
02900:  BCF    01.6
02902:  DECFSZ 01,F
02904:  BRA    28EE
02906:  BRA    2908
02908:  NOP   
0290A:  BSF    F8A.5
0290C:  MOVLW  16
0290E:  MOVWF  FE9
02910:  DECFSZ FE9,F
02912:  BRA    2910
02914:  BRA    2916
02916:  CLRWDT
02918:  BTFSC  01.7
0291A:  BRA    28EC
0291C:  BTFSC  01.6
0291E:  BRA    2900
02920:  GOTO   293C (RETURN)
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01ACE:  MOVLW  04
01AD0:  MOVLB  5
01AD2:  MOVWF  x29
01AD4:  MOVLB  0
01AD6:  RCALL  1A78
....................    can_set_baud(); 
01AD8:  BRA    1A9E
....................  
....................    RXB0CON=0; 
01ADA:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01ADC:  MOVLW  9F
01ADE:  ANDWF  F60,W
01AE0:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01AE2:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01AE4:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01AE8:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01AEA:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01AEC:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01AEE:  BCF    F73.6
01AF0:  CLRF   1B
01AF2:  BTFSC  FF2.7
01AF4:  BSF    1B.7
01AF6:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01AF8:  MOVLW  0F
01AFA:  MOVLB  5
01AFC:  MOVWF  x98
01AFE:  MOVLW  1B
01B00:  MOVWF  x97
01B02:  CLRF   x9C
01B04:  CLRF   x9B
01B06:  CLRF   x9A
01B08:  CLRF   x99
01B0A:  CLRF   x9D
01B0C:  MOVLB  0
01B0E:  RCALL  162C
01B10:  BTFSC  1B.7
01B12:  BSF    FF2.7
01B14:  CLRF   1B
01B16:  BTFSC  FF2.7
01B18:  BSF    1B.7
01B1A:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01B1C:  MOVLW  0F
01B1E:  MOVLB  5
01B20:  MOVWF  x98
01B22:  MOVLW  03
01B24:  MOVWF  x97
01B26:  CLRF   x9C
01B28:  CLRF   x9B
01B2A:  CLRF   x9A
01B2C:  CLRF   x99
01B2E:  CLRF   x9D
01B30:  MOVLB  0
01B32:  RCALL  162C
01B34:  BTFSC  1B.7
01B36:  BSF    FF2.7
01B38:  CLRF   1B
01B3A:  BTFSC  FF2.7
01B3C:  BSF    1B.7
01B3E:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01B40:  MOVLW  0F
01B42:  MOVLB  5
01B44:  MOVWF  x98
01B46:  MOVLW  07
01B48:  MOVWF  x97
01B4A:  CLRF   x9C
01B4C:  CLRF   x9B
01B4E:  CLRF   x9A
01B50:  CLRF   x99
01B52:  CLRF   x9D
01B54:  MOVLB  0
01B56:  RCALL  162C
01B58:  BTFSC  1B.7
01B5A:  BSF    FF2.7
01B5C:  CLRF   1B
01B5E:  BTFSC  FF2.7
01B60:  BSF    1B.7
01B62:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01B64:  MOVLW  0F
01B66:  MOVLB  5
01B68:  MOVWF  x98
01B6A:  MOVLW  1F
01B6C:  MOVWF  x97
01B6E:  CLRF   x9C
01B70:  CLRF   x9B
01B72:  CLRF   x9A
01B74:  CLRF   x99
01B76:  CLRF   x9D
01B78:  MOVLB  0
01B7A:  RCALL  162C
01B7C:  BTFSC  1B.7
01B7E:  BSF    FF2.7
01B80:  CLRF   1B
01B82:  BTFSC  FF2.7
01B84:  BSF    1B.7
01B86:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01B88:  MOVLW  0F
01B8A:  MOVLB  5
01B8C:  MOVWF  x98
01B8E:  MOVLW  0B
01B90:  MOVWF  x97
01B92:  CLRF   x9C
01B94:  CLRF   x9B
01B96:  CLRF   x9A
01B98:  CLRF   x99
01B9A:  CLRF   x9D
01B9C:  MOVLB  0
01B9E:  RCALL  162C
01BA0:  BTFSC  1B.7
01BA2:  BSF    FF2.7
01BA4:  CLRF   1B
01BA6:  BTFSC  FF2.7
01BA8:  BSF    1B.7
01BAA:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01BAC:  MOVLW  0F
01BAE:  MOVLB  5
01BB0:  MOVWF  x98
01BB2:  MOVWF  x97
01BB4:  CLRF   x9C
01BB6:  CLRF   x9B
01BB8:  CLRF   x9A
01BBA:  CLRF   x99
01BBC:  CLRF   x9D
01BBE:  MOVLB  0
01BC0:  RCALL  162C
01BC2:  BTFSC  1B.7
01BC4:  BSF    FF2.7
01BC6:  CLRF   1B
01BC8:  BTFSC  FF2.7
01BCA:  BSF    1B.7
01BCC:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01BCE:  MOVLW  0F
01BD0:  MOVLB  5
01BD2:  MOVWF  x98
01BD4:  MOVLW  13
01BD6:  MOVWF  x97
01BD8:  CLRF   x9C
01BDA:  CLRF   x9B
01BDC:  CLRF   x9A
01BDE:  CLRF   x99
01BE0:  CLRF   x9D
01BE2:  MOVLB  0
01BE4:  RCALL  162C
01BE6:  BTFSC  1B.7
01BE8:  BSF    FF2.7
01BEA:  CLRF   1B
01BEC:  BTFSC  FF2.7
01BEE:  BSF    1B.7
01BF0:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01BF2:  MOVLW  0F
01BF4:  MOVLB  5
01BF6:  MOVWF  x98
01BF8:  MOVLW  17
01BFA:  MOVWF  x97
01BFC:  CLRF   x9C
01BFE:  CLRF   x9B
01C00:  CLRF   x9A
01C02:  CLRF   x99
01C04:  CLRF   x9D
01C06:  MOVLB  0
01C08:  RCALL  162C
01C0A:  BTFSC  1B.7
01C0C:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01C0E:  MOVF   F93,W
01C10:  ANDLW  FB
01C12:  IORLW  08
01C14:  MOVLB  5
01C16:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01C18:  CLRF   x29
01C1A:  MOVLB  0
01C1C:  RCALL  1A78
.................... } 
01C1E:  GOTO   1C24 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01A9E:  MOVLW  C0
01AA0:  ANDWF  F70,W
01AA2:  IORLW  04
01AA4:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01AA6:  MOVLW  3F
01AA8:  ANDWF  F70,W
01AAA:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01AAC:  MOVLW  F8
01AAE:  ANDWF  F71,W
01AB0:  IORLW  02
01AB2:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01AB4:  MOVLW  C7
01AB6:  ANDWF  F71,W
01AB8:  IORLW  28
01ABA:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01ABC:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01ABE:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01AC0:  MOVLW  F8
01AC2:  ANDWF  F72,W
01AC4:  IORLW  05
01AC6:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01AC8:  BCF    F72.6
.................... } 
01ACA:  GOTO   1ADA (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01A78:  MOVLB  5
01A7A:  SWAPF  x29,W
01A7C:  ANDLW  70
01A7E:  MOVWF  00
01A80:  BCF    FD8.0
01A82:  RLCF   00,F
01A84:  MOVLW  1F
01A86:  ANDWF  F6F,W
01A88:  IORWF  00,W
01A8A:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01A8C:  MOVFF  F6E,00
01A90:  SWAPF  00,F
01A92:  RRCF   00,W
01A94:  ANDLW  07
01A96:  SUBWF  x29,W
01A98:  BNZ   1A8C
.................... } 
01A9A:  MOVLB  0
01A9C:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
0162C:  MOVFF  598,59F
01630:  MOVFF  597,59E
....................  
....................    if (ext) {  //extended 
01634:  MOVLB  5
01636:  MOVF   x9D,F
01638:  BZ    16DE
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
0163A:  MOVFF  59E,FE9
0163E:  MOVFF  59F,FEA
01642:  MOVFF  599,FEF
....................  
....................       //eidh 
....................       ptr--; 
01646:  MOVF   x9E,W
01648:  BTFSC  FD8.2
0164A:  DECF   x9F,F
0164C:  DECF   x9E,F
....................       *ptr=make8(id,1); //8:15 
0164E:  MOVFF  59E,FE9
01652:  MOVFF  59F,FEA
01656:  MOVFF  59A,FEF
....................  
....................       //sidl 
....................       ptr--; 
0165A:  MOVF   x9E,W
0165C:  BTFSC  FD8.2
0165E:  DECF   x9F,F
01660:  DECF   x9E,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
01662:  MOVFF  59E,FE9
01666:  MOVFF  59F,FEA
0166A:  MOVF   x9B,W
0166C:  ANDLW  03
0166E:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
01670:  MOVFF  59E,FE9
01674:  MOVFF  59F,FEA
01678:  MOVFF  59B,00
0167C:  RLCF   00,F
0167E:  RLCF   00,F
01680:  RLCF   00,F
01682:  MOVLW  F8
01684:  ANDWF  00,F
01686:  MOVF   00,W
01688:  ANDLW  E0
0168A:  IORWF  FEF,W
0168C:  MOVWF  FEF
....................       *ptr|=0x08; 
0168E:  MOVFF  59E,FE9
01692:  MOVFF  59F,FEA
01696:  MOVF   FEF,W
01698:  IORLW  08
0169A:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
0169C:  MOVF   x9E,W
0169E:  BTFSC  FD8.2
016A0:  DECF   x9F,F
016A2:  DECF   x9E,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
016A4:  MOVFF  59E,FE9
016A8:  MOVFF  59F,FEA
016AC:  MOVFF  59B,00
016B0:  SWAPF  00,F
016B2:  RRCF   00,F
016B4:  MOVLW  07
016B6:  ANDWF  00,F
016B8:  MOVF   00,W
016BA:  ANDLW  07
016BC:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
016BE:  MOVFF  59E,FE9
016C2:  MOVFF  59F,FEA
016C6:  MOVFF  59C,00
016CA:  RLCF   00,F
016CC:  RLCF   00,F
016CE:  RLCF   00,F
016D0:  MOVLW  F8
016D2:  ANDWF  00,F
016D4:  MOVF   00,W
016D6:  ANDLW  F8
016D8:  IORWF  FEF,W
016DA:  MOVWF  FEF
....................    } 
....................    else {   //standard 
016DC:  BRA    175C
....................       //eidl 
....................       *ptr=0; 
016DE:  MOVFF  59E,FE9
016E2:  MOVFF  59F,FEA
016E6:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
016E8:  MOVF   x9E,W
016EA:  BTFSC  FD8.2
016EC:  DECF   x9F,F
016EE:  DECF   x9E,F
....................       *ptr=0; 
016F0:  MOVFF  59E,FE9
016F4:  MOVFF  59F,FEA
016F8:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
016FA:  MOVF   x9E,W
016FC:  BTFSC  FD8.2
016FE:  DECF   x9F,F
01700:  DECF   x9E,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
01702:  MOVFF  59E,FE9
01706:  MOVFF  59F,FEA
0170A:  MOVFF  599,00
0170E:  SWAPF  00,F
01710:  RLCF   00,F
01712:  MOVLW  E0
01714:  ANDWF  00,F
01716:  MOVF   00,W
01718:  ANDLW  E0
0171A:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
0171C:  MOVF   x9E,W
0171E:  BTFSC  FD8.2
01720:  DECF   x9F,F
01722:  DECF   x9E,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01724:  MOVFF  59E,FE9
01728:  MOVFF  59F,FEA
0172C:  MOVFF  599,00
01730:  RRCF   00,F
01732:  RRCF   00,F
01734:  RRCF   00,F
01736:  MOVLW  1F
01738:  ANDWF  00,F
0173A:  MOVF   00,W
0173C:  ANDLW  1F
0173E:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
01740:  MOVFF  59E,FE9
01744:  MOVFF  59F,FEA
01748:  MOVFF  59A,00
0174C:  SWAPF  00,F
0174E:  RLCF   00,F
01750:  MOVLW  E0
01752:  ANDWF  00,F
01754:  MOVF   00,W
01756:  ANDLW  E0
01758:  IORWF  FEF,W
0175A:  MOVWF  FEF
....................    } 
.................... } 
0175C:  MOVLB  0
0175E:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
01074:  MOVLB  5
01076:  CLRF   x99
01078:  CLRF   x98
0107A:  CLRF   x97
0107C:  CLRF   x96
....................    ptr=addr; 
0107E:  MOVFF  594,59B
01082:  MOVFF  593,59A
....................  
....................    if (ext) { 
01086:  MOVF   x95,F
01088:  BTFSC  FD8.2
0108A:  BRA    11B2
....................       ret=*ptr;  //eidl 
0108C:  MOVFF  59B,03
01090:  MOVFF  59A,FE9
01094:  MOVFF  59B,FEA
01098:  MOVFF  FEF,00
0109C:  CLRF   01
0109E:  CLRF   02
010A0:  CLRF   03
010A2:  MOVFF  03,599
010A6:  MOVFF  02,598
010AA:  MOVFF  01,597
010AE:  MOVFF  00,596
....................  
....................       ptr--;     //eidh 
010B2:  MOVF   x9A,W
010B4:  BTFSC  FD8.2
010B6:  DECF   x9B,F
010B8:  DECF   x9A,F
....................       ret|=((int32)*ptr << 8); 
010BA:  MOVFF  59A,FE9
010BE:  MOVFF  59B,FEA
010C2:  MOVF   FEF,W
010C4:  CLRF   x9E
010C6:  CLRF   x9D
010C8:  MOVWF  x9C
010CA:  CLRF   00
010CC:  MOVF   00,W
010CE:  IORWF  x96,F
010D0:  MOVF   x9C,W
010D2:  IORWF  x97,F
010D4:  MOVF   x9D,W
010D6:  IORWF  x98,F
010D8:  MOVF   x9E,W
010DA:  IORWF  x99,F
....................  
....................       ptr--;     //sidl 
010DC:  MOVF   x9A,W
010DE:  BTFSC  FD8.2
010E0:  DECF   x9B,F
010E2:  DECF   x9A,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
010E4:  MOVFF  59A,FE9
010E8:  MOVFF  59B,FEA
010EC:  MOVF   FEF,W
010EE:  CLRF   x9F
010F0:  CLRF   x9E
010F2:  CLRF   x9D
010F4:  MOVWF  x9C
010F6:  MOVLW  03
010F8:  ANDWF  x9C,F
010FA:  CLRF   x9D
010FC:  CLRF   x9E
010FE:  CLRF   x9F
01100:  CLRF   00
01102:  CLRF   01
01104:  MOVF   00,W
01106:  IORWF  x96,F
01108:  MOVF   01,W
0110A:  IORWF  x97,F
0110C:  MOVF   x9C,W
0110E:  IORWF  x98,F
01110:  MOVF   x9D,W
01112:  IORWF  x99,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
01114:  MOVFF  59A,FE9
01118:  MOVFF  59B,FEA
0111C:  MOVF   FEF,W
0111E:  CLRF   x9F
01120:  CLRF   x9E
01122:  CLRF   x9D
01124:  MOVWF  x9C
01126:  MOVLW  E0
01128:  ANDWF  x9C,F
0112A:  CLRF   x9D
0112C:  CLRF   x9E
0112E:  CLRF   x9F
01130:  CLRF   00
01132:  RLCF   x9C,W
01134:  MOVWF  01
01136:  RLCF   x9D,W
01138:  MOVWF  02
0113A:  RLCF   x9E,W
0113C:  MOVWF  03
0113E:  RLCF   01,F
01140:  RLCF   02,F
01142:  RLCF   03,F
01144:  RLCF   01,F
01146:  RLCF   02,F
01148:  RLCF   03,F
0114A:  RLCF   01,F
0114C:  RLCF   02,F
0114E:  RLCF   03,F
01150:  RLCF   01,F
01152:  RLCF   02,F
01154:  RLCF   03,F
01156:  MOVLW  E0
01158:  ANDWF  01,F
0115A:  MOVF   00,W
0115C:  IORWF  x96,F
0115E:  MOVF   01,W
01160:  IORWF  x97,F
01162:  MOVF   02,W
01164:  IORWF  x98,F
01166:  MOVF   03,W
01168:  IORWF  x99,F
....................  
....................       ptr--;     //sidh 
0116A:  MOVF   x9A,W
0116C:  BTFSC  FD8.2
0116E:  DECF   x9B,F
01170:  DECF   x9A,F
....................       ret|=((int32)*ptr << 21); 
01172:  MOVFF  59A,FE9
01176:  MOVFF  59B,FEA
0117A:  MOVF   FEF,W
0117C:  CLRF   x9D
0117E:  MOVWF  x9C
01180:  CLRF   00
01182:  CLRF   01
01184:  RLCF   x9C,W
01186:  MOVWF  02
01188:  RLCF   x9D,W
0118A:  MOVWF  03
0118C:  RLCF   02,F
0118E:  RLCF   03,F
01190:  RLCF   02,F
01192:  RLCF   03,F
01194:  RLCF   02,F
01196:  RLCF   03,F
01198:  RLCF   02,F
0119A:  RLCF   03,F
0119C:  MOVLW  E0
0119E:  ANDWF  02,F
011A0:  MOVF   00,W
011A2:  IORWF  x96,F
011A4:  MOVF   01,W
011A6:  IORWF  x97,F
011A8:  MOVF   02,W
011AA:  IORWF  x98,F
011AC:  MOVF   03,W
011AE:  IORWF  x99,F
....................  
....................    } 
....................    else { 
011B0:  BRA    1258
....................       ptr-=2;    //sidl 
011B2:  MOVLW  02
011B4:  SUBWF  x9A,F
011B6:  MOVLW  00
011B8:  SUBWFB x9B,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
011BA:  MOVFF  59A,FE9
011BE:  MOVFF  59B,FEA
011C2:  MOVF   FEF,W
011C4:  CLRF   x9F
011C6:  CLRF   x9E
011C8:  CLRF   x9D
011CA:  MOVWF  x9C
011CC:  MOVLW  E0
011CE:  ANDWF  x9C,F
011D0:  CLRF   x9D
011D2:  CLRF   x9E
011D4:  CLRF   x9F
011D6:  RRCF   x9F,W
011D8:  MOVWF  x99
011DA:  RRCF   x9E,W
011DC:  MOVWF  x98
011DE:  RRCF   x9D,W
011E0:  MOVWF  x97
011E2:  RRCF   x9C,W
011E4:  MOVWF  x96
011E6:  RRCF   x99,F
011E8:  RRCF   x98,F
011EA:  RRCF   x97,F
011EC:  RRCF   x96,F
011EE:  RRCF   x99,F
011F0:  RRCF   x98,F
011F2:  RRCF   x97,F
011F4:  RRCF   x96,F
011F6:  RRCF   x99,F
011F8:  RRCF   x98,F
011FA:  RRCF   x97,F
011FC:  RRCF   x96,F
011FE:  RRCF   x99,F
01200:  RRCF   x98,F
01202:  RRCF   x97,F
01204:  RRCF   x96,F
01206:  MOVLW  07
01208:  ANDWF  x99,F
....................  
....................       ptr--;     //sidh 
0120A:  MOVF   x9A,W
0120C:  BTFSC  FD8.2
0120E:  DECF   x9B,F
01210:  DECF   x9A,F
....................       ret|=((int32)*ptr << 3); 
01212:  MOVFF  59A,FE9
01216:  MOVFF  59B,FEA
0121A:  MOVF   FEF,W
0121C:  CLRF   x9F
0121E:  CLRF   x9E
01220:  CLRF   x9D
01222:  MOVWF  x9C
01224:  RLCF   x9C,W
01226:  MOVWF  00
01228:  RLCF   x9D,W
0122A:  MOVWF  01
0122C:  RLCF   x9E,W
0122E:  MOVWF  02
01230:  RLCF   x9F,W
01232:  MOVWF  03
01234:  RLCF   00,F
01236:  RLCF   01,F
01238:  RLCF   02,F
0123A:  RLCF   03,F
0123C:  RLCF   00,F
0123E:  RLCF   01,F
01240:  RLCF   02,F
01242:  RLCF   03,F
01244:  MOVLW  F8
01246:  ANDWF  00,F
01248:  MOVF   00,W
0124A:  IORWF  x96,F
0124C:  MOVF   01,W
0124E:  IORWF  x97,F
01250:  MOVF   02,W
01252:  IORWF  x98,F
01254:  MOVF   03,W
01256:  IORWF  x99,F
....................    } 
....................  
....................    return(ret); 
01258:  MOVFF  596,00
0125C:  MOVFF  597,01
01260:  MOVFF  598,02
01264:  MOVFF  599,03
.................... } 
01268:  MOVLB  0
0126A:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
01760:  MOVLW  0F
01762:  MOVLB  5
01764:  MOVWF  x95
01766:  MOVLW  66
01768:  MOVWF  x94
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
0176A:  MOVLB  F
0176C:  BTFSC  x40.3
0176E:  BRA    1780
....................       CANCON.win=CAN_WIN_TX0; 
01770:  MOVLW  F1
01772:  ANDWF  F6F,W
01774:  IORLW  08
01776:  MOVWF  F6F
....................       port=0; 
01778:  MOVLB  5
0177A:  CLRF   x96
....................    } 
....................    else if (!TXB1CON.txreq) { 
0177C:  BRA    17B4
0177E:  MOVLB  F
01780:  BTFSC  x30.3
01782:  BRA    1796
....................       CANCON.win=CAN_WIN_TX1; 
01784:  MOVLW  F1
01786:  ANDWF  F6F,W
01788:  IORLW  06
0178A:  MOVWF  F6F
....................       port=1; 
0178C:  MOVLW  01
0178E:  MOVLB  5
01790:  MOVWF  x96
....................    } 
....................    else if (!TXB2CON.txreq) { 
01792:  BRA    17B4
01794:  MOVLB  F
01796:  BTFSC  x20.3
01798:  BRA    17AC
....................       CANCON.win=CAN_WIN_TX2; 
0179A:  MOVLW  F1
0179C:  ANDWF  F6F,W
0179E:  IORLW  04
017A0:  MOVWF  F6F
....................       port=2; 
017A2:  MOVLW  02
017A4:  MOVLB  5
017A6:  MOVWF  x96
....................    } 
....................    else { 
017A8:  BRA    17B4
017AA:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
017AC:  MOVLW  00
017AE:  MOVWF  01
017B0:  BRA    182C
017B2:  MOVLB  5
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
017B4:  MOVF   x90,W
017B6:  ANDLW  03
017B8:  MOVWF  00
017BA:  MOVLW  FC
017BC:  ANDWF  F60,W
017BE:  IORWF  00,W
017C0:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
017C2:  MOVLW  0F
017C4:  MOVWF  x98
017C6:  MOVLW  64
017C8:  MOVWF  x97
017CA:  MOVFF  58C,59C
017CE:  MOVFF  58B,59B
017D2:  MOVFF  58A,59A
017D6:  MOVFF  589,599
017DA:  MOVFF  591,59D
017DE:  MOVLB  0
017E0:  RCALL  162C
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
017E2:  MOVFF  58F,F65
....................    TXBaDLC.rtr=rtr; 
017E6:  BCF    F65.6
017E8:  MOVLB  5
017EA:  BTFSC  x92.0
017EC:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
017EE:  CLRF   x93
017F0:  MOVF   x8F,W
017F2:  SUBWF  x93,W
017F4:  BC    181E
....................       *txd0=*data; 
017F6:  MOVFF  58D,FE9
017FA:  MOVFF  58E,FEA
017FE:  MOVFF  FEF,599
01802:  MOVFF  595,FEA
01806:  MOVFF  594,FE9
0180A:  MOVFF  599,FEF
....................       txd0++; 
0180E:  INCF   x94,F
01810:  BTFSC  FD8.2
01812:  INCF   x95,F
....................       data++; 
01814:  INCF   x8D,F
01816:  BTFSC  FD8.2
01818:  INCF   x8E,F
....................     } 
0181A:  INCF   x93,F
0181C:  BRA    17F0
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
0181E:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
01820:  MOVLW  F1
01822:  ANDWF  F6F,W
01824:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
01826:  MOVLW  01
01828:  MOVWF  01
0182A:  MOVLB  F
.................... } 
0182C:  MOVLB  0
0182E:  GOTO   1A44 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
01286:  BTFSS  F60.7
01288:  BRA    12B8
*
0150E:  BTFSS  F60.7
01510:  BRA    1540
....................         CANCON.win=CAN_WIN_RX0; 
*
0128A:  MOVLW  F1
0128C:  ANDWF  F6F,W
0128E:  MOVWF  F6F
*
01512:  MOVLW  F1
01514:  ANDWF  F6F,W
01516:  MOVWF  F6F
....................         stat.buffer=0; 
*
01290:  BCF    x7C.4
*
01518:  BCF    x7C.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
01292:  BCF    FA4.0
*
0151A:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
01294:  BCF    x7C.0
01296:  BTFSC  F74.7
01298:  BSF    x7C.0
*
0151C:  BCF    x7C.0
0151E:  BTFSC  F74.7
01520:  BSF    x7C.0
....................         COMSTAT.rx0ovfl=0; 
*
0129A:  BCF    F74.7
*
01522:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
0129C:  BTFSS  F60.2
0129E:  BRA    12B6
*
01524:  BTFSS  F60.2
01526:  BRA    153E
....................          stat.filthit=RXB0CON.filthit0; 
*
012A0:  MOVLW  00
012A2:  BTFSC  F60.0
012A4:  MOVLW  01
012A6:  ANDLW  07
012A8:  MOVWF  00
012AA:  BCF    FD8.0
012AC:  RLCF   00,F
012AE:  MOVLW  F1
012B0:  ANDWF  x7C,W
012B2:  IORWF  00,W
012B4:  MOVWF  x7C
*
01528:  MOVLW  00
0152A:  BTFSC  F60.0
0152C:  MOVLW  01
0152E:  ANDLW  07
01530:  MOVWF  00
01532:  BCF    FD8.0
01534:  RLCF   00,F
01536:  MOVLW  F1
01538:  ANDWF  x7C,W
0153A:  IORWF  00,W
0153C:  MOVWF  x7C
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
012B6:  BRA    12F8
012B8:  MOVLB  F
012BA:  BTFSS  x50.7
012BC:  BRA    12F0
*
0153E:  BRA    1580
01540:  MOVLB  F
01542:  BTFSS  x50.7
01544:  BRA    1578
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
012BE:  MOVLW  F1
012C0:  ANDWF  F6F,W
012C2:  IORLW  0A
012C4:  MOVWF  F6F
*
01546:  MOVLW  F1
01548:  ANDWF  F6F,W
0154A:  IORLW  0A
0154C:  MOVWF  F6F
....................         stat.buffer=1; 
*
012C6:  MOVLB  5
012C8:  BSF    x7C.4
*
0154E:  MOVLB  5
01550:  BSF    x7C.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
012CA:  BCF    FA4.1
*
01552:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
012CC:  BCF    x7C.0
012CE:  BTFSC  F74.6
012D0:  BSF    x7C.0
*
01554:  BCF    x7C.0
01556:  BTFSC  F74.6
01558:  BSF    x7C.0
....................         COMSTAT.rx1ovfl=0; 
*
012D2:  BCF    F74.6
*
0155A:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
012D4:  MOVLB  F
012D6:  MOVF   x50,W
012D8:  ANDLW  07
012DA:  ANDLW  07
012DC:  MOVWF  00
012DE:  BCF    FD8.0
012E0:  RLCF   00,F
012E2:  MOVLW  F1
012E4:  MOVLB  5
012E6:  ANDWF  x7C,W
012E8:  IORWF  00,W
012EA:  MOVWF  x7C
*
0155C:  MOVLB  F
0155E:  MOVF   x50,W
01560:  ANDLW  07
01562:  ANDLW  07
01564:  MOVWF  00
01566:  BCF    FD8.0
01568:  RLCF   00,F
0156A:  MOVLW  F1
0156C:  MOVLB  5
0156E:  ANDWF  x7C,W
01570:  IORWF  00,W
01572:  MOVWF  x7C
....................     } 
....................     else { 
*
012EC:  BRA    12F8
012EE:  MOVLB  F
*
01574:  BRA    1580
01576:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
012F0:  MOVLW  00
012F2:  MOVWF  01
012F4:  BRA    138E
012F6:  MOVLB  5
*
01578:  MOVLW  00
0157A:  MOVWF  01
0157C:  BRA    1616
0157E:  MOVLB  5
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
012F8:  MOVF   F65,W
012FA:  ANDLW  0F
012FC:  MOVWF  x7B
*
01580:  MOVF   F65,W
01582:  ANDLW  0F
01584:  MOVWF  x7B
....................     stat.rtr=RXBaDLC.rtr; 
*
012FE:  BCF    x7C.5
01300:  BTFSC  F65.6
01302:  BSF    x7C.5
*
01586:  BCF    x7C.5
01588:  BTFSC  F65.6
0158A:  BSF    x7C.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
01304:  BCF    x7C.6
01306:  BTFSC  F62.3
01308:  BSF    x7C.6
*
0158C:  BCF    x7C.6
0158E:  BTFSC  F62.3
01590:  BSF    x7C.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
0130A:  MOVLW  00
0130C:  BTFSC  x7C.6
0130E:  MOVLW  01
01310:  MOVWF  x8C
01312:  MOVLW  0F
01314:  MOVWF  x94
01316:  MOVLW  64
01318:  MOVWF  x93
0131A:  MOVFF  58C,595
0131E:  MOVLB  0
01320:  RCALL  1074
01322:  MOVFF  03,57A
01326:  MOVFF  02,579
0132A:  MOVFF  01,578
0132E:  MOVFF  00,577
*
01592:  MOVLW  00
01594:  BTFSC  x7C.6
01596:  MOVLW  01
01598:  MOVWF  x8C
0159A:  MOVLW  0F
0159C:  MOVWF  x94
0159E:  MOVLW  64
015A0:  MOVWF  x93
015A2:  MOVFF  58C,595
015A6:  MOVLB  0
015A8:  RCALL  1074
015AA:  MOVFF  03,57A
015AE:  MOVFF  02,579
015B2:  MOVFF  01,578
015B6:  MOVFF  00,577
....................  
....................     ptr = &TXRXBaD0; 
*
01332:  MOVLW  0F
01334:  MOVLB  5
01336:  MOVWF  x8B
01338:  MOVLW  66
0133A:  MOVWF  x8A
*
015BA:  MOVLW  0F
015BC:  MOVLB  5
015BE:  MOVWF  x8B
015C0:  MOVLW  66
015C2:  MOVWF  x8A
....................     for ( i = 0; i < len; i++ ) { 
*
0133C:  CLRF   x89
0133E:  MOVF   x7B,W
01340:  SUBWF  x89,W
01342:  BC    136C
*
015C4:  CLRF   x89
015C6:  MOVF   x7B,W
015C8:  SUBWF  x89,W
015CA:  BC    15F4
....................         *data = *ptr; 
*
01344:  MOVFF  58A,FE9
01348:  MOVFF  58B,FEA
0134C:  MOVFF  FEF,58E
01350:  MOVFF  588,FEA
01354:  MOVFF  587,FE9
01358:  MOVFF  58E,FEF
*
015CC:  MOVFF  58A,FE9
015D0:  MOVFF  58B,FEA
015D4:  MOVFF  FEF,58E
015D8:  MOVFF  588,FEA
015DC:  MOVFF  587,FE9
015E0:  MOVFF  58E,FEF
....................         data++; 
*
0135C:  INCF   x87,F
0135E:  BTFSC  FD8.2
01360:  INCF   x88,F
*
015E4:  INCF   x87,F
015E6:  BTFSC  FD8.2
015E8:  INCF   x88,F
....................         ptr++; 
*
01362:  INCF   x8A,F
01364:  BTFSC  FD8.2
01366:  INCF   x8B,F
*
015EA:  INCF   x8A,F
015EC:  BTFSC  FD8.2
015EE:  INCF   x8B,F
....................     } 
*
01368:  INCF   x89,F
0136A:  BRA    133E
*
015F0:  INCF   x89,F
015F2:  BRA    15C6
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
0136C:  MOVLW  F1
0136E:  ANDWF  F6F,W
01370:  MOVWF  F6F
*
015F4:  MOVLW  F1
015F6:  ANDWF  F6F,W
015F8:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
01372:  BCF    x7C.7
01374:  BTFSC  FA4.7
01376:  BSF    x7C.7
*
015FA:  BCF    x7C.7
015FC:  BTFSC  FA4.7
015FE:  BSF    x7C.7
....................     CAN_INT_IRXIF = 0; 
*
01378:  BCF    FA4.7
*
01600:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
0137A:  BTFSS  x7C.4
0137C:  BRA    1386
*
01602:  BTFSS  x7C.4
01604:  BRA    160E
....................       RXB1CON.rxful=0; 
*
0137E:  MOVLB  F
01380:  BCF    x50.7
*
01606:  MOVLB  F
01608:  BCF    x50.7
....................     } 
....................     else { 
*
01382:  BRA    138A
01384:  MOVLB  5
*
0160A:  BRA    1612
0160C:  MOVLB  5
....................       RXB0CON.rxful=0; 
*
01386:  BCF    F60.7
01388:  MOVLB  F
*
0160E:  BCF    F60.7
01610:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
0138A:  MOVLW  01
0138C:  MOVWF  01
*
01612:  MOVLW  01
01614:  MOVWF  01
01616:  MOVLB  5
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
0126C:  MOVF   28,W
0126E:  SUBLW  FF
01270:  BNZ   1274
....................       can_rspoint++; 
01272:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
01274:  MOVF   28,W
01276:  SUBLW  09
01278:  BTFSS  FD8.0
0127A:  BRA    1504
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
0127C:  MOVLW  05
0127E:  MOVLB  5
01280:  MOVWF  x88
01282:  MOVLW  7D
01284:  MOVWF  x87
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
0138E:  MOVLB  5
01390:  CLRF   x86
01392:  MOVF   x86,F
01394:  BNZ   13D6
....................          if(rx_id==can_filter[j]) 
01396:  MOVF   x86,W
01398:  MULLW  04
0139A:  MOVF   FF3,W
0139C:  CLRF   03
0139E:  ADDLW  39
013A0:  MOVWF  FE9
013A2:  MOVLW  01
013A4:  ADDWFC 03,W
013A6:  MOVWF  FEA
013A8:  MOVFF  FEF,00
013AC:  MOVFF  FEC,01
013B0:  MOVFF  FEC,02
013B4:  MOVFF  FEC,03
013B8:  MOVF   00,W
013BA:  SUBWF  x77,W
013BC:  BNZ   13D2
013BE:  MOVF   01,W
013C0:  SUBWF  x78,W
013C2:  BNZ   13D2
013C4:  MOVF   02,W
013C6:  SUBWF  x79,W
013C8:  BNZ   13D2
013CA:  MOVF   03,W
013CC:  SUBWF  x7A,W
013CE:  BNZ   13D2
....................             return; 
013D0:  BRA    1618
013D2:  INCF   x86,F
013D4:  BRA    1392
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
013D6:  MOVF   28,W
013D8:  MULLW  0E
013DA:  MOVF   FF3,W
013DC:  CLRF   x88
013DE:  MOVWF  x87
013E0:  MOVLW  29
013E2:  ADDWF  x87,W
013E4:  MOVWF  FE9
013E6:  MOVLW  00
013E8:  ADDWFC x88,W
013EA:  MOVWF  FEA
013EC:  MOVFF  57A,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
013F0:  MOVF   28,W
013F2:  MULLW  0E
013F4:  MOVF   FF3,W
013F6:  CLRF   x88
013F8:  MOVWF  x87
013FA:  MOVLW  01
013FC:  ADDWF  x87,W
013FE:  MOVWF  01
01400:  MOVLW  00
01402:  ADDWFC x88,W
01404:  MOVWF  03
01406:  MOVF   01,W
01408:  ADDLW  29
0140A:  MOVWF  FE9
0140C:  MOVLW  00
0140E:  ADDWFC 03,W
01410:  MOVWF  FEA
01412:  MOVFF  579,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
01416:  MOVF   28,W
01418:  MULLW  0E
0141A:  MOVF   FF3,W
0141C:  CLRF   x88
0141E:  MOVWF  x87
01420:  MOVLW  02
01422:  ADDWF  x87,W
01424:  MOVWF  01
01426:  MOVLW  00
01428:  ADDWFC x88,W
0142A:  MOVWF  03
0142C:  MOVF   01,W
0142E:  ADDLW  29
01430:  MOVWF  FE9
01432:  MOVLW  00
01434:  ADDWFC 03,W
01436:  MOVWF  FEA
01438:  MOVFF  578,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
0143C:  MOVF   28,W
0143E:  MULLW  0E
01440:  MOVF   FF3,W
01442:  CLRF   x88
01444:  MOVWF  x87
01446:  MOVLW  03
01448:  ADDWF  x87,W
0144A:  MOVWF  01
0144C:  MOVLW  00
0144E:  ADDWFC x88,W
01450:  MOVWF  03
01452:  MOVF   01,W
01454:  ADDLW  29
01456:  MOVWF  FE9
01458:  MOVLW  00
0145A:  ADDWFC 03,W
0145C:  MOVWF  FEA
0145E:  MOVFF  577,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
01462:  MOVF   28,W
01464:  MULLW  0E
01466:  MOVF   FF3,W
01468:  CLRF   x88
0146A:  MOVWF  x87
0146C:  MOVLW  04
0146E:  ADDWF  x87,W
01470:  MOVWF  01
01472:  MOVLW  00
01474:  ADDWFC x88,W
01476:  MOVWF  03
01478:  MOVF   01,W
0147A:  ADDLW  29
0147C:  MOVWF  FE9
0147E:  MOVLW  00
01480:  ADDWFC 03,W
01482:  MOVWF  FEA
01484:  MOVFF  57B,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
01488:  MOVF   28,W
0148A:  MULLW  0E
0148C:  MOVF   FF3,W
0148E:  CLRF   x88
01490:  MOVWF  x87
01492:  MOVLW  05
01494:  ADDWF  x87,W
01496:  MOVWF  01
01498:  MOVLW  00
0149A:  ADDWFC x88,W
0149C:  MOVWF  03
0149E:  MOVF   01,W
014A0:  ADDLW  29
014A2:  MOVWF  FE9
014A4:  MOVLW  00
014A6:  ADDWFC 03,W
014A8:  MOVWF  FEA
014AA:  MOVFF  57C,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
014AE:  CLRF   x85
014B0:  MOVF   x7B,W
014B2:  SUBWF  x85,W
014B4:  BC    14FE
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
014B6:  MOVF   28,W
014B8:  MULLW  0E
014BA:  MOVF   FF3,W
014BC:  CLRF   x88
014BE:  MOVWF  x87
014C0:  MOVLW  06
014C2:  ADDWF  x85,W
014C4:  CLRF   03
014C6:  ADDWF  x87,W
014C8:  MOVWF  01
014CA:  MOVF   x88,W
014CC:  ADDWFC 03,F
014CE:  MOVF   01,W
014D0:  ADDLW  29
014D2:  MOVWF  01
014D4:  MOVLW  00
014D6:  ADDWFC 03,F
014D8:  MOVFF  03,588
014DC:  CLRF   03
014DE:  MOVF   x85,W
014E0:  ADDLW  7D
014E2:  MOVWF  FE9
014E4:  MOVLW  05
014E6:  ADDWFC 03,W
014E8:  MOVWF  FEA
014EA:  MOVFF  FEF,589
014EE:  MOVFF  588,FEA
014F2:  MOVFF  01,FE9
014F6:  MOVFF  589,FEF
....................       } 
014FA:  INCF   x85,F
014FC:  BRA    14B0
....................  
....................       can_rspoint++; 
014FE:  INCF   28,F
....................    } 
....................    else 
01500:  BRA    1618
01502:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01504:  MOVLW  05
01506:  MOVLB  5
01508:  MOVWF  x88
0150A:  MOVLW  7D
0150C:  MOVWF  x87
.................... } 
*
01618:  MOVLB  0
0161A:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
01832:  MOVF   xB6,W
01834:  SUBLW  0A
01836:  BNZ   183A
....................    { 
....................       can_tspoint--; 
01838:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
0183A:  MOVF   xB6,W
0183C:  SUBLW  FF
0183E:  BTFSC  FD8.2
01840:  BRA    1A48
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
01842:  MOVF   xB6,W
01844:  MULLW  0D
01846:  MOVF   FF3,W
01848:  MOVLB  5
0184A:  CLRF   x88
0184C:  MOVWF  x87
0184E:  MOVLW  B7
01850:  ADDWF  x87,W
01852:  MOVWF  FE9
01854:  MOVLW  00
01856:  ADDWFC x88,W
01858:  MOVWF  FEA
0185A:  MOVFF  FEF,587
0185E:  MOVLB  0
01860:  MOVF   xB6,W
01862:  MULLW  0D
01864:  MOVF   FF3,W
01866:  MOVLB  5
01868:  CLRF   x89
0186A:  MOVWF  x88
0186C:  MOVLW  01
0186E:  ADDWF  x88,W
01870:  MOVWF  01
01872:  MOVLW  00
01874:  ADDWFC x89,W
01876:  MOVWF  03
01878:  MOVF   01,W
0187A:  ADDLW  B7
0187C:  MOVWF  FE9
0187E:  MOVLW  00
01880:  ADDWFC 03,W
01882:  MOVWF  FEA
01884:  MOVFF  FEF,588
01888:  MOVLB  0
0188A:  MOVF   xB6,W
0188C:  MULLW  0D
0188E:  MOVF   FF3,W
01890:  MOVLB  5
01892:  CLRF   x8A
01894:  MOVWF  x89
01896:  MOVLW  02
01898:  ADDWF  x89,W
0189A:  MOVWF  01
0189C:  MOVLW  00
0189E:  ADDWFC x8A,W
018A0:  MOVWF  03
018A2:  MOVF   01,W
018A4:  ADDLW  B7
018A6:  MOVWF  FE9
018A8:  MOVLW  00
018AA:  ADDWFC 03,W
018AC:  MOVWF  FEA
018AE:  MOVFF  FEF,589
018B2:  MOVLB  0
018B4:  MOVF   xB6,W
018B6:  MULLW  0D
018B8:  MOVF   FF3,W
018BA:  MOVLB  5
018BC:  CLRF   x8B
018BE:  MOVWF  x8A
018C0:  MOVLW  03
018C2:  ADDWF  x8A,W
018C4:  MOVWF  01
018C6:  MOVLW  00
018C8:  ADDWFC x8B,W
018CA:  MOVWF  03
018CC:  MOVF   01,W
018CE:  ADDLW  B7
018D0:  MOVWF  FE9
018D2:  MOVLW  00
018D4:  ADDWFC 03,W
018D6:  MOVWF  FEA
018D8:  MOVFF  FEF,58A
018DC:  MOVFF  587,57A
018E0:  MOVFF  588,579
018E4:  MOVFF  589,578
018E8:  MOVFF  58A,577
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
018EC:  MOVLB  0
018EE:  MOVF   xB6,W
018F0:  MULLW  0D
018F2:  MOVF   FF3,W
018F4:  MOVLB  5
018F6:  CLRF   x88
018F8:  MOVWF  x87
018FA:  MOVLW  0C
018FC:  ADDWF  x87,W
018FE:  MOVWF  01
01900:  MOVLW  00
01902:  ADDWFC x88,W
01904:  MOVWF  03
01906:  MOVF   01,W
01908:  ADDLW  B7
0190A:  MOVWF  FE9
0190C:  MOVLW  00
0190E:  ADDWFC 03,W
01910:  MOVWF  FEA
01912:  SWAPF  FEF,W
01914:  MOVWF  x7B
01916:  MOVLW  0F
01918:  ANDWF  x7B,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
0191A:  MOVLB  0
0191C:  MOVF   xB6,W
0191E:  MULLW  0D
01920:  MOVF   FF3,W
01922:  MOVLB  5
01924:  CLRF   x88
01926:  MOVWF  x87
01928:  MOVLW  0C
0192A:  ADDWF  x87,W
0192C:  MOVWF  01
0192E:  MOVLW  00
01930:  ADDWFC x88,W
01932:  MOVWF  03
01934:  MOVF   01,W
01936:  ADDLW  B7
01938:  MOVWF  FE9
0193A:  MOVLW  00
0193C:  ADDWFC 03,W
0193E:  MOVWF  FEA
01940:  MOVF   FEF,W
01942:  ANDLW  0C
01944:  MOVWF  00
01946:  RRCF   00,W
01948:  MOVWF  x7C
0194A:  RRCF   x7C,F
0194C:  MOVLW  3F
0194E:  ANDWF  x7C,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
01950:  MOVLB  0
01952:  MOVF   xB6,W
01954:  MULLW  0D
01956:  MOVF   FF3,W
01958:  MOVLB  5
0195A:  CLRF   x88
0195C:  MOVWF  x87
0195E:  MOVLW  0C
01960:  ADDWF  x87,W
01962:  MOVWF  01
01964:  MOVLW  00
01966:  ADDWFC x88,W
01968:  MOVWF  03
0196A:  MOVF   01,W
0196C:  ADDLW  B7
0196E:  MOVWF  FE9
01970:  MOVLW  00
01972:  ADDWFC 03,W
01974:  MOVWF  FEA
01976:  MOVFF  FEF,587
0197A:  BCF    x85.0
0197C:  BTFSC  x87.1
0197E:  BSF    x85.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01980:  MOVLB  0
01982:  MOVF   xB6,W
01984:  MULLW  0D
01986:  MOVF   FF3,W
01988:  MOVLB  5
0198A:  CLRF   x88
0198C:  MOVWF  x87
0198E:  MOVLW  0C
01990:  ADDWF  x87,W
01992:  MOVWF  01
01994:  MOVLW  00
01996:  ADDWFC x88,W
01998:  MOVWF  03
0199A:  MOVF   01,W
0199C:  ADDLW  B7
0199E:  MOVWF  FE9
019A0:  MOVLW  00
019A2:  ADDWFC 03,W
019A4:  MOVWF  FEA
019A6:  MOVFF  FEF,587
019AA:  BCF    x85.1
019AC:  BTFSC  x87.0
019AE:  BSF    x85.1
....................  
....................       for(i=0;i<tx_length;i++) 
019B0:  CLRF   x86
019B2:  MOVF   x7B,W
019B4:  SUBWF  x86,W
019B6:  BC    1A08
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
019B8:  CLRF   03
019BA:  MOVF   x86,W
019BC:  ADDLW  7D
019BE:  MOVWF  01
019C0:  MOVLW  05
019C2:  ADDWFC 03,F
019C4:  MOVFF  01,587
019C8:  MOVFF  03,588
019CC:  MOVLB  0
019CE:  MOVF   xB6,W
019D0:  MULLW  0D
019D2:  MOVF   FF3,W
019D4:  MOVLB  5
019D6:  CLRF   x8A
019D8:  MOVWF  x89
019DA:  MOVLW  04
019DC:  ADDWF  x86,W
019DE:  CLRF   03
019E0:  ADDWF  x89,W
019E2:  MOVWF  01
019E4:  MOVF   x8A,W
019E6:  ADDWFC 03,F
019E8:  MOVF   01,W
019EA:  ADDLW  B7
019EC:  MOVWF  FE9
019EE:  MOVLW  00
019F0:  ADDWFC 03,W
019F2:  MOVWF  FEA
019F4:  MOVFF  FEF,589
019F8:  MOVFF  588,FEA
019FC:  MOVFF  587,FE9
01A00:  MOVFF  589,FEF
....................       } 
01A04:  INCF   x86,F
01A06:  BRA    19B2
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01A08:  MOVLW  00
01A0A:  BTFSC  x85.0
01A0C:  MOVLW  01
01A0E:  MOVWF  x87
01A10:  MOVLW  00
01A12:  BTFSC  x85.1
01A14:  MOVLW  01
01A16:  MOVWF  x88
01A18:  MOVFF  57A,58C
01A1C:  MOVFF  579,58B
01A20:  MOVFF  578,58A
01A24:  MOVFF  577,589
01A28:  MOVLW  05
01A2A:  MOVWF  x8E
01A2C:  MOVLW  7D
01A2E:  MOVWF  x8D
01A30:  MOVFF  57B,58F
01A34:  MOVFF  57C,590
01A38:  MOVFF  587,591
01A3C:  MOVFF  588,592
01A40:  MOVLB  0
01A42:  BRA    1760
....................  
....................       can_tspoint--; 
01A44:  DECF   xB6,F
....................    } 
....................    else 
01A46:  BRA    1A4A
....................       return; 
01A48:  BRA    1A4A
.................... } 
01A4A:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[10]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
01ECA:  MOVLB  5
01ECC:  CLRF   x63
01ECE:  MOVF   x62,W
01ED0:  SUBWF  x63,W
01ED2:  BC    1F06
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
01ED4:  CLRF   03
01ED6:  MOVF   x63,W
01ED8:  ADDWF  x60,W
01EDA:  MOVWF  01
01EDC:  MOVF   x61,W
01EDE:  ADDWFC 03,F
01EE0:  MOVFF  03,565
01EE4:  MOVFF  55E,FE9
01EE8:  MOVFF  55F,FEA
01EEC:  MOVFF  FEF,566
01EF0:  MOVFF  565,FEA
01EF4:  MOVFF  01,FE9
01EF8:  MOVFF  566,FEF
....................       ++origin; 
01EFC:  INCF   x5E,F
01EFE:  BTFSC  FD8.2
01F00:  INCF   x5F,F
....................    } 
01F02:  INCF   x63,F
01F04:  BRA    1ECE
.................... } 
01F06:  MOVLB  0
01F08:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
01CBC:  MOVLB  5
01CBE:  MOVFF  53C,FE9
01CC2:  MOVFF  53D,FEA
01CC6:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
01CC8:  MOVLW  01
01CCA:  ADDWF  x3C,W
01CCC:  MOVWF  01
01CCE:  MOVLW  00
01CD0:  ADDWFC x3D,W
01CD2:  MOVFF  01,FE9
01CD6:  MOVWF  FEA
01CD8:  MOVFF  539,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
01CDC:  MOVLW  01
01CDE:  ADDWF  x3C,W
01CE0:  MOVWF  01
01CE2:  MOVLW  00
01CE4:  ADDWFC x3D,W
01CE6:  MOVWF  03
01CE8:  MOVF   01,W
01CEA:  ADDLW  03
01CEC:  MOVWF  FE9
01CEE:  MOVLW  00
01CF0:  ADDWFC 03,W
01CF2:  MOVWF  FEA
01CF4:  MOVFF  53A,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
01CF8:  MOVLW  01
01CFA:  ADDWF  x3C,W
01CFC:  MOVWF  01
01CFE:  MOVLW  00
01D00:  ADDWFC x3D,W
01D02:  MOVWF  03
01D04:  MOVF   01,W
01D06:  ADDLW  06
01D08:  MOVWF  FE9
01D0A:  MOVLW  00
01D0C:  ADDWFC 03,W
01D0E:  MOVWF  FEA
01D10:  MOVFF  53B,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
01D14:  MOVLW  01
01D16:  ADDWF  x3C,W
01D18:  MOVWF  01
01D1A:  MOVLW  00
01D1C:  ADDWFC x3D,W
01D1E:  MOVWF  03
01D20:  MOVF   01,W
01D22:  ADDLW  0E
01D24:  MOVWF  FE9
01D26:  MOVLW  00
01D28:  ADDWFC 03,W
01D2A:  MOVWF  FEA
01D2C:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
01D2E:  MOVLW  01
01D30:  ADDWF  x3C,W
01D32:  MOVWF  01
01D34:  MOVLW  00
01D36:  ADDWFC x3D,W
01D38:  MOVWF  03
01D3A:  MOVF   01,W
01D3C:  ADDLW  0F
01D3E:  MOVWF  FE9
01D40:  MOVLW  00
01D42:  ADDWFC 03,W
01D44:  MOVWF  FEA
01D46:  MOVLW  01
01D48:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
01D4A:  ADDWF  x3C,W
01D4C:  MOVWF  01
01D4E:  MOVLW  00
01D50:  ADDWFC x3D,W
01D52:  MOVWF  03
01D54:  MOVF   01,W
01D56:  ADDLW  09
01D58:  MOVWF  FE9
01D5A:  MOVLW  00
01D5C:  ADDWFC 03,W
01D5E:  MOVWF  FEA
01D60:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
01D62:  MOVLW  01
01D64:  ADDWF  x3C,W
01D66:  MOVWF  01
01D68:  MOVLW  00
01D6A:  ADDWFC x3D,W
01D6C:  MOVWF  03
01D6E:  MOVF   01,W
01D70:  ADDLW  0E
01D72:  MOVWF  FE9
01D74:  MOVLW  00
01D76:  ADDWFC 03,W
01D78:  MOVWF  FEA
01D7A:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
01D7C:  MOVLW  01
01D7E:  ADDWF  x3C,W
01D80:  MOVWF  01
01D82:  MOVLW  00
01D84:  ADDWFC x3D,W
01D86:  MOVWF  03
01D88:  MOVF   01,W
01D8A:  ADDLW  02
01D8C:  MOVWF  FE9
01D8E:  MOVLW  00
01D90:  ADDWFC 03,W
01D92:  MOVWF  FEA
01D94:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
01D96:  MOVLW  01
01D98:  ADDWF  x3C,W
01D9A:  MOVWF  01
01D9C:  MOVLW  00
01D9E:  ADDWFC x3D,W
01DA0:  MOVWF  03
01DA2:  MOVF   01,W
01DA4:  ADDLW  05
01DA6:  MOVWF  FE9
01DA8:  MOVLW  00
01DAA:  ADDWFC 03,W
01DAC:  MOVWF  FEA
01DAE:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
01DB0:  MOVLW  01
01DB2:  ADDWF  x3C,W
01DB4:  MOVWF  01
01DB6:  MOVLW  00
01DB8:  ADDWFC x3D,W
01DBA:  MOVWF  03
01DBC:  MOVF   01,W
01DBE:  ADDLW  08
01DC0:  MOVWF  FE9
01DC2:  MOVLW  00
01DC4:  ADDWFC 03,W
01DC6:  MOVWF  FEA
01DC8:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
01DCA:  MOVLW  01
01DCC:  ADDWF  x3C,W
01DCE:  MOVWF  01
01DD0:  MOVLW  00
01DD2:  ADDWFC x3D,W
01DD4:  MOVWF  03
01DD6:  MOVF   01,W
01DD8:  ADDLW  01
01DDA:  MOVWF  FE9
01DDC:  MOVLW  00
01DDE:  ADDWFC 03,W
01DE0:  MOVWF  FEA
01DE2:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
01DE4:  MOVLW  01
01DE6:  ADDWF  x3C,W
01DE8:  MOVWF  01
01DEA:  MOVLW  00
01DEC:  ADDWFC x3D,W
01DEE:  MOVWF  03
01DF0:  MOVF   01,W
01DF2:  ADDLW  04
01DF4:  MOVWF  FE9
01DF6:  MOVLW  00
01DF8:  ADDWFC 03,W
01DFA:  MOVWF  FEA
01DFC:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
01DFE:  MOVLW  01
01E00:  ADDWF  x3C,W
01E02:  MOVWF  01
01E04:  MOVLW  00
01E06:  ADDWFC x3D,W
01E08:  MOVWF  03
01E0A:  MOVF   01,W
01E0C:  ADDLW  07
01E0E:  MOVWF  FE9
01E10:  MOVLW  00
01E12:  ADDWFC 03,W
01E14:  MOVWF  FEA
01E16:  MOVLW  01
01E18:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
01E1A:  ADDWF  x3C,W
01E1C:  MOVWF  01
01E1E:  MOVLW  00
01E20:  ADDWFC x3D,W
01E22:  MOVWF  03
01E24:  MOVF   01,W
01E26:  ADDLW  10
01E28:  MOVWF  01
01E2A:  MOVLW  00
01E2C:  ADDWFC 03,F
01E2E:  MOVFF  03,542
01E32:  CLRF   03
01E34:  MOVF   x3E,W
01E36:  ADDLW  1C
01E38:  MOVWF  FE9
01E3A:  MOVLW  00
01E3C:  ADDWFC 03,W
01E3E:  MOVWF  FEA
01E40:  MOVFF  FEF,543
01E44:  MOVFF  542,FEA
01E48:  MOVFF  01,FE9
01E4C:  MOVFF  543,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
01E50:  MOVLW  01
01E52:  ADDWF  x3C,W
01E54:  MOVWF  01
01E56:  MOVLW  00
01E58:  ADDWFC x3D,W
01E5A:  MOVWF  03
01E5C:  MOVF   01,W
01E5E:  ADDLW  0A
01E60:  MOVWF  FE9
01E62:  MOVLW  00
01E64:  ADDWFC 03,W
01E66:  MOVWF  FEA
01E68:  MOVF   FEE,F
01E6A:  MOVF   FEE,F
01E6C:  CLRF   FEC
01E6E:  MOVF   FED,F
01E70:  CLRF   FEF
01E72:  MOVF   FED,F
01E74:  CLRF   FEF
01E76:  MOVF   FED,F
01E78:  CLRF   FEF
.................... } 
01E7A:  MOVLB  0
01E7C:  GOTO   1EC6 (RETURN)
.................... void on_off_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
....................       sw.on.adress=on_adr; 
....................       sw.off.adress=off_adr; 
....................       sw.previous_state=button_depressed; 
....................       sw.outstate=off; 
....................       sw.on.needs_update=0; 
....................       sw.off.needs_update=0; 
....................       sw.on.value=0; 
....................       sw.off.value=0; 
....................       sw.realbutton=inputs[real_button]; 
....................       input->device=sw; 
.................... } 
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
....................       sw.on.adress=on_adr; 
....................       sw.off.adress=off_adr; 
....................       sw.previous_state=button_depressed; 
....................       sw.outstate=off; 
....................       sw.on.needs_update=0; 
....................       sw.off.needs_update=0; 
....................       sw.on.value=0; 
....................       sw.off.value=0; 
....................       sw.repeat=repeat; 
....................       sw.realbutton=inputs[real_button]; 
....................       input->device=sw; 
.................... } 
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
01F0A:  MOVLB  5
01F0C:  MOVFF  557,FE9
01F10:  MOVFF  558,FEA
01F14:  MOVLW  01
01F16:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
01F18:  ADDWF  x57,W
01F1A:  MOVWF  01
01F1C:  MOVLW  00
01F1E:  ADDWFC x58,W
01F20:  MOVWF  03
01F22:  MOVF   01,W
01F24:  ADDLW  1D
01F26:  MOVWF  FE9
01F28:  MOVLW  00
01F2A:  ADDWFC 03,W
01F2C:  MOVWF  FEA
01F2E:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
01F30:  MOVLW  01
01F32:  ADDWF  x57,W
01F34:  MOVWF  01
01F36:  MOVLW  00
01F38:  ADDWFC x58,W
01F3A:  MOVWF  03
01F3C:  MOVF   01,W
01F3E:  ADDLW  09
01F40:  MOVWF  FE9
01F42:  MOVLW  00
01F44:  ADDWFC 03,W
01F46:  MOVWF  FEA
01F48:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
01F4A:  MOVLW  01
01F4C:  ADDWF  x57,W
01F4E:  MOVWF  01
01F50:  MOVLW  00
01F52:  ADDWFC x58,W
01F54:  MOVWF  03
01F56:  MOVF   01,W
01F58:  ADDLW  13
01F5A:  MOVWF  FE9
01F5C:  MOVLW  00
01F5E:  ADDWFC 03,W
01F60:  MOVWF  FEA
01F62:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
01F64:  MOVLW  01
01F66:  ADDWF  x57,W
01F68:  MOVWF  01
01F6A:  MOVLW  00
01F6C:  ADDWFC x58,W
01F6E:  MOVWF  03
01F70:  MOVF   01,W
01F72:  ADDLW  1C
01F74:  MOVWF  FE9
01F76:  MOVLW  00
01F78:  ADDWFC 03,W
01F7A:  MOVWF  FEA
01F7C:  MOVLW  7F
01F7E:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
01F80:  MOVLW  01
01F82:  ADDWF  x57,W
01F84:  MOVWF  01
01F86:  MOVLW  00
01F88:  ADDWFC x58,W
01F8A:  MOVWF  03
01F8C:  MOVF   01,W
01F8E:  ADDLW  08
01F90:  MOVWF  FE9
01F92:  MOVLW  00
01F94:  ADDWFC 03,W
01F96:  MOVWF  FEA
01F98:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
01F9A:  MOVLW  01
01F9C:  ADDWF  x57,W
01F9E:  MOVWF  01
01FA0:  MOVLW  00
01FA2:  ADDWFC x58,W
01FA4:  MOVWF  03
01FA6:  MOVF   01,W
01FA8:  ADDLW  12
01FAA:  MOVWF  FE9
01FAC:  MOVLW  00
01FAE:  ADDWFC 03,W
01FB0:  MOVWF  FEA
01FB2:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
01FB4:  MOVLW  01
01FB6:  ADDWF  x57,W
01FB8:  MOVWF  01
01FBA:  MOVLW  00
01FBC:  ADDWFC x58,W
01FBE:  MOVWF  03
01FC0:  MOVF   01,W
01FC2:  ADDLW  1F
01FC4:  MOVWF  FE9
01FC6:  MOVLW  00
01FC8:  ADDWFC 03,W
01FCA:  MOVWF  FEA
01FCC:  MOVFF  559,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
01FD0:  MOVLW  01
01FD2:  ADDWF  x57,W
01FD4:  MOVWF  01
01FD6:  MOVLW  00
01FD8:  ADDWFC x58,W
01FDA:  MOVWF  03
01FDC:  MOVF   01,W
01FDE:  ADDLW  14
01FE0:  MOVWF  01
01FE2:  MOVLW  00
01FE4:  ADDWFC 03,F
01FE6:  MOVFF  01,55C
01FEA:  MOVFF  03,55D
01FEE:  MOVFF  552,55F
01FF2:  MOVFF  551,55E
01FF6:  MOVFF  03,561
01FFA:  MOVFF  01,560
01FFE:  MOVLW  08
02000:  MOVWF  x62
02002:  MOVLB  0
02004:  RCALL  1ECA
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
02006:  MOVLW  01
02008:  MOVLB  5
0200A:  ADDWF  x57,W
0200C:  MOVWF  01
0200E:  MOVLW  00
02010:  ADDWFC x58,W
02012:  MOVWF  03
02014:  MOVFF  01,55C
02018:  MOVWF  x5D
0201A:  MOVFF  554,55F
0201E:  MOVFF  553,55E
02022:  MOVWF  x61
02024:  MOVFF  01,560
02028:  MOVLW  08
0202A:  MOVWF  x62
0202C:  MOVLB  0
0202E:  RCALL  1ECA
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
02030:  MOVLW  01
02032:  MOVLB  5
02034:  ADDWF  x57,W
02036:  MOVWF  01
02038:  MOVLW  00
0203A:  ADDWFC x58,W
0203C:  MOVWF  03
0203E:  MOVF   01,W
02040:  ADDLW  0A
02042:  MOVWF  01
02044:  MOVLW  00
02046:  ADDWFC 03,F
02048:  MOVFF  01,55C
0204C:  MOVFF  03,55D
02050:  MOVFF  556,55F
02054:  MOVFF  555,55E
02058:  MOVFF  03,561
0205C:  MOVFF  01,560
02060:  MOVLW  08
02062:  MOVWF  x62
02064:  MOVLB  0
02066:  RCALL  1ECA
....................    ((struct light)output->device).out_state=_off; 
02068:  MOVLW  01
0206A:  MOVLB  5
0206C:  ADDWF  x57,W
0206E:  MOVWF  01
02070:  MOVLW  00
02072:  ADDWFC x58,W
02074:  MOVWF  03
02076:  MOVF   01,W
02078:  ADDLW  1E
0207A:  MOVWF  FE9
0207C:  MOVLW  00
0207E:  ADDWFC 03,W
02080:  MOVWF  FEA
02082:  MOVLW  01
02084:  MOVWF  FEF
.................... } 
02086:  MOVLB  0
02088:  GOTO   2128 (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
....................    ((struct oNoFF)output->device).on.needs_update=0; 
....................    ((struct oNoFF)output->device).off.needs_update=0; 
....................    ((struct oNoFF)output->device).on.value=0; 
....................    ((struct oNoFF)output->device).off.value=0; 
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
.................... } 
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
....................    ((struct shutter)output->device).up.needs_update=0; 
....................    ((struct shutter)output->device).down.needs_update=0; 
....................    ((struct shutter)output->device).up.value=0; 
....................    ((struct shutter)output->device).down.value=0; 
....................    ((struct shutter)output->device).fullup.needs_update=0; 
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
....................    ((struct shutter)output->device).fullup.value=0; 
....................    ((struct shutter)output->device).fulldown.value=0; 
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
....................    ((struct shutter)output->device).state=idle; 
.................... } 
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
....................    ((struct timer)input->device).on.needs_update=0; 
....................    ((struct timer)input->device).off.needs_update=0; 
....................    ((struct timer)input->device).on.value=0; 
....................    ((struct timer)input->device).off.value=0; 
....................    ((struct timer)input->device).start.needs_update=0; 
....................    ((struct timer)input->device).stop.needs_update=0; 
....................    ((struct timer)input->device).start.value=0; 
....................    ((struct timer)input->device).stop.value=0; 
....................    ((struct timer)input->device).timer=0; 
....................    ((struct timer)input->device).type=type; 
....................    ((struct timer)input->device).active=false; 
....................    ((struct timer)input->device).timeToAct=timeToAct; 
....................    ((struct timer)input->device).on.adress=out_on; 
....................    ((struct timer)input->device).off.adress=out_off; 
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
.................... } 
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
*
01E80:  MOVLW  01
01E82:  MOVLB  1
01E84:  MOVWF  x3E
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................     //  on_off_init(1,2,3,&mydevices.myinputs[0],0); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
01E86:  MOVLW  02
01E88:  MOVLB  5
01E8A:  MOVWF  x29
01E8C:  MOVLW  FF
01E8E:  MOVWF  x2A
01E90:  MOVWF  x2B
01E92:  MOVWF  x2C
01E94:  MOVWF  x2D
01E96:  MOVWF  x2E
01E98:  MOVWF  x2F
01E9A:  MOVWF  x30
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
01E9C:  MOVWF  x31
01E9E:  MOVWF  x32
01EA0:  MOVWF  x33
01EA2:  MOVWF  x34
01EA4:  MOVWF  x35
01EA6:  MOVWF  x36
01EA8:  MOVWF  x37
01EAA:  MOVWF  x38
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................       dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
01EAC:  MOVLW  01
01EAE:  MOVWF  x39
01EB0:  MOVLW  02
01EB2:  MOVWF  x3A
01EB4:  MOVLW  03
01EB6:  MOVWF  x3B
01EB8:  MOVLW  01
01EBA:  MOVWF  x3D
01EBC:  MOVLW  40
01EBE:  MOVWF  x3C
01EC0:  CLRF   x3E
01EC2:  MOVLB  0
01EC4:  BRA    1CBC
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
01EC6:  GOTO   69C4 (RETURN)
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... int used_dimmers=0; 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
....................  
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00E14:  BCF    FD8.0
00E16:  RLCF   x79,W
00E18:  MOVWF  00
00E1A:  BCF    FD8.0
00E1C:  RLCF   00,F
00E1E:  MOVF   00,W
00E20:  MOVLB  4
00E22:  ADDWF  x61,W
00E24:  MOVLB  5
00E26:  MOVWF  x7D
00E28:  MOVLW  00
00E2A:  MOVLB  4
00E2C:  ADDWFC x62,W
00E2E:  MOVLB  5
00E30:  MOVWF  x7E
00E32:  BCF    FD8.0
00E34:  RLCF   x7A,W
00E36:  ADDWF  x7D,W
00E38:  MOVWF  x7B
00E3A:  MOVLW  00
00E3C:  ADDWFC x7E,W
00E3E:  MOVWF  x7C
*
00EAC:  BCF    FD8.0
00EAE:  RLCF   x79,W
00EB0:  MOVWF  00
00EB2:  BCF    FD8.0
00EB4:  RLCF   00,F
00EB6:  MOVF   00,W
00EB8:  MOVLB  4
00EBA:  ADDWF  x61,W
00EBC:  MOVLB  5
00EBE:  MOVWF  x7D
00EC0:  MOVLW  00
00EC2:  MOVLB  4
00EC4:  ADDWFC x62,W
00EC6:  MOVLB  5
00EC8:  MOVWF  x7E
00ECA:  BCF    FD8.0
00ECC:  RLCF   x7A,W
00ECE:  ADDWF  x7D,W
00ED0:  MOVWF  x7B
00ED2:  MOVLW  00
00ED4:  ADDWFC x7E,W
00ED6:  MOVWF  x7C
*
00F3A:  BCF    FD8.0
00F3C:  RLCF   x79,W
00F3E:  MOVWF  00
00F40:  BCF    FD8.0
00F42:  RLCF   00,F
00F44:  MOVF   00,W
00F46:  MOVLB  4
00F48:  ADDWF  x61,W
00F4A:  MOVLB  5
00F4C:  MOVWF  x7D
00F4E:  MOVLW  00
00F50:  MOVLB  4
00F52:  ADDWFC x62,W
00F54:  MOVLB  5
00F56:  MOVWF  x7E
00F58:  BCF    FD8.0
00F5A:  RLCF   x7A,W
00F5C:  ADDWF  x7D,W
00F5E:  MOVWF  x7B
00F60:  MOVLW  00
00F62:  ADDWFC x7E,W
00F64:  MOVWF  x7C
*
00FC2:  BCF    FD8.0
00FC4:  RLCF   x79,W
00FC6:  MOVWF  00
00FC8:  BCF    FD8.0
00FCA:  RLCF   00,F
00FCC:  MOVF   00,W
00FCE:  MOVLB  4
00FD0:  ADDWF  x61,W
00FD2:  MOVLB  5
00FD4:  MOVWF  x7D
00FD6:  MOVLW  00
00FD8:  MOVLB  4
00FDA:  ADDWFC x62,W
00FDC:  MOVLB  5
00FDE:  MOVWF  x7E
00FE0:  BCF    FD8.0
00FE2:  RLCF   x7A,W
00FE4:  ADDWF  x7D,W
00FE6:  MOVWF  x7B
00FE8:  MOVLW  00
00FEA:  ADDWFC x7E,W
00FEC:  MOVWF  x7C
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
00E40:  BCF    FD8.0
00E42:  RLCF   x79,W
00E44:  MOVWF  00
00E46:  BCF    FD8.0
00E48:  RLCF   00,F
00E4A:  MOVF   00,W
00E4C:  MOVLB  4
00E4E:  ADDWF  x61,W
00E50:  MOVLB  5
00E52:  MOVWF  x7D
00E54:  MOVLW  00
00E56:  MOVLB  4
00E58:  ADDWFC x62,W
00E5A:  MOVLB  5
00E5C:  MOVWF  x7E
00E5E:  BCF    FD8.0
00E60:  RLCF   x7A,W
00E62:  ADDWF  x7D,W
00E64:  MOVWF  01
00E66:  MOVLW  00
00E68:  ADDWFC x7E,W
00E6A:  MOVWF  03
00E6C:  MOVFF  01,FE9
00E70:  MOVWF  FEA
00E72:  MOVFF  FEF,01
00E76:  INCF   FE9,F
00E78:  MOVF   FEF,W
00E7A:  DECF   FE9,F
00E7C:  MOVWF  02
*
00ED8:  BCF    FD8.0
00EDA:  RLCF   x79,W
00EDC:  MOVWF  00
00EDE:  BCF    FD8.0
00EE0:  RLCF   00,F
00EE2:  MOVF   00,W
00EE4:  MOVLB  4
00EE6:  ADDWF  x61,W
00EE8:  MOVLB  5
00EEA:  MOVWF  x7D
00EEC:  MOVLW  00
00EEE:  MOVLB  4
00EF0:  ADDWFC x62,W
00EF2:  MOVLB  5
00EF4:  MOVWF  x7E
00EF6:  BCF    FD8.0
00EF8:  RLCF   x7A,W
00EFA:  ADDWF  x7D,W
00EFC:  MOVWF  01
00EFE:  MOVLW  00
00F00:  ADDWFC x7E,W
00F02:  MOVWF  03
00F04:  MOVFF  01,FE9
00F08:  MOVWF  FEA
00F0A:  MOVFF  FEF,01
00F0E:  INCF   FE9,F
00F10:  MOVF   FEF,W
00F12:  DECF   FE9,F
00F14:  MOVWF  02
*
00F66:  BCF    FD8.0
00F68:  RLCF   x79,W
00F6A:  MOVWF  00
00F6C:  BCF    FD8.0
00F6E:  RLCF   00,F
00F70:  MOVF   00,W
00F72:  MOVLB  4
00F74:  ADDWF  x61,W
00F76:  MOVLB  5
00F78:  MOVWF  x7D
00F7A:  MOVLW  00
00F7C:  MOVLB  4
00F7E:  ADDWFC x62,W
00F80:  MOVLB  5
00F82:  MOVWF  x7E
00F84:  BCF    FD8.0
00F86:  RLCF   x7A,W
00F88:  ADDWF  x7D,W
00F8A:  MOVWF  01
00F8C:  MOVLW  00
00F8E:  ADDWFC x7E,W
00F90:  MOVWF  03
00F92:  MOVFF  01,FE9
00F96:  MOVWF  FEA
00F98:  MOVFF  FEF,01
00F9C:  INCF   FE9,F
00F9E:  MOVF   FEF,W
00FA0:  DECF   FE9,F
00FA2:  MOVWF  02
*
00FEE:  BCF    FD8.0
00FF0:  RLCF   x79,W
00FF2:  MOVWF  00
00FF4:  BCF    FD8.0
00FF6:  RLCF   00,F
00FF8:  MOVF   00,W
00FFA:  MOVLB  4
00FFC:  ADDWF  x61,W
00FFE:  MOVLB  5
01000:  MOVWF  x7D
01002:  MOVLW  00
01004:  MOVLB  4
01006:  ADDWFC x62,W
01008:  MOVLB  5
0100A:  MOVWF  x7E
0100C:  BCF    FD8.0
0100E:  RLCF   x7A,W
01010:  ADDWF  x7D,W
01012:  MOVWF  01
01014:  MOVLW  00
01016:  ADDWFC x7E,W
01018:  MOVWF  03
0101A:  MOVFF  01,FE9
0101E:  MOVWF  FEA
01020:  MOVFF  FEF,01
01024:  INCF   FE9,F
01026:  MOVF   FEF,W
01028:  DECF   FE9,F
0102A:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
0212C:  MOVLB  5
0212E:  CLRF   x6B
02130:  BSF    x6C.0
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
02132:  CLRF   x6D
02134:  MOVLB  4
02136:  MOVF   x60,W
02138:  MOVLB  5
0213A:  SUBWF  x6D,W
0213C:  BC    21CC
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
0213E:  MOVF   x6D,W
02140:  MULLW  04
02142:  MOVF   FF3,W
02144:  CLRF   x72
02146:  MOVWF  x71
02148:  MOVLW  2B
0214A:  ADDWF  x71,W
0214C:  MOVWF  01
0214E:  MOVLW  05
02150:  ADDWFC x72,W
02152:  MOVWF  03
02154:  MOVWF  x72
02156:  CLRF   03
02158:  MOVF   x6D,W
0215A:  ADDLW  67
0215C:  MOVWF  FE9
0215E:  MOVLW  04
02160:  ADDWFC 03,W
02162:  MOVWF  FEA
02164:  MOVF   FEF,W
02166:  CLRF   03
02168:  MOVFF  572,FEA
0216C:  MOVFF  01,FE9
02170:  MOVFF  03,FEC
02174:  MOVF   FED,F
02176:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
02178:  MOVF   x6D,W
0217A:  MULLW  04
0217C:  MOVF   FF3,W
0217E:  CLRF   x72
02180:  MOVWF  x71
02182:  MOVLW  02
02184:  ADDWF  x71,W
02186:  MOVWF  01
02188:  MOVLW  00
0218A:  ADDWFC x72,W
0218C:  MOVWF  03
0218E:  MOVF   01,W
02190:  ADDLW  2B
02192:  MOVWF  01
02194:  MOVLW  05
02196:  ADDWFC 03,F
02198:  MOVFF  03,572
0219C:  BCF    FD8.0
0219E:  RLCF   x6D,W
021A0:  CLRF   03
021A2:  ADDLW  FF
021A4:  MOVWF  FE9
021A6:  MOVLW  04
021A8:  ADDWFC 03,W
021AA:  MOVWF  FEA
021AC:  MOVFF  FEC,03
021B0:  MOVF   FED,F
021B2:  MOVFF  FEF,573
021B6:  MOVFF  572,FEA
021BA:  MOVFF  01,FE9
021BE:  MOVFF  03,FEC
021C2:  MOVF   FED,F
021C4:  MOVFF  573,FEF
....................      } 
021C8:  INCF   x6D,F
021CA:  BRA    2134
....................  
....................      WHILE(again) 
....................      { 
021CC:  BTFSS  x6C.0
021CE:  BRA    2396
....................         again = 0; 
021D0:  BCF    x6C.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
021D2:  CLRF   x6D
021D4:  MOVLW  01
021D6:  MOVLB  4
021D8:  SUBWF  x60,W
021DA:  MOVLB  5
021DC:  SUBWF  x6D,W
021DE:  BTFSC  FD8.0
021E0:  BRA    2394
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
021E2:  MOVF   x6D,W
021E4:  MULLW  04
021E6:  MOVF   FF3,W
021E8:  CLRF   x72
021EA:  MOVWF  x71
021EC:  MOVLW  2B
021EE:  ADDWF  x71,W
021F0:  MOVWF  FE9
021F2:  MOVLW  05
021F4:  ADDWFC x72,W
021F6:  MOVWF  FEA
021F8:  MOVFF  FEC,572
021FC:  MOVF   FED,F
021FE:  MOVFF  FEF,571
02202:  MOVLW  01
02204:  ADDWF  x6D,W
02206:  MULLW  04
02208:  MOVF   FF3,W
0220A:  CLRF   x74
0220C:  MOVWF  x73
0220E:  MOVLW  2B
02210:  ADDWF  x73,W
02212:  MOVWF  FE9
02214:  MOVLW  05
02216:  ADDWFC x74,W
02218:  MOVWF  FEA
0221A:  MOVFF  FEC,03
0221E:  MOVF   FED,F
02220:  MOVFF  FEF,01
02224:  MOVF   x72,W
02226:  SUBWF  03,W
02228:  BTFSS  FD8.0
0222A:  BRA    2390
0222C:  BNZ   2236
0222E:  MOVF   01,W
02230:  SUBWF  x71,W
02232:  BTFSC  FD8.0
02234:  BRA    2390
....................            { 
....................               again = 1; 
02236:  BSF    x6C.0
....................               fl = tempd[fa][0]; 
02238:  MOVF   x6D,W
0223A:  MULLW  04
0223C:  MOVF   FF3,W
0223E:  CLRF   x72
02240:  MOVWF  x71
02242:  MOVLW  2B
02244:  ADDWF  x71,W
02246:  MOVWF  FE9
02248:  MOVLW  05
0224A:  ADDWFC x72,W
0224C:  MOVWF  FEA
0224E:  MOVFF  FEC,03
02252:  MOVF   FED,F
02254:  MOVFF  FEF,56E
02258:  MOVFF  03,56F
....................               tempd[fa][0] = tempd[fa + 1][0]; 
0225C:  MOVF   x6D,W
0225E:  MULLW  04
02260:  MOVF   FF3,W
02262:  CLRF   x72
02264:  MOVWF  x71
02266:  MOVLW  2B
02268:  ADDWF  x71,W
0226A:  MOVWF  01
0226C:  MOVLW  05
0226E:  ADDWFC x72,W
02270:  MOVWF  03
02272:  MOVWF  x72
02274:  MOVLW  01
02276:  ADDWF  x6D,W
02278:  MULLW  04
0227A:  MOVF   FF3,W
0227C:  CLRF   x74
0227E:  MOVWF  x73
02280:  MOVLW  2B
02282:  ADDWF  x73,W
02284:  MOVWF  FE9
02286:  MOVLW  05
02288:  ADDWFC x74,W
0228A:  MOVWF  FEA
0228C:  MOVFF  FEC,03
02290:  MOVF   FED,F
02292:  MOVFF  FEF,573
02296:  MOVFF  572,FEA
0229A:  MOVFF  01,FE9
0229E:  MOVFF  03,FEC
022A2:  MOVF   FED,F
022A4:  MOVFF  573,FEF
....................               tempd[fa + 1][0] = fl; 
022A8:  MOVLW  01
022AA:  ADDWF  x6D,W
022AC:  MULLW  04
022AE:  MOVF   FF3,W
022B0:  CLRF   x72
022B2:  MOVWF  x71
022B4:  MOVLW  2B
022B6:  ADDWF  x71,W
022B8:  MOVWF  FE9
022BA:  MOVLW  05
022BC:  ADDWFC x72,W
022BE:  MOVWF  FEA
022C0:  MOVFF  56F,FEC
022C4:  MOVF   FED,F
022C6:  MOVFF  56E,FEF
....................               fl = tempd[fa][1]; 
022CA:  MOVF   x6D,W
022CC:  MULLW  04
022CE:  MOVF   FF3,W
022D0:  CLRF   x72
022D2:  MOVWF  x71
022D4:  MOVLW  02
022D6:  ADDWF  x71,W
022D8:  MOVWF  01
022DA:  MOVLW  00
022DC:  ADDWFC x72,W
022DE:  MOVWF  03
022E0:  MOVF   01,W
022E2:  ADDLW  2B
022E4:  MOVWF  FE9
022E6:  MOVLW  05
022E8:  ADDWFC 03,W
022EA:  MOVWF  FEA
022EC:  MOVFF  FEC,03
022F0:  MOVF   FED,F
022F2:  MOVFF  FEF,56E
022F6:  MOVFF  03,56F
....................               tempd[fa][1] = tempd[fa + 1][1]; 
022FA:  MOVF   x6D,W
022FC:  MULLW  04
022FE:  MOVF   FF3,W
02300:  CLRF   x72
02302:  MOVWF  x71
02304:  MOVLW  02
02306:  ADDWF  x71,W
02308:  MOVWF  01
0230A:  MOVLW  00
0230C:  ADDWFC x72,W
0230E:  MOVWF  03
02310:  MOVF   01,W
02312:  ADDLW  2B
02314:  MOVWF  01
02316:  MOVLW  05
02318:  ADDWFC 03,F
0231A:  MOVFF  01,571
0231E:  MOVFF  03,572
02322:  MOVLW  01
02324:  ADDWF  x6D,W
02326:  MULLW  04
02328:  MOVF   FF3,W
0232A:  CLRF   x74
0232C:  MOVWF  x73
0232E:  MOVLW  02
02330:  ADDWF  x73,W
02332:  MOVWF  01
02334:  MOVLW  00
02336:  ADDWFC x74,W
02338:  MOVWF  03
0233A:  MOVF   01,W
0233C:  ADDLW  2B
0233E:  MOVWF  FE9
02340:  MOVLW  05
02342:  ADDWFC 03,W
02344:  MOVWF  FEA
02346:  MOVFF  FEC,03
0234A:  MOVF   FED,F
0234C:  MOVFF  FEF,573
02350:  MOVFF  572,FEA
02354:  MOVFF  571,FE9
02358:  MOVFF  03,FEC
0235C:  MOVF   FED,F
0235E:  MOVFF  573,FEF
....................               tempd[fa + 1][1] = fl; 
02362:  MOVLW  01
02364:  ADDWF  x6D,W
02366:  MULLW  04
02368:  MOVF   FF3,W
0236A:  CLRF   x72
0236C:  MOVWF  x71
0236E:  MOVLW  02
02370:  ADDWF  x71,W
02372:  MOVWF  01
02374:  MOVLW  00
02376:  ADDWFC x72,W
02378:  MOVWF  03
0237A:  MOVF   01,W
0237C:  ADDLW  2B
0237E:  MOVWF  FE9
02380:  MOVLW  05
02382:  ADDWFC 03,W
02384:  MOVWF  FEA
02386:  MOVFF  56F,FEC
0238A:  MOVF   FED,F
0238C:  MOVFF  56E,FEF
....................            } 
....................         } 
02390:  INCF   x6D,F
02392:  BRA    21D4
....................      } 
02394:  BRA    21CC
....................      /* for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0)numluzes = 0;//luzes todas off 
02396:  MOVF   x2B,F
02398:  BNZ   23A2
0239A:  MOVF   x2C,F
0239C:  BNZ   23A2
0239E:  CLRF   x6B
....................      ELSE 
023A0:  BRA    2742
....................      { 
....................         numluzes = 1; 
023A2:  MOVLW  01
023A4:  MOVWF  x6B
....................         afa = 0; 
023A6:  CLRF   x70
....................         IF(actmat) 
023A8:  MOVLB  0
023AA:  BTFSS  xB5.3
023AC:  BRA    23C0
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
023AE:  MOVFF  52C,478
023B2:  MOVFF  52B,477
....................            delays1[0][1] = tempd[0][1]; 
023B6:  MOVFF  52E,47A
023BA:  MOVFF  52D,479
....................         } 
....................  
....................         ELSE 
023BE:  BRA    23D0
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
023C0:  MOVFF  52C,4BC
023C4:  MOVFF  52B,4BB
....................            delays2[0][1] = tempd[0][1]; 
023C8:  MOVFF  52E,4BE
023CC:  MOVFF  52D,4BD
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
023D0:  MOVLW  01
023D2:  MOVLB  5
023D4:  MOVWF  x6D
023D6:  MOVLB  4
023D8:  MOVF   x60,W
023DA:  MOVLB  5
023DC:  SUBWF  x6D,W
023DE:  BTFSC  FD8.0
023E0:  BRA    2742
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
023E2:  MOVF   x6D,W
023E4:  MULLW  04
023E6:  MOVF   FF3,W
023E8:  CLRF   x72
023EA:  MOVWF  x71
023EC:  MOVLW  2B
023EE:  ADDWF  x71,W
023F0:  MOVWF  FE9
023F2:  MOVLW  05
023F4:  ADDWFC x72,W
023F6:  MOVWF  FEA
023F8:  MOVFF  FEC,572
023FC:  MOVF   FED,F
023FE:  MOVFF  FEF,571
02402:  MOVLW  01
02404:  SUBWF  x6D,W
02406:  MULLW  04
02408:  MOVF   FF3,W
0240A:  CLRF   x74
0240C:  MOVWF  x73
0240E:  MOVLW  2B
02410:  ADDWF  x73,W
02412:  MOVWF  FE9
02414:  MOVLW  05
02416:  ADDWFC x74,W
02418:  MOVWF  FEA
0241A:  MOVFF  FEC,03
0241E:  MOVF   FED,F
02420:  MOVF   FEF,W
02422:  SUBWF  x71,W
02424:  BNZ   242C
02426:  MOVF   03,W
02428:  SUBWF  x72,W
0242A:  BZ    2430
0242C:  MOVLW  00
0242E:  BRA    2432
02430:  MOVLW  01
02432:  MOVWF  x71
02434:  MOVF   x6D,W
02436:  MULLW  04
02438:  MOVF   FF3,W
0243A:  CLRF   x73
0243C:  MOVWF  x72
0243E:  MOVLW  2B
02440:  ADDWF  x72,W
02442:  MOVWF  FE9
02444:  MOVLW  05
02446:  ADDWFC x73,W
02448:  MOVWF  FEA
0244A:  MOVF   FEF,F
0244C:  BNZ   2452
0244E:  MOVF   FEC,F
02450:  BZ    2456
02452:  MOVLW  00
02454:  BRA    2458
02456:  MOVLW  01
02458:  XORLW  00
0245A:  BZ    2460
0245C:  MOVLW  00
0245E:  BRA    2462
02460:  MOVLW  01
02462:  ANDWF  x71,W
02464:  BTFSC  FD8.2
02466:  BRA    25A2
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
02468:  MOVLB  0
0246A:  BTFSS  xB5.3
0246C:  BRA    2508
0246E:  MOVLB  5
02470:  MOVF   x70,W
02472:  MULLW  04
02474:  MOVF   FF3,W
02476:  CLRF   x72
02478:  MOVWF  x71
0247A:  MOVLW  02
0247C:  ADDWF  x71,W
0247E:  MOVWF  01
02480:  MOVLW  00
02482:  ADDWFC x72,W
02484:  MOVWF  03
02486:  MOVF   01,W
02488:  ADDLW  77
0248A:  MOVWF  01
0248C:  MOVLW  04
0248E:  ADDWFC 03,F
02490:  MOVFF  01,571
02494:  MOVFF  03,572
02498:  MOVF   x70,W
0249A:  MULLW  04
0249C:  MOVF   FF3,W
0249E:  CLRF   x74
024A0:  MOVWF  x73
024A2:  MOVLW  02
024A4:  ADDWF  x73,W
024A6:  MOVWF  01
024A8:  MOVLW  00
024AA:  ADDWFC x74,W
024AC:  MOVWF  03
024AE:  MOVF   01,W
024B0:  ADDLW  77
024B2:  MOVWF  FE9
024B4:  MOVLW  04
024B6:  ADDWFC 03,W
024B8:  MOVWF  FEA
024BA:  MOVFF  FEC,574
024BE:  MOVF   FED,F
024C0:  MOVFF  FEF,573
024C4:  MOVF   x6D,W
024C6:  MULLW  04
024C8:  MOVF   FF3,W
024CA:  CLRF   x76
024CC:  MOVWF  x75
024CE:  MOVLW  02
024D0:  ADDWF  x75,W
024D2:  MOVWF  01
024D4:  MOVLW  00
024D6:  ADDWFC x76,W
024D8:  MOVWF  03
024DA:  MOVF   01,W
024DC:  ADDLW  2B
024DE:  MOVWF  FE9
024E0:  MOVLW  05
024E2:  ADDWFC 03,W
024E4:  MOVWF  FEA
024E6:  MOVFF  FEC,03
024EA:  MOVF   FED,F
024EC:  MOVF   FEF,W
024EE:  ANDWF  x73,W
024F0:  MOVWF  00
024F2:  MOVF   03,W
024F4:  ANDWF  x74,W
024F6:  MOVFF  572,FEA
024FA:  MOVFF  571,FE9
024FE:  MOVWF  FEC
02500:  MOVF   FED,F
02502:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
02506:  BRA    25A0
02508:  MOVLB  5
0250A:  MOVF   x70,W
0250C:  MULLW  04
0250E:  MOVF   FF3,W
02510:  CLRF   x72
02512:  MOVWF  x71
02514:  MOVLW  02
02516:  ADDWF  x71,W
02518:  MOVWF  01
0251A:  MOVLW  00
0251C:  ADDWFC x72,W
0251E:  MOVWF  03
02520:  MOVF   01,W
02522:  ADDLW  BB
02524:  MOVWF  01
02526:  MOVLW  04
02528:  ADDWFC 03,F
0252A:  MOVFF  01,571
0252E:  MOVFF  03,572
02532:  MOVF   x70,W
02534:  MULLW  04
02536:  MOVF   FF3,W
02538:  CLRF   x74
0253A:  MOVWF  x73
0253C:  MOVLW  02
0253E:  ADDWF  x73,W
02540:  MOVWF  01
02542:  MOVLW  00
02544:  ADDWFC x74,W
02546:  MOVWF  03
02548:  MOVF   01,W
0254A:  ADDLW  BB
0254C:  MOVWF  FE9
0254E:  MOVLW  04
02550:  ADDWFC 03,W
02552:  MOVWF  FEA
02554:  MOVFF  FEC,574
02558:  MOVF   FED,F
0255A:  MOVFF  FEF,573
0255E:  MOVF   x6D,W
02560:  MULLW  04
02562:  MOVF   FF3,W
02564:  CLRF   x76
02566:  MOVWF  x75
02568:  MOVLW  02
0256A:  ADDWF  x75,W
0256C:  MOVWF  01
0256E:  MOVLW  00
02570:  ADDWFC x76,W
02572:  MOVWF  03
02574:  MOVF   01,W
02576:  ADDLW  2B
02578:  MOVWF  FE9
0257A:  MOVLW  05
0257C:  ADDWFC 03,W
0257E:  MOVWF  FEA
02580:  MOVFF  FEC,03
02584:  MOVF   FED,F
02586:  MOVF   FEF,W
02588:  ANDWF  x73,W
0258A:  MOVWF  00
0258C:  MOVF   03,W
0258E:  ANDWF  x74,W
02590:  MOVFF  572,FEA
02594:  MOVFF  571,FE9
02598:  MOVWF  FEC
0259A:  MOVF   FED,F
0259C:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
025A0:  BRA    273E
025A2:  MOVF   x6D,W
025A4:  MULLW  04
025A6:  MOVF   FF3,W
025A8:  CLRF   x72
025AA:  MOVWF  x71
025AC:  MOVLW  2B
025AE:  ADDWF  x71,W
025B0:  MOVWF  FE9
025B2:  MOVLW  05
025B4:  ADDWFC x72,W
025B6:  MOVWF  FEA
025B8:  MOVF   FEF,F
025BA:  BNZ   25C0
025BC:  MOVF   FEC,F
025BE:  BZ    25C4
025C0:  MOVLW  00
025C2:  BRA    25C6
025C4:  MOVLW  01
025C6:  XORLW  00
025C8:  BTFSS  FD8.2
025CA:  BRA    273E
....................            { 
....................               ++afa; 
025CC:  INCF   x70,F
....................               IF(actmat) 
025CE:  MOVLB  0
025D0:  BTFSS  xB5.3
025D2:  BRA    268A
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
025D4:  MOVLB  5
025D6:  MOVF   x70,W
025D8:  MULLW  04
025DA:  MOVF   FF3,W
025DC:  CLRF   x72
025DE:  MOVWF  x71
025E0:  MOVLW  77
025E2:  ADDWF  x71,W
025E4:  MOVWF  01
025E6:  MOVLW  04
025E8:  ADDWFC x72,W
025EA:  MOVWF  03
025EC:  MOVWF  x72
025EE:  MOVF   x6D,W
025F0:  MULLW  04
025F2:  MOVF   FF3,W
025F4:  CLRF   x74
025F6:  MOVWF  x73
025F8:  MOVLW  2B
025FA:  ADDWF  x73,W
025FC:  MOVWF  FE9
025FE:  MOVLW  05
02600:  ADDWFC x74,W
02602:  MOVWF  FEA
02604:  MOVFF  FEC,03
02608:  MOVF   FED,F
0260A:  MOVFF  FEF,573
0260E:  MOVFF  572,FEA
02612:  MOVFF  01,FE9
02616:  MOVFF  03,FEC
0261A:  MOVF   FED,F
0261C:  MOVFF  573,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
02620:  MOVF   x70,W
02622:  MULLW  04
02624:  MOVF   FF3,W
02626:  CLRF   x72
02628:  MOVWF  x71
0262A:  MOVLW  02
0262C:  ADDWF  x71,W
0262E:  MOVWF  01
02630:  MOVLW  00
02632:  ADDWFC x72,W
02634:  MOVWF  03
02636:  MOVF   01,W
02638:  ADDLW  77
0263A:  MOVWF  01
0263C:  MOVLW  04
0263E:  ADDWFC 03,F
02640:  MOVFF  01,571
02644:  MOVFF  03,572
02648:  MOVF   x6D,W
0264A:  MULLW  04
0264C:  MOVF   FF3,W
0264E:  CLRF   x74
02650:  MOVWF  x73
02652:  MOVLW  02
02654:  ADDWF  x73,W
02656:  MOVWF  01
02658:  MOVLW  00
0265A:  ADDWFC x74,W
0265C:  MOVWF  03
0265E:  MOVF   01,W
02660:  ADDLW  2B
02662:  MOVWF  FE9
02664:  MOVLW  05
02666:  ADDWFC 03,W
02668:  MOVWF  FEA
0266A:  MOVFF  FEC,03
0266E:  MOVF   FED,F
02670:  MOVFF  FEF,573
02674:  MOVFF  572,FEA
02678:  MOVFF  571,FE9
0267C:  MOVFF  03,FEC
02680:  MOVF   FED,F
02682:  MOVFF  573,FEF
....................               } 
....................  
....................               ELSE 
02686:  BRA    273C
02688:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
0268A:  MOVLB  5
0268C:  MOVF   x70,W
0268E:  MULLW  04
02690:  MOVF   FF3,W
02692:  CLRF   x72
02694:  MOVWF  x71
02696:  MOVLW  BB
02698:  ADDWF  x71,W
0269A:  MOVWF  01
0269C:  MOVLW  04
0269E:  ADDWFC x72,W
026A0:  MOVWF  03
026A2:  MOVWF  x72
026A4:  MOVF   x6D,W
026A6:  MULLW  04
026A8:  MOVF   FF3,W
026AA:  CLRF   x74
026AC:  MOVWF  x73
026AE:  MOVLW  2B
026B0:  ADDWF  x73,W
026B2:  MOVWF  FE9
026B4:  MOVLW  05
026B6:  ADDWFC x74,W
026B8:  MOVWF  FEA
026BA:  MOVFF  FEC,03
026BE:  MOVF   FED,F
026C0:  MOVFF  FEF,573
026C4:  MOVFF  572,FEA
026C8:  MOVFF  01,FE9
026CC:  MOVFF  03,FEC
026D0:  MOVF   FED,F
026D2:  MOVFF  573,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
026D6:  MOVF   x70,W
026D8:  MULLW  04
026DA:  MOVF   FF3,W
026DC:  CLRF   x72
026DE:  MOVWF  x71
026E0:  MOVLW  02
026E2:  ADDWF  x71,W
026E4:  MOVWF  01
026E6:  MOVLW  00
026E8:  ADDWFC x72,W
026EA:  MOVWF  03
026EC:  MOVF   01,W
026EE:  ADDLW  BB
026F0:  MOVWF  01
026F2:  MOVLW  04
026F4:  ADDWFC 03,F
026F6:  MOVFF  01,571
026FA:  MOVFF  03,572
026FE:  MOVF   x6D,W
02700:  MULLW  04
02702:  MOVF   FF3,W
02704:  CLRF   x74
02706:  MOVWF  x73
02708:  MOVLW  02
0270A:  ADDWF  x73,W
0270C:  MOVWF  01
0270E:  MOVLW  00
02710:  ADDWFC x74,W
02712:  MOVWF  03
02714:  MOVF   01,W
02716:  ADDLW  2B
02718:  MOVWF  FE9
0271A:  MOVLW  05
0271C:  ADDWFC 03,W
0271E:  MOVWF  FEA
02720:  MOVFF  FEC,03
02724:  MOVF   FED,F
02726:  MOVFF  FEF,573
0272A:  MOVFF  572,FEA
0272E:  MOVFF  571,FE9
02732:  MOVFF  03,FEC
02736:  MOVF   FED,F
02738:  MOVFF  573,FEF
....................               } 
....................                //printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
0273C:  INCF   x6B,F
....................            } 
....................         } 
0273E:  INCF   x6D,F
02740:  BRA    23D6
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
02742:  MOVLB  0
02744:  BTFSS  xB5.3
02746:  BRA    2752
02748:  MOVLB  4
0274A:  CLRF   xB8
0274C:  MOVFF  56B,4B7
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
02750:  BRA    275A
02752:  MOVLB  4
02754:  CLRF   xFC
02756:  MOVFF  56B,4FB
....................     // printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................       
....................      organizado=1; 
0275A:  MOVLB  0
0275C:  BSF    xB5.2
....................   } 
0275E:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
02760:  MOVLB  4
02762:  CLRF   xB8
02764:  CLRF   xB7
....................    delays2[N_LUZES][0]=0; 
02766:  CLRF   xFC
02768:  CLRF   xFB
....................    portc=0xFF; 
0276A:  MOVLW  FF
0276C:  MOVWF  F82
....................    portd=0xFF; 
0276E:  MOVWF  F83
....................    trisc=0x00; //tudo saidas 
02770:  CLRF   F94
....................    trisd=0x00; //tudo saidas 
02772:  CLRF   F95
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
02774:  MOVLB  5
02776:  CLRF   x29
02778:  MOVLB  1
0277A:  MOVF   x3F,W
0277C:  MOVLB  5
0277E:  SUBWF  x29,W
02780:  BTFSC  FD8.0
02782:  BRA    28AC
02784:  CLRF   1B
02786:  BTFSC  FF2.7
02788:  BSF    1B.7
0278A:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
0278C:  CLRF   x79
0278E:  MOVFF  529,578
02792:  CLRF   x7B
02794:  MOVLW  2F
02796:  MOVWF  x7A
02798:  MOVLB  0
0279A:  CALL   02F0
0279E:  BTFSC  1B.7
027A0:  BSF    FF2.7
027A2:  MOVFF  02,03
027A6:  MOVF   01,W
027A8:  ADDLW  8A
027AA:  MOVWF  01
027AC:  MOVLW  02
027AE:  ADDWFC 03,F
027B0:  MOVFF  01,FE9
027B4:  MOVFF  03,FEA
027B8:  MOVF   FEF,W
027BA:  XORLW  01
027BC:  BZ    27C0
027BE:  BRA    28A6
....................          case dimmer: 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
027C0:  BCF    FD8.0
027C2:  MOVLB  4
027C4:  RLCF   x60,W
027C6:  CLRF   03
027C8:  ADDLW  FF
027CA:  MOVWF  01
027CC:  MOVLW  04
027CE:  ADDWFC 03,F
027D0:  MOVFF  01,52A
027D4:  MOVLB  5
027D6:  MOVFF  03,52B
027DA:  CLRF   1B
027DC:  BTFSC  FF2.7
027DE:  BSF    1B.7
027E0:  BCF    FF2.7
027E2:  CLRF   x79
027E4:  MOVFF  529,578
027E8:  CLRF   x7B
027EA:  MOVLW  2F
027EC:  MOVWF  x7A
027EE:  MOVLB  0
027F0:  CALL   02F0
027F4:  BTFSC  1B.7
027F6:  BSF    FF2.7
027F8:  MOVF   01,W
027FA:  ADDLW  4C
027FC:  MOVLB  5
027FE:  MOVWF  x2C
02800:  MOVLW  01
02802:  ADDWFC 02,W
02804:  MOVWF  x2D
02806:  MOVLW  01
02808:  ADDWF  x2C,W
0280A:  MOVWF  01
0280C:  MOVLW  00
0280E:  ADDWFC x2D,W
02810:  MOVWF  03
02812:  MOVF   01,W
02814:  ADDLW  3E
02816:  MOVWF  01
02818:  MOVLW  01
0281A:  ADDWFC 03,F
0281C:  MOVF   01,W
0281E:  ADDLW  1F
02820:  MOVWF  FE9
02822:  MOVLW  00
02824:  ADDWFC 03,W
02826:  MOVWF  FEA
02828:  BCF    FD8.0
0282A:  RLCF   FEF,W
0282C:  CLRF   03
0282E:  MOVLB  0
02830:  CALL   0172
02834:  TBLRD*+
02836:  MOVFF  FF5,03
0283A:  MOVLB  5
0283C:  MOVFF  52B,FEA
02840:  MOVFF  52A,FE9
02844:  MOVFF  03,FEC
02848:  MOVF   FED,F
0284A:  MOVWF  FEF
0284C:  CLRF   1B
0284E:  BTFSC  FF2.7
02850:  BSF    1B.7
02852:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
02854:  CLRF   x79
02856:  MOVFF  529,578
0285A:  CLRF   x7B
0285C:  MOVLW  2F
0285E:  MOVWF  x7A
02860:  MOVLB  0
02862:  CALL   02F0
02866:  BTFSC  1B.7
02868:  BSF    FF2.7
0286A:  MOVF   01,W
0286C:  ADDLW  4C
0286E:  MOVLB  5
02870:  MOVWF  x2A
02872:  MOVLW  01
02874:  ADDWFC 02,W
02876:  MOVWF  x2B
02878:  MOVLW  01
0287A:  ADDWF  x2A,W
0287C:  MOVWF  01
0287E:  MOVLW  00
02880:  ADDWFC x2B,W
02882:  MOVWF  03
02884:  MOVF   01,W
02886:  ADDLW  3E
02888:  MOVWF  01
0288A:  MOVLW  01
0288C:  ADDWFC 03,F
0288E:  MOVF   01,W
02890:  ADDLW  20
02892:  MOVWF  FE9
02894:  MOVLW  00
02896:  ADDWFC 03,W
02898:  MOVWF  FEA
0289A:  MOVFF  460,FEF
....................             ++used_dimmers;           
0289E:  MOVLB  4
028A0:  INCF   x60,F
....................          break; 
028A2:  MOVLB  0
028A4:  BRA    28A6
....................       } 
....................    } 
028A6:  MOVLB  5
028A8:  INCF   x29,F
028AA:  BRA    2778
....................    if(used_dimmers>0) 
028AC:  MOVLB  4
028AE:  MOVF   x60,F
028B0:  BZ    28D6
....................    { 
....................    actmat=0; 
028B2:  MOVLB  0
028B4:  BCF    xB5.3
....................    pointer=delays1; 
028B6:  MOVLW  04
028B8:  MOVLB  4
028BA:  MOVWF  x62
028BC:  MOVLW  77
028BE:  MOVWF  x61
....................    org(); 
028C0:  MOVLB  0
028C2:  RCALL  212C
....................    pointer=delays2; 
028C4:  MOVLW  04
028C6:  MOVLB  4
028C8:  MOVWF  x62
028CA:  MOVLW  BB
028CC:  MOVWF  x61
....................    actmat=1; 
028CE:  MOVLB  0
028D0:  BSF    xB5.3
....................    org(); 
028D2:  RCALL  212C
028D4:  MOVLB  4
....................    } 
.................... } 
028D6:  MOVLB  0
028D8:  GOTO   69CC (RETURN)
....................  
.................... void write_outputs() 
.................... { 
*
0294C:  MOVLB  5
0294E:  BCF    x2A.0
....................    int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
02950:  CLRF   x29
02952:  MOVLB  1
02954:  MOVF   x3F,W
02956:  MOVLB  5
02958:  SUBWF  x29,W
0295A:  BTFSC  FD8.0
0295C:  GOTO   3CB0
02960:  CLRF   1B
02962:  BTFSC  FF2.7
02964:  BSF    1B.7
02966:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
02968:  CLRF   x79
0296A:  MOVFF  529,578
0296E:  CLRF   x7B
02970:  MOVLW  2F
02972:  MOVWF  x7A
02974:  MOVLB  0
02976:  CALL   02F0
0297A:  BTFSC  1B.7
0297C:  BSF    FF2.7
0297E:  MOVFF  02,03
02982:  MOVF   01,W
02984:  ADDLW  8A
02986:  MOVWF  01
02988:  MOVLW  02
0298A:  ADDWFC 03,F
0298C:  MOVFF  01,FE9
02990:  MOVFF  03,FEA
02994:  MOVF   FEF,W
02996:  XORLW  01
02998:  BZ    29AC
0299A:  XORLW  01
0299C:  BTFSC  FD8.2
0299E:  BRA    2F18
029A0:  XORLW  02
029A2:  BTFSC  FD8.2
029A4:  GOTO   31E8
029A8:  GOTO   3CA6
....................          case dimmer: 
029AC:  CLRF   1B
029AE:  BTFSC  FF2.7
029B0:  BSF    1B.7
029B2:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
029B4:  MOVLB  5
029B6:  CLRF   x79
029B8:  MOVFF  529,578
029BC:  CLRF   x7B
029BE:  MOVLW  2F
029C0:  MOVWF  x7A
029C2:  MOVLB  0
029C4:  CALL   02F0
029C8:  BTFSC  1B.7
029CA:  BSF    FF2.7
029CC:  MOVF   01,W
029CE:  ADDLW  4C
029D0:  MOVLB  5
029D2:  MOVWF  x2B
029D4:  MOVLW  01
029D6:  ADDWFC 02,W
029D8:  MOVWF  x2C
029DA:  MOVLW  01
029DC:  ADDWF  x2B,W
029DE:  MOVWF  01
029E0:  MOVLW  00
029E2:  ADDWFC x2C,W
029E4:  MOVWF  03
029E6:  MOVF   01,W
029E8:  ADDLW  3E
029EA:  MOVWF  01
029EC:  MOVLW  01
029EE:  ADDWFC 03,F
029F0:  MOVF   01,W
029F2:  ADDLW  1D
029F4:  MOVWF  FE9
029F6:  MOVLW  00
029F8:  ADDWFC 03,W
029FA:  MOVWF  FEA
029FC:  BTFSS  FEF.0
029FE:  BRA    2B64
02A00:  CLRF   1B
02A02:  BTFSC  FF2.7
02A04:  BSF    1B.7
02A06:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
02A08:  CLRF   x79
02A0A:  MOVFF  529,578
02A0E:  CLRF   x7B
02A10:  MOVLW  2F
02A12:  MOVWF  x7A
02A14:  MOVLB  0
02A16:  CALL   02F0
02A1A:  BTFSC  1B.7
02A1C:  BSF    FF2.7
02A1E:  MOVF   01,W
02A20:  ADDLW  4C
02A22:  MOVLB  5
02A24:  MOVWF  x2B
02A26:  MOVLW  01
02A28:  ADDWFC 02,W
02A2A:  MOVWF  x2C
02A2C:  MOVLW  01
02A2E:  ADDWF  x2B,W
02A30:  MOVWF  01
02A32:  MOVLW  00
02A34:  ADDWFC x2C,W
02A36:  MOVWF  03
02A38:  MOVF   01,W
02A3A:  ADDLW  3E
02A3C:  MOVWF  01
02A3E:  MOVLW  01
02A40:  ADDWFC 03,F
02A42:  MOVF   01,W
02A44:  ADDLW  1E
02A46:  MOVWF  FE9
02A48:  MOVLW  00
02A4A:  ADDWFC 03,W
02A4C:  MOVWF  FEA
02A4E:  MOVF   FEF,F
02A50:  BNZ   2B14
02A52:  CLRF   1B
02A54:  BTFSC  FF2.7
02A56:  BSF    1B.7
02A58:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
02A5A:  CLRF   x79
02A5C:  MOVFF  529,578
02A60:  CLRF   x7B
02A62:  MOVLW  2F
02A64:  MOVWF  x7A
02A66:  MOVLB  0
02A68:  CALL   02F0
02A6C:  BTFSC  1B.7
02A6E:  BSF    FF2.7
02A70:  MOVF   01,W
02A72:  ADDLW  4C
02A74:  MOVLB  5
02A76:  MOVWF  x2B
02A78:  MOVLW  01
02A7A:  ADDWFC 02,W
02A7C:  MOVWF  x2C
02A7E:  MOVLW  01
02A80:  ADDWF  x2B,W
02A82:  MOVWF  01
02A84:  MOVLW  00
02A86:  ADDWFC x2C,W
02A88:  MOVWF  03
02A8A:  MOVF   01,W
02A8C:  ADDLW  3E
02A8E:  MOVWF  01
02A90:  MOVLW  01
02A92:  ADDWFC 03,F
02A94:  MOVF   01,W
02A96:  ADDLW  20
02A98:  MOVWF  FE9
02A9A:  MOVLW  00
02A9C:  ADDWFC 03,W
02A9E:  MOVWF  FEA
02AA0:  CLRF   03
02AA2:  MOVF   FEF,W
02AA4:  ADDLW  67
02AA6:  MOVWF  01
02AA8:  MOVLW  04
02AAA:  ADDWFC 03,F
02AAC:  MOVFF  01,52D
02AB0:  MOVFF  03,52E
02AB4:  CLRF   1B
02AB6:  BTFSC  FF2.7
02AB8:  BSF    1B.7
02ABA:  BCF    FF2.7
02ABC:  CLRF   x79
02ABE:  MOVFF  529,578
02AC2:  CLRF   x7B
02AC4:  MOVLW  2F
02AC6:  MOVWF  x7A
02AC8:  MOVLB  0
02ACA:  CALL   02F0
02ACE:  BTFSC  1B.7
02AD0:  BSF    FF2.7
02AD2:  MOVF   01,W
02AD4:  ADDLW  4C
02AD6:  MOVLB  5
02AD8:  MOVWF  x2F
02ADA:  MOVLW  01
02ADC:  ADDWFC 02,W
02ADE:  MOVWF  x30
02AE0:  MOVLW  01
02AE2:  ADDWF  x2F,W
02AE4:  MOVWF  01
02AE6:  MOVLW  00
02AE8:  ADDWFC x30,W
02AEA:  MOVWF  03
02AEC:  MOVF   01,W
02AEE:  ADDLW  3E
02AF0:  MOVWF  01
02AF2:  MOVLW  01
02AF4:  ADDWFC 03,F
02AF6:  MOVF   01,W
02AF8:  ADDLW  1C
02AFA:  MOVWF  FE9
02AFC:  MOVLW  00
02AFE:  ADDWFC 03,W
02B00:  MOVWF  FEA
02B02:  MOVFF  FEF,531
02B06:  MOVFF  52E,FEA
02B0A:  MOVFF  52D,FE9
02B0E:  MOVFF  531,FEF
....................                   update_dimmers=true; 
02B12:  BSF    x2A.0
02B14:  CLRF   1B
02B16:  BTFSC  FF2.7
02B18:  BSF    1B.7
02B1A:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
02B1C:  CLRF   x79
02B1E:  MOVFF  529,578
02B22:  CLRF   x7B
02B24:  MOVLW  2F
02B26:  MOVWF  x7A
02B28:  MOVLB  0
02B2A:  CALL   02F0
02B2E:  BTFSC  1B.7
02B30:  BSF    FF2.7
02B32:  MOVF   01,W
02B34:  ADDLW  4C
02B36:  MOVLB  5
02B38:  MOVWF  x2B
02B3A:  MOVLW  01
02B3C:  ADDWFC 02,W
02B3E:  MOVWF  x2C
02B40:  MOVLW  01
02B42:  ADDWF  x2B,W
02B44:  MOVWF  01
02B46:  MOVLW  00
02B48:  ADDWFC x2C,W
02B4A:  MOVWF  03
02B4C:  MOVF   01,W
02B4E:  ADDLW  3E
02B50:  MOVWF  01
02B52:  MOVLW  01
02B54:  ADDWFC 03,F
02B56:  MOVF   01,W
02B58:  ADDLW  1D
02B5A:  MOVWF  FE9
02B5C:  MOVLW  00
02B5E:  ADDWFC 03,W
02B60:  MOVWF  FEA
02B62:  BCF    FEF.0
02B64:  CLRF   1B
02B66:  BTFSC  FF2.7
02B68:  BSF    1B.7
02B6A:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
02B6C:  CLRF   x79
02B6E:  MOVFF  529,578
02B72:  CLRF   x7B
02B74:  MOVLW  2F
02B76:  MOVWF  x7A
02B78:  MOVLB  0
02B7A:  CALL   02F0
02B7E:  BTFSC  1B.7
02B80:  BSF    FF2.7
02B82:  MOVF   01,W
02B84:  ADDLW  4C
02B86:  MOVLB  5
02B88:  MOVWF  x2B
02B8A:  MOVLW  01
02B8C:  ADDWFC 02,W
02B8E:  MOVWF  x2C
02B90:  MOVLW  01
02B92:  ADDWF  x2B,W
02B94:  MOVWF  01
02B96:  MOVLW  00
02B98:  ADDWFC x2C,W
02B9A:  MOVWF  03
02B9C:  MOVF   01,W
02B9E:  ADDLW  3E
02BA0:  MOVWF  01
02BA2:  MOVLW  01
02BA4:  ADDWFC 03,F
02BA6:  MOVF   01,W
02BA8:  ADDLW  13
02BAA:  MOVWF  FE9
02BAC:  MOVLW  00
02BAE:  ADDWFC 03,W
02BB0:  MOVWF  FEA
02BB2:  BTFSS  FEF.0
02BB4:  BRA    2D0A
02BB6:  CLRF   1B
02BB8:  BTFSC  FF2.7
02BBA:  BSF    1B.7
02BBC:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
02BBE:  CLRF   x79
02BC0:  MOVFF  529,578
02BC4:  CLRF   x7B
02BC6:  MOVLW  2F
02BC8:  MOVWF  x7A
02BCA:  MOVLB  0
02BCC:  CALL   02F0
02BD0:  BTFSC  1B.7
02BD2:  BSF    FF2.7
02BD4:  MOVF   01,W
02BD6:  ADDLW  4C
02BD8:  MOVLB  5
02BDA:  MOVWF  x2B
02BDC:  MOVLW  01
02BDE:  ADDWFC 02,W
02BE0:  MOVWF  x2C
02BE2:  MOVLW  01
02BE4:  ADDWF  x2B,W
02BE6:  MOVWF  01
02BE8:  MOVLW  00
02BEA:  ADDWFC x2C,W
02BEC:  MOVWF  03
02BEE:  MOVF   01,W
02BF0:  ADDLW  3E
02BF2:  MOVWF  01
02BF4:  MOVLW  01
02BF6:  ADDWFC 03,F
02BF8:  MOVF   01,W
02BFA:  ADDLW  12
02BFC:  MOVWF  FE9
02BFE:  MOVLW  00
02C00:  ADDWFC 03,W
02C02:  MOVWF  FEA
02C04:  MOVF   FEF,F
02C06:  BZ    2CBA
02C08:  CLRF   1B
02C0A:  BTFSC  FF2.7
02C0C:  BSF    1B.7
02C0E:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
02C10:  CLRF   x79
02C12:  MOVFF  529,578
02C16:  CLRF   x7B
02C18:  MOVLW  2F
02C1A:  MOVWF  x7A
02C1C:  MOVLB  0
02C1E:  CALL   02F0
02C22:  BTFSC  1B.7
02C24:  BSF    FF2.7
02C26:  MOVF   01,W
02C28:  ADDLW  4C
02C2A:  MOVLB  5
02C2C:  MOVWF  x2B
02C2E:  MOVLW  01
02C30:  ADDWFC 02,W
02C32:  MOVWF  x2C
02C34:  MOVLW  01
02C36:  ADDWF  x2B,W
02C38:  MOVWF  01
02C3A:  MOVLW  00
02C3C:  ADDWFC x2C,W
02C3E:  MOVWF  03
02C40:  MOVF   01,W
02C42:  ADDLW  3E
02C44:  MOVWF  01
02C46:  MOVLW  01
02C48:  ADDWFC 03,F
02C4A:  MOVF   01,W
02C4C:  ADDLW  1E
02C4E:  MOVWF  FE9
02C50:  MOVLW  00
02C52:  ADDWFC 03,W
02C54:  MOVWF  FEA
02C56:  MOVLW  01
02C58:  MOVWF  FEF
02C5A:  CLRF   1B
02C5C:  BTFSC  FF2.7
02C5E:  BSF    1B.7
02C60:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
02C62:  CLRF   x79
02C64:  MOVFF  529,578
02C68:  CLRF   x7B
02C6A:  MOVLW  2F
02C6C:  MOVWF  x7A
02C6E:  MOVLB  0
02C70:  CALL   02F0
02C74:  BTFSC  1B.7
02C76:  BSF    FF2.7
02C78:  MOVF   01,W
02C7A:  ADDLW  4C
02C7C:  MOVLB  5
02C7E:  MOVWF  x2B
02C80:  MOVLW  01
02C82:  ADDWFC 02,W
02C84:  MOVWF  x2C
02C86:  MOVLW  01
02C88:  ADDWF  x2B,W
02C8A:  MOVWF  01
02C8C:  MOVLW  00
02C8E:  ADDWFC x2C,W
02C90:  MOVWF  03
02C92:  MOVF   01,W
02C94:  ADDLW  3E
02C96:  MOVWF  01
02C98:  MOVLW  01
02C9A:  ADDWFC 03,F
02C9C:  MOVF   01,W
02C9E:  ADDLW  20
02CA0:  MOVWF  FE9
02CA2:  MOVLW  00
02CA4:  ADDWFC 03,W
02CA6:  MOVWF  FEA
02CA8:  CLRF   03
02CAA:  MOVF   FEF,W
02CAC:  ADDLW  67
02CAE:  MOVWF  FE9
02CB0:  MOVLW  04
02CB2:  ADDWFC 03,W
02CB4:  MOVWF  FEA
02CB6:  CLRF   FEF
....................                   update_dimmers=true; 
02CB8:  BSF    x2A.0
02CBA:  CLRF   1B
02CBC:  BTFSC  FF2.7
02CBE:  BSF    1B.7
02CC0:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
02CC2:  CLRF   x79
02CC4:  MOVFF  529,578
02CC8:  CLRF   x7B
02CCA:  MOVLW  2F
02CCC:  MOVWF  x7A
02CCE:  MOVLB  0
02CD0:  CALL   02F0
02CD4:  BTFSC  1B.7
02CD6:  BSF    FF2.7
02CD8:  MOVF   01,W
02CDA:  ADDLW  4C
02CDC:  MOVLB  5
02CDE:  MOVWF  x2B
02CE0:  MOVLW  01
02CE2:  ADDWFC 02,W
02CE4:  MOVWF  x2C
02CE6:  MOVLW  01
02CE8:  ADDWF  x2B,W
02CEA:  MOVWF  01
02CEC:  MOVLW  00
02CEE:  ADDWFC x2C,W
02CF0:  MOVWF  03
02CF2:  MOVF   01,W
02CF4:  ADDLW  3E
02CF6:  MOVWF  01
02CF8:  MOVLW  01
02CFA:  ADDWFC 03,F
02CFC:  MOVF   01,W
02CFE:  ADDLW  13
02D00:  MOVWF  FE9
02D02:  MOVLW  00
02D04:  ADDWFC 03,W
02D06:  MOVWF  FEA
02D08:  BCF    FEF.0
02D0A:  CLRF   1B
02D0C:  BTFSC  FF2.7
02D0E:  BSF    1B.7
02D10:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
02D12:  CLRF   x79
02D14:  MOVFF  529,578
02D18:  CLRF   x7B
02D1A:  MOVLW  2F
02D1C:  MOVWF  x7A
02D1E:  MOVLB  0
02D20:  CALL   02F0
02D24:  BTFSC  1B.7
02D26:  BSF    FF2.7
02D28:  MOVF   01,W
02D2A:  ADDLW  4C
02D2C:  MOVLB  5
02D2E:  MOVWF  x2B
02D30:  MOVLW  01
02D32:  ADDWFC 02,W
02D34:  MOVWF  x2C
02D36:  MOVLW  01
02D38:  ADDWF  x2B,W
02D3A:  MOVWF  01
02D3C:  MOVLW  00
02D3E:  ADDWFC x2C,W
02D40:  MOVWF  03
02D42:  MOVF   01,W
02D44:  ADDLW  3E
02D46:  MOVWF  01
02D48:  MOVLW  01
02D4A:  ADDWFC 03,F
02D4C:  MOVF   01,W
02D4E:  ADDLW  09
02D50:  MOVWF  FE9
02D52:  MOVLW  00
02D54:  ADDWFC 03,W
02D56:  MOVWF  FEA
02D58:  BTFSS  FEF.0
02D5A:  BRA    2F12
02D5C:  CLRF   1B
02D5E:  BTFSC  FF2.7
02D60:  BSF    1B.7
02D62:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
02D64:  CLRF   x79
02D66:  MOVFF  529,578
02D6A:  CLRF   x7B
02D6C:  MOVLW  2F
02D6E:  MOVWF  x7A
02D70:  MOVLB  0
02D72:  CALL   02F0
02D76:  BTFSC  1B.7
02D78:  BSF    FF2.7
02D7A:  MOVF   01,W
02D7C:  ADDLW  4C
02D7E:  MOVLB  5
02D80:  MOVWF  x2B
02D82:  MOVLW  01
02D84:  ADDWFC 02,W
02D86:  MOVWF  x2C
02D88:  MOVLW  01
02D8A:  ADDWF  x2B,W
02D8C:  MOVWF  01
02D8E:  MOVLW  00
02D90:  ADDWFC x2C,W
02D92:  MOVWF  03
02D94:  MOVF   01,W
02D96:  ADDLW  3E
02D98:  MOVWF  01
02D9A:  MOVLW  01
02D9C:  ADDWFC 03,F
02D9E:  MOVF   01,W
02DA0:  ADDLW  08
02DA2:  MOVWF  FE9
02DA4:  MOVLW  00
02DA6:  ADDWFC 03,W
02DA8:  MOVWF  FEA
02DAA:  MOVF   FEF,F
02DAC:  BTFSC  FD8.2
02DAE:  BRA    2EC2
02DB0:  CLRF   1B
02DB2:  BTFSC  FF2.7
02DB4:  BSF    1B.7
02DB6:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
02DB8:  CLRF   x79
02DBA:  MOVFF  529,578
02DBE:  CLRF   x7B
02DC0:  MOVLW  2F
02DC2:  MOVWF  x7A
02DC4:  MOVLB  0
02DC6:  CALL   02F0
02DCA:  BTFSC  1B.7
02DCC:  BSF    FF2.7
02DCE:  MOVF   01,W
02DD0:  ADDLW  4C
02DD2:  MOVLB  5
02DD4:  MOVWF  x2B
02DD6:  MOVLW  01
02DD8:  ADDWFC 02,W
02DDA:  MOVWF  x2C
02DDC:  MOVLW  01
02DDE:  ADDWF  x2B,W
02DE0:  MOVWF  01
02DE2:  MOVLW  00
02DE4:  ADDWFC x2C,W
02DE6:  MOVWF  03
02DE8:  MOVF   01,W
02DEA:  ADDLW  3E
02DEC:  MOVWF  01
02DEE:  MOVLW  01
02DF0:  ADDWFC 03,F
02DF2:  MOVF   01,W
02DF4:  ADDLW  1E
02DF6:  MOVWF  FE9
02DF8:  MOVLW  00
02DFA:  ADDWFC 03,W
02DFC:  MOVWF  FEA
02DFE:  CLRF   FEF
02E00:  CLRF   1B
02E02:  BTFSC  FF2.7
02E04:  BSF    1B.7
02E06:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
02E08:  CLRF   x79
02E0A:  MOVFF  529,578
02E0E:  CLRF   x7B
02E10:  MOVLW  2F
02E12:  MOVWF  x7A
02E14:  MOVLB  0
02E16:  CALL   02F0
02E1A:  BTFSC  1B.7
02E1C:  BSF    FF2.7
02E1E:  MOVF   01,W
02E20:  ADDLW  4C
02E22:  MOVLB  5
02E24:  MOVWF  x2B
02E26:  MOVLW  01
02E28:  ADDWFC 02,W
02E2A:  MOVWF  x2C
02E2C:  MOVLW  01
02E2E:  ADDWF  x2B,W
02E30:  MOVWF  01
02E32:  MOVLW  00
02E34:  ADDWFC x2C,W
02E36:  MOVWF  03
02E38:  MOVF   01,W
02E3A:  ADDLW  3E
02E3C:  MOVWF  01
02E3E:  MOVLW  01
02E40:  ADDWFC 03,F
02E42:  MOVF   01,W
02E44:  ADDLW  20
02E46:  MOVWF  FE9
02E48:  MOVLW  00
02E4A:  ADDWFC 03,W
02E4C:  MOVWF  FEA
02E4E:  CLRF   03
02E50:  MOVF   FEF,W
02E52:  ADDLW  67
02E54:  MOVWF  01
02E56:  MOVLW  04
02E58:  ADDWFC 03,F
02E5A:  MOVFF  01,52D
02E5E:  MOVFF  03,52E
02E62:  CLRF   1B
02E64:  BTFSC  FF2.7
02E66:  BSF    1B.7
02E68:  BCF    FF2.7
02E6A:  CLRF   x79
02E6C:  MOVFF  529,578
02E70:  CLRF   x7B
02E72:  MOVLW  2F
02E74:  MOVWF  x7A
02E76:  MOVLB  0
02E78:  CALL   02F0
02E7C:  BTFSC  1B.7
02E7E:  BSF    FF2.7
02E80:  MOVF   01,W
02E82:  ADDLW  4C
02E84:  MOVLB  5
02E86:  MOVWF  x2F
02E88:  MOVLW  01
02E8A:  ADDWFC 02,W
02E8C:  MOVWF  x30
02E8E:  MOVLW  01
02E90:  ADDWF  x2F,W
02E92:  MOVWF  01
02E94:  MOVLW  00
02E96:  ADDWFC x30,W
02E98:  MOVWF  03
02E9A:  MOVF   01,W
02E9C:  ADDLW  3E
02E9E:  MOVWF  01
02EA0:  MOVLW  01
02EA2:  ADDWFC 03,F
02EA4:  MOVF   01,W
02EA6:  ADDLW  1C
02EA8:  MOVWF  FE9
02EAA:  MOVLW  00
02EAC:  ADDWFC 03,W
02EAE:  MOVWF  FEA
02EB0:  MOVFF  FEF,531
02EB4:  MOVFF  52E,FEA
02EB8:  MOVFF  52D,FE9
02EBC:  MOVFF  531,FEF
....................                   update_dimmers=true; 
02EC0:  BSF    x2A.0
02EC2:  CLRF   1B
02EC4:  BTFSC  FF2.7
02EC6:  BSF    1B.7
02EC8:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
02ECA:  CLRF   x79
02ECC:  MOVFF  529,578
02ED0:  CLRF   x7B
02ED2:  MOVLW  2F
02ED4:  MOVWF  x7A
02ED6:  MOVLB  0
02ED8:  CALL   02F0
02EDC:  BTFSC  1B.7
02EDE:  BSF    FF2.7
02EE0:  MOVF   01,W
02EE2:  ADDLW  4C
02EE4:  MOVLB  5
02EE6:  MOVWF  x2B
02EE8:  MOVLW  01
02EEA:  ADDWFC 02,W
02EEC:  MOVWF  x2C
02EEE:  MOVLW  01
02EF0:  ADDWF  x2B,W
02EF2:  MOVWF  01
02EF4:  MOVLW  00
02EF6:  ADDWFC x2C,W
02EF8:  MOVWF  03
02EFA:  MOVF   01,W
02EFC:  ADDLW  3E
02EFE:  MOVWF  01
02F00:  MOVLW  01
02F02:  ADDWFC 03,F
02F04:  MOVF   01,W
02F06:  ADDLW  09
02F08:  MOVWF  FE9
02F0A:  MOVLW  00
02F0C:  ADDWFC 03,W
02F0E:  MOVWF  FEA
02F10:  BCF    FEF.0
....................             } 
....................          break; 
02F12:  MOVLB  0
02F14:  GOTO   3CA6
....................          case _on_off: 
02F18:  CLRF   1B
02F1A:  BTFSC  FF2.7
02F1C:  BSF    1B.7
02F1E:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
02F20:  MOVLB  5
02F22:  CLRF   x79
02F24:  MOVFF  529,578
02F28:  CLRF   x7B
02F2A:  MOVLW  2F
02F2C:  MOVWF  x7A
02F2E:  MOVLB  0
02F30:  CALL   02F0
02F34:  BTFSC  1B.7
02F36:  BSF    FF2.7
02F38:  MOVF   01,W
02F3A:  ADDLW  4C
02F3C:  MOVLB  5
02F3E:  MOVWF  x2B
02F40:  MOVLW  01
02F42:  ADDWFC 02,W
02F44:  MOVWF  x2C
02F46:  MOVLW  01
02F48:  ADDWF  x2B,W
02F4A:  MOVWF  01
02F4C:  MOVLW  00
02F4E:  ADDWFC x2C,W
02F50:  MOVWF  03
02F52:  MOVF   01,W
02F54:  ADDLW  3E
02F56:  MOVWF  01
02F58:  MOVLW  01
02F5A:  ADDWFC 03,F
02F5C:  MOVF   01,W
02F5E:  ADDLW  13
02F60:  MOVWF  FE9
02F62:  MOVLW  00
02F64:  ADDWFC 03,W
02F66:  MOVWF  FEA
02F68:  BTFSS  FEF.0
02F6A:  BRA    3084
02F6C:  CLRF   1B
02F6E:  BTFSC  FF2.7
02F70:  BSF    1B.7
02F72:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
02F74:  CLRF   x79
02F76:  MOVFF  529,578
02F7A:  CLRF   x7B
02F7C:  MOVLW  2F
02F7E:  MOVWF  x7A
02F80:  MOVLB  0
02F82:  CALL   02F0
02F86:  BTFSC  1B.7
02F88:  BSF    FF2.7
02F8A:  MOVF   01,W
02F8C:  ADDLW  4C
02F8E:  MOVLB  5
02F90:  MOVWF  x2B
02F92:  MOVLW  01
02F94:  ADDWFC 02,W
02F96:  MOVWF  x2C
02F98:  MOVLW  01
02F9A:  ADDWF  x2B,W
02F9C:  MOVWF  01
02F9E:  MOVLW  00
02FA0:  ADDWFC x2C,W
02FA2:  MOVWF  03
02FA4:  MOVF   01,W
02FA6:  ADDLW  3E
02FA8:  MOVWF  01
02FAA:  MOVLW  01
02FAC:  ADDWFC 03,F
02FAE:  MOVF   01,W
02FB0:  ADDLW  12
02FB2:  MOVWF  FE9
02FB4:  MOVLW  00
02FB6:  ADDWFC 03,W
02FB8:  MOVWF  FEA
02FBA:  MOVF   FEF,F
02FBC:  BZ    3034
02FBE:  CLRF   1B
02FC0:  BTFSC  FF2.7
02FC2:  BSF    1B.7
02FC4:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
02FC6:  CLRF   x79
02FC8:  MOVFF  529,578
02FCC:  CLRF   x7B
02FCE:  MOVLW  2F
02FD0:  MOVWF  x7A
02FD2:  MOVLB  0
02FD4:  CALL   02F0
02FD8:  BTFSC  1B.7
02FDA:  BSF    FF2.7
02FDC:  MOVF   01,W
02FDE:  ADDLW  4C
02FE0:  MOVLB  5
02FE2:  MOVWF  x2B
02FE4:  MOVLW  01
02FE6:  ADDWFC 02,W
02FE8:  MOVWF  x2C
02FEA:  MOVLW  01
02FEC:  ADDWF  x2B,W
02FEE:  MOVWF  01
02FF0:  MOVLW  00
02FF2:  ADDWFC x2C,W
02FF4:  MOVWF  03
02FF6:  MOVF   01,W
02FF8:  ADDLW  3E
02FFA:  MOVWF  01
02FFC:  MOVLW  01
02FFE:  ADDWFC 03,F
03000:  MOVF   01,W
03002:  ADDLW  14
03004:  MOVWF  FE9
03006:  MOVLW  00
03008:  ADDWFC 03,W
0300A:  MOVWF  FEA
0300C:  BCF    FD8.0
0300E:  RLCF   FEF,W
03010:  CLRF   03
03012:  MOVLB  0
03014:  CALL   0172
03018:  TBLRD*+
0301A:  MOVFF  FF5,03
0301E:  CLRF   00
03020:  DECF   00,F
03022:  XORWF  00,F
03024:  MOVLW  FF
03026:  XORWF  03,F
03028:  MOVF   00,W
0302A:  MOVLB  4
0302C:  IORWF  x65,F
0302E:  MOVF   03,W
03030:  IORWF  x66,F
03032:  MOVLB  5
03034:  CLRF   1B
03036:  BTFSC  FF2.7
03038:  BSF    1B.7
0303A:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
0303C:  CLRF   x79
0303E:  MOVFF  529,578
03042:  CLRF   x7B
03044:  MOVLW  2F
03046:  MOVWF  x7A
03048:  MOVLB  0
0304A:  CALL   02F0
0304E:  BTFSC  1B.7
03050:  BSF    FF2.7
03052:  MOVF   01,W
03054:  ADDLW  4C
03056:  MOVLB  5
03058:  MOVWF  x2B
0305A:  MOVLW  01
0305C:  ADDWFC 02,W
0305E:  MOVWF  x2C
03060:  MOVLW  01
03062:  ADDWF  x2B,W
03064:  MOVWF  01
03066:  MOVLW  00
03068:  ADDWFC x2C,W
0306A:  MOVWF  03
0306C:  MOVF   01,W
0306E:  ADDLW  3E
03070:  MOVWF  01
03072:  MOVLW  01
03074:  ADDWFC 03,F
03076:  MOVF   01,W
03078:  ADDLW  13
0307A:  MOVWF  FE9
0307C:  MOVLW  00
0307E:  ADDWFC 03,W
03080:  MOVWF  FEA
03082:  BCF    FEF.0
03084:  CLRF   1B
03086:  BTFSC  FF2.7
03088:  BSF    1B.7
0308A:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
0308C:  CLRF   x79
0308E:  MOVFF  529,578
03092:  CLRF   x7B
03094:  MOVLW  2F
03096:  MOVWF  x7A
03098:  MOVLB  0
0309A:  CALL   02F0
0309E:  BTFSC  1B.7
030A0:  BSF    FF2.7
030A2:  MOVF   01,W
030A4:  ADDLW  4C
030A6:  MOVLB  5
030A8:  MOVWF  x2B
030AA:  MOVLW  01
030AC:  ADDWFC 02,W
030AE:  MOVWF  x2C
030B0:  MOVLW  01
030B2:  ADDWF  x2B,W
030B4:  MOVWF  01
030B6:  MOVLW  00
030B8:  ADDWFC x2C,W
030BA:  MOVWF  03
030BC:  MOVF   01,W
030BE:  ADDLW  3E
030C0:  MOVWF  01
030C2:  MOVLW  01
030C4:  ADDWFC 03,F
030C6:  MOVF   01,W
030C8:  ADDLW  09
030CA:  MOVWF  FE9
030CC:  MOVLW  00
030CE:  ADDWFC 03,W
030D0:  MOVWF  FEA
030D2:  BTFSS  FEF.0
030D4:  BRA    31E2
030D6:  CLRF   1B
030D8:  BTFSC  FF2.7
030DA:  BSF    1B.7
030DC:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
030DE:  CLRF   x79
030E0:  MOVFF  529,578
030E4:  CLRF   x7B
030E6:  MOVLW  2F
030E8:  MOVWF  x7A
030EA:  MOVLB  0
030EC:  CALL   02F0
030F0:  BTFSC  1B.7
030F2:  BSF    FF2.7
030F4:  MOVF   01,W
030F6:  ADDLW  4C
030F8:  MOVLB  5
030FA:  MOVWF  x2B
030FC:  MOVLW  01
030FE:  ADDWFC 02,W
03100:  MOVWF  x2C
03102:  MOVLW  01
03104:  ADDWF  x2B,W
03106:  MOVWF  01
03108:  MOVLW  00
0310A:  ADDWFC x2C,W
0310C:  MOVWF  03
0310E:  MOVF   01,W
03110:  ADDLW  3E
03112:  MOVWF  01
03114:  MOVLW  01
03116:  ADDWFC 03,F
03118:  MOVF   01,W
0311A:  ADDLW  08
0311C:  MOVWF  FE9
0311E:  MOVLW  00
03120:  ADDWFC 03,W
03122:  MOVWF  FEA
03124:  MOVF   FEF,F
03126:  BZ    3192
03128:  CLRF   1B
0312A:  BTFSC  FF2.7
0312C:  BSF    1B.7
0312E:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
03130:  CLRF   x79
03132:  MOVFF  529,578
03136:  CLRF   x7B
03138:  MOVLW  2F
0313A:  MOVWF  x7A
0313C:  MOVLB  0
0313E:  CALL   02F0
03142:  BTFSC  1B.7
03144:  BSF    FF2.7
03146:  MOVF   01,W
03148:  ADDLW  4C
0314A:  MOVLB  5
0314C:  MOVWF  x2B
0314E:  MOVLW  01
03150:  ADDWFC 02,W
03152:  MOVWF  x2C
03154:  MOVLW  01
03156:  ADDWF  x2B,W
03158:  MOVWF  01
0315A:  MOVLW  00
0315C:  ADDWFC x2C,W
0315E:  MOVWF  03
03160:  MOVF   01,W
03162:  ADDLW  3E
03164:  MOVWF  01
03166:  MOVLW  01
03168:  ADDWFC 03,F
0316A:  MOVF   01,W
0316C:  ADDLW  14
0316E:  MOVWF  FE9
03170:  MOVLW  00
03172:  ADDWFC 03,W
03174:  MOVWF  FEA
03176:  BCF    FD8.0
03178:  RLCF   FEF,W
0317A:  CLRF   03
0317C:  MOVLB  0
0317E:  CALL   0172
03182:  TBLRD*+
03184:  MOVFF  FF5,03
03188:  MOVLB  4
0318A:  ANDWF  x65,F
0318C:  MOVF   03,W
0318E:  ANDWF  x66,F
03190:  MOVLB  5
03192:  CLRF   1B
03194:  BTFSC  FF2.7
03196:  BSF    1B.7
03198:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
0319A:  CLRF   x79
0319C:  MOVFF  529,578
031A0:  CLRF   x7B
031A2:  MOVLW  2F
031A4:  MOVWF  x7A
031A6:  MOVLB  0
031A8:  CALL   02F0
031AC:  BTFSC  1B.7
031AE:  BSF    FF2.7
031B0:  MOVF   01,W
031B2:  ADDLW  4C
031B4:  MOVLB  5
031B6:  MOVWF  x2B
031B8:  MOVLW  01
031BA:  ADDWFC 02,W
031BC:  MOVWF  x2C
031BE:  MOVLW  01
031C0:  ADDWF  x2B,W
031C2:  MOVWF  01
031C4:  MOVLW  00
031C6:  ADDWFC x2C,W
031C8:  MOVWF  03
031CA:  MOVF   01,W
031CC:  ADDLW  3E
031CE:  MOVWF  01
031D0:  MOVLW  01
031D2:  ADDWFC 03,F
031D4:  MOVF   01,W
031D6:  ADDLW  09
031D8:  MOVWF  FE9
031DA:  MOVLW  00
031DC:  ADDWFC 03,W
031DE:  MOVWF  FEA
031E0:  BCF    FEF.0
....................             } 
....................          break; 
031E2:  MOVLB  0
031E4:  GOTO   3CA6
....................            case shutter: 
031E8:  CLRF   1B
031EA:  BTFSC  FF2.7
031EC:  BSF    1B.7
031EE:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
031F0:  MOVLB  5
031F2:  CLRF   x79
031F4:  MOVFF  529,578
031F8:  CLRF   x7B
031FA:  MOVLW  2F
031FC:  MOVWF  x7A
031FE:  MOVLB  0
03200:  CALL   02F0
03204:  BTFSC  1B.7
03206:  BSF    FF2.7
03208:  MOVF   01,W
0320A:  ADDLW  4C
0320C:  MOVLB  5
0320E:  MOVWF  x2B
03210:  MOVLW  01
03212:  ADDWFC 02,W
03214:  MOVWF  x2C
03216:  MOVLW  01
03218:  ADDWF  x2B,W
0321A:  MOVWF  01
0321C:  MOVLW  00
0321E:  ADDWFC x2C,W
03220:  MOVWF  03
03222:  MOVF   01,W
03224:  ADDLW  3E
03226:  MOVWF  01
03228:  MOVLW  01
0322A:  ADDWFC 03,F
0322C:  MOVF   01,W
0322E:  ADDLW  09
03230:  MOVWF  FE9
03232:  MOVLW  00
03234:  ADDWFC 03,W
03236:  MOVWF  FEA
03238:  BTFSS  FEF.0
0323A:  BRA    34A6
0323C:  CLRF   1B
0323E:  BTFSC  FF2.7
03240:  BSF    1B.7
03242:  BCF    FF2.7
03244:  CLRF   x79
03246:  MOVFF  529,578
0324A:  CLRF   x7B
0324C:  MOVLW  2F
0324E:  MOVWF  x7A
03250:  MOVLB  0
03252:  CALL   02F0
03256:  BTFSC  1B.7
03258:  BSF    FF2.7
0325A:  MOVF   01,W
0325C:  ADDLW  4C
0325E:  MOVLB  5
03260:  MOVWF  x2D
03262:  MOVLW  01
03264:  ADDWFC 02,W
03266:  MOVWF  x2E
03268:  MOVLW  01
0326A:  ADDWF  x2D,W
0326C:  MOVWF  01
0326E:  MOVLW  00
03270:  ADDWFC x2E,W
03272:  MOVWF  03
03274:  MOVF   01,W
03276:  ADDLW  3E
03278:  MOVWF  01
0327A:  MOVLW  01
0327C:  ADDWFC 03,F
0327E:  MOVF   01,W
03280:  ADDLW  2D
03282:  MOVWF  FE9
03284:  MOVLW  00
03286:  ADDWFC 03,W
03288:  MOVWF  FEA
0328A:  MOVF   FEF,W
0328C:  SUBLW  04
0328E:  BZ    32E4
03290:  CLRF   1B
03292:  BTFSC  FF2.7
03294:  BSF    1B.7
03296:  BCF    FF2.7
03298:  CLRF   x79
0329A:  MOVFF  529,578
0329E:  CLRF   x7B
032A0:  MOVLW  2F
032A2:  MOVWF  x7A
032A4:  MOVLB  0
032A6:  CALL   02F0
032AA:  BTFSC  1B.7
032AC:  BSF    FF2.7
032AE:  MOVF   01,W
032B0:  ADDLW  4C
032B2:  MOVLB  5
032B4:  MOVWF  x2F
032B6:  MOVLW  01
032B8:  ADDWFC 02,W
032BA:  MOVWF  x30
032BC:  MOVLW  01
032BE:  ADDWF  x2F,W
032C0:  MOVWF  01
032C2:  MOVLW  00
032C4:  ADDWFC x30,W
032C6:  MOVWF  03
032C8:  MOVF   01,W
032CA:  ADDLW  3E
032CC:  MOVWF  01
032CE:  MOVLW  01
032D0:  ADDWFC 03,F
032D2:  MOVF   01,W
032D4:  ADDLW  2D
032D6:  MOVWF  FE9
032D8:  MOVLW  00
032DA:  ADDWFC 03,W
032DC:  MOVWF  FEA
032DE:  MOVF   FEF,F
032E0:  BTFSS  FD8.2
032E2:  BRA    34A6
....................             { 
....................                        printf("shitter"); 
032E4:  MOVLW  BA
032E6:  MOVWF  FF6
032E8:  MOVLW  02
032EA:  MOVWF  FF7
032EC:  MOVLW  00
032EE:  MOVWF  FF8
032F0:  MOVLB  0
032F2:  CALL   2924
032F6:  CLRF   1B
032F8:  BTFSC  FF2.7
032FA:  BSF    1B.7
032FC:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
032FE:  MOVLB  5
03300:  CLRF   x79
03302:  MOVFF  529,578
03306:  CLRF   x7B
03308:  MOVLW  2F
0330A:  MOVWF  x7A
0330C:  MOVLB  0
0330E:  CALL   02F0
03312:  BTFSC  1B.7
03314:  BSF    FF2.7
03316:  MOVF   01,W
03318:  ADDLW  4C
0331A:  MOVLB  5
0331C:  MOVWF  x2B
0331E:  MOVLW  01
03320:  ADDWFC 02,W
03322:  MOVWF  x2C
03324:  MOVLW  01
03326:  ADDWF  x2B,W
03328:  MOVWF  01
0332A:  MOVLW  00
0332C:  ADDWFC x2C,W
0332E:  MOVWF  03
03330:  MOVF   01,W
03332:  ADDLW  3E
03334:  MOVWF  01
03336:  MOVLW  01
03338:  ADDWFC 03,F
0333A:  MOVF   01,W
0333C:  ADDLW  08
0333E:  MOVWF  FE9
03340:  MOVLW  00
03342:  ADDWFC 03,W
03344:  MOVWF  FEA
03346:  MOVF   FEF,F
03348:  BTFSC  FD8.2
0334A:  BRA    3456
0334C:  CLRF   1B
0334E:  BTFSC  FF2.7
03350:  BSF    1B.7
03352:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
03354:  CLRF   x79
03356:  MOVFF  529,578
0335A:  CLRF   x7B
0335C:  MOVLW  2F
0335E:  MOVWF  x7A
03360:  MOVLB  0
03362:  CALL   02F0
03366:  BTFSC  1B.7
03368:  BSF    FF2.7
0336A:  MOVF   01,W
0336C:  ADDLW  4C
0336E:  MOVLB  5
03370:  MOVWF  x2B
03372:  MOVLW  01
03374:  ADDWFC 02,W
03376:  MOVWF  x2C
03378:  MOVLW  01
0337A:  ADDWF  x2B,W
0337C:  MOVWF  01
0337E:  MOVLW  00
03380:  ADDWFC x2C,W
03382:  MOVWF  03
03384:  MOVF   01,W
03386:  ADDLW  3E
03388:  MOVWF  01
0338A:  MOVLW  01
0338C:  ADDWFC 03,F
0338E:  MOVF   01,W
03390:  ADDLW  2A
03392:  MOVWF  FE9
03394:  MOVLW  00
03396:  ADDWFC 03,W
03398:  MOVWF  FEA
0339A:  CLRF   FEF
0339C:  CLRF   1B
0339E:  BTFSC  FF2.7
033A0:  BSF    1B.7
033A2:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
033A4:  CLRF   x79
033A6:  MOVFF  529,578
033AA:  CLRF   x7B
033AC:  MOVLW  2F
033AE:  MOVWF  x7A
033B0:  MOVLB  0
033B2:  CALL   02F0
033B6:  BTFSC  1B.7
033B8:  BSF    FF2.7
033BA:  MOVF   01,W
033BC:  ADDLW  4C
033BE:  MOVLB  5
033C0:  MOVWF  x2B
033C2:  MOVLW  01
033C4:  ADDWFC 02,W
033C6:  MOVWF  x2C
033C8:  MOVLW  01
033CA:  ADDWF  x2B,W
033CC:  MOVWF  01
033CE:  MOVLW  00
033D0:  ADDWFC x2C,W
033D2:  MOVWF  03
033D4:  MOVF   01,W
033D6:  ADDLW  3E
033D8:  MOVWF  01
033DA:  MOVLW  01
033DC:  ADDWFC 03,F
033DE:  MOVF   01,W
033E0:  ADDLW  2D
033E2:  MOVWF  FE9
033E4:  MOVLW  00
033E6:  ADDWFC 03,W
033E8:  MOVWF  FEA
033EA:  CLRF   FEF
033EC:  CLRF   1B
033EE:  BTFSC  FF2.7
033F0:  BSF    1B.7
033F2:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
033F4:  CLRF   x79
033F6:  MOVFF  529,578
033FA:  CLRF   x7B
033FC:  MOVLW  2F
033FE:  MOVWF  x7A
03400:  MOVLB  0
03402:  CALL   02F0
03406:  BTFSC  1B.7
03408:  BSF    FF2.7
0340A:  MOVF   01,W
0340C:  ADDLW  4C
0340E:  MOVLB  5
03410:  MOVWF  x2B
03412:  MOVLW  01
03414:  ADDWFC 02,W
03416:  MOVWF  x2C
03418:  MOVLW  01
0341A:  ADDWF  x2B,W
0341C:  MOVWF  01
0341E:  MOVLW  00
03420:  ADDWFC x2C,W
03422:  MOVWF  03
03424:  MOVF   01,W
03426:  ADDLW  3E
03428:  MOVWF  01
0342A:  MOVLW  01
0342C:  ADDWFC 03,F
0342E:  MOVF   01,W
03430:  ADDLW  28
03432:  MOVWF  FE9
03434:  MOVLW  00
03436:  ADDWFC 03,W
03438:  MOVWF  FEA
0343A:  BCF    FD8.0
0343C:  RLCF   FEF,W
0343E:  CLRF   03
03440:  MOVLB  0
03442:  CALL   0172
03446:  TBLRD*+
03448:  MOVFF  FF5,03
0344C:  MOVLB  4
0344E:  ANDWF  x65,F
03450:  MOVF   03,W
03452:  ANDWF  x66,F
03454:  MOVLB  5
03456:  CLRF   1B
03458:  BTFSC  FF2.7
0345A:  BSF    1B.7
0345C:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
0345E:  CLRF   x79
03460:  MOVFF  529,578
03464:  CLRF   x7B
03466:  MOVLW  2F
03468:  MOVWF  x7A
0346A:  MOVLB  0
0346C:  CALL   02F0
03470:  BTFSC  1B.7
03472:  BSF    FF2.7
03474:  MOVF   01,W
03476:  ADDLW  4C
03478:  MOVLB  5
0347A:  MOVWF  x2B
0347C:  MOVLW  01
0347E:  ADDWFC 02,W
03480:  MOVWF  x2C
03482:  MOVLW  01
03484:  ADDWF  x2B,W
03486:  MOVWF  01
03488:  MOVLW  00
0348A:  ADDWFC x2C,W
0348C:  MOVWF  03
0348E:  MOVF   01,W
03490:  ADDLW  3E
03492:  MOVWF  01
03494:  MOVLW  01
03496:  ADDWFC 03,F
03498:  MOVF   01,W
0349A:  ADDLW  09
0349C:  MOVWF  FE9
0349E:  MOVLW  00
034A0:  ADDWFC 03,W
034A2:  MOVWF  FEA
034A4:  BCF    FEF.0
034A6:  CLRF   1B
034A8:  BTFSC  FF2.7
034AA:  BSF    1B.7
034AC:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
034AE:  CLRF   x79
034B0:  MOVFF  529,578
034B4:  CLRF   x7B
034B6:  MOVLW  2F
034B8:  MOVWF  x7A
034BA:  MOVLB  0
034BC:  CALL   02F0
034C0:  BTFSC  1B.7
034C2:  BSF    FF2.7
034C4:  MOVF   01,W
034C6:  ADDLW  4C
034C8:  MOVLB  5
034CA:  MOVWF  x2B
034CC:  MOVLW  01
034CE:  ADDWFC 02,W
034D0:  MOVWF  x2C
034D2:  MOVLW  01
034D4:  ADDWF  x2B,W
034D6:  MOVWF  01
034D8:  MOVLW  00
034DA:  ADDWFC x2C,W
034DC:  MOVWF  03
034DE:  MOVF   01,W
034E0:  ADDLW  3E
034E2:  MOVWF  01
034E4:  MOVLW  01
034E6:  ADDWFC 03,F
034E8:  MOVF   01,W
034EA:  ADDLW  13
034EC:  MOVWF  FE9
034EE:  MOVLW  00
034F0:  ADDWFC 03,W
034F2:  MOVWF  FEA
034F4:  BTFSS  FEF.0
034F6:  BRA    374E
034F8:  CLRF   1B
034FA:  BTFSC  FF2.7
034FC:  BSF    1B.7
034FE:  BCF    FF2.7
03500:  CLRF   x79
03502:  MOVFF  529,578
03506:  CLRF   x7B
03508:  MOVLW  2F
0350A:  MOVWF  x7A
0350C:  MOVLB  0
0350E:  CALL   02F0
03512:  BTFSC  1B.7
03514:  BSF    FF2.7
03516:  MOVF   01,W
03518:  ADDLW  4C
0351A:  MOVLB  5
0351C:  MOVWF  x2D
0351E:  MOVLW  01
03520:  ADDWFC 02,W
03522:  MOVWF  x2E
03524:  MOVLW  01
03526:  ADDWF  x2D,W
03528:  MOVWF  01
0352A:  MOVLW  00
0352C:  ADDWFC x2E,W
0352E:  MOVWF  03
03530:  MOVF   01,W
03532:  ADDLW  3E
03534:  MOVWF  01
03536:  MOVLW  01
03538:  ADDWFC 03,F
0353A:  MOVF   01,W
0353C:  ADDLW  2D
0353E:  MOVWF  FE9
03540:  MOVLW  00
03542:  ADDWFC 03,W
03544:  MOVWF  FEA
03546:  MOVF   FEF,W
03548:  SUBLW  04
0354A:  BZ    359E
0354C:  CLRF   1B
0354E:  BTFSC  FF2.7
03550:  BSF    1B.7
03552:  BCF    FF2.7
03554:  CLRF   x79
03556:  MOVFF  529,578
0355A:  CLRF   x7B
0355C:  MOVLW  2F
0355E:  MOVWF  x7A
03560:  MOVLB  0
03562:  CALL   02F0
03566:  BTFSC  1B.7
03568:  BSF    FF2.7
0356A:  MOVF   01,W
0356C:  ADDLW  4C
0356E:  MOVLB  5
03570:  MOVWF  x2F
03572:  MOVLW  01
03574:  ADDWFC 02,W
03576:  MOVWF  x30
03578:  MOVLW  01
0357A:  ADDWF  x2F,W
0357C:  MOVWF  01
0357E:  MOVLW  00
03580:  ADDWFC x30,W
03582:  MOVWF  03
03584:  MOVF   01,W
03586:  ADDLW  3E
03588:  MOVWF  01
0358A:  MOVLW  01
0358C:  ADDWFC 03,F
0358E:  MOVF   01,W
03590:  ADDLW  2D
03592:  MOVWF  FE9
03594:  MOVLW  00
03596:  ADDWFC 03,W
03598:  MOVWF  FEA
0359A:  DECFSZ FEF,W
0359C:  BRA    374E
0359E:  CLRF   1B
035A0:  BTFSC  FF2.7
035A2:  BSF    1B.7
035A4:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
035A6:  CLRF   x79
035A8:  MOVFF  529,578
035AC:  CLRF   x7B
035AE:  MOVLW  2F
035B0:  MOVWF  x7A
035B2:  MOVLB  0
035B4:  CALL   02F0
035B8:  BTFSC  1B.7
035BA:  BSF    FF2.7
035BC:  MOVF   01,W
035BE:  ADDLW  4C
035C0:  MOVLB  5
035C2:  MOVWF  x2B
035C4:  MOVLW  01
035C6:  ADDWFC 02,W
035C8:  MOVWF  x2C
035CA:  MOVLW  01
035CC:  ADDWF  x2B,W
035CE:  MOVWF  01
035D0:  MOVLW  00
035D2:  ADDWFC x2C,W
035D4:  MOVWF  03
035D6:  MOVF   01,W
035D8:  ADDLW  3E
035DA:  MOVWF  01
035DC:  MOVLW  01
035DE:  ADDWFC 03,F
035E0:  MOVF   01,W
035E2:  ADDLW  12
035E4:  MOVWF  FE9
035E6:  MOVLW  00
035E8:  ADDWFC 03,W
035EA:  MOVWF  FEA
035EC:  MOVF   FEF,F
035EE:  BTFSC  FD8.2
035F0:  BRA    36FE
035F2:  CLRF   1B
035F4:  BTFSC  FF2.7
035F6:  BSF    1B.7
035F8:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
035FA:  CLRF   x79
035FC:  MOVFF  529,578
03600:  CLRF   x7B
03602:  MOVLW  2F
03604:  MOVWF  x7A
03606:  MOVLB  0
03608:  CALL   02F0
0360C:  BTFSC  1B.7
0360E:  BSF    FF2.7
03610:  MOVF   01,W
03612:  ADDLW  4C
03614:  MOVLB  5
03616:  MOVWF  x2B
03618:  MOVLW  01
0361A:  ADDWFC 02,W
0361C:  MOVWF  x2C
0361E:  MOVLW  01
03620:  ADDWF  x2B,W
03622:  MOVWF  01
03624:  MOVLW  00
03626:  ADDWFC x2C,W
03628:  MOVWF  03
0362A:  MOVF   01,W
0362C:  ADDLW  3E
0362E:  MOVWF  01
03630:  MOVLW  01
03632:  ADDWFC 03,F
03634:  MOVF   01,W
03636:  ADDLW  2A
03638:  MOVWF  FE9
0363A:  MOVLW  00
0363C:  ADDWFC 03,W
0363E:  MOVWF  FEA
03640:  CLRF   FEF
03642:  CLRF   1B
03644:  BTFSC  FF2.7
03646:  BSF    1B.7
03648:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
0364A:  CLRF   x79
0364C:  MOVFF  529,578
03650:  CLRF   x7B
03652:  MOVLW  2F
03654:  MOVWF  x7A
03656:  MOVLB  0
03658:  CALL   02F0
0365C:  BTFSC  1B.7
0365E:  BSF    FF2.7
03660:  MOVF   01,W
03662:  ADDLW  4C
03664:  MOVLB  5
03666:  MOVWF  x2B
03668:  MOVLW  01
0366A:  ADDWFC 02,W
0366C:  MOVWF  x2C
0366E:  MOVLW  01
03670:  ADDWF  x2B,W
03672:  MOVWF  01
03674:  MOVLW  00
03676:  ADDWFC x2C,W
03678:  MOVWF  03
0367A:  MOVF   01,W
0367C:  ADDLW  3E
0367E:  MOVWF  01
03680:  MOVLW  01
03682:  ADDWFC 03,F
03684:  MOVF   01,W
03686:  ADDLW  2D
03688:  MOVWF  FE9
0368A:  MOVLW  00
0368C:  ADDWFC 03,W
0368E:  MOVWF  FEA
03690:  MOVLW  01
03692:  MOVWF  FEF
03694:  CLRF   1B
03696:  BTFSC  FF2.7
03698:  BSF    1B.7
0369A:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
0369C:  CLRF   x79
0369E:  MOVFF  529,578
036A2:  CLRF   x7B
036A4:  MOVLW  2F
036A6:  MOVWF  x7A
036A8:  MOVLB  0
036AA:  CALL   02F0
036AE:  BTFSC  1B.7
036B0:  BSF    FF2.7
036B2:  MOVF   01,W
036B4:  ADDLW  4C
036B6:  MOVLB  5
036B8:  MOVWF  x2B
036BA:  MOVLW  01
036BC:  ADDWFC 02,W
036BE:  MOVWF  x2C
036C0:  MOVLW  01
036C2:  ADDWF  x2B,W
036C4:  MOVWF  01
036C6:  MOVLW  00
036C8:  ADDWFC x2C,W
036CA:  MOVWF  03
036CC:  MOVF   01,W
036CE:  ADDLW  3E
036D0:  MOVWF  01
036D2:  MOVLW  01
036D4:  ADDWFC 03,F
036D6:  MOVF   01,W
036D8:  ADDLW  29
036DA:  MOVWF  FE9
036DC:  MOVLW  00
036DE:  ADDWFC 03,W
036E0:  MOVWF  FEA
036E2:  BCF    FD8.0
036E4:  RLCF   FEF,W
036E6:  CLRF   03
036E8:  MOVLB  0
036EA:  CALL   0172
036EE:  TBLRD*+
036F0:  MOVFF  FF5,03
036F4:  MOVLB  4
036F6:  ANDWF  x65,F
036F8:  MOVF   03,W
036FA:  ANDWF  x66,F
036FC:  MOVLB  5
036FE:  CLRF   1B
03700:  BTFSC  FF2.7
03702:  BSF    1B.7
03704:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
03706:  CLRF   x79
03708:  MOVFF  529,578
0370C:  CLRF   x7B
0370E:  MOVLW  2F
03710:  MOVWF  x7A
03712:  MOVLB  0
03714:  CALL   02F0
03718:  BTFSC  1B.7
0371A:  BSF    FF2.7
0371C:  MOVF   01,W
0371E:  ADDLW  4C
03720:  MOVLB  5
03722:  MOVWF  x2B
03724:  MOVLW  01
03726:  ADDWFC 02,W
03728:  MOVWF  x2C
0372A:  MOVLW  01
0372C:  ADDWF  x2B,W
0372E:  MOVWF  01
03730:  MOVLW  00
03732:  ADDWFC x2C,W
03734:  MOVWF  03
03736:  MOVF   01,W
03738:  ADDLW  3E
0373A:  MOVWF  01
0373C:  MOVLW  01
0373E:  ADDWFC 03,F
03740:  MOVF   01,W
03742:  ADDLW  13
03744:  MOVWF  FE9
03746:  MOVLW  00
03748:  ADDWFC 03,W
0374A:  MOVWF  FEA
0374C:  BCF    FEF.0
0374E:  CLRF   1B
03750:  BTFSC  FF2.7
03752:  BSF    1B.7
03754:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
03756:  CLRF   x79
03758:  MOVFF  529,578
0375C:  CLRF   x7B
0375E:  MOVLW  2F
03760:  MOVWF  x7A
03762:  MOVLB  0
03764:  CALL   02F0
03768:  BTFSC  1B.7
0376A:  BSF    FF2.7
0376C:  MOVF   01,W
0376E:  ADDLW  4C
03770:  MOVLB  5
03772:  MOVWF  x2B
03774:  MOVLW  01
03776:  ADDWFC 02,W
03778:  MOVWF  x2C
0377A:  MOVLW  01
0377C:  ADDWF  x2B,W
0377E:  MOVWF  01
03780:  MOVLW  00
03782:  ADDWFC x2C,W
03784:  MOVWF  03
03786:  MOVF   01,W
03788:  ADDLW  3E
0378A:  MOVWF  01
0378C:  MOVLW  01
0378E:  ADDWFC 03,F
03790:  MOVF   01,W
03792:  ADDLW  1D
03794:  MOVWF  FE9
03796:  MOVLW  00
03798:  ADDWFC 03,W
0379A:  MOVWF  FEA
0379C:  BTFSS  FEF.0
0379E:  BRA    39FA
037A0:  CLRF   1B
037A2:  BTFSC  FF2.7
037A4:  BSF    1B.7
037A6:  BCF    FF2.7
037A8:  CLRF   x79
037AA:  MOVFF  529,578
037AE:  CLRF   x7B
037B0:  MOVLW  2F
037B2:  MOVWF  x7A
037B4:  MOVLB  0
037B6:  CALL   02F0
037BA:  BTFSC  1B.7
037BC:  BSF    FF2.7
037BE:  MOVF   01,W
037C0:  ADDLW  4C
037C2:  MOVLB  5
037C4:  MOVWF  x2D
037C6:  MOVLW  01
037C8:  ADDWFC 02,W
037CA:  MOVWF  x2E
037CC:  MOVLW  01
037CE:  ADDWF  x2D,W
037D0:  MOVWF  01
037D2:  MOVLW  00
037D4:  ADDWFC x2E,W
037D6:  MOVWF  03
037D8:  MOVF   01,W
037DA:  ADDLW  3E
037DC:  MOVWF  01
037DE:  MOVLW  01
037E0:  ADDWFC 03,F
037E2:  MOVF   01,W
037E4:  ADDLW  2D
037E6:  MOVWF  FE9
037E8:  MOVLW  00
037EA:  ADDWFC 03,W
037EC:  MOVWF  FEA
037EE:  MOVF   FEF,W
037F0:  SUBLW  04
037F2:  BZ    384A
037F4:  CLRF   1B
037F6:  BTFSC  FF2.7
037F8:  BSF    1B.7
037FA:  BCF    FF2.7
037FC:  CLRF   x79
037FE:  MOVFF  529,578
03802:  CLRF   x7B
03804:  MOVLW  2F
03806:  MOVWF  x7A
03808:  MOVLB  0
0380A:  CALL   02F0
0380E:  BTFSC  1B.7
03810:  BSF    FF2.7
03812:  MOVF   01,W
03814:  ADDLW  4C
03816:  MOVLB  5
03818:  MOVWF  x2F
0381A:  MOVLW  01
0381C:  ADDWFC 02,W
0381E:  MOVWF  x30
03820:  MOVLW  01
03822:  ADDWF  x2F,W
03824:  MOVWF  01
03826:  MOVLW  00
03828:  ADDWFC x30,W
0382A:  MOVWF  03
0382C:  MOVF   01,W
0382E:  ADDLW  3E
03830:  MOVWF  01
03832:  MOVLW  01
03834:  ADDWFC 03,F
03836:  MOVF   01,W
03838:  ADDLW  2D
0383A:  MOVWF  FE9
0383C:  MOVLW  00
0383E:  ADDWFC 03,W
03840:  MOVWF  FEA
03842:  MOVF   FEF,W
03844:  SUBLW  02
03846:  BTFSS  FD8.2
03848:  BRA    39FA
0384A:  CLRF   1B
0384C:  BTFSC  FF2.7
0384E:  BSF    1B.7
03850:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
03852:  CLRF   x79
03854:  MOVFF  529,578
03858:  CLRF   x7B
0385A:  MOVLW  2F
0385C:  MOVWF  x7A
0385E:  MOVLB  0
03860:  CALL   02F0
03864:  BTFSC  1B.7
03866:  BSF    FF2.7
03868:  MOVF   01,W
0386A:  ADDLW  4C
0386C:  MOVLB  5
0386E:  MOVWF  x2B
03870:  MOVLW  01
03872:  ADDWFC 02,W
03874:  MOVWF  x2C
03876:  MOVLW  01
03878:  ADDWF  x2B,W
0387A:  MOVWF  01
0387C:  MOVLW  00
0387E:  ADDWFC x2C,W
03880:  MOVWF  03
03882:  MOVF   01,W
03884:  ADDLW  3E
03886:  MOVWF  01
03888:  MOVLW  01
0388A:  ADDWFC 03,F
0388C:  MOVF   01,W
0388E:  ADDLW  1C
03890:  MOVWF  FE9
03892:  MOVLW  00
03894:  ADDWFC 03,W
03896:  MOVWF  FEA
03898:  MOVF   FEF,F
0389A:  BTFSC  FD8.2
0389C:  BRA    39AA
0389E:  CLRF   1B
038A0:  BTFSC  FF2.7
038A2:  BSF    1B.7
038A4:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
038A6:  CLRF   x79
038A8:  MOVFF  529,578
038AC:  CLRF   x7B
038AE:  MOVLW  2F
038B0:  MOVWF  x7A
038B2:  MOVLB  0
038B4:  CALL   02F0
038B8:  BTFSC  1B.7
038BA:  BSF    FF2.7
038BC:  MOVF   01,W
038BE:  ADDLW  4C
038C0:  MOVLB  5
038C2:  MOVWF  x2B
038C4:  MOVLW  01
038C6:  ADDWFC 02,W
038C8:  MOVWF  x2C
038CA:  MOVLW  01
038CC:  ADDWF  x2B,W
038CE:  MOVWF  01
038D0:  MOVLW  00
038D2:  ADDWFC x2C,W
038D4:  MOVWF  03
038D6:  MOVF   01,W
038D8:  ADDLW  3E
038DA:  MOVWF  01
038DC:  MOVLW  01
038DE:  ADDWFC 03,F
038E0:  MOVF   01,W
038E2:  ADDLW  2A
038E4:  MOVWF  FE9
038E6:  MOVLW  00
038E8:  ADDWFC 03,W
038EA:  MOVWF  FEA
038EC:  CLRF   FEF
038EE:  CLRF   1B
038F0:  BTFSC  FF2.7
038F2:  BSF    1B.7
038F4:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
038F6:  CLRF   x79
038F8:  MOVFF  529,578
038FC:  CLRF   x7B
038FE:  MOVLW  2F
03900:  MOVWF  x7A
03902:  MOVLB  0
03904:  CALL   02F0
03908:  BTFSC  1B.7
0390A:  BSF    FF2.7
0390C:  MOVF   01,W
0390E:  ADDLW  4C
03910:  MOVLB  5
03912:  MOVWF  x2B
03914:  MOVLW  01
03916:  ADDWFC 02,W
03918:  MOVWF  x2C
0391A:  MOVLW  01
0391C:  ADDWF  x2B,W
0391E:  MOVWF  01
03920:  MOVLW  00
03922:  ADDWFC x2C,W
03924:  MOVWF  03
03926:  MOVF   01,W
03928:  ADDLW  3E
0392A:  MOVWF  01
0392C:  MOVLW  01
0392E:  ADDWFC 03,F
03930:  MOVF   01,W
03932:  ADDLW  2D
03934:  MOVWF  FE9
03936:  MOVLW  00
03938:  ADDWFC 03,W
0393A:  MOVWF  FEA
0393C:  MOVLW  02
0393E:  MOVWF  FEF
03940:  CLRF   1B
03942:  BTFSC  FF2.7
03944:  BSF    1B.7
03946:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
03948:  CLRF   x79
0394A:  MOVFF  529,578
0394E:  CLRF   x7B
03950:  MOVLW  2F
03952:  MOVWF  x7A
03954:  MOVLB  0
03956:  CALL   02F0
0395A:  BTFSC  1B.7
0395C:  BSF    FF2.7
0395E:  MOVF   01,W
03960:  ADDLW  4C
03962:  MOVLB  5
03964:  MOVWF  x2B
03966:  MOVLW  01
03968:  ADDWFC 02,W
0396A:  MOVWF  x2C
0396C:  MOVLW  01
0396E:  ADDWF  x2B,W
03970:  MOVWF  01
03972:  MOVLW  00
03974:  ADDWFC x2C,W
03976:  MOVWF  03
03978:  MOVF   01,W
0397A:  ADDLW  3E
0397C:  MOVWF  01
0397E:  MOVLW  01
03980:  ADDWFC 03,F
03982:  MOVF   01,W
03984:  ADDLW  28
03986:  MOVWF  FE9
03988:  MOVLW  00
0398A:  ADDWFC 03,W
0398C:  MOVWF  FEA
0398E:  BCF    FD8.0
03990:  RLCF   FEF,W
03992:  CLRF   03
03994:  MOVLB  0
03996:  CALL   0172
0399A:  TBLRD*+
0399C:  MOVFF  FF5,03
039A0:  MOVLB  4
039A2:  ANDWF  x65,F
039A4:  MOVF   03,W
039A6:  ANDWF  x66,F
039A8:  MOVLB  5
039AA:  CLRF   1B
039AC:  BTFSC  FF2.7
039AE:  BSF    1B.7
039B0:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
039B2:  CLRF   x79
039B4:  MOVFF  529,578
039B8:  CLRF   x7B
039BA:  MOVLW  2F
039BC:  MOVWF  x7A
039BE:  MOVLB  0
039C0:  CALL   02F0
039C4:  BTFSC  1B.7
039C6:  BSF    FF2.7
039C8:  MOVF   01,W
039CA:  ADDLW  4C
039CC:  MOVLB  5
039CE:  MOVWF  x2B
039D0:  MOVLW  01
039D2:  ADDWFC 02,W
039D4:  MOVWF  x2C
039D6:  MOVLW  01
039D8:  ADDWF  x2B,W
039DA:  MOVWF  01
039DC:  MOVLW  00
039DE:  ADDWFC x2C,W
039E0:  MOVWF  03
039E2:  MOVF   01,W
039E4:  ADDLW  3E
039E6:  MOVWF  01
039E8:  MOVLW  01
039EA:  ADDWFC 03,F
039EC:  MOVF   01,W
039EE:  ADDLW  1D
039F0:  MOVWF  FE9
039F2:  MOVLW  00
039F4:  ADDWFC 03,W
039F6:  MOVWF  FEA
039F8:  BCF    FEF.0
039FA:  CLRF   1B
039FC:  BTFSC  FF2.7
039FE:  BSF    1B.7
03A00:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
03A02:  CLRF   x79
03A04:  MOVFF  529,578
03A08:  CLRF   x7B
03A0A:  MOVLW  2F
03A0C:  MOVWF  x7A
03A0E:  MOVLB  0
03A10:  CALL   02F0
03A14:  BTFSC  1B.7
03A16:  BSF    FF2.7
03A18:  MOVF   01,W
03A1A:  ADDLW  4C
03A1C:  MOVLB  5
03A1E:  MOVWF  x2B
03A20:  MOVLW  01
03A22:  ADDWFC 02,W
03A24:  MOVWF  x2C
03A26:  MOVLW  01
03A28:  ADDWF  x2B,W
03A2A:  MOVWF  01
03A2C:  MOVLW  00
03A2E:  ADDWFC x2C,W
03A30:  MOVWF  03
03A32:  MOVF   01,W
03A34:  ADDLW  3E
03A36:  MOVWF  01
03A38:  MOVLW  01
03A3A:  ADDWFC 03,F
03A3C:  MOVF   01,W
03A3E:  ADDLW  27
03A40:  MOVWF  FE9
03A42:  MOVLW  00
03A44:  ADDWFC 03,W
03A46:  MOVWF  FEA
03A48:  BTFSS  FEF.0
03A4A:  BRA    3CA6
03A4C:  CLRF   1B
03A4E:  BTFSC  FF2.7
03A50:  BSF    1B.7
03A52:  BCF    FF2.7
03A54:  CLRF   x79
03A56:  MOVFF  529,578
03A5A:  CLRF   x7B
03A5C:  MOVLW  2F
03A5E:  MOVWF  x7A
03A60:  MOVLB  0
03A62:  CALL   02F0
03A66:  BTFSC  1B.7
03A68:  BSF    FF2.7
03A6A:  MOVF   01,W
03A6C:  ADDLW  4C
03A6E:  MOVLB  5
03A70:  MOVWF  x2D
03A72:  MOVLW  01
03A74:  ADDWFC 02,W
03A76:  MOVWF  x2E
03A78:  MOVLW  01
03A7A:  ADDWF  x2D,W
03A7C:  MOVWF  01
03A7E:  MOVLW  00
03A80:  ADDWFC x2E,W
03A82:  MOVWF  03
03A84:  MOVF   01,W
03A86:  ADDLW  3E
03A88:  MOVWF  01
03A8A:  MOVLW  01
03A8C:  ADDWFC 03,F
03A8E:  MOVF   01,W
03A90:  ADDLW  2D
03A92:  MOVWF  FE9
03A94:  MOVLW  00
03A96:  ADDWFC 03,W
03A98:  MOVWF  FEA
03A9A:  MOVF   FEF,W
03A9C:  SUBLW  04
03A9E:  BZ    3AF6
03AA0:  CLRF   1B
03AA2:  BTFSC  FF2.7
03AA4:  BSF    1B.7
03AA6:  BCF    FF2.7
03AA8:  CLRF   x79
03AAA:  MOVFF  529,578
03AAE:  CLRF   x7B
03AB0:  MOVLW  2F
03AB2:  MOVWF  x7A
03AB4:  MOVLB  0
03AB6:  CALL   02F0
03ABA:  BTFSC  1B.7
03ABC:  BSF    FF2.7
03ABE:  MOVF   01,W
03AC0:  ADDLW  4C
03AC2:  MOVLB  5
03AC4:  MOVWF  x2F
03AC6:  MOVLW  01
03AC8:  ADDWFC 02,W
03ACA:  MOVWF  x30
03ACC:  MOVLW  01
03ACE:  ADDWF  x2F,W
03AD0:  MOVWF  01
03AD2:  MOVLW  00
03AD4:  ADDWFC x30,W
03AD6:  MOVWF  03
03AD8:  MOVF   01,W
03ADA:  ADDLW  3E
03ADC:  MOVWF  01
03ADE:  MOVLW  01
03AE0:  ADDWFC 03,F
03AE2:  MOVF   01,W
03AE4:  ADDLW  2D
03AE6:  MOVWF  FE9
03AE8:  MOVLW  00
03AEA:  ADDWFC 03,W
03AEC:  MOVWF  FEA
03AEE:  MOVF   FEF,W
03AF0:  SUBLW  03
03AF2:  BTFSS  FD8.2
03AF4:  BRA    3CA6
03AF6:  CLRF   1B
03AF8:  BTFSC  FF2.7
03AFA:  BSF    1B.7
03AFC:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
03AFE:  CLRF   x79
03B00:  MOVFF  529,578
03B04:  CLRF   x7B
03B06:  MOVLW  2F
03B08:  MOVWF  x7A
03B0A:  MOVLB  0
03B0C:  CALL   02F0
03B10:  BTFSC  1B.7
03B12:  BSF    FF2.7
03B14:  MOVF   01,W
03B16:  ADDLW  4C
03B18:  MOVLB  5
03B1A:  MOVWF  x2B
03B1C:  MOVLW  01
03B1E:  ADDWFC 02,W
03B20:  MOVWF  x2C
03B22:  MOVLW  01
03B24:  ADDWF  x2B,W
03B26:  MOVWF  01
03B28:  MOVLW  00
03B2A:  ADDWFC x2C,W
03B2C:  MOVWF  03
03B2E:  MOVF   01,W
03B30:  ADDLW  3E
03B32:  MOVWF  01
03B34:  MOVLW  01
03B36:  ADDWFC 03,F
03B38:  MOVF   01,W
03B3A:  ADDLW  26
03B3C:  MOVWF  FE9
03B3E:  MOVLW  00
03B40:  ADDWFC 03,W
03B42:  MOVWF  FEA
03B44:  MOVF   FEF,F
03B46:  BTFSC  FD8.2
03B48:  BRA    3C56
03B4A:  CLRF   1B
03B4C:  BTFSC  FF2.7
03B4E:  BSF    1B.7
03B50:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
03B52:  CLRF   x79
03B54:  MOVFF  529,578
03B58:  CLRF   x7B
03B5A:  MOVLW  2F
03B5C:  MOVWF  x7A
03B5E:  MOVLB  0
03B60:  CALL   02F0
03B64:  BTFSC  1B.7
03B66:  BSF    FF2.7
03B68:  MOVF   01,W
03B6A:  ADDLW  4C
03B6C:  MOVLB  5
03B6E:  MOVWF  x2B
03B70:  MOVLW  01
03B72:  ADDWFC 02,W
03B74:  MOVWF  x2C
03B76:  MOVLW  01
03B78:  ADDWF  x2B,W
03B7A:  MOVWF  01
03B7C:  MOVLW  00
03B7E:  ADDWFC x2C,W
03B80:  MOVWF  03
03B82:  MOVF   01,W
03B84:  ADDLW  3E
03B86:  MOVWF  01
03B88:  MOVLW  01
03B8A:  ADDWFC 03,F
03B8C:  MOVF   01,W
03B8E:  ADDLW  2A
03B90:  MOVWF  FE9
03B92:  MOVLW  00
03B94:  ADDWFC 03,W
03B96:  MOVWF  FEA
03B98:  CLRF   FEF
03B9A:  CLRF   1B
03B9C:  BTFSC  FF2.7
03B9E:  BSF    1B.7
03BA0:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
03BA2:  CLRF   x79
03BA4:  MOVFF  529,578
03BA8:  CLRF   x7B
03BAA:  MOVLW  2F
03BAC:  MOVWF  x7A
03BAE:  MOVLB  0
03BB0:  CALL   02F0
03BB4:  BTFSC  1B.7
03BB6:  BSF    FF2.7
03BB8:  MOVF   01,W
03BBA:  ADDLW  4C
03BBC:  MOVLB  5
03BBE:  MOVWF  x2B
03BC0:  MOVLW  01
03BC2:  ADDWFC 02,W
03BC4:  MOVWF  x2C
03BC6:  MOVLW  01
03BC8:  ADDWF  x2B,W
03BCA:  MOVWF  01
03BCC:  MOVLW  00
03BCE:  ADDWFC x2C,W
03BD0:  MOVWF  03
03BD2:  MOVF   01,W
03BD4:  ADDLW  3E
03BD6:  MOVWF  01
03BD8:  MOVLW  01
03BDA:  ADDWFC 03,F
03BDC:  MOVF   01,W
03BDE:  ADDLW  2D
03BE0:  MOVWF  FE9
03BE2:  MOVLW  00
03BE4:  ADDWFC 03,W
03BE6:  MOVWF  FEA
03BE8:  MOVLW  03
03BEA:  MOVWF  FEF
03BEC:  CLRF   1B
03BEE:  BTFSC  FF2.7
03BF0:  BSF    1B.7
03BF2:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
03BF4:  CLRF   x79
03BF6:  MOVFF  529,578
03BFA:  CLRF   x7B
03BFC:  MOVLW  2F
03BFE:  MOVWF  x7A
03C00:  MOVLB  0
03C02:  CALL   02F0
03C06:  BTFSC  1B.7
03C08:  BSF    FF2.7
03C0A:  MOVF   01,W
03C0C:  ADDLW  4C
03C0E:  MOVLB  5
03C10:  MOVWF  x2B
03C12:  MOVLW  01
03C14:  ADDWFC 02,W
03C16:  MOVWF  x2C
03C18:  MOVLW  01
03C1A:  ADDWF  x2B,W
03C1C:  MOVWF  01
03C1E:  MOVLW  00
03C20:  ADDWFC x2C,W
03C22:  MOVWF  03
03C24:  MOVF   01,W
03C26:  ADDLW  3E
03C28:  MOVWF  01
03C2A:  MOVLW  01
03C2C:  ADDWFC 03,F
03C2E:  MOVF   01,W
03C30:  ADDLW  29
03C32:  MOVWF  FE9
03C34:  MOVLW  00
03C36:  ADDWFC 03,W
03C38:  MOVWF  FEA
03C3A:  BCF    FD8.0
03C3C:  RLCF   FEF,W
03C3E:  CLRF   03
03C40:  MOVLB  0
03C42:  CALL   0172
03C46:  TBLRD*+
03C48:  MOVFF  FF5,03
03C4C:  MOVLB  4
03C4E:  ANDWF  x65,F
03C50:  MOVF   03,W
03C52:  ANDWF  x66,F
03C54:  MOVLB  5
03C56:  CLRF   1B
03C58:  BTFSC  FF2.7
03C5A:  BSF    1B.7
03C5C:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
03C5E:  CLRF   x79
03C60:  MOVFF  529,578
03C64:  CLRF   x7B
03C66:  MOVLW  2F
03C68:  MOVWF  x7A
03C6A:  MOVLB  0
03C6C:  CALL   02F0
03C70:  BTFSC  1B.7
03C72:  BSF    FF2.7
03C74:  MOVF   01,W
03C76:  ADDLW  4C
03C78:  MOVLB  5
03C7A:  MOVWF  x2B
03C7C:  MOVLW  01
03C7E:  ADDWFC 02,W
03C80:  MOVWF  x2C
03C82:  MOVLW  01
03C84:  ADDWF  x2B,W
03C86:  MOVWF  01
03C88:  MOVLW  00
03C8A:  ADDWFC x2C,W
03C8C:  MOVWF  03
03C8E:  MOVF   01,W
03C90:  ADDLW  3E
03C92:  MOVWF  01
03C94:  MOVLW  01
03C96:  ADDWFC 03,F
03C98:  MOVF   01,W
03C9A:  ADDLW  27
03C9C:  MOVWF  FE9
03C9E:  MOVLW  00
03CA0:  ADDWFC 03,W
03CA2:  MOVWF  FEA
03CA4:  BCF    FEF.0
....................             } 
....................            } 
....................             break; 
03CA6:  MOVLB  5
03CA8:  BRA    3CB0
....................    } 
03CAA:  INCF   x29,F
03CAC:  GOTO   2952
....................    if(update_dimmers) 
03CB0:  BTFSS  x2A.0
03CB2:  BRA    3CBC
....................       org(); 
03CB4:  MOVLB  0
03CB6:  CALL   212C
03CBA:  MOVLB  5
.................... } 
03CBC:  MOVLB  0
03CBE:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
*
0208C:  MOVLW  01
0208E:  MOVLB  1
02090:  MOVWF  x3F
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
02092:  MOVLB  5
02094:  MOVWF  x29
02096:  MOVLW  15
02098:  MOVWF  x2A
0209A:  MOVLW  1F
0209C:  MOVWF  x2B
0209E:  MOVLW  FF
020A0:  MOVWF  x2C
020A2:  MOVWF  x2D
020A4:  MOVWF  x2E
020A6:  MOVWF  x2F
020A8:  MOVWF  x30
....................    unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
020AA:  MOVLW  03
020AC:  MOVWF  x31
020AE:  MOVLW  33
020B0:  MOVWF  x32
020B2:  MOVLW  3D
020B4:  MOVWF  x33
020B6:  MOVLW  FF
020B8:  MOVWF  x34
020BA:  MOVWF  x35
020BC:  MOVWF  x36
020BE:  MOVWF  x37
020C0:  MOVWF  x38
....................    unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
020C2:  MOVLW  02
020C4:  MOVWF  x39
020C6:  MOVLW  51
020C8:  MOVWF  x3A
020CA:  MOVLW  5B
020CC:  MOVWF  x3B
020CE:  MOVLW  FF
020D0:  MOVWF  x3C
020D2:  MOVWF  x3D
020D4:  MOVWF  x3E
020D6:  MOVWF  x3F
020D8:  MOVWF  x40
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
020DA:  MOVLW  04
020DC:  MOVWF  x41
020DE:  MOVLW  51
020E0:  MOVWF  x42
020E2:  MOVLW  5B
020E4:  MOVWF  x43
020E6:  MOVLW  FF
020E8:  MOVWF  x44
020EA:  MOVWF  x45
020EC:  MOVWF  x46
020EE:  MOVWF  x47
020F0:  MOVWF  x48
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
020F2:  MOVWF  x49
020F4:  MOVWF  x4A
020F6:  MOVWF  x4B
020F8:  MOVWF  x4C
020FA:  MOVWF  x4D
020FC:  MOVWF  x4E
020FE:  MOVWF  x4F
02100:  MOVWF  x50
....................    dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
02102:  MOVLW  05
02104:  MOVWF  x52
02106:  MOVLW  29
02108:  MOVWF  x51
0210A:  MOVLW  05
0210C:  MOVWF  x54
0210E:  MOVLW  39
02110:  MOVWF  x53
02112:  MOVLW  05
02114:  MOVWF  x56
02116:  MOVLW  31
02118:  MOVWF  x55
0211A:  MOVLW  02
0211C:  MOVWF  x58
0211E:  MOVLW  8A
02120:  MOVWF  x57
02122:  CLRF   x59
02124:  MOVLB  0
02126:  BRA    1F0A
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    //onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
02128:  GOTO   69C8 (RETURN)
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
03CE0:  MOVLB  5
03CE2:  CLRF   x3C
03CE4:  MOVF   x3C,W
03CE6:  SUBLW  07
03CE8:  BNC   3D08
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
03CEA:  CLRF   03
03CEC:  MOVF   x3C,W
03CEE:  ADDWF  x39,W
03CF0:  MOVWF  FE9
03CF2:  MOVF   x3A,W
03CF4:  ADDWFC 03,W
03CF6:  MOVWF  FEA
03CF8:  MOVF   x3B,W
03CFA:  SUBWF  FEF,W
03CFC:  BNZ   3D04
03CFE:  MOVLW  01
03D00:  MOVWF  01
03D02:  BRA    3D0C
....................    } 
03D04:  INCF   x3C,F
03D06:  BRA    3CE4
....................  
....................    return false; 
03D08:  MOVLW  00
03D0A:  MOVWF  01
.................... } 
03D0C:  MOVLB  0
03D0E:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
03D10:  MOVLB  5
03D12:  CLRF   x34
03D14:  MOVLB  1
03D16:  MOVF   x3F,W
03D18:  MOVLB  5
03D1A:  SUBWF  x34,W
03D1C:  BTFSC  FD8.0
03D1E:  GOTO   46FE
03D22:  CLRF   1B
03D24:  BTFSC  FF2.7
03D26:  BSF    1B.7
03D28:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
03D2A:  CLRF   x79
03D2C:  MOVFF  534,578
03D30:  CLRF   x7B
03D32:  MOVLW  2F
03D34:  MOVWF  x7A
03D36:  MOVLB  0
03D38:  CALL   02F0
03D3C:  BTFSC  1B.7
03D3E:  BSF    FF2.7
03D40:  MOVFF  02,03
03D44:  MOVF   01,W
03D46:  ADDLW  8A
03D48:  MOVWF  01
03D4A:  MOVLW  02
03D4C:  ADDWFC 03,F
03D4E:  MOVFF  01,FE9
03D52:  MOVFF  03,FEA
03D56:  MOVF   FEF,W
03D58:  XORLW  01
03D5A:  BZ    3D6C
03D5C:  XORLW  01
03D5E:  BTFSC  FD8.2
03D60:  BRA    4098
03D62:  XORLW  02
03D64:  BTFSC  FD8.2
03D66:  BRA    42B2
03D68:  GOTO   46F4
....................          case dimmer: 
03D6C:  CLRF   1B
03D6E:  BTFSC  FF2.7
03D70:  BSF    1B.7
03D72:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
03D74:  MOVLB  5
03D76:  CLRF   x79
03D78:  MOVFF  534,578
03D7C:  CLRF   x7B
03D7E:  MOVLW  2F
03D80:  MOVWF  x7A
03D82:  MOVLB  0
03D84:  CALL   02F0
03D88:  BTFSC  1B.7
03D8A:  BSF    FF2.7
03D8C:  MOVF   01,W
03D8E:  ADDLW  4C
03D90:  MOVLB  5
03D92:  MOVWF  x35
03D94:  MOVLW  01
03D96:  ADDWFC 02,W
03D98:  MOVWF  x36
03D9A:  MOVLW  01
03D9C:  ADDWF  x35,W
03D9E:  MOVWF  01
03DA0:  MOVLW  00
03DA2:  ADDWFC x36,W
03DA4:  MOVWF  03
03DA6:  MOVF   01,W
03DA8:  ADDLW  3E
03DAA:  MOVWF  01
03DAC:  MOVLW  01
03DAE:  ADDWFC 03,F
03DB0:  MOVF   01,W
03DB2:  ADDLW  14
03DB4:  MOVWF  01
03DB6:  MOVLW  00
03DB8:  ADDWFC 03,F
03DBA:  MOVFF  01,537
03DBE:  MOVFF  03,538
03DC2:  MOVFF  03,53A
03DC6:  MOVFF  01,539
03DCA:  MOVFF  532,53B
03DCE:  MOVLB  0
03DD0:  RCALL  3CE0
03DD2:  MOVF   01,F
03DD4:  BZ    3E7E
03DD6:  CLRF   1B
03DD8:  BTFSC  FF2.7
03DDA:  BSF    1B.7
03DDC:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
03DDE:  MOVLB  5
03DE0:  CLRF   x79
03DE2:  MOVFF  534,578
03DE6:  CLRF   x7B
03DE8:  MOVLW  2F
03DEA:  MOVWF  x7A
03DEC:  MOVLB  0
03DEE:  CALL   02F0
03DF2:  BTFSC  1B.7
03DF4:  BSF    FF2.7
03DF6:  MOVF   01,W
03DF8:  ADDLW  4C
03DFA:  MOVLB  5
03DFC:  MOVWF  x35
03DFE:  MOVLW  01
03E00:  ADDWFC 02,W
03E02:  MOVWF  x36
03E04:  MOVLW  01
03E06:  ADDWF  x35,W
03E08:  MOVWF  01
03E0A:  MOVLW  00
03E0C:  ADDWFC x36,W
03E0E:  MOVWF  03
03E10:  MOVF   01,W
03E12:  ADDLW  3E
03E14:  MOVWF  01
03E16:  MOVLW  01
03E18:  ADDWFC 03,F
03E1A:  MOVF   01,W
03E1C:  ADDLW  1C
03E1E:  MOVWF  FE9
03E20:  MOVLW  00
03E22:  ADDWFC 03,W
03E24:  MOVWF  FEA
03E26:  MOVFF  533,FEF
03E2A:  CLRF   1B
03E2C:  BTFSC  FF2.7
03E2E:  BSF    1B.7
03E30:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
03E32:  CLRF   x79
03E34:  MOVFF  534,578
03E38:  CLRF   x7B
03E3A:  MOVLW  2F
03E3C:  MOVWF  x7A
03E3E:  MOVLB  0
03E40:  CALL   02F0
03E44:  BTFSC  1B.7
03E46:  BSF    FF2.7
03E48:  MOVF   01,W
03E4A:  ADDLW  4C
03E4C:  MOVLB  5
03E4E:  MOVWF  x35
03E50:  MOVLW  01
03E52:  ADDWFC 02,W
03E54:  MOVWF  x36
03E56:  MOVLW  01
03E58:  ADDWF  x35,W
03E5A:  MOVWF  01
03E5C:  MOVLW  00
03E5E:  ADDWFC x36,W
03E60:  MOVWF  03
03E62:  MOVF   01,W
03E64:  ADDLW  3E
03E66:  MOVWF  01
03E68:  MOVLW  01
03E6A:  ADDWFC 03,F
03E6C:  MOVF   01,W
03E6E:  ADDLW  1D
03E70:  MOVWF  FE9
03E72:  MOVLW  00
03E74:  ADDWFC 03,W
03E76:  MOVWF  FEA
03E78:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
03E7A:  BRA    4094
03E7C:  MOVLB  0
03E7E:  CLRF   1B
03E80:  BTFSC  FF2.7
03E82:  BSF    1B.7
03E84:  BCF    FF2.7
03E86:  MOVLB  5
03E88:  CLRF   x79
03E8A:  MOVFF  534,578
03E8E:  CLRF   x7B
03E90:  MOVLW  2F
03E92:  MOVWF  x7A
03E94:  MOVLB  0
03E96:  CALL   02F0
03E9A:  BTFSC  1B.7
03E9C:  BSF    FF2.7
03E9E:  MOVF   01,W
03EA0:  ADDLW  4C
03EA2:  MOVLB  5
03EA4:  MOVWF  x35
03EA6:  MOVLW  01
03EA8:  ADDWFC 02,W
03EAA:  MOVWF  x36
03EAC:  MOVLW  01
03EAE:  ADDWF  x35,W
03EB0:  MOVWF  01
03EB2:  MOVLW  00
03EB4:  ADDWFC x36,W
03EB6:  MOVWF  03
03EB8:  MOVF   01,W
03EBA:  ADDLW  3E
03EBC:  MOVWF  01
03EBE:  MOVLW  01
03EC0:  ADDWFC 03,F
03EC2:  MOVFF  01,537
03EC6:  MOVFF  03,538
03ECA:  MOVFF  03,53A
03ECE:  MOVFF  01,539
03ED2:  MOVFF  532,53B
03ED6:  MOVLB  0
03ED8:  RCALL  3CE0
03EDA:  MOVF   01,F
03EDC:  BZ    3F86
03EDE:  CLRF   1B
03EE0:  BTFSC  FF2.7
03EE2:  BSF    1B.7
03EE4:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
03EE6:  MOVLB  5
03EE8:  CLRF   x79
03EEA:  MOVFF  534,578
03EEE:  CLRF   x7B
03EF0:  MOVLW  2F
03EF2:  MOVWF  x7A
03EF4:  MOVLB  0
03EF6:  CALL   02F0
03EFA:  BTFSC  1B.7
03EFC:  BSF    FF2.7
03EFE:  MOVF   01,W
03F00:  ADDLW  4C
03F02:  MOVLB  5
03F04:  MOVWF  x35
03F06:  MOVLW  01
03F08:  ADDWFC 02,W
03F0A:  MOVWF  x36
03F0C:  MOVLW  01
03F0E:  ADDWF  x35,W
03F10:  MOVWF  01
03F12:  MOVLW  00
03F14:  ADDWFC x36,W
03F16:  MOVWF  03
03F18:  MOVF   01,W
03F1A:  ADDLW  3E
03F1C:  MOVWF  01
03F1E:  MOVLW  01
03F20:  ADDWFC 03,F
03F22:  MOVF   01,W
03F24:  ADDLW  08
03F26:  MOVWF  FE9
03F28:  MOVLW  00
03F2A:  ADDWFC 03,W
03F2C:  MOVWF  FEA
03F2E:  MOVFF  533,FEF
03F32:  CLRF   1B
03F34:  BTFSC  FF2.7
03F36:  BSF    1B.7
03F38:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
03F3A:  CLRF   x79
03F3C:  MOVFF  534,578
03F40:  CLRF   x7B
03F42:  MOVLW  2F
03F44:  MOVWF  x7A
03F46:  MOVLB  0
03F48:  CALL   02F0
03F4C:  BTFSC  1B.7
03F4E:  BSF    FF2.7
03F50:  MOVF   01,W
03F52:  ADDLW  4C
03F54:  MOVLB  5
03F56:  MOVWF  x35
03F58:  MOVLW  01
03F5A:  ADDWFC 02,W
03F5C:  MOVWF  x36
03F5E:  MOVLW  01
03F60:  ADDWF  x35,W
03F62:  MOVWF  01
03F64:  MOVLW  00
03F66:  ADDWFC x36,W
03F68:  MOVWF  03
03F6A:  MOVF   01,W
03F6C:  ADDLW  3E
03F6E:  MOVWF  01
03F70:  MOVLW  01
03F72:  ADDWFC 03,F
03F74:  MOVF   01,W
03F76:  ADDLW  09
03F78:  MOVWF  FE9
03F7A:  MOVLW  00
03F7C:  ADDWFC 03,W
03F7E:  MOVWF  FEA
03F80:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
03F82:  BRA    4094
03F84:  MOVLB  0
03F86:  CLRF   1B
03F88:  BTFSC  FF2.7
03F8A:  BSF    1B.7
03F8C:  BCF    FF2.7
03F8E:  MOVLB  5
03F90:  CLRF   x79
03F92:  MOVFF  534,578
03F96:  CLRF   x7B
03F98:  MOVLW  2F
03F9A:  MOVWF  x7A
03F9C:  MOVLB  0
03F9E:  CALL   02F0
03FA2:  BTFSC  1B.7
03FA4:  BSF    FF2.7
03FA6:  MOVF   01,W
03FA8:  ADDLW  4C
03FAA:  MOVLB  5
03FAC:  MOVWF  x35
03FAE:  MOVLW  01
03FB0:  ADDWFC 02,W
03FB2:  MOVWF  x36
03FB4:  MOVLW  01
03FB6:  ADDWF  x35,W
03FB8:  MOVWF  01
03FBA:  MOVLW  00
03FBC:  ADDWFC x36,W
03FBE:  MOVWF  03
03FC0:  MOVF   01,W
03FC2:  ADDLW  3E
03FC4:  MOVWF  01
03FC6:  MOVLW  01
03FC8:  ADDWFC 03,F
03FCA:  MOVF   01,W
03FCC:  ADDLW  0A
03FCE:  MOVWF  01
03FD0:  MOVLW  00
03FD2:  ADDWFC 03,F
03FD4:  MOVFF  01,537
03FD8:  MOVFF  03,538
03FDC:  MOVFF  03,53A
03FE0:  MOVFF  01,539
03FE4:  MOVFF  532,53B
03FE8:  MOVLB  0
03FEA:  RCALL  3CE0
03FEC:  MOVF   01,F
03FEE:  BZ    4096
03FF0:  CLRF   1B
03FF2:  BTFSC  FF2.7
03FF4:  BSF    1B.7
03FF6:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .off.value = value; 
03FF8:  MOVLB  5
03FFA:  CLRF   x79
03FFC:  MOVFF  534,578
04000:  CLRF   x7B
04002:  MOVLW  2F
04004:  MOVWF  x7A
04006:  MOVLB  0
04008:  CALL   02F0
0400C:  BTFSC  1B.7
0400E:  BSF    FF2.7
04010:  MOVF   01,W
04012:  ADDLW  4C
04014:  MOVLB  5
04016:  MOVWF  x35
04018:  MOVLW  01
0401A:  ADDWFC 02,W
0401C:  MOVWF  x36
0401E:  MOVLW  01
04020:  ADDWF  x35,W
04022:  MOVWF  01
04024:  MOVLW  00
04026:  ADDWFC x36,W
04028:  MOVWF  03
0402A:  MOVF   01,W
0402C:  ADDLW  3E
0402E:  MOVWF  01
04030:  MOVLW  01
04032:  ADDWFC 03,F
04034:  MOVF   01,W
04036:  ADDLW  12
04038:  MOVWF  FE9
0403A:  MOVLW  00
0403C:  ADDWFC 03,W
0403E:  MOVWF  FEA
04040:  MOVFF  533,FEF
04044:  CLRF   1B
04046:  BTFSC  FF2.7
04048:  BSF    1B.7
0404A:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .off.needs_update = true; 
0404C:  CLRF   x79
0404E:  MOVFF  534,578
04052:  CLRF   x7B
04054:  MOVLW  2F
04056:  MOVWF  x7A
04058:  MOVLB  0
0405A:  CALL   02F0
0405E:  BTFSC  1B.7
04060:  BSF    FF2.7
04062:  MOVF   01,W
04064:  ADDLW  4C
04066:  MOVLB  5
04068:  MOVWF  x35
0406A:  MOVLW  01
0406C:  ADDWFC 02,W
0406E:  MOVWF  x36
04070:  MOVLW  01
04072:  ADDWF  x35,W
04074:  MOVWF  01
04076:  MOVLW  00
04078:  ADDWFC x36,W
0407A:  MOVWF  03
0407C:  MOVF   01,W
0407E:  ADDLW  3E
04080:  MOVWF  01
04082:  MOVLW  01
04084:  ADDWFC 03,F
04086:  MOVF   01,W
04088:  ADDLW  13
0408A:  MOVWF  FE9
0408C:  MOVLW  00
0408E:  ADDWFC 03,W
04090:  MOVWF  FEA
04092:  BSF    FEF.0
04094:  MOVLB  0
....................          } 
....................  
....................          break; 
04096:  BRA    46F6
....................          case _on_off: 
04098:  CLRF   1B
0409A:  BTFSC  FF2.7
0409C:  BSF    1B.7
0409E:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
040A0:  MOVLB  5
040A2:  CLRF   x79
040A4:  MOVFF  534,578
040A8:  CLRF   x7B
040AA:  MOVLW  2F
040AC:  MOVWF  x7A
040AE:  MOVLB  0
040B0:  CALL   02F0
040B4:  BTFSC  1B.7
040B6:  BSF    FF2.7
040B8:  MOVF   01,W
040BA:  ADDLW  4C
040BC:  MOVLB  5
040BE:  MOVWF  x35
040C0:  MOVLW  01
040C2:  ADDWFC 02,W
040C4:  MOVWF  x36
040C6:  MOVLW  01
040C8:  ADDWF  x35,W
040CA:  MOVWF  01
040CC:  MOVLW  00
040CE:  ADDWFC x36,W
040D0:  MOVWF  03
040D2:  MOVF   01,W
040D4:  ADDLW  3E
040D6:  MOVWF  01
040D8:  MOVLW  01
040DA:  ADDWFC 03,F
040DC:  MOVFF  01,537
040E0:  MOVFF  03,538
040E4:  MOVFF  03,53A
040E8:  MOVFF  01,539
040EC:  MOVFF  532,53B
040F0:  MOVLB  0
040F2:  RCALL  3CE0
040F4:  MOVF   01,F
040F6:  BZ    41A0
040F8:  CLRF   1B
040FA:  BTFSC  FF2.7
040FC:  BSF    1B.7
040FE:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .on.value = value; 
04100:  MOVLB  5
04102:  CLRF   x79
04104:  MOVFF  534,578
04108:  CLRF   x7B
0410A:  MOVLW  2F
0410C:  MOVWF  x7A
0410E:  MOVLB  0
04110:  CALL   02F0
04114:  BTFSC  1B.7
04116:  BSF    FF2.7
04118:  MOVF   01,W
0411A:  ADDLW  4C
0411C:  MOVLB  5
0411E:  MOVWF  x35
04120:  MOVLW  01
04122:  ADDWFC 02,W
04124:  MOVWF  x36
04126:  MOVLW  01
04128:  ADDWF  x35,W
0412A:  MOVWF  01
0412C:  MOVLW  00
0412E:  ADDWFC x36,W
04130:  MOVWF  03
04132:  MOVF   01,W
04134:  ADDLW  3E
04136:  MOVWF  01
04138:  MOVLW  01
0413A:  ADDWFC 03,F
0413C:  MOVF   01,W
0413E:  ADDLW  08
04140:  MOVWF  FE9
04142:  MOVLW  00
04144:  ADDWFC 03,W
04146:  MOVWF  FEA
04148:  MOVFF  533,FEF
0414C:  CLRF   1B
0414E:  BTFSC  FF2.7
04150:  BSF    1B.7
04152:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .on.needs_update = true; 
04154:  CLRF   x79
04156:  MOVFF  534,578
0415A:  CLRF   x7B
0415C:  MOVLW  2F
0415E:  MOVWF  x7A
04160:  MOVLB  0
04162:  CALL   02F0
04166:  BTFSC  1B.7
04168:  BSF    FF2.7
0416A:  MOVF   01,W
0416C:  ADDLW  4C
0416E:  MOVLB  5
04170:  MOVWF  x35
04172:  MOVLW  01
04174:  ADDWFC 02,W
04176:  MOVWF  x36
04178:  MOVLW  01
0417A:  ADDWF  x35,W
0417C:  MOVWF  01
0417E:  MOVLW  00
04180:  ADDWFC x36,W
04182:  MOVWF  03
04184:  MOVF   01,W
04186:  ADDLW  3E
04188:  MOVWF  01
0418A:  MOVLW  01
0418C:  ADDWFC 03,F
0418E:  MOVF   01,W
04190:  ADDLW  09
04192:  MOVWF  FE9
04194:  MOVLW  00
04196:  ADDWFC 03,W
04198:  MOVWF  FEA
0419A:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
0419C:  BRA    42AE
0419E:  MOVLB  0
041A0:  CLRF   1B
041A2:  BTFSC  FF2.7
041A4:  BSF    1B.7
041A6:  BCF    FF2.7
041A8:  MOVLB  5
041AA:  CLRF   x79
041AC:  MOVFF  534,578
041B0:  CLRF   x7B
041B2:  MOVLW  2F
041B4:  MOVWF  x7A
041B6:  MOVLB  0
041B8:  CALL   02F0
041BC:  BTFSC  1B.7
041BE:  BSF    FF2.7
041C0:  MOVF   01,W
041C2:  ADDLW  4C
041C4:  MOVLB  5
041C6:  MOVWF  x35
041C8:  MOVLW  01
041CA:  ADDWFC 02,W
041CC:  MOVWF  x36
041CE:  MOVLW  01
041D0:  ADDWF  x35,W
041D2:  MOVWF  01
041D4:  MOVLW  00
041D6:  ADDWFC x36,W
041D8:  MOVWF  03
041DA:  MOVF   01,W
041DC:  ADDLW  3E
041DE:  MOVWF  01
041E0:  MOVLW  01
041E2:  ADDWFC 03,F
041E4:  MOVF   01,W
041E6:  ADDLW  0A
041E8:  MOVWF  01
041EA:  MOVLW  00
041EC:  ADDWFC 03,F
041EE:  MOVFF  01,537
041F2:  MOVFF  03,538
041F6:  MOVFF  03,53A
041FA:  MOVFF  01,539
041FE:  MOVFF  532,53B
04202:  MOVLB  0
04204:  RCALL  3CE0
04206:  MOVF   01,F
04208:  BZ    42B0
0420A:  CLRF   1B
0420C:  BTFSC  FF2.7
0420E:  BSF    1B.7
04210:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
04212:  MOVLB  5
04214:  CLRF   x79
04216:  MOVFF  534,578
0421A:  CLRF   x7B
0421C:  MOVLW  2F
0421E:  MOVWF  x7A
04220:  MOVLB  0
04222:  CALL   02F0
04226:  BTFSC  1B.7
04228:  BSF    FF2.7
0422A:  MOVF   01,W
0422C:  ADDLW  4C
0422E:  MOVLB  5
04230:  MOVWF  x35
04232:  MOVLW  01
04234:  ADDWFC 02,W
04236:  MOVWF  x36
04238:  MOVLW  01
0423A:  ADDWF  x35,W
0423C:  MOVWF  01
0423E:  MOVLW  00
04240:  ADDWFC x36,W
04242:  MOVWF  03
04244:  MOVF   01,W
04246:  ADDLW  3E
04248:  MOVWF  01
0424A:  MOVLW  01
0424C:  ADDWFC 03,F
0424E:  MOVF   01,W
04250:  ADDLW  12
04252:  MOVWF  FE9
04254:  MOVLW  00
04256:  ADDWFC 03,W
04258:  MOVWF  FEA
0425A:  MOVFF  533,FEF
0425E:  CLRF   1B
04260:  BTFSC  FF2.7
04262:  BSF    1B.7
04264:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
04266:  CLRF   x79
04268:  MOVFF  534,578
0426C:  CLRF   x7B
0426E:  MOVLW  2F
04270:  MOVWF  x7A
04272:  MOVLB  0
04274:  CALL   02F0
04278:  BTFSC  1B.7
0427A:  BSF    FF2.7
0427C:  MOVF   01,W
0427E:  ADDLW  4C
04280:  MOVLB  5
04282:  MOVWF  x35
04284:  MOVLW  01
04286:  ADDWFC 02,W
04288:  MOVWF  x36
0428A:  MOVLW  01
0428C:  ADDWF  x35,W
0428E:  MOVWF  01
04290:  MOVLW  00
04292:  ADDWFC x36,W
04294:  MOVWF  03
04296:  MOVF   01,W
04298:  ADDLW  3E
0429A:  MOVWF  01
0429C:  MOVLW  01
0429E:  ADDWFC 03,F
042A0:  MOVF   01,W
042A2:  ADDLW  13
042A4:  MOVWF  FE9
042A6:  MOVLW  00
042A8:  ADDWFC 03,W
042AA:  MOVWF  FEA
042AC:  BSF    FEF.0
042AE:  MOVLB  0
....................          } 
....................  
....................          break; 
042B0:  BRA    46F6
....................          case shutter: 
042B2:  CLRF   1B
042B4:  BTFSC  FF2.7
042B6:  BSF    1B.7
042B8:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
042BA:  MOVLB  5
042BC:  CLRF   x79
042BE:  MOVFF  534,578
042C2:  CLRF   x7B
042C4:  MOVLW  2F
042C6:  MOVWF  x7A
042C8:  MOVLB  0
042CA:  CALL   02F0
042CE:  BTFSC  1B.7
042D0:  BSF    FF2.7
042D2:  MOVF   01,W
042D4:  ADDLW  4C
042D6:  MOVLB  5
042D8:  MOVWF  x35
042DA:  MOVLW  01
042DC:  ADDWFC 02,W
042DE:  MOVWF  x36
042E0:  MOVLW  01
042E2:  ADDWF  x35,W
042E4:  MOVWF  01
042E6:  MOVLW  00
042E8:  ADDWFC x36,W
042EA:  MOVWF  03
042EC:  MOVF   01,W
042EE:  ADDLW  3E
042F0:  MOVWF  01
042F2:  MOVLW  01
042F4:  ADDWFC 03,F
042F6:  MOVFF  01,537
042FA:  MOVFF  03,538
042FE:  MOVFF  03,53A
04302:  MOVFF  01,539
04306:  MOVFF  532,53B
0430A:  MOVLB  0
0430C:  RCALL  3CE0
0430E:  MOVF   01,F
04310:  BZ    43BA
04312:  CLRF   1B
04314:  BTFSC  FF2.7
04316:  BSF    1B.7
04318:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
0431A:  MOVLB  5
0431C:  CLRF   x79
0431E:  MOVFF  534,578
04322:  CLRF   x7B
04324:  MOVLW  2F
04326:  MOVWF  x7A
04328:  MOVLB  0
0432A:  CALL   02F0
0432E:  BTFSC  1B.7
04330:  BSF    FF2.7
04332:  MOVF   01,W
04334:  ADDLW  4C
04336:  MOVLB  5
04338:  MOVWF  x35
0433A:  MOVLW  01
0433C:  ADDWFC 02,W
0433E:  MOVWF  x36
04340:  MOVLW  01
04342:  ADDWF  x35,W
04344:  MOVWF  01
04346:  MOVLW  00
04348:  ADDWFC x36,W
0434A:  MOVWF  03
0434C:  MOVF   01,W
0434E:  ADDLW  3E
04350:  MOVWF  01
04352:  MOVLW  01
04354:  ADDWFC 03,F
04356:  MOVF   01,W
04358:  ADDLW  08
0435A:  MOVWF  FE9
0435C:  MOVLW  00
0435E:  ADDWFC 03,W
04360:  MOVWF  FEA
04362:  MOVFF  533,FEF
04366:  CLRF   1B
04368:  BTFSC  FF2.7
0436A:  BSF    1B.7
0436C:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
0436E:  CLRF   x79
04370:  MOVFF  534,578
04374:  CLRF   x7B
04376:  MOVLW  2F
04378:  MOVWF  x7A
0437A:  MOVLB  0
0437C:  CALL   02F0
04380:  BTFSC  1B.7
04382:  BSF    FF2.7
04384:  MOVF   01,W
04386:  ADDLW  4C
04388:  MOVLB  5
0438A:  MOVWF  x35
0438C:  MOVLW  01
0438E:  ADDWFC 02,W
04390:  MOVWF  x36
04392:  MOVLW  01
04394:  ADDWF  x35,W
04396:  MOVWF  01
04398:  MOVLW  00
0439A:  ADDWFC x36,W
0439C:  MOVWF  03
0439E:  MOVF   01,W
043A0:  ADDLW  3E
043A2:  MOVWF  01
043A4:  MOVLW  01
043A6:  ADDWFC 03,F
043A8:  MOVF   01,W
043AA:  ADDLW  09
043AC:  MOVWF  FE9
043AE:  MOVLW  00
043B0:  ADDWFC 03,W
043B2:  MOVWF  FEA
043B4:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
043B6:  BRA    46F0
043B8:  MOVLB  0
043BA:  CLRF   1B
043BC:  BTFSC  FF2.7
043BE:  BSF    1B.7
043C0:  BCF    FF2.7
043C2:  MOVLB  5
043C4:  CLRF   x79
043C6:  MOVFF  534,578
043CA:  CLRF   x7B
043CC:  MOVLW  2F
043CE:  MOVWF  x7A
043D0:  MOVLB  0
043D2:  CALL   02F0
043D6:  BTFSC  1B.7
043D8:  BSF    FF2.7
043DA:  MOVF   01,W
043DC:  ADDLW  4C
043DE:  MOVLB  5
043E0:  MOVWF  x35
043E2:  MOVLW  01
043E4:  ADDWFC 02,W
043E6:  MOVWF  x36
043E8:  MOVLW  01
043EA:  ADDWF  x35,W
043EC:  MOVWF  01
043EE:  MOVLW  00
043F0:  ADDWFC x36,W
043F2:  MOVWF  03
043F4:  MOVF   01,W
043F6:  ADDLW  3E
043F8:  MOVWF  01
043FA:  MOVLW  01
043FC:  ADDWFC 03,F
043FE:  MOVF   01,W
04400:  ADDLW  0A
04402:  MOVWF  01
04404:  MOVLW  00
04406:  ADDWFC 03,F
04408:  MOVFF  01,537
0440C:  MOVFF  03,538
04410:  MOVFF  03,53A
04414:  MOVFF  01,539
04418:  MOVFF  532,53B
0441C:  MOVLB  0
0441E:  RCALL  3CE0
04420:  MOVF   01,F
04422:  BZ    44CC
04424:  CLRF   1B
04426:  BTFSC  FF2.7
04428:  BSF    1B.7
0442A:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
0442C:  MOVLB  5
0442E:  CLRF   x79
04430:  MOVFF  534,578
04434:  CLRF   x7B
04436:  MOVLW  2F
04438:  MOVWF  x7A
0443A:  MOVLB  0
0443C:  CALL   02F0
04440:  BTFSC  1B.7
04442:  BSF    FF2.7
04444:  MOVF   01,W
04446:  ADDLW  4C
04448:  MOVLB  5
0444A:  MOVWF  x35
0444C:  MOVLW  01
0444E:  ADDWFC 02,W
04450:  MOVWF  x36
04452:  MOVLW  01
04454:  ADDWF  x35,W
04456:  MOVWF  01
04458:  MOVLW  00
0445A:  ADDWFC x36,W
0445C:  MOVWF  03
0445E:  MOVF   01,W
04460:  ADDLW  3E
04462:  MOVWF  01
04464:  MOVLW  01
04466:  ADDWFC 03,F
04468:  MOVF   01,W
0446A:  ADDLW  12
0446C:  MOVWF  FE9
0446E:  MOVLW  00
04470:  ADDWFC 03,W
04472:  MOVWF  FEA
04474:  MOVFF  533,FEF
04478:  CLRF   1B
0447A:  BTFSC  FF2.7
0447C:  BSF    1B.7
0447E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
04480:  CLRF   x79
04482:  MOVFF  534,578
04486:  CLRF   x7B
04488:  MOVLW  2F
0448A:  MOVWF  x7A
0448C:  MOVLB  0
0448E:  CALL   02F0
04492:  BTFSC  1B.7
04494:  BSF    FF2.7
04496:  MOVF   01,W
04498:  ADDLW  4C
0449A:  MOVLB  5
0449C:  MOVWF  x35
0449E:  MOVLW  01
044A0:  ADDWFC 02,W
044A2:  MOVWF  x36
044A4:  MOVLW  01
044A6:  ADDWF  x35,W
044A8:  MOVWF  01
044AA:  MOVLW  00
044AC:  ADDWFC x36,W
044AE:  MOVWF  03
044B0:  MOVF   01,W
044B2:  ADDLW  3E
044B4:  MOVWF  01
044B6:  MOVLW  01
044B8:  ADDWFC 03,F
044BA:  MOVF   01,W
044BC:  ADDLW  13
044BE:  MOVWF  FE9
044C0:  MOVLW  00
044C2:  ADDWFC 03,W
044C4:  MOVWF  FEA
044C6:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
044C8:  BRA    46F0
044CA:  MOVLB  0
044CC:  CLRF   1B
044CE:  BTFSC  FF2.7
044D0:  BSF    1B.7
044D2:  BCF    FF2.7
044D4:  MOVLB  5
044D6:  CLRF   x79
044D8:  MOVFF  534,578
044DC:  CLRF   x7B
044DE:  MOVLW  2F
044E0:  MOVWF  x7A
044E2:  MOVLB  0
044E4:  CALL   02F0
044E8:  BTFSC  1B.7
044EA:  BSF    FF2.7
044EC:  MOVF   01,W
044EE:  ADDLW  4C
044F0:  MOVLB  5
044F2:  MOVWF  x35
044F4:  MOVLW  01
044F6:  ADDWFC 02,W
044F8:  MOVWF  x36
044FA:  MOVLW  01
044FC:  ADDWF  x35,W
044FE:  MOVWF  01
04500:  MOVLW  00
04502:  ADDWFC x36,W
04504:  MOVWF  03
04506:  MOVF   01,W
04508:  ADDLW  3E
0450A:  MOVWF  01
0450C:  MOVLW  01
0450E:  ADDWFC 03,F
04510:  MOVF   01,W
04512:  ADDLW  14
04514:  MOVWF  01
04516:  MOVLW  00
04518:  ADDWFC 03,F
0451A:  MOVFF  01,537
0451E:  MOVFF  03,538
04522:  MOVFF  03,53A
04526:  MOVFF  01,539
0452A:  MOVFF  532,53B
0452E:  MOVLB  0
04530:  CALL   3CE0
04534:  MOVF   01,F
04536:  BZ    45E0
04538:  CLRF   1B
0453A:  BTFSC  FF2.7
0453C:  BSF    1B.7
0453E:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
04540:  MOVLB  5
04542:  CLRF   x79
04544:  MOVFF  534,578
04548:  CLRF   x7B
0454A:  MOVLW  2F
0454C:  MOVWF  x7A
0454E:  MOVLB  0
04550:  CALL   02F0
04554:  BTFSC  1B.7
04556:  BSF    FF2.7
04558:  MOVF   01,W
0455A:  ADDLW  4C
0455C:  MOVLB  5
0455E:  MOVWF  x35
04560:  MOVLW  01
04562:  ADDWFC 02,W
04564:  MOVWF  x36
04566:  MOVLW  01
04568:  ADDWF  x35,W
0456A:  MOVWF  01
0456C:  MOVLW  00
0456E:  ADDWFC x36,W
04570:  MOVWF  03
04572:  MOVF   01,W
04574:  ADDLW  3E
04576:  MOVWF  01
04578:  MOVLW  01
0457A:  ADDWFC 03,F
0457C:  MOVF   01,W
0457E:  ADDLW  1C
04580:  MOVWF  FE9
04582:  MOVLW  00
04584:  ADDWFC 03,W
04586:  MOVWF  FEA
04588:  MOVFF  533,FEF
0458C:  CLRF   1B
0458E:  BTFSC  FF2.7
04590:  BSF    1B.7
04592:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
04594:  CLRF   x79
04596:  MOVFF  534,578
0459A:  CLRF   x7B
0459C:  MOVLW  2F
0459E:  MOVWF  x7A
045A0:  MOVLB  0
045A2:  CALL   02F0
045A6:  BTFSC  1B.7
045A8:  BSF    FF2.7
045AA:  MOVF   01,W
045AC:  ADDLW  4C
045AE:  MOVLB  5
045B0:  MOVWF  x35
045B2:  MOVLW  01
045B4:  ADDWFC 02,W
045B6:  MOVWF  x36
045B8:  MOVLW  01
045BA:  ADDWF  x35,W
045BC:  MOVWF  01
045BE:  MOVLW  00
045C0:  ADDWFC x36,W
045C2:  MOVWF  03
045C4:  MOVF   01,W
045C6:  ADDLW  3E
045C8:  MOVWF  01
045CA:  MOVLW  01
045CC:  ADDWFC 03,F
045CE:  MOVF   01,W
045D0:  ADDLW  1D
045D2:  MOVWF  FE9
045D4:  MOVLW  00
045D6:  ADDWFC 03,W
045D8:  MOVWF  FEA
045DA:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
045DC:  BRA    46F0
045DE:  MOVLB  0
045E0:  CLRF   1B
045E2:  BTFSC  FF2.7
045E4:  BSF    1B.7
045E6:  BCF    FF2.7
045E8:  MOVLB  5
045EA:  CLRF   x79
045EC:  MOVFF  534,578
045F0:  CLRF   x7B
045F2:  MOVLW  2F
045F4:  MOVWF  x7A
045F6:  MOVLB  0
045F8:  CALL   02F0
045FC:  BTFSC  1B.7
045FE:  BSF    FF2.7
04600:  MOVF   01,W
04602:  ADDLW  4C
04604:  MOVLB  5
04606:  MOVWF  x35
04608:  MOVLW  01
0460A:  ADDWFC 02,W
0460C:  MOVWF  x36
0460E:  MOVLW  01
04610:  ADDWF  x35,W
04612:  MOVWF  01
04614:  MOVLW  00
04616:  ADDWFC x36,W
04618:  MOVWF  03
0461A:  MOVF   01,W
0461C:  ADDLW  3E
0461E:  MOVWF  01
04620:  MOVLW  01
04622:  ADDWFC 03,F
04624:  MOVF   01,W
04626:  ADDLW  1E
04628:  MOVWF  01
0462A:  MOVLW  00
0462C:  ADDWFC 03,F
0462E:  MOVFF  01,537
04632:  MOVFF  03,538
04636:  MOVFF  03,53A
0463A:  MOVFF  01,539
0463E:  MOVFF  532,53B
04642:  MOVLB  0
04644:  CALL   3CE0
04648:  MOVF   01,F
0464A:  BZ    46F2
0464C:  CLRF   1B
0464E:  BTFSC  FF2.7
04650:  BSF    1B.7
04652:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
04654:  MOVLB  5
04656:  CLRF   x79
04658:  MOVFF  534,578
0465C:  CLRF   x7B
0465E:  MOVLW  2F
04660:  MOVWF  x7A
04662:  MOVLB  0
04664:  CALL   02F0
04668:  BTFSC  1B.7
0466A:  BSF    FF2.7
0466C:  MOVF   01,W
0466E:  ADDLW  4C
04670:  MOVLB  5
04672:  MOVWF  x35
04674:  MOVLW  01
04676:  ADDWFC 02,W
04678:  MOVWF  x36
0467A:  MOVLW  01
0467C:  ADDWF  x35,W
0467E:  MOVWF  01
04680:  MOVLW  00
04682:  ADDWFC x36,W
04684:  MOVWF  03
04686:  MOVF   01,W
04688:  ADDLW  3E
0468A:  MOVWF  01
0468C:  MOVLW  01
0468E:  ADDWFC 03,F
04690:  MOVF   01,W
04692:  ADDLW  26
04694:  MOVWF  FE9
04696:  MOVLW  00
04698:  ADDWFC 03,W
0469A:  MOVWF  FEA
0469C:  MOVFF  533,FEF
046A0:  CLRF   1B
046A2:  BTFSC  FF2.7
046A4:  BSF    1B.7
046A6:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
046A8:  CLRF   x79
046AA:  MOVFF  534,578
046AE:  CLRF   x7B
046B0:  MOVLW  2F
046B2:  MOVWF  x7A
046B4:  MOVLB  0
046B6:  CALL   02F0
046BA:  BTFSC  1B.7
046BC:  BSF    FF2.7
046BE:  MOVF   01,W
046C0:  ADDLW  4C
046C2:  MOVLB  5
046C4:  MOVWF  x35
046C6:  MOVLW  01
046C8:  ADDWFC 02,W
046CA:  MOVWF  x36
046CC:  MOVLW  01
046CE:  ADDWF  x35,W
046D0:  MOVWF  01
046D2:  MOVLW  00
046D4:  ADDWFC x36,W
046D6:  MOVWF  03
046D8:  MOVF   01,W
046DA:  ADDLW  3E
046DC:  MOVWF  01
046DE:  MOVLW  01
046E0:  ADDWFC 03,F
046E2:  MOVF   01,W
046E4:  ADDLW  27
046E6:  MOVWF  FE9
046E8:  MOVLW  00
046EA:  ADDWFC 03,W
046EC:  MOVWF  FEA
046EE:  BSF    FEF.0
046F0:  MOVLB  0
....................          } 
....................  
....................          break; 
046F2:  BRA    46F6
....................          default: 
....................          break; 
046F4:  BRA    46F6
....................       } 
....................    } 
046F6:  MOVLB  5
046F8:  INCF   x34,F
046FA:  GOTO   3D14
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
046FE:  CLRF   x34
04700:  MOVLB  1
04702:  MOVF   x3E,W
04704:  MOVLB  5
04706:  SUBWF  x34,W
04708:  BTFSC  FD8.0
0470A:  BRA    497A
0470C:  CLRF   1B
0470E:  BTFSC  FF2.7
04710:  BSF    1B.7
04712:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
04714:  CLRF   x79
04716:  MOVFF  534,578
0471A:  CLRF   x7B
0471C:  MOVLW  21
0471E:  MOVWF  x7A
04720:  MOVLB  0
04722:  CALL   02F0
04726:  BTFSC  1B.7
04728:  BSF    FF2.7
0472A:  MOVFF  02,03
0472E:  MOVF   01,W
04730:  ADDLW  40
04732:  MOVWF  01
04734:  MOVLW  01
04736:  ADDWFC 03,F
04738:  MOVFF  01,FE9
0473C:  MOVFF  03,FEA
04740:  MOVF   FEF,W
04742:  XORLW  03
04744:  BZ    4748
04746:  BRA    4974
....................          case timer: 
04748:  CLRF   1B
0474A:  BTFSC  FF2.7
0474C:  BSF    1B.7
0474E:  BCF    FF2.7
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
04750:  MOVLB  5
04752:  CLRF   x79
04754:  MOVFF  534,578
04758:  CLRF   x7B
0475A:  MOVLW  21
0475C:  MOVWF  x7A
0475E:  MOVLB  0
04760:  CALL   02F0
04764:  BTFSC  1B.7
04766:  BSF    FF2.7
04768:  MOVF   01,W
0476A:  ADDLW  02
0476C:  MOVLB  5
0476E:  MOVWF  x35
04770:  MOVLW  00
04772:  ADDWFC 02,W
04774:  MOVWF  x36
04776:  MOVLW  01
04778:  ADDWF  x35,W
0477A:  MOVWF  01
0477C:  MOVLW  00
0477E:  ADDWFC x36,W
04780:  MOVWF  03
04782:  MOVF   01,W
04784:  ADDLW  3E
04786:  MOVWF  01
04788:  MOVLW  01
0478A:  ADDWFC 03,F
0478C:  MOVF   01,W
0478E:  ADDLW  09
04790:  MOVWF  01
04792:  MOVLW  00
04794:  ADDWFC 03,F
04796:  MOVFF  01,537
0479A:  MOVFF  03,538
0479E:  MOVFF  03,53A
047A2:  MOVFF  01,539
047A6:  MOVFF  532,53B
047AA:  MOVLB  0
047AC:  CALL   3CE0
047B0:  MOVF   01,F
047B2:  BZ    485E
047B4:  CLRF   1B
047B6:  BTFSC  FF2.7
047B8:  BSF    1B.7
047BA:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
047BC:  MOVLB  5
047BE:  CLRF   x79
047C0:  MOVFF  534,578
047C4:  CLRF   x7B
047C6:  MOVLW  21
047C8:  MOVWF  x7A
047CA:  MOVLB  0
047CC:  CALL   02F0
047D0:  BTFSC  1B.7
047D2:  BSF    FF2.7
047D4:  MOVF   01,W
047D6:  ADDLW  02
047D8:  MOVLB  5
047DA:  MOVWF  x35
047DC:  MOVLW  00
047DE:  ADDWFC 02,W
047E0:  MOVWF  x36
047E2:  MOVLW  01
047E4:  ADDWF  x35,W
047E6:  MOVWF  01
047E8:  MOVLW  00
047EA:  ADDWFC x36,W
047EC:  MOVWF  03
047EE:  MOVF   01,W
047F0:  ADDLW  3E
047F2:  MOVWF  01
047F4:  MOVLW  01
047F6:  ADDWFC 03,F
047F8:  MOVF   01,W
047FA:  ADDLW  1D
047FC:  MOVWF  FE9
047FE:  MOVLW  00
04800:  ADDWFC 03,W
04802:  MOVWF  FEA
04804:  CLRF   FEC
04806:  MOVF   FED,F
04808:  CLRF   FEF
0480A:  CLRF   1B
0480C:  BTFSC  FF2.7
0480E:  BSF    1B.7
04810:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
04812:  CLRF   x79
04814:  MOVFF  534,578
04818:  CLRF   x7B
0481A:  MOVLW  21
0481C:  MOVWF  x7A
0481E:  MOVLB  0
04820:  CALL   02F0
04824:  BTFSC  1B.7
04826:  BSF    FF2.7
04828:  MOVF   01,W
0482A:  ADDLW  02
0482C:  MOVLB  5
0482E:  MOVWF  x35
04830:  MOVLW  00
04832:  ADDWFC 02,W
04834:  MOVWF  x36
04836:  MOVLW  01
04838:  ADDWF  x35,W
0483A:  MOVWF  01
0483C:  MOVLW  00
0483E:  ADDWFC x36,W
04840:  MOVWF  03
04842:  MOVF   01,W
04844:  ADDLW  3E
04846:  MOVWF  01
04848:  MOVLW  01
0484A:  ADDWFC 03,F
0484C:  MOVF   01,W
0484E:  ADDLW  1F
04850:  MOVWF  FE9
04852:  MOVLW  00
04854:  ADDWFC 03,W
04856:  MOVWF  FEA
04858:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
0485A:  BRA    4970
0485C:  MOVLB  0
0485E:  CLRF   1B
04860:  BTFSC  FF2.7
04862:  BSF    1B.7
04864:  BCF    FF2.7
04866:  MOVLB  5
04868:  CLRF   x79
0486A:  MOVFF  534,578
0486E:  CLRF   x7B
04870:  MOVLW  21
04872:  MOVWF  x7A
04874:  MOVLB  0
04876:  CALL   02F0
0487A:  BTFSC  1B.7
0487C:  BSF    FF2.7
0487E:  MOVF   01,W
04880:  ADDLW  02
04882:  MOVLB  5
04884:  MOVWF  x35
04886:  MOVLW  00
04888:  ADDWFC 02,W
0488A:  MOVWF  x36
0488C:  MOVLW  01
0488E:  ADDWF  x35,W
04890:  MOVWF  01
04892:  MOVLW  00
04894:  ADDWFC x36,W
04896:  MOVWF  03
04898:  MOVF   01,W
0489A:  ADDLW  3E
0489C:  MOVWF  01
0489E:  MOVLW  01
048A0:  ADDWFC 03,F
048A2:  MOVF   01,W
048A4:  ADDLW  13
048A6:  MOVWF  01
048A8:  MOVLW  00
048AA:  ADDWFC 03,F
048AC:  MOVFF  01,537
048B0:  MOVFF  03,538
048B4:  MOVFF  03,53A
048B8:  MOVFF  01,539
048BC:  MOVFF  532,53B
048C0:  MOVLB  0
048C2:  CALL   3CE0
048C6:  MOVF   01,F
048C8:  BZ    4972
048CA:  CLRF   1B
048CC:  BTFSC  FF2.7
048CE:  BSF    1B.7
048D0:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
048D2:  MOVLB  5
048D4:  CLRF   x79
048D6:  MOVFF  534,578
048DA:  CLRF   x7B
048DC:  MOVLW  21
048DE:  MOVWF  x7A
048E0:  MOVLB  0
048E2:  CALL   02F0
048E6:  BTFSC  1B.7
048E8:  BSF    FF2.7
048EA:  MOVF   01,W
048EC:  ADDLW  02
048EE:  MOVLB  5
048F0:  MOVWF  x35
048F2:  MOVLW  00
048F4:  ADDWFC 02,W
048F6:  MOVWF  x36
048F8:  MOVLW  01
048FA:  ADDWF  x35,W
048FC:  MOVWF  01
048FE:  MOVLW  00
04900:  ADDWFC x36,W
04902:  MOVWF  03
04904:  MOVF   01,W
04906:  ADDLW  3E
04908:  MOVWF  01
0490A:  MOVLW  01
0490C:  ADDWFC 03,F
0490E:  MOVF   01,W
04910:  ADDLW  1D
04912:  MOVWF  FE9
04914:  MOVLW  00
04916:  ADDWFC 03,W
04918:  MOVWF  FEA
0491A:  CLRF   FEC
0491C:  MOVF   FED,F
0491E:  CLRF   FEF
04920:  CLRF   1B
04922:  BTFSC  FF2.7
04924:  BSF    1B.7
04926:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
04928:  CLRF   x79
0492A:  MOVFF  534,578
0492E:  CLRF   x7B
04930:  MOVLW  21
04932:  MOVWF  x7A
04934:  MOVLB  0
04936:  CALL   02F0
0493A:  BTFSC  1B.7
0493C:  BSF    FF2.7
0493E:  MOVF   01,W
04940:  ADDLW  02
04942:  MOVLB  5
04944:  MOVWF  x35
04946:  MOVLW  00
04948:  ADDWFC 02,W
0494A:  MOVWF  x36
0494C:  MOVLW  01
0494E:  ADDWF  x35,W
04950:  MOVWF  01
04952:  MOVLW  00
04954:  ADDWFC x36,W
04956:  MOVWF  03
04958:  MOVF   01,W
0495A:  ADDLW  3E
0495C:  MOVWF  01
0495E:  MOVLW  01
04960:  ADDWFC 03,F
04962:  MOVF   01,W
04964:  ADDLW  1F
04966:  MOVWF  FE9
04968:  MOVLW  00
0496A:  ADDWFC 03,W
0496C:  MOVWF  FEA
0496E:  BCF    FEF.0
04970:  MOVLB  0
....................          } 
....................          break; 
04972:  BRA    4974
....................       } 
....................    } 
04974:  MOVLB  5
04976:  INCF   x34,F
04978:  BRA    4700
....................           
.................... } 
0497A:  MOVLB  0
0497C:  GOTO   498C (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
04980:  MOVFF  530,532
04984:  MOVFF  531,533
04988:  GOTO   3D10
....................    //TODO CAN Sending of values 
.................... } 
0498C:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
0498E:  MOVLB  5
04990:  CLRF   x29
04992:  MOVLB  1
04994:  MOVF   x3E,W
04996:  MOVLB  5
04998:  SUBWF  x29,W
0499A:  BTFSC  FD8.0
0499C:  GOTO   58D0
049A0:  CLRF   1B
049A2:  BTFSC  FF2.7
049A4:  BSF    1B.7
049A6:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
049A8:  CLRF   x79
049AA:  MOVFF  529,578
049AE:  CLRF   x7B
049B0:  MOVLW  21
049B2:  MOVWF  x7A
049B4:  MOVLB  0
049B6:  CALL   02F0
049BA:  BTFSC  1B.7
049BC:  BSF    FF2.7
049BE:  MOVFF  02,03
049C2:  MOVF   01,W
049C4:  ADDLW  40
049C6:  MOVWF  01
049C8:  MOVLW  01
049CA:  ADDWFC 03,F
049CC:  MOVFF  01,FE9
049D0:  MOVFF  03,FEA
049D4:  MOVF   FEF,W
049D6:  BZ    49F2
049D8:  XORLW  02
049DA:  BTFSC  FD8.2
049DC:  BRA    4EE0
049DE:  XORLW  03
049E0:  BTFSC  FD8.2
049E2:  GOTO   522A
049E6:  XORLW  02
049E8:  BTFSC  FD8.2
049EA:  GOTO   5576
049EE:  GOTO   58C6
....................          case dimmer_switch: 
049F2:  CLRF   1B
049F4:  BTFSC  FF2.7
049F6:  BSF    1B.7
049F8:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
049FA:  MOVLB  5
049FC:  CLRF   x79
049FE:  MOVFF  529,578
04A02:  CLRF   x7B
04A04:  MOVLW  21
04A06:  MOVWF  x7A
04A08:  MOVLB  0
04A0A:  CALL   02F0
04A0E:  BTFSC  1B.7
04A10:  BSF    FF2.7
04A12:  MOVF   01,W
04A14:  ADDLW  02
04A16:  MOVLB  5
04A18:  MOVWF  x2A
04A1A:  MOVLW  00
04A1C:  ADDWFC 02,W
04A1E:  MOVWF  x2B
04A20:  MOVLW  01
04A22:  ADDWF  x2A,W
04A24:  MOVWF  01
04A26:  MOVLW  00
04A28:  ADDWFC x2B,W
04A2A:  MOVWF  03
04A2C:  MOVF   01,W
04A2E:  ADDLW  3E
04A30:  MOVWF  01
04A32:  MOVLW  01
04A34:  ADDWFC 03,F
04A36:  MOVF   01,W
04A38:  ADDLW  02
04A3A:  MOVWF  FE9
04A3C:  MOVLW  00
04A3E:  ADDWFC 03,W
04A40:  MOVWF  FEA
04A42:  BTFSS  FEF.0
04A44:  BRA    4B94
04A46:  CLRF   1B
04A48:  BTFSC  FF2.7
04A4A:  BSF    1B.7
04A4C:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
04A4E:  CLRF   x79
04A50:  MOVFF  529,578
04A54:  CLRF   x7B
04A56:  MOVLW  21
04A58:  MOVWF  x7A
04A5A:  MOVLB  0
04A5C:  CALL   02F0
04A60:  BTFSC  1B.7
04A62:  BSF    FF2.7
04A64:  MOVF   01,W
04A66:  ADDLW  02
04A68:  MOVLB  5
04A6A:  MOVWF  x2A
04A6C:  MOVLW  00
04A6E:  ADDWFC 02,W
04A70:  MOVWF  x2B
04A72:  MOVLW  01
04A74:  ADDWF  x2A,W
04A76:  MOVWF  01
04A78:  MOVLW  00
04A7A:  ADDWFC x2B,W
04A7C:  MOVWF  03
04A7E:  MOVF   01,W
04A80:  ADDLW  3E
04A82:  MOVWF  01
04A84:  MOVLW  01
04A86:  ADDWFC 03,F
04A88:  MOVFF  01,FE9
04A8C:  MOVFF  03,FEA
04A90:  MOVFF  FEF,52C
04A94:  CLRF   1B
04A96:  BTFSC  FF2.7
04A98:  BSF    1B.7
04A9A:  BCF    FF2.7
04A9C:  CLRF   x79
04A9E:  MOVFF  529,578
04AA2:  CLRF   x7B
04AA4:  MOVLW  21
04AA6:  MOVWF  x7A
04AA8:  MOVLB  0
04AAA:  CALL   02F0
04AAE:  BTFSC  1B.7
04AB0:  BSF    FF2.7
04AB2:  MOVF   01,W
04AB4:  ADDLW  02
04AB6:  MOVLB  5
04AB8:  MOVWF  x2D
04ABA:  MOVLW  00
04ABC:  ADDWFC 02,W
04ABE:  MOVWF  x2E
04AC0:  MOVLW  01
04AC2:  ADDWF  x2D,W
04AC4:  MOVWF  01
04AC6:  MOVLW  00
04AC8:  ADDWFC x2E,W
04ACA:  MOVWF  03
04ACC:  MOVF   01,W
04ACE:  ADDLW  3E
04AD0:  MOVWF  01
04AD2:  MOVLW  01
04AD4:  ADDWFC 03,F
04AD6:  MOVF   01,W
04AD8:  ADDLW  01
04ADA:  MOVWF  FE9
04ADC:  MOVLW  00
04ADE:  ADDWFC 03,W
04AE0:  MOVWF  FEA
04AE2:  MOVFF  FEF,52F
04AE6:  MOVFF  52C,530
04AEA:  MOVFF  52F,531
04AEE:  MOVLB  0
04AF0:  RCALL  4980
04AF2:  CLRF   1B
04AF4:  BTFSC  FF2.7
04AF6:  BSF    1B.7
04AF8:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
04AFA:  MOVLB  5
04AFC:  CLRF   x79
04AFE:  MOVFF  529,578
04B02:  CLRF   x7B
04B04:  MOVLW  21
04B06:  MOVWF  x7A
04B08:  MOVLB  0
04B0A:  CALL   02F0
04B0E:  BTFSC  1B.7
04B10:  BSF    FF2.7
04B12:  MOVF   01,W
04B14:  ADDLW  02
04B16:  MOVLB  5
04B18:  MOVWF  x2A
04B1A:  MOVLW  00
04B1C:  ADDWFC 02,W
04B1E:  MOVWF  x2B
04B20:  MOVLW  01
04B22:  ADDWF  x2A,W
04B24:  MOVWF  01
04B26:  MOVLW  00
04B28:  ADDWFC x2B,W
04B2A:  MOVWF  03
04B2C:  MOVF   01,W
04B2E:  ADDLW  3E
04B30:  MOVWF  01
04B32:  MOVLW  01
04B34:  ADDWFC 03,F
04B36:  MOVF   01,W
04B38:  ADDLW  02
04B3A:  MOVWF  FE9
04B3C:  MOVLW  00
04B3E:  ADDWFC 03,W
04B40:  MOVWF  FEA
04B42:  BCF    FEF.0
04B44:  CLRF   1B
04B46:  BTFSC  FF2.7
04B48:  BSF    1B.7
04B4A:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
04B4C:  CLRF   x79
04B4E:  MOVFF  529,578
04B52:  CLRF   x7B
04B54:  MOVLW  21
04B56:  MOVWF  x7A
04B58:  MOVLB  0
04B5A:  CALL   02F0
04B5E:  BTFSC  1B.7
04B60:  BSF    FF2.7
04B62:  MOVF   01,W
04B64:  ADDLW  02
04B66:  MOVLB  5
04B68:  MOVWF  x2A
04B6A:  MOVLW  00
04B6C:  ADDWFC 02,W
04B6E:  MOVWF  x2B
04B70:  MOVLW  01
04B72:  ADDWF  x2A,W
04B74:  MOVWF  01
04B76:  MOVLW  00
04B78:  ADDWFC x2B,W
04B7A:  MOVWF  03
04B7C:  MOVF   01,W
04B7E:  ADDLW  3E
04B80:  MOVWF  01
04B82:  MOVLW  01
04B84:  ADDWFC 03,F
04B86:  MOVF   01,W
04B88:  ADDLW  01
04B8A:  MOVWF  FE9
04B8C:  MOVLW  00
04B8E:  ADDWFC 03,W
04B90:  MOVWF  FEA
04B92:  CLRF   FEF
04B94:  CLRF   1B
04B96:  BTFSC  FF2.7
04B98:  BSF    1B.7
04B9A:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
04B9C:  CLRF   x79
04B9E:  MOVFF  529,578
04BA2:  CLRF   x7B
04BA4:  MOVLW  21
04BA6:  MOVWF  x7A
04BA8:  MOVLB  0
04BAA:  CALL   02F0
04BAE:  BTFSC  1B.7
04BB0:  BSF    FF2.7
04BB2:  MOVF   01,W
04BB4:  ADDLW  02
04BB6:  MOVLB  5
04BB8:  MOVWF  x2A
04BBA:  MOVLW  00
04BBC:  ADDWFC 02,W
04BBE:  MOVWF  x2B
04BC0:  MOVLW  01
04BC2:  ADDWF  x2A,W
04BC4:  MOVWF  01
04BC6:  MOVLW  00
04BC8:  ADDWFC x2B,W
04BCA:  MOVWF  03
04BCC:  MOVF   01,W
04BCE:  ADDLW  3E
04BD0:  MOVWF  01
04BD2:  MOVLW  01
04BD4:  ADDWFC 03,F
04BD6:  MOVF   01,W
04BD8:  ADDLW  05
04BDA:  MOVWF  FE9
04BDC:  MOVLW  00
04BDE:  ADDWFC 03,W
04BE0:  MOVWF  FEA
04BE2:  BTFSS  FEF.0
04BE4:  BRA    4D38
04BE6:  CLRF   1B
04BE8:  BTFSC  FF2.7
04BEA:  BSF    1B.7
04BEC:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
04BEE:  CLRF   x79
04BF0:  MOVFF  529,578
04BF4:  CLRF   x7B
04BF6:  MOVLW  21
04BF8:  MOVWF  x7A
04BFA:  MOVLB  0
04BFC:  CALL   02F0
04C00:  BTFSC  1B.7
04C02:  BSF    FF2.7
04C04:  MOVF   01,W
04C06:  ADDLW  02
04C08:  MOVLB  5
04C0A:  MOVWF  x2A
04C0C:  MOVLW  00
04C0E:  ADDWFC 02,W
04C10:  MOVWF  x2B
04C12:  MOVLW  01
04C14:  ADDWF  x2A,W
04C16:  MOVWF  01
04C18:  MOVLW  00
04C1A:  ADDWFC x2B,W
04C1C:  MOVWF  03
04C1E:  MOVF   01,W
04C20:  ADDLW  3E
04C22:  MOVWF  01
04C24:  MOVLW  01
04C26:  ADDWFC 03,F
04C28:  MOVF   01,W
04C2A:  ADDLW  03
04C2C:  MOVWF  FE9
04C2E:  MOVLW  00
04C30:  ADDWFC 03,W
04C32:  MOVWF  FEA
04C34:  MOVFF  FEF,52C
04C38:  CLRF   1B
04C3A:  BTFSC  FF2.7
04C3C:  BSF    1B.7
04C3E:  BCF    FF2.7
04C40:  CLRF   x79
04C42:  MOVFF  529,578
04C46:  CLRF   x7B
04C48:  MOVLW  21
04C4A:  MOVWF  x7A
04C4C:  MOVLB  0
04C4E:  CALL   02F0
04C52:  BTFSC  1B.7
04C54:  BSF    FF2.7
04C56:  MOVF   01,W
04C58:  ADDLW  02
04C5A:  MOVLB  5
04C5C:  MOVWF  x2D
04C5E:  MOVLW  00
04C60:  ADDWFC 02,W
04C62:  MOVWF  x2E
04C64:  MOVLW  01
04C66:  ADDWF  x2D,W
04C68:  MOVWF  01
04C6A:  MOVLW  00
04C6C:  ADDWFC x2E,W
04C6E:  MOVWF  03
04C70:  MOVF   01,W
04C72:  ADDLW  3E
04C74:  MOVWF  01
04C76:  MOVLW  01
04C78:  ADDWFC 03,F
04C7A:  MOVF   01,W
04C7C:  ADDLW  04
04C7E:  MOVWF  FE9
04C80:  MOVLW  00
04C82:  ADDWFC 03,W
04C84:  MOVWF  FEA
04C86:  MOVFF  FEF,52F
04C8A:  MOVFF  52C,530
04C8E:  MOVFF  52F,531
04C92:  MOVLB  0
04C94:  RCALL  4980
04C96:  CLRF   1B
04C98:  BTFSC  FF2.7
04C9A:  BSF    1B.7
04C9C:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
04C9E:  MOVLB  5
04CA0:  CLRF   x79
04CA2:  MOVFF  529,578
04CA6:  CLRF   x7B
04CA8:  MOVLW  21
04CAA:  MOVWF  x7A
04CAC:  MOVLB  0
04CAE:  CALL   02F0
04CB2:  BTFSC  1B.7
04CB4:  BSF    FF2.7
04CB6:  MOVF   01,W
04CB8:  ADDLW  02
04CBA:  MOVLB  5
04CBC:  MOVWF  x2A
04CBE:  MOVLW  00
04CC0:  ADDWFC 02,W
04CC2:  MOVWF  x2B
04CC4:  MOVLW  01
04CC6:  ADDWF  x2A,W
04CC8:  MOVWF  01
04CCA:  MOVLW  00
04CCC:  ADDWFC x2B,W
04CCE:  MOVWF  03
04CD0:  MOVF   01,W
04CD2:  ADDLW  3E
04CD4:  MOVWF  01
04CD6:  MOVLW  01
04CD8:  ADDWFC 03,F
04CDA:  MOVF   01,W
04CDC:  ADDLW  05
04CDE:  MOVWF  FE9
04CE0:  MOVLW  00
04CE2:  ADDWFC 03,W
04CE4:  MOVWF  FEA
04CE6:  BCF    FEF.0
04CE8:  CLRF   1B
04CEA:  BTFSC  FF2.7
04CEC:  BSF    1B.7
04CEE:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
04CF0:  CLRF   x79
04CF2:  MOVFF  529,578
04CF6:  CLRF   x7B
04CF8:  MOVLW  21
04CFA:  MOVWF  x7A
04CFC:  MOVLB  0
04CFE:  CALL   02F0
04D02:  BTFSC  1B.7
04D04:  BSF    FF2.7
04D06:  MOVF   01,W
04D08:  ADDLW  02
04D0A:  MOVLB  5
04D0C:  MOVWF  x2A
04D0E:  MOVLW  00
04D10:  ADDWFC 02,W
04D12:  MOVWF  x2B
04D14:  MOVLW  01
04D16:  ADDWF  x2A,W
04D18:  MOVWF  01
04D1A:  MOVLW  00
04D1C:  ADDWFC x2B,W
04D1E:  MOVWF  03
04D20:  MOVF   01,W
04D22:  ADDLW  3E
04D24:  MOVWF  01
04D26:  MOVLW  01
04D28:  ADDWFC 03,F
04D2A:  MOVF   01,W
04D2C:  ADDLW  04
04D2E:  MOVWF  FE9
04D30:  MOVLW  00
04D32:  ADDWFC 03,W
04D34:  MOVWF  FEA
04D36:  CLRF   FEF
04D38:  CLRF   1B
04D3A:  BTFSC  FF2.7
04D3C:  BSF    1B.7
04D3E:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
04D40:  CLRF   x79
04D42:  MOVFF  529,578
04D46:  CLRF   x7B
04D48:  MOVLW  21
04D4A:  MOVWF  x7A
04D4C:  MOVLB  0
04D4E:  CALL   02F0
04D52:  BTFSC  1B.7
04D54:  BSF    FF2.7
04D56:  MOVF   01,W
04D58:  ADDLW  02
04D5A:  MOVLB  5
04D5C:  MOVWF  x2A
04D5E:  MOVLW  00
04D60:  ADDWFC 02,W
04D62:  MOVWF  x2B
04D64:  MOVLW  01
04D66:  ADDWF  x2A,W
04D68:  MOVWF  01
04D6A:  MOVLW  00
04D6C:  ADDWFC x2B,W
04D6E:  MOVWF  03
04D70:  MOVF   01,W
04D72:  ADDLW  3E
04D74:  MOVWF  01
04D76:  MOVLW  01
04D78:  ADDWFC 03,F
04D7A:  MOVF   01,W
04D7C:  ADDLW  08
04D7E:  MOVWF  FE9
04D80:  MOVLW  00
04D82:  ADDWFC 03,W
04D84:  MOVWF  FEA
04D86:  BTFSS  FEF.0
04D88:  BRA    4EDC
04D8A:  CLRF   1B
04D8C:  BTFSC  FF2.7
04D8E:  BSF    1B.7
04D90:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
04D92:  CLRF   x79
04D94:  MOVFF  529,578
04D98:  CLRF   x7B
04D9A:  MOVLW  21
04D9C:  MOVWF  x7A
04D9E:  MOVLB  0
04DA0:  CALL   02F0
04DA4:  BTFSC  1B.7
04DA6:  BSF    FF2.7
04DA8:  MOVF   01,W
04DAA:  ADDLW  02
04DAC:  MOVLB  5
04DAE:  MOVWF  x2A
04DB0:  MOVLW  00
04DB2:  ADDWFC 02,W
04DB4:  MOVWF  x2B
04DB6:  MOVLW  01
04DB8:  ADDWF  x2A,W
04DBA:  MOVWF  01
04DBC:  MOVLW  00
04DBE:  ADDWFC x2B,W
04DC0:  MOVWF  03
04DC2:  MOVF   01,W
04DC4:  ADDLW  3E
04DC6:  MOVWF  01
04DC8:  MOVLW  01
04DCA:  ADDWFC 03,F
04DCC:  MOVF   01,W
04DCE:  ADDLW  06
04DD0:  MOVWF  FE9
04DD2:  MOVLW  00
04DD4:  ADDWFC 03,W
04DD6:  MOVWF  FEA
04DD8:  MOVFF  FEF,52C
04DDC:  CLRF   1B
04DDE:  BTFSC  FF2.7
04DE0:  BSF    1B.7
04DE2:  BCF    FF2.7
04DE4:  CLRF   x79
04DE6:  MOVFF  529,578
04DEA:  CLRF   x7B
04DEC:  MOVLW  21
04DEE:  MOVWF  x7A
04DF0:  MOVLB  0
04DF2:  CALL   02F0
04DF6:  BTFSC  1B.7
04DF8:  BSF    FF2.7
04DFA:  MOVF   01,W
04DFC:  ADDLW  02
04DFE:  MOVLB  5
04E00:  MOVWF  x2D
04E02:  MOVLW  00
04E04:  ADDWFC 02,W
04E06:  MOVWF  x2E
04E08:  MOVLW  01
04E0A:  ADDWF  x2D,W
04E0C:  MOVWF  01
04E0E:  MOVLW  00
04E10:  ADDWFC x2E,W
04E12:  MOVWF  03
04E14:  MOVF   01,W
04E16:  ADDLW  3E
04E18:  MOVWF  01
04E1A:  MOVLW  01
04E1C:  ADDWFC 03,F
04E1E:  MOVF   01,W
04E20:  ADDLW  07
04E22:  MOVWF  FE9
04E24:  MOVLW  00
04E26:  ADDWFC 03,W
04E28:  MOVWF  FEA
04E2A:  MOVFF  FEF,52F
04E2E:  MOVFF  52C,530
04E32:  MOVFF  52F,531
04E36:  MOVLB  0
04E38:  RCALL  4980
04E3A:  CLRF   1B
04E3C:  BTFSC  FF2.7
04E3E:  BSF    1B.7
04E40:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
04E42:  MOVLB  5
04E44:  CLRF   x79
04E46:  MOVFF  529,578
04E4A:  CLRF   x7B
04E4C:  MOVLW  21
04E4E:  MOVWF  x7A
04E50:  MOVLB  0
04E52:  CALL   02F0
04E56:  BTFSC  1B.7
04E58:  BSF    FF2.7
04E5A:  MOVF   01,W
04E5C:  ADDLW  02
04E5E:  MOVLB  5
04E60:  MOVWF  x2A
04E62:  MOVLW  00
04E64:  ADDWFC 02,W
04E66:  MOVWF  x2B
04E68:  MOVLW  01
04E6A:  ADDWF  x2A,W
04E6C:  MOVWF  01
04E6E:  MOVLW  00
04E70:  ADDWFC x2B,W
04E72:  MOVWF  03
04E74:  MOVF   01,W
04E76:  ADDLW  3E
04E78:  MOVWF  01
04E7A:  MOVLW  01
04E7C:  ADDWFC 03,F
04E7E:  MOVF   01,W
04E80:  ADDLW  08
04E82:  MOVWF  FE9
04E84:  MOVLW  00
04E86:  ADDWFC 03,W
04E88:  MOVWF  FEA
04E8A:  BCF    FEF.0
04E8C:  CLRF   1B
04E8E:  BTFSC  FF2.7
04E90:  BSF    1B.7
04E92:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
04E94:  CLRF   x79
04E96:  MOVFF  529,578
04E9A:  CLRF   x7B
04E9C:  MOVLW  21
04E9E:  MOVWF  x7A
04EA0:  MOVLB  0
04EA2:  CALL   02F0
04EA6:  BTFSC  1B.7
04EA8:  BSF    FF2.7
04EAA:  MOVF   01,W
04EAC:  ADDLW  02
04EAE:  MOVLB  5
04EB0:  MOVWF  x2A
04EB2:  MOVLW  00
04EB4:  ADDWFC 02,W
04EB6:  MOVWF  x2B
04EB8:  MOVLW  01
04EBA:  ADDWF  x2A,W
04EBC:  MOVWF  01
04EBE:  MOVLW  00
04EC0:  ADDWFC x2B,W
04EC2:  MOVWF  03
04EC4:  MOVF   01,W
04EC6:  ADDLW  3E
04EC8:  MOVWF  01
04ECA:  MOVLW  01
04ECC:  ADDWFC 03,F
04ECE:  MOVF   01,W
04ED0:  ADDLW  07
04ED2:  MOVWF  FE9
04ED4:  MOVLW  00
04ED6:  ADDWFC 03,W
04ED8:  MOVWF  FEA
04EDA:  CLRF   FEF
....................          } 
....................  
....................          break; 
04EDC:  GOTO   58CA
....................          case button_switch: 
04EE0:  CLRF   1B
04EE2:  BTFSC  FF2.7
04EE4:  BSF    1B.7
04EE6:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
04EE8:  MOVLB  5
04EEA:  CLRF   x79
04EEC:  MOVFF  529,578
04EF0:  CLRF   x7B
04EF2:  MOVLW  21
04EF4:  MOVWF  x7A
04EF6:  MOVLB  0
04EF8:  CALL   02F0
04EFC:  BTFSC  1B.7
04EFE:  BSF    FF2.7
04F00:  MOVF   01,W
04F02:  ADDLW  02
04F04:  MOVLB  5
04F06:  MOVWF  x2A
04F08:  MOVLW  00
04F0A:  ADDWFC 02,W
04F0C:  MOVWF  x2B
04F0E:  MOVLW  01
04F10:  ADDWF  x2A,W
04F12:  MOVWF  01
04F14:  MOVLW  00
04F16:  ADDWFC x2B,W
04F18:  MOVWF  03
04F1A:  MOVF   01,W
04F1C:  ADDLW  3E
04F1E:  MOVWF  01
04F20:  MOVLW  01
04F22:  ADDWFC 03,F
04F24:  MOVF   01,W
04F26:  ADDLW  02
04F28:  MOVWF  FE9
04F2A:  MOVLW  00
04F2C:  ADDWFC 03,W
04F2E:  MOVWF  FEA
04F30:  BTFSS  FEF.0
04F32:  BRA    5082
04F34:  CLRF   1B
04F36:  BTFSC  FF2.7
04F38:  BSF    1B.7
04F3A:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
04F3C:  CLRF   x79
04F3E:  MOVFF  529,578
04F42:  CLRF   x7B
04F44:  MOVLW  21
04F46:  MOVWF  x7A
04F48:  MOVLB  0
04F4A:  CALL   02F0
04F4E:  BTFSC  1B.7
04F50:  BSF    FF2.7
04F52:  MOVF   01,W
04F54:  ADDLW  02
04F56:  MOVLB  5
04F58:  MOVWF  x2A
04F5A:  MOVLW  00
04F5C:  ADDWFC 02,W
04F5E:  MOVWF  x2B
04F60:  MOVLW  01
04F62:  ADDWF  x2A,W
04F64:  MOVWF  01
04F66:  MOVLW  00
04F68:  ADDWFC x2B,W
04F6A:  MOVWF  03
04F6C:  MOVF   01,W
04F6E:  ADDLW  3E
04F70:  MOVWF  01
04F72:  MOVLW  01
04F74:  ADDWFC 03,F
04F76:  MOVFF  01,FE9
04F7A:  MOVFF  03,FEA
04F7E:  MOVFF  FEF,52C
04F82:  CLRF   1B
04F84:  BTFSC  FF2.7
04F86:  BSF    1B.7
04F88:  BCF    FF2.7
04F8A:  CLRF   x79
04F8C:  MOVFF  529,578
04F90:  CLRF   x7B
04F92:  MOVLW  21
04F94:  MOVWF  x7A
04F96:  MOVLB  0
04F98:  CALL   02F0
04F9C:  BTFSC  1B.7
04F9E:  BSF    FF2.7
04FA0:  MOVF   01,W
04FA2:  ADDLW  02
04FA4:  MOVLB  5
04FA6:  MOVWF  x2D
04FA8:  MOVLW  00
04FAA:  ADDWFC 02,W
04FAC:  MOVWF  x2E
04FAE:  MOVLW  01
04FB0:  ADDWF  x2D,W
04FB2:  MOVWF  01
04FB4:  MOVLW  00
04FB6:  ADDWFC x2E,W
04FB8:  MOVWF  03
04FBA:  MOVF   01,W
04FBC:  ADDLW  3E
04FBE:  MOVWF  01
04FC0:  MOVLW  01
04FC2:  ADDWFC 03,F
04FC4:  MOVF   01,W
04FC6:  ADDLW  01
04FC8:  MOVWF  FE9
04FCA:  MOVLW  00
04FCC:  ADDWFC 03,W
04FCE:  MOVWF  FEA
04FD0:  MOVFF  FEF,52F
04FD4:  MOVFF  52C,530
04FD8:  MOVFF  52F,531
04FDC:  MOVLB  0
04FDE:  RCALL  4980
04FE0:  CLRF   1B
04FE2:  BTFSC  FF2.7
04FE4:  BSF    1B.7
04FE6:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
04FE8:  MOVLB  5
04FEA:  CLRF   x79
04FEC:  MOVFF  529,578
04FF0:  CLRF   x7B
04FF2:  MOVLW  21
04FF4:  MOVWF  x7A
04FF6:  MOVLB  0
04FF8:  CALL   02F0
04FFC:  BTFSC  1B.7
04FFE:  BSF    FF2.7
05000:  MOVF   01,W
05002:  ADDLW  02
05004:  MOVLB  5
05006:  MOVWF  x2A
05008:  MOVLW  00
0500A:  ADDWFC 02,W
0500C:  MOVWF  x2B
0500E:  MOVLW  01
05010:  ADDWF  x2A,W
05012:  MOVWF  01
05014:  MOVLW  00
05016:  ADDWFC x2B,W
05018:  MOVWF  03
0501A:  MOVF   01,W
0501C:  ADDLW  3E
0501E:  MOVWF  01
05020:  MOVLW  01
05022:  ADDWFC 03,F
05024:  MOVF   01,W
05026:  ADDLW  02
05028:  MOVWF  FE9
0502A:  MOVLW  00
0502C:  ADDWFC 03,W
0502E:  MOVWF  FEA
05030:  BCF    FEF.0
05032:  CLRF   1B
05034:  BTFSC  FF2.7
05036:  BSF    1B.7
05038:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
0503A:  CLRF   x79
0503C:  MOVFF  529,578
05040:  CLRF   x7B
05042:  MOVLW  21
05044:  MOVWF  x7A
05046:  MOVLB  0
05048:  CALL   02F0
0504C:  BTFSC  1B.7
0504E:  BSF    FF2.7
05050:  MOVF   01,W
05052:  ADDLW  02
05054:  MOVLB  5
05056:  MOVWF  x2A
05058:  MOVLW  00
0505A:  ADDWFC 02,W
0505C:  MOVWF  x2B
0505E:  MOVLW  01
05060:  ADDWF  x2A,W
05062:  MOVWF  01
05064:  MOVLW  00
05066:  ADDWFC x2B,W
05068:  MOVWF  03
0506A:  MOVF   01,W
0506C:  ADDLW  3E
0506E:  MOVWF  01
05070:  MOVLW  01
05072:  ADDWFC 03,F
05074:  MOVF   01,W
05076:  ADDLW  01
05078:  MOVWF  FE9
0507A:  MOVLW  00
0507C:  ADDWFC 03,W
0507E:  MOVWF  FEA
05080:  CLRF   FEF
05082:  CLRF   1B
05084:  BTFSC  FF2.7
05086:  BSF    1B.7
05088:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
0508A:  CLRF   x79
0508C:  MOVFF  529,578
05090:  CLRF   x7B
05092:  MOVLW  21
05094:  MOVWF  x7A
05096:  MOVLB  0
05098:  CALL   02F0
0509C:  BTFSC  1B.7
0509E:  BSF    FF2.7
050A0:  MOVF   01,W
050A2:  ADDLW  02
050A4:  MOVLB  5
050A6:  MOVWF  x2A
050A8:  MOVLW  00
050AA:  ADDWFC 02,W
050AC:  MOVWF  x2B
050AE:  MOVLW  01
050B0:  ADDWF  x2A,W
050B2:  MOVWF  01
050B4:  MOVLW  00
050B6:  ADDWFC x2B,W
050B8:  MOVWF  03
050BA:  MOVF   01,W
050BC:  ADDLW  3E
050BE:  MOVWF  01
050C0:  MOVLW  01
050C2:  ADDWFC 03,F
050C4:  MOVF   01,W
050C6:  ADDLW  05
050C8:  MOVWF  FE9
050CA:  MOVLW  00
050CC:  ADDWFC 03,W
050CE:  MOVWF  FEA
050D0:  BTFSS  FEF.0
050D2:  BRA    5228
050D4:  CLRF   1B
050D6:  BTFSC  FF2.7
050D8:  BSF    1B.7
050DA:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
050DC:  CLRF   x79
050DE:  MOVFF  529,578
050E2:  CLRF   x7B
050E4:  MOVLW  21
050E6:  MOVWF  x7A
050E8:  MOVLB  0
050EA:  CALL   02F0
050EE:  BTFSC  1B.7
050F0:  BSF    FF2.7
050F2:  MOVF   01,W
050F4:  ADDLW  02
050F6:  MOVLB  5
050F8:  MOVWF  x2A
050FA:  MOVLW  00
050FC:  ADDWFC 02,W
050FE:  MOVWF  x2B
05100:  MOVLW  01
05102:  ADDWF  x2A,W
05104:  MOVWF  01
05106:  MOVLW  00
05108:  ADDWFC x2B,W
0510A:  MOVWF  03
0510C:  MOVF   01,W
0510E:  ADDLW  3E
05110:  MOVWF  01
05112:  MOVLW  01
05114:  ADDWFC 03,F
05116:  MOVF   01,W
05118:  ADDLW  03
0511A:  MOVWF  FE9
0511C:  MOVLW  00
0511E:  ADDWFC 03,W
05120:  MOVWF  FEA
05122:  MOVFF  FEF,52C
05126:  CLRF   1B
05128:  BTFSC  FF2.7
0512A:  BSF    1B.7
0512C:  BCF    FF2.7
0512E:  CLRF   x79
05130:  MOVFF  529,578
05134:  CLRF   x7B
05136:  MOVLW  21
05138:  MOVWF  x7A
0513A:  MOVLB  0
0513C:  CALL   02F0
05140:  BTFSC  1B.7
05142:  BSF    FF2.7
05144:  MOVF   01,W
05146:  ADDLW  02
05148:  MOVLB  5
0514A:  MOVWF  x2D
0514C:  MOVLW  00
0514E:  ADDWFC 02,W
05150:  MOVWF  x2E
05152:  MOVLW  01
05154:  ADDWF  x2D,W
05156:  MOVWF  01
05158:  MOVLW  00
0515A:  ADDWFC x2E,W
0515C:  MOVWF  03
0515E:  MOVF   01,W
05160:  ADDLW  3E
05162:  MOVWF  01
05164:  MOVLW  01
05166:  ADDWFC 03,F
05168:  MOVF   01,W
0516A:  ADDLW  04
0516C:  MOVWF  FE9
0516E:  MOVLW  00
05170:  ADDWFC 03,W
05172:  MOVWF  FEA
05174:  MOVFF  FEF,52F
05178:  MOVFF  52C,530
0517C:  MOVFF  52F,531
05180:  MOVLB  0
05182:  CALL   4980
05186:  CLRF   1B
05188:  BTFSC  FF2.7
0518A:  BSF    1B.7
0518C:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0518E:  MOVLB  5
05190:  CLRF   x79
05192:  MOVFF  529,578
05196:  CLRF   x7B
05198:  MOVLW  21
0519A:  MOVWF  x7A
0519C:  MOVLB  0
0519E:  CALL   02F0
051A2:  BTFSC  1B.7
051A4:  BSF    FF2.7
051A6:  MOVF   01,W
051A8:  ADDLW  02
051AA:  MOVLB  5
051AC:  MOVWF  x2A
051AE:  MOVLW  00
051B0:  ADDWFC 02,W
051B2:  MOVWF  x2B
051B4:  MOVLW  01
051B6:  ADDWF  x2A,W
051B8:  MOVWF  01
051BA:  MOVLW  00
051BC:  ADDWFC x2B,W
051BE:  MOVWF  03
051C0:  MOVF   01,W
051C2:  ADDLW  3E
051C4:  MOVWF  01
051C6:  MOVLW  01
051C8:  ADDWFC 03,F
051CA:  MOVF   01,W
051CC:  ADDLW  05
051CE:  MOVWF  FE9
051D0:  MOVLW  00
051D2:  ADDWFC 03,W
051D4:  MOVWF  FEA
051D6:  BCF    FEF.0
051D8:  CLRF   1B
051DA:  BTFSC  FF2.7
051DC:  BSF    1B.7
051DE:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
051E0:  CLRF   x79
051E2:  MOVFF  529,578
051E6:  CLRF   x7B
051E8:  MOVLW  21
051EA:  MOVWF  x7A
051EC:  MOVLB  0
051EE:  CALL   02F0
051F2:  BTFSC  1B.7
051F4:  BSF    FF2.7
051F6:  MOVF   01,W
051F8:  ADDLW  02
051FA:  MOVLB  5
051FC:  MOVWF  x2A
051FE:  MOVLW  00
05200:  ADDWFC 02,W
05202:  MOVWF  x2B
05204:  MOVLW  01
05206:  ADDWF  x2A,W
05208:  MOVWF  01
0520A:  MOVLW  00
0520C:  ADDWFC x2B,W
0520E:  MOVWF  03
05210:  MOVF   01,W
05212:  ADDLW  3E
05214:  MOVWF  01
05216:  MOVLW  01
05218:  ADDWFC 03,F
0521A:  MOVF   01,W
0521C:  ADDLW  04
0521E:  MOVWF  FE9
05220:  MOVLW  00
05222:  ADDWFC 03,W
05224:  MOVWF  FEA
05226:  CLRF   FEF
....................          } 
....................  
....................          break; 
05228:  BRA    58CA
....................          case on_off_switch: 
0522A:  CLRF   1B
0522C:  BTFSC  FF2.7
0522E:  BSF    1B.7
05230:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
05232:  MOVLB  5
05234:  CLRF   x79
05236:  MOVFF  529,578
0523A:  CLRF   x7B
0523C:  MOVLW  21
0523E:  MOVWF  x7A
05240:  MOVLB  0
05242:  CALL   02F0
05246:  BTFSC  1B.7
05248:  BSF    FF2.7
0524A:  MOVF   01,W
0524C:  ADDLW  02
0524E:  MOVLB  5
05250:  MOVWF  x2A
05252:  MOVLW  00
05254:  ADDWFC 02,W
05256:  MOVWF  x2B
05258:  MOVLW  01
0525A:  ADDWF  x2A,W
0525C:  MOVWF  01
0525E:  MOVLW  00
05260:  ADDWFC x2B,W
05262:  MOVWF  03
05264:  MOVF   01,W
05266:  ADDLW  3E
05268:  MOVWF  01
0526A:  MOVLW  01
0526C:  ADDWFC 03,F
0526E:  MOVF   01,W
05270:  ADDLW  02
05272:  MOVWF  FE9
05274:  MOVLW  00
05276:  ADDWFC 03,W
05278:  MOVWF  FEA
0527A:  BTFSS  FEF.0
0527C:  BRA    53CE
0527E:  CLRF   1B
05280:  BTFSC  FF2.7
05282:  BSF    1B.7
05284:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
05286:  CLRF   x79
05288:  MOVFF  529,578
0528C:  CLRF   x7B
0528E:  MOVLW  21
05290:  MOVWF  x7A
05292:  MOVLB  0
05294:  CALL   02F0
05298:  BTFSC  1B.7
0529A:  BSF    FF2.7
0529C:  MOVF   01,W
0529E:  ADDLW  02
052A0:  MOVLB  5
052A2:  MOVWF  x2A
052A4:  MOVLW  00
052A6:  ADDWFC 02,W
052A8:  MOVWF  x2B
052AA:  MOVLW  01
052AC:  ADDWF  x2A,W
052AE:  MOVWF  01
052B0:  MOVLW  00
052B2:  ADDWFC x2B,W
052B4:  MOVWF  03
052B6:  MOVF   01,W
052B8:  ADDLW  3E
052BA:  MOVWF  01
052BC:  MOVLW  01
052BE:  ADDWFC 03,F
052C0:  MOVFF  01,FE9
052C4:  MOVFF  03,FEA
052C8:  MOVFF  FEF,52C
052CC:  CLRF   1B
052CE:  BTFSC  FF2.7
052D0:  BSF    1B.7
052D2:  BCF    FF2.7
052D4:  CLRF   x79
052D6:  MOVFF  529,578
052DA:  CLRF   x7B
052DC:  MOVLW  21
052DE:  MOVWF  x7A
052E0:  MOVLB  0
052E2:  CALL   02F0
052E6:  BTFSC  1B.7
052E8:  BSF    FF2.7
052EA:  MOVF   01,W
052EC:  ADDLW  02
052EE:  MOVLB  5
052F0:  MOVWF  x2D
052F2:  MOVLW  00
052F4:  ADDWFC 02,W
052F6:  MOVWF  x2E
052F8:  MOVLW  01
052FA:  ADDWF  x2D,W
052FC:  MOVWF  01
052FE:  MOVLW  00
05300:  ADDWFC x2E,W
05302:  MOVWF  03
05304:  MOVF   01,W
05306:  ADDLW  3E
05308:  MOVWF  01
0530A:  MOVLW  01
0530C:  ADDWFC 03,F
0530E:  MOVF   01,W
05310:  ADDLW  01
05312:  MOVWF  FE9
05314:  MOVLW  00
05316:  ADDWFC 03,W
05318:  MOVWF  FEA
0531A:  MOVFF  FEF,52F
0531E:  MOVFF  52C,530
05322:  MOVFF  52F,531
05326:  MOVLB  0
05328:  CALL   4980
0532C:  CLRF   1B
0532E:  BTFSC  FF2.7
05330:  BSF    1B.7
05332:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
05334:  MOVLB  5
05336:  CLRF   x79
05338:  MOVFF  529,578
0533C:  CLRF   x7B
0533E:  MOVLW  21
05340:  MOVWF  x7A
05342:  MOVLB  0
05344:  CALL   02F0
05348:  BTFSC  1B.7
0534A:  BSF    FF2.7
0534C:  MOVF   01,W
0534E:  ADDLW  02
05350:  MOVLB  5
05352:  MOVWF  x2A
05354:  MOVLW  00
05356:  ADDWFC 02,W
05358:  MOVWF  x2B
0535A:  MOVLW  01
0535C:  ADDWF  x2A,W
0535E:  MOVWF  01
05360:  MOVLW  00
05362:  ADDWFC x2B,W
05364:  MOVWF  03
05366:  MOVF   01,W
05368:  ADDLW  3E
0536A:  MOVWF  01
0536C:  MOVLW  01
0536E:  ADDWFC 03,F
05370:  MOVF   01,W
05372:  ADDLW  02
05374:  MOVWF  FE9
05376:  MOVLW  00
05378:  ADDWFC 03,W
0537A:  MOVWF  FEA
0537C:  BCF    FEF.0
0537E:  CLRF   1B
05380:  BTFSC  FF2.7
05382:  BSF    1B.7
05384:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
05386:  CLRF   x79
05388:  MOVFF  529,578
0538C:  CLRF   x7B
0538E:  MOVLW  21
05390:  MOVWF  x7A
05392:  MOVLB  0
05394:  CALL   02F0
05398:  BTFSC  1B.7
0539A:  BSF    FF2.7
0539C:  MOVF   01,W
0539E:  ADDLW  02
053A0:  MOVLB  5
053A2:  MOVWF  x2A
053A4:  MOVLW  00
053A6:  ADDWFC 02,W
053A8:  MOVWF  x2B
053AA:  MOVLW  01
053AC:  ADDWF  x2A,W
053AE:  MOVWF  01
053B0:  MOVLW  00
053B2:  ADDWFC x2B,W
053B4:  MOVWF  03
053B6:  MOVF   01,W
053B8:  ADDLW  3E
053BA:  MOVWF  01
053BC:  MOVLW  01
053BE:  ADDWFC 03,F
053C0:  MOVF   01,W
053C2:  ADDLW  01
053C4:  MOVWF  FE9
053C6:  MOVLW  00
053C8:  ADDWFC 03,W
053CA:  MOVWF  FEA
053CC:  CLRF   FEF
053CE:  CLRF   1B
053D0:  BTFSC  FF2.7
053D2:  BSF    1B.7
053D4:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
053D6:  CLRF   x79
053D8:  MOVFF  529,578
053DC:  CLRF   x7B
053DE:  MOVLW  21
053E0:  MOVWF  x7A
053E2:  MOVLB  0
053E4:  CALL   02F0
053E8:  BTFSC  1B.7
053EA:  BSF    FF2.7
053EC:  MOVF   01,W
053EE:  ADDLW  02
053F0:  MOVLB  5
053F2:  MOVWF  x2A
053F4:  MOVLW  00
053F6:  ADDWFC 02,W
053F8:  MOVWF  x2B
053FA:  MOVLW  01
053FC:  ADDWF  x2A,W
053FE:  MOVWF  01
05400:  MOVLW  00
05402:  ADDWFC x2B,W
05404:  MOVWF  03
05406:  MOVF   01,W
05408:  ADDLW  3E
0540A:  MOVWF  01
0540C:  MOVLW  01
0540E:  ADDWFC 03,F
05410:  MOVF   01,W
05412:  ADDLW  05
05414:  MOVWF  FE9
05416:  MOVLW  00
05418:  ADDWFC 03,W
0541A:  MOVWF  FEA
0541C:  BTFSS  FEF.0
0541E:  BRA    5574
05420:  CLRF   1B
05422:  BTFSC  FF2.7
05424:  BSF    1B.7
05426:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
05428:  CLRF   x79
0542A:  MOVFF  529,578
0542E:  CLRF   x7B
05430:  MOVLW  21
05432:  MOVWF  x7A
05434:  MOVLB  0
05436:  CALL   02F0
0543A:  BTFSC  1B.7
0543C:  BSF    FF2.7
0543E:  MOVF   01,W
05440:  ADDLW  02
05442:  MOVLB  5
05444:  MOVWF  x2A
05446:  MOVLW  00
05448:  ADDWFC 02,W
0544A:  MOVWF  x2B
0544C:  MOVLW  01
0544E:  ADDWF  x2A,W
05450:  MOVWF  01
05452:  MOVLW  00
05454:  ADDWFC x2B,W
05456:  MOVWF  03
05458:  MOVF   01,W
0545A:  ADDLW  3E
0545C:  MOVWF  01
0545E:  MOVLW  01
05460:  ADDWFC 03,F
05462:  MOVF   01,W
05464:  ADDLW  03
05466:  MOVWF  FE9
05468:  MOVLW  00
0546A:  ADDWFC 03,W
0546C:  MOVWF  FEA
0546E:  MOVFF  FEF,52C
05472:  CLRF   1B
05474:  BTFSC  FF2.7
05476:  BSF    1B.7
05478:  BCF    FF2.7
0547A:  CLRF   x79
0547C:  MOVFF  529,578
05480:  CLRF   x7B
05482:  MOVLW  21
05484:  MOVWF  x7A
05486:  MOVLB  0
05488:  CALL   02F0
0548C:  BTFSC  1B.7
0548E:  BSF    FF2.7
05490:  MOVF   01,W
05492:  ADDLW  02
05494:  MOVLB  5
05496:  MOVWF  x2D
05498:  MOVLW  00
0549A:  ADDWFC 02,W
0549C:  MOVWF  x2E
0549E:  MOVLW  01
054A0:  ADDWF  x2D,W
054A2:  MOVWF  01
054A4:  MOVLW  00
054A6:  ADDWFC x2E,W
054A8:  MOVWF  03
054AA:  MOVF   01,W
054AC:  ADDLW  3E
054AE:  MOVWF  01
054B0:  MOVLW  01
054B2:  ADDWFC 03,F
054B4:  MOVF   01,W
054B6:  ADDLW  04
054B8:  MOVWF  FE9
054BA:  MOVLW  00
054BC:  ADDWFC 03,W
054BE:  MOVWF  FEA
054C0:  MOVFF  FEF,52F
054C4:  MOVFF  52C,530
054C8:  MOVFF  52F,531
054CC:  MOVLB  0
054CE:  CALL   4980
054D2:  CLRF   1B
054D4:  BTFSC  FF2.7
054D6:  BSF    1B.7
054D8:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
054DA:  MOVLB  5
054DC:  CLRF   x79
054DE:  MOVFF  529,578
054E2:  CLRF   x7B
054E4:  MOVLW  21
054E6:  MOVWF  x7A
054E8:  MOVLB  0
054EA:  CALL   02F0
054EE:  BTFSC  1B.7
054F0:  BSF    FF2.7
054F2:  MOVF   01,W
054F4:  ADDLW  02
054F6:  MOVLB  5
054F8:  MOVWF  x2A
054FA:  MOVLW  00
054FC:  ADDWFC 02,W
054FE:  MOVWF  x2B
05500:  MOVLW  01
05502:  ADDWF  x2A,W
05504:  MOVWF  01
05506:  MOVLW  00
05508:  ADDWFC x2B,W
0550A:  MOVWF  03
0550C:  MOVF   01,W
0550E:  ADDLW  3E
05510:  MOVWF  01
05512:  MOVLW  01
05514:  ADDWFC 03,F
05516:  MOVF   01,W
05518:  ADDLW  05
0551A:  MOVWF  FE9
0551C:  MOVLW  00
0551E:  ADDWFC 03,W
05520:  MOVWF  FEA
05522:  BCF    FEF.0
05524:  CLRF   1B
05526:  BTFSC  FF2.7
05528:  BSF    1B.7
0552A:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
0552C:  CLRF   x79
0552E:  MOVFF  529,578
05532:  CLRF   x7B
05534:  MOVLW  21
05536:  MOVWF  x7A
05538:  MOVLB  0
0553A:  CALL   02F0
0553E:  BTFSC  1B.7
05540:  BSF    FF2.7
05542:  MOVF   01,W
05544:  ADDLW  02
05546:  MOVLB  5
05548:  MOVWF  x2A
0554A:  MOVLW  00
0554C:  ADDWFC 02,W
0554E:  MOVWF  x2B
05550:  MOVLW  01
05552:  ADDWF  x2A,W
05554:  MOVWF  01
05556:  MOVLW  00
05558:  ADDWFC x2B,W
0555A:  MOVWF  03
0555C:  MOVF   01,W
0555E:  ADDLW  3E
05560:  MOVWF  01
05562:  MOVLW  01
05564:  ADDWFC 03,F
05566:  MOVF   01,W
05568:  ADDLW  04
0556A:  MOVWF  FE9
0556C:  MOVLW  00
0556E:  ADDWFC 03,W
05570:  MOVWF  FEA
05572:  CLRF   FEF
....................          } 
....................  
....................          break; 
05574:  BRA    58CA
....................          case timer: 
05576:  CLRF   1B
05578:  BTFSC  FF2.7
0557A:  BSF    1B.7
0557C:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
0557E:  MOVLB  5
05580:  CLRF   x79
05582:  MOVFF  529,578
05586:  CLRF   x7B
05588:  MOVLW  21
0558A:  MOVWF  x7A
0558C:  MOVLB  0
0558E:  CALL   02F0
05592:  BTFSC  1B.7
05594:  BSF    FF2.7
05596:  MOVF   01,W
05598:  ADDLW  02
0559A:  MOVLB  5
0559C:  MOVWF  x2A
0559E:  MOVLW  00
055A0:  ADDWFC 02,W
055A2:  MOVWF  x2B
055A4:  MOVLW  01
055A6:  ADDWF  x2A,W
055A8:  MOVWF  01
055AA:  MOVLW  00
055AC:  ADDWFC x2B,W
055AE:  MOVWF  03
055B0:  MOVF   01,W
055B2:  ADDLW  3E
055B4:  MOVWF  01
055B6:  MOVLW  01
055B8:  ADDWFC 03,F
055BA:  MOVF   01,W
055BC:  ADDLW  05
055BE:  MOVWF  FE9
055C0:  MOVLW  00
055C2:  ADDWFC 03,W
055C4:  MOVWF  FEA
055C6:  BTFSS  FEF.0
055C8:  BRA    571E
055CA:  CLRF   1B
055CC:  BTFSC  FF2.7
055CE:  BSF    1B.7
055D0:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
055D2:  CLRF   x79
055D4:  MOVFF  529,578
055D8:  CLRF   x7B
055DA:  MOVLW  21
055DC:  MOVWF  x7A
055DE:  MOVLB  0
055E0:  CALL   02F0
055E4:  BTFSC  1B.7
055E6:  BSF    FF2.7
055E8:  MOVF   01,W
055EA:  ADDLW  02
055EC:  MOVLB  5
055EE:  MOVWF  x2A
055F0:  MOVLW  00
055F2:  ADDWFC 02,W
055F4:  MOVWF  x2B
055F6:  MOVLW  01
055F8:  ADDWF  x2A,W
055FA:  MOVWF  01
055FC:  MOVLW  00
055FE:  ADDWFC x2B,W
05600:  MOVWF  03
05602:  MOVF   01,W
05604:  ADDLW  3E
05606:  MOVWF  01
05608:  MOVLW  01
0560A:  ADDWFC 03,F
0560C:  MOVF   01,W
0560E:  ADDLW  03
05610:  MOVWF  FE9
05612:  MOVLW  00
05614:  ADDWFC 03,W
05616:  MOVWF  FEA
05618:  MOVFF  FEF,52C
0561C:  CLRF   1B
0561E:  BTFSC  FF2.7
05620:  BSF    1B.7
05622:  BCF    FF2.7
05624:  CLRF   x79
05626:  MOVFF  529,578
0562A:  CLRF   x7B
0562C:  MOVLW  21
0562E:  MOVWF  x7A
05630:  MOVLB  0
05632:  CALL   02F0
05636:  BTFSC  1B.7
05638:  BSF    FF2.7
0563A:  MOVF   01,W
0563C:  ADDLW  02
0563E:  MOVLB  5
05640:  MOVWF  x2D
05642:  MOVLW  00
05644:  ADDWFC 02,W
05646:  MOVWF  x2E
05648:  MOVLW  01
0564A:  ADDWF  x2D,W
0564C:  MOVWF  01
0564E:  MOVLW  00
05650:  ADDWFC x2E,W
05652:  MOVWF  03
05654:  MOVF   01,W
05656:  ADDLW  3E
05658:  MOVWF  01
0565A:  MOVLW  01
0565C:  ADDWFC 03,F
0565E:  MOVF   01,W
05660:  ADDLW  04
05662:  MOVWF  FE9
05664:  MOVLW  00
05666:  ADDWFC 03,W
05668:  MOVWF  FEA
0566A:  MOVFF  FEF,52F
0566E:  MOVFF  52C,530
05672:  MOVFF  52F,531
05676:  MOVLB  0
05678:  CALL   4980
0567C:  CLRF   1B
0567E:  BTFSC  FF2.7
05680:  BSF    1B.7
05682:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
05684:  MOVLB  5
05686:  CLRF   x79
05688:  MOVFF  529,578
0568C:  CLRF   x7B
0568E:  MOVLW  21
05690:  MOVWF  x7A
05692:  MOVLB  0
05694:  CALL   02F0
05698:  BTFSC  1B.7
0569A:  BSF    FF2.7
0569C:  MOVF   01,W
0569E:  ADDLW  02
056A0:  MOVLB  5
056A2:  MOVWF  x2A
056A4:  MOVLW  00
056A6:  ADDWFC 02,W
056A8:  MOVWF  x2B
056AA:  MOVLW  01
056AC:  ADDWF  x2A,W
056AE:  MOVWF  01
056B0:  MOVLW  00
056B2:  ADDWFC x2B,W
056B4:  MOVWF  03
056B6:  MOVF   01,W
056B8:  ADDLW  3E
056BA:  MOVWF  01
056BC:  MOVLW  01
056BE:  ADDWFC 03,F
056C0:  MOVF   01,W
056C2:  ADDLW  05
056C4:  MOVWF  FE9
056C6:  MOVLW  00
056C8:  ADDWFC 03,W
056CA:  MOVWF  FEA
056CC:  BCF    FEF.0
056CE:  CLRF   1B
056D0:  BTFSC  FF2.7
056D2:  BSF    1B.7
056D4:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
056D6:  CLRF   x79
056D8:  MOVFF  529,578
056DC:  CLRF   x7B
056DE:  MOVLW  21
056E0:  MOVWF  x7A
056E2:  MOVLB  0
056E4:  CALL   02F0
056E8:  BTFSC  1B.7
056EA:  BSF    FF2.7
056EC:  MOVF   01,W
056EE:  ADDLW  02
056F0:  MOVLB  5
056F2:  MOVWF  x2A
056F4:  MOVLW  00
056F6:  ADDWFC 02,W
056F8:  MOVWF  x2B
056FA:  MOVLW  01
056FC:  ADDWF  x2A,W
056FE:  MOVWF  01
05700:  MOVLW  00
05702:  ADDWFC x2B,W
05704:  MOVWF  03
05706:  MOVF   01,W
05708:  ADDLW  3E
0570A:  MOVWF  01
0570C:  MOVLW  01
0570E:  ADDWFC 03,F
05710:  MOVF   01,W
05712:  ADDLW  04
05714:  MOVWF  FE9
05716:  MOVLW  00
05718:  ADDWFC 03,W
0571A:  MOVWF  FEA
0571C:  CLRF   FEF
0571E:  CLRF   1B
05720:  BTFSC  FF2.7
05722:  BSF    1B.7
05724:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
05726:  CLRF   x79
05728:  MOVFF  529,578
0572C:  CLRF   x7B
0572E:  MOVLW  21
05730:  MOVWF  x7A
05732:  MOVLB  0
05734:  CALL   02F0
05738:  BTFSC  1B.7
0573A:  BSF    FF2.7
0573C:  MOVF   01,W
0573E:  ADDLW  02
05740:  MOVLB  5
05742:  MOVWF  x2A
05744:  MOVLW  00
05746:  ADDWFC 02,W
05748:  MOVWF  x2B
0574A:  MOVLW  01
0574C:  ADDWF  x2A,W
0574E:  MOVWF  01
05750:  MOVLW  00
05752:  ADDWFC x2B,W
05754:  MOVWF  03
05756:  MOVF   01,W
05758:  ADDLW  3E
0575A:  MOVWF  01
0575C:  MOVLW  01
0575E:  ADDWFC 03,F
05760:  MOVF   01,W
05762:  ADDLW  08
05764:  MOVWF  FE9
05766:  MOVLW  00
05768:  ADDWFC 03,W
0576A:  MOVWF  FEA
0576C:  BTFSS  FEF.0
0576E:  BRA    58C4
05770:  CLRF   1B
05772:  BTFSC  FF2.7
05774:  BSF    1B.7
05776:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
05778:  CLRF   x79
0577A:  MOVFF  529,578
0577E:  CLRF   x7B
05780:  MOVLW  21
05782:  MOVWF  x7A
05784:  MOVLB  0
05786:  CALL   02F0
0578A:  BTFSC  1B.7
0578C:  BSF    FF2.7
0578E:  MOVF   01,W
05790:  ADDLW  02
05792:  MOVLB  5
05794:  MOVWF  x2A
05796:  MOVLW  00
05798:  ADDWFC 02,W
0579A:  MOVWF  x2B
0579C:  MOVLW  01
0579E:  ADDWF  x2A,W
057A0:  MOVWF  01
057A2:  MOVLW  00
057A4:  ADDWFC x2B,W
057A6:  MOVWF  03
057A8:  MOVF   01,W
057AA:  ADDLW  3E
057AC:  MOVWF  01
057AE:  MOVLW  01
057B0:  ADDWFC 03,F
057B2:  MOVF   01,W
057B4:  ADDLW  06
057B6:  MOVWF  FE9
057B8:  MOVLW  00
057BA:  ADDWFC 03,W
057BC:  MOVWF  FEA
057BE:  MOVFF  FEF,52C
057C2:  CLRF   1B
057C4:  BTFSC  FF2.7
057C6:  BSF    1B.7
057C8:  BCF    FF2.7
057CA:  CLRF   x79
057CC:  MOVFF  529,578
057D0:  CLRF   x7B
057D2:  MOVLW  21
057D4:  MOVWF  x7A
057D6:  MOVLB  0
057D8:  CALL   02F0
057DC:  BTFSC  1B.7
057DE:  BSF    FF2.7
057E0:  MOVF   01,W
057E2:  ADDLW  02
057E4:  MOVLB  5
057E6:  MOVWF  x2D
057E8:  MOVLW  00
057EA:  ADDWFC 02,W
057EC:  MOVWF  x2E
057EE:  MOVLW  01
057F0:  ADDWF  x2D,W
057F2:  MOVWF  01
057F4:  MOVLW  00
057F6:  ADDWFC x2E,W
057F8:  MOVWF  03
057FA:  MOVF   01,W
057FC:  ADDLW  3E
057FE:  MOVWF  01
05800:  MOVLW  01
05802:  ADDWFC 03,F
05804:  MOVF   01,W
05806:  ADDLW  07
05808:  MOVWF  FE9
0580A:  MOVLW  00
0580C:  ADDWFC 03,W
0580E:  MOVWF  FEA
05810:  MOVFF  FEF,52F
05814:  MOVFF  52C,530
05818:  MOVFF  52F,531
0581C:  MOVLB  0
0581E:  CALL   4980
05822:  CLRF   1B
05824:  BTFSC  FF2.7
05826:  BSF    1B.7
05828:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
0582A:  MOVLB  5
0582C:  CLRF   x79
0582E:  MOVFF  529,578
05832:  CLRF   x7B
05834:  MOVLW  21
05836:  MOVWF  x7A
05838:  MOVLB  0
0583A:  CALL   02F0
0583E:  BTFSC  1B.7
05840:  BSF    FF2.7
05842:  MOVF   01,W
05844:  ADDLW  02
05846:  MOVLB  5
05848:  MOVWF  x2A
0584A:  MOVLW  00
0584C:  ADDWFC 02,W
0584E:  MOVWF  x2B
05850:  MOVLW  01
05852:  ADDWF  x2A,W
05854:  MOVWF  01
05856:  MOVLW  00
05858:  ADDWFC x2B,W
0585A:  MOVWF  03
0585C:  MOVF   01,W
0585E:  ADDLW  3E
05860:  MOVWF  01
05862:  MOVLW  01
05864:  ADDWFC 03,F
05866:  MOVF   01,W
05868:  ADDLW  08
0586A:  MOVWF  FE9
0586C:  MOVLW  00
0586E:  ADDWFC 03,W
05870:  MOVWF  FEA
05872:  BCF    FEF.0
05874:  CLRF   1B
05876:  BTFSC  FF2.7
05878:  BSF    1B.7
0587A:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
0587C:  CLRF   x79
0587E:  MOVFF  529,578
05882:  CLRF   x7B
05884:  MOVLW  21
05886:  MOVWF  x7A
05888:  MOVLB  0
0588A:  CALL   02F0
0588E:  BTFSC  1B.7
05890:  BSF    FF2.7
05892:  MOVF   01,W
05894:  ADDLW  02
05896:  MOVLB  5
05898:  MOVWF  x2A
0589A:  MOVLW  00
0589C:  ADDWFC 02,W
0589E:  MOVWF  x2B
058A0:  MOVLW  01
058A2:  ADDWF  x2A,W
058A4:  MOVWF  01
058A6:  MOVLW  00
058A8:  ADDWFC x2B,W
058AA:  MOVWF  03
058AC:  MOVF   01,W
058AE:  ADDLW  3E
058B0:  MOVWF  01
058B2:  MOVLW  01
058B4:  ADDWFC 03,F
058B6:  MOVF   01,W
058B8:  ADDLW  07
058BA:  MOVWF  FE9
058BC:  MOVLW  00
058BE:  ADDWFC 03,W
058C0:  MOVWF  FEA
058C2:  CLRF   FEF
....................          } 
....................          break; 
058C4:  BRA    58CA
....................          default: 
....................          break; 
058C6:  MOVLB  5
058C8:  BRA    58CA
....................       } 
....................    } 
058CA:  INCF   x29,F
058CC:  GOTO   4992
.................... } 
058D0:  MOVLB  0
058D2:  GOTO   69F0 (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
058D6:  MOVLB  5
058D8:  CLRF   x29
058DA:  MOVLB  1
058DC:  MOVF   x3F,W
058DE:  MOVLB  5
058E0:  SUBWF  x29,W
058E2:  BTFSC  FD8.0
058E4:  GOTO   60EA
058E8:  CLRF   1B
058EA:  BTFSC  FF2.7
058EC:  BSF    1B.7
058EE:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
058F0:  CLRF   x79
058F2:  MOVFF  529,578
058F6:  CLRF   x7B
058F8:  MOVLW  2F
058FA:  MOVWF  x7A
058FC:  MOVLB  0
058FE:  CALL   02F0
05902:  BTFSC  1B.7
05904:  BSF    FF2.7
05906:  MOVFF  02,03
0590A:  MOVF   01,W
0590C:  ADDLW  8A
0590E:  MOVWF  01
05910:  MOVLW  02
05912:  ADDWFC 03,F
05914:  MOVFF  01,FE9
05918:  MOVFF  03,FEA
0591C:  MOVF   FEF,W
0591E:  XORLW  02
05920:  BZ    5924
05922:  BRA    60E2
....................            case shutter: 
05924:  CLRF   1B
05926:  BTFSC  FF2.7
05928:  BSF    1B.7
0592A:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
0592C:  MOVLB  5
0592E:  CLRF   x79
05930:  MOVFF  529,578
05934:  CLRF   x7B
05936:  MOVLW  2F
05938:  MOVWF  x7A
0593A:  MOVLB  0
0593C:  CALL   02F0
05940:  BTFSC  1B.7
05942:  BSF    FF2.7
05944:  MOVF   01,W
05946:  ADDLW  4C
05948:  MOVLB  5
0594A:  MOVWF  x2A
0594C:  MOVLW  01
0594E:  ADDWFC 02,W
05950:  MOVWF  x2B
05952:  MOVLW  01
05954:  ADDWF  x2A,W
05956:  MOVWF  01
05958:  MOVLW  00
0595A:  ADDWFC x2B,W
0595C:  MOVWF  03
0595E:  MOVF   01,W
05960:  ADDLW  3E
05962:  MOVWF  01
05964:  MOVLW  01
05966:  ADDWFC 03,F
05968:  MOVF   01,W
0596A:  ADDLW  2D
0596C:  MOVWF  FE9
0596E:  MOVLW  00
05970:  ADDWFC 03,W
05972:  MOVWF  FEA
05974:  MOVF   FEF,W
05976:  SUBLW  04
05978:  BTFSC  FD8.2
0597A:  BRA    60DE
0597C:  CLRF   1B
0597E:  BTFSC  FF2.7
05980:  BSF    1B.7
05982:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
05984:  CLRF   x79
05986:  MOVFF  529,578
0598A:  CLRF   x7B
0598C:  MOVLW  2F
0598E:  MOVWF  x7A
05990:  MOVLB  0
05992:  CALL   02F0
05996:  BTFSC  1B.7
05998:  BSF    FF2.7
0599A:  MOVF   01,W
0599C:  ADDLW  4C
0599E:  MOVLB  5
059A0:  MOVWF  x2A
059A2:  MOVLW  01
059A4:  ADDWFC 02,W
059A6:  MOVWF  x2B
059A8:  MOVLW  01
059AA:  ADDWF  x2A,W
059AC:  MOVWF  01
059AE:  MOVLW  00
059B0:  ADDWFC x2B,W
059B2:  MOVWF  03
059B4:  MOVF   01,W
059B6:  ADDLW  3E
059B8:  MOVWF  01
059BA:  MOVLW  01
059BC:  ADDWFC 03,F
059BE:  MOVF   01,W
059C0:  ADDLW  2A
059C2:  MOVWF  FE9
059C4:  MOVLW  00
059C6:  ADDWFC 03,W
059C8:  MOVWF  FEA
059CA:  INCF   FEF,F
059CC:  CLRF   1B
059CE:  BTFSC  FF2.7
059D0:  BSF    1B.7
059D2:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
059D4:  CLRF   x79
059D6:  MOVFF  529,578
059DA:  CLRF   x7B
059DC:  MOVLW  2F
059DE:  MOVWF  x7A
059E0:  MOVLB  0
059E2:  CALL   02F0
059E6:  BTFSC  1B.7
059E8:  BSF    FF2.7
059EA:  MOVF   01,W
059EC:  ADDLW  4C
059EE:  MOVLB  5
059F0:  MOVWF  x2A
059F2:  MOVLW  01
059F4:  ADDWFC 02,W
059F6:  MOVWF  x2B
059F8:  MOVLW  01
059FA:  ADDWF  x2A,W
059FC:  MOVWF  01
059FE:  MOVLW  00
05A00:  ADDWFC x2B,W
05A02:  MOVWF  03
05A04:  MOVF   01,W
05A06:  ADDLW  3E
05A08:  MOVWF  01
05A0A:  MOVLW  01
05A0C:  ADDWFC 03,F
05A0E:  MOVF   01,W
05A10:  ADDLW  2D
05A12:  MOVWF  FE9
05A14:  MOVLW  00
05A16:  ADDWFC 03,W
05A18:  MOVWF  FEA
05A1A:  MOVF   FEF,F
05A1C:  BTFSS  FD8.2
05A1E:  BRA    5B90
05A20:  CLRF   1B
05A22:  BTFSC  FF2.7
05A24:  BSF    1B.7
05A26:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
05A28:  CLRF   x79
05A2A:  MOVFF  529,578
05A2E:  CLRF   x7B
05A30:  MOVLW  2F
05A32:  MOVWF  x7A
05A34:  MOVLB  0
05A36:  CALL   02F0
05A3A:  BTFSC  1B.7
05A3C:  BSF    FF2.7
05A3E:  MOVF   01,W
05A40:  ADDLW  4C
05A42:  MOVLB  5
05A44:  MOVWF  x2A
05A46:  MOVLW  01
05A48:  ADDWFC 02,W
05A4A:  MOVWF  x2B
05A4C:  MOVLW  01
05A4E:  ADDWF  x2A,W
05A50:  MOVWF  01
05A52:  MOVLW  00
05A54:  ADDWFC x2B,W
05A56:  MOVWF  03
05A58:  MOVF   01,W
05A5A:  ADDLW  3E
05A5C:  MOVWF  01
05A5E:  MOVLW  01
05A60:  ADDWFC 03,F
05A62:  MOVF   01,W
05A64:  ADDLW  2A
05A66:  MOVWF  FE9
05A68:  MOVLW  00
05A6A:  ADDWFC 03,W
05A6C:  MOVWF  FEA
05A6E:  MOVFF  FEF,52C
05A72:  CLRF   1B
05A74:  BTFSC  FF2.7
05A76:  BSF    1B.7
05A78:  BCF    FF2.7
05A7A:  CLRF   x79
05A7C:  MOVFF  529,578
05A80:  CLRF   x7B
05A82:  MOVLW  2F
05A84:  MOVWF  x7A
05A86:  MOVLB  0
05A88:  CALL   02F0
05A8C:  BTFSC  1B.7
05A8E:  BSF    FF2.7
05A90:  MOVF   01,W
05A92:  ADDLW  4C
05A94:  MOVLB  5
05A96:  MOVWF  x2D
05A98:  MOVLW  01
05A9A:  ADDWFC 02,W
05A9C:  MOVWF  x2E
05A9E:  MOVLW  01
05AA0:  ADDWF  x2D,W
05AA2:  MOVWF  01
05AA4:  MOVLW  00
05AA6:  ADDWFC x2E,W
05AA8:  MOVWF  03
05AAA:  MOVF   01,W
05AAC:  ADDLW  3E
05AAE:  MOVWF  01
05AB0:  MOVLW  01
05AB2:  ADDWFC 03,F
05AB4:  MOVF   01,W
05AB6:  ADDLW  2C
05AB8:  MOVWF  FE9
05ABA:  MOVLW  00
05ABC:  ADDWFC 03,W
05ABE:  MOVWF  FEA
05AC0:  MOVF   FEF,W
05AC2:  SUBWF  x2C,W
05AC4:  BZ    5B90
05AC6:  BNC   5B90
05AC8:  CLRF   1B
05ACA:  BTFSC  FF2.7
05ACC:  BSF    1B.7
05ACE:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
05AD0:  CLRF   x79
05AD2:  MOVFF  529,578
05AD6:  CLRF   x7B
05AD8:  MOVLW  2F
05ADA:  MOVWF  x7A
05ADC:  MOVLB  0
05ADE:  CALL   02F0
05AE2:  BTFSC  1B.7
05AE4:  BSF    FF2.7
05AE6:  MOVF   01,W
05AE8:  ADDLW  4C
05AEA:  MOVLB  5
05AEC:  MOVWF  x2A
05AEE:  MOVLW  01
05AF0:  ADDWFC 02,W
05AF2:  MOVWF  x2B
05AF4:  MOVLW  01
05AF6:  ADDWF  x2A,W
05AF8:  MOVWF  01
05AFA:  MOVLW  00
05AFC:  ADDWFC x2B,W
05AFE:  MOVWF  03
05B00:  MOVF   01,W
05B02:  ADDLW  3E
05B04:  MOVWF  01
05B06:  MOVLW  01
05B08:  ADDWFC 03,F
05B0A:  MOVF   01,W
05B0C:  ADDLW  2D
05B0E:  MOVWF  FE9
05B10:  MOVLW  00
05B12:  ADDWFC 03,W
05B14:  MOVWF  FEA
05B16:  MOVLW  04
05B18:  MOVWF  FEF
05B1A:  CLRF   1B
05B1C:  BTFSC  FF2.7
05B1E:  BSF    1B.7
05B20:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
05B22:  CLRF   x79
05B24:  MOVFF  529,578
05B28:  CLRF   x7B
05B2A:  MOVLW  2F
05B2C:  MOVWF  x7A
05B2E:  MOVLB  0
05B30:  CALL   02F0
05B34:  BTFSC  1B.7
05B36:  BSF    FF2.7
05B38:  MOVF   01,W
05B3A:  ADDLW  4C
05B3C:  MOVLB  5
05B3E:  MOVWF  x2A
05B40:  MOVLW  01
05B42:  ADDWFC 02,W
05B44:  MOVWF  x2B
05B46:  MOVLW  01
05B48:  ADDWF  x2A,W
05B4A:  MOVWF  01
05B4C:  MOVLW  00
05B4E:  ADDWFC x2B,W
05B50:  MOVWF  03
05B52:  MOVF   01,W
05B54:  ADDLW  3E
05B56:  MOVWF  01
05B58:  MOVLW  01
05B5A:  ADDWFC 03,F
05B5C:  MOVF   01,W
05B5E:  ADDLW  28
05B60:  MOVWF  FE9
05B62:  MOVLW  00
05B64:  ADDWFC 03,W
05B66:  MOVWF  FEA
05B68:  BCF    FD8.0
05B6A:  RLCF   FEF,W
05B6C:  CLRF   03
05B6E:  MOVLB  0
05B70:  CALL   0172
05B74:  TBLRD*+
05B76:  MOVFF  FF5,03
05B7A:  CLRF   00
05B7C:  DECF   00,F
05B7E:  XORWF  00,F
05B80:  MOVLW  FF
05B82:  XORWF  03,F
05B84:  MOVF   00,W
05B86:  MOVLB  4
05B88:  IORWF  x65,F
05B8A:  MOVF   03,W
05B8C:  IORWF  x66,F
05B8E:  MOVLB  5
05B90:  CLRF   1B
05B92:  BTFSC  FF2.7
05B94:  BSF    1B.7
05B96:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
05B98:  CLRF   x79
05B9A:  MOVFF  529,578
05B9E:  CLRF   x7B
05BA0:  MOVLW  2F
05BA2:  MOVWF  x7A
05BA4:  MOVLB  0
05BA6:  CALL   02F0
05BAA:  BTFSC  1B.7
05BAC:  BSF    FF2.7
05BAE:  MOVF   01,W
05BB0:  ADDLW  4C
05BB2:  MOVLB  5
05BB4:  MOVWF  x2A
05BB6:  MOVLW  01
05BB8:  ADDWFC 02,W
05BBA:  MOVWF  x2B
05BBC:  MOVLW  01
05BBE:  ADDWF  x2A,W
05BC0:  MOVWF  01
05BC2:  MOVLW  00
05BC4:  ADDWFC x2B,W
05BC6:  MOVWF  03
05BC8:  MOVF   01,W
05BCA:  ADDLW  3E
05BCC:  MOVWF  01
05BCE:  MOVLW  01
05BD0:  ADDWFC 03,F
05BD2:  MOVF   01,W
05BD4:  ADDLW  2D
05BD6:  MOVWF  FE9
05BD8:  MOVLW  00
05BDA:  ADDWFC 03,W
05BDC:  MOVWF  FEA
05BDE:  DECFSZ FEF,W
05BE0:  BRA    5D52
05BE2:  CLRF   1B
05BE4:  BTFSC  FF2.7
05BE6:  BSF    1B.7
05BE8:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
05BEA:  CLRF   x79
05BEC:  MOVFF  529,578
05BF0:  CLRF   x7B
05BF2:  MOVLW  2F
05BF4:  MOVWF  x7A
05BF6:  MOVLB  0
05BF8:  CALL   02F0
05BFC:  BTFSC  1B.7
05BFE:  BSF    FF2.7
05C00:  MOVF   01,W
05C02:  ADDLW  4C
05C04:  MOVLB  5
05C06:  MOVWF  x2A
05C08:  MOVLW  01
05C0A:  ADDWFC 02,W
05C0C:  MOVWF  x2B
05C0E:  MOVLW  01
05C10:  ADDWF  x2A,W
05C12:  MOVWF  01
05C14:  MOVLW  00
05C16:  ADDWFC x2B,W
05C18:  MOVWF  03
05C1A:  MOVF   01,W
05C1C:  ADDLW  3E
05C1E:  MOVWF  01
05C20:  MOVLW  01
05C22:  ADDWFC 03,F
05C24:  MOVF   01,W
05C26:  ADDLW  2A
05C28:  MOVWF  FE9
05C2A:  MOVLW  00
05C2C:  ADDWFC 03,W
05C2E:  MOVWF  FEA
05C30:  MOVFF  FEF,52C
05C34:  CLRF   1B
05C36:  BTFSC  FF2.7
05C38:  BSF    1B.7
05C3A:  BCF    FF2.7
05C3C:  CLRF   x79
05C3E:  MOVFF  529,578
05C42:  CLRF   x7B
05C44:  MOVLW  2F
05C46:  MOVWF  x7A
05C48:  MOVLB  0
05C4A:  CALL   02F0
05C4E:  BTFSC  1B.7
05C50:  BSF    FF2.7
05C52:  MOVF   01,W
05C54:  ADDLW  4C
05C56:  MOVLB  5
05C58:  MOVWF  x2D
05C5A:  MOVLW  01
05C5C:  ADDWFC 02,W
05C5E:  MOVWF  x2E
05C60:  MOVLW  01
05C62:  ADDWF  x2D,W
05C64:  MOVWF  01
05C66:  MOVLW  00
05C68:  ADDWFC x2E,W
05C6A:  MOVWF  03
05C6C:  MOVF   01,W
05C6E:  ADDLW  3E
05C70:  MOVWF  01
05C72:  MOVLW  01
05C74:  ADDWFC 03,F
05C76:  MOVF   01,W
05C78:  ADDLW  2C
05C7A:  MOVWF  FE9
05C7C:  MOVLW  00
05C7E:  ADDWFC 03,W
05C80:  MOVWF  FEA
05C82:  MOVF   FEF,W
05C84:  SUBWF  x2C,W
05C86:  BZ    5D52
05C88:  BNC   5D52
05C8A:  CLRF   1B
05C8C:  BTFSC  FF2.7
05C8E:  BSF    1B.7
05C90:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
05C92:  CLRF   x79
05C94:  MOVFF  529,578
05C98:  CLRF   x7B
05C9A:  MOVLW  2F
05C9C:  MOVWF  x7A
05C9E:  MOVLB  0
05CA0:  CALL   02F0
05CA4:  BTFSC  1B.7
05CA6:  BSF    FF2.7
05CA8:  MOVF   01,W
05CAA:  ADDLW  4C
05CAC:  MOVLB  5
05CAE:  MOVWF  x2A
05CB0:  MOVLW  01
05CB2:  ADDWFC 02,W
05CB4:  MOVWF  x2B
05CB6:  MOVLW  01
05CB8:  ADDWF  x2A,W
05CBA:  MOVWF  01
05CBC:  MOVLW  00
05CBE:  ADDWFC x2B,W
05CC0:  MOVWF  03
05CC2:  MOVF   01,W
05CC4:  ADDLW  3E
05CC6:  MOVWF  01
05CC8:  MOVLW  01
05CCA:  ADDWFC 03,F
05CCC:  MOVF   01,W
05CCE:  ADDLW  2D
05CD0:  MOVWF  FE9
05CD2:  MOVLW  00
05CD4:  ADDWFC 03,W
05CD6:  MOVWF  FEA
05CD8:  MOVLW  04
05CDA:  MOVWF  FEF
05CDC:  CLRF   1B
05CDE:  BTFSC  FF2.7
05CE0:  BSF    1B.7
05CE2:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
05CE4:  CLRF   x79
05CE6:  MOVFF  529,578
05CEA:  CLRF   x7B
05CEC:  MOVLW  2F
05CEE:  MOVWF  x7A
05CF0:  MOVLB  0
05CF2:  CALL   02F0
05CF6:  BTFSC  1B.7
05CF8:  BSF    FF2.7
05CFA:  MOVF   01,W
05CFC:  ADDLW  4C
05CFE:  MOVLB  5
05D00:  MOVWF  x2A
05D02:  MOVLW  01
05D04:  ADDWFC 02,W
05D06:  MOVWF  x2B
05D08:  MOVLW  01
05D0A:  ADDWF  x2A,W
05D0C:  MOVWF  01
05D0E:  MOVLW  00
05D10:  ADDWFC x2B,W
05D12:  MOVWF  03
05D14:  MOVF   01,W
05D16:  ADDLW  3E
05D18:  MOVWF  01
05D1A:  MOVLW  01
05D1C:  ADDWFC 03,F
05D1E:  MOVF   01,W
05D20:  ADDLW  29
05D22:  MOVWF  FE9
05D24:  MOVLW  00
05D26:  ADDWFC 03,W
05D28:  MOVWF  FEA
05D2A:  BCF    FD8.0
05D2C:  RLCF   FEF,W
05D2E:  CLRF   03
05D30:  MOVLB  0
05D32:  CALL   0172
05D36:  TBLRD*+
05D38:  MOVFF  FF5,03
05D3C:  CLRF   00
05D3E:  DECF   00,F
05D40:  XORWF  00,F
05D42:  MOVLW  FF
05D44:  XORWF  03,F
05D46:  MOVF   00,W
05D48:  MOVLB  4
05D4A:  IORWF  x65,F
05D4C:  MOVF   03,W
05D4E:  IORWF  x66,F
05D50:  MOVLB  5
05D52:  CLRF   1B
05D54:  BTFSC  FF2.7
05D56:  BSF    1B.7
05D58:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
05D5A:  CLRF   x79
05D5C:  MOVFF  529,578
05D60:  CLRF   x7B
05D62:  MOVLW  2F
05D64:  MOVWF  x7A
05D66:  MOVLB  0
05D68:  CALL   02F0
05D6C:  BTFSC  1B.7
05D6E:  BSF    FF2.7
05D70:  MOVF   01,W
05D72:  ADDLW  4C
05D74:  MOVLB  5
05D76:  MOVWF  x2A
05D78:  MOVLW  01
05D7A:  ADDWFC 02,W
05D7C:  MOVWF  x2B
05D7E:  MOVLW  01
05D80:  ADDWF  x2A,W
05D82:  MOVWF  01
05D84:  MOVLW  00
05D86:  ADDWFC x2B,W
05D88:  MOVWF  03
05D8A:  MOVF   01,W
05D8C:  ADDLW  3E
05D8E:  MOVWF  01
05D90:  MOVLW  01
05D92:  ADDWFC 03,F
05D94:  MOVF   01,W
05D96:  ADDLW  2D
05D98:  MOVWF  FE9
05D9A:  MOVLW  00
05D9C:  ADDWFC 03,W
05D9E:  MOVWF  FEA
05DA0:  MOVF   FEF,W
05DA2:  SUBLW  02
05DA4:  BTFSS  FD8.2
05DA6:  BRA    5F18
05DA8:  CLRF   1B
05DAA:  BTFSC  FF2.7
05DAC:  BSF    1B.7
05DAE:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
05DB0:  CLRF   x79
05DB2:  MOVFF  529,578
05DB6:  CLRF   x7B
05DB8:  MOVLW  2F
05DBA:  MOVWF  x7A
05DBC:  MOVLB  0
05DBE:  CALL   02F0
05DC2:  BTFSC  1B.7
05DC4:  BSF    FF2.7
05DC6:  MOVF   01,W
05DC8:  ADDLW  4C
05DCA:  MOVLB  5
05DCC:  MOVWF  x2A
05DCE:  MOVLW  01
05DD0:  ADDWFC 02,W
05DD2:  MOVWF  x2B
05DD4:  MOVLW  01
05DD6:  ADDWF  x2A,W
05DD8:  MOVWF  01
05DDA:  MOVLW  00
05DDC:  ADDWFC x2B,W
05DDE:  MOVWF  03
05DE0:  MOVF   01,W
05DE2:  ADDLW  3E
05DE4:  MOVWF  01
05DE6:  MOVLW  01
05DE8:  ADDWFC 03,F
05DEA:  MOVF   01,W
05DEC:  ADDLW  2A
05DEE:  MOVWF  FE9
05DF0:  MOVLW  00
05DF2:  ADDWFC 03,W
05DF4:  MOVWF  FEA
05DF6:  MOVFF  FEF,52C
05DFA:  CLRF   1B
05DFC:  BTFSC  FF2.7
05DFE:  BSF    1B.7
05E00:  BCF    FF2.7
05E02:  CLRF   x79
05E04:  MOVFF  529,578
05E08:  CLRF   x7B
05E0A:  MOVLW  2F
05E0C:  MOVWF  x7A
05E0E:  MOVLB  0
05E10:  CALL   02F0
05E14:  BTFSC  1B.7
05E16:  BSF    FF2.7
05E18:  MOVF   01,W
05E1A:  ADDLW  4C
05E1C:  MOVLB  5
05E1E:  MOVWF  x2D
05E20:  MOVLW  01
05E22:  ADDWFC 02,W
05E24:  MOVWF  x2E
05E26:  MOVLW  01
05E28:  ADDWF  x2D,W
05E2A:  MOVWF  01
05E2C:  MOVLW  00
05E2E:  ADDWFC x2E,W
05E30:  MOVWF  03
05E32:  MOVF   01,W
05E34:  ADDLW  3E
05E36:  MOVWF  01
05E38:  MOVLW  01
05E3A:  ADDWFC 03,F
05E3C:  MOVF   01,W
05E3E:  ADDLW  2B
05E40:  MOVWF  FE9
05E42:  MOVLW  00
05E44:  ADDWFC 03,W
05E46:  MOVWF  FEA
05E48:  MOVF   FEF,W
05E4A:  SUBWF  x2C,W
05E4C:  BZ    5F18
05E4E:  BNC   5F18
05E50:  CLRF   1B
05E52:  BTFSC  FF2.7
05E54:  BSF    1B.7
05E56:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
05E58:  CLRF   x79
05E5A:  MOVFF  529,578
05E5E:  CLRF   x7B
05E60:  MOVLW  2F
05E62:  MOVWF  x7A
05E64:  MOVLB  0
05E66:  CALL   02F0
05E6A:  BTFSC  1B.7
05E6C:  BSF    FF2.7
05E6E:  MOVF   01,W
05E70:  ADDLW  4C
05E72:  MOVLB  5
05E74:  MOVWF  x2A
05E76:  MOVLW  01
05E78:  ADDWFC 02,W
05E7A:  MOVWF  x2B
05E7C:  MOVLW  01
05E7E:  ADDWF  x2A,W
05E80:  MOVWF  01
05E82:  MOVLW  00
05E84:  ADDWFC x2B,W
05E86:  MOVWF  03
05E88:  MOVF   01,W
05E8A:  ADDLW  3E
05E8C:  MOVWF  01
05E8E:  MOVLW  01
05E90:  ADDWFC 03,F
05E92:  MOVF   01,W
05E94:  ADDLW  2D
05E96:  MOVWF  FE9
05E98:  MOVLW  00
05E9A:  ADDWFC 03,W
05E9C:  MOVWF  FEA
05E9E:  MOVLW  04
05EA0:  MOVWF  FEF
05EA2:  CLRF   1B
05EA4:  BTFSC  FF2.7
05EA6:  BSF    1B.7
05EA8:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
05EAA:  CLRF   x79
05EAC:  MOVFF  529,578
05EB0:  CLRF   x7B
05EB2:  MOVLW  2F
05EB4:  MOVWF  x7A
05EB6:  MOVLB  0
05EB8:  CALL   02F0
05EBC:  BTFSC  1B.7
05EBE:  BSF    FF2.7
05EC0:  MOVF   01,W
05EC2:  ADDLW  4C
05EC4:  MOVLB  5
05EC6:  MOVWF  x2A
05EC8:  MOVLW  01
05ECA:  ADDWFC 02,W
05ECC:  MOVWF  x2B
05ECE:  MOVLW  01
05ED0:  ADDWF  x2A,W
05ED2:  MOVWF  01
05ED4:  MOVLW  00
05ED6:  ADDWFC x2B,W
05ED8:  MOVWF  03
05EDA:  MOVF   01,W
05EDC:  ADDLW  3E
05EDE:  MOVWF  01
05EE0:  MOVLW  01
05EE2:  ADDWFC 03,F
05EE4:  MOVF   01,W
05EE6:  ADDLW  28
05EE8:  MOVWF  FE9
05EEA:  MOVLW  00
05EEC:  ADDWFC 03,W
05EEE:  MOVWF  FEA
05EF0:  BCF    FD8.0
05EF2:  RLCF   FEF,W
05EF4:  CLRF   03
05EF6:  MOVLB  0
05EF8:  CALL   0172
05EFC:  TBLRD*+
05EFE:  MOVFF  FF5,03
05F02:  CLRF   00
05F04:  DECF   00,F
05F06:  XORWF  00,F
05F08:  MOVLW  FF
05F0A:  XORWF  03,F
05F0C:  MOVF   00,W
05F0E:  MOVLB  4
05F10:  IORWF  x65,F
05F12:  MOVF   03,W
05F14:  IORWF  x66,F
05F16:  MOVLB  5
05F18:  CLRF   1B
05F1A:  BTFSC  FF2.7
05F1C:  BSF    1B.7
05F1E:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
05F20:  CLRF   x79
05F22:  MOVFF  529,578
05F26:  CLRF   x7B
05F28:  MOVLW  2F
05F2A:  MOVWF  x7A
05F2C:  MOVLB  0
05F2E:  CALL   02F0
05F32:  BTFSC  1B.7
05F34:  BSF    FF2.7
05F36:  MOVF   01,W
05F38:  ADDLW  4C
05F3A:  MOVLB  5
05F3C:  MOVWF  x2A
05F3E:  MOVLW  01
05F40:  ADDWFC 02,W
05F42:  MOVWF  x2B
05F44:  MOVLW  01
05F46:  ADDWF  x2A,W
05F48:  MOVWF  01
05F4A:  MOVLW  00
05F4C:  ADDWFC x2B,W
05F4E:  MOVWF  03
05F50:  MOVF   01,W
05F52:  ADDLW  3E
05F54:  MOVWF  01
05F56:  MOVLW  01
05F58:  ADDWFC 03,F
05F5A:  MOVF   01,W
05F5C:  ADDLW  2D
05F5E:  MOVWF  FE9
05F60:  MOVLW  00
05F62:  ADDWFC 03,W
05F64:  MOVWF  FEA
05F66:  MOVF   FEF,W
05F68:  SUBLW  03
05F6A:  BTFSS  FD8.2
05F6C:  BRA    60DE
05F6E:  CLRF   1B
05F70:  BTFSC  FF2.7
05F72:  BSF    1B.7
05F74:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
05F76:  CLRF   x79
05F78:  MOVFF  529,578
05F7C:  CLRF   x7B
05F7E:  MOVLW  2F
05F80:  MOVWF  x7A
05F82:  MOVLB  0
05F84:  CALL   02F0
05F88:  BTFSC  1B.7
05F8A:  BSF    FF2.7
05F8C:  MOVF   01,W
05F8E:  ADDLW  4C
05F90:  MOVLB  5
05F92:  MOVWF  x2A
05F94:  MOVLW  01
05F96:  ADDWFC 02,W
05F98:  MOVWF  x2B
05F9A:  MOVLW  01
05F9C:  ADDWF  x2A,W
05F9E:  MOVWF  01
05FA0:  MOVLW  00
05FA2:  ADDWFC x2B,W
05FA4:  MOVWF  03
05FA6:  MOVF   01,W
05FA8:  ADDLW  3E
05FAA:  MOVWF  01
05FAC:  MOVLW  01
05FAE:  ADDWFC 03,F
05FB0:  MOVF   01,W
05FB2:  ADDLW  2A
05FB4:  MOVWF  FE9
05FB6:  MOVLW  00
05FB8:  ADDWFC 03,W
05FBA:  MOVWF  FEA
05FBC:  MOVFF  FEF,52C
05FC0:  CLRF   1B
05FC2:  BTFSC  FF2.7
05FC4:  BSF    1B.7
05FC6:  BCF    FF2.7
05FC8:  CLRF   x79
05FCA:  MOVFF  529,578
05FCE:  CLRF   x7B
05FD0:  MOVLW  2F
05FD2:  MOVWF  x7A
05FD4:  MOVLB  0
05FD6:  CALL   02F0
05FDA:  BTFSC  1B.7
05FDC:  BSF    FF2.7
05FDE:  MOVF   01,W
05FE0:  ADDLW  4C
05FE2:  MOVLB  5
05FE4:  MOVWF  x2D
05FE6:  MOVLW  01
05FE8:  ADDWFC 02,W
05FEA:  MOVWF  x2E
05FEC:  MOVLW  01
05FEE:  ADDWF  x2D,W
05FF0:  MOVWF  01
05FF2:  MOVLW  00
05FF4:  ADDWFC x2E,W
05FF6:  MOVWF  03
05FF8:  MOVF   01,W
05FFA:  ADDLW  3E
05FFC:  MOVWF  01
05FFE:  MOVLW  01
06000:  ADDWFC 03,F
06002:  MOVF   01,W
06004:  ADDLW  2B
06006:  MOVWF  FE9
06008:  MOVLW  00
0600A:  ADDWFC 03,W
0600C:  MOVWF  FEA
0600E:  MOVF   FEF,W
06010:  SUBWF  x2C,W
06012:  BZ    60DE
06014:  BNC   60DE
06016:  CLRF   1B
06018:  BTFSC  FF2.7
0601A:  BSF    1B.7
0601C:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0601E:  CLRF   x79
06020:  MOVFF  529,578
06024:  CLRF   x7B
06026:  MOVLW  2F
06028:  MOVWF  x7A
0602A:  MOVLB  0
0602C:  CALL   02F0
06030:  BTFSC  1B.7
06032:  BSF    FF2.7
06034:  MOVF   01,W
06036:  ADDLW  4C
06038:  MOVLB  5
0603A:  MOVWF  x2A
0603C:  MOVLW  01
0603E:  ADDWFC 02,W
06040:  MOVWF  x2B
06042:  MOVLW  01
06044:  ADDWF  x2A,W
06046:  MOVWF  01
06048:  MOVLW  00
0604A:  ADDWFC x2B,W
0604C:  MOVWF  03
0604E:  MOVF   01,W
06050:  ADDLW  3E
06052:  MOVWF  01
06054:  MOVLW  01
06056:  ADDWFC 03,F
06058:  MOVF   01,W
0605A:  ADDLW  2D
0605C:  MOVWF  FE9
0605E:  MOVLW  00
06060:  ADDWFC 03,W
06062:  MOVWF  FEA
06064:  MOVLW  04
06066:  MOVWF  FEF
06068:  CLRF   1B
0606A:  BTFSC  FF2.7
0606C:  BSF    1B.7
0606E:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
06070:  CLRF   x79
06072:  MOVFF  529,578
06076:  CLRF   x7B
06078:  MOVLW  2F
0607A:  MOVWF  x7A
0607C:  MOVLB  0
0607E:  CALL   02F0
06082:  BTFSC  1B.7
06084:  BSF    FF2.7
06086:  MOVF   01,W
06088:  ADDLW  4C
0608A:  MOVLB  5
0608C:  MOVWF  x2A
0608E:  MOVLW  01
06090:  ADDWFC 02,W
06092:  MOVWF  x2B
06094:  MOVLW  01
06096:  ADDWF  x2A,W
06098:  MOVWF  01
0609A:  MOVLW  00
0609C:  ADDWFC x2B,W
0609E:  MOVWF  03
060A0:  MOVF   01,W
060A2:  ADDLW  3E
060A4:  MOVWF  01
060A6:  MOVLW  01
060A8:  ADDWFC 03,F
060AA:  MOVF   01,W
060AC:  ADDLW  29
060AE:  MOVWF  FE9
060B0:  MOVLW  00
060B2:  ADDWFC 03,W
060B4:  MOVWF  FEA
060B6:  BCF    FD8.0
060B8:  RLCF   FEF,W
060BA:  CLRF   03
060BC:  MOVLB  0
060BE:  CALL   0172
060C2:  TBLRD*+
060C4:  MOVFF  FF5,03
060C8:  CLRF   00
060CA:  DECF   00,F
060CC:  XORWF  00,F
060CE:  MOVLW  FF
060D0:  XORWF  03,F
060D2:  MOVF   00,W
060D4:  MOVLB  4
060D6:  IORWF  x65,F
060D8:  MOVF   03,W
060DA:  IORWF  x66,F
060DC:  MOVLB  5
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
060DE:  MOVLB  0
060E0:  BRA    60E2
....................       } 
....................    } 
060E2:  MOVLB  5
060E4:  INCF   x29,F
060E6:  GOTO   58DA
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
060EA:  CLRF   x29
060EC:  MOVLB  1
060EE:  MOVF   x3E,W
060F0:  MOVLB  5
060F2:  SUBWF  x29,W
060F4:  BTFSC  FD8.0
060F6:  BRA    67C6
060F8:  CLRF   1B
060FA:  BTFSC  FF2.7
060FC:  BSF    1B.7
060FE:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
06100:  CLRF   x79
06102:  MOVFF  529,578
06106:  CLRF   x7B
06108:  MOVLW  21
0610A:  MOVWF  x7A
0610C:  MOVLB  0
0610E:  CALL   02F0
06112:  BTFSC  1B.7
06114:  BSF    FF2.7
06116:  MOVFF  02,03
0611A:  MOVF   01,W
0611C:  ADDLW  40
0611E:  MOVWF  01
06120:  MOVLW  01
06122:  ADDWFC 03,F
06124:  MOVFF  01,FE9
06128:  MOVFF  03,FEA
0612C:  MOVF   FEF,W
0612E:  XORLW  02
06130:  BZ    613A
06132:  XORLW  01
06134:  BTFSC  FD8.2
06136:  BRA    6286
06138:  BRA    67C0
....................          case button_switch: 
0613A:  CLRF   1B
0613C:  BTFSC  FF2.7
0613E:  BSF    1B.7
06140:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
06142:  MOVLB  5
06144:  CLRF   x79
06146:  MOVFF  529,578
0614A:  CLRF   x7B
0614C:  MOVLW  21
0614E:  MOVWF  x7A
06150:  MOVLB  0
06152:  CALL   02F0
06156:  BTFSC  1B.7
06158:  BSF    FF2.7
0615A:  MOVF   01,W
0615C:  ADDLW  02
0615E:  MOVLB  5
06160:  MOVWF  x2A
06162:  MOVLW  00
06164:  ADDWFC 02,W
06166:  MOVWF  x2B
06168:  MOVLW  01
0616A:  ADDWF  x2A,W
0616C:  MOVWF  01
0616E:  MOVLW  00
06170:  ADDWFC x2B,W
06172:  MOVWF  03
06174:  MOVF   01,W
06176:  ADDLW  3E
06178:  MOVWF  01
0617A:  MOVLW  01
0617C:  ADDWFC 03,F
0617E:  MOVF   01,W
06180:  ADDLW  08
06182:  MOVWF  FE9
06184:  MOVLW  00
06186:  ADDWFC 03,W
06188:  MOVWF  FEA
0618A:  BTFSS  FEF.0
0618C:  BRA    6282
0618E:  CLRF   1B
06190:  BTFSC  FF2.7
06192:  BSF    1B.7
06194:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
06196:  CLRF   x79
06198:  MOVFF  529,578
0619C:  CLRF   x7B
0619E:  MOVLW  21
061A0:  MOVWF  x7A
061A2:  MOVLB  0
061A4:  CALL   02F0
061A8:  BTFSC  1B.7
061AA:  BSF    FF2.7
061AC:  MOVF   01,W
061AE:  ADDLW  02
061B0:  MOVLB  5
061B2:  MOVWF  x2A
061B4:  MOVLW  00
061B6:  ADDWFC 02,W
061B8:  MOVWF  x2B
061BA:  MOVLW  01
061BC:  ADDWF  x2A,W
061BE:  MOVWF  01
061C0:  MOVLW  00
061C2:  ADDWFC x2B,W
061C4:  MOVWF  03
061C6:  MOVF   01,W
061C8:  ADDLW  3E
061CA:  MOVWF  01
061CC:  MOVLW  01
061CE:  ADDWFC 03,F
061D0:  MOVF   01,W
061D2:  ADDLW  07
061D4:  MOVWF  FE9
061D6:  MOVLW  00
061D8:  ADDWFC 03,W
061DA:  MOVWF  FEA
061DC:  MOVF   FEF,F
061DE:  BNZ   6282
061E0:  CLRF   1B
061E2:  BTFSC  FF2.7
061E4:  BSF    1B.7
061E6:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
061E8:  CLRF   x79
061EA:  MOVFF  529,578
061EE:  CLRF   x7B
061F0:  MOVLW  21
061F2:  MOVWF  x7A
061F4:  MOVLB  0
061F6:  CALL   02F0
061FA:  BTFSC  1B.7
061FC:  BSF    FF2.7
061FE:  MOVF   01,W
06200:  ADDLW  02
06202:  MOVLB  5
06204:  MOVWF  x2A
06206:  MOVLW  00
06208:  ADDWFC 02,W
0620A:  MOVWF  x2B
0620C:  MOVLW  01
0620E:  ADDWF  x2A,W
06210:  MOVWF  01
06212:  MOVLW  00
06214:  ADDWFC x2B,W
06216:  MOVWF  03
06218:  MOVF   01,W
0621A:  ADDLW  3E
0621C:  MOVWF  01
0621E:  MOVLW  01
06220:  ADDWFC 03,F
06222:  MOVF   01,W
06224:  ADDLW  01
06226:  MOVWF  FE9
06228:  MOVLW  00
0622A:  ADDWFC 03,W
0622C:  MOVWF  FEA
0622E:  MOVLW  01
06230:  MOVWF  FEF
06232:  CLRF   1B
06234:  BTFSC  FF2.7
06236:  BSF    1B.7
06238:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
0623A:  CLRF   x79
0623C:  MOVFF  529,578
06240:  CLRF   x7B
06242:  MOVLW  21
06244:  MOVWF  x7A
06246:  MOVLB  0
06248:  CALL   02F0
0624C:  BTFSC  1B.7
0624E:  BSF    FF2.7
06250:  MOVF   01,W
06252:  ADDLW  02
06254:  MOVLB  5
06256:  MOVWF  x2A
06258:  MOVLW  00
0625A:  ADDWFC 02,W
0625C:  MOVWF  x2B
0625E:  MOVLW  01
06260:  ADDWF  x2A,W
06262:  MOVWF  01
06264:  MOVLW  00
06266:  ADDWFC x2B,W
06268:  MOVWF  03
0626A:  MOVF   01,W
0626C:  ADDLW  3E
0626E:  MOVWF  01
06270:  MOVLW  01
06272:  ADDWFC 03,F
06274:  MOVF   01,W
06276:  ADDLW  02
06278:  MOVWF  FE9
0627A:  MOVLW  00
0627C:  ADDWFC 03,W
0627E:  MOVWF  FEA
06280:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
06282:  MOVLB  0
06284:  BRA    67C0
....................          case timer: 
06286:  CLRF   1B
06288:  BTFSC  FF2.7
0628A:  BSF    1B.7
0628C:  BCF    FF2.7
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
0628E:  MOVLB  5
06290:  CLRF   x79
06292:  MOVFF  529,578
06296:  CLRF   x7B
06298:  MOVLW  21
0629A:  MOVWF  x7A
0629C:  MOVLB  0
0629E:  CALL   02F0
062A2:  BTFSC  1B.7
062A4:  BSF    FF2.7
062A6:  MOVF   01,W
062A8:  ADDLW  02
062AA:  MOVLB  5
062AC:  MOVWF  x2A
062AE:  MOVLW  00
062B0:  ADDWFC 02,W
062B2:  MOVWF  x2B
062B4:  MOVLW  01
062B6:  ADDWF  x2A,W
062B8:  MOVWF  01
062BA:  MOVLW  00
062BC:  ADDWFC x2B,W
062BE:  MOVWF  03
062C0:  MOVF   01,W
062C2:  ADDLW  3E
062C4:  MOVWF  01
062C6:  MOVLW  01
062C8:  ADDWFC 03,F
062CA:  MOVF   01,W
062CC:  ADDLW  1F
062CE:  MOVWF  FE9
062D0:  MOVLW  00
062D2:  ADDWFC 03,W
062D4:  MOVWF  FEA
062D6:  BTFSS  FEF.0
062D8:  BRA    67BC
062DA:  CLRF   1B
062DC:  BTFSC  FF2.7
062DE:  BSF    1B.7
062E0:  BCF    FF2.7
....................           { 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
062E2:  CLRF   x79
062E4:  MOVFF  529,578
062E8:  CLRF   x7B
062EA:  MOVLW  21
062EC:  MOVWF  x7A
062EE:  MOVLB  0
062F0:  CALL   02F0
062F4:  BTFSC  1B.7
062F6:  BSF    FF2.7
062F8:  MOVF   01,W
062FA:  ADDLW  02
062FC:  MOVLB  5
062FE:  MOVWF  x2A
06300:  MOVLW  00
06302:  ADDWFC 02,W
06304:  MOVWF  x2B
06306:  MOVLW  01
06308:  ADDWF  x2A,W
0630A:  MOVWF  01
0630C:  MOVLW  00
0630E:  ADDWFC x2B,W
06310:  MOVWF  03
06312:  MOVF   01,W
06314:  ADDLW  3E
06316:  MOVWF  01
06318:  MOVLW  01
0631A:  ADDWFC 03,F
0631C:  MOVF   01,W
0631E:  ADDLW  1D
06320:  MOVWF  FE9
06322:  MOVLW  00
06324:  ADDWFC 03,W
06326:  MOVWF  FEA
06328:  MOVLW  01
0632A:  ADDWF  FEE,F
0632C:  BNC   6330
0632E:  INCF   FEF,F
06330:  CLRF   1B
06332:  BTFSC  FF2.7
06334:  BSF    1B.7
06336:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
06338:  CLRF   x79
0633A:  MOVFF  529,578
0633E:  CLRF   x7B
06340:  MOVLW  21
06342:  MOVWF  x7A
06344:  MOVLB  0
06346:  CALL   02F0
0634A:  BTFSC  1B.7
0634C:  BSF    FF2.7
0634E:  MOVF   01,W
06350:  ADDLW  02
06352:  MOVLB  5
06354:  MOVWF  x2A
06356:  MOVLW  00
06358:  ADDWFC 02,W
0635A:  MOVWF  x2B
0635C:  MOVLW  01
0635E:  ADDWF  x2A,W
06360:  MOVWF  01
06362:  MOVLW  00
06364:  ADDWFC x2B,W
06366:  MOVWF  03
06368:  MOVF   01,W
0636A:  ADDLW  3E
0636C:  MOVWF  01
0636E:  MOVLW  01
06370:  ADDWFC 03,F
06372:  MOVF   01,W
06374:  ADDLW  1D
06376:  MOVWF  FE9
06378:  MOVLW  00
0637A:  ADDWFC 03,W
0637C:  MOVWF  FEA
0637E:  MOVFF  FEC,52D
06382:  MOVF   FED,F
06384:  MOVFF  FEF,52C
06388:  CLRF   1B
0638A:  BTFSC  FF2.7
0638C:  BSF    1B.7
0638E:  BCF    FF2.7
06390:  CLRF   x79
06392:  MOVFF  529,578
06396:  CLRF   x7B
06398:  MOVLW  21
0639A:  MOVWF  x7A
0639C:  MOVLB  0
0639E:  CALL   02F0
063A2:  BTFSC  1B.7
063A4:  BSF    FF2.7
063A6:  MOVF   01,W
063A8:  ADDLW  02
063AA:  MOVLB  5
063AC:  MOVWF  x2E
063AE:  MOVLW  00
063B0:  ADDWFC 02,W
063B2:  MOVWF  x2F
063B4:  MOVLW  01
063B6:  ADDWF  x2E,W
063B8:  MOVWF  01
063BA:  MOVLW  00
063BC:  ADDWFC x2F,W
063BE:  MOVWF  03
063C0:  MOVF   01,W
063C2:  ADDLW  3E
063C4:  MOVWF  01
063C6:  MOVLW  01
063C8:  ADDWFC 03,F
063CA:  MOVF   01,W
063CC:  ADDLW  01
063CE:  MOVWF  FE9
063D0:  MOVLW  00
063D2:  ADDWFC 03,W
063D4:  MOVWF  FEA
063D6:  MOVFF  FEC,03
063DA:  MOVF   FED,F
063DC:  MOVFF  FEF,01
063E0:  MOVF   03,W
063E2:  SUBWF  x2D,W
063E4:  BTFSS  FD8.0
063E6:  BRA    67BC
063E8:  BNZ   63F2
063EA:  MOVF   x2C,W
063EC:  SUBWF  01,W
063EE:  BTFSC  FD8.0
063F0:  BRA    67BC
063F2:  CLRF   1B
063F4:  BTFSC  FF2.7
063F6:  BSF    1B.7
063F8:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
063FA:  CLRF   x79
063FC:  MOVFF  529,578
06400:  CLRF   x7B
06402:  MOVLW  21
06404:  MOVWF  x7A
06406:  MOVLB  0
06408:  CALL   02F0
0640C:  BTFSC  1B.7
0640E:  BSF    FF2.7
06410:  MOVF   01,W
06412:  ADDLW  02
06414:  MOVLB  5
06416:  MOVWF  x2A
06418:  MOVLW  00
0641A:  ADDWFC 02,W
0641C:  MOVWF  x2B
0641E:  MOVLW  01
06420:  ADDWF  x2A,W
06422:  MOVWF  01
06424:  MOVLW  00
06426:  ADDWFC x2B,W
06428:  MOVWF  03
0642A:  MOVF   01,W
0642C:  ADDLW  3E
0642E:  MOVWF  01
06430:  MOVLW  01
06432:  ADDWFC 03,F
06434:  MOVFF  01,FE9
06438:  MOVFF  03,FEA
0643C:  MOVF   FEF,F
0643E:  BNZ   6534
06440:  CLRF   1B
06442:  BTFSC  FF2.7
06444:  BSF    1B.7
06446:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
06448:  CLRF   x79
0644A:  MOVFF  529,578
0644E:  CLRF   x7B
06450:  MOVLW  21
06452:  MOVWF  x7A
06454:  MOVLB  0
06456:  CALL   02F0
0645A:  BTFSC  1B.7
0645C:  BSF    FF2.7
0645E:  MOVF   01,W
06460:  ADDLW  02
06462:  MOVLB  5
06464:  MOVWF  x2A
06466:  MOVLW  00
06468:  ADDWFC 02,W
0646A:  MOVWF  x2B
0646C:  MOVLW  01
0646E:  ADDWF  x2A,W
06470:  MOVWF  01
06472:  MOVLW  00
06474:  ADDWFC x2B,W
06476:  MOVWF  03
06478:  MOVF   01,W
0647A:  ADDLW  3E
0647C:  MOVWF  01
0647E:  MOVLW  01
06480:  ADDWFC 03,F
06482:  MOVF   01,W
06484:  ADDLW  04
06486:  MOVWF  FE9
06488:  MOVLW  00
0648A:  ADDWFC 03,W
0648C:  MOVWF  FEA
0648E:  MOVLW  01
06490:  MOVWF  FEF
06492:  CLRF   1B
06494:  BTFSC  FF2.7
06496:  BSF    1B.7
06498:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
0649A:  CLRF   x79
0649C:  MOVFF  529,578
064A0:  CLRF   x7B
064A2:  MOVLW  21
064A4:  MOVWF  x7A
064A6:  MOVLB  0
064A8:  CALL   02F0
064AC:  BTFSC  1B.7
064AE:  BSF    FF2.7
064B0:  MOVF   01,W
064B2:  ADDLW  02
064B4:  MOVLB  5
064B6:  MOVWF  x2A
064B8:  MOVLW  00
064BA:  ADDWFC 02,W
064BC:  MOVWF  x2B
064BE:  MOVLW  01
064C0:  ADDWF  x2A,W
064C2:  MOVWF  01
064C4:  MOVLW  00
064C6:  ADDWFC x2B,W
064C8:  MOVWF  03
064CA:  MOVF   01,W
064CC:  ADDLW  3E
064CE:  MOVWF  01
064D0:  MOVLW  01
064D2:  ADDWFC 03,F
064D4:  MOVF   01,W
064D6:  ADDLW  05
064D8:  MOVWF  FE9
064DA:  MOVLW  00
064DC:  ADDWFC 03,W
064DE:  MOVWF  FEA
064E0:  BSF    FEF.0
064E2:  CLRF   1B
064E4:  BTFSC  FF2.7
064E6:  BSF    1B.7
064E8:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
064EA:  CLRF   x79
064EC:  MOVFF  529,578
064F0:  CLRF   x7B
064F2:  MOVLW  21
064F4:  MOVWF  x7A
064F6:  MOVLB  0
064F8:  CALL   02F0
064FC:  BTFSC  1B.7
064FE:  BSF    FF2.7
06500:  MOVF   01,W
06502:  ADDLW  02
06504:  MOVLB  5
06506:  MOVWF  x2A
06508:  MOVLW  00
0650A:  ADDWFC 02,W
0650C:  MOVWF  x2B
0650E:  MOVLW  01
06510:  ADDWF  x2A,W
06512:  MOVWF  01
06514:  MOVLW  00
06516:  ADDWFC x2B,W
06518:  MOVWF  03
0651A:  MOVF   01,W
0651C:  ADDLW  3E
0651E:  MOVWF  01
06520:  MOVLW  01
06522:  ADDWFC 03,F
06524:  MOVF   01,W
06526:  ADDLW  1F
06528:  MOVWF  FE9
0652A:  MOVLW  00
0652C:  ADDWFC 03,W
0652E:  MOVWF  FEA
06530:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
06532:  BRA    67BC
06534:  CLRF   1B
06536:  BTFSC  FF2.7
06538:  BSF    1B.7
0653A:  BCF    FF2.7
0653C:  CLRF   x79
0653E:  MOVFF  529,578
06542:  CLRF   x7B
06544:  MOVLW  21
06546:  MOVWF  x7A
06548:  MOVLB  0
0654A:  CALL   02F0
0654E:  BTFSC  1B.7
06550:  BSF    FF2.7
06552:  MOVF   01,W
06554:  ADDLW  02
06556:  MOVLB  5
06558:  MOVWF  x2A
0655A:  MOVLW  00
0655C:  ADDWFC 02,W
0655E:  MOVWF  x2B
06560:  MOVLW  01
06562:  ADDWF  x2A,W
06564:  MOVWF  01
06566:  MOVLW  00
06568:  ADDWFC x2B,W
0656A:  MOVWF  03
0656C:  MOVF   01,W
0656E:  ADDLW  3E
06570:  MOVWF  01
06572:  MOVLW  01
06574:  ADDWFC 03,F
06576:  MOVFF  01,FE9
0657A:  MOVFF  03,FEA
0657E:  DECFSZ FEF,W
06580:  BRA    6676
06582:  CLRF   1B
06584:  BTFSC  FF2.7
06586:  BSF    1B.7
06588:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
0658A:  CLRF   x79
0658C:  MOVFF  529,578
06590:  CLRF   x7B
06592:  MOVLW  21
06594:  MOVWF  x7A
06596:  MOVLB  0
06598:  CALL   02F0
0659C:  BTFSC  1B.7
0659E:  BSF    FF2.7
065A0:  MOVF   01,W
065A2:  ADDLW  02
065A4:  MOVLB  5
065A6:  MOVWF  x2A
065A8:  MOVLW  00
065AA:  ADDWFC 02,W
065AC:  MOVWF  x2B
065AE:  MOVLW  01
065B0:  ADDWF  x2A,W
065B2:  MOVWF  01
065B4:  MOVLW  00
065B6:  ADDWFC x2B,W
065B8:  MOVWF  03
065BA:  MOVF   01,W
065BC:  ADDLW  3E
065BE:  MOVWF  01
065C0:  MOVLW  01
065C2:  ADDWFC 03,F
065C4:  MOVF   01,W
065C6:  ADDLW  07
065C8:  MOVWF  FE9
065CA:  MOVLW  00
065CC:  ADDWFC 03,W
065CE:  MOVWF  FEA
065D0:  MOVLW  01
065D2:  MOVWF  FEF
065D4:  CLRF   1B
065D6:  BTFSC  FF2.7
065D8:  BSF    1B.7
065DA:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
065DC:  CLRF   x79
065DE:  MOVFF  529,578
065E2:  CLRF   x7B
065E4:  MOVLW  21
065E6:  MOVWF  x7A
065E8:  MOVLB  0
065EA:  CALL   02F0
065EE:  BTFSC  1B.7
065F0:  BSF    FF2.7
065F2:  MOVF   01,W
065F4:  ADDLW  02
065F6:  MOVLB  5
065F8:  MOVWF  x2A
065FA:  MOVLW  00
065FC:  ADDWFC 02,W
065FE:  MOVWF  x2B
06600:  MOVLW  01
06602:  ADDWF  x2A,W
06604:  MOVWF  01
06606:  MOVLW  00
06608:  ADDWFC x2B,W
0660A:  MOVWF  03
0660C:  MOVF   01,W
0660E:  ADDLW  3E
06610:  MOVWF  01
06612:  MOVLW  01
06614:  ADDWFC 03,F
06616:  MOVF   01,W
06618:  ADDLW  08
0661A:  MOVWF  FE9
0661C:  MOVLW  00
0661E:  ADDWFC 03,W
06620:  MOVWF  FEA
06622:  BSF    FEF.0
06624:  CLRF   1B
06626:  BTFSC  FF2.7
06628:  BSF    1B.7
0662A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
0662C:  CLRF   x79
0662E:  MOVFF  529,578
06632:  CLRF   x7B
06634:  MOVLW  21
06636:  MOVWF  x7A
06638:  MOVLB  0
0663A:  CALL   02F0
0663E:  BTFSC  1B.7
06640:  BSF    FF2.7
06642:  MOVF   01,W
06644:  ADDLW  02
06646:  MOVLB  5
06648:  MOVWF  x2A
0664A:  MOVLW  00
0664C:  ADDWFC 02,W
0664E:  MOVWF  x2B
06650:  MOVLW  01
06652:  ADDWF  x2A,W
06654:  MOVWF  01
06656:  MOVLW  00
06658:  ADDWFC x2B,W
0665A:  MOVWF  03
0665C:  MOVF   01,W
0665E:  ADDLW  3E
06660:  MOVWF  01
06662:  MOVLW  01
06664:  ADDWFC 03,F
06666:  MOVF   01,W
06668:  ADDLW  1F
0666A:  MOVWF  FE9
0666C:  MOVLW  00
0666E:  ADDWFC 03,W
06670:  MOVWF  FEA
06672:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
06674:  BRA    67BC
06676:  CLRF   1B
06678:  BTFSC  FF2.7
0667A:  BSF    1B.7
0667C:  BCF    FF2.7
0667E:  CLRF   x79
06680:  MOVFF  529,578
06684:  CLRF   x7B
06686:  MOVLW  21
06688:  MOVWF  x7A
0668A:  MOVLB  0
0668C:  CALL   02F0
06690:  BTFSC  1B.7
06692:  BSF    FF2.7
06694:  MOVF   01,W
06696:  ADDLW  02
06698:  MOVLB  5
0669A:  MOVWF  x2A
0669C:  MOVLW  00
0669E:  ADDWFC 02,W
066A0:  MOVWF  x2B
066A2:  MOVLW  01
066A4:  ADDWF  x2A,W
066A6:  MOVWF  01
066A8:  MOVLW  00
066AA:  ADDWFC x2B,W
066AC:  MOVWF  03
066AE:  MOVF   01,W
066B0:  ADDLW  3E
066B2:  MOVWF  01
066B4:  MOVLW  01
066B6:  ADDWFC 03,F
066B8:  MOVFF  01,FE9
066BC:  MOVFF  03,FEA
066C0:  MOVF   FEF,W
066C2:  SUBLW  02
066C4:  BNZ   67BC
066C6:  CLRF   1B
066C8:  BTFSC  FF2.7
066CA:  BSF    1B.7
066CC:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
066CE:  CLRF   x79
066D0:  MOVFF  529,578
066D4:  CLRF   x7B
066D6:  MOVLW  21
066D8:  MOVWF  x7A
066DA:  MOVLB  0
066DC:  CALL   02F0
066E0:  BTFSC  1B.7
066E2:  BSF    FF2.7
066E4:  MOVF   01,W
066E6:  ADDLW  02
066E8:  MOVLB  5
066EA:  MOVWF  x2A
066EC:  MOVLW  00
066EE:  ADDWFC 02,W
066F0:  MOVWF  x2B
066F2:  MOVLW  01
066F4:  ADDWF  x2A,W
066F6:  MOVWF  01
066F8:  MOVLW  00
066FA:  ADDWFC x2B,W
066FC:  MOVWF  03
066FE:  MOVF   01,W
06700:  ADDLW  3E
06702:  MOVWF  01
06704:  MOVLW  01
06706:  ADDWFC 03,F
06708:  MOVF   01,W
0670A:  ADDLW  04
0670C:  MOVWF  FE9
0670E:  MOVLW  00
06710:  ADDWFC 03,W
06712:  MOVWF  FEA
06714:  MOVLW  01
06716:  MOVWF  FEF
06718:  CLRF   1B
0671A:  BTFSC  FF2.7
0671C:  BSF    1B.7
0671E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
06720:  CLRF   x79
06722:  MOVFF  529,578
06726:  CLRF   x7B
06728:  MOVLW  21
0672A:  MOVWF  x7A
0672C:  MOVLB  0
0672E:  CALL   02F0
06732:  BTFSC  1B.7
06734:  BSF    FF2.7
06736:  MOVF   01,W
06738:  ADDLW  02
0673A:  MOVLB  5
0673C:  MOVWF  x2A
0673E:  MOVLW  00
06740:  ADDWFC 02,W
06742:  MOVWF  x2B
06744:  MOVLW  01
06746:  ADDWF  x2A,W
06748:  MOVWF  01
0674A:  MOVLW  00
0674C:  ADDWFC x2B,W
0674E:  MOVWF  03
06750:  MOVF   01,W
06752:  ADDLW  3E
06754:  MOVWF  01
06756:  MOVLW  01
06758:  ADDWFC 03,F
0675A:  MOVF   01,W
0675C:  ADDLW  05
0675E:  MOVWF  FE9
06760:  MOVLW  00
06762:  ADDWFC 03,W
06764:  MOVWF  FEA
06766:  BSF    FEF.0
06768:  CLRF   1B
0676A:  BTFSC  FF2.7
0676C:  BSF    1B.7
0676E:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
06770:  CLRF   x79
06772:  MOVFF  529,578
06776:  CLRF   x7B
06778:  MOVLW  21
0677A:  MOVWF  x7A
0677C:  MOVLB  0
0677E:  CALL   02F0
06782:  BTFSC  1B.7
06784:  BSF    FF2.7
06786:  MOVF   01,W
06788:  ADDLW  02
0678A:  MOVLB  5
0678C:  MOVWF  x2A
0678E:  MOVLW  00
06790:  ADDWFC 02,W
06792:  MOVWF  x2B
06794:  MOVLW  01
06796:  ADDWF  x2A,W
06798:  MOVWF  01
0679A:  MOVLW  00
0679C:  ADDWFC x2B,W
0679E:  MOVWF  03
067A0:  MOVF   01,W
067A2:  ADDLW  3E
067A4:  MOVWF  01
067A6:  MOVLW  01
067A8:  ADDWFC 03,F
067AA:  MOVF   01,W
067AC:  ADDLW  1D
067AE:  MOVWF  FE9
067B0:  MOVLW  00
067B2:  ADDWFC 03,W
067B4:  MOVWF  FEA
067B6:  CLRF   FEC
067B8:  MOVF   FED,F
067BA:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
067BC:  MOVLB  0
067BE:  BRA    67C0
....................       } 
....................    } 
067C0:  MOVLB  5
067C2:  INCF   x29,F
067C4:  BRA    60EC
.................... } 
067C6:  MOVLB  0
067C8:  GOTO   69FE (RETURN)
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
0072C:  MOVLW  06
0072E:  MOVLB  5
00730:  ADDWF  x7A,W
00732:  MOVWF  FE9
00734:  MOVLW  00
00736:  ADDWFC x7B,W
00738:  MOVWF  FEA
0073A:  MOVLW  00
0073C:  BTFSC  FEF.0
0073E:  MOVLW  01
00740:  ANDLW  01
00742:  BNZ   0820
00744:  MOVLW  06
00746:  ADDWF  x7A,W
00748:  MOVWF  FE9
0074A:  MOVLW  00
0074C:  ADDWFC x7B,W
0074E:  MOVWF  FEA
00750:  MOVLW  00
00752:  BTFSC  FEF.1
00754:  MOVLW  01
00756:  ANDLW  01
00758:  SUBLW  01
0075A:  BNZ   0820
....................    {    
....................       sw-> previous_state = button_pressed; 
0075C:  MOVLW  06
0075E:  ADDWF  x7A,W
00760:  MOVWF  FE9
00762:  MOVLW  00
00764:  ADDWFC x7B,W
00766:  MOVWF  FEA
00768:  BCF    FEF.1
....................       if(sw->outstate==off) 
0076A:  MOVLW  0B
0076C:  ADDWF  x7A,W
0076E:  MOVWF  FE9
00770:  MOVLW  00
00772:  ADDWFC x7B,W
00774:  MOVWF  FEA
00776:  DECFSZ FEF,W
00778:  BRA    07C4
....................       { 
....................          sw->outstate=on; 
0077A:  MOVLW  0B
0077C:  ADDWF  x7A,W
0077E:  MOVWF  FE9
00780:  MOVLW  00
00782:  ADDWFC x7B,W
00784:  MOVWF  FEA
00786:  CLRF   FEF
....................          sw->on.value=1; 
00788:  MOVLW  01
0078A:  ADDWF  x7A,W
0078C:  MOVWF  FE9
0078E:  MOVLW  00
00790:  ADDWFC x7B,W
00792:  MOVWF  FEA
00794:  MOVLW  01
00796:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00798:  MOVLW  02
0079A:  ADDWF  x7A,W
0079C:  MOVWF  FE9
0079E:  MOVLW  00
007A0:  ADDWFC x7B,W
007A2:  MOVWF  FEA
007A4:  BSF    FEF.0
....................          sw->off.value=0; 
007A6:  MOVLW  04
007A8:  ADDWF  x7A,W
007AA:  MOVWF  FE9
007AC:  MOVLW  00
007AE:  ADDWFC x7B,W
007B0:  MOVWF  FEA
007B2:  CLRF   FEF
....................          sw->off.needs_update=true; 
007B4:  MOVLW  05
007B6:  ADDWF  x7A,W
007B8:  MOVWF  FE9
007BA:  MOVLW  00
007BC:  ADDWFC x7B,W
007BE:  MOVWF  FEA
007C0:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
007C2:  BRA    081E
007C4:  MOVLW  0B
007C6:  ADDWF  x7A,W
007C8:  MOVWF  FE9
007CA:  MOVLW  00
007CC:  ADDWFC x7B,W
007CE:  MOVWF  FEA
007D0:  MOVF   FEF,F
007D2:  BNZ   081E
....................       { 
....................          sw->outstate=off; 
007D4:  MOVLW  0B
007D6:  ADDWF  x7A,W
007D8:  MOVWF  FE9
007DA:  MOVLW  00
007DC:  ADDWFC x7B,W
007DE:  MOVWF  FEA
007E0:  MOVLW  01
007E2:  MOVWF  FEF
....................          sw->off.value=1; 
007E4:  MOVLW  04
007E6:  ADDWF  x7A,W
007E8:  MOVWF  FE9
007EA:  MOVLW  00
007EC:  ADDWFC x7B,W
007EE:  MOVWF  FEA
007F0:  MOVLW  01
007F2:  MOVWF  FEF
....................          sw->off.needs_update=true; 
007F4:  MOVLW  05
007F6:  ADDWF  x7A,W
007F8:  MOVWF  FE9
007FA:  MOVLW  00
007FC:  ADDWFC x7B,W
007FE:  MOVWF  FEA
00800:  BSF    FEF.0
....................          sw->on.value=0; 
00802:  MOVLW  01
00804:  ADDWF  x7A,W
00806:  MOVWF  FE9
00808:  MOVLW  00
0080A:  ADDWFC x7B,W
0080C:  MOVWF  FEA
0080E:  CLRF   FEF
....................          sw->on.needs_update=true; 
00810:  MOVLW  02
00812:  ADDWF  x7A,W
00814:  MOVWF  FE9
00816:  MOVLW  00
00818:  ADDWFC x7B,W
0081A:  MOVWF  FEA
0081C:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
0081E:  BRA    0846
00820:  MOVLW  06
00822:  ADDWF  x7A,W
00824:  MOVWF  FE9
00826:  MOVLW  00
00828:  ADDWFC x7B,W
0082A:  MOVWF  FEA
0082C:  MOVLW  00
0082E:  BTFSC  FEF.0
00830:  MOVLW  01
00832:  ANDLW  01
00834:  SUBLW  01
00836:  BNZ   0846
....................       sw-> previous_state = button_depressed; 
00838:  MOVLW  06
0083A:  ADDWF  x7A,W
0083C:  MOVWF  FE9
0083E:  MOVLW  00
00840:  ADDWFC x7B,W
00842:  MOVWF  FEA
00844:  BSF    FEF.1
.................... } 
00846:  MOVLB  0
00848:  GOTO   0D6E (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
0084C:  MOVLW  06
0084E:  MOVLB  5
00850:  ADDWF  x7A,W
00852:  MOVWF  FE9
00854:  MOVLW  00
00856:  ADDWFC x7B,W
00858:  MOVWF  FEA
0085A:  MOVLW  00
0085C:  BTFSC  FEF.0
0085E:  MOVLW  01
00860:  ANDLW  01
00862:  BNZ   08BE
00864:  MOVLW  07
00866:  ADDWF  x7A,W
00868:  MOVWF  FE9
0086A:  MOVLW  00
0086C:  ADDWFC x7B,W
0086E:  MOVWF  FEA
00870:  DECFSZ FEF,W
00872:  BRA    08BE
....................    { 
....................          sw->outstate=on; 
00874:  MOVLW  07
00876:  ADDWF  x7A,W
00878:  MOVWF  FE9
0087A:  MOVLW  00
0087C:  ADDWFC x7B,W
0087E:  MOVWF  FEA
00880:  CLRF   FEF
....................          sw->on.value=1; 
00882:  MOVLW  01
00884:  ADDWF  x7A,W
00886:  MOVWF  FE9
00888:  MOVLW  00
0088A:  ADDWFC x7B,W
0088C:  MOVWF  FEA
0088E:  MOVLW  01
00890:  MOVWF  FEF
....................          sw->on.needs_update=true; 
00892:  MOVLW  02
00894:  ADDWF  x7A,W
00896:  MOVWF  FE9
00898:  MOVLW  00
0089A:  ADDWFC x7B,W
0089C:  MOVWF  FEA
0089E:  BSF    FEF.0
....................          sw->off.value=0; 
008A0:  MOVLW  04
008A2:  ADDWF  x7A,W
008A4:  MOVWF  FE9
008A6:  MOVLW  00
008A8:  ADDWFC x7B,W
008AA:  MOVWF  FEA
008AC:  CLRF   FEF
....................          sw->off.needs_update=true; 
008AE:  MOVLW  05
008B0:  ADDWF  x7A,W
008B2:  MOVWF  FE9
008B4:  MOVLW  00
008B6:  ADDWFC x7B,W
008B8:  MOVWF  FEA
008BA:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
008BC:  BRA    0930
008BE:  MOVLW  06
008C0:  ADDWF  x7A,W
008C2:  MOVWF  FE9
008C4:  MOVLW  00
008C6:  ADDWFC x7B,W
008C8:  MOVWF  FEA
008CA:  MOVLW  00
008CC:  BTFSC  FEF.0
008CE:  MOVLW  01
008D0:  ANDLW  01
008D2:  SUBLW  01
008D4:  BNZ   0930
008D6:  MOVLW  07
008D8:  ADDWF  x7A,W
008DA:  MOVWF  FE9
008DC:  MOVLW  00
008DE:  ADDWFC x7B,W
008E0:  MOVWF  FEA
008E2:  MOVF   FEF,F
008E4:  BNZ   0930
....................    { 
....................          sw->outstate=off; 
008E6:  MOVLW  07
008E8:  ADDWF  x7A,W
008EA:  MOVWF  FE9
008EC:  MOVLW  00
008EE:  ADDWFC x7B,W
008F0:  MOVWF  FEA
008F2:  MOVLW  01
008F4:  MOVWF  FEF
....................          sw->off.value=1; 
008F6:  MOVLW  04
008F8:  ADDWF  x7A,W
008FA:  MOVWF  FE9
008FC:  MOVLW  00
008FE:  ADDWFC x7B,W
00900:  MOVWF  FEA
00902:  MOVLW  01
00904:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00906:  MOVLW  05
00908:  ADDWF  x7A,W
0090A:  MOVWF  FE9
0090C:  MOVLW  00
0090E:  ADDWFC x7B,W
00910:  MOVWF  FEA
00912:  BSF    FEF.0
....................          sw->on.value=0; 
00914:  MOVLW  01
00916:  ADDWF  x7A,W
00918:  MOVWF  FE9
0091A:  MOVLW  00
0091C:  ADDWFC x7B,W
0091E:  MOVWF  FEA
00920:  CLRF   FEF
....................          sw->on.needs_update=true; 
00922:  MOVLW  02
00924:  ADDWF  x7A,W
00926:  MOVWF  FE9
00928:  MOVLW  00
0092A:  ADDWFC x7B,W
0092C:  MOVWF  FEA
0092E:  BSF    FEF.0
....................    } 
.................... } 
00930:  MOVLB  0
00932:  GOTO   0D6E (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
00386:  MOVLW  09
00388:  MOVLB  5
0038A:  ADDWF  x7A,W
0038C:  MOVWF  FE9
0038E:  MOVLW  00
00390:  ADDWFC x7B,W
00392:  MOVWF  FEA
00394:  MOVFF  FEF,57C
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
00398:  MOVLW  0E
0039A:  ADDWF  x7A,W
0039C:  MOVWF  FE9
0039E:  MOVLW  00
003A0:  ADDWFC x7B,W
003A2:  MOVWF  FEA
003A4:  MOVLW  00
003A6:  BTFSC  FEF.0
003A8:  MOVLW  01
003AA:  ANDLW  01
003AC:  BTFSS  FD8.2
003AE:  BRA    057E
....................    { 
....................     //  printf("STATE %u",sw->current_state); 
....................      // printf("DIF %LU",clock - sw->timer); 
....................       sw-> previous_state = button_pressed; 
003B0:  MOVLW  0E
003B2:  ADDWF  x7A,W
003B4:  MOVWF  FE9
003B6:  MOVLW  00
003B8:  ADDWFC x7B,W
003BA:  MOVWF  FEA
003BC:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
003BE:  MOVLW  0A
003C0:  ADDWF  x7A,W
003C2:  MOVWF  FE9
003C4:  MOVLW  00
003C6:  ADDWFC x7B,W
003C8:  MOVWF  FEA
003CA:  MOVFF  FEF,00
003CE:  MOVFF  FEC,01
003D2:  MOVFF  FEC,02
003D6:  MOVFF  FEC,03
003DA:  MOVF   00,W
003DC:  SUBWF  x1F,W
003DE:  MOVWF  x7D
003E0:  MOVF   01,W
003E2:  SUBWFB x20,W
003E4:  MOVWF  x7E
003E6:  MOVF   02,W
003E8:  SUBWFB x21,W
003EA:  MOVWF  x7F
003EC:  MOVF   03,W
003EE:  SUBWFB x22,W
003F0:  MOVWF  x80
003F2:  MOVF   x27,W
003F4:  SUBWF  x80,W
003F6:  BNC   0410
003F8:  BNZ   0424
003FA:  MOVF   x26,W
003FC:  SUBWF  x7F,W
003FE:  BNC   0410
00400:  BNZ   0424
00402:  MOVF   x25,W
00404:  SUBWF  x7E,W
00406:  BNC   0410
00408:  BNZ   0424
0040A:  MOVF   x7D,W
0040C:  SUBWF  x24,W
0040E:  BNC   0424
00410:  MOVLW  0F
00412:  ADDWF  x7A,W
00414:  MOVWF  FE9
00416:  MOVLW  00
00418:  ADDWFC x7B,W
0041A:  MOVWF  FEA
0041C:  MOVF   FEF,W
0041E:  SUBLW  02
00420:  BTFSS  FD8.2
00422:  BRA    057C
00424:  MOVLW  0F
00426:  ADDWF  x7A,W
00428:  MOVWF  FE9
0042A:  MOVLW  00
0042C:  ADDWFC x7B,W
0042E:  MOVWF  FEA
00430:  MOVF   FEF,W
00432:  SUBLW  04
00434:  BTFSC  FD8.2
00436:  BRA    057C
....................       {  
....................          if(sw->outstate==off) 
00438:  MOVLW  0F
0043A:  ADDWF  x7A,W
0043C:  MOVWF  FE9
0043E:  MOVLW  00
00440:  ADDWFC x7B,W
00442:  MOVWF  FEA
00444:  DECFSZ FEF,W
00446:  BRA    0486
....................          { 
....................             sw->outstate=maxed; 
00448:  MOVLW  0F
0044A:  ADDWF  x7A,W
0044C:  MOVWF  FE9
0044E:  MOVLW  00
00450:  ADDWFC x7B,W
00452:  MOVWF  FEA
00454:  MOVLW  04
00456:  MOVWF  FEF
....................             sw->on.value=1; 
00458:  ADDWF  x7A,W
0045A:  MOVWF  FE9
0045C:  MOVLW  00
0045E:  ADDWFC x7B,W
00460:  MOVWF  FEA
00462:  MOVLW  01
00464:  MOVWF  FEF
....................             sw->current_level = 127; 
00466:  MOVLW  09
00468:  ADDWF  x7A,W
0046A:  MOVWF  FE9
0046C:  MOVLW  00
0046E:  ADDWFC x7B,W
00470:  MOVWF  FEA
00472:  MOVLW  7F
00474:  MOVWF  FEF
....................             sw->on.needs_update=1; 
00476:  MOVLW  05
00478:  ADDWF  x7A,W
0047A:  MOVWF  FE9
0047C:  MOVLW  00
0047E:  ADDWFC x7B,W
00480:  MOVWF  FEA
00482:  BSF    FEF.0
....................          } 
....................         else 
00484:  BRA    057A
....................         { 
....................          sw->outstate = dimming; 
00486:  MOVLW  0F
00488:  ADDWF  x7A,W
0048A:  MOVWF  FE9
0048C:  MOVLW  00
0048E:  ADDWFC x7B,W
00490:  MOVWF  FEA
00492:  MOVLW  02
00494:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
00496:  MOVLW  0A
00498:  ADDWF  x7A,W
0049A:  MOVWF  FE9
0049C:  MOVLW  00
0049E:  ADDWFC x7B,W
004A0:  MOVWF  FEA
004A2:  MOVFF  FEF,00
004A6:  MOVFF  FEC,01
004AA:  MOVFF  FEC,02
004AE:  MOVFF  FEC,03
004B2:  MOVF   00,W
004B4:  SUBWF  x1F,W
004B6:  MOVWF  x7D
004B8:  MOVF   01,W
004BA:  SUBWFB x20,W
004BC:  MOVWF  x7E
004BE:  MOVF   02,W
004C0:  SUBWFB x21,W
004C2:  MOVWF  x7F
004C4:  MOVF   03,W
004C6:  SUBWFB x22,W
004C8:  MOVWF  x80
004CA:  MOVF   x80,F
004CC:  BNZ   04DC
004CE:  MOVF   x7F,F
004D0:  BNZ   04DC
004D2:  MOVF   x7E,F
004D4:  BNZ   04DC
004D6:  MOVF   x7D,W
004D8:  SUBWF  x23,W
004DA:  BC    055E
....................          { 
....................             if (sw->direction == up) //para cima 
004DC:  MOVLW  0E
004DE:  ADDWF  x7A,W
004E0:  MOVWF  FE9
004E2:  MOVLW  00
004E4:  ADDWFC x7B,W
004E6:  MOVWF  FEA
004E8:  MOVLW  00
004EA:  BTFSC  FEF.2
004EC:  MOVLW  01
004EE:  ANDLW  01
004F0:  BNZ   0522
....................             { 
....................                ++sw->current_level; 
004F2:  MOVLW  09
004F4:  ADDWF  x7A,W
004F6:  MOVWF  FE9
004F8:  MOVLW  00
004FA:  ADDWFC x7B,W
004FC:  MOVWF  FEA
004FE:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
00500:  MOVLW  09
00502:  ADDWF  x7A,W
00504:  MOVWF  FE9
00506:  MOVLW  00
00508:  ADDWFC x7B,W
0050A:  MOVWF  FEA
0050C:  MOVF   FEF,W
0050E:  SUBLW  7F
00510:  BNZ   0520
00512:  MOVLW  0E
00514:  ADDWF  x7A,W
00516:  MOVWF  FE9
00518:  MOVLW  00
0051A:  ADDWFC x7B,W
0051C:  MOVWF  FEA
0051E:  BSF    FEF.2
....................             } 
....................             else//para baixo 
00520:  BRA    055E
....................             { 
....................                --sw->current_level; 
00522:  MOVLW  09
00524:  ADDWF  x7A,W
00526:  MOVWF  FE9
00528:  MOVLW  00
0052A:  ADDWFC x7B,W
0052C:  MOVWF  FEA
0052E:  DECF   FEF,F
....................                if (sw->current_level == 0)  
00530:  MOVLW  09
00532:  ADDWF  x7A,W
00534:  MOVWF  FE9
00536:  MOVLW  00
00538:  ADDWFC x7B,W
0053A:  MOVWF  FEA
0053C:  MOVF   FEF,F
0053E:  BNZ   055E
....................                {   
....................                   sw->direction = up; 
00540:  MOVLW  0E
00542:  ADDWF  x7A,W
00544:  MOVWF  FE9
00546:  MOVLW  00
00548:  ADDWFC x7B,W
0054A:  MOVWF  FEA
0054C:  BCF    FEF.2
....................                   sw->off.value=1; 
0054E:  MOVLW  07
00550:  ADDWF  x7A,W
00552:  MOVWF  FE9
00554:  MOVLW  00
00556:  ADDWFC x7B,W
00558:  MOVWF  FEA
0055A:  MOVLW  01
0055C:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
0055E:  MOVLW  0A
00560:  ADDWF  x7A,W
00562:  MOVWF  FE9
00564:  MOVLW  00
00566:  ADDWFC x7B,W
00568:  MOVWF  FEA
0056A:  MOVFF  51F,FEF
0056E:  MOVFF  520,FEC
00572:  MOVFF  521,FEC
00576:  MOVFF  522,FEC
....................       } 
....................       } 
....................       else 
0057A:  BRA    057C
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
0057C:  BRA    06DE
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
0057E:  MOVLW  0E
00580:  ADDWF  x7A,W
00582:  MOVWF  FE9
00584:  MOVLW  00
00586:  ADDWFC x7B,W
00588:  MOVWF  FEA
0058A:  MOVLW  00
0058C:  BTFSC  FEF.1
0058E:  MOVLW  01
00590:  ANDLW  01
00592:  BTFSS  FD8.2
00594:  BRA    06C2
....................       { 
....................          sw->previous_state = button_depressed; 
00596:  MOVLW  0E
00598:  ADDWF  x7A,W
0059A:  MOVWF  FE9
0059C:  MOVLW  00
0059E:  ADDWFC x7B,W
005A0:  MOVWF  FEA
005A2:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
005A4:  MOVLW  0F
005A6:  ADDWF  x7A,W
005A8:  MOVWF  FE9
005AA:  MOVLW  00
005AC:  ADDWFC x7B,W
005AE:  MOVWF  FEA
005B0:  MOVF   FEF,W
005B2:  SUBLW  02
005B4:  BNZ   05FA
....................          { 
....................             sw-> outstate = on; 
005B6:  MOVLW  0F
005B8:  ADDWF  x7A,W
005BA:  MOVWF  FE9
005BC:  MOVLW  00
005BE:  ADDWFC x7B,W
005C0:  MOVWF  FEA
005C2:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
005C4:  MOVLW  0E
005C6:  ADDWF  x7A,W
005C8:  MOVWF  FE9
005CA:  MOVLW  00
005CC:  ADDWFC x7B,W
005CE:  MOVWF  FEA
005D0:  MOVLW  00
005D2:  BTFSC  FEF.2
005D4:  MOVLW  01
005D6:  ANDLW  01
005D8:  BNZ   05EA
005DA:  MOVLW  0E
005DC:  ADDWF  x7A,W
005DE:  MOVWF  FE9
005E0:  MOVLW  00
005E2:  ADDWFC x7B,W
005E4:  MOVWF  FEA
005E6:  BSF    FEF.2
....................             else sw->direction = up; 
005E8:  BRA    05F8
005EA:  MOVLW  0E
005EC:  ADDWF  x7A,W
005EE:  MOVWF  FE9
005F0:  MOVLW  00
005F2:  ADDWFC x7B,W
005F4:  MOVWF  FEA
005F6:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
005F8:  BRA    06C2
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
005FA:  MOVLW  0F
005FC:  ADDWF  x7A,W
005FE:  MOVWF  FE9
00600:  MOVLW  00
00602:  ADDWFC x7B,W
00604:  MOVWF  FEA
00606:  DECFSZ FEF,W
00608:  BRA    0646
....................             { 
....................                sw->outstate=on; 
0060A:  MOVLW  0F
0060C:  ADDWF  x7A,W
0060E:  MOVWF  FE9
00610:  MOVLW  00
00612:  ADDWFC x7B,W
00614:  MOVWF  FEA
00616:  CLRF   FEF
....................                sw->on.value=1; 
00618:  MOVLW  04
0061A:  ADDWF  x7A,W
0061C:  MOVWF  FE9
0061E:  MOVLW  00
00620:  ADDWFC x7B,W
00622:  MOVWF  FEA
00624:  MOVLW  01
00626:  MOVWF  FEF
....................                sw->direction = down; 
00628:  MOVLW  0E
0062A:  ADDWF  x7A,W
0062C:  MOVWF  FE9
0062E:  MOVLW  00
00630:  ADDWFC x7B,W
00632:  MOVWF  FEA
00634:  BSF    FEF.2
....................                sw->on.needs_update=true; 
00636:  MOVLW  05
00638:  ADDWF  x7A,W
0063A:  MOVWF  FE9
0063C:  MOVLW  00
0063E:  ADDWFC x7B,W
00640:  MOVWF  FEA
00642:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
00644:  BRA    06C2
00646:  MOVLW  0F
00648:  ADDWF  x7A,W
0064A:  MOVWF  FE9
0064C:  MOVLW  00
0064E:  ADDWFC x7B,W
00650:  MOVWF  FEA
00652:  MOVF   FEF,F
00654:  BNZ   0694
....................             { 
....................                sw->outstate=off; 
00656:  MOVLW  0F
00658:  ADDWF  x7A,W
0065A:  MOVWF  FE9
0065C:  MOVLW  00
0065E:  ADDWFC x7B,W
00660:  MOVWF  FEA
00662:  MOVLW  01
00664:  MOVWF  FEF
....................                sw->off.value=1; 
00666:  MOVLW  07
00668:  ADDWF  x7A,W
0066A:  MOVWF  FE9
0066C:  MOVLW  00
0066E:  ADDWFC x7B,W
00670:  MOVWF  FEA
00672:  MOVLW  01
00674:  MOVWF  FEF
....................                sw->direction = up; 
00676:  MOVLW  0E
00678:  ADDWF  x7A,W
0067A:  MOVWF  FE9
0067C:  MOVLW  00
0067E:  ADDWFC x7B,W
00680:  MOVWF  FEA
00682:  BCF    FEF.2
....................                sw->off.needs_update=true; 
00684:  MOVLW  08
00686:  ADDWF  x7A,W
00688:  MOVWF  FE9
0068A:  MOVLW  00
0068C:  ADDWFC x7B,W
0068E:  MOVWF  FEA
00690:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
00692:  BRA    06C2
00694:  MOVLW  0F
00696:  ADDWF  x7A,W
00698:  MOVWF  FE9
0069A:  MOVLW  00
0069C:  ADDWFC x7B,W
0069E:  MOVWF  FEA
006A0:  MOVF   FEF,W
006A2:  SUBLW  04
006A4:  BNZ   06C2
....................             { 
....................                sw->outstate=on; 
006A6:  MOVLW  0F
006A8:  ADDWF  x7A,W
006AA:  MOVWF  FE9
006AC:  MOVLW  00
006AE:  ADDWFC x7B,W
006B0:  MOVWF  FEA
006B2:  CLRF   FEF
....................                sw->direction = down; 
006B4:  MOVLW  0E
006B6:  ADDWF  x7A,W
006B8:  MOVWF  FE9
006BA:  MOVLW  00
006BC:  ADDWFC x7B,W
006BE:  MOVWF  FEA
006C0:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
006C2:  MOVLW  0A
006C4:  ADDWF  x7A,W
006C6:  MOVWF  FE9
006C8:  MOVLW  00
006CA:  ADDWFC x7B,W
006CC:  MOVWF  FEA
006CE:  MOVFF  51F,FEF
006D2:  MOVFF  520,FEC
006D6:  MOVFF  521,FEC
006DA:  MOVFF  522,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
006DE:  MOVLW  09
006E0:  ADDWF  x7A,W
006E2:  MOVWF  FE9
006E4:  MOVLW  00
006E6:  ADDWFC x7B,W
006E8:  MOVWF  FEA
006EA:  MOVF   FEF,W
006EC:  SUBWF  x7C,W
006EE:  BZ    0726
....................    { 
....................       sw->dim_level.value=sw->current_level; 
006F0:  MOVLW  01
006F2:  ADDWF  x7A,W
006F4:  MOVWF  01
006F6:  MOVLW  00
006F8:  ADDWFC x7B,W
006FA:  MOVWF  03
006FC:  MOVLW  09
006FE:  ADDWF  x7A,W
00700:  MOVWF  FE9
00702:  MOVLW  00
00704:  ADDWFC x7B,W
00706:  MOVWF  FEA
00708:  MOVFF  FEF,57F
0070C:  MOVFF  03,FEA
00710:  MOVFF  01,FE9
00714:  MOVFF  57F,FEF
....................       sw->dim_level.needs_update=true; 
00718:  MOVLW  02
0071A:  ADDWF  x7A,W
0071C:  MOVWF  FE9
0071E:  MOVLW  00
00720:  ADDWFC x7B,W
00722:  MOVWF  FEA
00724:  BSF    FEF.0
....................    } 
.................... } 
00726:  MOVLB  0
00728:  GOTO   0D6E (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
00936:  MOVLB  5
00938:  CLRF   x77
0093A:  MOVLB  1
0093C:  MOVF   x3E,W
0093E:  MOVLB  5
00940:  SUBWF  x77,W
00942:  BTFSC  FD8.0
00944:  BRA    0D74
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
00946:  CLRF   x79
00948:  MOVFF  577,578
0094C:  CLRF   x7B
0094E:  MOVLW  21
00950:  MOVWF  x7A
00952:  MOVLB  0
00954:  RCALL  02F0
00956:  MOVFF  02,03
0095A:  MOVF   01,W
0095C:  ADDLW  40
0095E:  MOVWF  01
00960:  MOVLW  01
00962:  ADDWFC 03,F
00964:  MOVFF  01,FE9
00968:  MOVFF  03,FEA
0096C:  MOVF   FEF,W
0096E:  BZ    0984
00970:  XORLW  03
00972:  BTFSC  FD8.2
00974:  BRA    0ACA
00976:  XORLW  02
00978:  BTFSC  FD8.2
0097A:  BRA    0ACC
0097C:  XORLW  03
0097E:  BTFSC  FD8.2
00980:  BRA    0C1A
00982:  BRA    0D6C
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00984:  MOVLB  5
00986:  CLRF   x79
00988:  MOVFF  577,578
0098C:  CLRF   x7B
0098E:  MOVLW  21
00990:  MOVWF  x7A
00992:  MOVLB  0
00994:  RCALL  02F0
00996:  MOVF   01,W
00998:  ADDLW  02
0099A:  MOVLB  5
0099C:  MOVWF  x78
0099E:  MOVLW  00
009A0:  ADDWFC 02,W
009A2:  MOVWF  x79
009A4:  MOVLW  01
009A6:  ADDWF  x78,W
009A8:  MOVWF  01
009AA:  MOVLW  00
009AC:  ADDWFC x79,W
009AE:  MOVWF  03
009B0:  MOVF   01,W
009B2:  ADDLW  3E
009B4:  MOVWF  01
009B6:  MOVLW  01
009B8:  ADDWFC 03,F
009BA:  MOVF   01,W
009BC:  ADDLW  10
009BE:  MOVWF  FE9
009C0:  MOVLW  00
009C2:  ADDWFC 03,W
009C4:  MOVWF  FEA
009C6:  MOVFF  FEF,57A
009CA:  MOVFF  57A,57B
009CE:  MOVLW  01
009D0:  MOVWF  x7C
009D2:  MOVLW  0F
009D4:  MOVWF  x7E
009D6:  MOVLW  92
009D8:  MOVWF  x7D
009DA:  MOVLB  0
009DC:  RCALL  0312
009DE:  MOVFF  57A,57B
009E2:  MOVLW  0F
009E4:  MOVLB  5
009E6:  MOVWF  x7D
009E8:  MOVLW  80
009EA:  MOVWF  x7C
009EC:  MOVLB  0
009EE:  RCALL  0354
009F0:  BTFSS  01.0
009F2:  BRA    0A3C
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
009F4:  MOVLB  5
009F6:  CLRF   x79
009F8:  MOVFF  577,578
009FC:  CLRF   x7B
009FE:  MOVLW  21
00A00:  MOVWF  x7A
00A02:  MOVLB  0
00A04:  RCALL  02F0
00A06:  MOVF   01,W
00A08:  ADDLW  02
00A0A:  MOVLB  5
00A0C:  MOVWF  x78
00A0E:  MOVLW  00
00A10:  ADDWFC 02,W
00A12:  MOVWF  x79
00A14:  MOVLW  01
00A16:  ADDWF  x78,W
00A18:  MOVWF  01
00A1A:  MOVLW  00
00A1C:  ADDWFC x79,W
00A1E:  MOVWF  03
00A20:  MOVF   01,W
00A22:  ADDLW  3E
00A24:  MOVWF  01
00A26:  MOVLW  01
00A28:  ADDWFC 03,F
00A2A:  MOVF   01,W
00A2C:  ADDLW  0E
00A2E:  MOVWF  FE9
00A30:  MOVLW  00
00A32:  ADDWFC 03,W
00A34:  MOVWF  FEA
00A36:  BSF    FEF.0
....................             } 
....................             else  
00A38:  BRA    0A80
00A3A:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00A3C:  MOVLB  5
00A3E:  CLRF   x79
00A40:  MOVFF  577,578
00A44:  CLRF   x7B
00A46:  MOVLW  21
00A48:  MOVWF  x7A
00A4A:  MOVLB  0
00A4C:  RCALL  02F0
00A4E:  MOVF   01,W
00A50:  ADDLW  02
00A52:  MOVLB  5
00A54:  MOVWF  x78
00A56:  MOVLW  00
00A58:  ADDWFC 02,W
00A5A:  MOVWF  x79
00A5C:  MOVLW  01
00A5E:  ADDWF  x78,W
00A60:  MOVWF  01
00A62:  MOVLW  00
00A64:  ADDWFC x79,W
00A66:  MOVWF  03
00A68:  MOVF   01,W
00A6A:  ADDLW  3E
00A6C:  MOVWF  01
00A6E:  MOVLW  01
00A70:  ADDWFC 03,F
00A72:  MOVF   01,W
00A74:  ADDLW  0E
00A76:  MOVWF  FE9
00A78:  MOVLW  00
00A7A:  ADDWFC 03,W
00A7C:  MOVWF  FEA
00A7E:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00A80:  CLRF   x79
00A82:  MOVFF  577,578
00A86:  CLRF   x7B
00A88:  MOVLW  21
00A8A:  MOVWF  x7A
00A8C:  MOVLB  0
00A8E:  RCALL  02F0
00A90:  MOVF   01,W
00A92:  ADDLW  02
00A94:  MOVLB  5
00A96:  MOVWF  x78
00A98:  MOVLW  00
00A9A:  ADDWFC 02,W
00A9C:  MOVWF  x79
00A9E:  MOVLW  01
00AA0:  ADDWF  x78,W
00AA2:  MOVWF  01
00AA4:  MOVLW  00
00AA6:  ADDWFC x79,W
00AA8:  MOVWF  03
00AAA:  MOVF   01,W
00AAC:  ADDLW  3E
00AAE:  MOVWF  01
00AB0:  MOVLW  01
00AB2:  ADDWFC 03,F
00AB4:  MOVFF  01,578
00AB8:  MOVFF  03,579
00ABC:  MOVFF  03,57B
00AC0:  MOVFF  01,57A
00AC4:  MOVLB  0
00AC6:  BRA    0386
....................             break; 
00AC8:  BRA    0D6E
....................     case timer: 
....................  
....................            break; 
00ACA:  BRA    0D6E
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00ACC:  MOVLB  5
00ACE:  CLRF   x79
00AD0:  MOVFF  577,578
00AD4:  CLRF   x7B
00AD6:  MOVLW  21
00AD8:  MOVWF  x7A
00ADA:  MOVLB  0
00ADC:  RCALL  02F0
00ADE:  MOVF   01,W
00AE0:  ADDLW  02
00AE2:  MOVLB  5
00AE4:  MOVWF  x78
00AE6:  MOVLW  00
00AE8:  ADDWFC 02,W
00AEA:  MOVWF  x79
00AEC:  MOVLW  01
00AEE:  ADDWF  x78,W
00AF0:  MOVWF  01
00AF2:  MOVLW  00
00AF4:  ADDWFC x79,W
00AF6:  MOVWF  03
00AF8:  MOVF   01,W
00AFA:  ADDLW  3E
00AFC:  MOVWF  01
00AFE:  MOVLW  01
00B00:  ADDWFC 03,F
00B02:  MOVF   01,W
00B04:  ADDLW  0C
00B06:  MOVWF  FE9
00B08:  MOVLW  00
00B0A:  ADDWFC 03,W
00B0C:  MOVWF  FEA
00B0E:  MOVFF  FEF,57A
00B12:  MOVFF  57A,57B
00B16:  MOVLW  01
00B18:  MOVWF  x7C
00B1A:  MOVLW  0F
00B1C:  MOVWF  x7E
00B1E:  MOVLW  92
00B20:  MOVWF  x7D
00B22:  MOVLB  0
00B24:  CALL   0312
00B28:  MOVFF  57A,57B
00B2C:  MOVLW  0F
00B2E:  MOVLB  5
00B30:  MOVWF  x7D
00B32:  MOVLW  80
00B34:  MOVWF  x7C
00B36:  MOVLB  0
00B38:  RCALL  0354
00B3A:  BTFSS  01.0
00B3C:  BRA    0B88
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00B3E:  MOVLB  5
00B40:  CLRF   x79
00B42:  MOVFF  577,578
00B46:  CLRF   x7B
00B48:  MOVLW  21
00B4A:  MOVWF  x7A
00B4C:  MOVLB  0
00B4E:  CALL   02F0
00B52:  MOVF   01,W
00B54:  ADDLW  02
00B56:  MOVLB  5
00B58:  MOVWF  x78
00B5A:  MOVLW  00
00B5C:  ADDWFC 02,W
00B5E:  MOVWF  x79
00B60:  MOVLW  01
00B62:  ADDWF  x78,W
00B64:  MOVWF  01
00B66:  MOVLW  00
00B68:  ADDWFC x79,W
00B6A:  MOVWF  03
00B6C:  MOVF   01,W
00B6E:  ADDLW  3E
00B70:  MOVWF  01
00B72:  MOVLW  01
00B74:  ADDWFC 03,F
00B76:  MOVF   01,W
00B78:  ADDLW  06
00B7A:  MOVWF  FE9
00B7C:  MOVLW  00
00B7E:  ADDWFC 03,W
00B80:  MOVWF  FEA
00B82:  BSF    FEF.0
....................             } 
....................             else  
00B84:  BRA    0BCE
00B86:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00B88:  MOVLB  5
00B8A:  CLRF   x79
00B8C:  MOVFF  577,578
00B90:  CLRF   x7B
00B92:  MOVLW  21
00B94:  MOVWF  x7A
00B96:  MOVLB  0
00B98:  CALL   02F0
00B9C:  MOVF   01,W
00B9E:  ADDLW  02
00BA0:  MOVLB  5
00BA2:  MOVWF  x78
00BA4:  MOVLW  00
00BA6:  ADDWFC 02,W
00BA8:  MOVWF  x79
00BAA:  MOVLW  01
00BAC:  ADDWF  x78,W
00BAE:  MOVWF  01
00BB0:  MOVLW  00
00BB2:  ADDWFC x79,W
00BB4:  MOVWF  03
00BB6:  MOVF   01,W
00BB8:  ADDLW  3E
00BBA:  MOVWF  01
00BBC:  MOVLW  01
00BBE:  ADDWFC 03,F
00BC0:  MOVF   01,W
00BC2:  ADDLW  06
00BC4:  MOVWF  FE9
00BC6:  MOVLW  00
00BC8:  ADDWFC 03,W
00BCA:  MOVWF  FEA
00BCC:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00BCE:  CLRF   x79
00BD0:  MOVFF  577,578
00BD4:  CLRF   x7B
00BD6:  MOVLW  21
00BD8:  MOVWF  x7A
00BDA:  MOVLB  0
00BDC:  CALL   02F0
00BE0:  MOVF   01,W
00BE2:  ADDLW  02
00BE4:  MOVLB  5
00BE6:  MOVWF  x78
00BE8:  MOVLW  00
00BEA:  ADDWFC 02,W
00BEC:  MOVWF  x79
00BEE:  MOVLW  01
00BF0:  ADDWF  x78,W
00BF2:  MOVWF  01
00BF4:  MOVLW  00
00BF6:  ADDWFC x79,W
00BF8:  MOVWF  03
00BFA:  MOVF   01,W
00BFC:  ADDLW  3E
00BFE:  MOVWF  01
00C00:  MOVLW  01
00C02:  ADDWFC 03,F
00C04:  MOVFF  01,578
00C08:  MOVFF  03,579
00C0C:  MOVFF  03,57B
00C10:  MOVFF  01,57A
00C14:  MOVLB  0
00C16:  BRA    072C
....................     break; 
00C18:  BRA    0D6E
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00C1A:  MOVLB  5
00C1C:  CLRF   x79
00C1E:  MOVFF  577,578
00C22:  CLRF   x7B
00C24:  MOVLW  21
00C26:  MOVWF  x7A
00C28:  MOVLB  0
00C2A:  CALL   02F0
00C2E:  MOVF   01,W
00C30:  ADDLW  02
00C32:  MOVLB  5
00C34:  MOVWF  x78
00C36:  MOVLW  00
00C38:  ADDWFC 02,W
00C3A:  MOVWF  x79
00C3C:  MOVLW  01
00C3E:  ADDWF  x78,W
00C40:  MOVWF  01
00C42:  MOVLW  00
00C44:  ADDWFC x79,W
00C46:  MOVWF  03
00C48:  MOVF   01,W
00C4A:  ADDLW  3E
00C4C:  MOVWF  01
00C4E:  MOVLW  01
00C50:  ADDWFC 03,F
00C52:  MOVF   01,W
00C54:  ADDLW  09
00C56:  MOVWF  FE9
00C58:  MOVLW  00
00C5A:  ADDWFC 03,W
00C5C:  MOVWF  FEA
00C5E:  MOVFF  FEF,57A
00C62:  MOVFF  57A,57B
00C66:  MOVLW  01
00C68:  MOVWF  x7C
00C6A:  MOVLW  0F
00C6C:  MOVWF  x7E
00C6E:  MOVLW  92
00C70:  MOVWF  x7D
00C72:  MOVLB  0
00C74:  CALL   0312
00C78:  MOVFF  57A,57B
00C7C:  MOVLW  0F
00C7E:  MOVLB  5
00C80:  MOVWF  x7D
00C82:  MOVLW  80
00C84:  MOVWF  x7C
00C86:  MOVLB  0
00C88:  CALL   0354
00C8C:  BTFSS  01.0
00C8E:  BRA    0CDA
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00C90:  MOVLB  5
00C92:  CLRF   x79
00C94:  MOVFF  577,578
00C98:  CLRF   x7B
00C9A:  MOVLW  21
00C9C:  MOVWF  x7A
00C9E:  MOVLB  0
00CA0:  CALL   02F0
00CA4:  MOVF   01,W
00CA6:  ADDLW  02
00CA8:  MOVLB  5
00CAA:  MOVWF  x78
00CAC:  MOVLW  00
00CAE:  ADDWFC 02,W
00CB0:  MOVWF  x79
00CB2:  MOVLW  01
00CB4:  ADDWF  x78,W
00CB6:  MOVWF  01
00CB8:  MOVLW  00
00CBA:  ADDWFC x79,W
00CBC:  MOVWF  03
00CBE:  MOVF   01,W
00CC0:  ADDLW  3E
00CC2:  MOVWF  01
00CC4:  MOVLW  01
00CC6:  ADDWFC 03,F
00CC8:  MOVF   01,W
00CCA:  ADDLW  06
00CCC:  MOVWF  FE9
00CCE:  MOVLW  00
00CD0:  ADDWFC 03,W
00CD2:  MOVWF  FEA
00CD4:  BSF    FEF.0
....................             } 
....................             else  
00CD6:  BRA    0D20
00CD8:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00CDA:  MOVLB  5
00CDC:  CLRF   x79
00CDE:  MOVFF  577,578
00CE2:  CLRF   x7B
00CE4:  MOVLW  21
00CE6:  MOVWF  x7A
00CE8:  MOVLB  0
00CEA:  CALL   02F0
00CEE:  MOVF   01,W
00CF0:  ADDLW  02
00CF2:  MOVLB  5
00CF4:  MOVWF  x78
00CF6:  MOVLW  00
00CF8:  ADDWFC 02,W
00CFA:  MOVWF  x79
00CFC:  MOVLW  01
00CFE:  ADDWF  x78,W
00D00:  MOVWF  01
00D02:  MOVLW  00
00D04:  ADDWFC x79,W
00D06:  MOVWF  03
00D08:  MOVF   01,W
00D0A:  ADDLW  3E
00D0C:  MOVWF  01
00D0E:  MOVLW  01
00D10:  ADDWFC 03,F
00D12:  MOVF   01,W
00D14:  ADDLW  06
00D16:  MOVWF  FE9
00D18:  MOVLW  00
00D1A:  ADDWFC 03,W
00D1C:  MOVWF  FEA
00D1E:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00D20:  CLRF   x79
00D22:  MOVFF  577,578
00D26:  CLRF   x7B
00D28:  MOVLW  21
00D2A:  MOVWF  x7A
00D2C:  MOVLB  0
00D2E:  CALL   02F0
00D32:  MOVF   01,W
00D34:  ADDLW  02
00D36:  MOVLB  5
00D38:  MOVWF  x78
00D3A:  MOVLW  00
00D3C:  ADDWFC 02,W
00D3E:  MOVWF  x79
00D40:  MOVLW  01
00D42:  ADDWF  x78,W
00D44:  MOVWF  01
00D46:  MOVLW  00
00D48:  ADDWFC x79,W
00D4A:  MOVWF  03
00D4C:  MOVF   01,W
00D4E:  ADDLW  3E
00D50:  MOVWF  01
00D52:  MOVLW  01
00D54:  ADDWFC 03,F
00D56:  MOVFF  01,578
00D5A:  MOVFF  03,579
00D5E:  MOVFF  03,57B
00D62:  MOVFF  01,57A
00D66:  MOVLB  0
00D68:  BRA    084C
....................     break; 
00D6A:  BRA    0D6E
....................     default: 
....................  
....................             break;  
00D6C:  BRA    0D6E
....................             } 
....................  
....................    } 
00D6E:  MOVLB  5
00D70:  INCF   x77,F
00D72:  BRA    093A
.................... } 
00D74:  MOVLB  0
00D76:  GOTO   0D94 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct button_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct button_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00D7A:  MOVLW  01
00D7C:  MOVLB  5
00D7E:  ADDWF  x1F,F
00D80:  BTFSC  FD8.0
00D82:  INCF   x20,F
00D84:  BTFSC  FD8.2
00D86:  INCF   x21,F
00D88:  BTFSC  FD8.2
00D8A:  INCF   x22,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00D8C:  BTFSS  x1F.1
00D8E:  BRA    0D96
00D90:  MOVLB  0
00D92:  BRA    0936
00D94:  MOVLB  5
.................... } 
....................  
00D96:  BCF    FF2.2
00D98:  MOVLB  0
00D9A:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
00D9E:  BSF    xB5.5
.................... } 
00DA0:  BCF    F9E.0
00DA2:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
00DA6:  MOVLB  5
00DA8:  INCF   x28,F
....................    if(clockT2temp==200)//1 second call 
00DAA:  MOVF   x28,W
00DAC:  SUBLW  C8
00DAE:  BNZ   0DC8
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00DB0:  CLRF   x28
....................       ++secClock; 
00DB2:  MOVLW  01
00DB4:  ADDWF  24,F
00DB6:  BTFSC  FD8.0
00DB8:  INCF   25,F
00DBA:  BTFSC  FD8.2
00DBC:  INCF   26,F
00DBE:  BTFSC  FD8.2
00DC0:  INCF   27,F
....................       secondFlag=true; 
00DC2:  MOVLB  0
00DC4:  BSF    xB5.4
00DC6:  MOVLB  5
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00DC8:  BCF    F9E.1
00DCA:  MOVLB  0
00DCC:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
00DD0:  MOVFF  466,578
00DD4:  MOVFF  465,577
....................          unsigned int16 temp= onoffsvalue; 
....................          portc=MAKE8(temp,1); 
00DD8:  MOVLB  5
00DDA:  MOVFF  578,F82
....................          portd=MAKE8(temp,0); 
00DDE:  MOVFF  577,F83
....................    
....................          if (organizado) 
00DE2:  MOVLB  0
00DE4:  BTFSS  xB5.2
00DE6:  BRA    0E0A
....................          { 
....................             organizado=0; 
00DE8:  BCF    xB5.2
....................             if (actmat)  
00DEA:  BTFSS  xB5.3
00DEC:  BRA    0DFE
....................             { 
....................                actmat=0; 
00DEE:  BCF    xB5.3
....................                pointer=delays1; 
00DF0:  MOVLW  04
00DF2:  MOVLB  4
00DF4:  MOVWF  x62
00DF6:  MOVLW  77
00DF8:  MOVWF  x61
....................             } 
....................             else 
00DFA:  BRA    0E0A
00DFC:  MOVLB  0
....................             { 
....................                actmat=1; 
00DFE:  BSF    xB5.3
....................                pointer=delays2; 
00E00:  MOVLW  04
00E02:  MOVLB  4
00E04:  MOVWF  x62
00E06:  MOVLW  BB
00E08:  MOVWF  x61
....................             } 
....................          } 
....................          vez=0; 
00E0A:  MOVLB  4
00E0C:  CLRF   x63
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00E0E:  MOVLB  5
00E10:  CLRF   x79
00E12:  CLRF   x7A
*
00E7E:  MOVFF  02,57A
00E82:  MOVFF  01,579
00E86:  BCF    FD8.0
00E88:  RLCF   01,W
00E8A:  MOVWF  02
00E8C:  RLCF   x7A,W
00E8E:  MOVWF  03
00E90:  MOVF   02,W
00E92:  MOVLB  0
00E94:  CALL   01A6
00E98:  TBLRD*+
00E9A:  MOVFF  FF5,03
00E9E:  MOVWF  FBE
00EA0:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
00EA4:  MOVLW  10
00EA6:  MOVLB  5
00EA8:  MOVWF  x79
00EAA:  CLRF   x7A
*
00F16:  MOVFF  01,464
....................          set_timer1(0); 
00F1A:  CLRF   FCF
00F1C:  CLRF   FCE
....................          syncError=false; 
00F1E:  MOVLB  0
00F20:  BCF    xB5.5
.................... } 
....................  
00F22:  BCF    FF2.1
00F24:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {   
....................    if(mnumluzes!=0) 
00F28:  MOVLB  4
00F2A:  MOVF   x64,F
00F2C:  BTFSC  FD8.2
00F2E:  BRA    1054
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
00F30:  MOVFF  463,579
00F34:  MOVLW  01
00F36:  MOVLB  5
00F38:  MOVWF  x7A
*
00FA4:  MOVFF  02,578
00FA8:  MOVFF  01,577
....................      // printf("AUXCPP %lu",auxccp); 
....................       portc=(portc & MAKE8(auxccp,1)); 
00FAC:  MOVF   x78,W
00FAE:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
00FB0:  MOVF   x77,W
00FB2:  ANDWF  F83,F
....................       ++vez; 
00FB4:  MOVLB  4
00FB6:  INCF   x63,F
....................       --mnumluzes; 
00FB8:  DECF   x64,F
....................       CCP_1=matrizluz[fpointer(vez,0)]; 
00FBA:  MOVFF  463,579
00FBE:  MOVLB  5
00FC0:  CLRF   x7A
*
0102C:  MOVFF  02,57A
01030:  MOVFF  01,579
01034:  BCF    FD8.0
01036:  RLCF   01,W
01038:  MOVWF  02
0103A:  RLCF   x7A,W
0103C:  MOVWF  03
0103E:  MOVF   02,W
01040:  MOVLB  0
01042:  CALL   01A6
01046:  TBLRD*+
01048:  MOVFF  FF5,03
0104C:  MOVWF  FBE
0104E:  MOVFF  03,FBF
01052:  MOVLB  4
....................    } 
.................... } 
....................  
01054:  BCF    F9E.2
01056:  MOVLB  0
01058:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
0105C:  BCF    F9E.5
0105E:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
01062:  BCF    F9E.4
01064:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
01068:  BCF    FA1.3
0106A:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
.................... } 
....................  
0106E:  BCF    FA1.7
01070:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
0161C:  RCALL  126C
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
0161E:  BCF    FA4.0
01620:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
01624:  RCALL  126C
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01626:  BCF    FA4.1
01628:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01A4C:  RCALL  1832
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01A4E:  BCF    FA4.2
01A50:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01A54:  RCALL  1832
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01A56:  BCF    FA4.3
01A58:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01A5C:  RCALL  1832
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01A5E:  BCF    FA4.4
01A60:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01A64:  BCF    FA4.7
01A66:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01A6A:  BCF    FA4.5
01A6C:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    enable_interrupts (int_canrx0); 
*
03CC0:  BSF    FA3.0
....................    enable_interrupts (int_canrx1); 
03CC2:  BSF    FA3.1
....................    enable_interrupts (int_cantx0); 
03CC4:  BSF    FA3.2
....................    enable_interrupts (int_cantx1); 
03CC6:  BSF    FA3.3
....................    enable_interrupts (int_cantx2); 
03CC8:  BSF    FA3.4
....................    enable_interrupts (int_canirx); 
03CCA:  BSF    FA3.7
....................    enable_interrupts (int_canerr); 
03CCC:  BSF    FA3.5
....................    enable_interrupts(INT_CCP1); 
03CCE:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
03CD0:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
03CD2:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
03CD4:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
03CD6:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    //enable_interrupts (int_OSCF) ; 
....................    enable_interrupts (GLOBAL) ; 
03CD8:  MOVLW  C0
03CDA:  IORWF  FF2,F
.................... } 
03CDC:  GOTO   69D4 (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01C22:  BRA    1ACE
....................    can_set_mode (CAN_OP_CONFIG) ;   
01C24:  MOVLW  04
01C26:  MOVLB  5
01C28:  MOVWF  x29
01C2A:  MOVLB  0
01C2C:  RCALL  1A78
....................    BRGCON1.brp = 4; 
01C2E:  MOVLW  C0
01C30:  ANDWF  F70,W
01C32:  IORLW  04
01C34:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01C36:  MOVLW  3F
01C38:  ANDWF  F70,W
01C3A:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01C3C:  MOVLW  F8
01C3E:  ANDWF  F71,W
01C40:  IORLW  02
01C42:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01C44:  MOVLW  C7
01C46:  ANDWF  F71,W
01C48:  IORLW  28
01C4A:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01C4C:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01C4E:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01C50:  MOVLW  F8
01C52:  ANDWF  F72,W
01C54:  IORLW  05
01C56:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01C58:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01C5A:  MOVLB  5
01C5C:  CLRF   x29
01C5E:  MOVLB  0
01C60:  RCALL  1A78
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01C62:  MOVLW  81
01C64:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01C66:  MOVLW  95
01C68:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01C6A:  MOVLW  60
01C6C:  IORLW  06
01C6E:  MOVWF  FCA
01C70:  MOVLW  F1
01C72:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01C74:  MOVLW  0A
01C76:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01C78:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01C7A:  MOVF   FC1,W
01C7C:  ANDLW  C0
01C7E:  IORLW  0F
01C80:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01C82:  MOVF   FC0,W
01C84:  ANDLW  C0
01C86:  MOVWF  FC0
01C88:  BCF    FC0.7
01C8A:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01C8C:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01C8E:  BCF    FC6.5
01C90:  MOVLW  01
01C92:  MOVWF  FC6
01C94:  MOVLW  00
01C96:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01C98:  MOVLW  07
01C9A:  MOVWF  FB4
01C9C:  MOVF   F95,W
01C9E:  MOVWF  F95
01CA0:  MOVF   F96,W
01CA2:  MOVWF  F96
01CA4:  CLRWDT
01CA6:  MOVLW  20
01CA8:  MOVWF  00
01CAA:  DECFSZ 00,F
01CAC:  BRA    1CAA
01CAE:  BRA    1CB0
01CB0:  MOVF   FB4,W
01CB2:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01CB4:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01CB6:  CLRF   FB1
....................    //setup_wdt (WDT_ON) ; 
....................    } 
01CB8:  GOTO   69C0 (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
067CC:  CLRF   FF8
067CE:  BCF    FD0.7
067D0:  BSF    07.7
067D2:  CLRF   FEA
067D4:  CLRF   FE9
067D6:  BCF    F93.5
067D8:  BSF    F8A.5
067DA:  CLRF   27
067DC:  CLRF   26
067DE:  CLRF   25
067E0:  CLRF   24
067E2:  CLRF   28
067E4:  BCF    xB5.0
067E6:  CLRF   xB6
067E8:  BSF    xB5.1
067EA:  MOVLB  4
067EC:  CLRF   x60
067EE:  MOVLB  0
067F0:  BCF    xB5.3
067F2:  MOVLB  4
067F4:  CLRF   x64
067F6:  MOVLW  FF
067F8:  MOVWF  x66
067FA:  MOVWF  x65
067FC:  MOVLB  5
067FE:  CLRF   x23
06800:  CLRF   x27
06802:  CLRF   x26
06804:  CLRF   x25
06806:  MOVLW  27
06808:  MOVWF  x24
0680A:  MOVF   FC1,W
0680C:  ANDLW  C0
0680E:  IORLW  0F
06810:  MOVWF  FC1
06812:  MOVLW  07
06814:  MOVWF  FB4
06816:  CLRF   1C
06818:  MOVLW  01
0681A:  MOVWF  1D
0681C:  MOVLW  02
0681E:  MOVWF  1E
06820:  MOVLW  03
06822:  MOVWF  1F
06824:  MOVLW  04
06826:  MOVWF  20
06828:  MOVLW  05
0682A:  MOVWF  21
0682C:  MOVLW  20
0682E:  MOVWF  22
06830:  MOVLW  21
06832:  MOVWF  23
06834:  MOVLW  0B
06836:  MOVLB  1
06838:  MOVWF  x39
0683A:  CLRF   x3A
0683C:  CLRF   x3B
0683E:  CLRF   x3C
06840:  MOVLB  4
06842:  CLRF   x67
06844:  CLRF   x68
06846:  CLRF   x69
06848:  CLRF   x6A
0684A:  CLRF   x6B
0684C:  CLRF   x6C
0684E:  CLRF   x6D
06850:  CLRF   x6E
06852:  CLRF   x6F
06854:  CLRF   x70
06856:  CLRF   x71
06858:  CLRF   x72
0685A:  CLRF   x73
0685C:  CLRF   x74
0685E:  CLRF   x75
06860:  CLRF   x76
06862:  CLRF   x77
06864:  CLRF   x78
06866:  CLRF   x79
06868:  CLRF   x7A
0686A:  CLRF   x7B
0686C:  CLRF   x7C
0686E:  MOVLW  01
06870:  MOVWF  x7D
06872:  CLRF   x7E
06874:  CLRF   x7F
06876:  CLRF   x80
06878:  MOVLW  02
0687A:  MOVWF  x81
0687C:  CLRF   x82
0687E:  CLRF   x83
06880:  CLRF   x84
06882:  MOVLW  03
06884:  MOVWF  x85
06886:  CLRF   x86
06888:  CLRF   x87
0688A:  CLRF   x88
0688C:  MOVLW  04
0688E:  MOVWF  x89
06890:  CLRF   x8A
06892:  CLRF   x8B
06894:  CLRF   x8C
06896:  MOVLW  05
06898:  MOVWF  x8D
0689A:  CLRF   x8E
0689C:  CLRF   x8F
0689E:  CLRF   x90
068A0:  MOVLW  06
068A2:  MOVWF  x91
068A4:  CLRF   x92
068A6:  CLRF   x93
068A8:  CLRF   x94
068AA:  MOVLW  07
068AC:  MOVWF  x95
068AE:  CLRF   x96
068B0:  CLRF   x97
068B2:  CLRF   x98
068B4:  MOVLW  08
068B6:  MOVWF  x99
068B8:  CLRF   x9A
068BA:  CLRF   x9B
068BC:  CLRF   x9C
068BE:  MOVLW  09
068C0:  MOVWF  x9D
068C2:  CLRF   x9E
068C4:  CLRF   x9F
068C6:  CLRF   xA0
068C8:  MOVLW  0A
068CA:  MOVWF  xA1
068CC:  CLRF   xA2
068CE:  CLRF   xA3
068D0:  CLRF   xA4
068D2:  MOVLW  0B
068D4:  MOVWF  xA5
068D6:  CLRF   xA6
068D8:  CLRF   xA7
068DA:  CLRF   xA8
068DC:  MOVLW  0C
068DE:  MOVWF  xA9
068E0:  CLRF   xAA
068E2:  CLRF   xAB
068E4:  CLRF   xAC
068E6:  MOVLW  0D
068E8:  MOVWF  xAD
068EA:  CLRF   xAE
068EC:  CLRF   xAF
068EE:  CLRF   xB0
068F0:  MOVLW  0E
068F2:  MOVWF  xB1
068F4:  CLRF   xB2
068F6:  CLRF   xB3
068F8:  CLRF   xB4
068FA:  MOVLW  0F
068FC:  MOVWF  xB5
068FE:  CLRF   xB6
06900:  CLRF   xB7
06902:  CLRF   xB8
06904:  CLRF   xB9
06906:  CLRF   xBA
06908:  CLRF   xBB
0690A:  CLRF   xBC
0690C:  CLRF   xBD
0690E:  CLRF   xBE
06910:  CLRF   xBF
06912:  CLRF   xC0
06914:  MOVLW  01
06916:  MOVWF  xC1
06918:  CLRF   xC2
0691A:  CLRF   xC3
0691C:  CLRF   xC4
0691E:  MOVLW  02
06920:  MOVWF  xC5
06922:  CLRF   xC6
06924:  CLRF   xC7
06926:  CLRF   xC8
06928:  MOVLW  03
0692A:  MOVWF  xC9
0692C:  CLRF   xCA
0692E:  CLRF   xCB
06930:  CLRF   xCC
06932:  MOVLW  04
06934:  MOVWF  xCD
06936:  CLRF   xCE
06938:  CLRF   xCF
0693A:  CLRF   xD0
0693C:  MOVLW  05
0693E:  MOVWF  xD1
06940:  CLRF   xD2
06942:  CLRF   xD3
06944:  CLRF   xD4
06946:  MOVLW  06
06948:  MOVWF  xD5
0694A:  CLRF   xD6
0694C:  CLRF   xD7
0694E:  CLRF   xD8
06950:  MOVLW  07
06952:  MOVWF  xD9
06954:  CLRF   xDA
06956:  CLRF   xDB
06958:  CLRF   xDC
0695A:  MOVLW  08
0695C:  MOVWF  xDD
0695E:  CLRF   xDE
06960:  CLRF   xDF
06962:  CLRF   xE0
06964:  MOVLW  09
06966:  MOVWF  xE1
06968:  CLRF   xE2
0696A:  CLRF   xE3
0696C:  CLRF   xE4
0696E:  MOVLW  0A
06970:  MOVWF  xE5
06972:  CLRF   xE6
06974:  CLRF   xE7
06976:  CLRF   xE8
06978:  MOVLW  0B
0697A:  MOVWF  xE9
0697C:  CLRF   xEA
0697E:  CLRF   xEB
06980:  CLRF   xEC
06982:  MOVLW  0C
06984:  MOVWF  xED
06986:  CLRF   xEE
06988:  CLRF   xEF
0698A:  CLRF   xF0
0698C:  MOVLW  0D
0698E:  MOVWF  xF1
06990:  CLRF   xF2
06992:  CLRF   xF3
06994:  CLRF   xF4
06996:  MOVLW  0E
06998:  MOVWF  xF5
0699A:  CLRF   xF6
0699C:  CLRF   xF7
0699E:  CLRF   xF8
069A0:  MOVLW  0F
069A2:  MOVWF  xF9
069A4:  CLRF   xFA
069A6:  CLRF   xFB
069A8:  CLRF   xFC
069AA:  CLRF   xFD
069AC:  CLRF   xFE
069AE:  MOVLB  5
069B0:  CLRF   x28
....................    clock = 0; 
069B2:  CLRF   x22
069B4:  CLRF   x21
069B6:  CLRF   x20
069B8:  CLRF   x1F
....................        
....................    hw_setup(); 
069BA:  MOVLB  0
069BC:  GOTO   1C22
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................    
....................    button_test(); 
069C0:  GOTO   1E80
....................    dimmer_test(); 
069C4:  GOTO   208C
....................    dimmer_outputs_init(); 
069C8:  GOTO   2760
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................    write_outputs(); 
069CC:  CALL   294C
....................    interrupts_enable(); 
069D0:  GOTO   3CC0
....................    printf("start\n\r"); 
069D4:  MOVLW  70
069D6:  MOVWF  FF6
069D8:  MOVLW  1A
069DA:  MOVWF  FF7
069DC:  MOVLW  00
069DE:  MOVWF  FF8
069E0:  CALL   2924
....................    while(true){ 
....................    if(syncError) 
069E4:  BTFSS  xB5.5
069E6:  BRA    69EC
....................       output_toggle(LED); 
069E8:  BCF    F96.2
069EA:  BTG    F8D.2
....................    process_outpoints(); 
069EC:  GOTO   498E
....................    write_outputs(); 
069F0:  CALL   294C
....................    if(secondFlag) 
069F4:  BTFSS  xB5.4
069F6:  BRA    6A02
....................    { 
....................       secondFlag=false; 
069F8:  BCF    xB5.4
....................       processTimedEvents(); 
069FA:  GOTO   58D6
....................       output_toggle(LED); 
069FE:  BCF    F96.2
06A00:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
06A02:  BRA    69E4
.................... } 
....................  
06A04:  BRA    6A04

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 0E19   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT
   Word  3: 8600   PBADEN LPT1OSC MCLR
   Word  4: 0030   NOSTVREN DEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
