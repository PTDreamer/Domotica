CCS PCH C Compiler, Version 4.106, 23932               04-Set-11 00:39

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 34030 bytes (35%)
                         Largest free fragment is 32768
               RAM used: 1606 (48%) at main() level
                         1794 (54%) worst case
               Stack:    9 worst case (5 in main + 4 for interrupts)

*
00000:  GOTO   80C8
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0ECC
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0EF0
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0EF8
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0F22
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   11AE
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   11B4
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   107A
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   11BA
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1BB6
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1BBC
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1BAE
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1BA6
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1B9E
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   1776
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   176E
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   11C0
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT1024                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=115200,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
01E2E:  BCF    F93.5
01E30:  BCF    F8A.5
01E32:  MOVLW  08
01E34:  MOVWF  01
01E36:  BRA    1E38
01E38:  NOP   
01E3A:  BSF    01.7
01E3C:  BRA    1E5E
01E3E:  BCF    01.7
01E40:  MOVLB  6
01E42:  RRCF   xC0,F
01E44:  MOVLB  0
01E46:  BTFSC  FD8.0
01E48:  BSF    F8A.5
01E4A:  BTFSS  FD8.0
01E4C:  BCF    F8A.5
01E4E:  BSF    01.6
01E50:  BRA    1E5E
01E52:  BCF    01.6
01E54:  DECFSZ 01,F
01E56:  BRA    1E40
01E58:  BRA    1E5A
01E5A:  NOP   
01E5C:  BSF    F8A.5
01E5E:  MOVLW  16
01E60:  MOVWF  FE9
01E62:  DECFSZ FE9,F
01E64:  BRA    1E62
01E66:  BRA    1E68
01E68:  CLRWDT
01E6A:  BTFSC  01.7
01E6C:  BRA    1E3E
01E6E:  BTFSC  01.6
01E70:  BRA    1E52
01E72:  RETLW  00
*
05028:  BSF    F93.4
0502A:  CLRWDT
0502C:  BTFSC  F81.4
0502E:  BRA    502A
05030:  MOVLW  08
05032:  MOVWF  00
05034:  MOVLB  6
05036:  CLRF   x61
05038:  BSF    00.7
0503A:  BRA    505C
0503C:  BCF    00.7
0503E:  BRA    505C
05040:  MOVFF  661,02
05044:  BCF    FD8.0
05046:  BTFSC  F81.4
05048:  BSF    FD8.0
0504A:  RRCF   02,F
0504C:  BSF    00.6
0504E:  BRA    505C
05050:  BCF    00.6
05052:  DECFSZ 00,F
05054:  BRA    5044
05056:  MOVFF  02,01
0505A:  BRA    5074
0505C:  MOVLW  16
0505E:  BTFSC  00.7
05060:  MOVLW  06
05062:  MOVWF  01
05064:  DECFSZ 01,F
05066:  BRA    5064
05068:  BRA    506A
0506A:  BTFSC  00.7
0506C:  BRA    503C
0506E:  BTFSC  00.6
05070:  BRA    5050
05072:  BRA    5044
05074:  MOVLB  0
05076:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01C3E:  MOVLW  04
01C40:  MOVLB  6
01C42:  MOVWF  x5E
01C44:  MOVLB  0
01C46:  RCALL  1BE8
....................    can_set_baud(); 
01C48:  BRA    1C0E
....................  
....................    RXB0CON=0; 
01C4A:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01C4C:  MOVLW  9F
01C4E:  ANDWF  F60,W
01C50:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01C52:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01C54:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01C58:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01C5A:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01C5C:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01C5E:  BCF    F73.6
01C60:  CLRF   1B
01C62:  BTFSC  FF2.7
01C64:  BSF    1B.7
01C66:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01C68:  MOVLW  0F
01C6A:  MOVLB  6
01C6C:  MOVWF  xF6
01C6E:  MOVLW  1B
01C70:  MOVWF  xF5
01C72:  CLRF   xFA
01C74:  CLRF   xF9
01C76:  CLRF   xF8
01C78:  CLRF   xF7
01C7A:  CLRF   xFB
01C7C:  MOVLB  0
01C7E:  RCALL  177E
01C80:  BTFSC  1B.7
01C82:  BSF    FF2.7
01C84:  CLRF   1B
01C86:  BTFSC  FF2.7
01C88:  BSF    1B.7
01C8A:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01C8C:  MOVLW  0F
01C8E:  MOVLB  6
01C90:  MOVWF  xF6
01C92:  MOVLW  03
01C94:  MOVWF  xF5
01C96:  CLRF   xFA
01C98:  CLRF   xF9
01C9A:  CLRF   xF8
01C9C:  CLRF   xF7
01C9E:  CLRF   xFB
01CA0:  MOVLB  0
01CA2:  RCALL  177E
01CA4:  BTFSC  1B.7
01CA6:  BSF    FF2.7
01CA8:  CLRF   1B
01CAA:  BTFSC  FF2.7
01CAC:  BSF    1B.7
01CAE:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01CB0:  MOVLW  0F
01CB2:  MOVLB  6
01CB4:  MOVWF  xF6
01CB6:  MOVLW  07
01CB8:  MOVWF  xF5
01CBA:  CLRF   xFA
01CBC:  CLRF   xF9
01CBE:  CLRF   xF8
01CC0:  CLRF   xF7
01CC2:  CLRF   xFB
01CC4:  MOVLB  0
01CC6:  RCALL  177E
01CC8:  BTFSC  1B.7
01CCA:  BSF    FF2.7
01CCC:  CLRF   1B
01CCE:  BTFSC  FF2.7
01CD0:  BSF    1B.7
01CD2:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01CD4:  MOVLW  0F
01CD6:  MOVLB  6
01CD8:  MOVWF  xF6
01CDA:  MOVLW  1F
01CDC:  MOVWF  xF5
01CDE:  CLRF   xFA
01CE0:  CLRF   xF9
01CE2:  CLRF   xF8
01CE4:  CLRF   xF7
01CE6:  CLRF   xFB
01CE8:  MOVLB  0
01CEA:  RCALL  177E
01CEC:  BTFSC  1B.7
01CEE:  BSF    FF2.7
01CF0:  CLRF   1B
01CF2:  BTFSC  FF2.7
01CF4:  BSF    1B.7
01CF6:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01CF8:  MOVLW  0F
01CFA:  MOVLB  6
01CFC:  MOVWF  xF6
01CFE:  MOVLW  0B
01D00:  MOVWF  xF5
01D02:  CLRF   xFA
01D04:  CLRF   xF9
01D06:  CLRF   xF8
01D08:  CLRF   xF7
01D0A:  CLRF   xFB
01D0C:  MOVLB  0
01D0E:  RCALL  177E
01D10:  BTFSC  1B.7
01D12:  BSF    FF2.7
01D14:  CLRF   1B
01D16:  BTFSC  FF2.7
01D18:  BSF    1B.7
01D1A:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01D1C:  MOVLW  0F
01D1E:  MOVLB  6
01D20:  MOVWF  xF6
01D22:  MOVWF  xF5
01D24:  CLRF   xFA
01D26:  CLRF   xF9
01D28:  CLRF   xF8
01D2A:  CLRF   xF7
01D2C:  CLRF   xFB
01D2E:  MOVLB  0
01D30:  RCALL  177E
01D32:  BTFSC  1B.7
01D34:  BSF    FF2.7
01D36:  CLRF   1B
01D38:  BTFSC  FF2.7
01D3A:  BSF    1B.7
01D3C:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01D3E:  MOVLW  0F
01D40:  MOVLB  6
01D42:  MOVWF  xF6
01D44:  MOVLW  13
01D46:  MOVWF  xF5
01D48:  CLRF   xFA
01D4A:  CLRF   xF9
01D4C:  CLRF   xF8
01D4E:  CLRF   xF7
01D50:  CLRF   xFB
01D52:  MOVLB  0
01D54:  RCALL  177E
01D56:  BTFSC  1B.7
01D58:  BSF    FF2.7
01D5A:  CLRF   1B
01D5C:  BTFSC  FF2.7
01D5E:  BSF    1B.7
01D60:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01D62:  MOVLW  0F
01D64:  MOVLB  6
01D66:  MOVWF  xF6
01D68:  MOVLW  17
01D6A:  MOVWF  xF5
01D6C:  CLRF   xFA
01D6E:  CLRF   xF9
01D70:  CLRF   xF8
01D72:  CLRF   xF7
01D74:  CLRF   xFB
01D76:  MOVLB  0
01D78:  RCALL  177E
01D7A:  BTFSC  1B.7
01D7C:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01D7E:  MOVF   F93,W
01D80:  ANDLW  FB
01D82:  IORLW  08
01D84:  MOVLB  6
01D86:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01D88:  CLRF   x5E
01D8A:  MOVLB  0
01D8C:  RCALL  1BE8
.................... } 
01D8E:  GOTO   1D94 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01C0E:  MOVLW  C0
01C10:  ANDWF  F70,W
01C12:  IORLW  04
01C14:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01C16:  MOVLW  3F
01C18:  ANDWF  F70,W
01C1A:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01C1C:  MOVLW  F8
01C1E:  ANDWF  F71,W
01C20:  IORLW  02
01C22:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01C24:  MOVLW  C7
01C26:  ANDWF  F71,W
01C28:  IORLW  28
01C2A:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01C2C:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01C2E:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01C30:  MOVLW  F8
01C32:  ANDWF  F72,W
01C34:  IORLW  05
01C36:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01C38:  BCF    F72.6
.................... } 
01C3A:  GOTO   1C4A (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01BE8:  MOVLB  6
01BEA:  SWAPF  x5E,W
01BEC:  ANDLW  70
01BEE:  MOVWF  00
01BF0:  BCF    FD8.0
01BF2:  RLCF   00,F
01BF4:  MOVLW  1F
01BF6:  ANDWF  F6F,W
01BF8:  IORWF  00,W
01BFA:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01BFC:  MOVFF  F6E,00
01C00:  SWAPF  00,F
01C02:  RRCF   00,W
01C04:  ANDLW  07
01C06:  SUBWF  x5E,W
01C08:  BNZ   1BFC
.................... } 
01C0A:  MOVLB  0
01C0C:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
0177E:  MOVFF  6F6,6FD
01782:  MOVFF  6F5,6FC
....................  
....................    if (ext) {  //extended 
01786:  MOVLB  6
01788:  MOVF   xFB,F
0178A:  BZ    1830
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
0178C:  MOVFF  6FC,FE9
01790:  MOVFF  6FD,FEA
01794:  MOVFF  6F7,FEF
....................  
....................       //eidh 
....................       ptr--; 
01798:  MOVF   xFC,W
0179A:  BTFSC  FD8.2
0179C:  DECF   xFD,F
0179E:  DECF   xFC,F
....................       *ptr=make8(id,1); //8:15 
017A0:  MOVFF  6FC,FE9
017A4:  MOVFF  6FD,FEA
017A8:  MOVFF  6F8,FEF
....................  
....................       //sidl 
....................       ptr--; 
017AC:  MOVF   xFC,W
017AE:  BTFSC  FD8.2
017B0:  DECF   xFD,F
017B2:  DECF   xFC,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
017B4:  MOVFF  6FC,FE9
017B8:  MOVFF  6FD,FEA
017BC:  MOVF   xF9,W
017BE:  ANDLW  03
017C0:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
017C2:  MOVFF  6FC,FE9
017C6:  MOVFF  6FD,FEA
017CA:  MOVFF  6F9,00
017CE:  RLCF   00,F
017D0:  RLCF   00,F
017D2:  RLCF   00,F
017D4:  MOVLW  F8
017D6:  ANDWF  00,F
017D8:  MOVF   00,W
017DA:  ANDLW  E0
017DC:  IORWF  FEF,W
017DE:  MOVWF  FEF
....................       *ptr|=0x08; 
017E0:  MOVFF  6FC,FE9
017E4:  MOVFF  6FD,FEA
017E8:  MOVF   FEF,W
017EA:  IORLW  08
017EC:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
017EE:  MOVF   xFC,W
017F0:  BTFSC  FD8.2
017F2:  DECF   xFD,F
017F4:  DECF   xFC,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
017F6:  MOVFF  6FC,FE9
017FA:  MOVFF  6FD,FEA
017FE:  MOVFF  6F9,00
01802:  SWAPF  00,F
01804:  RRCF   00,F
01806:  MOVLW  07
01808:  ANDWF  00,F
0180A:  MOVF   00,W
0180C:  ANDLW  07
0180E:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
01810:  MOVFF  6FC,FE9
01814:  MOVFF  6FD,FEA
01818:  MOVFF  6FA,00
0181C:  RLCF   00,F
0181E:  RLCF   00,F
01820:  RLCF   00,F
01822:  MOVLW  F8
01824:  ANDWF  00,F
01826:  MOVF   00,W
01828:  ANDLW  F8
0182A:  IORWF  FEF,W
0182C:  MOVWF  FEF
....................    } 
....................    else {   //standard 
0182E:  BRA    18AE
....................       //eidl 
....................       *ptr=0; 
01830:  MOVFF  6FC,FE9
01834:  MOVFF  6FD,FEA
01838:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
0183A:  MOVF   xFC,W
0183C:  BTFSC  FD8.2
0183E:  DECF   xFD,F
01840:  DECF   xFC,F
....................       *ptr=0; 
01842:  MOVFF  6FC,FE9
01846:  MOVFF  6FD,FEA
0184A:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
0184C:  MOVF   xFC,W
0184E:  BTFSC  FD8.2
01850:  DECF   xFD,F
01852:  DECF   xFC,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
01854:  MOVFF  6FC,FE9
01858:  MOVFF  6FD,FEA
0185C:  MOVFF  6F7,00
01860:  SWAPF  00,F
01862:  RLCF   00,F
01864:  MOVLW  E0
01866:  ANDWF  00,F
01868:  MOVF   00,W
0186A:  ANDLW  E0
0186C:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
0186E:  MOVF   xFC,W
01870:  BTFSC  FD8.2
01872:  DECF   xFD,F
01874:  DECF   xFC,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01876:  MOVFF  6FC,FE9
0187A:  MOVFF  6FD,FEA
0187E:  MOVFF  6F7,00
01882:  RRCF   00,F
01884:  RRCF   00,F
01886:  RRCF   00,F
01888:  MOVLW  1F
0188A:  ANDWF  00,F
0188C:  MOVF   00,W
0188E:  ANDLW  1F
01890:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
01892:  MOVFF  6FC,FE9
01896:  MOVFF  6FD,FEA
0189A:  MOVFF  6F8,00
0189E:  SWAPF  00,F
018A0:  RLCF   00,F
018A2:  MOVLW  E0
018A4:  ANDWF  00,F
018A6:  MOVF   00,W
018A8:  ANDLW  E0
018AA:  IORWF  FEF,W
018AC:  MOVWF  FEF
....................    } 
.................... } 
018AE:  MOVLB  0
018B0:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
011C6:  MOVLB  6
011C8:  CLRF   xF7
011CA:  CLRF   xF6
011CC:  CLRF   xF5
011CE:  CLRF   xF4
....................    ptr=addr; 
011D0:  MOVFF  6F2,6F9
011D4:  MOVFF  6F1,6F8
....................  
....................    if (ext) { 
011D8:  MOVF   xF3,F
011DA:  BTFSC  FD8.2
011DC:  BRA    1304
....................       ret=*ptr;  //eidl 
011DE:  MOVFF  6F9,03
011E2:  MOVFF  6F8,FE9
011E6:  MOVFF  6F9,FEA
011EA:  MOVFF  FEF,00
011EE:  CLRF   01
011F0:  CLRF   02
011F2:  CLRF   03
011F4:  MOVFF  03,6F7
011F8:  MOVFF  02,6F6
011FC:  MOVFF  01,6F5
01200:  MOVFF  00,6F4
....................  
....................       ptr--;     //eidh 
01204:  MOVF   xF8,W
01206:  BTFSC  FD8.2
01208:  DECF   xF9,F
0120A:  DECF   xF8,F
....................       ret|=((int32)*ptr << 8); 
0120C:  MOVFF  6F8,FE9
01210:  MOVFF  6F9,FEA
01214:  MOVF   FEF,W
01216:  CLRF   xFC
01218:  CLRF   xFB
0121A:  MOVWF  xFA
0121C:  CLRF   00
0121E:  MOVF   00,W
01220:  IORWF  xF4,F
01222:  MOVF   xFA,W
01224:  IORWF  xF5,F
01226:  MOVF   xFB,W
01228:  IORWF  xF6,F
0122A:  MOVF   xFC,W
0122C:  IORWF  xF7,F
....................  
....................       ptr--;     //sidl 
0122E:  MOVF   xF8,W
01230:  BTFSC  FD8.2
01232:  DECF   xF9,F
01234:  DECF   xF8,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
01236:  MOVFF  6F8,FE9
0123A:  MOVFF  6F9,FEA
0123E:  MOVF   FEF,W
01240:  CLRF   xFD
01242:  CLRF   xFC
01244:  CLRF   xFB
01246:  MOVWF  xFA
01248:  MOVLW  03
0124A:  ANDWF  xFA,F
0124C:  CLRF   xFB
0124E:  CLRF   xFC
01250:  CLRF   xFD
01252:  CLRF   00
01254:  CLRF   01
01256:  MOVF   00,W
01258:  IORWF  xF4,F
0125A:  MOVF   01,W
0125C:  IORWF  xF5,F
0125E:  MOVF   xFA,W
01260:  IORWF  xF6,F
01262:  MOVF   xFB,W
01264:  IORWF  xF7,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
01266:  MOVFF  6F8,FE9
0126A:  MOVFF  6F9,FEA
0126E:  MOVF   FEF,W
01270:  CLRF   xFD
01272:  CLRF   xFC
01274:  CLRF   xFB
01276:  MOVWF  xFA
01278:  MOVLW  E0
0127A:  ANDWF  xFA,F
0127C:  CLRF   xFB
0127E:  CLRF   xFC
01280:  CLRF   xFD
01282:  CLRF   00
01284:  RLCF   xFA,W
01286:  MOVWF  01
01288:  RLCF   xFB,W
0128A:  MOVWF  02
0128C:  RLCF   xFC,W
0128E:  MOVWF  03
01290:  RLCF   01,F
01292:  RLCF   02,F
01294:  RLCF   03,F
01296:  RLCF   01,F
01298:  RLCF   02,F
0129A:  RLCF   03,F
0129C:  RLCF   01,F
0129E:  RLCF   02,F
012A0:  RLCF   03,F
012A2:  RLCF   01,F
012A4:  RLCF   02,F
012A6:  RLCF   03,F
012A8:  MOVLW  E0
012AA:  ANDWF  01,F
012AC:  MOVF   00,W
012AE:  IORWF  xF4,F
012B0:  MOVF   01,W
012B2:  IORWF  xF5,F
012B4:  MOVF   02,W
012B6:  IORWF  xF6,F
012B8:  MOVF   03,W
012BA:  IORWF  xF7,F
....................  
....................       ptr--;     //sidh 
012BC:  MOVF   xF8,W
012BE:  BTFSC  FD8.2
012C0:  DECF   xF9,F
012C2:  DECF   xF8,F
....................       ret|=((int32)*ptr << 21); 
012C4:  MOVFF  6F8,FE9
012C8:  MOVFF  6F9,FEA
012CC:  MOVF   FEF,W
012CE:  CLRF   xFB
012D0:  MOVWF  xFA
012D2:  CLRF   00
012D4:  CLRF   01
012D6:  RLCF   xFA,W
012D8:  MOVWF  02
012DA:  RLCF   xFB,W
012DC:  MOVWF  03
012DE:  RLCF   02,F
012E0:  RLCF   03,F
012E2:  RLCF   02,F
012E4:  RLCF   03,F
012E6:  RLCF   02,F
012E8:  RLCF   03,F
012EA:  RLCF   02,F
012EC:  RLCF   03,F
012EE:  MOVLW  E0
012F0:  ANDWF  02,F
012F2:  MOVF   00,W
012F4:  IORWF  xF4,F
012F6:  MOVF   01,W
012F8:  IORWF  xF5,F
012FA:  MOVF   02,W
012FC:  IORWF  xF6,F
012FE:  MOVF   03,W
01300:  IORWF  xF7,F
....................  
....................    } 
....................    else { 
01302:  BRA    13AA
....................       ptr-=2;    //sidl 
01304:  MOVLW  02
01306:  SUBWF  xF8,F
01308:  MOVLW  00
0130A:  SUBWFB xF9,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
0130C:  MOVFF  6F8,FE9
01310:  MOVFF  6F9,FEA
01314:  MOVF   FEF,W
01316:  CLRF   xFD
01318:  CLRF   xFC
0131A:  CLRF   xFB
0131C:  MOVWF  xFA
0131E:  MOVLW  E0
01320:  ANDWF  xFA,F
01322:  CLRF   xFB
01324:  CLRF   xFC
01326:  CLRF   xFD
01328:  RRCF   xFD,W
0132A:  MOVWF  xF7
0132C:  RRCF   xFC,W
0132E:  MOVWF  xF6
01330:  RRCF   xFB,W
01332:  MOVWF  xF5
01334:  RRCF   xFA,W
01336:  MOVWF  xF4
01338:  RRCF   xF7,F
0133A:  RRCF   xF6,F
0133C:  RRCF   xF5,F
0133E:  RRCF   xF4,F
01340:  RRCF   xF7,F
01342:  RRCF   xF6,F
01344:  RRCF   xF5,F
01346:  RRCF   xF4,F
01348:  RRCF   xF7,F
0134A:  RRCF   xF6,F
0134C:  RRCF   xF5,F
0134E:  RRCF   xF4,F
01350:  RRCF   xF7,F
01352:  RRCF   xF6,F
01354:  RRCF   xF5,F
01356:  RRCF   xF4,F
01358:  MOVLW  07
0135A:  ANDWF  xF7,F
....................  
....................       ptr--;     //sidh 
0135C:  MOVF   xF8,W
0135E:  BTFSC  FD8.2
01360:  DECF   xF9,F
01362:  DECF   xF8,F
....................       ret|=((int32)*ptr << 3); 
01364:  MOVFF  6F8,FE9
01368:  MOVFF  6F9,FEA
0136C:  MOVF   FEF,W
0136E:  CLRF   xFD
01370:  CLRF   xFC
01372:  CLRF   xFB
01374:  MOVWF  xFA
01376:  RLCF   xFA,W
01378:  MOVWF  00
0137A:  RLCF   xFB,W
0137C:  MOVWF  01
0137E:  RLCF   xFC,W
01380:  MOVWF  02
01382:  RLCF   xFD,W
01384:  MOVWF  03
01386:  RLCF   00,F
01388:  RLCF   01,F
0138A:  RLCF   02,F
0138C:  RLCF   03,F
0138E:  RLCF   00,F
01390:  RLCF   01,F
01392:  RLCF   02,F
01394:  RLCF   03,F
01396:  MOVLW  F8
01398:  ANDWF  00,F
0139A:  MOVF   00,W
0139C:  IORWF  xF4,F
0139E:  MOVF   01,W
013A0:  IORWF  xF5,F
013A2:  MOVF   02,W
013A4:  IORWF  xF6,F
013A6:  MOVF   03,W
013A8:  IORWF  xF7,F
....................    } 
....................  
....................    return(ret); 
013AA:  MOVFF  6F4,00
013AE:  MOVFF  6F5,01
013B2:  MOVFF  6F6,02
013B6:  MOVFF  6F7,03
.................... } 
013BA:  MOVLB  0
013BC:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
018B2:  MOVLW  0F
018B4:  MOVLB  6
018B6:  MOVWF  xF3
018B8:  MOVLW  66
018BA:  MOVWF  xF2
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
018BC:  MOVLB  F
018BE:  BTFSC  x40.3
018C0:  BRA    18D2
....................       CANCON.win=CAN_WIN_TX0; 
018C2:  MOVLW  F1
018C4:  ANDWF  F6F,W
018C6:  IORLW  08
018C8:  MOVWF  F6F
....................       port=0; 
018CA:  MOVLB  6
018CC:  CLRF   xF4
....................    } 
....................    else if (!TXB1CON.txreq) { 
018CE:  BRA    1906
018D0:  MOVLB  F
018D2:  BTFSC  x30.3
018D4:  BRA    18E8
....................       CANCON.win=CAN_WIN_TX1; 
018D6:  MOVLW  F1
018D8:  ANDWF  F6F,W
018DA:  IORLW  06
018DC:  MOVWF  F6F
....................       port=1; 
018DE:  MOVLW  01
018E0:  MOVLB  6
018E2:  MOVWF  xF4
....................    } 
....................    else if (!TXB2CON.txreq) { 
018E4:  BRA    1906
018E6:  MOVLB  F
018E8:  BTFSC  x20.3
018EA:  BRA    18FE
....................       CANCON.win=CAN_WIN_TX2; 
018EC:  MOVLW  F1
018EE:  ANDWF  F6F,W
018F0:  IORLW  04
018F2:  MOVWF  F6F
....................       port=2; 
018F4:  MOVLW  02
018F6:  MOVLB  6
018F8:  MOVWF  xF4
....................    } 
....................    else { 
018FA:  BRA    1906
018FC:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
018FE:  MOVLW  00
01900:  MOVWF  01
01902:  BRA    197E
01904:  MOVLB  6
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
01906:  MOVF   xEE,W
01908:  ANDLW  03
0190A:  MOVWF  00
0190C:  MOVLW  FC
0190E:  ANDWF  F60,W
01910:  IORWF  00,W
01912:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
01914:  MOVLW  0F
01916:  MOVWF  xF6
01918:  MOVLW  64
0191A:  MOVWF  xF5
0191C:  MOVFF  6EA,6FA
01920:  MOVFF  6E9,6F9
01924:  MOVFF  6E8,6F8
01928:  MOVFF  6E7,6F7
0192C:  MOVFF  6EF,6FB
01930:  MOVLB  0
01932:  RCALL  177E
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
01934:  MOVFF  6ED,F65
....................    TXBaDLC.rtr=rtr; 
01938:  BCF    F65.6
0193A:  MOVLB  6
0193C:  BTFSC  xF0.0
0193E:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
01940:  CLRF   xF1
01942:  MOVF   xED,W
01944:  SUBWF  xF1,W
01946:  BC    1970
....................       *txd0=*data; 
01948:  MOVFF  6EB,FE9
0194C:  MOVFF  6EC,FEA
01950:  MOVFF  FEF,6F7
01954:  MOVFF  6F3,FEA
01958:  MOVFF  6F2,FE9
0195C:  MOVFF  6F7,FEF
....................       txd0++; 
01960:  INCF   xF2,F
01962:  BTFSC  FD8.2
01964:  INCF   xF3,F
....................       data++; 
01966:  INCF   xEB,F
01968:  BTFSC  FD8.2
0196A:  INCF   xEC,F
....................     } 
0196C:  INCF   xF1,F
0196E:  BRA    1942
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
01970:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
01972:  MOVLW  F1
01974:  ANDWF  F6F,W
01976:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
01978:  MOVLW  01
0197A:  MOVWF  01
0197C:  MOVLB  F
.................... } 
0197E:  MOVLB  0
01980:  GOTO   1B96 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
013D8:  BTFSS  F60.7
013DA:  BRA    140A
*
01660:  BTFSS  F60.7
01662:  BRA    1692
....................         CANCON.win=CAN_WIN_RX0; 
*
013DC:  MOVLW  F1
013DE:  ANDWF  F6F,W
013E0:  MOVWF  F6F
*
01664:  MOVLW  F1
01666:  ANDWF  F6F,W
01668:  MOVWF  F6F
....................         stat.buffer=0; 
*
013E2:  BCF    xDA.4
*
0166A:  BCF    xDA.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
013E4:  BCF    FA4.0
*
0166C:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
013E6:  BCF    xDA.0
013E8:  BTFSC  F74.7
013EA:  BSF    xDA.0
*
0166E:  BCF    xDA.0
01670:  BTFSC  F74.7
01672:  BSF    xDA.0
....................         COMSTAT.rx0ovfl=0; 
*
013EC:  BCF    F74.7
*
01674:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
013EE:  BTFSS  F60.2
013F0:  BRA    1408
*
01676:  BTFSS  F60.2
01678:  BRA    1690
....................          stat.filthit=RXB0CON.filthit0; 
*
013F2:  MOVLW  00
013F4:  BTFSC  F60.0
013F6:  MOVLW  01
013F8:  ANDLW  07
013FA:  MOVWF  00
013FC:  BCF    FD8.0
013FE:  RLCF   00,F
01400:  MOVLW  F1
01402:  ANDWF  xDA,W
01404:  IORWF  00,W
01406:  MOVWF  xDA
*
0167A:  MOVLW  00
0167C:  BTFSC  F60.0
0167E:  MOVLW  01
01680:  ANDLW  07
01682:  MOVWF  00
01684:  BCF    FD8.0
01686:  RLCF   00,F
01688:  MOVLW  F1
0168A:  ANDWF  xDA,W
0168C:  IORWF  00,W
0168E:  MOVWF  xDA
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
01408:  BRA    144A
0140A:  MOVLB  F
0140C:  BTFSS  x50.7
0140E:  BRA    1442
*
01690:  BRA    16D2
01692:  MOVLB  F
01694:  BTFSS  x50.7
01696:  BRA    16CA
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
01410:  MOVLW  F1
01412:  ANDWF  F6F,W
01414:  IORLW  0A
01416:  MOVWF  F6F
*
01698:  MOVLW  F1
0169A:  ANDWF  F6F,W
0169C:  IORLW  0A
0169E:  MOVWF  F6F
....................         stat.buffer=1; 
*
01418:  MOVLB  6
0141A:  BSF    xDA.4
*
016A0:  MOVLB  6
016A2:  BSF    xDA.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
0141C:  BCF    FA4.1
*
016A4:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
0141E:  BCF    xDA.0
01420:  BTFSC  F74.6
01422:  BSF    xDA.0
*
016A6:  BCF    xDA.0
016A8:  BTFSC  F74.6
016AA:  BSF    xDA.0
....................         COMSTAT.rx1ovfl=0; 
*
01424:  BCF    F74.6
*
016AC:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
01426:  MOVLB  F
01428:  MOVF   x50,W
0142A:  ANDLW  07
0142C:  ANDLW  07
0142E:  MOVWF  00
01430:  BCF    FD8.0
01432:  RLCF   00,F
01434:  MOVLW  F1
01436:  MOVLB  6
01438:  ANDWF  xDA,W
0143A:  IORWF  00,W
0143C:  MOVWF  xDA
*
016AE:  MOVLB  F
016B0:  MOVF   x50,W
016B2:  ANDLW  07
016B4:  ANDLW  07
016B6:  MOVWF  00
016B8:  BCF    FD8.0
016BA:  RLCF   00,F
016BC:  MOVLW  F1
016BE:  MOVLB  6
016C0:  ANDWF  xDA,W
016C2:  IORWF  00,W
016C4:  MOVWF  xDA
....................     } 
....................     else { 
*
0143E:  BRA    144A
01440:  MOVLB  F
*
016C6:  BRA    16D2
016C8:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
01442:  MOVLW  00
01444:  MOVWF  01
01446:  BRA    14E0
01448:  MOVLB  6
*
016CA:  MOVLW  00
016CC:  MOVWF  01
016CE:  BRA    1768
016D0:  MOVLB  6
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
0144A:  MOVF   F65,W
0144C:  ANDLW  0F
0144E:  MOVWF  xD9
*
016D2:  MOVF   F65,W
016D4:  ANDLW  0F
016D6:  MOVWF  xD9
....................     stat.rtr=RXBaDLC.rtr; 
*
01450:  BCF    xDA.5
01452:  BTFSC  F65.6
01454:  BSF    xDA.5
*
016D8:  BCF    xDA.5
016DA:  BTFSC  F65.6
016DC:  BSF    xDA.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
01456:  BCF    xDA.6
01458:  BTFSC  F62.3
0145A:  BSF    xDA.6
*
016DE:  BCF    xDA.6
016E0:  BTFSC  F62.3
016E2:  BSF    xDA.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
0145C:  MOVLW  00
0145E:  BTFSC  xDA.6
01460:  MOVLW  01
01462:  MOVWF  xEA
01464:  MOVLW  0F
01466:  MOVWF  xF2
01468:  MOVLW  64
0146A:  MOVWF  xF1
0146C:  MOVFF  6EA,6F3
01470:  MOVLB  0
01472:  RCALL  11C6
01474:  MOVFF  03,6D8
01478:  MOVFF  02,6D7
0147C:  MOVFF  01,6D6
01480:  MOVFF  00,6D5
*
016E4:  MOVLW  00
016E6:  BTFSC  xDA.6
016E8:  MOVLW  01
016EA:  MOVWF  xEA
016EC:  MOVLW  0F
016EE:  MOVWF  xF2
016F0:  MOVLW  64
016F2:  MOVWF  xF1
016F4:  MOVFF  6EA,6F3
016F8:  MOVLB  0
016FA:  RCALL  11C6
016FC:  MOVFF  03,6D8
01700:  MOVFF  02,6D7
01704:  MOVFF  01,6D6
01708:  MOVFF  00,6D5
....................  
....................     ptr = &TXRXBaD0; 
*
01484:  MOVLW  0F
01486:  MOVLB  6
01488:  MOVWF  xE9
0148A:  MOVLW  66
0148C:  MOVWF  xE8
*
0170C:  MOVLW  0F
0170E:  MOVLB  6
01710:  MOVWF  xE9
01712:  MOVLW  66
01714:  MOVWF  xE8
....................     for ( i = 0; i < len; i++ ) { 
*
0148E:  CLRF   xE7
01490:  MOVF   xD9,W
01492:  SUBWF  xE7,W
01494:  BC    14BE
*
01716:  CLRF   xE7
01718:  MOVF   xD9,W
0171A:  SUBWF  xE7,W
0171C:  BC    1746
....................         *data = *ptr; 
*
01496:  MOVFF  6E8,FE9
0149A:  MOVFF  6E9,FEA
0149E:  MOVFF  FEF,6EC
014A2:  MOVFF  6E6,FEA
014A6:  MOVFF  6E5,FE9
014AA:  MOVFF  6EC,FEF
*
0171E:  MOVFF  6E8,FE9
01722:  MOVFF  6E9,FEA
01726:  MOVFF  FEF,6EC
0172A:  MOVFF  6E6,FEA
0172E:  MOVFF  6E5,FE9
01732:  MOVFF  6EC,FEF
....................         data++; 
*
014AE:  INCF   xE5,F
014B0:  BTFSC  FD8.2
014B2:  INCF   xE6,F
*
01736:  INCF   xE5,F
01738:  BTFSC  FD8.2
0173A:  INCF   xE6,F
....................         ptr++; 
*
014B4:  INCF   xE8,F
014B6:  BTFSC  FD8.2
014B8:  INCF   xE9,F
*
0173C:  INCF   xE8,F
0173E:  BTFSC  FD8.2
01740:  INCF   xE9,F
....................     } 
*
014BA:  INCF   xE7,F
014BC:  BRA    1490
*
01742:  INCF   xE7,F
01744:  BRA    1718
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
014BE:  MOVLW  F1
014C0:  ANDWF  F6F,W
014C2:  MOVWF  F6F
*
01746:  MOVLW  F1
01748:  ANDWF  F6F,W
0174A:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
014C4:  BCF    xDA.7
014C6:  BTFSC  FA4.7
014C8:  BSF    xDA.7
*
0174C:  BCF    xDA.7
0174E:  BTFSC  FA4.7
01750:  BSF    xDA.7
....................     CAN_INT_IRXIF = 0; 
*
014CA:  BCF    FA4.7
*
01752:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
014CC:  BTFSS  xDA.4
014CE:  BRA    14D8
*
01754:  BTFSS  xDA.4
01756:  BRA    1760
....................       RXB1CON.rxful=0; 
*
014D0:  MOVLB  F
014D2:  BCF    x50.7
*
01758:  MOVLB  F
0175A:  BCF    x50.7
....................     } 
....................     else { 
*
014D4:  BRA    14DC
014D6:  MOVLB  6
*
0175C:  BRA    1764
0175E:  MOVLB  6
....................       RXB0CON.rxful=0; 
*
014D8:  BCF    F60.7
014DA:  MOVLB  F
*
01760:  BCF    F60.7
01762:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
014DC:  MOVLW  01
014DE:  MOVWF  01
*
01764:  MOVLW  01
01766:  MOVWF  01
01768:  MOVLB  6
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
013BE:  MOVF   28,W
013C0:  SUBLW  FF
013C2:  BNZ   13C6
....................       can_rspoint++; 
013C4:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
013C6:  MOVF   28,W
013C8:  SUBLW  09
013CA:  BTFSS  FD8.0
013CC:  BRA    1656
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
013CE:  MOVLW  06
013D0:  MOVLB  6
013D2:  MOVWF  xE6
013D4:  MOVLW  DB
013D6:  MOVWF  xE5
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
014E0:  MOVLB  6
014E2:  CLRF   xE4
014E4:  MOVF   xE4,F
014E6:  BNZ   1528
....................          if(rx_id==can_filter[j]) 
014E8:  MOVF   xE4,W
014EA:  MULLW  04
014EC:  MOVF   FF3,W
014EE:  CLRF   03
014F0:  ADDLW  39
014F2:  MOVWF  FE9
014F4:  MOVLW  01
014F6:  ADDWFC 03,W
014F8:  MOVWF  FEA
014FA:  MOVFF  FEF,00
014FE:  MOVFF  FEC,01
01502:  MOVFF  FEC,02
01506:  MOVFF  FEC,03
0150A:  MOVF   00,W
0150C:  SUBWF  xD5,W
0150E:  BNZ   1524
01510:  MOVF   01,W
01512:  SUBWF  xD6,W
01514:  BNZ   1524
01516:  MOVF   02,W
01518:  SUBWF  xD7,W
0151A:  BNZ   1524
0151C:  MOVF   03,W
0151E:  SUBWF  xD8,W
01520:  BNZ   1524
....................             return; 
01522:  BRA    176A
01524:  INCF   xE4,F
01526:  BRA    14E4
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
01528:  MOVF   28,W
0152A:  MULLW  0E
0152C:  MOVF   FF3,W
0152E:  CLRF   xE6
01530:  MOVWF  xE5
01532:  MOVLW  29
01534:  ADDWF  xE5,W
01536:  MOVWF  FE9
01538:  MOVLW  00
0153A:  ADDWFC xE6,W
0153C:  MOVWF  FEA
0153E:  MOVFF  6D8,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
01542:  MOVF   28,W
01544:  MULLW  0E
01546:  MOVF   FF3,W
01548:  CLRF   xE6
0154A:  MOVWF  xE5
0154C:  MOVLW  01
0154E:  ADDWF  xE5,W
01550:  MOVWF  01
01552:  MOVLW  00
01554:  ADDWFC xE6,W
01556:  MOVWF  03
01558:  MOVF   01,W
0155A:  ADDLW  29
0155C:  MOVWF  FE9
0155E:  MOVLW  00
01560:  ADDWFC 03,W
01562:  MOVWF  FEA
01564:  MOVFF  6D7,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
01568:  MOVF   28,W
0156A:  MULLW  0E
0156C:  MOVF   FF3,W
0156E:  CLRF   xE6
01570:  MOVWF  xE5
01572:  MOVLW  02
01574:  ADDWF  xE5,W
01576:  MOVWF  01
01578:  MOVLW  00
0157A:  ADDWFC xE6,W
0157C:  MOVWF  03
0157E:  MOVF   01,W
01580:  ADDLW  29
01582:  MOVWF  FE9
01584:  MOVLW  00
01586:  ADDWFC 03,W
01588:  MOVWF  FEA
0158A:  MOVFF  6D6,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
0158E:  MOVF   28,W
01590:  MULLW  0E
01592:  MOVF   FF3,W
01594:  CLRF   xE6
01596:  MOVWF  xE5
01598:  MOVLW  03
0159A:  ADDWF  xE5,W
0159C:  MOVWF  01
0159E:  MOVLW  00
015A0:  ADDWFC xE6,W
015A2:  MOVWF  03
015A4:  MOVF   01,W
015A6:  ADDLW  29
015A8:  MOVWF  FE9
015AA:  MOVLW  00
015AC:  ADDWFC 03,W
015AE:  MOVWF  FEA
015B0:  MOVFF  6D5,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
015B4:  MOVF   28,W
015B6:  MULLW  0E
015B8:  MOVF   FF3,W
015BA:  CLRF   xE6
015BC:  MOVWF  xE5
015BE:  MOVLW  04
015C0:  ADDWF  xE5,W
015C2:  MOVWF  01
015C4:  MOVLW  00
015C6:  ADDWFC xE6,W
015C8:  MOVWF  03
015CA:  MOVF   01,W
015CC:  ADDLW  29
015CE:  MOVWF  FE9
015D0:  MOVLW  00
015D2:  ADDWFC 03,W
015D4:  MOVWF  FEA
015D6:  MOVFF  6D9,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
015DA:  MOVF   28,W
015DC:  MULLW  0E
015DE:  MOVF   FF3,W
015E0:  CLRF   xE6
015E2:  MOVWF  xE5
015E4:  MOVLW  05
015E6:  ADDWF  xE5,W
015E8:  MOVWF  01
015EA:  MOVLW  00
015EC:  ADDWFC xE6,W
015EE:  MOVWF  03
015F0:  MOVF   01,W
015F2:  ADDLW  29
015F4:  MOVWF  FE9
015F6:  MOVLW  00
015F8:  ADDWFC 03,W
015FA:  MOVWF  FEA
015FC:  MOVFF  6DA,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
01600:  CLRF   xE3
01602:  MOVF   xD9,W
01604:  SUBWF  xE3,W
01606:  BC    1650
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
01608:  MOVF   28,W
0160A:  MULLW  0E
0160C:  MOVF   FF3,W
0160E:  CLRF   xE6
01610:  MOVWF  xE5
01612:  MOVLW  06
01614:  ADDWF  xE3,W
01616:  CLRF   03
01618:  ADDWF  xE5,W
0161A:  MOVWF  01
0161C:  MOVF   xE6,W
0161E:  ADDWFC 03,F
01620:  MOVF   01,W
01622:  ADDLW  29
01624:  MOVWF  01
01626:  MOVLW  00
01628:  ADDWFC 03,F
0162A:  MOVFF  03,6E6
0162E:  CLRF   03
01630:  MOVF   xE3,W
01632:  ADDLW  DB
01634:  MOVWF  FE9
01636:  MOVLW  06
01638:  ADDWFC 03,W
0163A:  MOVWF  FEA
0163C:  MOVFF  FEF,6E7
01640:  MOVFF  6E6,FEA
01644:  MOVFF  01,FE9
01648:  MOVFF  6E7,FEF
....................       } 
0164C:  INCF   xE3,F
0164E:  BRA    1602
....................  
....................       can_rspoint++; 
01650:  INCF   28,F
....................    } 
....................    else 
01652:  BRA    176A
01654:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01656:  MOVLW  06
01658:  MOVLB  6
0165A:  MOVWF  xE6
0165C:  MOVLW  DB
0165E:  MOVWF  xE5
.................... } 
*
0176A:  MOVLB  0
0176C:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
01984:  MOVF   xB6,W
01986:  SUBLW  0A
01988:  BNZ   198C
....................    { 
....................       can_tspoint--; 
0198A:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
0198C:  MOVF   xB6,W
0198E:  SUBLW  FF
01990:  BTFSC  FD8.2
01992:  BRA    1B9A
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
01994:  MOVF   xB6,W
01996:  MULLW  0D
01998:  MOVF   FF3,W
0199A:  MOVLB  6
0199C:  CLRF   xE6
0199E:  MOVWF  xE5
019A0:  MOVLW  B7
019A2:  ADDWF  xE5,W
019A4:  MOVWF  FE9
019A6:  MOVLW  00
019A8:  ADDWFC xE6,W
019AA:  MOVWF  FEA
019AC:  MOVFF  FEF,6E5
019B0:  MOVLB  0
019B2:  MOVF   xB6,W
019B4:  MULLW  0D
019B6:  MOVF   FF3,W
019B8:  MOVLB  6
019BA:  CLRF   xE7
019BC:  MOVWF  xE6
019BE:  MOVLW  01
019C0:  ADDWF  xE6,W
019C2:  MOVWF  01
019C4:  MOVLW  00
019C6:  ADDWFC xE7,W
019C8:  MOVWF  03
019CA:  MOVF   01,W
019CC:  ADDLW  B7
019CE:  MOVWF  FE9
019D0:  MOVLW  00
019D2:  ADDWFC 03,W
019D4:  MOVWF  FEA
019D6:  MOVFF  FEF,6E6
019DA:  MOVLB  0
019DC:  MOVF   xB6,W
019DE:  MULLW  0D
019E0:  MOVF   FF3,W
019E2:  MOVLB  6
019E4:  CLRF   xE8
019E6:  MOVWF  xE7
019E8:  MOVLW  02
019EA:  ADDWF  xE7,W
019EC:  MOVWF  01
019EE:  MOVLW  00
019F0:  ADDWFC xE8,W
019F2:  MOVWF  03
019F4:  MOVF   01,W
019F6:  ADDLW  B7
019F8:  MOVWF  FE9
019FA:  MOVLW  00
019FC:  ADDWFC 03,W
019FE:  MOVWF  FEA
01A00:  MOVFF  FEF,6E7
01A04:  MOVLB  0
01A06:  MOVF   xB6,W
01A08:  MULLW  0D
01A0A:  MOVF   FF3,W
01A0C:  MOVLB  6
01A0E:  CLRF   xE9
01A10:  MOVWF  xE8
01A12:  MOVLW  03
01A14:  ADDWF  xE8,W
01A16:  MOVWF  01
01A18:  MOVLW  00
01A1A:  ADDWFC xE9,W
01A1C:  MOVWF  03
01A1E:  MOVF   01,W
01A20:  ADDLW  B7
01A22:  MOVWF  FE9
01A24:  MOVLW  00
01A26:  ADDWFC 03,W
01A28:  MOVWF  FEA
01A2A:  MOVFF  FEF,6E8
01A2E:  MOVFF  6E5,6D8
01A32:  MOVFF  6E6,6D7
01A36:  MOVFF  6E7,6D6
01A3A:  MOVFF  6E8,6D5
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
01A3E:  MOVLB  0
01A40:  MOVF   xB6,W
01A42:  MULLW  0D
01A44:  MOVF   FF3,W
01A46:  MOVLB  6
01A48:  CLRF   xE6
01A4A:  MOVWF  xE5
01A4C:  MOVLW  0C
01A4E:  ADDWF  xE5,W
01A50:  MOVWF  01
01A52:  MOVLW  00
01A54:  ADDWFC xE6,W
01A56:  MOVWF  03
01A58:  MOVF   01,W
01A5A:  ADDLW  B7
01A5C:  MOVWF  FE9
01A5E:  MOVLW  00
01A60:  ADDWFC 03,W
01A62:  MOVWF  FEA
01A64:  SWAPF  FEF,W
01A66:  MOVWF  xD9
01A68:  MOVLW  0F
01A6A:  ANDWF  xD9,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
01A6C:  MOVLB  0
01A6E:  MOVF   xB6,W
01A70:  MULLW  0D
01A72:  MOVF   FF3,W
01A74:  MOVLB  6
01A76:  CLRF   xE6
01A78:  MOVWF  xE5
01A7A:  MOVLW  0C
01A7C:  ADDWF  xE5,W
01A7E:  MOVWF  01
01A80:  MOVLW  00
01A82:  ADDWFC xE6,W
01A84:  MOVWF  03
01A86:  MOVF   01,W
01A88:  ADDLW  B7
01A8A:  MOVWF  FE9
01A8C:  MOVLW  00
01A8E:  ADDWFC 03,W
01A90:  MOVWF  FEA
01A92:  MOVF   FEF,W
01A94:  ANDLW  0C
01A96:  MOVWF  00
01A98:  RRCF   00,W
01A9A:  MOVWF  xDA
01A9C:  RRCF   xDA,F
01A9E:  MOVLW  3F
01AA0:  ANDWF  xDA,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
01AA2:  MOVLB  0
01AA4:  MOVF   xB6,W
01AA6:  MULLW  0D
01AA8:  MOVF   FF3,W
01AAA:  MOVLB  6
01AAC:  CLRF   xE6
01AAE:  MOVWF  xE5
01AB0:  MOVLW  0C
01AB2:  ADDWF  xE5,W
01AB4:  MOVWF  01
01AB6:  MOVLW  00
01AB8:  ADDWFC xE6,W
01ABA:  MOVWF  03
01ABC:  MOVF   01,W
01ABE:  ADDLW  B7
01AC0:  MOVWF  FE9
01AC2:  MOVLW  00
01AC4:  ADDWFC 03,W
01AC6:  MOVWF  FEA
01AC8:  MOVFF  FEF,6E5
01ACC:  BCF    xE3.0
01ACE:  BTFSC  xE5.1
01AD0:  BSF    xE3.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01AD2:  MOVLB  0
01AD4:  MOVF   xB6,W
01AD6:  MULLW  0D
01AD8:  MOVF   FF3,W
01ADA:  MOVLB  6
01ADC:  CLRF   xE6
01ADE:  MOVWF  xE5
01AE0:  MOVLW  0C
01AE2:  ADDWF  xE5,W
01AE4:  MOVWF  01
01AE6:  MOVLW  00
01AE8:  ADDWFC xE6,W
01AEA:  MOVWF  03
01AEC:  MOVF   01,W
01AEE:  ADDLW  B7
01AF0:  MOVWF  FE9
01AF2:  MOVLW  00
01AF4:  ADDWFC 03,W
01AF6:  MOVWF  FEA
01AF8:  MOVFF  FEF,6E5
01AFC:  BCF    xE3.1
01AFE:  BTFSC  xE5.0
01B00:  BSF    xE3.1
....................  
....................       for(i=0;i<tx_length;i++) 
01B02:  CLRF   xE4
01B04:  MOVF   xD9,W
01B06:  SUBWF  xE4,W
01B08:  BC    1B5A
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01B0A:  CLRF   03
01B0C:  MOVF   xE4,W
01B0E:  ADDLW  DB
01B10:  MOVWF  01
01B12:  MOVLW  06
01B14:  ADDWFC 03,F
01B16:  MOVFF  01,6E5
01B1A:  MOVFF  03,6E6
01B1E:  MOVLB  0
01B20:  MOVF   xB6,W
01B22:  MULLW  0D
01B24:  MOVF   FF3,W
01B26:  MOVLB  6
01B28:  CLRF   xE8
01B2A:  MOVWF  xE7
01B2C:  MOVLW  04
01B2E:  ADDWF  xE4,W
01B30:  CLRF   03
01B32:  ADDWF  xE7,W
01B34:  MOVWF  01
01B36:  MOVF   xE8,W
01B38:  ADDWFC 03,F
01B3A:  MOVF   01,W
01B3C:  ADDLW  B7
01B3E:  MOVWF  FE9
01B40:  MOVLW  00
01B42:  ADDWFC 03,W
01B44:  MOVWF  FEA
01B46:  MOVFF  FEF,6E7
01B4A:  MOVFF  6E6,FEA
01B4E:  MOVFF  6E5,FE9
01B52:  MOVFF  6E7,FEF
....................       } 
01B56:  INCF   xE4,F
01B58:  BRA    1B04
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01B5A:  MOVLW  00
01B5C:  BTFSC  xE3.0
01B5E:  MOVLW  01
01B60:  MOVWF  xE5
01B62:  MOVLW  00
01B64:  BTFSC  xE3.1
01B66:  MOVLW  01
01B68:  MOVWF  xE6
01B6A:  MOVFF  6D8,6EA
01B6E:  MOVFF  6D7,6E9
01B72:  MOVFF  6D6,6E8
01B76:  MOVFF  6D5,6E7
01B7A:  MOVLW  06
01B7C:  MOVWF  xEC
01B7E:  MOVLW  DB
01B80:  MOVWF  xEB
01B82:  MOVFF  6D9,6ED
01B86:  MOVFF  6DA,6EE
01B8A:  MOVFF  6E5,6EF
01B8E:  MOVFF  6E6,6F0
01B92:  MOVLB  0
01B94:  BRA    18B2
....................  
....................       can_tspoint--; 
01B96:  DECF   xB6,F
....................    } 
....................    else 
01B98:  BRA    1B9C
....................       return; 
01B9A:  BRA    1B9C
.................... } 
01B9C:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
0250E:  MOVLB  6
02510:  CLRF   xD1
02512:  MOVF   xD0,W
02514:  SUBWF  xD1,W
02516:  BC    254A
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
02518:  CLRF   03
0251A:  MOVF   xD1,W
0251C:  ADDWF  xCE,W
0251E:  MOVWF  01
02520:  MOVF   xCF,W
02522:  ADDWFC 03,F
02524:  MOVFF  03,6D3
02528:  MOVFF  6CC,FE9
0252C:  MOVFF  6CD,FEA
02530:  MOVFF  FEF,6D4
02534:  MOVFF  6D3,FEA
02538:  MOVFF  01,FE9
0253C:  MOVFF  6D4,FEF
....................       ++origin; 
02540:  INCF   xCC,F
02542:  BTFSC  FD8.2
02544:  INCF   xCD,F
....................    } 
02546:  INCF   xD1,F
02548:  BRA    2512
.................... } 
0254A:  MOVLB  0
0254C:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
022A4:  MOVLB  6
022A6:  MOVFF  6BD,FE9
022AA:  MOVFF  6BE,FEA
022AE:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
022B0:  MOVLW  01
022B2:  ADDWF  xBD,W
022B4:  MOVWF  01
022B6:  MOVLW  00
022B8:  ADDWFC xBE,W
022BA:  MOVFF  01,FE9
022BE:  MOVWF  FEA
022C0:  MOVFF  6BA,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
022C4:  MOVLW  01
022C6:  ADDWF  xBD,W
022C8:  MOVWF  01
022CA:  MOVLW  00
022CC:  ADDWFC xBE,W
022CE:  MOVWF  03
022D0:  MOVF   01,W
022D2:  ADDLW  03
022D4:  MOVWF  FE9
022D6:  MOVLW  00
022D8:  ADDWFC 03,W
022DA:  MOVWF  FEA
022DC:  MOVFF  6BB,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
022E0:  MOVLW  01
022E2:  ADDWF  xBD,W
022E4:  MOVWF  01
022E6:  MOVLW  00
022E8:  ADDWFC xBE,W
022EA:  MOVWF  03
022EC:  MOVF   01,W
022EE:  ADDLW  06
022F0:  MOVWF  FE9
022F2:  MOVLW  00
022F4:  ADDWFC 03,W
022F6:  MOVWF  FEA
022F8:  MOVFF  6BC,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
022FC:  MOVLW  01
022FE:  ADDWF  xBD,W
02300:  MOVWF  01
02302:  MOVLW  00
02304:  ADDWFC xBE,W
02306:  MOVWF  03
02308:  MOVF   01,W
0230A:  ADDLW  0E
0230C:  MOVWF  FE9
0230E:  MOVLW  00
02310:  ADDWFC 03,W
02312:  MOVWF  FEA
02314:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
02316:  MOVLW  01
02318:  ADDWF  xBD,W
0231A:  MOVWF  01
0231C:  MOVLW  00
0231E:  ADDWFC xBE,W
02320:  MOVWF  03
02322:  MOVF   01,W
02324:  ADDLW  0F
02326:  MOVWF  FE9
02328:  MOVLW  00
0232A:  ADDWFC 03,W
0232C:  MOVWF  FEA
0232E:  MOVLW  01
02330:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
02332:  ADDWF  xBD,W
02334:  MOVWF  01
02336:  MOVLW  00
02338:  ADDWFC xBE,W
0233A:  MOVWF  03
0233C:  MOVF   01,W
0233E:  ADDLW  09
02340:  MOVWF  FE9
02342:  MOVLW  00
02344:  ADDWFC 03,W
02346:  MOVWF  FEA
02348:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
0234A:  MOVLW  01
0234C:  ADDWF  xBD,W
0234E:  MOVWF  01
02350:  MOVLW  00
02352:  ADDWFC xBE,W
02354:  MOVWF  03
02356:  MOVF   01,W
02358:  ADDLW  0E
0235A:  MOVWF  FE9
0235C:  MOVLW  00
0235E:  ADDWFC 03,W
02360:  MOVWF  FEA
02362:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
02364:  MOVLW  01
02366:  ADDWF  xBD,W
02368:  MOVWF  01
0236A:  MOVLW  00
0236C:  ADDWFC xBE,W
0236E:  MOVWF  03
02370:  MOVF   01,W
02372:  ADDLW  02
02374:  MOVWF  FE9
02376:  MOVLW  00
02378:  ADDWFC 03,W
0237A:  MOVWF  FEA
0237C:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
0237E:  MOVLW  01
02380:  ADDWF  xBD,W
02382:  MOVWF  01
02384:  MOVLW  00
02386:  ADDWFC xBE,W
02388:  MOVWF  03
0238A:  MOVF   01,W
0238C:  ADDLW  05
0238E:  MOVWF  FE9
02390:  MOVLW  00
02392:  ADDWFC 03,W
02394:  MOVWF  FEA
02396:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
02398:  MOVLW  01
0239A:  ADDWF  xBD,W
0239C:  MOVWF  01
0239E:  MOVLW  00
023A0:  ADDWFC xBE,W
023A2:  MOVWF  03
023A4:  MOVF   01,W
023A6:  ADDLW  08
023A8:  MOVWF  FE9
023AA:  MOVLW  00
023AC:  ADDWFC 03,W
023AE:  MOVWF  FEA
023B0:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
023B2:  MOVLW  01
023B4:  ADDWF  xBD,W
023B6:  MOVWF  01
023B8:  MOVLW  00
023BA:  ADDWFC xBE,W
023BC:  MOVWF  03
023BE:  MOVF   01,W
023C0:  ADDLW  01
023C2:  MOVWF  FE9
023C4:  MOVLW  00
023C6:  ADDWFC 03,W
023C8:  MOVWF  FEA
023CA:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
023CC:  MOVLW  01
023CE:  ADDWF  xBD,W
023D0:  MOVWF  01
023D2:  MOVLW  00
023D4:  ADDWFC xBE,W
023D6:  MOVWF  03
023D8:  MOVF   01,W
023DA:  ADDLW  04
023DC:  MOVWF  FE9
023DE:  MOVLW  00
023E0:  ADDWFC 03,W
023E2:  MOVWF  FEA
023E4:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
023E6:  MOVLW  01
023E8:  ADDWF  xBD,W
023EA:  MOVWF  01
023EC:  MOVLW  00
023EE:  ADDWFC xBE,W
023F0:  MOVWF  03
023F2:  MOVF   01,W
023F4:  ADDLW  07
023F6:  MOVWF  FE9
023F8:  MOVLW  00
023FA:  ADDWFC 03,W
023FC:  MOVWF  FEA
023FE:  MOVLW  01
02400:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
02402:  ADDWF  xBD,W
02404:  MOVWF  01
02406:  MOVLW  00
02408:  ADDWFC xBE,W
0240A:  MOVWF  03
0240C:  MOVF   01,W
0240E:  ADDLW  10
02410:  MOVWF  01
02412:  MOVLW  00
02414:  ADDWFC 03,F
02416:  MOVFF  03,6C3
0241A:  CLRF   03
0241C:  MOVF   xBF,W
0241E:  ADDLW  1C
02420:  MOVWF  FE9
02422:  MOVLW  00
02424:  ADDWFC 03,W
02426:  MOVWF  FEA
02428:  MOVFF  FEF,6C4
0242C:  MOVFF  6C3,FEA
02430:  MOVFF  01,FE9
02434:  MOVFF  6C4,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
02438:  MOVLW  01
0243A:  ADDWF  xBD,W
0243C:  MOVWF  01
0243E:  MOVLW  00
02440:  ADDWFC xBE,W
02442:  MOVWF  03
02444:  MOVF   01,W
02446:  ADDLW  0A
02448:  MOVWF  FE9
0244A:  MOVLW  00
0244C:  ADDWFC 03,W
0244E:  MOVWF  FEA
02450:  MOVF   FEE,F
02452:  MOVF   FEE,F
02454:  CLRF   FEC
02456:  MOVF   FED,F
02458:  CLRF   FEF
0245A:  MOVF   FED,F
0245C:  CLRF   FEF
0245E:  MOVF   FED,F
02460:  CLRF   FEF
.................... } 
02462:  MOVLB  0
02464:  GOTO   2EDE (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
0224A:  MOVLB  6
0224C:  MOVFF  6BC,FE9
02250:  MOVFF  6BD,FEA
02254:  MOVLW  01
02256:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
02258:  MOVFF  6BA,6BF
....................       sw.off.adress=off_adr; 
0225C:  MOVFF  6BB,6C2
....................       sw.previous_state=button_depressed; 
02260:  BSF    xC5.1
....................       sw.outstate=off; 
02262:  MOVWF  xCA
....................       sw.on.needs_update=0; 
02264:  BCF    xC1.0
....................       sw.off.needs_update=0; 
02266:  BCF    xC4.0
....................       sw.on.value=0; 
02268:  CLRF   xC0
....................       sw.off.value=0; 
0226A:  CLRF   xC3
....................       sw.realbutton=inputs[real_button]; 
0226C:  CLRF   03
0226E:  MOVF   xBE,W
02270:  ADDLW  1C
02272:  MOVWF  FE9
02274:  MOVLW  00
02276:  ADDWFC 03,W
02278:  MOVWF  FEA
0227A:  MOVFF  FEF,6CB
....................       input->device=sw; 
0227E:  MOVLW  01
02280:  ADDWF  xBC,W
02282:  MOVWF  FE9
02284:  MOVLW  00
02286:  ADDWFC xBD,W
02288:  MOVWF  FEA
0228A:  MOVLW  06
0228C:  MOVWF  FE2
0228E:  MOVLW  BF
02290:  MOVWF  FE1
02292:  MOVLW  20
02294:  MOVWF  01
02296:  MOVFF  FE6,FEE
0229A:  DECFSZ 01,F
0229C:  BRA    2296
.................... } 
0229E:  MOVLB  0
022A0:  GOTO   2E00 (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
02468:  MOVLB  6
0246A:  MOVFF  6BD,FE9
0246E:  MOVFF  6BE,FEA
02472:  MOVLW  02
02474:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
02476:  MOVFF  6BB,6C1
....................       sw.off.adress=off_adr; 
0247A:  MOVFF  6BC,6C4
....................       sw.previous_state=button_depressed; 
0247E:  BSF    xC7.1
....................       sw.outstate=off; 
02480:  MOVLW  01
02482:  MOVWF  xC8
....................       sw.on.needs_update=0; 
02484:  BCF    xC3.0
....................       sw.off.needs_update=0; 
02486:  BCF    xC6.0
....................       sw.on.value=0; 
02488:  CLRF   xC2
....................       sw.off.value=0; 
0248A:  CLRF   xC5
....................       sw.repeat=repeat; 
0248C:  BCF    xC9.0
0248E:  BTFSC  xC0.0
02490:  BSF    xC9.0
....................       sw.realbutton=inputs[real_button]; 
02492:  CLRF   03
02494:  MOVF   xBF,W
02496:  ADDLW  1C
02498:  MOVWF  FE9
0249A:  MOVLW  00
0249C:  ADDWFC 03,W
0249E:  MOVWF  FEA
024A0:  MOVFF  FEF,6CA
....................       input->device=sw; 
024A4:  MOVLW  01
024A6:  ADDWF  xBD,W
024A8:  MOVWF  FE9
024AA:  MOVLW  00
024AC:  ADDWFC xBE,W
024AE:  MOVWF  FEA
024B0:  MOVLW  06
024B2:  MOVWF  FE2
024B4:  MOVLW  C1
024B6:  MOVWF  FE1
024B8:  MOVLW  20
024BA:  MOVWF  01
024BC:  MOVFF  FE6,FEE
024C0:  DECFSZ 01,F
024C2:  BRA    24BC
.................... } 
024C4:  MOVLB  0
024C6:  GOTO   2FC8 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
02744:  MOVLB  6
02746:  MOVFF  6C0,FE9
0274A:  MOVFF  6C1,FEA
0274E:  MOVLW  65
02750:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
02752:  MOVLW  01
02754:  ADDWF  xC0,W
02756:  MOVWF  01
02758:  MOVLW  00
0275A:  ADDWFC xC1,W
0275C:  MOVWF  03
0275E:  MOVF   01,W
02760:  ADDLW  1D
02762:  MOVWF  FE9
02764:  MOVLW  00
02766:  ADDWFC 03,W
02768:  MOVWF  FEA
0276A:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
0276C:  MOVLW  01
0276E:  ADDWF  xC0,W
02770:  MOVWF  01
02772:  MOVLW  00
02774:  ADDWFC xC1,W
02776:  MOVWF  03
02778:  MOVF   01,W
0277A:  ADDLW  09
0277C:  MOVWF  FE9
0277E:  MOVLW  00
02780:  ADDWFC 03,W
02782:  MOVWF  FEA
02784:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02786:  MOVLW  01
02788:  ADDWF  xC0,W
0278A:  MOVWF  01
0278C:  MOVLW  00
0278E:  ADDWFC xC1,W
02790:  MOVWF  03
02792:  MOVF   01,W
02794:  ADDLW  13
02796:  MOVWF  FE9
02798:  MOVLW  00
0279A:  ADDWFC 03,W
0279C:  MOVWF  FEA
0279E:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
027A0:  MOVLW  01
027A2:  ADDWF  xC0,W
027A4:  MOVWF  01
027A6:  MOVLW  00
027A8:  ADDWFC xC1,W
027AA:  MOVWF  03
027AC:  MOVF   01,W
027AE:  ADDLW  1C
027B0:  MOVWF  FE9
027B2:  MOVLW  00
027B4:  ADDWFC 03,W
027B6:  MOVWF  FEA
027B8:  MOVLW  7F
027BA:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
027BC:  MOVLW  01
027BE:  ADDWF  xC0,W
027C0:  MOVWF  01
027C2:  MOVLW  00
027C4:  ADDWFC xC1,W
027C6:  MOVWF  03
027C8:  MOVF   01,W
027CA:  ADDLW  08
027CC:  MOVWF  FE9
027CE:  MOVLW  00
027D0:  ADDWFC 03,W
027D2:  MOVWF  FEA
027D4:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
027D6:  MOVLW  01
027D8:  ADDWF  xC0,W
027DA:  MOVWF  01
027DC:  MOVLW  00
027DE:  ADDWFC xC1,W
027E0:  MOVWF  03
027E2:  MOVF   01,W
027E4:  ADDLW  12
027E6:  MOVWF  FE9
027E8:  MOVLW  00
027EA:  ADDWFC 03,W
027EC:  MOVWF  FEA
027EE:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
027F0:  MOVLW  01
027F2:  ADDWF  xC0,W
027F4:  MOVWF  01
027F6:  MOVLW  00
027F8:  ADDWFC xC1,W
027FA:  MOVWF  03
027FC:  MOVF   01,W
027FE:  ADDLW  1F
02800:  MOVWF  FE9
02802:  MOVLW  00
02804:  ADDWFC 03,W
02806:  MOVWF  FEA
02808:  MOVFF  6C2,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
0280C:  MOVLW  01
0280E:  ADDWF  xC0,W
02810:  MOVWF  01
02812:  MOVLW  00
02814:  ADDWFC xC1,W
02816:  MOVWF  03
02818:  MOVF   01,W
0281A:  ADDLW  14
0281C:  MOVWF  01
0281E:  MOVLW  00
02820:  ADDWFC 03,F
02822:  MOVFF  01,6C5
02826:  MOVFF  03,6C6
0282A:  MOVFF  6BB,6CD
0282E:  MOVFF  6BA,6CC
02832:  MOVFF  03,6CF
02836:  MOVFF  01,6CE
0283A:  MOVLW  08
0283C:  MOVWF  xD0
0283E:  MOVLB  0
02840:  RCALL  250E
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
02842:  MOVLW  01
02844:  MOVLB  6
02846:  ADDWF  xC0,W
02848:  MOVWF  01
0284A:  MOVLW  00
0284C:  ADDWFC xC1,W
0284E:  MOVWF  03
02850:  MOVFF  01,6C5
02854:  MOVWF  xC6
02856:  MOVFF  6BD,6CD
0285A:  MOVFF  6BC,6CC
0285E:  MOVWF  xCF
02860:  MOVFF  01,6CE
02864:  MOVLW  08
02866:  MOVWF  xD0
02868:  MOVLB  0
0286A:  RCALL  250E
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
0286C:  MOVLW  01
0286E:  MOVLB  6
02870:  ADDWF  xC0,W
02872:  MOVWF  01
02874:  MOVLW  00
02876:  ADDWFC xC1,W
02878:  MOVWF  03
0287A:  MOVF   01,W
0287C:  ADDLW  0A
0287E:  MOVWF  01
02880:  MOVLW  00
02882:  ADDWFC 03,F
02884:  MOVFF  01,6C5
02888:  MOVFF  03,6C6
0288C:  MOVFF  6BF,6CD
02890:  MOVFF  6BE,6CC
02894:  MOVFF  03,6CF
02898:  MOVFF  01,6CE
0289C:  MOVLW  08
0289E:  MOVWF  xD0
028A0:  MOVLB  0
028A2:  RCALL  250E
....................    ((struct light)output->device).out_state=_off; 
028A4:  MOVLW  01
028A6:  MOVLB  6
028A8:  ADDWF  xC0,W
028AA:  MOVWF  01
028AC:  MOVLW  00
028AE:  ADDWFC xC1,W
028B0:  MOVWF  03
028B2:  MOVF   01,W
028B4:  ADDLW  1E
028B6:  MOVWF  FE9
028B8:  MOVLW  00
028BA:  ADDWFC 03,W
028BC:  MOVWF  FEA
028BE:  MOVLW  01
028C0:  MOVWF  FEF
.................... } 
028C2:  MOVLB  0
028C4:  GOTO   3204 (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02B0A:  MOVLB  6
02B0C:  MOVFF  6BE,FE9
02B10:  MOVFF  6BF,FEA
02B14:  MOVLW  64
02B16:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
02B18:  MOVLW  01
02B1A:  ADDWF  xBE,W
02B1C:  MOVWF  01
02B1E:  MOVLW  00
02B20:  ADDWFC xBF,W
02B22:  MOVWF  03
02B24:  MOVF   01,W
02B26:  ADDLW  09
02B28:  MOVWF  FE9
02B2A:  MOVLW  00
02B2C:  ADDWFC 03,W
02B2E:  MOVWF  FEA
02B30:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
02B32:  MOVLW  01
02B34:  ADDWF  xBE,W
02B36:  MOVWF  01
02B38:  MOVLW  00
02B3A:  ADDWFC xBF,W
02B3C:  MOVWF  03
02B3E:  MOVF   01,W
02B40:  ADDLW  13
02B42:  MOVWF  FE9
02B44:  MOVLW  00
02B46:  ADDWFC 03,W
02B48:  MOVWF  FEA
02B4A:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
02B4C:  MOVLW  01
02B4E:  ADDWF  xBE,W
02B50:  MOVWF  01
02B52:  MOVLW  00
02B54:  ADDWFC xBF,W
02B56:  MOVWF  03
02B58:  MOVF   01,W
02B5A:  ADDLW  08
02B5C:  MOVWF  FE9
02B5E:  MOVLW  00
02B60:  ADDWFC 03,W
02B62:  MOVWF  FEA
02B64:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
02B66:  MOVLW  01
02B68:  ADDWF  xBE,W
02B6A:  MOVWF  01
02B6C:  MOVLW  00
02B6E:  ADDWFC xBF,W
02B70:  MOVWF  03
02B72:  MOVF   01,W
02B74:  ADDLW  12
02B76:  MOVWF  FE9
02B78:  MOVLW  00
02B7A:  ADDWFC 03,W
02B7C:  MOVWF  FEA
02B7E:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02B80:  MOVLW  01
02B82:  ADDWF  xBE,W
02B84:  MOVWF  01
02B86:  MOVLW  00
02B88:  ADDWFC xBF,W
02B8A:  MOVWF  03
02B8C:  MOVF   01,W
02B8E:  ADDLW  14
02B90:  MOVWF  FE9
02B92:  MOVLW  00
02B94:  ADDWFC 03,W
02B96:  MOVWF  FEA
02B98:  MOVFF  6C0,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02B9C:  MOVLW  01
02B9E:  ADDWF  xBE,W
02BA0:  MOVWF  01
02BA2:  MOVLW  00
02BA4:  ADDWFC xBF,W
02BA6:  MOVWF  03
02BA8:  MOVFF  01,6C3
02BAC:  MOVWF  xC4
02BAE:  MOVFF  6BB,6CD
02BB2:  MOVFF  6BA,6CC
02BB6:  MOVWF  xCF
02BB8:  MOVFF  01,6CE
02BBC:  MOVLW  08
02BBE:  MOVWF  xD0
02BC0:  MOVLB  0
02BC2:  RCALL  250E
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02BC4:  MOVLW  01
02BC6:  MOVLB  6
02BC8:  ADDWF  xBE,W
02BCA:  MOVWF  01
02BCC:  MOVLW  00
02BCE:  ADDWFC xBF,W
02BD0:  MOVWF  03
02BD2:  MOVF   01,W
02BD4:  ADDLW  0A
02BD6:  MOVWF  01
02BD8:  MOVLW  00
02BDA:  ADDWFC 03,F
02BDC:  MOVFF  01,6C3
02BE0:  MOVFF  03,6C4
02BE4:  MOVFF  6BD,6CD
02BE8:  MOVFF  6BC,6CC
02BEC:  MOVFF  03,6CF
02BF0:  MOVFF  01,6CE
02BF4:  MOVLW  08
02BF6:  MOVWF  xD0
02BF8:  MOVLB  0
02BFA:  RCALL  250E
.................... } 
02BFC:  GOTO   343C (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
028C8:  MOVLB  6
028CA:  MOVFF  6C2,FE9
028CE:  MOVFF  6C3,FEA
028D2:  MOVLW  66
028D4:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
028D6:  MOVLW  01
028D8:  ADDWF  xC2,W
028DA:  MOVWF  01
028DC:  MOVLW  00
028DE:  ADDWFC xC3,W
028E0:  MOVWF  03
028E2:  MOVF   01,W
028E4:  ADDLW  09
028E6:  MOVWF  FE9
028E8:  MOVLW  00
028EA:  ADDWFC 03,W
028EC:  MOVWF  FEA
028EE:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
028F0:  MOVLW  01
028F2:  ADDWF  xC2,W
028F4:  MOVWF  01
028F6:  MOVLW  00
028F8:  ADDWFC xC3,W
028FA:  MOVWF  03
028FC:  MOVF   01,W
028FE:  ADDLW  13
02900:  MOVWF  FE9
02902:  MOVLW  00
02904:  ADDWFC 03,W
02906:  MOVWF  FEA
02908:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
0290A:  MOVLW  01
0290C:  ADDWF  xC2,W
0290E:  MOVWF  01
02910:  MOVLW  00
02912:  ADDWFC xC3,W
02914:  MOVWF  03
02916:  MOVF   01,W
02918:  ADDLW  08
0291A:  MOVWF  FE9
0291C:  MOVLW  00
0291E:  ADDWFC 03,W
02920:  MOVWF  FEA
02922:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
02924:  MOVLW  01
02926:  ADDWF  xC2,W
02928:  MOVWF  01
0292A:  MOVLW  00
0292C:  ADDWFC xC3,W
0292E:  MOVWF  03
02930:  MOVF   01,W
02932:  ADDLW  12
02934:  MOVWF  FE9
02936:  MOVLW  00
02938:  ADDWFC 03,W
0293A:  MOVWF  FEA
0293C:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
0293E:  MOVLW  01
02940:  ADDWF  xC2,W
02942:  MOVWF  01
02944:  MOVLW  00
02946:  ADDWFC xC3,W
02948:  MOVWF  03
0294A:  MOVF   01,W
0294C:  ADDLW  1D
0294E:  MOVWF  FE9
02950:  MOVLW  00
02952:  ADDWFC 03,W
02954:  MOVWF  FEA
02956:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
02958:  MOVLW  01
0295A:  ADDWF  xC2,W
0295C:  MOVWF  01
0295E:  MOVLW  00
02960:  ADDWFC xC3,W
02962:  MOVWF  03
02964:  MOVF   01,W
02966:  ADDLW  27
02968:  MOVWF  FE9
0296A:  MOVLW  00
0296C:  ADDWFC 03,W
0296E:  MOVWF  FEA
02970:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
02972:  MOVLW  01
02974:  ADDWF  xC2,W
02976:  MOVWF  01
02978:  MOVLW  00
0297A:  ADDWFC xC3,W
0297C:  MOVWF  03
0297E:  MOVF   01,W
02980:  ADDLW  1C
02982:  MOVWF  FE9
02984:  MOVLW  00
02986:  ADDWFC 03,W
02988:  MOVWF  FEA
0298A:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
0298C:  MOVLW  01
0298E:  ADDWF  xC2,W
02990:  MOVWF  01
02992:  MOVLW  00
02994:  ADDWFC xC3,W
02996:  MOVWF  03
02998:  MOVF   01,W
0299A:  ADDLW  26
0299C:  MOVWF  FE9
0299E:  MOVLW  00
029A0:  ADDWFC 03,W
029A2:  MOVWF  FEA
029A4:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
029A6:  MOVLW  01
029A8:  ADDWF  xC2,W
029AA:  MOVWF  01
029AC:  MOVLW  00
029AE:  ADDWFC xC3,W
029B0:  MOVWF  03
029B2:  MOVF   01,W
029B4:  ADDLW  28
029B6:  MOVWF  FE9
029B8:  MOVLW  00
029BA:  ADDWFC 03,W
029BC:  MOVWF  FEA
029BE:  MOVFF  6C4,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
029C2:  MOVLW  01
029C4:  ADDWF  xC2,W
029C6:  MOVWF  01
029C8:  MOVLW  00
029CA:  ADDWFC xC3,W
029CC:  MOVWF  03
029CE:  MOVF   01,W
029D0:  ADDLW  29
029D2:  MOVWF  FE9
029D4:  MOVLW  00
029D6:  ADDWFC 03,W
029D8:  MOVWF  FEA
029DA:  MOVFF  6C5,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
029DE:  MOVLW  01
029E0:  ADDWF  xC2,W
029E2:  MOVWF  01
029E4:  MOVLW  00
029E6:  ADDWFC xC3,W
029E8:  MOVWF  03
029EA:  MOVF   01,W
029EC:  ADDLW  2B
029EE:  MOVWF  FE9
029F0:  MOVLW  00
029F2:  ADDWFC 03,W
029F4:  MOVWF  FEA
029F6:  MOVFF  6C7,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
029FA:  MOVLW  01
029FC:  ADDWF  xC2,W
029FE:  MOVWF  01
02A00:  MOVLW  00
02A02:  ADDWFC xC3,W
02A04:  MOVWF  03
02A06:  MOVF   01,W
02A08:  ADDLW  2C
02A0A:  MOVWF  FE9
02A0C:  MOVLW  00
02A0E:  ADDWFC 03,W
02A10:  MOVWF  FEA
02A12:  MOVFF  6C6,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
02A16:  MOVLW  01
02A18:  ADDWF  xC2,W
02A1A:  MOVWF  01
02A1C:  MOVLW  00
02A1E:  ADDWFC xC3,W
02A20:  MOVWF  03
02A22:  MOVFF  01,6CA
02A26:  MOVWF  xCB
02A28:  MOVFF  6BB,6CD
02A2C:  MOVFF  6BA,6CC
02A30:  MOVWF  xCF
02A32:  MOVFF  01,6CE
02A36:  MOVLW  08
02A38:  MOVWF  xD0
02A3A:  MOVLB  0
02A3C:  RCALL  250E
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
02A3E:  MOVLW  01
02A40:  MOVLB  6
02A42:  ADDWF  xC2,W
02A44:  MOVWF  01
02A46:  MOVLW  00
02A48:  ADDWFC xC3,W
02A4A:  MOVWF  03
02A4C:  MOVF   01,W
02A4E:  ADDLW  0A
02A50:  MOVWF  01
02A52:  MOVLW  00
02A54:  ADDWFC 03,F
02A56:  MOVFF  01,6CA
02A5A:  MOVFF  03,6CB
02A5E:  MOVFF  6BD,6CD
02A62:  MOVFF  6BC,6CC
02A66:  MOVFF  03,6CF
02A6A:  MOVFF  01,6CE
02A6E:  MOVLW  08
02A70:  MOVWF  xD0
02A72:  MOVLB  0
02A74:  RCALL  250E
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02A76:  MOVLW  01
02A78:  MOVLB  6
02A7A:  ADDWF  xC2,W
02A7C:  MOVWF  01
02A7E:  MOVLW  00
02A80:  ADDWFC xC3,W
02A82:  MOVWF  03
02A84:  MOVF   01,W
02A86:  ADDLW  14
02A88:  MOVWF  01
02A8A:  MOVLW  00
02A8C:  ADDWFC 03,F
02A8E:  MOVFF  01,6CA
02A92:  MOVFF  03,6CB
02A96:  MOVFF  6BF,6CD
02A9A:  MOVFF  6BE,6CC
02A9E:  MOVFF  03,6CF
02AA2:  MOVFF  01,6CE
02AA6:  MOVLW  08
02AA8:  MOVWF  xD0
02AAA:  MOVLB  0
02AAC:  RCALL  250E
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
02AAE:  MOVLW  01
02AB0:  MOVLB  6
02AB2:  ADDWF  xC2,W
02AB4:  MOVWF  01
02AB6:  MOVLW  00
02AB8:  ADDWFC xC3,W
02ABA:  MOVWF  03
02ABC:  MOVF   01,W
02ABE:  ADDLW  1E
02AC0:  MOVWF  01
02AC2:  MOVLW  00
02AC4:  ADDWFC 03,F
02AC6:  MOVFF  01,6CA
02ACA:  MOVFF  03,6CB
02ACE:  MOVFF  6C1,6CD
02AD2:  MOVFF  6C0,6CC
02AD6:  MOVFF  03,6CF
02ADA:  MOVFF  01,6CE
02ADE:  MOVLW  08
02AE0:  MOVWF  xD0
02AE2:  MOVLB  0
02AE4:  RCALL  250E
....................    ((struct shutter)output->device).state=idle; 
02AE6:  MOVLW  01
02AE8:  MOVLB  6
02AEA:  ADDWF  xC2,W
02AEC:  MOVWF  01
02AEE:  MOVLW  00
02AF0:  ADDWFC xC3,W
02AF2:  MOVWF  03
02AF4:  MOVF   01,W
02AF6:  ADDLW  2D
02AF8:  MOVWF  FE9
02AFA:  MOVLW  00
02AFC:  ADDWFC 03,W
02AFE:  MOVWF  FEA
02B00:  MOVLW  04
02B02:  MOVWF  FEF
.................... } 
02B04:  MOVLB  0
02B06:  GOTO   3374 (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
0254E:  MOVLB  6
02550:  MOVFF  6C0,FE9
02554:  MOVFF  6C1,FEA
02558:  MOVLW  03
0255A:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
0255C:  MOVLW  01
0255E:  ADDWF  xC0,W
02560:  MOVWF  01
02562:  MOVLW  00
02564:  ADDWFC xC1,W
02566:  MOVWF  03
02568:  MOVF   01,W
0256A:  ADDLW  05
0256C:  MOVWF  FE9
0256E:  MOVLW  00
02570:  ADDWFC 03,W
02572:  MOVWF  FEA
02574:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02576:  MOVLW  01
02578:  ADDWF  xC0,W
0257A:  MOVWF  01
0257C:  MOVLW  00
0257E:  ADDWFC xC1,W
02580:  MOVWF  03
02582:  MOVF   01,W
02584:  ADDLW  08
02586:  MOVWF  FE9
02588:  MOVLW  00
0258A:  ADDWFC 03,W
0258C:  MOVWF  FEA
0258E:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
02590:  MOVLW  01
02592:  ADDWF  xC0,W
02594:  MOVWF  01
02596:  MOVLW  00
02598:  ADDWFC xC1,W
0259A:  MOVWF  03
0259C:  MOVF   01,W
0259E:  ADDLW  04
025A0:  MOVWF  FE9
025A2:  MOVLW  00
025A4:  ADDWFC 03,W
025A6:  MOVWF  FEA
025A8:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
025AA:  MOVLW  01
025AC:  ADDWF  xC0,W
025AE:  MOVWF  01
025B0:  MOVLW  00
025B2:  ADDWFC xC1,W
025B4:  MOVWF  03
025B6:  MOVF   01,W
025B8:  ADDLW  07
025BA:  MOVWF  FE9
025BC:  MOVLW  00
025BE:  ADDWFC 03,W
025C0:  MOVWF  FEA
025C2:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
025C4:  MOVLW  01
025C6:  ADDWF  xC0,W
025C8:  MOVWF  01
025CA:  MOVLW  00
025CC:  ADDWFC xC1,W
025CE:  MOVWF  03
025D0:  MOVF   01,W
025D2:  ADDLW  12
025D4:  MOVWF  FE9
025D6:  MOVLW  00
025D8:  ADDWFC 03,W
025DA:  MOVWF  FEA
025DC:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
025DE:  MOVLW  01
025E0:  ADDWF  xC0,W
025E2:  MOVWF  01
025E4:  MOVLW  00
025E6:  ADDWFC xC1,W
025E8:  MOVWF  03
025EA:  MOVF   01,W
025EC:  ADDLW  1C
025EE:  MOVWF  FE9
025F0:  MOVLW  00
025F2:  ADDWFC 03,W
025F4:  MOVWF  FEA
025F6:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
025F8:  MOVLW  01
025FA:  ADDWF  xC0,W
025FC:  MOVWF  01
025FE:  MOVLW  00
02600:  ADDWFC xC1,W
02602:  MOVWF  03
02604:  MOVF   01,W
02606:  ADDLW  11
02608:  MOVWF  FE9
0260A:  MOVLW  00
0260C:  ADDWFC 03,W
0260E:  MOVWF  FEA
02610:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
02612:  MOVLW  01
02614:  ADDWF  xC0,W
02616:  MOVWF  01
02618:  MOVLW  00
0261A:  ADDWFC xC1,W
0261C:  MOVWF  03
0261E:  MOVF   01,W
02620:  ADDLW  1B
02622:  MOVWF  FE9
02624:  MOVLW  00
02626:  ADDWFC 03,W
02628:  MOVWF  FEA
0262A:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
0262C:  MOVLW  01
0262E:  ADDWF  xC0,W
02630:  MOVWF  01
02632:  MOVLW  00
02634:  ADDWFC xC1,W
02636:  MOVWF  03
02638:  MOVF   01,W
0263A:  ADDLW  1D
0263C:  MOVWF  FE9
0263E:  MOVLW  00
02640:  ADDWFC 03,W
02642:  MOVWF  FEA
02644:  CLRF   FEC
02646:  MOVF   FED,F
02648:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
0264A:  MOVLW  01
0264C:  ADDWF  xC0,W
0264E:  MOVWF  01
02650:  MOVLW  00
02652:  ADDWFC xC1,W
02654:  MOVFF  01,FE9
02658:  MOVWF  FEA
0265A:  MOVFF  6C2,FEF
....................    ((struct timer)input->device).active=false; 
0265E:  MOVLW  01
02660:  ADDWF  xC0,W
02662:  MOVWF  01
02664:  MOVLW  00
02666:  ADDWFC xC1,W
02668:  MOVWF  03
0266A:  MOVF   01,W
0266C:  ADDLW  1F
0266E:  MOVWF  FE9
02670:  MOVLW  00
02672:  ADDWFC 03,W
02674:  MOVWF  FEA
02676:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02678:  MOVLW  01
0267A:  ADDWF  xC0,W
0267C:  MOVWF  01
0267E:  MOVLW  00
02680:  ADDWFC xC1,W
02682:  MOVWF  03
02684:  MOVF   01,W
02686:  ADDLW  01
02688:  MOVWF  FE9
0268A:  MOVLW  00
0268C:  ADDWFC 03,W
0268E:  MOVWF  FEA
02690:  MOVFF  6C4,FEC
02694:  MOVF   FED,F
02696:  MOVFF  6C3,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
0269A:  MOVLW  01
0269C:  ADDWF  xC0,W
0269E:  MOVWF  01
026A0:  MOVLW  00
026A2:  ADDWFC xC1,W
026A4:  MOVWF  03
026A6:  MOVF   01,W
026A8:  ADDLW  03
026AA:  MOVWF  FE9
026AC:  MOVLW  00
026AE:  ADDWFC 03,W
026B0:  MOVWF  FEA
026B2:  MOVFF  6BE,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
026B6:  MOVLW  01
026B8:  ADDWF  xC0,W
026BA:  MOVWF  01
026BC:  MOVLW  00
026BE:  ADDWFC xC1,W
026C0:  MOVWF  03
026C2:  MOVF   01,W
026C4:  ADDLW  06
026C6:  MOVWF  FE9
026C8:  MOVLW  00
026CA:  ADDWFC 03,W
026CC:  MOVWF  FEA
026CE:  MOVFF  6BF,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
026D2:  MOVLW  01
026D4:  ADDWF  xC0,W
026D6:  MOVWF  01
026D8:  MOVLW  00
026DA:  ADDWFC xC1,W
026DC:  MOVWF  03
026DE:  MOVF   01,W
026E0:  ADDLW  09
026E2:  MOVWF  01
026E4:  MOVLW  00
026E6:  ADDWFC 03,F
026E8:  MOVFF  01,6C7
026EC:  MOVFF  03,6C8
026F0:  MOVFF  6BB,6CD
026F4:  MOVFF  6BA,6CC
026F8:  MOVFF  03,6CF
026FC:  MOVFF  01,6CE
02700:  MOVLW  08
02702:  MOVWF  xD0
02704:  MOVLB  0
02706:  RCALL  250E
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
02708:  MOVLW  01
0270A:  MOVLB  6
0270C:  ADDWF  xC0,W
0270E:  MOVWF  01
02710:  MOVLW  00
02712:  ADDWFC xC1,W
02714:  MOVWF  03
02716:  MOVF   01,W
02718:  ADDLW  13
0271A:  MOVWF  01
0271C:  MOVLW  00
0271E:  ADDWFC 03,F
02720:  MOVFF  01,6C7
02724:  MOVFF  03,6C8
02728:  MOVFF  6BD,6CD
0272C:  MOVFF  6BC,6CC
02730:  MOVFF  03,6CF
02734:  MOVFF  01,6CE
02738:  MOVLW  08
0273A:  MOVWF  xD0
0273C:  MOVLB  0
0273E:  RCALL  250E
.................... } 
02740:  GOTO   3118 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... int used_dimmers=0; 
.................... #use fast_io(C) 
.................... #use fast_io(D) 
....................  
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00F64:  BCF    FD8.0
00F66:  RLCF   xD7,W
00F68:  MOVWF  00
00F6A:  BCF    FD8.0
00F6C:  RLCF   00,F
00F6E:  MOVF   00,W
00F70:  MOVLB  5
00F72:  ADDWF  x7B,W
00F74:  MOVLB  6
00F76:  MOVWF  xDB
00F78:  MOVLW  00
00F7A:  MOVLB  5
00F7C:  ADDWFC x7C,W
00F7E:  MOVLB  6
00F80:  MOVWF  xDC
00F82:  BCF    FD8.0
00F84:  RLCF   xD8,W
00F86:  ADDWF  xDB,W
00F88:  MOVWF  xD9
00F8A:  MOVLW  00
00F8C:  ADDWFC xDC,W
00F8E:  MOVWF  xDA
*
00FFC:  BCF    FD8.0
00FFE:  RLCF   xD7,W
01000:  MOVWF  00
01002:  BCF    FD8.0
01004:  RLCF   00,F
01006:  MOVF   00,W
01008:  MOVLB  5
0100A:  ADDWF  x7B,W
0100C:  MOVLB  6
0100E:  MOVWF  xDB
01010:  MOVLW  00
01012:  MOVLB  5
01014:  ADDWFC x7C,W
01016:  MOVLB  6
01018:  MOVWF  xDC
0101A:  BCF    FD8.0
0101C:  RLCF   xD8,W
0101E:  ADDWF  xDB,W
01020:  MOVWF  xD9
01022:  MOVLW  00
01024:  ADDWFC xDC,W
01026:  MOVWF  xDA
*
0108C:  BCF    FD8.0
0108E:  RLCF   xD7,W
01090:  MOVWF  00
01092:  BCF    FD8.0
01094:  RLCF   00,F
01096:  MOVF   00,W
01098:  MOVLB  5
0109A:  ADDWF  x7B,W
0109C:  MOVLB  6
0109E:  MOVWF  xDB
010A0:  MOVLW  00
010A2:  MOVLB  5
010A4:  ADDWFC x7C,W
010A6:  MOVLB  6
010A8:  MOVWF  xDC
010AA:  BCF    FD8.0
010AC:  RLCF   xD8,W
010AE:  ADDWF  xDB,W
010B0:  MOVWF  xD9
010B2:  MOVLW  00
010B4:  ADDWFC xDC,W
010B6:  MOVWF  xDA
*
01114:  BCF    FD8.0
01116:  RLCF   xD7,W
01118:  MOVWF  00
0111A:  BCF    FD8.0
0111C:  RLCF   00,F
0111E:  MOVF   00,W
01120:  MOVLB  5
01122:  ADDWF  x7B,W
01124:  MOVLB  6
01126:  MOVWF  xDB
01128:  MOVLW  00
0112A:  MOVLB  5
0112C:  ADDWFC x7C,W
0112E:  MOVLB  6
01130:  MOVWF  xDC
01132:  BCF    FD8.0
01134:  RLCF   xD8,W
01136:  ADDWF  xDB,W
01138:  MOVWF  xD9
0113A:  MOVLW  00
0113C:  ADDWFC xDC,W
0113E:  MOVWF  xDA
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
00F90:  BCF    FD8.0
00F92:  RLCF   xD7,W
00F94:  MOVWF  00
00F96:  BCF    FD8.0
00F98:  RLCF   00,F
00F9A:  MOVF   00,W
00F9C:  MOVLB  5
00F9E:  ADDWF  x7B,W
00FA0:  MOVLB  6
00FA2:  MOVWF  xDB
00FA4:  MOVLW  00
00FA6:  MOVLB  5
00FA8:  ADDWFC x7C,W
00FAA:  MOVLB  6
00FAC:  MOVWF  xDC
00FAE:  BCF    FD8.0
00FB0:  RLCF   xD8,W
00FB2:  ADDWF  xDB,W
00FB4:  MOVWF  01
00FB6:  MOVLW  00
00FB8:  ADDWFC xDC,W
00FBA:  MOVWF  03
00FBC:  MOVFF  01,FE9
00FC0:  MOVWF  FEA
00FC2:  MOVFF  FEF,01
00FC6:  INCF   FE9,F
00FC8:  MOVF   FEF,W
00FCA:  DECF   FE9,F
00FCC:  MOVWF  02
*
01028:  BCF    FD8.0
0102A:  RLCF   xD7,W
0102C:  MOVWF  00
0102E:  BCF    FD8.0
01030:  RLCF   00,F
01032:  MOVF   00,W
01034:  MOVLB  5
01036:  ADDWF  x7B,W
01038:  MOVLB  6
0103A:  MOVWF  xDB
0103C:  MOVLW  00
0103E:  MOVLB  5
01040:  ADDWFC x7C,W
01042:  MOVLB  6
01044:  MOVWF  xDC
01046:  BCF    FD8.0
01048:  RLCF   xD8,W
0104A:  ADDWF  xDB,W
0104C:  MOVWF  01
0104E:  MOVLW  00
01050:  ADDWFC xDC,W
01052:  MOVWF  03
01054:  MOVFF  01,FE9
01058:  MOVWF  FEA
0105A:  MOVFF  FEF,01
0105E:  INCF   FE9,F
01060:  MOVF   FEF,W
01062:  DECF   FE9,F
01064:  MOVWF  02
*
010B8:  BCF    FD8.0
010BA:  RLCF   xD7,W
010BC:  MOVWF  00
010BE:  BCF    FD8.0
010C0:  RLCF   00,F
010C2:  MOVF   00,W
010C4:  MOVLB  5
010C6:  ADDWF  x7B,W
010C8:  MOVLB  6
010CA:  MOVWF  xDB
010CC:  MOVLW  00
010CE:  MOVLB  5
010D0:  ADDWFC x7C,W
010D2:  MOVLB  6
010D4:  MOVWF  xDC
010D6:  BCF    FD8.0
010D8:  RLCF   xD8,W
010DA:  ADDWF  xDB,W
010DC:  MOVWF  01
010DE:  MOVLW  00
010E0:  ADDWFC xDC,W
010E2:  MOVWF  03
010E4:  MOVFF  01,FE9
010E8:  MOVWF  FEA
010EA:  MOVFF  FEF,01
010EE:  INCF   FE9,F
010F0:  MOVF   FEF,W
010F2:  DECF   FE9,F
010F4:  MOVWF  02
*
01140:  BCF    FD8.0
01142:  RLCF   xD7,W
01144:  MOVWF  00
01146:  BCF    FD8.0
01148:  RLCF   00,F
0114A:  MOVF   00,W
0114C:  MOVLB  5
0114E:  ADDWF  x7B,W
01150:  MOVLB  6
01152:  MOVWF  xDB
01154:  MOVLW  00
01156:  MOVLB  5
01158:  ADDWFC x7C,W
0115A:  MOVLB  6
0115C:  MOVWF  xDC
0115E:  BCF    FD8.0
01160:  RLCF   xD8,W
01162:  ADDWF  xDB,W
01164:  MOVWF  01
01166:  MOVLW  00
01168:  ADDWFC xDC,W
0116A:  MOVWF  03
0116C:  MOVFF  01,FE9
01170:  MOVWF  FEA
01172:  MOVFF  FEF,01
01176:  INCF   FE9,F
01178:  MOVF   FEF,W
0117A:  DECF   FE9,F
0117C:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
03458:  MOVLB  6
0345A:  CLRF   xA0
0345C:  BSF    xA1.0
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
0345E:  CLRF   xA2
03460:  MOVLB  5
03462:  MOVF   x7A,W
03464:  MOVLB  6
03466:  SUBWF  xA2,W
03468:  BC    34F8
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
0346A:  MOVF   xA2,W
0346C:  MULLW  04
0346E:  MOVF   FF3,W
03470:  CLRF   xA7
03472:  MOVWF  xA6
03474:  MOVLW  60
03476:  ADDWF  xA6,W
03478:  MOVWF  01
0347A:  MOVLW  06
0347C:  ADDWFC xA7,W
0347E:  MOVWF  03
03480:  MOVWF  xA7
03482:  CLRF   03
03484:  MOVF   xA2,W
03486:  ADDLW  81
03488:  MOVWF  FE9
0348A:  MOVLW  05
0348C:  ADDWFC 03,W
0348E:  MOVWF  FEA
03490:  MOVF   FEF,W
03492:  CLRF   03
03494:  MOVFF  6A7,FEA
03498:  MOVFF  01,FE9
0349C:  MOVFF  03,FEC
034A0:  MOVF   FED,F
034A2:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
034A4:  MOVF   xA2,W
034A6:  MULLW  04
034A8:  MOVF   FF3,W
034AA:  CLRF   xA7
034AC:  MOVWF  xA6
034AE:  MOVLW  02
034B0:  ADDWF  xA6,W
034B2:  MOVWF  01
034B4:  MOVLW  00
034B6:  ADDWFC xA7,W
034B8:  MOVWF  03
034BA:  MOVF   01,W
034BC:  ADDLW  60
034BE:  MOVWF  01
034C0:  MOVLW  06
034C2:  ADDWFC 03,F
034C4:  MOVFF  03,6A7
034C8:  BCF    FD8.0
034CA:  RLCF   xA2,W
034CC:  CLRF   03
034CE:  ADDLW  19
034D0:  MOVWF  FE9
034D2:  MOVLW  06
034D4:  ADDWFC 03,W
034D6:  MOVWF  FEA
034D8:  MOVFF  FEC,03
034DC:  MOVF   FED,F
034DE:  MOVFF  FEF,6A8
034E2:  MOVFF  6A7,FEA
034E6:  MOVFF  01,FE9
034EA:  MOVFF  03,FEC
034EE:  MOVF   FED,F
034F0:  MOVFF  6A8,FEF
....................      } 
034F4:  INCF   xA2,F
034F6:  BRA    3460
....................  
....................      WHILE(again) 
....................      { 
034F8:  BTFSS  xA1.0
034FA:  BRA    36C2
....................         again = 0; 
034FC:  BCF    xA1.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
034FE:  CLRF   xA2
03500:  MOVLW  01
03502:  MOVLB  5
03504:  SUBWF  x7A,W
03506:  MOVLB  6
03508:  SUBWF  xA2,W
0350A:  BTFSC  FD8.0
0350C:  BRA    36C0
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
0350E:  MOVF   xA2,W
03510:  MULLW  04
03512:  MOVF   FF3,W
03514:  CLRF   xA7
03516:  MOVWF  xA6
03518:  MOVLW  60
0351A:  ADDWF  xA6,W
0351C:  MOVWF  FE9
0351E:  MOVLW  06
03520:  ADDWFC xA7,W
03522:  MOVWF  FEA
03524:  MOVFF  FEC,6A7
03528:  MOVF   FED,F
0352A:  MOVFF  FEF,6A6
0352E:  MOVLW  01
03530:  ADDWF  xA2,W
03532:  MULLW  04
03534:  MOVF   FF3,W
03536:  CLRF   xA9
03538:  MOVWF  xA8
0353A:  MOVLW  60
0353C:  ADDWF  xA8,W
0353E:  MOVWF  FE9
03540:  MOVLW  06
03542:  ADDWFC xA9,W
03544:  MOVWF  FEA
03546:  MOVFF  FEC,03
0354A:  MOVF   FED,F
0354C:  MOVFF  FEF,01
03550:  MOVF   xA7,W
03552:  SUBWF  03,W
03554:  BTFSS  FD8.0
03556:  BRA    36BC
03558:  BNZ   3562
0355A:  MOVF   01,W
0355C:  SUBWF  xA6,W
0355E:  BTFSC  FD8.0
03560:  BRA    36BC
....................            { 
....................               again = 1; 
03562:  BSF    xA1.0
....................               fl = tempd[fa][0]; 
03564:  MOVF   xA2,W
03566:  MULLW  04
03568:  MOVF   FF3,W
0356A:  CLRF   xA7
0356C:  MOVWF  xA6
0356E:  MOVLW  60
03570:  ADDWF  xA6,W
03572:  MOVWF  FE9
03574:  MOVLW  06
03576:  ADDWFC xA7,W
03578:  MOVWF  FEA
0357A:  MOVFF  FEC,03
0357E:  MOVF   FED,F
03580:  MOVFF  FEF,6A3
03584:  MOVFF  03,6A4
....................               tempd[fa][0] = tempd[fa + 1][0]; 
03588:  MOVF   xA2,W
0358A:  MULLW  04
0358C:  MOVF   FF3,W
0358E:  CLRF   xA7
03590:  MOVWF  xA6
03592:  MOVLW  60
03594:  ADDWF  xA6,W
03596:  MOVWF  01
03598:  MOVLW  06
0359A:  ADDWFC xA7,W
0359C:  MOVWF  03
0359E:  MOVWF  xA7
035A0:  MOVLW  01
035A2:  ADDWF  xA2,W
035A4:  MULLW  04
035A6:  MOVF   FF3,W
035A8:  CLRF   xA9
035AA:  MOVWF  xA8
035AC:  MOVLW  60
035AE:  ADDWF  xA8,W
035B0:  MOVWF  FE9
035B2:  MOVLW  06
035B4:  ADDWFC xA9,W
035B6:  MOVWF  FEA
035B8:  MOVFF  FEC,03
035BC:  MOVF   FED,F
035BE:  MOVFF  FEF,6A8
035C2:  MOVFF  6A7,FEA
035C6:  MOVFF  01,FE9
035CA:  MOVFF  03,FEC
035CE:  MOVF   FED,F
035D0:  MOVFF  6A8,FEF
....................               tempd[fa + 1][0] = fl; 
035D4:  MOVLW  01
035D6:  ADDWF  xA2,W
035D8:  MULLW  04
035DA:  MOVF   FF3,W
035DC:  CLRF   xA7
035DE:  MOVWF  xA6
035E0:  MOVLW  60
035E2:  ADDWF  xA6,W
035E4:  MOVWF  FE9
035E6:  MOVLW  06
035E8:  ADDWFC xA7,W
035EA:  MOVWF  FEA
035EC:  MOVFF  6A4,FEC
035F0:  MOVF   FED,F
035F2:  MOVFF  6A3,FEF
....................               fl = tempd[fa][1]; 
035F6:  MOVF   xA2,W
035F8:  MULLW  04
035FA:  MOVF   FF3,W
035FC:  CLRF   xA7
035FE:  MOVWF  xA6
03600:  MOVLW  02
03602:  ADDWF  xA6,W
03604:  MOVWF  01
03606:  MOVLW  00
03608:  ADDWFC xA7,W
0360A:  MOVWF  03
0360C:  MOVF   01,W
0360E:  ADDLW  60
03610:  MOVWF  FE9
03612:  MOVLW  06
03614:  ADDWFC 03,W
03616:  MOVWF  FEA
03618:  MOVFF  FEC,03
0361C:  MOVF   FED,F
0361E:  MOVFF  FEF,6A3
03622:  MOVFF  03,6A4
....................               tempd[fa][1] = tempd[fa + 1][1]; 
03626:  MOVF   xA2,W
03628:  MULLW  04
0362A:  MOVF   FF3,W
0362C:  CLRF   xA7
0362E:  MOVWF  xA6
03630:  MOVLW  02
03632:  ADDWF  xA6,W
03634:  MOVWF  01
03636:  MOVLW  00
03638:  ADDWFC xA7,W
0363A:  MOVWF  03
0363C:  MOVF   01,W
0363E:  ADDLW  60
03640:  MOVWF  01
03642:  MOVLW  06
03644:  ADDWFC 03,F
03646:  MOVFF  01,6A6
0364A:  MOVFF  03,6A7
0364E:  MOVLW  01
03650:  ADDWF  xA2,W
03652:  MULLW  04
03654:  MOVF   FF3,W
03656:  CLRF   xA9
03658:  MOVWF  xA8
0365A:  MOVLW  02
0365C:  ADDWF  xA8,W
0365E:  MOVWF  01
03660:  MOVLW  00
03662:  ADDWFC xA9,W
03664:  MOVWF  03
03666:  MOVF   01,W
03668:  ADDLW  60
0366A:  MOVWF  FE9
0366C:  MOVLW  06
0366E:  ADDWFC 03,W
03670:  MOVWF  FEA
03672:  MOVFF  FEC,03
03676:  MOVF   FED,F
03678:  MOVFF  FEF,6A8
0367C:  MOVFF  6A7,FEA
03680:  MOVFF  6A6,FE9
03684:  MOVFF  03,FEC
03688:  MOVF   FED,F
0368A:  MOVFF  6A8,FEF
....................               tempd[fa + 1][1] = fl; 
0368E:  MOVLW  01
03690:  ADDWF  xA2,W
03692:  MULLW  04
03694:  MOVF   FF3,W
03696:  CLRF   xA7
03698:  MOVWF  xA6
0369A:  MOVLW  02
0369C:  ADDWF  xA6,W
0369E:  MOVWF  01
036A0:  MOVLW  00
036A2:  ADDWFC xA7,W
036A4:  MOVWF  03
036A6:  MOVF   01,W
036A8:  ADDLW  60
036AA:  MOVWF  FE9
036AC:  MOVLW  06
036AE:  ADDWFC 03,W
036B0:  MOVWF  FEA
036B2:  MOVFF  6A4,FEC
036B6:  MOVF   FED,F
036B8:  MOVFF  6A3,FEF
....................            } 
....................         } 
036BC:  INCF   xA2,F
036BE:  BRA    3500
....................      } 
036C0:  BRA    34F8
....................      /* for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0)numluzes = 0;//luzes todas off 
036C2:  MOVF   x60,F
036C4:  BNZ   36CE
036C6:  MOVF   x61,F
036C8:  BNZ   36CE
036CA:  CLRF   xA0
....................      ELSE 
036CC:  BRA    3A6E
....................      { 
....................         numluzes = 1; 
036CE:  MOVLW  01
036D0:  MOVWF  xA0
....................         afa = 0; 
036D2:  CLRF   xA5
....................         IF(actmat) 
036D4:  MOVLB  0
036D6:  BTFSS  xB5.3
036D8:  BRA    36EC
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
036DA:  MOVFF  661,592
036DE:  MOVFF  660,591
....................            delays1[0][1] = tempd[0][1]; 
036E2:  MOVFF  663,594
036E6:  MOVFF  662,593
....................         } 
....................  
....................         ELSE 
036EA:  BRA    36FC
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
036EC:  MOVFF  661,5D6
036F0:  MOVFF  660,5D5
....................            delays2[0][1] = tempd[0][1]; 
036F4:  MOVFF  663,5D8
036F8:  MOVFF  662,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
036FC:  MOVLW  01
036FE:  MOVLB  6
03700:  MOVWF  xA2
03702:  MOVLB  5
03704:  MOVF   x7A,W
03706:  MOVLB  6
03708:  SUBWF  xA2,W
0370A:  BTFSC  FD8.0
0370C:  BRA    3A6E
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
0370E:  MOVF   xA2,W
03710:  MULLW  04
03712:  MOVF   FF3,W
03714:  CLRF   xA7
03716:  MOVWF  xA6
03718:  MOVLW  60
0371A:  ADDWF  xA6,W
0371C:  MOVWF  FE9
0371E:  MOVLW  06
03720:  ADDWFC xA7,W
03722:  MOVWF  FEA
03724:  MOVFF  FEC,6A7
03728:  MOVF   FED,F
0372A:  MOVFF  FEF,6A6
0372E:  MOVLW  01
03730:  SUBWF  xA2,W
03732:  MULLW  04
03734:  MOVF   FF3,W
03736:  CLRF   xA9
03738:  MOVWF  xA8
0373A:  MOVLW  60
0373C:  ADDWF  xA8,W
0373E:  MOVWF  FE9
03740:  MOVLW  06
03742:  ADDWFC xA9,W
03744:  MOVWF  FEA
03746:  MOVFF  FEC,03
0374A:  MOVF   FED,F
0374C:  MOVF   FEF,W
0374E:  SUBWF  xA6,W
03750:  BNZ   3758
03752:  MOVF   03,W
03754:  SUBWF  xA7,W
03756:  BZ    375C
03758:  MOVLW  00
0375A:  BRA    375E
0375C:  MOVLW  01
0375E:  MOVWF  xA6
03760:  MOVF   xA2,W
03762:  MULLW  04
03764:  MOVF   FF3,W
03766:  CLRF   xA8
03768:  MOVWF  xA7
0376A:  MOVLW  60
0376C:  ADDWF  xA7,W
0376E:  MOVWF  FE9
03770:  MOVLW  06
03772:  ADDWFC xA8,W
03774:  MOVWF  FEA
03776:  MOVF   FEF,F
03778:  BNZ   377E
0377A:  MOVF   FEC,F
0377C:  BZ    3782
0377E:  MOVLW  00
03780:  BRA    3784
03782:  MOVLW  01
03784:  XORLW  00
03786:  BZ    378C
03788:  MOVLW  00
0378A:  BRA    378E
0378C:  MOVLW  01
0378E:  ANDWF  xA6,W
03790:  BTFSC  FD8.2
03792:  BRA    38CE
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
03794:  MOVLB  0
03796:  BTFSS  xB5.3
03798:  BRA    3834
0379A:  MOVLB  6
0379C:  MOVF   xA5,W
0379E:  MULLW  04
037A0:  MOVF   FF3,W
037A2:  CLRF   xA7
037A4:  MOVWF  xA6
037A6:  MOVLW  02
037A8:  ADDWF  xA6,W
037AA:  MOVWF  01
037AC:  MOVLW  00
037AE:  ADDWFC xA7,W
037B0:  MOVWF  03
037B2:  MOVF   01,W
037B4:  ADDLW  91
037B6:  MOVWF  01
037B8:  MOVLW  05
037BA:  ADDWFC 03,F
037BC:  MOVFF  01,6A6
037C0:  MOVFF  03,6A7
037C4:  MOVF   xA5,W
037C6:  MULLW  04
037C8:  MOVF   FF3,W
037CA:  CLRF   xA9
037CC:  MOVWF  xA8
037CE:  MOVLW  02
037D0:  ADDWF  xA8,W
037D2:  MOVWF  01
037D4:  MOVLW  00
037D6:  ADDWFC xA9,W
037D8:  MOVWF  03
037DA:  MOVF   01,W
037DC:  ADDLW  91
037DE:  MOVWF  FE9
037E0:  MOVLW  05
037E2:  ADDWFC 03,W
037E4:  MOVWF  FEA
037E6:  MOVFF  FEC,6A9
037EA:  MOVF   FED,F
037EC:  MOVFF  FEF,6A8
037F0:  MOVF   xA2,W
037F2:  MULLW  04
037F4:  MOVF   FF3,W
037F6:  CLRF   xAB
037F8:  MOVWF  xAA
037FA:  MOVLW  02
037FC:  ADDWF  xAA,W
037FE:  MOVWF  01
03800:  MOVLW  00
03802:  ADDWFC xAB,W
03804:  MOVWF  03
03806:  MOVF   01,W
03808:  ADDLW  60
0380A:  MOVWF  FE9
0380C:  MOVLW  06
0380E:  ADDWFC 03,W
03810:  MOVWF  FEA
03812:  MOVFF  FEC,03
03816:  MOVF   FED,F
03818:  MOVF   FEF,W
0381A:  ANDWF  xA8,W
0381C:  MOVWF  00
0381E:  MOVF   03,W
03820:  ANDWF  xA9,W
03822:  MOVFF  6A7,FEA
03826:  MOVFF  6A6,FE9
0382A:  MOVWF  FEC
0382C:  MOVF   FED,F
0382E:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
03832:  BRA    38CC
03834:  MOVLB  6
03836:  MOVF   xA5,W
03838:  MULLW  04
0383A:  MOVF   FF3,W
0383C:  CLRF   xA7
0383E:  MOVWF  xA6
03840:  MOVLW  02
03842:  ADDWF  xA6,W
03844:  MOVWF  01
03846:  MOVLW  00
03848:  ADDWFC xA7,W
0384A:  MOVWF  03
0384C:  MOVF   01,W
0384E:  ADDLW  D5
03850:  MOVWF  01
03852:  MOVLW  05
03854:  ADDWFC 03,F
03856:  MOVFF  01,6A6
0385A:  MOVFF  03,6A7
0385E:  MOVF   xA5,W
03860:  MULLW  04
03862:  MOVF   FF3,W
03864:  CLRF   xA9
03866:  MOVWF  xA8
03868:  MOVLW  02
0386A:  ADDWF  xA8,W
0386C:  MOVWF  01
0386E:  MOVLW  00
03870:  ADDWFC xA9,W
03872:  MOVWF  03
03874:  MOVF   01,W
03876:  ADDLW  D5
03878:  MOVWF  FE9
0387A:  MOVLW  05
0387C:  ADDWFC 03,W
0387E:  MOVWF  FEA
03880:  MOVFF  FEC,6A9
03884:  MOVF   FED,F
03886:  MOVFF  FEF,6A8
0388A:  MOVF   xA2,W
0388C:  MULLW  04
0388E:  MOVF   FF3,W
03890:  CLRF   xAB
03892:  MOVWF  xAA
03894:  MOVLW  02
03896:  ADDWF  xAA,W
03898:  MOVWF  01
0389A:  MOVLW  00
0389C:  ADDWFC xAB,W
0389E:  MOVWF  03
038A0:  MOVF   01,W
038A2:  ADDLW  60
038A4:  MOVWF  FE9
038A6:  MOVLW  06
038A8:  ADDWFC 03,W
038AA:  MOVWF  FEA
038AC:  MOVFF  FEC,03
038B0:  MOVF   FED,F
038B2:  MOVF   FEF,W
038B4:  ANDWF  xA8,W
038B6:  MOVWF  00
038B8:  MOVF   03,W
038BA:  ANDWF  xA9,W
038BC:  MOVFF  6A7,FEA
038C0:  MOVFF  6A6,FE9
038C4:  MOVWF  FEC
038C6:  MOVF   FED,F
038C8:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
038CC:  BRA    3A6A
038CE:  MOVF   xA2,W
038D0:  MULLW  04
038D2:  MOVF   FF3,W
038D4:  CLRF   xA7
038D6:  MOVWF  xA6
038D8:  MOVLW  60
038DA:  ADDWF  xA6,W
038DC:  MOVWF  FE9
038DE:  MOVLW  06
038E0:  ADDWFC xA7,W
038E2:  MOVWF  FEA
038E4:  MOVF   FEF,F
038E6:  BNZ   38EC
038E8:  MOVF   FEC,F
038EA:  BZ    38F0
038EC:  MOVLW  00
038EE:  BRA    38F2
038F0:  MOVLW  01
038F2:  XORLW  00
038F4:  BTFSS  FD8.2
038F6:  BRA    3A6A
....................            { 
....................               ++afa; 
038F8:  INCF   xA5,F
....................               IF(actmat) 
038FA:  MOVLB  0
038FC:  BTFSS  xB5.3
038FE:  BRA    39B6
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
03900:  MOVLB  6
03902:  MOVF   xA5,W
03904:  MULLW  04
03906:  MOVF   FF3,W
03908:  CLRF   xA7
0390A:  MOVWF  xA6
0390C:  MOVLW  91
0390E:  ADDWF  xA6,W
03910:  MOVWF  01
03912:  MOVLW  05
03914:  ADDWFC xA7,W
03916:  MOVWF  03
03918:  MOVWF  xA7
0391A:  MOVF   xA2,W
0391C:  MULLW  04
0391E:  MOVF   FF3,W
03920:  CLRF   xA9
03922:  MOVWF  xA8
03924:  MOVLW  60
03926:  ADDWF  xA8,W
03928:  MOVWF  FE9
0392A:  MOVLW  06
0392C:  ADDWFC xA9,W
0392E:  MOVWF  FEA
03930:  MOVFF  FEC,03
03934:  MOVF   FED,F
03936:  MOVFF  FEF,6A8
0393A:  MOVFF  6A7,FEA
0393E:  MOVFF  01,FE9
03942:  MOVFF  03,FEC
03946:  MOVF   FED,F
03948:  MOVFF  6A8,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
0394C:  MOVF   xA5,W
0394E:  MULLW  04
03950:  MOVF   FF3,W
03952:  CLRF   xA7
03954:  MOVWF  xA6
03956:  MOVLW  02
03958:  ADDWF  xA6,W
0395A:  MOVWF  01
0395C:  MOVLW  00
0395E:  ADDWFC xA7,W
03960:  MOVWF  03
03962:  MOVF   01,W
03964:  ADDLW  91
03966:  MOVWF  01
03968:  MOVLW  05
0396A:  ADDWFC 03,F
0396C:  MOVFF  01,6A6
03970:  MOVFF  03,6A7
03974:  MOVF   xA2,W
03976:  MULLW  04
03978:  MOVF   FF3,W
0397A:  CLRF   xA9
0397C:  MOVWF  xA8
0397E:  MOVLW  02
03980:  ADDWF  xA8,W
03982:  MOVWF  01
03984:  MOVLW  00
03986:  ADDWFC xA9,W
03988:  MOVWF  03
0398A:  MOVF   01,W
0398C:  ADDLW  60
0398E:  MOVWF  FE9
03990:  MOVLW  06
03992:  ADDWFC 03,W
03994:  MOVWF  FEA
03996:  MOVFF  FEC,03
0399A:  MOVF   FED,F
0399C:  MOVFF  FEF,6A8
039A0:  MOVFF  6A7,FEA
039A4:  MOVFF  6A6,FE9
039A8:  MOVFF  03,FEC
039AC:  MOVF   FED,F
039AE:  MOVFF  6A8,FEF
....................               } 
....................  
....................               ELSE 
039B2:  BRA    3A68
039B4:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
039B6:  MOVLB  6
039B8:  MOVF   xA5,W
039BA:  MULLW  04
039BC:  MOVF   FF3,W
039BE:  CLRF   xA7
039C0:  MOVWF  xA6
039C2:  MOVLW  D5
039C4:  ADDWF  xA6,W
039C6:  MOVWF  01
039C8:  MOVLW  05
039CA:  ADDWFC xA7,W
039CC:  MOVWF  03
039CE:  MOVWF  xA7
039D0:  MOVF   xA2,W
039D2:  MULLW  04
039D4:  MOVF   FF3,W
039D6:  CLRF   xA9
039D8:  MOVWF  xA8
039DA:  MOVLW  60
039DC:  ADDWF  xA8,W
039DE:  MOVWF  FE9
039E0:  MOVLW  06
039E2:  ADDWFC xA9,W
039E4:  MOVWF  FEA
039E6:  MOVFF  FEC,03
039EA:  MOVF   FED,F
039EC:  MOVFF  FEF,6A8
039F0:  MOVFF  6A7,FEA
039F4:  MOVFF  01,FE9
039F8:  MOVFF  03,FEC
039FC:  MOVF   FED,F
039FE:  MOVFF  6A8,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
03A02:  MOVF   xA5,W
03A04:  MULLW  04
03A06:  MOVF   FF3,W
03A08:  CLRF   xA7
03A0A:  MOVWF  xA6
03A0C:  MOVLW  02
03A0E:  ADDWF  xA6,W
03A10:  MOVWF  01
03A12:  MOVLW  00
03A14:  ADDWFC xA7,W
03A16:  MOVWF  03
03A18:  MOVF   01,W
03A1A:  ADDLW  D5
03A1C:  MOVWF  01
03A1E:  MOVLW  05
03A20:  ADDWFC 03,F
03A22:  MOVFF  01,6A6
03A26:  MOVFF  03,6A7
03A2A:  MOVF   xA2,W
03A2C:  MULLW  04
03A2E:  MOVF   FF3,W
03A30:  CLRF   xA9
03A32:  MOVWF  xA8
03A34:  MOVLW  02
03A36:  ADDWF  xA8,W
03A38:  MOVWF  01
03A3A:  MOVLW  00
03A3C:  ADDWFC xA9,W
03A3E:  MOVWF  03
03A40:  MOVF   01,W
03A42:  ADDLW  60
03A44:  MOVWF  FE9
03A46:  MOVLW  06
03A48:  ADDWFC 03,W
03A4A:  MOVWF  FEA
03A4C:  MOVFF  FEC,03
03A50:  MOVF   FED,F
03A52:  MOVFF  FEF,6A8
03A56:  MOVFF  6A7,FEA
03A5A:  MOVFF  6A6,FE9
03A5E:  MOVFF  03,FEC
03A62:  MOVF   FED,F
03A64:  MOVFF  6A8,FEF
....................               } 
....................                //printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03A68:  INCF   xA0,F
....................            } 
....................         } 
03A6A:  INCF   xA2,F
03A6C:  BRA    3702
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03A6E:  MOVLB  0
03A70:  BTFSS  xB5.3
03A72:  BRA    3A7E
03A74:  MOVLB  5
03A76:  CLRF   xD2
03A78:  MOVFF  6A0,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03A7C:  BRA    3A86
03A7E:  MOVLB  6
03A80:  CLRF   x16
03A82:  MOVFF  6A0,615
....................     // printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................       
....................      organizado=1; 
03A86:  MOVLB  0
03A88:  BSF    xB5.2
....................   } 
03A8A:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03A8C:  MOVLB  5
03A8E:  CLRF   xD2
03A90:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
03A92:  MOVLB  6
03A94:  CLRF   x16
03A96:  CLRF   x15
....................    portc=0xFF; 
03A98:  MOVLW  FF
03A9A:  MOVWF  F82
....................    portd=0xFF; 
03A9C:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03A9E:  MOVLW  00
03AA0:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
03AA2:  MOVWF  F95
....................    portc=0xFF; 
03AA4:  MOVLW  FF
03AA6:  MOVWF  F82
....................    portd=0xFF; 
03AA8:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03AAA:  CLRF   x5E
03AAC:  MOVLB  1
03AAE:  MOVF   x3F,W
03AB0:  MOVLB  6
03AB2:  SUBWF  x5E,W
03AB4:  BTFSC  FD8.0
03AB6:  BRA    3BF0
03AB8:  CLRF   1B
03ABA:  BTFSC  FF2.7
03ABC:  BSF    1B.7
03ABE:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03AC0:  CLRF   xD7
03AC2:  MOVFF  65E,6D6
03AC6:  CLRF   xD9
03AC8:  MOVLW  2F
03ACA:  MOVWF  xD8
03ACC:  MOVLB  0
03ACE:  CALL   0442
03AD2:  BTFSC  1B.7
03AD4:  BSF    FF2.7
03AD6:  MOVFF  02,03
03ADA:  MOVF   01,W
03ADC:  ADDLW  8A
03ADE:  MOVWF  01
03AE0:  MOVLW  02
03AE2:  ADDWFC 03,F
03AE4:  MOVFF  01,FE9
03AE8:  MOVFF  03,FEA
03AEC:  MOVF   FEF,W
03AEE:  XORLW  65
03AF0:  BZ    3AF4
03AF2:  BRA    3BEA
....................          case dimmer: 
....................          printf("used dimmer!!!\n\r"); 
03AF4:  MOVLW  BA
03AF6:  MOVWF  FF6
03AF8:  MOVLW  02
03AFA:  MOVWF  FF7
03AFC:  MOVLW  00
03AFE:  MOVWF  FF8
03B00:  CALL   2222
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
03B04:  BCF    FD8.0
03B06:  MOVLB  5
03B08:  RLCF   x7A,W
03B0A:  CLRF   03
03B0C:  ADDLW  19
03B0E:  MOVWF  01
03B10:  MOVLW  06
03B12:  ADDWFC 03,F
03B14:  MOVFF  01,65F
03B18:  MOVLB  6
03B1A:  MOVFF  03,660
03B1E:  CLRF   1B
03B20:  BTFSC  FF2.7
03B22:  BSF    1B.7
03B24:  BCF    FF2.7
03B26:  CLRF   xD7
03B28:  MOVFF  65E,6D6
03B2C:  CLRF   xD9
03B2E:  MOVLW  2F
03B30:  MOVWF  xD8
03B32:  MOVLB  0
03B34:  CALL   0442
03B38:  BTFSC  1B.7
03B3A:  BSF    FF2.7
03B3C:  MOVF   01,W
03B3E:  ADDLW  4C
03B40:  MOVLB  6
03B42:  MOVWF  x61
03B44:  MOVLW  01
03B46:  ADDWFC 02,W
03B48:  MOVWF  x62
03B4A:  MOVLW  01
03B4C:  ADDWF  x61,W
03B4E:  MOVWF  01
03B50:  MOVLW  00
03B52:  ADDWFC x62,W
03B54:  MOVWF  03
03B56:  MOVF   01,W
03B58:  ADDLW  3E
03B5A:  MOVWF  01
03B5C:  MOVLW  01
03B5E:  ADDWFC 03,F
03B60:  MOVF   01,W
03B62:  ADDLW  1F
03B64:  MOVWF  FE9
03B66:  MOVLW  00
03B68:  ADDWFC 03,W
03B6A:  MOVWF  FEA
03B6C:  BCF    FD8.0
03B6E:  RLCF   FEF,W
03B70:  CLRF   03
03B72:  MOVLB  0
03B74:  CALL   0172
03B78:  TBLRD*+
03B7A:  MOVFF  FF5,03
03B7E:  MOVLB  6
03B80:  MOVFF  660,FEA
03B84:  MOVFF  65F,FE9
03B88:  MOVFF  03,FEC
03B8C:  MOVF   FED,F
03B8E:  MOVWF  FEF
03B90:  CLRF   1B
03B92:  BTFSC  FF2.7
03B94:  BSF    1B.7
03B96:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
03B98:  CLRF   xD7
03B9A:  MOVFF  65E,6D6
03B9E:  CLRF   xD9
03BA0:  MOVLW  2F
03BA2:  MOVWF  xD8
03BA4:  MOVLB  0
03BA6:  CALL   0442
03BAA:  BTFSC  1B.7
03BAC:  BSF    FF2.7
03BAE:  MOVF   01,W
03BB0:  ADDLW  4C
03BB2:  MOVLB  6
03BB4:  MOVWF  x5F
03BB6:  MOVLW  01
03BB8:  ADDWFC 02,W
03BBA:  MOVWF  x60
03BBC:  MOVLW  01
03BBE:  ADDWF  x5F,W
03BC0:  MOVWF  01
03BC2:  MOVLW  00
03BC4:  ADDWFC x60,W
03BC6:  MOVWF  03
03BC8:  MOVF   01,W
03BCA:  ADDLW  3E
03BCC:  MOVWF  01
03BCE:  MOVLW  01
03BD0:  ADDWFC 03,F
03BD2:  MOVF   01,W
03BD4:  ADDLW  20
03BD6:  MOVWF  FE9
03BD8:  MOVLW  00
03BDA:  ADDWFC 03,W
03BDC:  MOVWF  FEA
03BDE:  MOVFF  57A,FEF
....................             ++used_dimmers;           
03BE2:  MOVLB  5
03BE4:  INCF   x7A,F
....................          break; 
03BE6:  MOVLB  0
03BE8:  BRA    3BEA
....................       } 
....................    } 
03BEA:  MOVLB  6
03BEC:  INCF   x5E,F
03BEE:  BRA    3AAC
....................    if(used_dimmers>0) 
03BF0:  MOVLB  5
03BF2:  MOVF   x7A,F
03BF4:  BZ    3C1A
....................    { 
....................    actmat=0; 
03BF6:  MOVLB  0
03BF8:  BCF    xB5.3
....................    pointer=delays1; 
03BFA:  MOVLW  05
03BFC:  MOVLB  5
03BFE:  MOVWF  x7C
03C00:  MOVLW  91
03C02:  MOVWF  x7B
....................    org(); 
03C04:  MOVLB  0
03C06:  RCALL  3458
....................    pointer=delays2; 
03C08:  MOVLW  05
03C0A:  MOVLB  5
03C0C:  MOVWF  x7C
03C0E:  MOVLW  D5
03C10:  MOVWF  x7B
....................    actmat=1; 
03C12:  MOVLB  0
03C14:  BSF    xB5.3
....................    org(); 
03C16:  RCALL  3458
03C18:  MOVLB  5
....................    } 
.................... } 
03C1A:  MOVLB  0
03C1C:  GOTO   8482 (RETURN)
....................  
.................... void write_outputs() 
.................... { 
03C20:  MOVLB  6
03C22:  BCF    x5F.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03C24:  CLRF   x5E
03C26:  MOVLB  1
03C28:  MOVF   x3F,W
03C2A:  MOVLB  6
03C2C:  SUBWF  x5E,W
03C2E:  BTFSC  FD8.0
03C30:  GOTO   4FF8
03C34:  CLRF   1B
03C36:  BTFSC  FF2.7
03C38:  BSF    1B.7
03C3A:  BCF    FF2.7
....................    { 
....................       //printf("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03C3C:  CLRF   xD7
03C3E:  MOVFF  65E,6D6
03C42:  CLRF   xD9
03C44:  MOVLW  2F
03C46:  MOVWF  xD8
03C48:  MOVLB  0
03C4A:  CALL   0442
03C4E:  BTFSC  1B.7
03C50:  BSF    FF2.7
03C52:  MOVFF  02,03
03C56:  MOVF   01,W
03C58:  ADDLW  8A
03C5A:  MOVWF  01
03C5C:  MOVLW  02
03C5E:  ADDWFC 03,F
03C60:  MOVFF  01,FE9
03C64:  MOVFF  03,FEA
03C68:  MOVF   FEF,W
03C6A:  XORLW  65
03C6C:  BZ    3C80
03C6E:  XORLW  01
03C70:  BTFSC  FD8.2
03C72:  BRA    41EC
03C74:  XORLW  02
03C76:  BTFSC  FD8.2
03C78:  GOTO   452E
03C7C:  GOTO   4FF0
....................          case dimmer: 
03C80:  CLRF   1B
03C82:  BTFSC  FF2.7
03C84:  BSF    1B.7
03C86:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
03C88:  MOVLB  6
03C8A:  CLRF   xD7
03C8C:  MOVFF  65E,6D6
03C90:  CLRF   xD9
03C92:  MOVLW  2F
03C94:  MOVWF  xD8
03C96:  MOVLB  0
03C98:  CALL   0442
03C9C:  BTFSC  1B.7
03C9E:  BSF    FF2.7
03CA0:  MOVF   01,W
03CA2:  ADDLW  4C
03CA4:  MOVLB  6
03CA6:  MOVWF  x60
03CA8:  MOVLW  01
03CAA:  ADDWFC 02,W
03CAC:  MOVWF  x61
03CAE:  MOVLW  01
03CB0:  ADDWF  x60,W
03CB2:  MOVWF  01
03CB4:  MOVLW  00
03CB6:  ADDWFC x61,W
03CB8:  MOVWF  03
03CBA:  MOVF   01,W
03CBC:  ADDLW  3E
03CBE:  MOVWF  01
03CC0:  MOVLW  01
03CC2:  ADDWFC 03,F
03CC4:  MOVF   01,W
03CC6:  ADDLW  1D
03CC8:  MOVWF  FE9
03CCA:  MOVLW  00
03CCC:  ADDWFC 03,W
03CCE:  MOVWF  FEA
03CD0:  BTFSS  FEF.0
03CD2:  BRA    3E38
03CD4:  CLRF   1B
03CD6:  BTFSC  FF2.7
03CD8:  BSF    1B.7
03CDA:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
03CDC:  CLRF   xD7
03CDE:  MOVFF  65E,6D6
03CE2:  CLRF   xD9
03CE4:  MOVLW  2F
03CE6:  MOVWF  xD8
03CE8:  MOVLB  0
03CEA:  CALL   0442
03CEE:  BTFSC  1B.7
03CF0:  BSF    FF2.7
03CF2:  MOVF   01,W
03CF4:  ADDLW  4C
03CF6:  MOVLB  6
03CF8:  MOVWF  x60
03CFA:  MOVLW  01
03CFC:  ADDWFC 02,W
03CFE:  MOVWF  x61
03D00:  MOVLW  01
03D02:  ADDWF  x60,W
03D04:  MOVWF  01
03D06:  MOVLW  00
03D08:  ADDWFC x61,W
03D0A:  MOVWF  03
03D0C:  MOVF   01,W
03D0E:  ADDLW  3E
03D10:  MOVWF  01
03D12:  MOVLW  01
03D14:  ADDWFC 03,F
03D16:  MOVF   01,W
03D18:  ADDLW  1E
03D1A:  MOVWF  FE9
03D1C:  MOVLW  00
03D1E:  ADDWFC 03,W
03D20:  MOVWF  FEA
03D22:  MOVF   FEF,F
03D24:  BNZ   3DE8
03D26:  CLRF   1B
03D28:  BTFSC  FF2.7
03D2A:  BSF    1B.7
03D2C:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03D2E:  CLRF   xD7
03D30:  MOVFF  65E,6D6
03D34:  CLRF   xD9
03D36:  MOVLW  2F
03D38:  MOVWF  xD8
03D3A:  MOVLB  0
03D3C:  CALL   0442
03D40:  BTFSC  1B.7
03D42:  BSF    FF2.7
03D44:  MOVF   01,W
03D46:  ADDLW  4C
03D48:  MOVLB  6
03D4A:  MOVWF  x60
03D4C:  MOVLW  01
03D4E:  ADDWFC 02,W
03D50:  MOVWF  x61
03D52:  MOVLW  01
03D54:  ADDWF  x60,W
03D56:  MOVWF  01
03D58:  MOVLW  00
03D5A:  ADDWFC x61,W
03D5C:  MOVWF  03
03D5E:  MOVF   01,W
03D60:  ADDLW  3E
03D62:  MOVWF  01
03D64:  MOVLW  01
03D66:  ADDWFC 03,F
03D68:  MOVF   01,W
03D6A:  ADDLW  20
03D6C:  MOVWF  FE9
03D6E:  MOVLW  00
03D70:  ADDWFC 03,W
03D72:  MOVWF  FEA
03D74:  CLRF   03
03D76:  MOVF   FEF,W
03D78:  ADDLW  81
03D7A:  MOVWF  01
03D7C:  MOVLW  05
03D7E:  ADDWFC 03,F
03D80:  MOVFF  01,662
03D84:  MOVFF  03,663
03D88:  CLRF   1B
03D8A:  BTFSC  FF2.7
03D8C:  BSF    1B.7
03D8E:  BCF    FF2.7
03D90:  CLRF   xD7
03D92:  MOVFF  65E,6D6
03D96:  CLRF   xD9
03D98:  MOVLW  2F
03D9A:  MOVWF  xD8
03D9C:  MOVLB  0
03D9E:  CALL   0442
03DA2:  BTFSC  1B.7
03DA4:  BSF    FF2.7
03DA6:  MOVF   01,W
03DA8:  ADDLW  4C
03DAA:  MOVLB  6
03DAC:  MOVWF  x64
03DAE:  MOVLW  01
03DB0:  ADDWFC 02,W
03DB2:  MOVWF  x65
03DB4:  MOVLW  01
03DB6:  ADDWF  x64,W
03DB8:  MOVWF  01
03DBA:  MOVLW  00
03DBC:  ADDWFC x65,W
03DBE:  MOVWF  03
03DC0:  MOVF   01,W
03DC2:  ADDLW  3E
03DC4:  MOVWF  01
03DC6:  MOVLW  01
03DC8:  ADDWFC 03,F
03DCA:  MOVF   01,W
03DCC:  ADDLW  1C
03DCE:  MOVWF  FE9
03DD0:  MOVLW  00
03DD2:  ADDWFC 03,W
03DD4:  MOVWF  FEA
03DD6:  MOVFF  FEF,666
03DDA:  MOVFF  663,FEA
03DDE:  MOVFF  662,FE9
03DE2:  MOVFF  666,FEF
....................                   update_dimmers=true; 
03DE6:  BSF    x5F.0
03DE8:  CLRF   1B
03DEA:  BTFSC  FF2.7
03DEC:  BSF    1B.7
03DEE:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
03DF0:  CLRF   xD7
03DF2:  MOVFF  65E,6D6
03DF6:  CLRF   xD9
03DF8:  MOVLW  2F
03DFA:  MOVWF  xD8
03DFC:  MOVLB  0
03DFE:  CALL   0442
03E02:  BTFSC  1B.7
03E04:  BSF    FF2.7
03E06:  MOVF   01,W
03E08:  ADDLW  4C
03E0A:  MOVLB  6
03E0C:  MOVWF  x60
03E0E:  MOVLW  01
03E10:  ADDWFC 02,W
03E12:  MOVWF  x61
03E14:  MOVLW  01
03E16:  ADDWF  x60,W
03E18:  MOVWF  01
03E1A:  MOVLW  00
03E1C:  ADDWFC x61,W
03E1E:  MOVWF  03
03E20:  MOVF   01,W
03E22:  ADDLW  3E
03E24:  MOVWF  01
03E26:  MOVLW  01
03E28:  ADDWFC 03,F
03E2A:  MOVF   01,W
03E2C:  ADDLW  1D
03E2E:  MOVWF  FE9
03E30:  MOVLW  00
03E32:  ADDWFC 03,W
03E34:  MOVWF  FEA
03E36:  BCF    FEF.0
03E38:  CLRF   1B
03E3A:  BTFSC  FF2.7
03E3C:  BSF    1B.7
03E3E:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
03E40:  CLRF   xD7
03E42:  MOVFF  65E,6D6
03E46:  CLRF   xD9
03E48:  MOVLW  2F
03E4A:  MOVWF  xD8
03E4C:  MOVLB  0
03E4E:  CALL   0442
03E52:  BTFSC  1B.7
03E54:  BSF    FF2.7
03E56:  MOVF   01,W
03E58:  ADDLW  4C
03E5A:  MOVLB  6
03E5C:  MOVWF  x60
03E5E:  MOVLW  01
03E60:  ADDWFC 02,W
03E62:  MOVWF  x61
03E64:  MOVLW  01
03E66:  ADDWF  x60,W
03E68:  MOVWF  01
03E6A:  MOVLW  00
03E6C:  ADDWFC x61,W
03E6E:  MOVWF  03
03E70:  MOVF   01,W
03E72:  ADDLW  3E
03E74:  MOVWF  01
03E76:  MOVLW  01
03E78:  ADDWFC 03,F
03E7A:  MOVF   01,W
03E7C:  ADDLW  13
03E7E:  MOVWF  FE9
03E80:  MOVLW  00
03E82:  ADDWFC 03,W
03E84:  MOVWF  FEA
03E86:  BTFSS  FEF.0
03E88:  BRA    3FDE
03E8A:  CLRF   1B
03E8C:  BTFSC  FF2.7
03E8E:  BSF    1B.7
03E90:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
03E92:  CLRF   xD7
03E94:  MOVFF  65E,6D6
03E98:  CLRF   xD9
03E9A:  MOVLW  2F
03E9C:  MOVWF  xD8
03E9E:  MOVLB  0
03EA0:  CALL   0442
03EA4:  BTFSC  1B.7
03EA6:  BSF    FF2.7
03EA8:  MOVF   01,W
03EAA:  ADDLW  4C
03EAC:  MOVLB  6
03EAE:  MOVWF  x60
03EB0:  MOVLW  01
03EB2:  ADDWFC 02,W
03EB4:  MOVWF  x61
03EB6:  MOVLW  01
03EB8:  ADDWF  x60,W
03EBA:  MOVWF  01
03EBC:  MOVLW  00
03EBE:  ADDWFC x61,W
03EC0:  MOVWF  03
03EC2:  MOVF   01,W
03EC4:  ADDLW  3E
03EC6:  MOVWF  01
03EC8:  MOVLW  01
03ECA:  ADDWFC 03,F
03ECC:  MOVF   01,W
03ECE:  ADDLW  12
03ED0:  MOVWF  FE9
03ED2:  MOVLW  00
03ED4:  ADDWFC 03,W
03ED6:  MOVWF  FEA
03ED8:  MOVF   FEF,F
03EDA:  BZ    3F8E
03EDC:  CLRF   1B
03EDE:  BTFSC  FF2.7
03EE0:  BSF    1B.7
03EE2:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
03EE4:  CLRF   xD7
03EE6:  MOVFF  65E,6D6
03EEA:  CLRF   xD9
03EEC:  MOVLW  2F
03EEE:  MOVWF  xD8
03EF0:  MOVLB  0
03EF2:  CALL   0442
03EF6:  BTFSC  1B.7
03EF8:  BSF    FF2.7
03EFA:  MOVF   01,W
03EFC:  ADDLW  4C
03EFE:  MOVLB  6
03F00:  MOVWF  x60
03F02:  MOVLW  01
03F04:  ADDWFC 02,W
03F06:  MOVWF  x61
03F08:  MOVLW  01
03F0A:  ADDWF  x60,W
03F0C:  MOVWF  01
03F0E:  MOVLW  00
03F10:  ADDWFC x61,W
03F12:  MOVWF  03
03F14:  MOVF   01,W
03F16:  ADDLW  3E
03F18:  MOVWF  01
03F1A:  MOVLW  01
03F1C:  ADDWFC 03,F
03F1E:  MOVF   01,W
03F20:  ADDLW  1E
03F22:  MOVWF  FE9
03F24:  MOVLW  00
03F26:  ADDWFC 03,W
03F28:  MOVWF  FEA
03F2A:  MOVLW  01
03F2C:  MOVWF  FEF
03F2E:  CLRF   1B
03F30:  BTFSC  FF2.7
03F32:  BSF    1B.7
03F34:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
03F36:  CLRF   xD7
03F38:  MOVFF  65E,6D6
03F3C:  CLRF   xD9
03F3E:  MOVLW  2F
03F40:  MOVWF  xD8
03F42:  MOVLB  0
03F44:  CALL   0442
03F48:  BTFSC  1B.7
03F4A:  BSF    FF2.7
03F4C:  MOVF   01,W
03F4E:  ADDLW  4C
03F50:  MOVLB  6
03F52:  MOVWF  x60
03F54:  MOVLW  01
03F56:  ADDWFC 02,W
03F58:  MOVWF  x61
03F5A:  MOVLW  01
03F5C:  ADDWF  x60,W
03F5E:  MOVWF  01
03F60:  MOVLW  00
03F62:  ADDWFC x61,W
03F64:  MOVWF  03
03F66:  MOVF   01,W
03F68:  ADDLW  3E
03F6A:  MOVWF  01
03F6C:  MOVLW  01
03F6E:  ADDWFC 03,F
03F70:  MOVF   01,W
03F72:  ADDLW  20
03F74:  MOVWF  FE9
03F76:  MOVLW  00
03F78:  ADDWFC 03,W
03F7A:  MOVWF  FEA
03F7C:  CLRF   03
03F7E:  MOVF   FEF,W
03F80:  ADDLW  81
03F82:  MOVWF  FE9
03F84:  MOVLW  05
03F86:  ADDWFC 03,W
03F88:  MOVWF  FEA
03F8A:  CLRF   FEF
....................                   update_dimmers=true; 
03F8C:  BSF    x5F.0
03F8E:  CLRF   1B
03F90:  BTFSC  FF2.7
03F92:  BSF    1B.7
03F94:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
03F96:  CLRF   xD7
03F98:  MOVFF  65E,6D6
03F9C:  CLRF   xD9
03F9E:  MOVLW  2F
03FA0:  MOVWF  xD8
03FA2:  MOVLB  0
03FA4:  CALL   0442
03FA8:  BTFSC  1B.7
03FAA:  BSF    FF2.7
03FAC:  MOVF   01,W
03FAE:  ADDLW  4C
03FB0:  MOVLB  6
03FB2:  MOVWF  x60
03FB4:  MOVLW  01
03FB6:  ADDWFC 02,W
03FB8:  MOVWF  x61
03FBA:  MOVLW  01
03FBC:  ADDWF  x60,W
03FBE:  MOVWF  01
03FC0:  MOVLW  00
03FC2:  ADDWFC x61,W
03FC4:  MOVWF  03
03FC6:  MOVF   01,W
03FC8:  ADDLW  3E
03FCA:  MOVWF  01
03FCC:  MOVLW  01
03FCE:  ADDWFC 03,F
03FD0:  MOVF   01,W
03FD2:  ADDLW  13
03FD4:  MOVWF  FE9
03FD6:  MOVLW  00
03FD8:  ADDWFC 03,W
03FDA:  MOVWF  FEA
03FDC:  BCF    FEF.0
03FDE:  CLRF   1B
03FE0:  BTFSC  FF2.7
03FE2:  BSF    1B.7
03FE4:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
03FE6:  CLRF   xD7
03FE8:  MOVFF  65E,6D6
03FEC:  CLRF   xD9
03FEE:  MOVLW  2F
03FF0:  MOVWF  xD8
03FF2:  MOVLB  0
03FF4:  CALL   0442
03FF8:  BTFSC  1B.7
03FFA:  BSF    FF2.7
03FFC:  MOVF   01,W
03FFE:  ADDLW  4C
04000:  MOVLB  6
04002:  MOVWF  x60
04004:  MOVLW  01
04006:  ADDWFC 02,W
04008:  MOVWF  x61
0400A:  MOVLW  01
0400C:  ADDWF  x60,W
0400E:  MOVWF  01
04010:  MOVLW  00
04012:  ADDWFC x61,W
04014:  MOVWF  03
04016:  MOVF   01,W
04018:  ADDLW  3E
0401A:  MOVWF  01
0401C:  MOVLW  01
0401E:  ADDWFC 03,F
04020:  MOVF   01,W
04022:  ADDLW  09
04024:  MOVWF  FE9
04026:  MOVLW  00
04028:  ADDWFC 03,W
0402A:  MOVWF  FEA
0402C:  BTFSS  FEF.0
0402E:  BRA    41E6
04030:  CLRF   1B
04032:  BTFSC  FF2.7
04034:  BSF    1B.7
04036:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
04038:  CLRF   xD7
0403A:  MOVFF  65E,6D6
0403E:  CLRF   xD9
04040:  MOVLW  2F
04042:  MOVWF  xD8
04044:  MOVLB  0
04046:  CALL   0442
0404A:  BTFSC  1B.7
0404C:  BSF    FF2.7
0404E:  MOVF   01,W
04050:  ADDLW  4C
04052:  MOVLB  6
04054:  MOVWF  x60
04056:  MOVLW  01
04058:  ADDWFC 02,W
0405A:  MOVWF  x61
0405C:  MOVLW  01
0405E:  ADDWF  x60,W
04060:  MOVWF  01
04062:  MOVLW  00
04064:  ADDWFC x61,W
04066:  MOVWF  03
04068:  MOVF   01,W
0406A:  ADDLW  3E
0406C:  MOVWF  01
0406E:  MOVLW  01
04070:  ADDWFC 03,F
04072:  MOVF   01,W
04074:  ADDLW  08
04076:  MOVWF  FE9
04078:  MOVLW  00
0407A:  ADDWFC 03,W
0407C:  MOVWF  FEA
0407E:  MOVF   FEF,F
04080:  BTFSC  FD8.2
04082:  BRA    4196
04084:  CLRF   1B
04086:  BTFSC  FF2.7
04088:  BSF    1B.7
0408A:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
0408C:  CLRF   xD7
0408E:  MOVFF  65E,6D6
04092:  CLRF   xD9
04094:  MOVLW  2F
04096:  MOVWF  xD8
04098:  MOVLB  0
0409A:  CALL   0442
0409E:  BTFSC  1B.7
040A0:  BSF    FF2.7
040A2:  MOVF   01,W
040A4:  ADDLW  4C
040A6:  MOVLB  6
040A8:  MOVWF  x60
040AA:  MOVLW  01
040AC:  ADDWFC 02,W
040AE:  MOVWF  x61
040B0:  MOVLW  01
040B2:  ADDWF  x60,W
040B4:  MOVWF  01
040B6:  MOVLW  00
040B8:  ADDWFC x61,W
040BA:  MOVWF  03
040BC:  MOVF   01,W
040BE:  ADDLW  3E
040C0:  MOVWF  01
040C2:  MOVLW  01
040C4:  ADDWFC 03,F
040C6:  MOVF   01,W
040C8:  ADDLW  1E
040CA:  MOVWF  FE9
040CC:  MOVLW  00
040CE:  ADDWFC 03,W
040D0:  MOVWF  FEA
040D2:  CLRF   FEF
040D4:  CLRF   1B
040D6:  BTFSC  FF2.7
040D8:  BSF    1B.7
040DA:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
040DC:  CLRF   xD7
040DE:  MOVFF  65E,6D6
040E2:  CLRF   xD9
040E4:  MOVLW  2F
040E6:  MOVWF  xD8
040E8:  MOVLB  0
040EA:  CALL   0442
040EE:  BTFSC  1B.7
040F0:  BSF    FF2.7
040F2:  MOVF   01,W
040F4:  ADDLW  4C
040F6:  MOVLB  6
040F8:  MOVWF  x60
040FA:  MOVLW  01
040FC:  ADDWFC 02,W
040FE:  MOVWF  x61
04100:  MOVLW  01
04102:  ADDWF  x60,W
04104:  MOVWF  01
04106:  MOVLW  00
04108:  ADDWFC x61,W
0410A:  MOVWF  03
0410C:  MOVF   01,W
0410E:  ADDLW  3E
04110:  MOVWF  01
04112:  MOVLW  01
04114:  ADDWFC 03,F
04116:  MOVF   01,W
04118:  ADDLW  20
0411A:  MOVWF  FE9
0411C:  MOVLW  00
0411E:  ADDWFC 03,W
04120:  MOVWF  FEA
04122:  CLRF   03
04124:  MOVF   FEF,W
04126:  ADDLW  81
04128:  MOVWF  01
0412A:  MOVLW  05
0412C:  ADDWFC 03,F
0412E:  MOVFF  01,662
04132:  MOVFF  03,663
04136:  CLRF   1B
04138:  BTFSC  FF2.7
0413A:  BSF    1B.7
0413C:  BCF    FF2.7
0413E:  CLRF   xD7
04140:  MOVFF  65E,6D6
04144:  CLRF   xD9
04146:  MOVLW  2F
04148:  MOVWF  xD8
0414A:  MOVLB  0
0414C:  CALL   0442
04150:  BTFSC  1B.7
04152:  BSF    FF2.7
04154:  MOVF   01,W
04156:  ADDLW  4C
04158:  MOVLB  6
0415A:  MOVWF  x64
0415C:  MOVLW  01
0415E:  ADDWFC 02,W
04160:  MOVWF  x65
04162:  MOVLW  01
04164:  ADDWF  x64,W
04166:  MOVWF  01
04168:  MOVLW  00
0416A:  ADDWFC x65,W
0416C:  MOVWF  03
0416E:  MOVF   01,W
04170:  ADDLW  3E
04172:  MOVWF  01
04174:  MOVLW  01
04176:  ADDWFC 03,F
04178:  MOVF   01,W
0417A:  ADDLW  1C
0417C:  MOVWF  FE9
0417E:  MOVLW  00
04180:  ADDWFC 03,W
04182:  MOVWF  FEA
04184:  MOVFF  FEF,666
04188:  MOVFF  663,FEA
0418C:  MOVFF  662,FE9
04190:  MOVFF  666,FEF
....................                   update_dimmers=true; 
04194:  BSF    x5F.0
04196:  CLRF   1B
04198:  BTFSC  FF2.7
0419A:  BSF    1B.7
0419C:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
0419E:  CLRF   xD7
041A0:  MOVFF  65E,6D6
041A4:  CLRF   xD9
041A6:  MOVLW  2F
041A8:  MOVWF  xD8
041AA:  MOVLB  0
041AC:  CALL   0442
041B0:  BTFSC  1B.7
041B2:  BSF    FF2.7
041B4:  MOVF   01,W
041B6:  ADDLW  4C
041B8:  MOVLB  6
041BA:  MOVWF  x60
041BC:  MOVLW  01
041BE:  ADDWFC 02,W
041C0:  MOVWF  x61
041C2:  MOVLW  01
041C4:  ADDWF  x60,W
041C6:  MOVWF  01
041C8:  MOVLW  00
041CA:  ADDWFC x61,W
041CC:  MOVWF  03
041CE:  MOVF   01,W
041D0:  ADDLW  3E
041D2:  MOVWF  01
041D4:  MOVLW  01
041D6:  ADDWFC 03,F
041D8:  MOVF   01,W
041DA:  ADDLW  09
041DC:  MOVWF  FE9
041DE:  MOVLW  00
041E0:  ADDWFC 03,W
041E2:  MOVWF  FEA
041E4:  BCF    FEF.0
....................             } 
....................          break; 
041E6:  MOVLB  0
041E8:  GOTO   4FF0
....................          case _on_off: 
041EC:  CLRF   1B
041EE:  BTFSC  FF2.7
041F0:  BSF    1B.7
041F2:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
041F4:  MOVLB  6
041F6:  CLRF   xD7
041F8:  MOVFF  65E,6D6
041FC:  CLRF   xD9
041FE:  MOVLW  2F
04200:  MOVWF  xD8
04202:  MOVLB  0
04204:  CALL   0442
04208:  BTFSC  1B.7
0420A:  BSF    FF2.7
0420C:  MOVF   01,W
0420E:  ADDLW  4C
04210:  MOVLB  6
04212:  MOVWF  x60
04214:  MOVLW  01
04216:  ADDWFC 02,W
04218:  MOVWF  x61
0421A:  MOVLW  01
0421C:  ADDWF  x60,W
0421E:  MOVWF  01
04220:  MOVLW  00
04222:  ADDWFC x61,W
04224:  MOVWF  03
04226:  MOVF   01,W
04228:  ADDLW  3E
0422A:  MOVWF  01
0422C:  MOVLW  01
0422E:  ADDWFC 03,F
04230:  MOVF   01,W
04232:  ADDLW  13
04234:  MOVWF  FE9
04236:  MOVLW  00
04238:  ADDWFC 03,W
0423A:  MOVWF  FEA
0423C:  BTFSS  FEF.0
0423E:  BRA    4358
04240:  CLRF   1B
04242:  BTFSC  FF2.7
04244:  BSF    1B.7
04246:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
04248:  CLRF   xD7
0424A:  MOVFF  65E,6D6
0424E:  CLRF   xD9
04250:  MOVLW  2F
04252:  MOVWF  xD8
04254:  MOVLB  0
04256:  CALL   0442
0425A:  BTFSC  1B.7
0425C:  BSF    FF2.7
0425E:  MOVF   01,W
04260:  ADDLW  4C
04262:  MOVLB  6
04264:  MOVWF  x60
04266:  MOVLW  01
04268:  ADDWFC 02,W
0426A:  MOVWF  x61
0426C:  MOVLW  01
0426E:  ADDWF  x60,W
04270:  MOVWF  01
04272:  MOVLW  00
04274:  ADDWFC x61,W
04276:  MOVWF  03
04278:  MOVF   01,W
0427A:  ADDLW  3E
0427C:  MOVWF  01
0427E:  MOVLW  01
04280:  ADDWFC 03,F
04282:  MOVF   01,W
04284:  ADDLW  12
04286:  MOVWF  FE9
04288:  MOVLW  00
0428A:  ADDWFC 03,W
0428C:  MOVWF  FEA
0428E:  MOVF   FEF,F
04290:  BZ    4308
04292:  CLRF   1B
04294:  BTFSC  FF2.7
04296:  BSF    1B.7
04298:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
0429A:  CLRF   xD7
0429C:  MOVFF  65E,6D6
042A0:  CLRF   xD9
042A2:  MOVLW  2F
042A4:  MOVWF  xD8
042A6:  MOVLB  0
042A8:  CALL   0442
042AC:  BTFSC  1B.7
042AE:  BSF    FF2.7
042B0:  MOVF   01,W
042B2:  ADDLW  4C
042B4:  MOVLB  6
042B6:  MOVWF  x60
042B8:  MOVLW  01
042BA:  ADDWFC 02,W
042BC:  MOVWF  x61
042BE:  MOVLW  01
042C0:  ADDWF  x60,W
042C2:  MOVWF  01
042C4:  MOVLW  00
042C6:  ADDWFC x61,W
042C8:  MOVWF  03
042CA:  MOVF   01,W
042CC:  ADDLW  3E
042CE:  MOVWF  01
042D0:  MOVLW  01
042D2:  ADDWFC 03,F
042D4:  MOVF   01,W
042D6:  ADDLW  14
042D8:  MOVWF  FE9
042DA:  MOVLW  00
042DC:  ADDWFC 03,W
042DE:  MOVWF  FEA
042E0:  BCF    FD8.0
042E2:  RLCF   FEF,W
042E4:  CLRF   03
042E6:  MOVLB  0
042E8:  CALL   0172
042EC:  TBLRD*+
042EE:  MOVFF  FF5,03
042F2:  CLRF   00
042F4:  DECF   00,F
042F6:  XORWF  00,F
042F8:  MOVLW  FF
042FA:  XORWF  03,F
042FC:  MOVF   00,W
042FE:  MOVLB  5
04300:  IORWF  x7F,F
04302:  MOVF   03,W
04304:  IORWF  x80,F
04306:  MOVLB  6
04308:  CLRF   1B
0430A:  BTFSC  FF2.7
0430C:  BSF    1B.7
0430E:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
04310:  CLRF   xD7
04312:  MOVFF  65E,6D6
04316:  CLRF   xD9
04318:  MOVLW  2F
0431A:  MOVWF  xD8
0431C:  MOVLB  0
0431E:  CALL   0442
04322:  BTFSC  1B.7
04324:  BSF    FF2.7
04326:  MOVF   01,W
04328:  ADDLW  4C
0432A:  MOVLB  6
0432C:  MOVWF  x60
0432E:  MOVLW  01
04330:  ADDWFC 02,W
04332:  MOVWF  x61
04334:  MOVLW  01
04336:  ADDWF  x60,W
04338:  MOVWF  01
0433A:  MOVLW  00
0433C:  ADDWFC x61,W
0433E:  MOVWF  03
04340:  MOVF   01,W
04342:  ADDLW  3E
04344:  MOVWF  01
04346:  MOVLW  01
04348:  ADDWFC 03,F
0434A:  MOVF   01,W
0434C:  ADDLW  13
0434E:  MOVWF  FE9
04350:  MOVLW  00
04352:  ADDWFC 03,W
04354:  MOVWF  FEA
04356:  BCF    FEF.0
04358:  CLRF   1B
0435A:  BTFSC  FF2.7
0435C:  BSF    1B.7
0435E:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
04360:  CLRF   xD7
04362:  MOVFF  65E,6D6
04366:  CLRF   xD9
04368:  MOVLW  2F
0436A:  MOVWF  xD8
0436C:  MOVLB  0
0436E:  CALL   0442
04372:  BTFSC  1B.7
04374:  BSF    FF2.7
04376:  MOVF   01,W
04378:  ADDLW  4C
0437A:  MOVLB  6
0437C:  MOVWF  x60
0437E:  MOVLW  01
04380:  ADDWFC 02,W
04382:  MOVWF  x61
04384:  MOVLW  01
04386:  ADDWF  x60,W
04388:  MOVWF  01
0438A:  MOVLW  00
0438C:  ADDWFC x61,W
0438E:  MOVWF  03
04390:  MOVF   01,W
04392:  ADDLW  3E
04394:  MOVWF  01
04396:  MOVLW  01
04398:  ADDWFC 03,F
0439A:  MOVF   01,W
0439C:  ADDLW  09
0439E:  MOVWF  FE9
043A0:  MOVLW  00
043A2:  ADDWFC 03,W
043A4:  MOVWF  FEA
043A6:  BTFSS  FEF.0
043A8:  BRA    4528
043AA:  CLRF   1B
043AC:  BTFSC  FF2.7
043AE:  BSF    1B.7
043B0:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
043B2:  CLRF   xD7
043B4:  MOVFF  65E,6D6
043B8:  CLRF   xD9
043BA:  MOVLW  2F
043BC:  MOVWF  xD8
043BE:  MOVLB  0
043C0:  CALL   0442
043C4:  BTFSC  1B.7
043C6:  BSF    FF2.7
043C8:  MOVF   01,W
043CA:  ADDLW  4C
043CC:  MOVLB  6
043CE:  MOVWF  x60
043D0:  MOVLW  01
043D2:  ADDWFC 02,W
043D4:  MOVWF  x61
043D6:  MOVLW  01
043D8:  ADDWF  x60,W
043DA:  MOVWF  01
043DC:  MOVLW  00
043DE:  ADDWFC x61,W
043E0:  MOVWF  03
043E2:  MOVF   01,W
043E4:  ADDLW  3E
043E6:  MOVWF  01
043E8:  MOVLW  01
043EA:  ADDWFC 03,F
043EC:  MOVF   01,W
043EE:  ADDLW  08
043F0:  MOVWF  FE9
043F2:  MOVLW  00
043F4:  ADDWFC 03,W
043F6:  MOVWF  FEA
043F8:  MOVF   FEF,F
043FA:  BZ    44D8
043FC:  CLRF   1B
043FE:  BTFSC  FF2.7
04400:  BSF    1B.7
04402:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04404:  CLRF   xD7
04406:  MOVFF  65E,6D6
0440A:  CLRF   xD9
0440C:  MOVLW  2F
0440E:  MOVWF  xD8
04410:  MOVLB  0
04412:  CALL   0442
04416:  BTFSC  1B.7
04418:  BSF    FF2.7
0441A:  MOVF   01,W
0441C:  ADDLW  4C
0441E:  MOVLB  6
04420:  MOVWF  x60
04422:  MOVLW  01
04424:  ADDWFC 02,W
04426:  MOVWF  x61
04428:  MOVLW  01
0442A:  ADDWF  x60,W
0442C:  MOVWF  01
0442E:  MOVLW  00
04430:  ADDWFC x61,W
04432:  MOVWF  03
04434:  MOVF   01,W
04436:  ADDLW  3E
04438:  MOVWF  01
0443A:  MOVLW  01
0443C:  ADDWFC 03,F
0443E:  MOVF   01,W
04440:  ADDLW  14
04442:  MOVWF  FE9
04444:  MOVLW  00
04446:  ADDWFC 03,W
04448:  MOVWF  FEA
0444A:  BCF    FD8.0
0444C:  RLCF   FEF,W
0444E:  CLRF   03
04450:  MOVLB  0
04452:  CALL   0172
04456:  TBLRD*+
04458:  MOVFF  FF5,03
0445C:  MOVLB  5
0445E:  ANDWF  x7F,F
04460:  MOVF   03,W
04462:  ANDWF  x80,F
....................                   printf(".X=%d %d\n\d",x,(((struct oNoFF)mydevices.myoutputs[1].device).on.needs_update)); 
04464:  MOVLW  00
04466:  MOVLB  2
04468:  BTFSC  xC3.0
0446A:  MOVLW  01
0446C:  MOVLB  6
0446E:  MOVWF  x60
04470:  MOVLW  2E
04472:  MOVWF  xC0
04474:  MOVLB  0
04476:  CALL   1E2E
0447A:  MOVLW  58
0447C:  MOVLB  6
0447E:  MOVWF  xC0
04480:  MOVLB  0
04482:  CALL   1E2E
04486:  MOVLW  3D
04488:  MOVLB  6
0448A:  MOVWF  xC0
0448C:  MOVLB  0
0448E:  CALL   1E2E
04492:  MOVFF  65E,6BA
04496:  MOVLW  1F
04498:  MOVLB  6
0449A:  MOVWF  xBB
0449C:  MOVLB  0
0449E:  CALL   1ED0
044A2:  MOVLW  20
044A4:  MOVLB  6
044A6:  MOVWF  xC0
044A8:  MOVLB  0
044AA:  CALL   1E2E
044AE:  MOVFF  660,6BA
044B2:  MOVLW  1F
044B4:  MOVLB  6
044B6:  MOVWF  xBB
044B8:  MOVLB  0
044BA:  CALL   1ED0
044BE:  MOVLW  0A
044C0:  MOVLB  6
044C2:  MOVWF  xC0
044C4:  MOVLB  0
044C6:  CALL   1E2E
044CA:  MOVLW  64
044CC:  MOVLB  6
044CE:  MOVWF  xC0
044D0:  MOVLB  0
044D2:  CALL   1E2E
044D6:  MOVLB  6
044D8:  CLRF   1B
044DA:  BTFSC  FF2.7
044DC:  BSF    1B.7
044DE:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
044E0:  CLRF   xD7
044E2:  MOVFF  65E,6D6
044E6:  CLRF   xD9
044E8:  MOVLW  2F
044EA:  MOVWF  xD8
044EC:  MOVLB  0
044EE:  CALL   0442
044F2:  BTFSC  1B.7
044F4:  BSF    FF2.7
044F6:  MOVF   01,W
044F8:  ADDLW  4C
044FA:  MOVLB  6
044FC:  MOVWF  x60
044FE:  MOVLW  01
04500:  ADDWFC 02,W
04502:  MOVWF  x61
04504:  MOVLW  01
04506:  ADDWF  x60,W
04508:  MOVWF  01
0450A:  MOVLW  00
0450C:  ADDWFC x61,W
0450E:  MOVWF  03
04510:  MOVF   01,W
04512:  ADDLW  3E
04514:  MOVWF  01
04516:  MOVLW  01
04518:  ADDWFC 03,F
0451A:  MOVF   01,W
0451C:  ADDLW  09
0451E:  MOVWF  FE9
04520:  MOVLW  00
04522:  ADDWFC 03,W
04524:  MOVWF  FEA
04526:  BCF    FEF.0
....................             } 
....................          break; 
04528:  MOVLB  0
0452A:  GOTO   4FF0
....................            case shutter: 
0452E:  CLRF   1B
04530:  BTFSC  FF2.7
04532:  BSF    1B.7
04534:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
04536:  MOVLB  6
04538:  CLRF   xD7
0453A:  MOVFF  65E,6D6
0453E:  CLRF   xD9
04540:  MOVLW  2F
04542:  MOVWF  xD8
04544:  MOVLB  0
04546:  CALL   0442
0454A:  BTFSC  1B.7
0454C:  BSF    FF2.7
0454E:  MOVF   01,W
04550:  ADDLW  4C
04552:  MOVLB  6
04554:  MOVWF  x60
04556:  MOVLW  01
04558:  ADDWFC 02,W
0455A:  MOVWF  x61
0455C:  MOVLW  01
0455E:  ADDWF  x60,W
04560:  MOVWF  01
04562:  MOVLW  00
04564:  ADDWFC x61,W
04566:  MOVWF  03
04568:  MOVF   01,W
0456A:  ADDLW  3E
0456C:  MOVWF  01
0456E:  MOVLW  01
04570:  ADDWFC 03,F
04572:  MOVF   01,W
04574:  ADDLW  09
04576:  MOVWF  FE9
04578:  MOVLW  00
0457A:  ADDWFC 03,W
0457C:  MOVWF  FEA
0457E:  BTFSS  FEF.0
04580:  BRA    47EC
04582:  CLRF   1B
04584:  BTFSC  FF2.7
04586:  BSF    1B.7
04588:  BCF    FF2.7
0458A:  CLRF   xD7
0458C:  MOVFF  65E,6D6
04590:  CLRF   xD9
04592:  MOVLW  2F
04594:  MOVWF  xD8
04596:  MOVLB  0
04598:  CALL   0442
0459C:  BTFSC  1B.7
0459E:  BSF    FF2.7
045A0:  MOVF   01,W
045A2:  ADDLW  4C
045A4:  MOVLB  6
045A6:  MOVWF  x62
045A8:  MOVLW  01
045AA:  ADDWFC 02,W
045AC:  MOVWF  x63
045AE:  MOVLW  01
045B0:  ADDWF  x62,W
045B2:  MOVWF  01
045B4:  MOVLW  00
045B6:  ADDWFC x63,W
045B8:  MOVWF  03
045BA:  MOVF   01,W
045BC:  ADDLW  3E
045BE:  MOVWF  01
045C0:  MOVLW  01
045C2:  ADDWFC 03,F
045C4:  MOVF   01,W
045C6:  ADDLW  2D
045C8:  MOVWF  FE9
045CA:  MOVLW  00
045CC:  ADDWFC 03,W
045CE:  MOVWF  FEA
045D0:  MOVF   FEF,W
045D2:  SUBLW  04
045D4:  BZ    462A
045D6:  CLRF   1B
045D8:  BTFSC  FF2.7
045DA:  BSF    1B.7
045DC:  BCF    FF2.7
045DE:  CLRF   xD7
045E0:  MOVFF  65E,6D6
045E4:  CLRF   xD9
045E6:  MOVLW  2F
045E8:  MOVWF  xD8
045EA:  MOVLB  0
045EC:  CALL   0442
045F0:  BTFSC  1B.7
045F2:  BSF    FF2.7
045F4:  MOVF   01,W
045F6:  ADDLW  4C
045F8:  MOVLB  6
045FA:  MOVWF  x64
045FC:  MOVLW  01
045FE:  ADDWFC 02,W
04600:  MOVWF  x65
04602:  MOVLW  01
04604:  ADDWF  x64,W
04606:  MOVWF  01
04608:  MOVLW  00
0460A:  ADDWFC x65,W
0460C:  MOVWF  03
0460E:  MOVF   01,W
04610:  ADDLW  3E
04612:  MOVWF  01
04614:  MOVLW  01
04616:  ADDWFC 03,F
04618:  MOVF   01,W
0461A:  ADDLW  2D
0461C:  MOVWF  FE9
0461E:  MOVLW  00
04620:  ADDWFC 03,W
04622:  MOVWF  FEA
04624:  MOVF   FEF,F
04626:  BTFSS  FD8.2
04628:  BRA    47EC
....................             { 
....................                        printf("shitter"); 
0462A:  MOVLW  CC
0462C:  MOVWF  FF6
0462E:  MOVLW  02
04630:  MOVWF  FF7
04632:  MOVLW  00
04634:  MOVWF  FF8
04636:  MOVLB  0
04638:  CALL   2222
0463C:  CLRF   1B
0463E:  BTFSC  FF2.7
04640:  BSF    1B.7
04642:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
04644:  MOVLB  6
04646:  CLRF   xD7
04648:  MOVFF  65E,6D6
0464C:  CLRF   xD9
0464E:  MOVLW  2F
04650:  MOVWF  xD8
04652:  MOVLB  0
04654:  CALL   0442
04658:  BTFSC  1B.7
0465A:  BSF    FF2.7
0465C:  MOVF   01,W
0465E:  ADDLW  4C
04660:  MOVLB  6
04662:  MOVWF  x60
04664:  MOVLW  01
04666:  ADDWFC 02,W
04668:  MOVWF  x61
0466A:  MOVLW  01
0466C:  ADDWF  x60,W
0466E:  MOVWF  01
04670:  MOVLW  00
04672:  ADDWFC x61,W
04674:  MOVWF  03
04676:  MOVF   01,W
04678:  ADDLW  3E
0467A:  MOVWF  01
0467C:  MOVLW  01
0467E:  ADDWFC 03,F
04680:  MOVF   01,W
04682:  ADDLW  08
04684:  MOVWF  FE9
04686:  MOVLW  00
04688:  ADDWFC 03,W
0468A:  MOVWF  FEA
0468C:  MOVF   FEF,F
0468E:  BTFSC  FD8.2
04690:  BRA    479C
04692:  CLRF   1B
04694:  BTFSC  FF2.7
04696:  BSF    1B.7
04698:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
0469A:  CLRF   xD7
0469C:  MOVFF  65E,6D6
046A0:  CLRF   xD9
046A2:  MOVLW  2F
046A4:  MOVWF  xD8
046A6:  MOVLB  0
046A8:  CALL   0442
046AC:  BTFSC  1B.7
046AE:  BSF    FF2.7
046B0:  MOVF   01,W
046B2:  ADDLW  4C
046B4:  MOVLB  6
046B6:  MOVWF  x60
046B8:  MOVLW  01
046BA:  ADDWFC 02,W
046BC:  MOVWF  x61
046BE:  MOVLW  01
046C0:  ADDWF  x60,W
046C2:  MOVWF  01
046C4:  MOVLW  00
046C6:  ADDWFC x61,W
046C8:  MOVWF  03
046CA:  MOVF   01,W
046CC:  ADDLW  3E
046CE:  MOVWF  01
046D0:  MOVLW  01
046D2:  ADDWFC 03,F
046D4:  MOVF   01,W
046D6:  ADDLW  2A
046D8:  MOVWF  FE9
046DA:  MOVLW  00
046DC:  ADDWFC 03,W
046DE:  MOVWF  FEA
046E0:  CLRF   FEF
046E2:  CLRF   1B
046E4:  BTFSC  FF2.7
046E6:  BSF    1B.7
046E8:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
046EA:  CLRF   xD7
046EC:  MOVFF  65E,6D6
046F0:  CLRF   xD9
046F2:  MOVLW  2F
046F4:  MOVWF  xD8
046F6:  MOVLB  0
046F8:  CALL   0442
046FC:  BTFSC  1B.7
046FE:  BSF    FF2.7
04700:  MOVF   01,W
04702:  ADDLW  4C
04704:  MOVLB  6
04706:  MOVWF  x60
04708:  MOVLW  01
0470A:  ADDWFC 02,W
0470C:  MOVWF  x61
0470E:  MOVLW  01
04710:  ADDWF  x60,W
04712:  MOVWF  01
04714:  MOVLW  00
04716:  ADDWFC x61,W
04718:  MOVWF  03
0471A:  MOVF   01,W
0471C:  ADDLW  3E
0471E:  MOVWF  01
04720:  MOVLW  01
04722:  ADDWFC 03,F
04724:  MOVF   01,W
04726:  ADDLW  2D
04728:  MOVWF  FE9
0472A:  MOVLW  00
0472C:  ADDWFC 03,W
0472E:  MOVWF  FEA
04730:  CLRF   FEF
04732:  CLRF   1B
04734:  BTFSC  FF2.7
04736:  BSF    1B.7
04738:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
0473A:  CLRF   xD7
0473C:  MOVFF  65E,6D6
04740:  CLRF   xD9
04742:  MOVLW  2F
04744:  MOVWF  xD8
04746:  MOVLB  0
04748:  CALL   0442
0474C:  BTFSC  1B.7
0474E:  BSF    FF2.7
04750:  MOVF   01,W
04752:  ADDLW  4C
04754:  MOVLB  6
04756:  MOVWF  x60
04758:  MOVLW  01
0475A:  ADDWFC 02,W
0475C:  MOVWF  x61
0475E:  MOVLW  01
04760:  ADDWF  x60,W
04762:  MOVWF  01
04764:  MOVLW  00
04766:  ADDWFC x61,W
04768:  MOVWF  03
0476A:  MOVF   01,W
0476C:  ADDLW  3E
0476E:  MOVWF  01
04770:  MOVLW  01
04772:  ADDWFC 03,F
04774:  MOVF   01,W
04776:  ADDLW  28
04778:  MOVWF  FE9
0477A:  MOVLW  00
0477C:  ADDWFC 03,W
0477E:  MOVWF  FEA
04780:  BCF    FD8.0
04782:  RLCF   FEF,W
04784:  CLRF   03
04786:  MOVLB  0
04788:  CALL   0172
0478C:  TBLRD*+
0478E:  MOVFF  FF5,03
04792:  MOVLB  5
04794:  ANDWF  x7F,F
04796:  MOVF   03,W
04798:  ANDWF  x80,F
0479A:  MOVLB  6
0479C:  CLRF   1B
0479E:  BTFSC  FF2.7
047A0:  BSF    1B.7
047A2:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
047A4:  CLRF   xD7
047A6:  MOVFF  65E,6D6
047AA:  CLRF   xD9
047AC:  MOVLW  2F
047AE:  MOVWF  xD8
047B0:  MOVLB  0
047B2:  CALL   0442
047B6:  BTFSC  1B.7
047B8:  BSF    FF2.7
047BA:  MOVF   01,W
047BC:  ADDLW  4C
047BE:  MOVLB  6
047C0:  MOVWF  x60
047C2:  MOVLW  01
047C4:  ADDWFC 02,W
047C6:  MOVWF  x61
047C8:  MOVLW  01
047CA:  ADDWF  x60,W
047CC:  MOVWF  01
047CE:  MOVLW  00
047D0:  ADDWFC x61,W
047D2:  MOVWF  03
047D4:  MOVF   01,W
047D6:  ADDLW  3E
047D8:  MOVWF  01
047DA:  MOVLW  01
047DC:  ADDWFC 03,F
047DE:  MOVF   01,W
047E0:  ADDLW  09
047E2:  MOVWF  FE9
047E4:  MOVLW  00
047E6:  ADDWFC 03,W
047E8:  MOVWF  FEA
047EA:  BCF    FEF.0
047EC:  CLRF   1B
047EE:  BTFSC  FF2.7
047F0:  BSF    1B.7
047F2:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
047F4:  CLRF   xD7
047F6:  MOVFF  65E,6D6
047FA:  CLRF   xD9
047FC:  MOVLW  2F
047FE:  MOVWF  xD8
04800:  MOVLB  0
04802:  CALL   0442
04806:  BTFSC  1B.7
04808:  BSF    FF2.7
0480A:  MOVF   01,W
0480C:  ADDLW  4C
0480E:  MOVLB  6
04810:  MOVWF  x60
04812:  MOVLW  01
04814:  ADDWFC 02,W
04816:  MOVWF  x61
04818:  MOVLW  01
0481A:  ADDWF  x60,W
0481C:  MOVWF  01
0481E:  MOVLW  00
04820:  ADDWFC x61,W
04822:  MOVWF  03
04824:  MOVF   01,W
04826:  ADDLW  3E
04828:  MOVWF  01
0482A:  MOVLW  01
0482C:  ADDWFC 03,F
0482E:  MOVF   01,W
04830:  ADDLW  13
04832:  MOVWF  FE9
04834:  MOVLW  00
04836:  ADDWFC 03,W
04838:  MOVWF  FEA
0483A:  BTFSS  FEF.0
0483C:  BRA    4A94
0483E:  CLRF   1B
04840:  BTFSC  FF2.7
04842:  BSF    1B.7
04844:  BCF    FF2.7
04846:  CLRF   xD7
04848:  MOVFF  65E,6D6
0484C:  CLRF   xD9
0484E:  MOVLW  2F
04850:  MOVWF  xD8
04852:  MOVLB  0
04854:  CALL   0442
04858:  BTFSC  1B.7
0485A:  BSF    FF2.7
0485C:  MOVF   01,W
0485E:  ADDLW  4C
04860:  MOVLB  6
04862:  MOVWF  x62
04864:  MOVLW  01
04866:  ADDWFC 02,W
04868:  MOVWF  x63
0486A:  MOVLW  01
0486C:  ADDWF  x62,W
0486E:  MOVWF  01
04870:  MOVLW  00
04872:  ADDWFC x63,W
04874:  MOVWF  03
04876:  MOVF   01,W
04878:  ADDLW  3E
0487A:  MOVWF  01
0487C:  MOVLW  01
0487E:  ADDWFC 03,F
04880:  MOVF   01,W
04882:  ADDLW  2D
04884:  MOVWF  FE9
04886:  MOVLW  00
04888:  ADDWFC 03,W
0488A:  MOVWF  FEA
0488C:  MOVF   FEF,W
0488E:  SUBLW  04
04890:  BZ    48E4
04892:  CLRF   1B
04894:  BTFSC  FF2.7
04896:  BSF    1B.7
04898:  BCF    FF2.7
0489A:  CLRF   xD7
0489C:  MOVFF  65E,6D6
048A0:  CLRF   xD9
048A2:  MOVLW  2F
048A4:  MOVWF  xD8
048A6:  MOVLB  0
048A8:  CALL   0442
048AC:  BTFSC  1B.7
048AE:  BSF    FF2.7
048B0:  MOVF   01,W
048B2:  ADDLW  4C
048B4:  MOVLB  6
048B6:  MOVWF  x64
048B8:  MOVLW  01
048BA:  ADDWFC 02,W
048BC:  MOVWF  x65
048BE:  MOVLW  01
048C0:  ADDWF  x64,W
048C2:  MOVWF  01
048C4:  MOVLW  00
048C6:  ADDWFC x65,W
048C8:  MOVWF  03
048CA:  MOVF   01,W
048CC:  ADDLW  3E
048CE:  MOVWF  01
048D0:  MOVLW  01
048D2:  ADDWFC 03,F
048D4:  MOVF   01,W
048D6:  ADDLW  2D
048D8:  MOVWF  FE9
048DA:  MOVLW  00
048DC:  ADDWFC 03,W
048DE:  MOVWF  FEA
048E0:  DECFSZ FEF,W
048E2:  BRA    4A94
048E4:  CLRF   1B
048E6:  BTFSC  FF2.7
048E8:  BSF    1B.7
048EA:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
048EC:  CLRF   xD7
048EE:  MOVFF  65E,6D6
048F2:  CLRF   xD9
048F4:  MOVLW  2F
048F6:  MOVWF  xD8
048F8:  MOVLB  0
048FA:  CALL   0442
048FE:  BTFSC  1B.7
04900:  BSF    FF2.7
04902:  MOVF   01,W
04904:  ADDLW  4C
04906:  MOVLB  6
04908:  MOVWF  x60
0490A:  MOVLW  01
0490C:  ADDWFC 02,W
0490E:  MOVWF  x61
04910:  MOVLW  01
04912:  ADDWF  x60,W
04914:  MOVWF  01
04916:  MOVLW  00
04918:  ADDWFC x61,W
0491A:  MOVWF  03
0491C:  MOVF   01,W
0491E:  ADDLW  3E
04920:  MOVWF  01
04922:  MOVLW  01
04924:  ADDWFC 03,F
04926:  MOVF   01,W
04928:  ADDLW  12
0492A:  MOVWF  FE9
0492C:  MOVLW  00
0492E:  ADDWFC 03,W
04930:  MOVWF  FEA
04932:  MOVF   FEF,F
04934:  BTFSC  FD8.2
04936:  BRA    4A44
04938:  CLRF   1B
0493A:  BTFSC  FF2.7
0493C:  BSF    1B.7
0493E:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04940:  CLRF   xD7
04942:  MOVFF  65E,6D6
04946:  CLRF   xD9
04948:  MOVLW  2F
0494A:  MOVWF  xD8
0494C:  MOVLB  0
0494E:  CALL   0442
04952:  BTFSC  1B.7
04954:  BSF    FF2.7
04956:  MOVF   01,W
04958:  ADDLW  4C
0495A:  MOVLB  6
0495C:  MOVWF  x60
0495E:  MOVLW  01
04960:  ADDWFC 02,W
04962:  MOVWF  x61
04964:  MOVLW  01
04966:  ADDWF  x60,W
04968:  MOVWF  01
0496A:  MOVLW  00
0496C:  ADDWFC x61,W
0496E:  MOVWF  03
04970:  MOVF   01,W
04972:  ADDLW  3E
04974:  MOVWF  01
04976:  MOVLW  01
04978:  ADDWFC 03,F
0497A:  MOVF   01,W
0497C:  ADDLW  2A
0497E:  MOVWF  FE9
04980:  MOVLW  00
04982:  ADDWFC 03,W
04984:  MOVWF  FEA
04986:  CLRF   FEF
04988:  CLRF   1B
0498A:  BTFSC  FF2.7
0498C:  BSF    1B.7
0498E:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
04990:  CLRF   xD7
04992:  MOVFF  65E,6D6
04996:  CLRF   xD9
04998:  MOVLW  2F
0499A:  MOVWF  xD8
0499C:  MOVLB  0
0499E:  CALL   0442
049A2:  BTFSC  1B.7
049A4:  BSF    FF2.7
049A6:  MOVF   01,W
049A8:  ADDLW  4C
049AA:  MOVLB  6
049AC:  MOVWF  x60
049AE:  MOVLW  01
049B0:  ADDWFC 02,W
049B2:  MOVWF  x61
049B4:  MOVLW  01
049B6:  ADDWF  x60,W
049B8:  MOVWF  01
049BA:  MOVLW  00
049BC:  ADDWFC x61,W
049BE:  MOVWF  03
049C0:  MOVF   01,W
049C2:  ADDLW  3E
049C4:  MOVWF  01
049C6:  MOVLW  01
049C8:  ADDWFC 03,F
049CA:  MOVF   01,W
049CC:  ADDLW  2D
049CE:  MOVWF  FE9
049D0:  MOVLW  00
049D2:  ADDWFC 03,W
049D4:  MOVWF  FEA
049D6:  MOVLW  01
049D8:  MOVWF  FEF
049DA:  CLRF   1B
049DC:  BTFSC  FF2.7
049DE:  BSF    1B.7
049E0:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
049E2:  CLRF   xD7
049E4:  MOVFF  65E,6D6
049E8:  CLRF   xD9
049EA:  MOVLW  2F
049EC:  MOVWF  xD8
049EE:  MOVLB  0
049F0:  CALL   0442
049F4:  BTFSC  1B.7
049F6:  BSF    FF2.7
049F8:  MOVF   01,W
049FA:  ADDLW  4C
049FC:  MOVLB  6
049FE:  MOVWF  x60
04A00:  MOVLW  01
04A02:  ADDWFC 02,W
04A04:  MOVWF  x61
04A06:  MOVLW  01
04A08:  ADDWF  x60,W
04A0A:  MOVWF  01
04A0C:  MOVLW  00
04A0E:  ADDWFC x61,W
04A10:  MOVWF  03
04A12:  MOVF   01,W
04A14:  ADDLW  3E
04A16:  MOVWF  01
04A18:  MOVLW  01
04A1A:  ADDWFC 03,F
04A1C:  MOVF   01,W
04A1E:  ADDLW  29
04A20:  MOVWF  FE9
04A22:  MOVLW  00
04A24:  ADDWFC 03,W
04A26:  MOVWF  FEA
04A28:  BCF    FD8.0
04A2A:  RLCF   FEF,W
04A2C:  CLRF   03
04A2E:  MOVLB  0
04A30:  CALL   0172
04A34:  TBLRD*+
04A36:  MOVFF  FF5,03
04A3A:  MOVLB  5
04A3C:  ANDWF  x7F,F
04A3E:  MOVF   03,W
04A40:  ANDWF  x80,F
04A42:  MOVLB  6
04A44:  CLRF   1B
04A46:  BTFSC  FF2.7
04A48:  BSF    1B.7
04A4A:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04A4C:  CLRF   xD7
04A4E:  MOVFF  65E,6D6
04A52:  CLRF   xD9
04A54:  MOVLW  2F
04A56:  MOVWF  xD8
04A58:  MOVLB  0
04A5A:  CALL   0442
04A5E:  BTFSC  1B.7
04A60:  BSF    FF2.7
04A62:  MOVF   01,W
04A64:  ADDLW  4C
04A66:  MOVLB  6
04A68:  MOVWF  x60
04A6A:  MOVLW  01
04A6C:  ADDWFC 02,W
04A6E:  MOVWF  x61
04A70:  MOVLW  01
04A72:  ADDWF  x60,W
04A74:  MOVWF  01
04A76:  MOVLW  00
04A78:  ADDWFC x61,W
04A7A:  MOVWF  03
04A7C:  MOVF   01,W
04A7E:  ADDLW  3E
04A80:  MOVWF  01
04A82:  MOVLW  01
04A84:  ADDWFC 03,F
04A86:  MOVF   01,W
04A88:  ADDLW  13
04A8A:  MOVWF  FE9
04A8C:  MOVLW  00
04A8E:  ADDWFC 03,W
04A90:  MOVWF  FEA
04A92:  BCF    FEF.0
04A94:  CLRF   1B
04A96:  BTFSC  FF2.7
04A98:  BSF    1B.7
04A9A:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
04A9C:  CLRF   xD7
04A9E:  MOVFF  65E,6D6
04AA2:  CLRF   xD9
04AA4:  MOVLW  2F
04AA6:  MOVWF  xD8
04AA8:  MOVLB  0
04AAA:  CALL   0442
04AAE:  BTFSC  1B.7
04AB0:  BSF    FF2.7
04AB2:  MOVF   01,W
04AB4:  ADDLW  4C
04AB6:  MOVLB  6
04AB8:  MOVWF  x60
04ABA:  MOVLW  01
04ABC:  ADDWFC 02,W
04ABE:  MOVWF  x61
04AC0:  MOVLW  01
04AC2:  ADDWF  x60,W
04AC4:  MOVWF  01
04AC6:  MOVLW  00
04AC8:  ADDWFC x61,W
04ACA:  MOVWF  03
04ACC:  MOVF   01,W
04ACE:  ADDLW  3E
04AD0:  MOVWF  01
04AD2:  MOVLW  01
04AD4:  ADDWFC 03,F
04AD6:  MOVF   01,W
04AD8:  ADDLW  1D
04ADA:  MOVWF  FE9
04ADC:  MOVLW  00
04ADE:  ADDWFC 03,W
04AE0:  MOVWF  FEA
04AE2:  BTFSS  FEF.0
04AE4:  BRA    4D40
04AE6:  CLRF   1B
04AE8:  BTFSC  FF2.7
04AEA:  BSF    1B.7
04AEC:  BCF    FF2.7
04AEE:  CLRF   xD7
04AF0:  MOVFF  65E,6D6
04AF4:  CLRF   xD9
04AF6:  MOVLW  2F
04AF8:  MOVWF  xD8
04AFA:  MOVLB  0
04AFC:  CALL   0442
04B00:  BTFSC  1B.7
04B02:  BSF    FF2.7
04B04:  MOVF   01,W
04B06:  ADDLW  4C
04B08:  MOVLB  6
04B0A:  MOVWF  x62
04B0C:  MOVLW  01
04B0E:  ADDWFC 02,W
04B10:  MOVWF  x63
04B12:  MOVLW  01
04B14:  ADDWF  x62,W
04B16:  MOVWF  01
04B18:  MOVLW  00
04B1A:  ADDWFC x63,W
04B1C:  MOVWF  03
04B1E:  MOVF   01,W
04B20:  ADDLW  3E
04B22:  MOVWF  01
04B24:  MOVLW  01
04B26:  ADDWFC 03,F
04B28:  MOVF   01,W
04B2A:  ADDLW  2D
04B2C:  MOVWF  FE9
04B2E:  MOVLW  00
04B30:  ADDWFC 03,W
04B32:  MOVWF  FEA
04B34:  MOVF   FEF,W
04B36:  SUBLW  04
04B38:  BZ    4B90
04B3A:  CLRF   1B
04B3C:  BTFSC  FF2.7
04B3E:  BSF    1B.7
04B40:  BCF    FF2.7
04B42:  CLRF   xD7
04B44:  MOVFF  65E,6D6
04B48:  CLRF   xD9
04B4A:  MOVLW  2F
04B4C:  MOVWF  xD8
04B4E:  MOVLB  0
04B50:  CALL   0442
04B54:  BTFSC  1B.7
04B56:  BSF    FF2.7
04B58:  MOVF   01,W
04B5A:  ADDLW  4C
04B5C:  MOVLB  6
04B5E:  MOVWF  x64
04B60:  MOVLW  01
04B62:  ADDWFC 02,W
04B64:  MOVWF  x65
04B66:  MOVLW  01
04B68:  ADDWF  x64,W
04B6A:  MOVWF  01
04B6C:  MOVLW  00
04B6E:  ADDWFC x65,W
04B70:  MOVWF  03
04B72:  MOVF   01,W
04B74:  ADDLW  3E
04B76:  MOVWF  01
04B78:  MOVLW  01
04B7A:  ADDWFC 03,F
04B7C:  MOVF   01,W
04B7E:  ADDLW  2D
04B80:  MOVWF  FE9
04B82:  MOVLW  00
04B84:  ADDWFC 03,W
04B86:  MOVWF  FEA
04B88:  MOVF   FEF,W
04B8A:  SUBLW  02
04B8C:  BTFSS  FD8.2
04B8E:  BRA    4D40
04B90:  CLRF   1B
04B92:  BTFSC  FF2.7
04B94:  BSF    1B.7
04B96:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
04B98:  CLRF   xD7
04B9A:  MOVFF  65E,6D6
04B9E:  CLRF   xD9
04BA0:  MOVLW  2F
04BA2:  MOVWF  xD8
04BA4:  MOVLB  0
04BA6:  CALL   0442
04BAA:  BTFSC  1B.7
04BAC:  BSF    FF2.7
04BAE:  MOVF   01,W
04BB0:  ADDLW  4C
04BB2:  MOVLB  6
04BB4:  MOVWF  x60
04BB6:  MOVLW  01
04BB8:  ADDWFC 02,W
04BBA:  MOVWF  x61
04BBC:  MOVLW  01
04BBE:  ADDWF  x60,W
04BC0:  MOVWF  01
04BC2:  MOVLW  00
04BC4:  ADDWFC x61,W
04BC6:  MOVWF  03
04BC8:  MOVF   01,W
04BCA:  ADDLW  3E
04BCC:  MOVWF  01
04BCE:  MOVLW  01
04BD0:  ADDWFC 03,F
04BD2:  MOVF   01,W
04BD4:  ADDLW  1C
04BD6:  MOVWF  FE9
04BD8:  MOVLW  00
04BDA:  ADDWFC 03,W
04BDC:  MOVWF  FEA
04BDE:  MOVF   FEF,F
04BE0:  BTFSC  FD8.2
04BE2:  BRA    4CF0
04BE4:  CLRF   1B
04BE6:  BTFSC  FF2.7
04BE8:  BSF    1B.7
04BEA:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04BEC:  CLRF   xD7
04BEE:  MOVFF  65E,6D6
04BF2:  CLRF   xD9
04BF4:  MOVLW  2F
04BF6:  MOVWF  xD8
04BF8:  MOVLB  0
04BFA:  CALL   0442
04BFE:  BTFSC  1B.7
04C00:  BSF    FF2.7
04C02:  MOVF   01,W
04C04:  ADDLW  4C
04C06:  MOVLB  6
04C08:  MOVWF  x60
04C0A:  MOVLW  01
04C0C:  ADDWFC 02,W
04C0E:  MOVWF  x61
04C10:  MOVLW  01
04C12:  ADDWF  x60,W
04C14:  MOVWF  01
04C16:  MOVLW  00
04C18:  ADDWFC x61,W
04C1A:  MOVWF  03
04C1C:  MOVF   01,W
04C1E:  ADDLW  3E
04C20:  MOVWF  01
04C22:  MOVLW  01
04C24:  ADDWFC 03,F
04C26:  MOVF   01,W
04C28:  ADDLW  2A
04C2A:  MOVWF  FE9
04C2C:  MOVLW  00
04C2E:  ADDWFC 03,W
04C30:  MOVWF  FEA
04C32:  CLRF   FEF
04C34:  CLRF   1B
04C36:  BTFSC  FF2.7
04C38:  BSF    1B.7
04C3A:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
04C3C:  CLRF   xD7
04C3E:  MOVFF  65E,6D6
04C42:  CLRF   xD9
04C44:  MOVLW  2F
04C46:  MOVWF  xD8
04C48:  MOVLB  0
04C4A:  CALL   0442
04C4E:  BTFSC  1B.7
04C50:  BSF    FF2.7
04C52:  MOVF   01,W
04C54:  ADDLW  4C
04C56:  MOVLB  6
04C58:  MOVWF  x60
04C5A:  MOVLW  01
04C5C:  ADDWFC 02,W
04C5E:  MOVWF  x61
04C60:  MOVLW  01
04C62:  ADDWF  x60,W
04C64:  MOVWF  01
04C66:  MOVLW  00
04C68:  ADDWFC x61,W
04C6A:  MOVWF  03
04C6C:  MOVF   01,W
04C6E:  ADDLW  3E
04C70:  MOVWF  01
04C72:  MOVLW  01
04C74:  ADDWFC 03,F
04C76:  MOVF   01,W
04C78:  ADDLW  2D
04C7A:  MOVWF  FE9
04C7C:  MOVLW  00
04C7E:  ADDWFC 03,W
04C80:  MOVWF  FEA
04C82:  MOVLW  02
04C84:  MOVWF  FEF
04C86:  CLRF   1B
04C88:  BTFSC  FF2.7
04C8A:  BSF    1B.7
04C8C:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04C8E:  CLRF   xD7
04C90:  MOVFF  65E,6D6
04C94:  CLRF   xD9
04C96:  MOVLW  2F
04C98:  MOVWF  xD8
04C9A:  MOVLB  0
04C9C:  CALL   0442
04CA0:  BTFSC  1B.7
04CA2:  BSF    FF2.7
04CA4:  MOVF   01,W
04CA6:  ADDLW  4C
04CA8:  MOVLB  6
04CAA:  MOVWF  x60
04CAC:  MOVLW  01
04CAE:  ADDWFC 02,W
04CB0:  MOVWF  x61
04CB2:  MOVLW  01
04CB4:  ADDWF  x60,W
04CB6:  MOVWF  01
04CB8:  MOVLW  00
04CBA:  ADDWFC x61,W
04CBC:  MOVWF  03
04CBE:  MOVF   01,W
04CC0:  ADDLW  3E
04CC2:  MOVWF  01
04CC4:  MOVLW  01
04CC6:  ADDWFC 03,F
04CC8:  MOVF   01,W
04CCA:  ADDLW  28
04CCC:  MOVWF  FE9
04CCE:  MOVLW  00
04CD0:  ADDWFC 03,W
04CD2:  MOVWF  FEA
04CD4:  BCF    FD8.0
04CD6:  RLCF   FEF,W
04CD8:  CLRF   03
04CDA:  MOVLB  0
04CDC:  CALL   0172
04CE0:  TBLRD*+
04CE2:  MOVFF  FF5,03
04CE6:  MOVLB  5
04CE8:  ANDWF  x7F,F
04CEA:  MOVF   03,W
04CEC:  ANDWF  x80,F
04CEE:  MOVLB  6
04CF0:  CLRF   1B
04CF2:  BTFSC  FF2.7
04CF4:  BSF    1B.7
04CF6:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
04CF8:  CLRF   xD7
04CFA:  MOVFF  65E,6D6
04CFE:  CLRF   xD9
04D00:  MOVLW  2F
04D02:  MOVWF  xD8
04D04:  MOVLB  0
04D06:  CALL   0442
04D0A:  BTFSC  1B.7
04D0C:  BSF    FF2.7
04D0E:  MOVF   01,W
04D10:  ADDLW  4C
04D12:  MOVLB  6
04D14:  MOVWF  x60
04D16:  MOVLW  01
04D18:  ADDWFC 02,W
04D1A:  MOVWF  x61
04D1C:  MOVLW  01
04D1E:  ADDWF  x60,W
04D20:  MOVWF  01
04D22:  MOVLW  00
04D24:  ADDWFC x61,W
04D26:  MOVWF  03
04D28:  MOVF   01,W
04D2A:  ADDLW  3E
04D2C:  MOVWF  01
04D2E:  MOVLW  01
04D30:  ADDWFC 03,F
04D32:  MOVF   01,W
04D34:  ADDLW  1D
04D36:  MOVWF  FE9
04D38:  MOVLW  00
04D3A:  ADDWFC 03,W
04D3C:  MOVWF  FEA
04D3E:  BCF    FEF.0
04D40:  CLRF   1B
04D42:  BTFSC  FF2.7
04D44:  BSF    1B.7
04D46:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
04D48:  CLRF   xD7
04D4A:  MOVFF  65E,6D6
04D4E:  CLRF   xD9
04D50:  MOVLW  2F
04D52:  MOVWF  xD8
04D54:  MOVLB  0
04D56:  CALL   0442
04D5A:  BTFSC  1B.7
04D5C:  BSF    FF2.7
04D5E:  MOVF   01,W
04D60:  ADDLW  4C
04D62:  MOVLB  6
04D64:  MOVWF  x60
04D66:  MOVLW  01
04D68:  ADDWFC 02,W
04D6A:  MOVWF  x61
04D6C:  MOVLW  01
04D6E:  ADDWF  x60,W
04D70:  MOVWF  01
04D72:  MOVLW  00
04D74:  ADDWFC x61,W
04D76:  MOVWF  03
04D78:  MOVF   01,W
04D7A:  ADDLW  3E
04D7C:  MOVWF  01
04D7E:  MOVLW  01
04D80:  ADDWFC 03,F
04D82:  MOVF   01,W
04D84:  ADDLW  27
04D86:  MOVWF  FE9
04D88:  MOVLW  00
04D8A:  ADDWFC 03,W
04D8C:  MOVWF  FEA
04D8E:  BTFSS  FEF.0
04D90:  BRA    4FEC
04D92:  CLRF   1B
04D94:  BTFSC  FF2.7
04D96:  BSF    1B.7
04D98:  BCF    FF2.7
04D9A:  CLRF   xD7
04D9C:  MOVFF  65E,6D6
04DA0:  CLRF   xD9
04DA2:  MOVLW  2F
04DA4:  MOVWF  xD8
04DA6:  MOVLB  0
04DA8:  CALL   0442
04DAC:  BTFSC  1B.7
04DAE:  BSF    FF2.7
04DB0:  MOVF   01,W
04DB2:  ADDLW  4C
04DB4:  MOVLB  6
04DB6:  MOVWF  x62
04DB8:  MOVLW  01
04DBA:  ADDWFC 02,W
04DBC:  MOVWF  x63
04DBE:  MOVLW  01
04DC0:  ADDWF  x62,W
04DC2:  MOVWF  01
04DC4:  MOVLW  00
04DC6:  ADDWFC x63,W
04DC8:  MOVWF  03
04DCA:  MOVF   01,W
04DCC:  ADDLW  3E
04DCE:  MOVWF  01
04DD0:  MOVLW  01
04DD2:  ADDWFC 03,F
04DD4:  MOVF   01,W
04DD6:  ADDLW  2D
04DD8:  MOVWF  FE9
04DDA:  MOVLW  00
04DDC:  ADDWFC 03,W
04DDE:  MOVWF  FEA
04DE0:  MOVF   FEF,W
04DE2:  SUBLW  04
04DE4:  BZ    4E3C
04DE6:  CLRF   1B
04DE8:  BTFSC  FF2.7
04DEA:  BSF    1B.7
04DEC:  BCF    FF2.7
04DEE:  CLRF   xD7
04DF0:  MOVFF  65E,6D6
04DF4:  CLRF   xD9
04DF6:  MOVLW  2F
04DF8:  MOVWF  xD8
04DFA:  MOVLB  0
04DFC:  CALL   0442
04E00:  BTFSC  1B.7
04E02:  BSF    FF2.7
04E04:  MOVF   01,W
04E06:  ADDLW  4C
04E08:  MOVLB  6
04E0A:  MOVWF  x64
04E0C:  MOVLW  01
04E0E:  ADDWFC 02,W
04E10:  MOVWF  x65
04E12:  MOVLW  01
04E14:  ADDWF  x64,W
04E16:  MOVWF  01
04E18:  MOVLW  00
04E1A:  ADDWFC x65,W
04E1C:  MOVWF  03
04E1E:  MOVF   01,W
04E20:  ADDLW  3E
04E22:  MOVWF  01
04E24:  MOVLW  01
04E26:  ADDWFC 03,F
04E28:  MOVF   01,W
04E2A:  ADDLW  2D
04E2C:  MOVWF  FE9
04E2E:  MOVLW  00
04E30:  ADDWFC 03,W
04E32:  MOVWF  FEA
04E34:  MOVF   FEF,W
04E36:  SUBLW  03
04E38:  BTFSS  FD8.2
04E3A:  BRA    4FEC
04E3C:  CLRF   1B
04E3E:  BTFSC  FF2.7
04E40:  BSF    1B.7
04E42:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
04E44:  CLRF   xD7
04E46:  MOVFF  65E,6D6
04E4A:  CLRF   xD9
04E4C:  MOVLW  2F
04E4E:  MOVWF  xD8
04E50:  MOVLB  0
04E52:  CALL   0442
04E56:  BTFSC  1B.7
04E58:  BSF    FF2.7
04E5A:  MOVF   01,W
04E5C:  ADDLW  4C
04E5E:  MOVLB  6
04E60:  MOVWF  x60
04E62:  MOVLW  01
04E64:  ADDWFC 02,W
04E66:  MOVWF  x61
04E68:  MOVLW  01
04E6A:  ADDWF  x60,W
04E6C:  MOVWF  01
04E6E:  MOVLW  00
04E70:  ADDWFC x61,W
04E72:  MOVWF  03
04E74:  MOVF   01,W
04E76:  ADDLW  3E
04E78:  MOVWF  01
04E7A:  MOVLW  01
04E7C:  ADDWFC 03,F
04E7E:  MOVF   01,W
04E80:  ADDLW  26
04E82:  MOVWF  FE9
04E84:  MOVLW  00
04E86:  ADDWFC 03,W
04E88:  MOVWF  FEA
04E8A:  MOVF   FEF,F
04E8C:  BTFSC  FD8.2
04E8E:  BRA    4F9C
04E90:  CLRF   1B
04E92:  BTFSC  FF2.7
04E94:  BSF    1B.7
04E96:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04E98:  CLRF   xD7
04E9A:  MOVFF  65E,6D6
04E9E:  CLRF   xD9
04EA0:  MOVLW  2F
04EA2:  MOVWF  xD8
04EA4:  MOVLB  0
04EA6:  CALL   0442
04EAA:  BTFSC  1B.7
04EAC:  BSF    FF2.7
04EAE:  MOVF   01,W
04EB0:  ADDLW  4C
04EB2:  MOVLB  6
04EB4:  MOVWF  x60
04EB6:  MOVLW  01
04EB8:  ADDWFC 02,W
04EBA:  MOVWF  x61
04EBC:  MOVLW  01
04EBE:  ADDWF  x60,W
04EC0:  MOVWF  01
04EC2:  MOVLW  00
04EC4:  ADDWFC x61,W
04EC6:  MOVWF  03
04EC8:  MOVF   01,W
04ECA:  ADDLW  3E
04ECC:  MOVWF  01
04ECE:  MOVLW  01
04ED0:  ADDWFC 03,F
04ED2:  MOVF   01,W
04ED4:  ADDLW  2A
04ED6:  MOVWF  FE9
04ED8:  MOVLW  00
04EDA:  ADDWFC 03,W
04EDC:  MOVWF  FEA
04EDE:  CLRF   FEF
04EE0:  CLRF   1B
04EE2:  BTFSC  FF2.7
04EE4:  BSF    1B.7
04EE6:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
04EE8:  CLRF   xD7
04EEA:  MOVFF  65E,6D6
04EEE:  CLRF   xD9
04EF0:  MOVLW  2F
04EF2:  MOVWF  xD8
04EF4:  MOVLB  0
04EF6:  CALL   0442
04EFA:  BTFSC  1B.7
04EFC:  BSF    FF2.7
04EFE:  MOVF   01,W
04F00:  ADDLW  4C
04F02:  MOVLB  6
04F04:  MOVWF  x60
04F06:  MOVLW  01
04F08:  ADDWFC 02,W
04F0A:  MOVWF  x61
04F0C:  MOVLW  01
04F0E:  ADDWF  x60,W
04F10:  MOVWF  01
04F12:  MOVLW  00
04F14:  ADDWFC x61,W
04F16:  MOVWF  03
04F18:  MOVF   01,W
04F1A:  ADDLW  3E
04F1C:  MOVWF  01
04F1E:  MOVLW  01
04F20:  ADDWFC 03,F
04F22:  MOVF   01,W
04F24:  ADDLW  2D
04F26:  MOVWF  FE9
04F28:  MOVLW  00
04F2A:  ADDWFC 03,W
04F2C:  MOVWF  FEA
04F2E:  MOVLW  03
04F30:  MOVWF  FEF
04F32:  CLRF   1B
04F34:  BTFSC  FF2.7
04F36:  BSF    1B.7
04F38:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04F3A:  CLRF   xD7
04F3C:  MOVFF  65E,6D6
04F40:  CLRF   xD9
04F42:  MOVLW  2F
04F44:  MOVWF  xD8
04F46:  MOVLB  0
04F48:  CALL   0442
04F4C:  BTFSC  1B.7
04F4E:  BSF    FF2.7
04F50:  MOVF   01,W
04F52:  ADDLW  4C
04F54:  MOVLB  6
04F56:  MOVWF  x60
04F58:  MOVLW  01
04F5A:  ADDWFC 02,W
04F5C:  MOVWF  x61
04F5E:  MOVLW  01
04F60:  ADDWF  x60,W
04F62:  MOVWF  01
04F64:  MOVLW  00
04F66:  ADDWFC x61,W
04F68:  MOVWF  03
04F6A:  MOVF   01,W
04F6C:  ADDLW  3E
04F6E:  MOVWF  01
04F70:  MOVLW  01
04F72:  ADDWFC 03,F
04F74:  MOVF   01,W
04F76:  ADDLW  29
04F78:  MOVWF  FE9
04F7A:  MOVLW  00
04F7C:  ADDWFC 03,W
04F7E:  MOVWF  FEA
04F80:  BCF    FD8.0
04F82:  RLCF   FEF,W
04F84:  CLRF   03
04F86:  MOVLB  0
04F88:  CALL   0172
04F8C:  TBLRD*+
04F8E:  MOVFF  FF5,03
04F92:  MOVLB  5
04F94:  ANDWF  x7F,F
04F96:  MOVF   03,W
04F98:  ANDWF  x80,F
04F9A:  MOVLB  6
04F9C:  CLRF   1B
04F9E:  BTFSC  FF2.7
04FA0:  BSF    1B.7
04FA2:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
04FA4:  CLRF   xD7
04FA6:  MOVFF  65E,6D6
04FAA:  CLRF   xD9
04FAC:  MOVLW  2F
04FAE:  MOVWF  xD8
04FB0:  MOVLB  0
04FB2:  CALL   0442
04FB6:  BTFSC  1B.7
04FB8:  BSF    FF2.7
04FBA:  MOVF   01,W
04FBC:  ADDLW  4C
04FBE:  MOVLB  6
04FC0:  MOVWF  x60
04FC2:  MOVLW  01
04FC4:  ADDWFC 02,W
04FC6:  MOVWF  x61
04FC8:  MOVLW  01
04FCA:  ADDWF  x60,W
04FCC:  MOVWF  01
04FCE:  MOVLW  00
04FD0:  ADDWFC x61,W
04FD2:  MOVWF  03
04FD4:  MOVF   01,W
04FD6:  ADDLW  3E
04FD8:  MOVWF  01
04FDA:  MOVLW  01
04FDC:  ADDWFC 03,F
04FDE:  MOVF   01,W
04FE0:  ADDLW  27
04FE2:  MOVWF  FE9
04FE4:  MOVLW  00
04FE6:  ADDWFC 03,W
04FE8:  MOVWF  FEA
04FEA:  BCF    FEF.0
....................             } 
....................             
....................             break; 
04FEC:  MOVLB  0
04FEE:  BRA    4FF0
....................    } 
....................    } 
04FF0:  MOVLB  6
04FF2:  INCF   x5E,F
04FF4:  GOTO   3C26
....................    if(update_dimmers) 
04FF8:  BTFSS  x5F.0
04FFA:  BRA    5004
....................       org(); 
04FFC:  MOVLB  0
04FFE:  CALL   3458
05002:  MOVLB  6
.................... } 
05004:  MOVLB  0
05006:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
055C4:  MOVLB  6
055C6:  CLRF   x71
055C8:  MOVF   x71,W
055CA:  SUBLW  07
055CC:  BNC   55EC
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
055CE:  CLRF   03
055D0:  MOVF   x71,W
055D2:  ADDWF  x6E,W
055D4:  MOVWF  FE9
055D6:  MOVF   x6F,W
055D8:  ADDWFC 03,W
055DA:  MOVWF  FEA
055DC:  MOVF   x70,W
055DE:  SUBWF  FEF,W
055E0:  BNZ   55E8
055E2:  MOVLW  01
055E4:  MOVWF  01
055E6:  BRA    55F0
....................    } 
055E8:  INCF   x71,F
055EA:  BRA    55C8
....................  
....................    return false; 
055EC:  MOVLW  00
055EE:  MOVWF  01
.................... } 
055F0:  MOVLB  0
055F2:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
055F4:  MOVLB  6
055F6:  CLRF   x69
055F8:  MOVLB  1
055FA:  MOVF   x3F,W
055FC:  MOVLB  6
055FE:  SUBWF  x69,W
05600:  BTFSC  FD8.0
05602:  GOTO   5FFA
05606:  CLRF   1B
05608:  BTFSC  FF2.7
0560A:  BSF    1B.7
0560C:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
0560E:  CLRF   xD7
05610:  MOVFF  669,6D6
05614:  CLRF   xD9
05616:  MOVLW  2F
05618:  MOVWF  xD8
0561A:  MOVLB  0
0561C:  CALL   0442
05620:  BTFSC  1B.7
05622:  BSF    FF2.7
05624:  MOVFF  02,03
05628:  MOVF   01,W
0562A:  ADDLW  8A
0562C:  MOVWF  01
0562E:  MOVLW  02
05630:  ADDWFC 03,F
05632:  MOVFF  01,FE9
05636:  MOVFF  03,FEA
0563A:  MOVF   FEF,W
0563C:  XORLW  65
0563E:  BZ    5650
05640:  XORLW  01
05642:  BTFSC  FD8.2
05644:  BRA    597C
05646:  XORLW  02
05648:  BTFSC  FD8.2
0564A:  BRA    5B96
0564C:  GOTO   5FF0
....................          case dimmer: 
05650:  CLRF   1B
05652:  BTFSC  FF2.7
05654:  BSF    1B.7
05656:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
05658:  MOVLB  6
0565A:  CLRF   xD7
0565C:  MOVFF  669,6D6
05660:  CLRF   xD9
05662:  MOVLW  2F
05664:  MOVWF  xD8
05666:  MOVLB  0
05668:  CALL   0442
0566C:  BTFSC  1B.7
0566E:  BSF    FF2.7
05670:  MOVF   01,W
05672:  ADDLW  4C
05674:  MOVLB  6
05676:  MOVWF  x6A
05678:  MOVLW  01
0567A:  ADDWFC 02,W
0567C:  MOVWF  x6B
0567E:  MOVLW  01
05680:  ADDWF  x6A,W
05682:  MOVWF  01
05684:  MOVLW  00
05686:  ADDWFC x6B,W
05688:  MOVWF  03
0568A:  MOVF   01,W
0568C:  ADDLW  3E
0568E:  MOVWF  01
05690:  MOVLW  01
05692:  ADDWFC 03,F
05694:  MOVF   01,W
05696:  ADDLW  14
05698:  MOVWF  01
0569A:  MOVLW  00
0569C:  ADDWFC 03,F
0569E:  MOVFF  01,66C
056A2:  MOVFF  03,66D
056A6:  MOVFF  03,66F
056AA:  MOVFF  01,66E
056AE:  MOVFF  667,670
056B2:  MOVLB  0
056B4:  RCALL  55C4
056B6:  MOVF   01,F
056B8:  BZ    5762
056BA:  CLRF   1B
056BC:  BTFSC  FF2.7
056BE:  BSF    1B.7
056C0:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
056C2:  MOVLB  6
056C4:  CLRF   xD7
056C6:  MOVFF  669,6D6
056CA:  CLRF   xD9
056CC:  MOVLW  2F
056CE:  MOVWF  xD8
056D0:  MOVLB  0
056D2:  CALL   0442
056D6:  BTFSC  1B.7
056D8:  BSF    FF2.7
056DA:  MOVF   01,W
056DC:  ADDLW  4C
056DE:  MOVLB  6
056E0:  MOVWF  x6A
056E2:  MOVLW  01
056E4:  ADDWFC 02,W
056E6:  MOVWF  x6B
056E8:  MOVLW  01
056EA:  ADDWF  x6A,W
056EC:  MOVWF  01
056EE:  MOVLW  00
056F0:  ADDWFC x6B,W
056F2:  MOVWF  03
056F4:  MOVF   01,W
056F6:  ADDLW  3E
056F8:  MOVWF  01
056FA:  MOVLW  01
056FC:  ADDWFC 03,F
056FE:  MOVF   01,W
05700:  ADDLW  1C
05702:  MOVWF  FE9
05704:  MOVLW  00
05706:  ADDWFC 03,W
05708:  MOVWF  FEA
0570A:  MOVFF  668,FEF
0570E:  CLRF   1B
05710:  BTFSC  FF2.7
05712:  BSF    1B.7
05714:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
05716:  CLRF   xD7
05718:  MOVFF  669,6D6
0571C:  CLRF   xD9
0571E:  MOVLW  2F
05720:  MOVWF  xD8
05722:  MOVLB  0
05724:  CALL   0442
05728:  BTFSC  1B.7
0572A:  BSF    FF2.7
0572C:  MOVF   01,W
0572E:  ADDLW  4C
05730:  MOVLB  6
05732:  MOVWF  x6A
05734:  MOVLW  01
05736:  ADDWFC 02,W
05738:  MOVWF  x6B
0573A:  MOVLW  01
0573C:  ADDWF  x6A,W
0573E:  MOVWF  01
05740:  MOVLW  00
05742:  ADDWFC x6B,W
05744:  MOVWF  03
05746:  MOVF   01,W
05748:  ADDLW  3E
0574A:  MOVWF  01
0574C:  MOVLW  01
0574E:  ADDWFC 03,F
05750:  MOVF   01,W
05752:  ADDLW  1D
05754:  MOVWF  FE9
05756:  MOVLW  00
05758:  ADDWFC 03,W
0575A:  MOVWF  FEA
0575C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
0575E:  BRA    5978
05760:  MOVLB  0
05762:  CLRF   1B
05764:  BTFSC  FF2.7
05766:  BSF    1B.7
05768:  BCF    FF2.7
0576A:  MOVLB  6
0576C:  CLRF   xD7
0576E:  MOVFF  669,6D6
05772:  CLRF   xD9
05774:  MOVLW  2F
05776:  MOVWF  xD8
05778:  MOVLB  0
0577A:  CALL   0442
0577E:  BTFSC  1B.7
05780:  BSF    FF2.7
05782:  MOVF   01,W
05784:  ADDLW  4C
05786:  MOVLB  6
05788:  MOVWF  x6A
0578A:  MOVLW  01
0578C:  ADDWFC 02,W
0578E:  MOVWF  x6B
05790:  MOVLW  01
05792:  ADDWF  x6A,W
05794:  MOVWF  01
05796:  MOVLW  00
05798:  ADDWFC x6B,W
0579A:  MOVWF  03
0579C:  MOVF   01,W
0579E:  ADDLW  3E
057A0:  MOVWF  01
057A2:  MOVLW  01
057A4:  ADDWFC 03,F
057A6:  MOVFF  01,66C
057AA:  MOVFF  03,66D
057AE:  MOVFF  03,66F
057B2:  MOVFF  01,66E
057B6:  MOVFF  667,670
057BA:  MOVLB  0
057BC:  RCALL  55C4
057BE:  MOVF   01,F
057C0:  BZ    586A
057C2:  CLRF   1B
057C4:  BTFSC  FF2.7
057C6:  BSF    1B.7
057C8:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
057CA:  MOVLB  6
057CC:  CLRF   xD7
057CE:  MOVFF  669,6D6
057D2:  CLRF   xD9
057D4:  MOVLW  2F
057D6:  MOVWF  xD8
057D8:  MOVLB  0
057DA:  CALL   0442
057DE:  BTFSC  1B.7
057E0:  BSF    FF2.7
057E2:  MOVF   01,W
057E4:  ADDLW  4C
057E6:  MOVLB  6
057E8:  MOVWF  x6A
057EA:  MOVLW  01
057EC:  ADDWFC 02,W
057EE:  MOVWF  x6B
057F0:  MOVLW  01
057F2:  ADDWF  x6A,W
057F4:  MOVWF  01
057F6:  MOVLW  00
057F8:  ADDWFC x6B,W
057FA:  MOVWF  03
057FC:  MOVF   01,W
057FE:  ADDLW  3E
05800:  MOVWF  01
05802:  MOVLW  01
05804:  ADDWFC 03,F
05806:  MOVF   01,W
05808:  ADDLW  08
0580A:  MOVWF  FE9
0580C:  MOVLW  00
0580E:  ADDWFC 03,W
05810:  MOVWF  FEA
05812:  MOVFF  668,FEF
05816:  CLRF   1B
05818:  BTFSC  FF2.7
0581A:  BSF    1B.7
0581C:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
0581E:  CLRF   xD7
05820:  MOVFF  669,6D6
05824:  CLRF   xD9
05826:  MOVLW  2F
05828:  MOVWF  xD8
0582A:  MOVLB  0
0582C:  CALL   0442
05830:  BTFSC  1B.7
05832:  BSF    FF2.7
05834:  MOVF   01,W
05836:  ADDLW  4C
05838:  MOVLB  6
0583A:  MOVWF  x6A
0583C:  MOVLW  01
0583E:  ADDWFC 02,W
05840:  MOVWF  x6B
05842:  MOVLW  01
05844:  ADDWF  x6A,W
05846:  MOVWF  01
05848:  MOVLW  00
0584A:  ADDWFC x6B,W
0584C:  MOVWF  03
0584E:  MOVF   01,W
05850:  ADDLW  3E
05852:  MOVWF  01
05854:  MOVLW  01
05856:  ADDWFC 03,F
05858:  MOVF   01,W
0585A:  ADDLW  09
0585C:  MOVWF  FE9
0585E:  MOVLW  00
05860:  ADDWFC 03,W
05862:  MOVWF  FEA
05864:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
05866:  BRA    5978
05868:  MOVLB  0
0586A:  CLRF   1B
0586C:  BTFSC  FF2.7
0586E:  BSF    1B.7
05870:  BCF    FF2.7
05872:  MOVLB  6
05874:  CLRF   xD7
05876:  MOVFF  669,6D6
0587A:  CLRF   xD9
0587C:  MOVLW  2F
0587E:  MOVWF  xD8
05880:  MOVLB  0
05882:  CALL   0442
05886:  BTFSC  1B.7
05888:  BSF    FF2.7
0588A:  MOVF   01,W
0588C:  ADDLW  4C
0588E:  MOVLB  6
05890:  MOVWF  x6A
05892:  MOVLW  01
05894:  ADDWFC 02,W
05896:  MOVWF  x6B
05898:  MOVLW  01
0589A:  ADDWF  x6A,W
0589C:  MOVWF  01
0589E:  MOVLW  00
058A0:  ADDWFC x6B,W
058A2:  MOVWF  03
058A4:  MOVF   01,W
058A6:  ADDLW  3E
058A8:  MOVWF  01
058AA:  MOVLW  01
058AC:  ADDWFC 03,F
058AE:  MOVF   01,W
058B0:  ADDLW  0A
058B2:  MOVWF  01
058B4:  MOVLW  00
058B6:  ADDWFC 03,F
058B8:  MOVFF  01,66C
058BC:  MOVFF  03,66D
058C0:  MOVFF  03,66F
058C4:  MOVFF  01,66E
058C8:  MOVFF  667,670
058CC:  MOVLB  0
058CE:  RCALL  55C4
058D0:  MOVF   01,F
058D2:  BZ    597A
058D4:  CLRF   1B
058D6:  BTFSC  FF2.7
058D8:  BSF    1B.7
058DA:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
058DC:  MOVLB  6
058DE:  CLRF   xD7
058E0:  MOVFF  669,6D6
058E4:  CLRF   xD9
058E6:  MOVLW  2F
058E8:  MOVWF  xD8
058EA:  MOVLB  0
058EC:  CALL   0442
058F0:  BTFSC  1B.7
058F2:  BSF    FF2.7
058F4:  MOVF   01,W
058F6:  ADDLW  4C
058F8:  MOVLB  6
058FA:  MOVWF  x6A
058FC:  MOVLW  01
058FE:  ADDWFC 02,W
05900:  MOVWF  x6B
05902:  MOVLW  01
05904:  ADDWF  x6A,W
05906:  MOVWF  01
05908:  MOVLW  00
0590A:  ADDWFC x6B,W
0590C:  MOVWF  03
0590E:  MOVF   01,W
05910:  ADDLW  3E
05912:  MOVWF  01
05914:  MOVLW  01
05916:  ADDWFC 03,F
05918:  MOVF   01,W
0591A:  ADDLW  12
0591C:  MOVWF  FE9
0591E:  MOVLW  00
05920:  ADDWFC 03,W
05922:  MOVWF  FEA
05924:  MOVFF  668,FEF
05928:  CLRF   1B
0592A:  BTFSC  FF2.7
0592C:  BSF    1B.7
0592E:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
05930:  CLRF   xD7
05932:  MOVFF  669,6D6
05936:  CLRF   xD9
05938:  MOVLW  2F
0593A:  MOVWF  xD8
0593C:  MOVLB  0
0593E:  CALL   0442
05942:  BTFSC  1B.7
05944:  BSF    FF2.7
05946:  MOVF   01,W
05948:  ADDLW  4C
0594A:  MOVLB  6
0594C:  MOVWF  x6A
0594E:  MOVLW  01
05950:  ADDWFC 02,W
05952:  MOVWF  x6B
05954:  MOVLW  01
05956:  ADDWF  x6A,W
05958:  MOVWF  01
0595A:  MOVLW  00
0595C:  ADDWFC x6B,W
0595E:  MOVWF  03
05960:  MOVF   01,W
05962:  ADDLW  3E
05964:  MOVWF  01
05966:  MOVLW  01
05968:  ADDWFC 03,F
0596A:  MOVF   01,W
0596C:  ADDLW  13
0596E:  MOVWF  FE9
05970:  MOVLW  00
05972:  ADDWFC 03,W
05974:  MOVWF  FEA
05976:  BSF    FEF.0
05978:  MOVLB  0
....................          } 
....................  
....................          break; 
0597A:  BRA    5FF2
....................          case _on_off: 
0597C:  CLRF   1B
0597E:  BTFSC  FF2.7
05980:  BSF    1B.7
05982:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
05984:  MOVLB  6
05986:  CLRF   xD7
05988:  MOVFF  669,6D6
0598C:  CLRF   xD9
0598E:  MOVLW  2F
05990:  MOVWF  xD8
05992:  MOVLB  0
05994:  CALL   0442
05998:  BTFSC  1B.7
0599A:  BSF    FF2.7
0599C:  MOVF   01,W
0599E:  ADDLW  4C
059A0:  MOVLB  6
059A2:  MOVWF  x6A
059A4:  MOVLW  01
059A6:  ADDWFC 02,W
059A8:  MOVWF  x6B
059AA:  MOVLW  01
059AC:  ADDWF  x6A,W
059AE:  MOVWF  01
059B0:  MOVLW  00
059B2:  ADDWFC x6B,W
059B4:  MOVWF  03
059B6:  MOVF   01,W
059B8:  ADDLW  3E
059BA:  MOVWF  01
059BC:  MOVLW  01
059BE:  ADDWFC 03,F
059C0:  MOVFF  01,66C
059C4:  MOVFF  03,66D
059C8:  MOVFF  03,66F
059CC:  MOVFF  01,66E
059D0:  MOVFF  667,670
059D4:  MOVLB  0
059D6:  RCALL  55C4
059D8:  MOVF   01,F
059DA:  BZ    5A84
059DC:  CLRF   1B
059DE:  BTFSC  FF2.7
059E0:  BSF    1B.7
059E2:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
059E4:  MOVLB  6
059E6:  CLRF   xD7
059E8:  MOVFF  669,6D6
059EC:  CLRF   xD9
059EE:  MOVLW  2F
059F0:  MOVWF  xD8
059F2:  MOVLB  0
059F4:  CALL   0442
059F8:  BTFSC  1B.7
059FA:  BSF    FF2.7
059FC:  MOVF   01,W
059FE:  ADDLW  4C
05A00:  MOVLB  6
05A02:  MOVWF  x6A
05A04:  MOVLW  01
05A06:  ADDWFC 02,W
05A08:  MOVWF  x6B
05A0A:  MOVLW  01
05A0C:  ADDWF  x6A,W
05A0E:  MOVWF  01
05A10:  MOVLW  00
05A12:  ADDWFC x6B,W
05A14:  MOVWF  03
05A16:  MOVF   01,W
05A18:  ADDLW  3E
05A1A:  MOVWF  01
05A1C:  MOVLW  01
05A1E:  ADDWFC 03,F
05A20:  MOVF   01,W
05A22:  ADDLW  08
05A24:  MOVWF  FE9
05A26:  MOVLW  00
05A28:  ADDWFC 03,W
05A2A:  MOVWF  FEA
05A2C:  MOVFF  668,FEF
05A30:  CLRF   1B
05A32:  BTFSC  FF2.7
05A34:  BSF    1B.7
05A36:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
05A38:  CLRF   xD7
05A3A:  MOVFF  669,6D6
05A3E:  CLRF   xD9
05A40:  MOVLW  2F
05A42:  MOVWF  xD8
05A44:  MOVLB  0
05A46:  CALL   0442
05A4A:  BTFSC  1B.7
05A4C:  BSF    FF2.7
05A4E:  MOVF   01,W
05A50:  ADDLW  4C
05A52:  MOVLB  6
05A54:  MOVWF  x6A
05A56:  MOVLW  01
05A58:  ADDWFC 02,W
05A5A:  MOVWF  x6B
05A5C:  MOVLW  01
05A5E:  ADDWF  x6A,W
05A60:  MOVWF  01
05A62:  MOVLW  00
05A64:  ADDWFC x6B,W
05A66:  MOVWF  03
05A68:  MOVF   01,W
05A6A:  ADDLW  3E
05A6C:  MOVWF  01
05A6E:  MOVLW  01
05A70:  ADDWFC 03,F
05A72:  MOVF   01,W
05A74:  ADDLW  09
05A76:  MOVWF  FE9
05A78:  MOVLW  00
05A7A:  ADDWFC 03,W
05A7C:  MOVWF  FEA
05A7E:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
05A80:  BRA    5B92
05A82:  MOVLB  0
05A84:  CLRF   1B
05A86:  BTFSC  FF2.7
05A88:  BSF    1B.7
05A8A:  BCF    FF2.7
05A8C:  MOVLB  6
05A8E:  CLRF   xD7
05A90:  MOVFF  669,6D6
05A94:  CLRF   xD9
05A96:  MOVLW  2F
05A98:  MOVWF  xD8
05A9A:  MOVLB  0
05A9C:  CALL   0442
05AA0:  BTFSC  1B.7
05AA2:  BSF    FF2.7
05AA4:  MOVF   01,W
05AA6:  ADDLW  4C
05AA8:  MOVLB  6
05AAA:  MOVWF  x6A
05AAC:  MOVLW  01
05AAE:  ADDWFC 02,W
05AB0:  MOVWF  x6B
05AB2:  MOVLW  01
05AB4:  ADDWF  x6A,W
05AB6:  MOVWF  01
05AB8:  MOVLW  00
05ABA:  ADDWFC x6B,W
05ABC:  MOVWF  03
05ABE:  MOVF   01,W
05AC0:  ADDLW  3E
05AC2:  MOVWF  01
05AC4:  MOVLW  01
05AC6:  ADDWFC 03,F
05AC8:  MOVF   01,W
05ACA:  ADDLW  0A
05ACC:  MOVWF  01
05ACE:  MOVLW  00
05AD0:  ADDWFC 03,F
05AD2:  MOVFF  01,66C
05AD6:  MOVFF  03,66D
05ADA:  MOVFF  03,66F
05ADE:  MOVFF  01,66E
05AE2:  MOVFF  667,670
05AE6:  MOVLB  0
05AE8:  RCALL  55C4
05AEA:  MOVF   01,F
05AEC:  BZ    5B94
05AEE:  CLRF   1B
05AF0:  BTFSC  FF2.7
05AF2:  BSF    1B.7
05AF4:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
05AF6:  MOVLB  6
05AF8:  CLRF   xD7
05AFA:  MOVFF  669,6D6
05AFE:  CLRF   xD9
05B00:  MOVLW  2F
05B02:  MOVWF  xD8
05B04:  MOVLB  0
05B06:  CALL   0442
05B0A:  BTFSC  1B.7
05B0C:  BSF    FF2.7
05B0E:  MOVF   01,W
05B10:  ADDLW  4C
05B12:  MOVLB  6
05B14:  MOVWF  x6A
05B16:  MOVLW  01
05B18:  ADDWFC 02,W
05B1A:  MOVWF  x6B
05B1C:  MOVLW  01
05B1E:  ADDWF  x6A,W
05B20:  MOVWF  01
05B22:  MOVLW  00
05B24:  ADDWFC x6B,W
05B26:  MOVWF  03
05B28:  MOVF   01,W
05B2A:  ADDLW  3E
05B2C:  MOVWF  01
05B2E:  MOVLW  01
05B30:  ADDWFC 03,F
05B32:  MOVF   01,W
05B34:  ADDLW  12
05B36:  MOVWF  FE9
05B38:  MOVLW  00
05B3A:  ADDWFC 03,W
05B3C:  MOVWF  FEA
05B3E:  MOVFF  668,FEF
05B42:  CLRF   1B
05B44:  BTFSC  FF2.7
05B46:  BSF    1B.7
05B48:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
05B4A:  CLRF   xD7
05B4C:  MOVFF  669,6D6
05B50:  CLRF   xD9
05B52:  MOVLW  2F
05B54:  MOVWF  xD8
05B56:  MOVLB  0
05B58:  CALL   0442
05B5C:  BTFSC  1B.7
05B5E:  BSF    FF2.7
05B60:  MOVF   01,W
05B62:  ADDLW  4C
05B64:  MOVLB  6
05B66:  MOVWF  x6A
05B68:  MOVLW  01
05B6A:  ADDWFC 02,W
05B6C:  MOVWF  x6B
05B6E:  MOVLW  01
05B70:  ADDWF  x6A,W
05B72:  MOVWF  01
05B74:  MOVLW  00
05B76:  ADDWFC x6B,W
05B78:  MOVWF  03
05B7A:  MOVF   01,W
05B7C:  ADDLW  3E
05B7E:  MOVWF  01
05B80:  MOVLW  01
05B82:  ADDWFC 03,F
05B84:  MOVF   01,W
05B86:  ADDLW  13
05B88:  MOVWF  FE9
05B8A:  MOVLW  00
05B8C:  ADDWFC 03,W
05B8E:  MOVWF  FEA
05B90:  BSF    FEF.0
05B92:  MOVLB  0
....................          } 
....................  
....................          break; 
05B94:  BRA    5FF2
....................          case shutter: 
05B96:  CLRF   1B
05B98:  BTFSC  FF2.7
05B9A:  BSF    1B.7
05B9C:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
05B9E:  MOVLB  6
05BA0:  CLRF   xD7
05BA2:  MOVFF  669,6D6
05BA6:  CLRF   xD9
05BA8:  MOVLW  2F
05BAA:  MOVWF  xD8
05BAC:  MOVLB  0
05BAE:  CALL   0442
05BB2:  BTFSC  1B.7
05BB4:  BSF    FF2.7
05BB6:  MOVF   01,W
05BB8:  ADDLW  4C
05BBA:  MOVLB  6
05BBC:  MOVWF  x6A
05BBE:  MOVLW  01
05BC0:  ADDWFC 02,W
05BC2:  MOVWF  x6B
05BC4:  MOVLW  01
05BC6:  ADDWF  x6A,W
05BC8:  MOVWF  01
05BCA:  MOVLW  00
05BCC:  ADDWFC x6B,W
05BCE:  MOVWF  03
05BD0:  MOVF   01,W
05BD2:  ADDLW  3E
05BD4:  MOVWF  01
05BD6:  MOVLW  01
05BD8:  ADDWFC 03,F
05BDA:  MOVFF  01,66C
05BDE:  MOVFF  03,66D
05BE2:  MOVFF  03,66F
05BE6:  MOVFF  01,66E
05BEA:  MOVFF  667,670
05BEE:  MOVLB  0
05BF0:  RCALL  55C4
05BF2:  MOVF   01,F
05BF4:  BZ    5CB6
....................          {printf("UP"); 
05BF6:  MOVLW  55
05BF8:  MOVLB  6
05BFA:  MOVWF  xC0
05BFC:  MOVLB  0
05BFE:  CALL   1E2E
05C02:  MOVLW  50
05C04:  MOVLB  6
05C06:  MOVWF  xC0
05C08:  MOVLB  0
05C0A:  CALL   1E2E
05C0E:  CLRF   1B
05C10:  BTFSC  FF2.7
05C12:  BSF    1B.7
05C14:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
05C16:  MOVLB  6
05C18:  CLRF   xD7
05C1A:  MOVFF  669,6D6
05C1E:  CLRF   xD9
05C20:  MOVLW  2F
05C22:  MOVWF  xD8
05C24:  MOVLB  0
05C26:  CALL   0442
05C2A:  BTFSC  1B.7
05C2C:  BSF    FF2.7
05C2E:  MOVF   01,W
05C30:  ADDLW  4C
05C32:  MOVLB  6
05C34:  MOVWF  x6A
05C36:  MOVLW  01
05C38:  ADDWFC 02,W
05C3A:  MOVWF  x6B
05C3C:  MOVLW  01
05C3E:  ADDWF  x6A,W
05C40:  MOVWF  01
05C42:  MOVLW  00
05C44:  ADDWFC x6B,W
05C46:  MOVWF  03
05C48:  MOVF   01,W
05C4A:  ADDLW  3E
05C4C:  MOVWF  01
05C4E:  MOVLW  01
05C50:  ADDWFC 03,F
05C52:  MOVF   01,W
05C54:  ADDLW  08
05C56:  MOVWF  FE9
05C58:  MOVLW  00
05C5A:  ADDWFC 03,W
05C5C:  MOVWF  FEA
05C5E:  MOVFF  668,FEF
05C62:  CLRF   1B
05C64:  BTFSC  FF2.7
05C66:  BSF    1B.7
05C68:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
05C6A:  CLRF   xD7
05C6C:  MOVFF  669,6D6
05C70:  CLRF   xD9
05C72:  MOVLW  2F
05C74:  MOVWF  xD8
05C76:  MOVLB  0
05C78:  CALL   0442
05C7C:  BTFSC  1B.7
05C7E:  BSF    FF2.7
05C80:  MOVF   01,W
05C82:  ADDLW  4C
05C84:  MOVLB  6
05C86:  MOVWF  x6A
05C88:  MOVLW  01
05C8A:  ADDWFC 02,W
05C8C:  MOVWF  x6B
05C8E:  MOVLW  01
05C90:  ADDWF  x6A,W
05C92:  MOVWF  01
05C94:  MOVLW  00
05C96:  ADDWFC x6B,W
05C98:  MOVWF  03
05C9A:  MOVF   01,W
05C9C:  ADDLW  3E
05C9E:  MOVWF  01
05CA0:  MOVLW  01
05CA2:  ADDWFC 03,F
05CA4:  MOVF   01,W
05CA6:  ADDLW  09
05CA8:  MOVWF  FE9
05CAA:  MOVLW  00
05CAC:  ADDWFC 03,W
05CAE:  MOVWF  FEA
05CB0:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
05CB2:  BRA    5FEC
05CB4:  MOVLB  0
05CB6:  CLRF   1B
05CB8:  BTFSC  FF2.7
05CBA:  BSF    1B.7
05CBC:  BCF    FF2.7
05CBE:  MOVLB  6
05CC0:  CLRF   xD7
05CC2:  MOVFF  669,6D6
05CC6:  CLRF   xD9
05CC8:  MOVLW  2F
05CCA:  MOVWF  xD8
05CCC:  MOVLB  0
05CCE:  CALL   0442
05CD2:  BTFSC  1B.7
05CD4:  BSF    FF2.7
05CD6:  MOVF   01,W
05CD8:  ADDLW  4C
05CDA:  MOVLB  6
05CDC:  MOVWF  x6A
05CDE:  MOVLW  01
05CE0:  ADDWFC 02,W
05CE2:  MOVWF  x6B
05CE4:  MOVLW  01
05CE6:  ADDWF  x6A,W
05CE8:  MOVWF  01
05CEA:  MOVLW  00
05CEC:  ADDWFC x6B,W
05CEE:  MOVWF  03
05CF0:  MOVF   01,W
05CF2:  ADDLW  3E
05CF4:  MOVWF  01
05CF6:  MOVLW  01
05CF8:  ADDWFC 03,F
05CFA:  MOVF   01,W
05CFC:  ADDLW  0A
05CFE:  MOVWF  01
05D00:  MOVLW  00
05D02:  ADDWFC 03,F
05D04:  MOVFF  01,66C
05D08:  MOVFF  03,66D
05D0C:  MOVFF  03,66F
05D10:  MOVFF  01,66E
05D14:  MOVFF  667,670
05D18:  MOVLB  0
05D1A:  RCALL  55C4
05D1C:  MOVF   01,F
05D1E:  BZ    5DC8
05D20:  CLRF   1B
05D22:  BTFSC  FF2.7
05D24:  BSF    1B.7
05D26:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
05D28:  MOVLB  6
05D2A:  CLRF   xD7
05D2C:  MOVFF  669,6D6
05D30:  CLRF   xD9
05D32:  MOVLW  2F
05D34:  MOVWF  xD8
05D36:  MOVLB  0
05D38:  CALL   0442
05D3C:  BTFSC  1B.7
05D3E:  BSF    FF2.7
05D40:  MOVF   01,W
05D42:  ADDLW  4C
05D44:  MOVLB  6
05D46:  MOVWF  x6A
05D48:  MOVLW  01
05D4A:  ADDWFC 02,W
05D4C:  MOVWF  x6B
05D4E:  MOVLW  01
05D50:  ADDWF  x6A,W
05D52:  MOVWF  01
05D54:  MOVLW  00
05D56:  ADDWFC x6B,W
05D58:  MOVWF  03
05D5A:  MOVF   01,W
05D5C:  ADDLW  3E
05D5E:  MOVWF  01
05D60:  MOVLW  01
05D62:  ADDWFC 03,F
05D64:  MOVF   01,W
05D66:  ADDLW  12
05D68:  MOVWF  FE9
05D6A:  MOVLW  00
05D6C:  ADDWFC 03,W
05D6E:  MOVWF  FEA
05D70:  MOVFF  668,FEF
05D74:  CLRF   1B
05D76:  BTFSC  FF2.7
05D78:  BSF    1B.7
05D7A:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
05D7C:  CLRF   xD7
05D7E:  MOVFF  669,6D6
05D82:  CLRF   xD9
05D84:  MOVLW  2F
05D86:  MOVWF  xD8
05D88:  MOVLB  0
05D8A:  CALL   0442
05D8E:  BTFSC  1B.7
05D90:  BSF    FF2.7
05D92:  MOVF   01,W
05D94:  ADDLW  4C
05D96:  MOVLB  6
05D98:  MOVWF  x6A
05D9A:  MOVLW  01
05D9C:  ADDWFC 02,W
05D9E:  MOVWF  x6B
05DA0:  MOVLW  01
05DA2:  ADDWF  x6A,W
05DA4:  MOVWF  01
05DA6:  MOVLW  00
05DA8:  ADDWFC x6B,W
05DAA:  MOVWF  03
05DAC:  MOVF   01,W
05DAE:  ADDLW  3E
05DB0:  MOVWF  01
05DB2:  MOVLW  01
05DB4:  ADDWFC 03,F
05DB6:  MOVF   01,W
05DB8:  ADDLW  13
05DBA:  MOVWF  FE9
05DBC:  MOVLW  00
05DBE:  ADDWFC 03,W
05DC0:  MOVWF  FEA
05DC2:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
05DC4:  BRA    5FEC
05DC6:  MOVLB  0
05DC8:  CLRF   1B
05DCA:  BTFSC  FF2.7
05DCC:  BSF    1B.7
05DCE:  BCF    FF2.7
05DD0:  MOVLB  6
05DD2:  CLRF   xD7
05DD4:  MOVFF  669,6D6
05DD8:  CLRF   xD9
05DDA:  MOVLW  2F
05DDC:  MOVWF  xD8
05DDE:  MOVLB  0
05DE0:  CALL   0442
05DE4:  BTFSC  1B.7
05DE6:  BSF    FF2.7
05DE8:  MOVF   01,W
05DEA:  ADDLW  4C
05DEC:  MOVLB  6
05DEE:  MOVWF  x6A
05DF0:  MOVLW  01
05DF2:  ADDWFC 02,W
05DF4:  MOVWF  x6B
05DF6:  MOVLW  01
05DF8:  ADDWF  x6A,W
05DFA:  MOVWF  01
05DFC:  MOVLW  00
05DFE:  ADDWFC x6B,W
05E00:  MOVWF  03
05E02:  MOVF   01,W
05E04:  ADDLW  3E
05E06:  MOVWF  01
05E08:  MOVLW  01
05E0A:  ADDWFC 03,F
05E0C:  MOVF   01,W
05E0E:  ADDLW  14
05E10:  MOVWF  01
05E12:  MOVLW  00
05E14:  ADDWFC 03,F
05E16:  MOVFF  01,66C
05E1A:  MOVFF  03,66D
05E1E:  MOVFF  03,66F
05E22:  MOVFF  01,66E
05E26:  MOVFF  667,670
05E2A:  MOVLB  0
05E2C:  CALL   55C4
05E30:  MOVF   01,F
05E32:  BZ    5EDC
05E34:  CLRF   1B
05E36:  BTFSC  FF2.7
05E38:  BSF    1B.7
05E3A:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
05E3C:  MOVLB  6
05E3E:  CLRF   xD7
05E40:  MOVFF  669,6D6
05E44:  CLRF   xD9
05E46:  MOVLW  2F
05E48:  MOVWF  xD8
05E4A:  MOVLB  0
05E4C:  CALL   0442
05E50:  BTFSC  1B.7
05E52:  BSF    FF2.7
05E54:  MOVF   01,W
05E56:  ADDLW  4C
05E58:  MOVLB  6
05E5A:  MOVWF  x6A
05E5C:  MOVLW  01
05E5E:  ADDWFC 02,W
05E60:  MOVWF  x6B
05E62:  MOVLW  01
05E64:  ADDWF  x6A,W
05E66:  MOVWF  01
05E68:  MOVLW  00
05E6A:  ADDWFC x6B,W
05E6C:  MOVWF  03
05E6E:  MOVF   01,W
05E70:  ADDLW  3E
05E72:  MOVWF  01
05E74:  MOVLW  01
05E76:  ADDWFC 03,F
05E78:  MOVF   01,W
05E7A:  ADDLW  1C
05E7C:  MOVWF  FE9
05E7E:  MOVLW  00
05E80:  ADDWFC 03,W
05E82:  MOVWF  FEA
05E84:  MOVFF  668,FEF
05E88:  CLRF   1B
05E8A:  BTFSC  FF2.7
05E8C:  BSF    1B.7
05E8E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
05E90:  CLRF   xD7
05E92:  MOVFF  669,6D6
05E96:  CLRF   xD9
05E98:  MOVLW  2F
05E9A:  MOVWF  xD8
05E9C:  MOVLB  0
05E9E:  CALL   0442
05EA2:  BTFSC  1B.7
05EA4:  BSF    FF2.7
05EA6:  MOVF   01,W
05EA8:  ADDLW  4C
05EAA:  MOVLB  6
05EAC:  MOVWF  x6A
05EAE:  MOVLW  01
05EB0:  ADDWFC 02,W
05EB2:  MOVWF  x6B
05EB4:  MOVLW  01
05EB6:  ADDWF  x6A,W
05EB8:  MOVWF  01
05EBA:  MOVLW  00
05EBC:  ADDWFC x6B,W
05EBE:  MOVWF  03
05EC0:  MOVF   01,W
05EC2:  ADDLW  3E
05EC4:  MOVWF  01
05EC6:  MOVLW  01
05EC8:  ADDWFC 03,F
05ECA:  MOVF   01,W
05ECC:  ADDLW  1D
05ECE:  MOVWF  FE9
05ED0:  MOVLW  00
05ED2:  ADDWFC 03,W
05ED4:  MOVWF  FEA
05ED6:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
05ED8:  BRA    5FEC
05EDA:  MOVLB  0
05EDC:  CLRF   1B
05EDE:  BTFSC  FF2.7
05EE0:  BSF    1B.7
05EE2:  BCF    FF2.7
05EE4:  MOVLB  6
05EE6:  CLRF   xD7
05EE8:  MOVFF  669,6D6
05EEC:  CLRF   xD9
05EEE:  MOVLW  2F
05EF0:  MOVWF  xD8
05EF2:  MOVLB  0
05EF4:  CALL   0442
05EF8:  BTFSC  1B.7
05EFA:  BSF    FF2.7
05EFC:  MOVF   01,W
05EFE:  ADDLW  4C
05F00:  MOVLB  6
05F02:  MOVWF  x6A
05F04:  MOVLW  01
05F06:  ADDWFC 02,W
05F08:  MOVWF  x6B
05F0A:  MOVLW  01
05F0C:  ADDWF  x6A,W
05F0E:  MOVWF  01
05F10:  MOVLW  00
05F12:  ADDWFC x6B,W
05F14:  MOVWF  03
05F16:  MOVF   01,W
05F18:  ADDLW  3E
05F1A:  MOVWF  01
05F1C:  MOVLW  01
05F1E:  ADDWFC 03,F
05F20:  MOVF   01,W
05F22:  ADDLW  1E
05F24:  MOVWF  01
05F26:  MOVLW  00
05F28:  ADDWFC 03,F
05F2A:  MOVFF  01,66C
05F2E:  MOVFF  03,66D
05F32:  MOVFF  03,66F
05F36:  MOVFF  01,66E
05F3A:  MOVFF  667,670
05F3E:  MOVLB  0
05F40:  CALL   55C4
05F44:  MOVF   01,F
05F46:  BZ    5FEE
05F48:  CLRF   1B
05F4A:  BTFSC  FF2.7
05F4C:  BSF    1B.7
05F4E:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
05F50:  MOVLB  6
05F52:  CLRF   xD7
05F54:  MOVFF  669,6D6
05F58:  CLRF   xD9
05F5A:  MOVLW  2F
05F5C:  MOVWF  xD8
05F5E:  MOVLB  0
05F60:  CALL   0442
05F64:  BTFSC  1B.7
05F66:  BSF    FF2.7
05F68:  MOVF   01,W
05F6A:  ADDLW  4C
05F6C:  MOVLB  6
05F6E:  MOVWF  x6A
05F70:  MOVLW  01
05F72:  ADDWFC 02,W
05F74:  MOVWF  x6B
05F76:  MOVLW  01
05F78:  ADDWF  x6A,W
05F7A:  MOVWF  01
05F7C:  MOVLW  00
05F7E:  ADDWFC x6B,W
05F80:  MOVWF  03
05F82:  MOVF   01,W
05F84:  ADDLW  3E
05F86:  MOVWF  01
05F88:  MOVLW  01
05F8A:  ADDWFC 03,F
05F8C:  MOVF   01,W
05F8E:  ADDLW  26
05F90:  MOVWF  FE9
05F92:  MOVLW  00
05F94:  ADDWFC 03,W
05F96:  MOVWF  FEA
05F98:  MOVFF  668,FEF
05F9C:  CLRF   1B
05F9E:  BTFSC  FF2.7
05FA0:  BSF    1B.7
05FA2:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
05FA4:  CLRF   xD7
05FA6:  MOVFF  669,6D6
05FAA:  CLRF   xD9
05FAC:  MOVLW  2F
05FAE:  MOVWF  xD8
05FB0:  MOVLB  0
05FB2:  CALL   0442
05FB6:  BTFSC  1B.7
05FB8:  BSF    FF2.7
05FBA:  MOVF   01,W
05FBC:  ADDLW  4C
05FBE:  MOVLB  6
05FC0:  MOVWF  x6A
05FC2:  MOVLW  01
05FC4:  ADDWFC 02,W
05FC6:  MOVWF  x6B
05FC8:  MOVLW  01
05FCA:  ADDWF  x6A,W
05FCC:  MOVWF  01
05FCE:  MOVLW  00
05FD0:  ADDWFC x6B,W
05FD2:  MOVWF  03
05FD4:  MOVF   01,W
05FD6:  ADDLW  3E
05FD8:  MOVWF  01
05FDA:  MOVLW  01
05FDC:  ADDWFC 03,F
05FDE:  MOVF   01,W
05FE0:  ADDLW  27
05FE2:  MOVWF  FE9
05FE4:  MOVLW  00
05FE6:  ADDWFC 03,W
05FE8:  MOVWF  FEA
05FEA:  BSF    FEF.0
05FEC:  MOVLB  0
....................          } 
....................  
....................          break; 
05FEE:  BRA    5FF2
....................          default: 
....................          break; 
05FF0:  BRA    5FF2
....................       } 
....................    } 
05FF2:  MOVLB  6
05FF4:  INCF   x69,F
05FF6:  GOTO   55F8
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
05FFA:  CLRF   x69
05FFC:  MOVLB  1
05FFE:  MOVF   x3E,W
06000:  MOVLB  6
06002:  SUBWF  x69,W
06004:  BTFSC  FD8.0
06006:  BRA    6276
06008:  CLRF   1B
0600A:  BTFSC  FF2.7
0600C:  BSF    1B.7
0600E:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
06010:  CLRF   xD7
06012:  MOVFF  669,6D6
06016:  CLRF   xD9
06018:  MOVLW  21
0601A:  MOVWF  xD8
0601C:  MOVLB  0
0601E:  CALL   0442
06022:  BTFSC  1B.7
06024:  BSF    FF2.7
06026:  MOVFF  02,03
0602A:  MOVF   01,W
0602C:  ADDLW  40
0602E:  MOVWF  01
06030:  MOVLW  01
06032:  ADDWFC 03,F
06034:  MOVFF  01,FE9
06038:  MOVFF  03,FEA
0603C:  MOVF   FEF,W
0603E:  XORLW  03
06040:  BZ    6044
06042:  BRA    6270
....................          case timer: 
06044:  CLRF   1B
06046:  BTFSC  FF2.7
06048:  BSF    1B.7
0604A:  BCF    FF2.7
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
0604C:  MOVLB  6
0604E:  CLRF   xD7
06050:  MOVFF  669,6D6
06054:  CLRF   xD9
06056:  MOVLW  21
06058:  MOVWF  xD8
0605A:  MOVLB  0
0605C:  CALL   0442
06060:  BTFSC  1B.7
06062:  BSF    FF2.7
06064:  MOVF   01,W
06066:  ADDLW  02
06068:  MOVLB  6
0606A:  MOVWF  x6A
0606C:  MOVLW  00
0606E:  ADDWFC 02,W
06070:  MOVWF  x6B
06072:  MOVLW  01
06074:  ADDWF  x6A,W
06076:  MOVWF  01
06078:  MOVLW  00
0607A:  ADDWFC x6B,W
0607C:  MOVWF  03
0607E:  MOVF   01,W
06080:  ADDLW  3E
06082:  MOVWF  01
06084:  MOVLW  01
06086:  ADDWFC 03,F
06088:  MOVF   01,W
0608A:  ADDLW  09
0608C:  MOVWF  01
0608E:  MOVLW  00
06090:  ADDWFC 03,F
06092:  MOVFF  01,66C
06096:  MOVFF  03,66D
0609A:  MOVFF  03,66F
0609E:  MOVFF  01,66E
060A2:  MOVFF  667,670
060A6:  MOVLB  0
060A8:  CALL   55C4
060AC:  MOVF   01,F
060AE:  BZ    615A
060B0:  CLRF   1B
060B2:  BTFSC  FF2.7
060B4:  BSF    1B.7
060B6:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
060B8:  MOVLB  6
060BA:  CLRF   xD7
060BC:  MOVFF  669,6D6
060C0:  CLRF   xD9
060C2:  MOVLW  21
060C4:  MOVWF  xD8
060C6:  MOVLB  0
060C8:  CALL   0442
060CC:  BTFSC  1B.7
060CE:  BSF    FF2.7
060D0:  MOVF   01,W
060D2:  ADDLW  02
060D4:  MOVLB  6
060D6:  MOVWF  x6A
060D8:  MOVLW  00
060DA:  ADDWFC 02,W
060DC:  MOVWF  x6B
060DE:  MOVLW  01
060E0:  ADDWF  x6A,W
060E2:  MOVWF  01
060E4:  MOVLW  00
060E6:  ADDWFC x6B,W
060E8:  MOVWF  03
060EA:  MOVF   01,W
060EC:  ADDLW  3E
060EE:  MOVWF  01
060F0:  MOVLW  01
060F2:  ADDWFC 03,F
060F4:  MOVF   01,W
060F6:  ADDLW  1D
060F8:  MOVWF  FE9
060FA:  MOVLW  00
060FC:  ADDWFC 03,W
060FE:  MOVWF  FEA
06100:  CLRF   FEC
06102:  MOVF   FED,F
06104:  CLRF   FEF
06106:  CLRF   1B
06108:  BTFSC  FF2.7
0610A:  BSF    1B.7
0610C:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
0610E:  CLRF   xD7
06110:  MOVFF  669,6D6
06114:  CLRF   xD9
06116:  MOVLW  21
06118:  MOVWF  xD8
0611A:  MOVLB  0
0611C:  CALL   0442
06120:  BTFSC  1B.7
06122:  BSF    FF2.7
06124:  MOVF   01,W
06126:  ADDLW  02
06128:  MOVLB  6
0612A:  MOVWF  x6A
0612C:  MOVLW  00
0612E:  ADDWFC 02,W
06130:  MOVWF  x6B
06132:  MOVLW  01
06134:  ADDWF  x6A,W
06136:  MOVWF  01
06138:  MOVLW  00
0613A:  ADDWFC x6B,W
0613C:  MOVWF  03
0613E:  MOVF   01,W
06140:  ADDLW  3E
06142:  MOVWF  01
06144:  MOVLW  01
06146:  ADDWFC 03,F
06148:  MOVF   01,W
0614A:  ADDLW  1F
0614C:  MOVWF  FE9
0614E:  MOVLW  00
06150:  ADDWFC 03,W
06152:  MOVWF  FEA
06154:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
06156:  BRA    626C
06158:  MOVLB  0
0615A:  CLRF   1B
0615C:  BTFSC  FF2.7
0615E:  BSF    1B.7
06160:  BCF    FF2.7
06162:  MOVLB  6
06164:  CLRF   xD7
06166:  MOVFF  669,6D6
0616A:  CLRF   xD9
0616C:  MOVLW  21
0616E:  MOVWF  xD8
06170:  MOVLB  0
06172:  CALL   0442
06176:  BTFSC  1B.7
06178:  BSF    FF2.7
0617A:  MOVF   01,W
0617C:  ADDLW  02
0617E:  MOVLB  6
06180:  MOVWF  x6A
06182:  MOVLW  00
06184:  ADDWFC 02,W
06186:  MOVWF  x6B
06188:  MOVLW  01
0618A:  ADDWF  x6A,W
0618C:  MOVWF  01
0618E:  MOVLW  00
06190:  ADDWFC x6B,W
06192:  MOVWF  03
06194:  MOVF   01,W
06196:  ADDLW  3E
06198:  MOVWF  01
0619A:  MOVLW  01
0619C:  ADDWFC 03,F
0619E:  MOVF   01,W
061A0:  ADDLW  13
061A2:  MOVWF  01
061A4:  MOVLW  00
061A6:  ADDWFC 03,F
061A8:  MOVFF  01,66C
061AC:  MOVFF  03,66D
061B0:  MOVFF  03,66F
061B4:  MOVFF  01,66E
061B8:  MOVFF  667,670
061BC:  MOVLB  0
061BE:  CALL   55C4
061C2:  MOVF   01,F
061C4:  BZ    626E
061C6:  CLRF   1B
061C8:  BTFSC  FF2.7
061CA:  BSF    1B.7
061CC:  BCF    FF2.7
....................          { 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
061CE:  MOVLB  6
061D0:  CLRF   xD7
061D2:  MOVFF  669,6D6
061D6:  CLRF   xD9
061D8:  MOVLW  21
061DA:  MOVWF  xD8
061DC:  MOVLB  0
061DE:  CALL   0442
061E2:  BTFSC  1B.7
061E4:  BSF    FF2.7
061E6:  MOVF   01,W
061E8:  ADDLW  02
061EA:  MOVLB  6
061EC:  MOVWF  x6A
061EE:  MOVLW  00
061F0:  ADDWFC 02,W
061F2:  MOVWF  x6B
061F4:  MOVLW  01
061F6:  ADDWF  x6A,W
061F8:  MOVWF  01
061FA:  MOVLW  00
061FC:  ADDWFC x6B,W
061FE:  MOVWF  03
06200:  MOVF   01,W
06202:  ADDLW  3E
06204:  MOVWF  01
06206:  MOVLW  01
06208:  ADDWFC 03,F
0620A:  MOVF   01,W
0620C:  ADDLW  1D
0620E:  MOVWF  FE9
06210:  MOVLW  00
06212:  ADDWFC 03,W
06214:  MOVWF  FEA
06216:  CLRF   FEC
06218:  MOVF   FED,F
0621A:  CLRF   FEF
0621C:  CLRF   1B
0621E:  BTFSC  FF2.7
06220:  BSF    1B.7
06222:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
06224:  CLRF   xD7
06226:  MOVFF  669,6D6
0622A:  CLRF   xD9
0622C:  MOVLW  21
0622E:  MOVWF  xD8
06230:  MOVLB  0
06232:  CALL   0442
06236:  BTFSC  1B.7
06238:  BSF    FF2.7
0623A:  MOVF   01,W
0623C:  ADDLW  02
0623E:  MOVLB  6
06240:  MOVWF  x6A
06242:  MOVLW  00
06244:  ADDWFC 02,W
06246:  MOVWF  x6B
06248:  MOVLW  01
0624A:  ADDWF  x6A,W
0624C:  MOVWF  01
0624E:  MOVLW  00
06250:  ADDWFC x6B,W
06252:  MOVWF  03
06254:  MOVF   01,W
06256:  ADDLW  3E
06258:  MOVWF  01
0625A:  MOVLW  01
0625C:  ADDWFC 03,F
0625E:  MOVF   01,W
06260:  ADDLW  1F
06262:  MOVWF  FE9
06264:  MOVLW  00
06266:  ADDWFC 03,W
06268:  MOVWF  FEA
0626A:  BCF    FEF.0
0626C:  MOVLB  0
....................          } 
....................          break; 
0626E:  BRA    6270
....................       } 
....................    } 
06270:  MOVLB  6
06272:  INCF   x69,F
06274:  BRA    5FFC
....................           
.................... } 
06276:  MOVLB  0
06278:  GOTO   6288 (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
0627C:  MOVFF  665,667
06280:  MOVFF  666,668
06284:  GOTO   55F4
....................    //TODO CAN Sending of values 
.................... } 
06288:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
0628A:  MOVLB  6
0628C:  CLRF   x5E
0628E:  MOVLB  1
06290:  MOVF   x3E,W
06292:  MOVLB  6
06294:  SUBWF  x5E,W
06296:  BTFSC  FD8.0
06298:  GOTO   71CC
0629C:  CLRF   1B
0629E:  BTFSC  FF2.7
062A0:  BSF    1B.7
062A2:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
062A4:  CLRF   xD7
062A6:  MOVFF  65E,6D6
062AA:  CLRF   xD9
062AC:  MOVLW  21
062AE:  MOVWF  xD8
062B0:  MOVLB  0
062B2:  CALL   0442
062B6:  BTFSC  1B.7
062B8:  BSF    FF2.7
062BA:  MOVFF  02,03
062BE:  MOVF   01,W
062C0:  ADDLW  40
062C2:  MOVWF  01
062C4:  MOVLW  01
062C6:  ADDWFC 03,F
062C8:  MOVFF  01,FE9
062CC:  MOVFF  03,FEA
062D0:  MOVF   FEF,W
062D2:  BZ    62EE
062D4:  XORLW  02
062D6:  BTFSC  FD8.2
062D8:  BRA    67DC
062DA:  XORLW  03
062DC:  BTFSC  FD8.2
062DE:  GOTO   6B26
062E2:  XORLW  02
062E4:  BTFSC  FD8.2
062E6:  GOTO   6E72
062EA:  GOTO   71C2
....................          case dimmer_switch: 
062EE:  CLRF   1B
062F0:  BTFSC  FF2.7
062F2:  BSF    1B.7
062F4:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
062F6:  MOVLB  6
062F8:  CLRF   xD7
062FA:  MOVFF  65E,6D6
062FE:  CLRF   xD9
06300:  MOVLW  21
06302:  MOVWF  xD8
06304:  MOVLB  0
06306:  CALL   0442
0630A:  BTFSC  1B.7
0630C:  BSF    FF2.7
0630E:  MOVF   01,W
06310:  ADDLW  02
06312:  MOVLB  6
06314:  MOVWF  x5F
06316:  MOVLW  00
06318:  ADDWFC 02,W
0631A:  MOVWF  x60
0631C:  MOVLW  01
0631E:  ADDWF  x5F,W
06320:  MOVWF  01
06322:  MOVLW  00
06324:  ADDWFC x60,W
06326:  MOVWF  03
06328:  MOVF   01,W
0632A:  ADDLW  3E
0632C:  MOVWF  01
0632E:  MOVLW  01
06330:  ADDWFC 03,F
06332:  MOVF   01,W
06334:  ADDLW  02
06336:  MOVWF  FE9
06338:  MOVLW  00
0633A:  ADDWFC 03,W
0633C:  MOVWF  FEA
0633E:  BTFSS  FEF.0
06340:  BRA    6490
06342:  CLRF   1B
06344:  BTFSC  FF2.7
06346:  BSF    1B.7
06348:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
0634A:  CLRF   xD7
0634C:  MOVFF  65E,6D6
06350:  CLRF   xD9
06352:  MOVLW  21
06354:  MOVWF  xD8
06356:  MOVLB  0
06358:  CALL   0442
0635C:  BTFSC  1B.7
0635E:  BSF    FF2.7
06360:  MOVF   01,W
06362:  ADDLW  02
06364:  MOVLB  6
06366:  MOVWF  x5F
06368:  MOVLW  00
0636A:  ADDWFC 02,W
0636C:  MOVWF  x60
0636E:  MOVLW  01
06370:  ADDWF  x5F,W
06372:  MOVWF  01
06374:  MOVLW  00
06376:  ADDWFC x60,W
06378:  MOVWF  03
0637A:  MOVF   01,W
0637C:  ADDLW  3E
0637E:  MOVWF  01
06380:  MOVLW  01
06382:  ADDWFC 03,F
06384:  MOVFF  01,FE9
06388:  MOVFF  03,FEA
0638C:  MOVFF  FEF,661
06390:  CLRF   1B
06392:  BTFSC  FF2.7
06394:  BSF    1B.7
06396:  BCF    FF2.7
06398:  CLRF   xD7
0639A:  MOVFF  65E,6D6
0639E:  CLRF   xD9
063A0:  MOVLW  21
063A2:  MOVWF  xD8
063A4:  MOVLB  0
063A6:  CALL   0442
063AA:  BTFSC  1B.7
063AC:  BSF    FF2.7
063AE:  MOVF   01,W
063B0:  ADDLW  02
063B2:  MOVLB  6
063B4:  MOVWF  x62
063B6:  MOVLW  00
063B8:  ADDWFC 02,W
063BA:  MOVWF  x63
063BC:  MOVLW  01
063BE:  ADDWF  x62,W
063C0:  MOVWF  01
063C2:  MOVLW  00
063C4:  ADDWFC x63,W
063C6:  MOVWF  03
063C8:  MOVF   01,W
063CA:  ADDLW  3E
063CC:  MOVWF  01
063CE:  MOVLW  01
063D0:  ADDWFC 03,F
063D2:  MOVF   01,W
063D4:  ADDLW  01
063D6:  MOVWF  FE9
063D8:  MOVLW  00
063DA:  ADDWFC 03,W
063DC:  MOVWF  FEA
063DE:  MOVFF  FEF,664
063E2:  MOVFF  661,665
063E6:  MOVFF  664,666
063EA:  MOVLB  0
063EC:  RCALL  627C
063EE:  CLRF   1B
063F0:  BTFSC  FF2.7
063F2:  BSF    1B.7
063F4:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
063F6:  MOVLB  6
063F8:  CLRF   xD7
063FA:  MOVFF  65E,6D6
063FE:  CLRF   xD9
06400:  MOVLW  21
06402:  MOVWF  xD8
06404:  MOVLB  0
06406:  CALL   0442
0640A:  BTFSC  1B.7
0640C:  BSF    FF2.7
0640E:  MOVF   01,W
06410:  ADDLW  02
06412:  MOVLB  6
06414:  MOVWF  x5F
06416:  MOVLW  00
06418:  ADDWFC 02,W
0641A:  MOVWF  x60
0641C:  MOVLW  01
0641E:  ADDWF  x5F,W
06420:  MOVWF  01
06422:  MOVLW  00
06424:  ADDWFC x60,W
06426:  MOVWF  03
06428:  MOVF   01,W
0642A:  ADDLW  3E
0642C:  MOVWF  01
0642E:  MOVLW  01
06430:  ADDWFC 03,F
06432:  MOVF   01,W
06434:  ADDLW  02
06436:  MOVWF  FE9
06438:  MOVLW  00
0643A:  ADDWFC 03,W
0643C:  MOVWF  FEA
0643E:  BCF    FEF.0
06440:  CLRF   1B
06442:  BTFSC  FF2.7
06444:  BSF    1B.7
06446:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
06448:  CLRF   xD7
0644A:  MOVFF  65E,6D6
0644E:  CLRF   xD9
06450:  MOVLW  21
06452:  MOVWF  xD8
06454:  MOVLB  0
06456:  CALL   0442
0645A:  BTFSC  1B.7
0645C:  BSF    FF2.7
0645E:  MOVF   01,W
06460:  ADDLW  02
06462:  MOVLB  6
06464:  MOVWF  x5F
06466:  MOVLW  00
06468:  ADDWFC 02,W
0646A:  MOVWF  x60
0646C:  MOVLW  01
0646E:  ADDWF  x5F,W
06470:  MOVWF  01
06472:  MOVLW  00
06474:  ADDWFC x60,W
06476:  MOVWF  03
06478:  MOVF   01,W
0647A:  ADDLW  3E
0647C:  MOVWF  01
0647E:  MOVLW  01
06480:  ADDWFC 03,F
06482:  MOVF   01,W
06484:  ADDLW  01
06486:  MOVWF  FE9
06488:  MOVLW  00
0648A:  ADDWFC 03,W
0648C:  MOVWF  FEA
0648E:  CLRF   FEF
06490:  CLRF   1B
06492:  BTFSC  FF2.7
06494:  BSF    1B.7
06496:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
06498:  CLRF   xD7
0649A:  MOVFF  65E,6D6
0649E:  CLRF   xD9
064A0:  MOVLW  21
064A2:  MOVWF  xD8
064A4:  MOVLB  0
064A6:  CALL   0442
064AA:  BTFSC  1B.7
064AC:  BSF    FF2.7
064AE:  MOVF   01,W
064B0:  ADDLW  02
064B2:  MOVLB  6
064B4:  MOVWF  x5F
064B6:  MOVLW  00
064B8:  ADDWFC 02,W
064BA:  MOVWF  x60
064BC:  MOVLW  01
064BE:  ADDWF  x5F,W
064C0:  MOVWF  01
064C2:  MOVLW  00
064C4:  ADDWFC x60,W
064C6:  MOVWF  03
064C8:  MOVF   01,W
064CA:  ADDLW  3E
064CC:  MOVWF  01
064CE:  MOVLW  01
064D0:  ADDWFC 03,F
064D2:  MOVF   01,W
064D4:  ADDLW  05
064D6:  MOVWF  FE9
064D8:  MOVLW  00
064DA:  ADDWFC 03,W
064DC:  MOVWF  FEA
064DE:  BTFSS  FEF.0
064E0:  BRA    6634
064E2:  CLRF   1B
064E4:  BTFSC  FF2.7
064E6:  BSF    1B.7
064E8:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
064EA:  CLRF   xD7
064EC:  MOVFF  65E,6D6
064F0:  CLRF   xD9
064F2:  MOVLW  21
064F4:  MOVWF  xD8
064F6:  MOVLB  0
064F8:  CALL   0442
064FC:  BTFSC  1B.7
064FE:  BSF    FF2.7
06500:  MOVF   01,W
06502:  ADDLW  02
06504:  MOVLB  6
06506:  MOVWF  x5F
06508:  MOVLW  00
0650A:  ADDWFC 02,W
0650C:  MOVWF  x60
0650E:  MOVLW  01
06510:  ADDWF  x5F,W
06512:  MOVWF  01
06514:  MOVLW  00
06516:  ADDWFC x60,W
06518:  MOVWF  03
0651A:  MOVF   01,W
0651C:  ADDLW  3E
0651E:  MOVWF  01
06520:  MOVLW  01
06522:  ADDWFC 03,F
06524:  MOVF   01,W
06526:  ADDLW  03
06528:  MOVWF  FE9
0652A:  MOVLW  00
0652C:  ADDWFC 03,W
0652E:  MOVWF  FEA
06530:  MOVFF  FEF,661
06534:  CLRF   1B
06536:  BTFSC  FF2.7
06538:  BSF    1B.7
0653A:  BCF    FF2.7
0653C:  CLRF   xD7
0653E:  MOVFF  65E,6D6
06542:  CLRF   xD9
06544:  MOVLW  21
06546:  MOVWF  xD8
06548:  MOVLB  0
0654A:  CALL   0442
0654E:  BTFSC  1B.7
06550:  BSF    FF2.7
06552:  MOVF   01,W
06554:  ADDLW  02
06556:  MOVLB  6
06558:  MOVWF  x62
0655A:  MOVLW  00
0655C:  ADDWFC 02,W
0655E:  MOVWF  x63
06560:  MOVLW  01
06562:  ADDWF  x62,W
06564:  MOVWF  01
06566:  MOVLW  00
06568:  ADDWFC x63,W
0656A:  MOVWF  03
0656C:  MOVF   01,W
0656E:  ADDLW  3E
06570:  MOVWF  01
06572:  MOVLW  01
06574:  ADDWFC 03,F
06576:  MOVF   01,W
06578:  ADDLW  04
0657A:  MOVWF  FE9
0657C:  MOVLW  00
0657E:  ADDWFC 03,W
06580:  MOVWF  FEA
06582:  MOVFF  FEF,664
06586:  MOVFF  661,665
0658A:  MOVFF  664,666
0658E:  MOVLB  0
06590:  RCALL  627C
06592:  CLRF   1B
06594:  BTFSC  FF2.7
06596:  BSF    1B.7
06598:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
0659A:  MOVLB  6
0659C:  CLRF   xD7
0659E:  MOVFF  65E,6D6
065A2:  CLRF   xD9
065A4:  MOVLW  21
065A6:  MOVWF  xD8
065A8:  MOVLB  0
065AA:  CALL   0442
065AE:  BTFSC  1B.7
065B0:  BSF    FF2.7
065B2:  MOVF   01,W
065B4:  ADDLW  02
065B6:  MOVLB  6
065B8:  MOVWF  x5F
065BA:  MOVLW  00
065BC:  ADDWFC 02,W
065BE:  MOVWF  x60
065C0:  MOVLW  01
065C2:  ADDWF  x5F,W
065C4:  MOVWF  01
065C6:  MOVLW  00
065C8:  ADDWFC x60,W
065CA:  MOVWF  03
065CC:  MOVF   01,W
065CE:  ADDLW  3E
065D0:  MOVWF  01
065D2:  MOVLW  01
065D4:  ADDWFC 03,F
065D6:  MOVF   01,W
065D8:  ADDLW  05
065DA:  MOVWF  FE9
065DC:  MOVLW  00
065DE:  ADDWFC 03,W
065E0:  MOVWF  FEA
065E2:  BCF    FEF.0
065E4:  CLRF   1B
065E6:  BTFSC  FF2.7
065E8:  BSF    1B.7
065EA:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
065EC:  CLRF   xD7
065EE:  MOVFF  65E,6D6
065F2:  CLRF   xD9
065F4:  MOVLW  21
065F6:  MOVWF  xD8
065F8:  MOVLB  0
065FA:  CALL   0442
065FE:  BTFSC  1B.7
06600:  BSF    FF2.7
06602:  MOVF   01,W
06604:  ADDLW  02
06606:  MOVLB  6
06608:  MOVWF  x5F
0660A:  MOVLW  00
0660C:  ADDWFC 02,W
0660E:  MOVWF  x60
06610:  MOVLW  01
06612:  ADDWF  x5F,W
06614:  MOVWF  01
06616:  MOVLW  00
06618:  ADDWFC x60,W
0661A:  MOVWF  03
0661C:  MOVF   01,W
0661E:  ADDLW  3E
06620:  MOVWF  01
06622:  MOVLW  01
06624:  ADDWFC 03,F
06626:  MOVF   01,W
06628:  ADDLW  04
0662A:  MOVWF  FE9
0662C:  MOVLW  00
0662E:  ADDWFC 03,W
06630:  MOVWF  FEA
06632:  CLRF   FEF
06634:  CLRF   1B
06636:  BTFSC  FF2.7
06638:  BSF    1B.7
0663A:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
0663C:  CLRF   xD7
0663E:  MOVFF  65E,6D6
06642:  CLRF   xD9
06644:  MOVLW  21
06646:  MOVWF  xD8
06648:  MOVLB  0
0664A:  CALL   0442
0664E:  BTFSC  1B.7
06650:  BSF    FF2.7
06652:  MOVF   01,W
06654:  ADDLW  02
06656:  MOVLB  6
06658:  MOVWF  x5F
0665A:  MOVLW  00
0665C:  ADDWFC 02,W
0665E:  MOVWF  x60
06660:  MOVLW  01
06662:  ADDWF  x5F,W
06664:  MOVWF  01
06666:  MOVLW  00
06668:  ADDWFC x60,W
0666A:  MOVWF  03
0666C:  MOVF   01,W
0666E:  ADDLW  3E
06670:  MOVWF  01
06672:  MOVLW  01
06674:  ADDWFC 03,F
06676:  MOVF   01,W
06678:  ADDLW  08
0667A:  MOVWF  FE9
0667C:  MOVLW  00
0667E:  ADDWFC 03,W
06680:  MOVWF  FEA
06682:  BTFSS  FEF.0
06684:  BRA    67D8
06686:  CLRF   1B
06688:  BTFSC  FF2.7
0668A:  BSF    1B.7
0668C:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
0668E:  CLRF   xD7
06690:  MOVFF  65E,6D6
06694:  CLRF   xD9
06696:  MOVLW  21
06698:  MOVWF  xD8
0669A:  MOVLB  0
0669C:  CALL   0442
066A0:  BTFSC  1B.7
066A2:  BSF    FF2.7
066A4:  MOVF   01,W
066A6:  ADDLW  02
066A8:  MOVLB  6
066AA:  MOVWF  x5F
066AC:  MOVLW  00
066AE:  ADDWFC 02,W
066B0:  MOVWF  x60
066B2:  MOVLW  01
066B4:  ADDWF  x5F,W
066B6:  MOVWF  01
066B8:  MOVLW  00
066BA:  ADDWFC x60,W
066BC:  MOVWF  03
066BE:  MOVF   01,W
066C0:  ADDLW  3E
066C2:  MOVWF  01
066C4:  MOVLW  01
066C6:  ADDWFC 03,F
066C8:  MOVF   01,W
066CA:  ADDLW  06
066CC:  MOVWF  FE9
066CE:  MOVLW  00
066D0:  ADDWFC 03,W
066D2:  MOVWF  FEA
066D4:  MOVFF  FEF,661
066D8:  CLRF   1B
066DA:  BTFSC  FF2.7
066DC:  BSF    1B.7
066DE:  BCF    FF2.7
066E0:  CLRF   xD7
066E2:  MOVFF  65E,6D6
066E6:  CLRF   xD9
066E8:  MOVLW  21
066EA:  MOVWF  xD8
066EC:  MOVLB  0
066EE:  CALL   0442
066F2:  BTFSC  1B.7
066F4:  BSF    FF2.7
066F6:  MOVF   01,W
066F8:  ADDLW  02
066FA:  MOVLB  6
066FC:  MOVWF  x62
066FE:  MOVLW  00
06700:  ADDWFC 02,W
06702:  MOVWF  x63
06704:  MOVLW  01
06706:  ADDWF  x62,W
06708:  MOVWF  01
0670A:  MOVLW  00
0670C:  ADDWFC x63,W
0670E:  MOVWF  03
06710:  MOVF   01,W
06712:  ADDLW  3E
06714:  MOVWF  01
06716:  MOVLW  01
06718:  ADDWFC 03,F
0671A:  MOVF   01,W
0671C:  ADDLW  07
0671E:  MOVWF  FE9
06720:  MOVLW  00
06722:  ADDWFC 03,W
06724:  MOVWF  FEA
06726:  MOVFF  FEF,664
0672A:  MOVFF  661,665
0672E:  MOVFF  664,666
06732:  MOVLB  0
06734:  RCALL  627C
06736:  CLRF   1B
06738:  BTFSC  FF2.7
0673A:  BSF    1B.7
0673C:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
0673E:  MOVLB  6
06740:  CLRF   xD7
06742:  MOVFF  65E,6D6
06746:  CLRF   xD9
06748:  MOVLW  21
0674A:  MOVWF  xD8
0674C:  MOVLB  0
0674E:  CALL   0442
06752:  BTFSC  1B.7
06754:  BSF    FF2.7
06756:  MOVF   01,W
06758:  ADDLW  02
0675A:  MOVLB  6
0675C:  MOVWF  x5F
0675E:  MOVLW  00
06760:  ADDWFC 02,W
06762:  MOVWF  x60
06764:  MOVLW  01
06766:  ADDWF  x5F,W
06768:  MOVWF  01
0676A:  MOVLW  00
0676C:  ADDWFC x60,W
0676E:  MOVWF  03
06770:  MOVF   01,W
06772:  ADDLW  3E
06774:  MOVWF  01
06776:  MOVLW  01
06778:  ADDWFC 03,F
0677A:  MOVF   01,W
0677C:  ADDLW  08
0677E:  MOVWF  FE9
06780:  MOVLW  00
06782:  ADDWFC 03,W
06784:  MOVWF  FEA
06786:  BCF    FEF.0
06788:  CLRF   1B
0678A:  BTFSC  FF2.7
0678C:  BSF    1B.7
0678E:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
06790:  CLRF   xD7
06792:  MOVFF  65E,6D6
06796:  CLRF   xD9
06798:  MOVLW  21
0679A:  MOVWF  xD8
0679C:  MOVLB  0
0679E:  CALL   0442
067A2:  BTFSC  1B.7
067A4:  BSF    FF2.7
067A6:  MOVF   01,W
067A8:  ADDLW  02
067AA:  MOVLB  6
067AC:  MOVWF  x5F
067AE:  MOVLW  00
067B0:  ADDWFC 02,W
067B2:  MOVWF  x60
067B4:  MOVLW  01
067B6:  ADDWF  x5F,W
067B8:  MOVWF  01
067BA:  MOVLW  00
067BC:  ADDWFC x60,W
067BE:  MOVWF  03
067C0:  MOVF   01,W
067C2:  ADDLW  3E
067C4:  MOVWF  01
067C6:  MOVLW  01
067C8:  ADDWFC 03,F
067CA:  MOVF   01,W
067CC:  ADDLW  07
067CE:  MOVWF  FE9
067D0:  MOVLW  00
067D2:  ADDWFC 03,W
067D4:  MOVWF  FEA
067D6:  CLRF   FEF
....................          } 
....................  
....................          break; 
067D8:  GOTO   71C6
....................          case button_switch: 
067DC:  CLRF   1B
067DE:  BTFSC  FF2.7
067E0:  BSF    1B.7
067E2:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
067E4:  MOVLB  6
067E6:  CLRF   xD7
067E8:  MOVFF  65E,6D6
067EC:  CLRF   xD9
067EE:  MOVLW  21
067F0:  MOVWF  xD8
067F2:  MOVLB  0
067F4:  CALL   0442
067F8:  BTFSC  1B.7
067FA:  BSF    FF2.7
067FC:  MOVF   01,W
067FE:  ADDLW  02
06800:  MOVLB  6
06802:  MOVWF  x5F
06804:  MOVLW  00
06806:  ADDWFC 02,W
06808:  MOVWF  x60
0680A:  MOVLW  01
0680C:  ADDWF  x5F,W
0680E:  MOVWF  01
06810:  MOVLW  00
06812:  ADDWFC x60,W
06814:  MOVWF  03
06816:  MOVF   01,W
06818:  ADDLW  3E
0681A:  MOVWF  01
0681C:  MOVLW  01
0681E:  ADDWFC 03,F
06820:  MOVF   01,W
06822:  ADDLW  02
06824:  MOVWF  FE9
06826:  MOVLW  00
06828:  ADDWFC 03,W
0682A:  MOVWF  FEA
0682C:  BTFSS  FEF.0
0682E:  BRA    697E
06830:  CLRF   1B
06832:  BTFSC  FF2.7
06834:  BSF    1B.7
06836:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
06838:  CLRF   xD7
0683A:  MOVFF  65E,6D6
0683E:  CLRF   xD9
06840:  MOVLW  21
06842:  MOVWF  xD8
06844:  MOVLB  0
06846:  CALL   0442
0684A:  BTFSC  1B.7
0684C:  BSF    FF2.7
0684E:  MOVF   01,W
06850:  ADDLW  02
06852:  MOVLB  6
06854:  MOVWF  x5F
06856:  MOVLW  00
06858:  ADDWFC 02,W
0685A:  MOVWF  x60
0685C:  MOVLW  01
0685E:  ADDWF  x5F,W
06860:  MOVWF  01
06862:  MOVLW  00
06864:  ADDWFC x60,W
06866:  MOVWF  03
06868:  MOVF   01,W
0686A:  ADDLW  3E
0686C:  MOVWF  01
0686E:  MOVLW  01
06870:  ADDWFC 03,F
06872:  MOVFF  01,FE9
06876:  MOVFF  03,FEA
0687A:  MOVFF  FEF,661
0687E:  CLRF   1B
06880:  BTFSC  FF2.7
06882:  BSF    1B.7
06884:  BCF    FF2.7
06886:  CLRF   xD7
06888:  MOVFF  65E,6D6
0688C:  CLRF   xD9
0688E:  MOVLW  21
06890:  MOVWF  xD8
06892:  MOVLB  0
06894:  CALL   0442
06898:  BTFSC  1B.7
0689A:  BSF    FF2.7
0689C:  MOVF   01,W
0689E:  ADDLW  02
068A0:  MOVLB  6
068A2:  MOVWF  x62
068A4:  MOVLW  00
068A6:  ADDWFC 02,W
068A8:  MOVWF  x63
068AA:  MOVLW  01
068AC:  ADDWF  x62,W
068AE:  MOVWF  01
068B0:  MOVLW  00
068B2:  ADDWFC x63,W
068B4:  MOVWF  03
068B6:  MOVF   01,W
068B8:  ADDLW  3E
068BA:  MOVWF  01
068BC:  MOVLW  01
068BE:  ADDWFC 03,F
068C0:  MOVF   01,W
068C2:  ADDLW  01
068C4:  MOVWF  FE9
068C6:  MOVLW  00
068C8:  ADDWFC 03,W
068CA:  MOVWF  FEA
068CC:  MOVFF  FEF,664
068D0:  MOVFF  661,665
068D4:  MOVFF  664,666
068D8:  MOVLB  0
068DA:  RCALL  627C
068DC:  CLRF   1B
068DE:  BTFSC  FF2.7
068E0:  BSF    1B.7
068E2:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
068E4:  MOVLB  6
068E6:  CLRF   xD7
068E8:  MOVFF  65E,6D6
068EC:  CLRF   xD9
068EE:  MOVLW  21
068F0:  MOVWF  xD8
068F2:  MOVLB  0
068F4:  CALL   0442
068F8:  BTFSC  1B.7
068FA:  BSF    FF2.7
068FC:  MOVF   01,W
068FE:  ADDLW  02
06900:  MOVLB  6
06902:  MOVWF  x5F
06904:  MOVLW  00
06906:  ADDWFC 02,W
06908:  MOVWF  x60
0690A:  MOVLW  01
0690C:  ADDWF  x5F,W
0690E:  MOVWF  01
06910:  MOVLW  00
06912:  ADDWFC x60,W
06914:  MOVWF  03
06916:  MOVF   01,W
06918:  ADDLW  3E
0691A:  MOVWF  01
0691C:  MOVLW  01
0691E:  ADDWFC 03,F
06920:  MOVF   01,W
06922:  ADDLW  02
06924:  MOVWF  FE9
06926:  MOVLW  00
06928:  ADDWFC 03,W
0692A:  MOVWF  FEA
0692C:  BCF    FEF.0
0692E:  CLRF   1B
06930:  BTFSC  FF2.7
06932:  BSF    1B.7
06934:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
06936:  CLRF   xD7
06938:  MOVFF  65E,6D6
0693C:  CLRF   xD9
0693E:  MOVLW  21
06940:  MOVWF  xD8
06942:  MOVLB  0
06944:  CALL   0442
06948:  BTFSC  1B.7
0694A:  BSF    FF2.7
0694C:  MOVF   01,W
0694E:  ADDLW  02
06950:  MOVLB  6
06952:  MOVWF  x5F
06954:  MOVLW  00
06956:  ADDWFC 02,W
06958:  MOVWF  x60
0695A:  MOVLW  01
0695C:  ADDWF  x5F,W
0695E:  MOVWF  01
06960:  MOVLW  00
06962:  ADDWFC x60,W
06964:  MOVWF  03
06966:  MOVF   01,W
06968:  ADDLW  3E
0696A:  MOVWF  01
0696C:  MOVLW  01
0696E:  ADDWFC 03,F
06970:  MOVF   01,W
06972:  ADDLW  01
06974:  MOVWF  FE9
06976:  MOVLW  00
06978:  ADDWFC 03,W
0697A:  MOVWF  FEA
0697C:  CLRF   FEF
0697E:  CLRF   1B
06980:  BTFSC  FF2.7
06982:  BSF    1B.7
06984:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
06986:  CLRF   xD7
06988:  MOVFF  65E,6D6
0698C:  CLRF   xD9
0698E:  MOVLW  21
06990:  MOVWF  xD8
06992:  MOVLB  0
06994:  CALL   0442
06998:  BTFSC  1B.7
0699A:  BSF    FF2.7
0699C:  MOVF   01,W
0699E:  ADDLW  02
069A0:  MOVLB  6
069A2:  MOVWF  x5F
069A4:  MOVLW  00
069A6:  ADDWFC 02,W
069A8:  MOVWF  x60
069AA:  MOVLW  01
069AC:  ADDWF  x5F,W
069AE:  MOVWF  01
069B0:  MOVLW  00
069B2:  ADDWFC x60,W
069B4:  MOVWF  03
069B6:  MOVF   01,W
069B8:  ADDLW  3E
069BA:  MOVWF  01
069BC:  MOVLW  01
069BE:  ADDWFC 03,F
069C0:  MOVF   01,W
069C2:  ADDLW  05
069C4:  MOVWF  FE9
069C6:  MOVLW  00
069C8:  ADDWFC 03,W
069CA:  MOVWF  FEA
069CC:  BTFSS  FEF.0
069CE:  BRA    6B24
069D0:  CLRF   1B
069D2:  BTFSC  FF2.7
069D4:  BSF    1B.7
069D6:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
069D8:  CLRF   xD7
069DA:  MOVFF  65E,6D6
069DE:  CLRF   xD9
069E0:  MOVLW  21
069E2:  MOVWF  xD8
069E4:  MOVLB  0
069E6:  CALL   0442
069EA:  BTFSC  1B.7
069EC:  BSF    FF2.7
069EE:  MOVF   01,W
069F0:  ADDLW  02
069F2:  MOVLB  6
069F4:  MOVWF  x5F
069F6:  MOVLW  00
069F8:  ADDWFC 02,W
069FA:  MOVWF  x60
069FC:  MOVLW  01
069FE:  ADDWF  x5F,W
06A00:  MOVWF  01
06A02:  MOVLW  00
06A04:  ADDWFC x60,W
06A06:  MOVWF  03
06A08:  MOVF   01,W
06A0A:  ADDLW  3E
06A0C:  MOVWF  01
06A0E:  MOVLW  01
06A10:  ADDWFC 03,F
06A12:  MOVF   01,W
06A14:  ADDLW  03
06A16:  MOVWF  FE9
06A18:  MOVLW  00
06A1A:  ADDWFC 03,W
06A1C:  MOVWF  FEA
06A1E:  MOVFF  FEF,661
06A22:  CLRF   1B
06A24:  BTFSC  FF2.7
06A26:  BSF    1B.7
06A28:  BCF    FF2.7
06A2A:  CLRF   xD7
06A2C:  MOVFF  65E,6D6
06A30:  CLRF   xD9
06A32:  MOVLW  21
06A34:  MOVWF  xD8
06A36:  MOVLB  0
06A38:  CALL   0442
06A3C:  BTFSC  1B.7
06A3E:  BSF    FF2.7
06A40:  MOVF   01,W
06A42:  ADDLW  02
06A44:  MOVLB  6
06A46:  MOVWF  x62
06A48:  MOVLW  00
06A4A:  ADDWFC 02,W
06A4C:  MOVWF  x63
06A4E:  MOVLW  01
06A50:  ADDWF  x62,W
06A52:  MOVWF  01
06A54:  MOVLW  00
06A56:  ADDWFC x63,W
06A58:  MOVWF  03
06A5A:  MOVF   01,W
06A5C:  ADDLW  3E
06A5E:  MOVWF  01
06A60:  MOVLW  01
06A62:  ADDWFC 03,F
06A64:  MOVF   01,W
06A66:  ADDLW  04
06A68:  MOVWF  FE9
06A6A:  MOVLW  00
06A6C:  ADDWFC 03,W
06A6E:  MOVWF  FEA
06A70:  MOVFF  FEF,664
06A74:  MOVFF  661,665
06A78:  MOVFF  664,666
06A7C:  MOVLB  0
06A7E:  CALL   627C
06A82:  CLRF   1B
06A84:  BTFSC  FF2.7
06A86:  BSF    1B.7
06A88:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06A8A:  MOVLB  6
06A8C:  CLRF   xD7
06A8E:  MOVFF  65E,6D6
06A92:  CLRF   xD9
06A94:  MOVLW  21
06A96:  MOVWF  xD8
06A98:  MOVLB  0
06A9A:  CALL   0442
06A9E:  BTFSC  1B.7
06AA0:  BSF    FF2.7
06AA2:  MOVF   01,W
06AA4:  ADDLW  02
06AA6:  MOVLB  6
06AA8:  MOVWF  x5F
06AAA:  MOVLW  00
06AAC:  ADDWFC 02,W
06AAE:  MOVWF  x60
06AB0:  MOVLW  01
06AB2:  ADDWF  x5F,W
06AB4:  MOVWF  01
06AB6:  MOVLW  00
06AB8:  ADDWFC x60,W
06ABA:  MOVWF  03
06ABC:  MOVF   01,W
06ABE:  ADDLW  3E
06AC0:  MOVWF  01
06AC2:  MOVLW  01
06AC4:  ADDWFC 03,F
06AC6:  MOVF   01,W
06AC8:  ADDLW  05
06ACA:  MOVWF  FE9
06ACC:  MOVLW  00
06ACE:  ADDWFC 03,W
06AD0:  MOVWF  FEA
06AD2:  BCF    FEF.0
06AD4:  CLRF   1B
06AD6:  BTFSC  FF2.7
06AD8:  BSF    1B.7
06ADA:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
06ADC:  CLRF   xD7
06ADE:  MOVFF  65E,6D6
06AE2:  CLRF   xD9
06AE4:  MOVLW  21
06AE6:  MOVWF  xD8
06AE8:  MOVLB  0
06AEA:  CALL   0442
06AEE:  BTFSC  1B.7
06AF0:  BSF    FF2.7
06AF2:  MOVF   01,W
06AF4:  ADDLW  02
06AF6:  MOVLB  6
06AF8:  MOVWF  x5F
06AFA:  MOVLW  00
06AFC:  ADDWFC 02,W
06AFE:  MOVWF  x60
06B00:  MOVLW  01
06B02:  ADDWF  x5F,W
06B04:  MOVWF  01
06B06:  MOVLW  00
06B08:  ADDWFC x60,W
06B0A:  MOVWF  03
06B0C:  MOVF   01,W
06B0E:  ADDLW  3E
06B10:  MOVWF  01
06B12:  MOVLW  01
06B14:  ADDWFC 03,F
06B16:  MOVF   01,W
06B18:  ADDLW  04
06B1A:  MOVWF  FE9
06B1C:  MOVLW  00
06B1E:  ADDWFC 03,W
06B20:  MOVWF  FEA
06B22:  CLRF   FEF
....................          } 
....................  
....................          break; 
06B24:  BRA    71C6
....................          case on_off_switch: 
06B26:  CLRF   1B
06B28:  BTFSC  FF2.7
06B2A:  BSF    1B.7
06B2C:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
06B2E:  MOVLB  6
06B30:  CLRF   xD7
06B32:  MOVFF  65E,6D6
06B36:  CLRF   xD9
06B38:  MOVLW  21
06B3A:  MOVWF  xD8
06B3C:  MOVLB  0
06B3E:  CALL   0442
06B42:  BTFSC  1B.7
06B44:  BSF    FF2.7
06B46:  MOVF   01,W
06B48:  ADDLW  02
06B4A:  MOVLB  6
06B4C:  MOVWF  x5F
06B4E:  MOVLW  00
06B50:  ADDWFC 02,W
06B52:  MOVWF  x60
06B54:  MOVLW  01
06B56:  ADDWF  x5F,W
06B58:  MOVWF  01
06B5A:  MOVLW  00
06B5C:  ADDWFC x60,W
06B5E:  MOVWF  03
06B60:  MOVF   01,W
06B62:  ADDLW  3E
06B64:  MOVWF  01
06B66:  MOVLW  01
06B68:  ADDWFC 03,F
06B6A:  MOVF   01,W
06B6C:  ADDLW  02
06B6E:  MOVWF  FE9
06B70:  MOVLW  00
06B72:  ADDWFC 03,W
06B74:  MOVWF  FEA
06B76:  BTFSS  FEF.0
06B78:  BRA    6CCA
06B7A:  CLRF   1B
06B7C:  BTFSC  FF2.7
06B7E:  BSF    1B.7
06B80:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
06B82:  CLRF   xD7
06B84:  MOVFF  65E,6D6
06B88:  CLRF   xD9
06B8A:  MOVLW  21
06B8C:  MOVWF  xD8
06B8E:  MOVLB  0
06B90:  CALL   0442
06B94:  BTFSC  1B.7
06B96:  BSF    FF2.7
06B98:  MOVF   01,W
06B9A:  ADDLW  02
06B9C:  MOVLB  6
06B9E:  MOVWF  x5F
06BA0:  MOVLW  00
06BA2:  ADDWFC 02,W
06BA4:  MOVWF  x60
06BA6:  MOVLW  01
06BA8:  ADDWF  x5F,W
06BAA:  MOVWF  01
06BAC:  MOVLW  00
06BAE:  ADDWFC x60,W
06BB0:  MOVWF  03
06BB2:  MOVF   01,W
06BB4:  ADDLW  3E
06BB6:  MOVWF  01
06BB8:  MOVLW  01
06BBA:  ADDWFC 03,F
06BBC:  MOVFF  01,FE9
06BC0:  MOVFF  03,FEA
06BC4:  MOVFF  FEF,661
06BC8:  CLRF   1B
06BCA:  BTFSC  FF2.7
06BCC:  BSF    1B.7
06BCE:  BCF    FF2.7
06BD0:  CLRF   xD7
06BD2:  MOVFF  65E,6D6
06BD6:  CLRF   xD9
06BD8:  MOVLW  21
06BDA:  MOVWF  xD8
06BDC:  MOVLB  0
06BDE:  CALL   0442
06BE2:  BTFSC  1B.7
06BE4:  BSF    FF2.7
06BE6:  MOVF   01,W
06BE8:  ADDLW  02
06BEA:  MOVLB  6
06BEC:  MOVWF  x62
06BEE:  MOVLW  00
06BF0:  ADDWFC 02,W
06BF2:  MOVWF  x63
06BF4:  MOVLW  01
06BF6:  ADDWF  x62,W
06BF8:  MOVWF  01
06BFA:  MOVLW  00
06BFC:  ADDWFC x63,W
06BFE:  MOVWF  03
06C00:  MOVF   01,W
06C02:  ADDLW  3E
06C04:  MOVWF  01
06C06:  MOVLW  01
06C08:  ADDWFC 03,F
06C0A:  MOVF   01,W
06C0C:  ADDLW  01
06C0E:  MOVWF  FE9
06C10:  MOVLW  00
06C12:  ADDWFC 03,W
06C14:  MOVWF  FEA
06C16:  MOVFF  FEF,664
06C1A:  MOVFF  661,665
06C1E:  MOVFF  664,666
06C22:  MOVLB  0
06C24:  CALL   627C
06C28:  CLRF   1B
06C2A:  BTFSC  FF2.7
06C2C:  BSF    1B.7
06C2E:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06C30:  MOVLB  6
06C32:  CLRF   xD7
06C34:  MOVFF  65E,6D6
06C38:  CLRF   xD9
06C3A:  MOVLW  21
06C3C:  MOVWF  xD8
06C3E:  MOVLB  0
06C40:  CALL   0442
06C44:  BTFSC  1B.7
06C46:  BSF    FF2.7
06C48:  MOVF   01,W
06C4A:  ADDLW  02
06C4C:  MOVLB  6
06C4E:  MOVWF  x5F
06C50:  MOVLW  00
06C52:  ADDWFC 02,W
06C54:  MOVWF  x60
06C56:  MOVLW  01
06C58:  ADDWF  x5F,W
06C5A:  MOVWF  01
06C5C:  MOVLW  00
06C5E:  ADDWFC x60,W
06C60:  MOVWF  03
06C62:  MOVF   01,W
06C64:  ADDLW  3E
06C66:  MOVWF  01
06C68:  MOVLW  01
06C6A:  ADDWFC 03,F
06C6C:  MOVF   01,W
06C6E:  ADDLW  02
06C70:  MOVWF  FE9
06C72:  MOVLW  00
06C74:  ADDWFC 03,W
06C76:  MOVWF  FEA
06C78:  BCF    FEF.0
06C7A:  CLRF   1B
06C7C:  BTFSC  FF2.7
06C7E:  BSF    1B.7
06C80:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
06C82:  CLRF   xD7
06C84:  MOVFF  65E,6D6
06C88:  CLRF   xD9
06C8A:  MOVLW  21
06C8C:  MOVWF  xD8
06C8E:  MOVLB  0
06C90:  CALL   0442
06C94:  BTFSC  1B.7
06C96:  BSF    FF2.7
06C98:  MOVF   01,W
06C9A:  ADDLW  02
06C9C:  MOVLB  6
06C9E:  MOVWF  x5F
06CA0:  MOVLW  00
06CA2:  ADDWFC 02,W
06CA4:  MOVWF  x60
06CA6:  MOVLW  01
06CA8:  ADDWF  x5F,W
06CAA:  MOVWF  01
06CAC:  MOVLW  00
06CAE:  ADDWFC x60,W
06CB0:  MOVWF  03
06CB2:  MOVF   01,W
06CB4:  ADDLW  3E
06CB6:  MOVWF  01
06CB8:  MOVLW  01
06CBA:  ADDWFC 03,F
06CBC:  MOVF   01,W
06CBE:  ADDLW  01
06CC0:  MOVWF  FE9
06CC2:  MOVLW  00
06CC4:  ADDWFC 03,W
06CC6:  MOVWF  FEA
06CC8:  CLRF   FEF
06CCA:  CLRF   1B
06CCC:  BTFSC  FF2.7
06CCE:  BSF    1B.7
06CD0:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
06CD2:  CLRF   xD7
06CD4:  MOVFF  65E,6D6
06CD8:  CLRF   xD9
06CDA:  MOVLW  21
06CDC:  MOVWF  xD8
06CDE:  MOVLB  0
06CE0:  CALL   0442
06CE4:  BTFSC  1B.7
06CE6:  BSF    FF2.7
06CE8:  MOVF   01,W
06CEA:  ADDLW  02
06CEC:  MOVLB  6
06CEE:  MOVWF  x5F
06CF0:  MOVLW  00
06CF2:  ADDWFC 02,W
06CF4:  MOVWF  x60
06CF6:  MOVLW  01
06CF8:  ADDWF  x5F,W
06CFA:  MOVWF  01
06CFC:  MOVLW  00
06CFE:  ADDWFC x60,W
06D00:  MOVWF  03
06D02:  MOVF   01,W
06D04:  ADDLW  3E
06D06:  MOVWF  01
06D08:  MOVLW  01
06D0A:  ADDWFC 03,F
06D0C:  MOVF   01,W
06D0E:  ADDLW  05
06D10:  MOVWF  FE9
06D12:  MOVLW  00
06D14:  ADDWFC 03,W
06D16:  MOVWF  FEA
06D18:  BTFSS  FEF.0
06D1A:  BRA    6E70
06D1C:  CLRF   1B
06D1E:  BTFSC  FF2.7
06D20:  BSF    1B.7
06D22:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
06D24:  CLRF   xD7
06D26:  MOVFF  65E,6D6
06D2A:  CLRF   xD9
06D2C:  MOVLW  21
06D2E:  MOVWF  xD8
06D30:  MOVLB  0
06D32:  CALL   0442
06D36:  BTFSC  1B.7
06D38:  BSF    FF2.7
06D3A:  MOVF   01,W
06D3C:  ADDLW  02
06D3E:  MOVLB  6
06D40:  MOVWF  x5F
06D42:  MOVLW  00
06D44:  ADDWFC 02,W
06D46:  MOVWF  x60
06D48:  MOVLW  01
06D4A:  ADDWF  x5F,W
06D4C:  MOVWF  01
06D4E:  MOVLW  00
06D50:  ADDWFC x60,W
06D52:  MOVWF  03
06D54:  MOVF   01,W
06D56:  ADDLW  3E
06D58:  MOVWF  01
06D5A:  MOVLW  01
06D5C:  ADDWFC 03,F
06D5E:  MOVF   01,W
06D60:  ADDLW  03
06D62:  MOVWF  FE9
06D64:  MOVLW  00
06D66:  ADDWFC 03,W
06D68:  MOVWF  FEA
06D6A:  MOVFF  FEF,661
06D6E:  CLRF   1B
06D70:  BTFSC  FF2.7
06D72:  BSF    1B.7
06D74:  BCF    FF2.7
06D76:  CLRF   xD7
06D78:  MOVFF  65E,6D6
06D7C:  CLRF   xD9
06D7E:  MOVLW  21
06D80:  MOVWF  xD8
06D82:  MOVLB  0
06D84:  CALL   0442
06D88:  BTFSC  1B.7
06D8A:  BSF    FF2.7
06D8C:  MOVF   01,W
06D8E:  ADDLW  02
06D90:  MOVLB  6
06D92:  MOVWF  x62
06D94:  MOVLW  00
06D96:  ADDWFC 02,W
06D98:  MOVWF  x63
06D9A:  MOVLW  01
06D9C:  ADDWF  x62,W
06D9E:  MOVWF  01
06DA0:  MOVLW  00
06DA2:  ADDWFC x63,W
06DA4:  MOVWF  03
06DA6:  MOVF   01,W
06DA8:  ADDLW  3E
06DAA:  MOVWF  01
06DAC:  MOVLW  01
06DAE:  ADDWFC 03,F
06DB0:  MOVF   01,W
06DB2:  ADDLW  04
06DB4:  MOVWF  FE9
06DB6:  MOVLW  00
06DB8:  ADDWFC 03,W
06DBA:  MOVWF  FEA
06DBC:  MOVFF  FEF,664
06DC0:  MOVFF  661,665
06DC4:  MOVFF  664,666
06DC8:  MOVLB  0
06DCA:  CALL   627C
06DCE:  CLRF   1B
06DD0:  BTFSC  FF2.7
06DD2:  BSF    1B.7
06DD4:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06DD6:  MOVLB  6
06DD8:  CLRF   xD7
06DDA:  MOVFF  65E,6D6
06DDE:  CLRF   xD9
06DE0:  MOVLW  21
06DE2:  MOVWF  xD8
06DE4:  MOVLB  0
06DE6:  CALL   0442
06DEA:  BTFSC  1B.7
06DEC:  BSF    FF2.7
06DEE:  MOVF   01,W
06DF0:  ADDLW  02
06DF2:  MOVLB  6
06DF4:  MOVWF  x5F
06DF6:  MOVLW  00
06DF8:  ADDWFC 02,W
06DFA:  MOVWF  x60
06DFC:  MOVLW  01
06DFE:  ADDWF  x5F,W
06E00:  MOVWF  01
06E02:  MOVLW  00
06E04:  ADDWFC x60,W
06E06:  MOVWF  03
06E08:  MOVF   01,W
06E0A:  ADDLW  3E
06E0C:  MOVWF  01
06E0E:  MOVLW  01
06E10:  ADDWFC 03,F
06E12:  MOVF   01,W
06E14:  ADDLW  05
06E16:  MOVWF  FE9
06E18:  MOVLW  00
06E1A:  ADDWFC 03,W
06E1C:  MOVWF  FEA
06E1E:  BCF    FEF.0
06E20:  CLRF   1B
06E22:  BTFSC  FF2.7
06E24:  BSF    1B.7
06E26:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
06E28:  CLRF   xD7
06E2A:  MOVFF  65E,6D6
06E2E:  CLRF   xD9
06E30:  MOVLW  21
06E32:  MOVWF  xD8
06E34:  MOVLB  0
06E36:  CALL   0442
06E3A:  BTFSC  1B.7
06E3C:  BSF    FF2.7
06E3E:  MOVF   01,W
06E40:  ADDLW  02
06E42:  MOVLB  6
06E44:  MOVWF  x5F
06E46:  MOVLW  00
06E48:  ADDWFC 02,W
06E4A:  MOVWF  x60
06E4C:  MOVLW  01
06E4E:  ADDWF  x5F,W
06E50:  MOVWF  01
06E52:  MOVLW  00
06E54:  ADDWFC x60,W
06E56:  MOVWF  03
06E58:  MOVF   01,W
06E5A:  ADDLW  3E
06E5C:  MOVWF  01
06E5E:  MOVLW  01
06E60:  ADDWFC 03,F
06E62:  MOVF   01,W
06E64:  ADDLW  04
06E66:  MOVWF  FE9
06E68:  MOVLW  00
06E6A:  ADDWFC 03,W
06E6C:  MOVWF  FEA
06E6E:  CLRF   FEF
....................          } 
....................  
....................          break; 
06E70:  BRA    71C6
....................          case timer: 
06E72:  CLRF   1B
06E74:  BTFSC  FF2.7
06E76:  BSF    1B.7
06E78:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
06E7A:  MOVLB  6
06E7C:  CLRF   xD7
06E7E:  MOVFF  65E,6D6
06E82:  CLRF   xD9
06E84:  MOVLW  21
06E86:  MOVWF  xD8
06E88:  MOVLB  0
06E8A:  CALL   0442
06E8E:  BTFSC  1B.7
06E90:  BSF    FF2.7
06E92:  MOVF   01,W
06E94:  ADDLW  02
06E96:  MOVLB  6
06E98:  MOVWF  x5F
06E9A:  MOVLW  00
06E9C:  ADDWFC 02,W
06E9E:  MOVWF  x60
06EA0:  MOVLW  01
06EA2:  ADDWF  x5F,W
06EA4:  MOVWF  01
06EA6:  MOVLW  00
06EA8:  ADDWFC x60,W
06EAA:  MOVWF  03
06EAC:  MOVF   01,W
06EAE:  ADDLW  3E
06EB0:  MOVWF  01
06EB2:  MOVLW  01
06EB4:  ADDWFC 03,F
06EB6:  MOVF   01,W
06EB8:  ADDLW  05
06EBA:  MOVWF  FE9
06EBC:  MOVLW  00
06EBE:  ADDWFC 03,W
06EC0:  MOVWF  FEA
06EC2:  BTFSS  FEF.0
06EC4:  BRA    701A
06EC6:  CLRF   1B
06EC8:  BTFSC  FF2.7
06ECA:  BSF    1B.7
06ECC:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
06ECE:  CLRF   xD7
06ED0:  MOVFF  65E,6D6
06ED4:  CLRF   xD9
06ED6:  MOVLW  21
06ED8:  MOVWF  xD8
06EDA:  MOVLB  0
06EDC:  CALL   0442
06EE0:  BTFSC  1B.7
06EE2:  BSF    FF2.7
06EE4:  MOVF   01,W
06EE6:  ADDLW  02
06EE8:  MOVLB  6
06EEA:  MOVWF  x5F
06EEC:  MOVLW  00
06EEE:  ADDWFC 02,W
06EF0:  MOVWF  x60
06EF2:  MOVLW  01
06EF4:  ADDWF  x5F,W
06EF6:  MOVWF  01
06EF8:  MOVLW  00
06EFA:  ADDWFC x60,W
06EFC:  MOVWF  03
06EFE:  MOVF   01,W
06F00:  ADDLW  3E
06F02:  MOVWF  01
06F04:  MOVLW  01
06F06:  ADDWFC 03,F
06F08:  MOVF   01,W
06F0A:  ADDLW  03
06F0C:  MOVWF  FE9
06F0E:  MOVLW  00
06F10:  ADDWFC 03,W
06F12:  MOVWF  FEA
06F14:  MOVFF  FEF,661
06F18:  CLRF   1B
06F1A:  BTFSC  FF2.7
06F1C:  BSF    1B.7
06F1E:  BCF    FF2.7
06F20:  CLRF   xD7
06F22:  MOVFF  65E,6D6
06F26:  CLRF   xD9
06F28:  MOVLW  21
06F2A:  MOVWF  xD8
06F2C:  MOVLB  0
06F2E:  CALL   0442
06F32:  BTFSC  1B.7
06F34:  BSF    FF2.7
06F36:  MOVF   01,W
06F38:  ADDLW  02
06F3A:  MOVLB  6
06F3C:  MOVWF  x62
06F3E:  MOVLW  00
06F40:  ADDWFC 02,W
06F42:  MOVWF  x63
06F44:  MOVLW  01
06F46:  ADDWF  x62,W
06F48:  MOVWF  01
06F4A:  MOVLW  00
06F4C:  ADDWFC x63,W
06F4E:  MOVWF  03
06F50:  MOVF   01,W
06F52:  ADDLW  3E
06F54:  MOVWF  01
06F56:  MOVLW  01
06F58:  ADDWFC 03,F
06F5A:  MOVF   01,W
06F5C:  ADDLW  04
06F5E:  MOVWF  FE9
06F60:  MOVLW  00
06F62:  ADDWFC 03,W
06F64:  MOVWF  FEA
06F66:  MOVFF  FEF,664
06F6A:  MOVFF  661,665
06F6E:  MOVFF  664,666
06F72:  MOVLB  0
06F74:  CALL   627C
06F78:  CLRF   1B
06F7A:  BTFSC  FF2.7
06F7C:  BSF    1B.7
06F7E:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
06F80:  MOVLB  6
06F82:  CLRF   xD7
06F84:  MOVFF  65E,6D6
06F88:  CLRF   xD9
06F8A:  MOVLW  21
06F8C:  MOVWF  xD8
06F8E:  MOVLB  0
06F90:  CALL   0442
06F94:  BTFSC  1B.7
06F96:  BSF    FF2.7
06F98:  MOVF   01,W
06F9A:  ADDLW  02
06F9C:  MOVLB  6
06F9E:  MOVWF  x5F
06FA0:  MOVLW  00
06FA2:  ADDWFC 02,W
06FA4:  MOVWF  x60
06FA6:  MOVLW  01
06FA8:  ADDWF  x5F,W
06FAA:  MOVWF  01
06FAC:  MOVLW  00
06FAE:  ADDWFC x60,W
06FB0:  MOVWF  03
06FB2:  MOVF   01,W
06FB4:  ADDLW  3E
06FB6:  MOVWF  01
06FB8:  MOVLW  01
06FBA:  ADDWFC 03,F
06FBC:  MOVF   01,W
06FBE:  ADDLW  05
06FC0:  MOVWF  FE9
06FC2:  MOVLW  00
06FC4:  ADDWFC 03,W
06FC6:  MOVWF  FEA
06FC8:  BCF    FEF.0
06FCA:  CLRF   1B
06FCC:  BTFSC  FF2.7
06FCE:  BSF    1B.7
06FD0:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
06FD2:  CLRF   xD7
06FD4:  MOVFF  65E,6D6
06FD8:  CLRF   xD9
06FDA:  MOVLW  21
06FDC:  MOVWF  xD8
06FDE:  MOVLB  0
06FE0:  CALL   0442
06FE4:  BTFSC  1B.7
06FE6:  BSF    FF2.7
06FE8:  MOVF   01,W
06FEA:  ADDLW  02
06FEC:  MOVLB  6
06FEE:  MOVWF  x5F
06FF0:  MOVLW  00
06FF2:  ADDWFC 02,W
06FF4:  MOVWF  x60
06FF6:  MOVLW  01
06FF8:  ADDWF  x5F,W
06FFA:  MOVWF  01
06FFC:  MOVLW  00
06FFE:  ADDWFC x60,W
07000:  MOVWF  03
07002:  MOVF   01,W
07004:  ADDLW  3E
07006:  MOVWF  01
07008:  MOVLW  01
0700A:  ADDWFC 03,F
0700C:  MOVF   01,W
0700E:  ADDLW  04
07010:  MOVWF  FE9
07012:  MOVLW  00
07014:  ADDWFC 03,W
07016:  MOVWF  FEA
07018:  CLRF   FEF
0701A:  CLRF   1B
0701C:  BTFSC  FF2.7
0701E:  BSF    1B.7
07020:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
07022:  CLRF   xD7
07024:  MOVFF  65E,6D6
07028:  CLRF   xD9
0702A:  MOVLW  21
0702C:  MOVWF  xD8
0702E:  MOVLB  0
07030:  CALL   0442
07034:  BTFSC  1B.7
07036:  BSF    FF2.7
07038:  MOVF   01,W
0703A:  ADDLW  02
0703C:  MOVLB  6
0703E:  MOVWF  x5F
07040:  MOVLW  00
07042:  ADDWFC 02,W
07044:  MOVWF  x60
07046:  MOVLW  01
07048:  ADDWF  x5F,W
0704A:  MOVWF  01
0704C:  MOVLW  00
0704E:  ADDWFC x60,W
07050:  MOVWF  03
07052:  MOVF   01,W
07054:  ADDLW  3E
07056:  MOVWF  01
07058:  MOVLW  01
0705A:  ADDWFC 03,F
0705C:  MOVF   01,W
0705E:  ADDLW  08
07060:  MOVWF  FE9
07062:  MOVLW  00
07064:  ADDWFC 03,W
07066:  MOVWF  FEA
07068:  BTFSS  FEF.0
0706A:  BRA    71C0
0706C:  CLRF   1B
0706E:  BTFSC  FF2.7
07070:  BSF    1B.7
07072:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
07074:  CLRF   xD7
07076:  MOVFF  65E,6D6
0707A:  CLRF   xD9
0707C:  MOVLW  21
0707E:  MOVWF  xD8
07080:  MOVLB  0
07082:  CALL   0442
07086:  BTFSC  1B.7
07088:  BSF    FF2.7
0708A:  MOVF   01,W
0708C:  ADDLW  02
0708E:  MOVLB  6
07090:  MOVWF  x5F
07092:  MOVLW  00
07094:  ADDWFC 02,W
07096:  MOVWF  x60
07098:  MOVLW  01
0709A:  ADDWF  x5F,W
0709C:  MOVWF  01
0709E:  MOVLW  00
070A0:  ADDWFC x60,W
070A2:  MOVWF  03
070A4:  MOVF   01,W
070A6:  ADDLW  3E
070A8:  MOVWF  01
070AA:  MOVLW  01
070AC:  ADDWFC 03,F
070AE:  MOVF   01,W
070B0:  ADDLW  06
070B2:  MOVWF  FE9
070B4:  MOVLW  00
070B6:  ADDWFC 03,W
070B8:  MOVWF  FEA
070BA:  MOVFF  FEF,661
070BE:  CLRF   1B
070C0:  BTFSC  FF2.7
070C2:  BSF    1B.7
070C4:  BCF    FF2.7
070C6:  CLRF   xD7
070C8:  MOVFF  65E,6D6
070CC:  CLRF   xD9
070CE:  MOVLW  21
070D0:  MOVWF  xD8
070D2:  MOVLB  0
070D4:  CALL   0442
070D8:  BTFSC  1B.7
070DA:  BSF    FF2.7
070DC:  MOVF   01,W
070DE:  ADDLW  02
070E0:  MOVLB  6
070E2:  MOVWF  x62
070E4:  MOVLW  00
070E6:  ADDWFC 02,W
070E8:  MOVWF  x63
070EA:  MOVLW  01
070EC:  ADDWF  x62,W
070EE:  MOVWF  01
070F0:  MOVLW  00
070F2:  ADDWFC x63,W
070F4:  MOVWF  03
070F6:  MOVF   01,W
070F8:  ADDLW  3E
070FA:  MOVWF  01
070FC:  MOVLW  01
070FE:  ADDWFC 03,F
07100:  MOVF   01,W
07102:  ADDLW  07
07104:  MOVWF  FE9
07106:  MOVLW  00
07108:  ADDWFC 03,W
0710A:  MOVWF  FEA
0710C:  MOVFF  FEF,664
07110:  MOVFF  661,665
07114:  MOVFF  664,666
07118:  MOVLB  0
0711A:  CALL   627C
0711E:  CLRF   1B
07120:  BTFSC  FF2.7
07122:  BSF    1B.7
07124:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
07126:  MOVLB  6
07128:  CLRF   xD7
0712A:  MOVFF  65E,6D6
0712E:  CLRF   xD9
07130:  MOVLW  21
07132:  MOVWF  xD8
07134:  MOVLB  0
07136:  CALL   0442
0713A:  BTFSC  1B.7
0713C:  BSF    FF2.7
0713E:  MOVF   01,W
07140:  ADDLW  02
07142:  MOVLB  6
07144:  MOVWF  x5F
07146:  MOVLW  00
07148:  ADDWFC 02,W
0714A:  MOVWF  x60
0714C:  MOVLW  01
0714E:  ADDWF  x5F,W
07150:  MOVWF  01
07152:  MOVLW  00
07154:  ADDWFC x60,W
07156:  MOVWF  03
07158:  MOVF   01,W
0715A:  ADDLW  3E
0715C:  MOVWF  01
0715E:  MOVLW  01
07160:  ADDWFC 03,F
07162:  MOVF   01,W
07164:  ADDLW  08
07166:  MOVWF  FE9
07168:  MOVLW  00
0716A:  ADDWFC 03,W
0716C:  MOVWF  FEA
0716E:  BCF    FEF.0
07170:  CLRF   1B
07172:  BTFSC  FF2.7
07174:  BSF    1B.7
07176:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
07178:  CLRF   xD7
0717A:  MOVFF  65E,6D6
0717E:  CLRF   xD9
07180:  MOVLW  21
07182:  MOVWF  xD8
07184:  MOVLB  0
07186:  CALL   0442
0718A:  BTFSC  1B.7
0718C:  BSF    FF2.7
0718E:  MOVF   01,W
07190:  ADDLW  02
07192:  MOVLB  6
07194:  MOVWF  x5F
07196:  MOVLW  00
07198:  ADDWFC 02,W
0719A:  MOVWF  x60
0719C:  MOVLW  01
0719E:  ADDWF  x5F,W
071A0:  MOVWF  01
071A2:  MOVLW  00
071A4:  ADDWFC x60,W
071A6:  MOVWF  03
071A8:  MOVF   01,W
071AA:  ADDLW  3E
071AC:  MOVWF  01
071AE:  MOVLW  01
071B0:  ADDWFC 03,F
071B2:  MOVF   01,W
071B4:  ADDLW  07
071B6:  MOVWF  FE9
071B8:  MOVLW  00
071BA:  ADDWFC 03,W
071BC:  MOVWF  FEA
071BE:  CLRF   FEF
....................          } 
....................          break; 
071C0:  BRA    71C6
....................          default: 
....................          break; 
071C2:  MOVLB  6
071C4:  BRA    71C6
....................       } 
....................    } 
071C6:  INCF   x5E,F
071C8:  GOTO   628E
.................... } 
071CC:  MOVLB  0
071CE:  GOTO   84D8 (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
071D2:  MOVLB  6
071D4:  CLRF   x5E
071D6:  MOVLB  1
071D8:  MOVF   x3F,W
071DA:  MOVLB  6
071DC:  SUBWF  x5E,W
071DE:  BTFSC  FD8.0
071E0:  GOTO   79E6
071E4:  CLRF   1B
071E6:  BTFSC  FF2.7
071E8:  BSF    1B.7
071EA:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
071EC:  CLRF   xD7
071EE:  MOVFF  65E,6D6
071F2:  CLRF   xD9
071F4:  MOVLW  2F
071F6:  MOVWF  xD8
071F8:  MOVLB  0
071FA:  CALL   0442
071FE:  BTFSC  1B.7
07200:  BSF    FF2.7
07202:  MOVFF  02,03
07206:  MOVF   01,W
07208:  ADDLW  8A
0720A:  MOVWF  01
0720C:  MOVLW  02
0720E:  ADDWFC 03,F
07210:  MOVFF  01,FE9
07214:  MOVFF  03,FEA
07218:  MOVF   FEF,W
0721A:  XORLW  66
0721C:  BZ    7220
0721E:  BRA    79DE
....................            case shutter: 
07220:  CLRF   1B
07222:  BTFSC  FF2.7
07224:  BSF    1B.7
07226:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
07228:  MOVLB  6
0722A:  CLRF   xD7
0722C:  MOVFF  65E,6D6
07230:  CLRF   xD9
07232:  MOVLW  2F
07234:  MOVWF  xD8
07236:  MOVLB  0
07238:  CALL   0442
0723C:  BTFSC  1B.7
0723E:  BSF    FF2.7
07240:  MOVF   01,W
07242:  ADDLW  4C
07244:  MOVLB  6
07246:  MOVWF  x5F
07248:  MOVLW  01
0724A:  ADDWFC 02,W
0724C:  MOVWF  x60
0724E:  MOVLW  01
07250:  ADDWF  x5F,W
07252:  MOVWF  01
07254:  MOVLW  00
07256:  ADDWFC x60,W
07258:  MOVWF  03
0725A:  MOVF   01,W
0725C:  ADDLW  3E
0725E:  MOVWF  01
07260:  MOVLW  01
07262:  ADDWFC 03,F
07264:  MOVF   01,W
07266:  ADDLW  2D
07268:  MOVWF  FE9
0726A:  MOVLW  00
0726C:  ADDWFC 03,W
0726E:  MOVWF  FEA
07270:  MOVF   FEF,W
07272:  SUBLW  04
07274:  BTFSC  FD8.2
07276:  BRA    79DA
07278:  CLRF   1B
0727A:  BTFSC  FF2.7
0727C:  BSF    1B.7
0727E:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
07280:  CLRF   xD7
07282:  MOVFF  65E,6D6
07286:  CLRF   xD9
07288:  MOVLW  2F
0728A:  MOVWF  xD8
0728C:  MOVLB  0
0728E:  CALL   0442
07292:  BTFSC  1B.7
07294:  BSF    FF2.7
07296:  MOVF   01,W
07298:  ADDLW  4C
0729A:  MOVLB  6
0729C:  MOVWF  x5F
0729E:  MOVLW  01
072A0:  ADDWFC 02,W
072A2:  MOVWF  x60
072A4:  MOVLW  01
072A6:  ADDWF  x5F,W
072A8:  MOVWF  01
072AA:  MOVLW  00
072AC:  ADDWFC x60,W
072AE:  MOVWF  03
072B0:  MOVF   01,W
072B2:  ADDLW  3E
072B4:  MOVWF  01
072B6:  MOVLW  01
072B8:  ADDWFC 03,F
072BA:  MOVF   01,W
072BC:  ADDLW  2A
072BE:  MOVWF  FE9
072C0:  MOVLW  00
072C2:  ADDWFC 03,W
072C4:  MOVWF  FEA
072C6:  INCF   FEF,F
072C8:  CLRF   1B
072CA:  BTFSC  FF2.7
072CC:  BSF    1B.7
072CE:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
072D0:  CLRF   xD7
072D2:  MOVFF  65E,6D6
072D6:  CLRF   xD9
072D8:  MOVLW  2F
072DA:  MOVWF  xD8
072DC:  MOVLB  0
072DE:  CALL   0442
072E2:  BTFSC  1B.7
072E4:  BSF    FF2.7
072E6:  MOVF   01,W
072E8:  ADDLW  4C
072EA:  MOVLB  6
072EC:  MOVWF  x5F
072EE:  MOVLW  01
072F0:  ADDWFC 02,W
072F2:  MOVWF  x60
072F4:  MOVLW  01
072F6:  ADDWF  x5F,W
072F8:  MOVWF  01
072FA:  MOVLW  00
072FC:  ADDWFC x60,W
072FE:  MOVWF  03
07300:  MOVF   01,W
07302:  ADDLW  3E
07304:  MOVWF  01
07306:  MOVLW  01
07308:  ADDWFC 03,F
0730A:  MOVF   01,W
0730C:  ADDLW  2D
0730E:  MOVWF  FE9
07310:  MOVLW  00
07312:  ADDWFC 03,W
07314:  MOVWF  FEA
07316:  MOVF   FEF,F
07318:  BTFSS  FD8.2
0731A:  BRA    748C
0731C:  CLRF   1B
0731E:  BTFSC  FF2.7
07320:  BSF    1B.7
07322:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
07324:  CLRF   xD7
07326:  MOVFF  65E,6D6
0732A:  CLRF   xD9
0732C:  MOVLW  2F
0732E:  MOVWF  xD8
07330:  MOVLB  0
07332:  CALL   0442
07336:  BTFSC  1B.7
07338:  BSF    FF2.7
0733A:  MOVF   01,W
0733C:  ADDLW  4C
0733E:  MOVLB  6
07340:  MOVWF  x5F
07342:  MOVLW  01
07344:  ADDWFC 02,W
07346:  MOVWF  x60
07348:  MOVLW  01
0734A:  ADDWF  x5F,W
0734C:  MOVWF  01
0734E:  MOVLW  00
07350:  ADDWFC x60,W
07352:  MOVWF  03
07354:  MOVF   01,W
07356:  ADDLW  3E
07358:  MOVWF  01
0735A:  MOVLW  01
0735C:  ADDWFC 03,F
0735E:  MOVF   01,W
07360:  ADDLW  2A
07362:  MOVWF  FE9
07364:  MOVLW  00
07366:  ADDWFC 03,W
07368:  MOVWF  FEA
0736A:  MOVFF  FEF,661
0736E:  CLRF   1B
07370:  BTFSC  FF2.7
07372:  BSF    1B.7
07374:  BCF    FF2.7
07376:  CLRF   xD7
07378:  MOVFF  65E,6D6
0737C:  CLRF   xD9
0737E:  MOVLW  2F
07380:  MOVWF  xD8
07382:  MOVLB  0
07384:  CALL   0442
07388:  BTFSC  1B.7
0738A:  BSF    FF2.7
0738C:  MOVF   01,W
0738E:  ADDLW  4C
07390:  MOVLB  6
07392:  MOVWF  x62
07394:  MOVLW  01
07396:  ADDWFC 02,W
07398:  MOVWF  x63
0739A:  MOVLW  01
0739C:  ADDWF  x62,W
0739E:  MOVWF  01
073A0:  MOVLW  00
073A2:  ADDWFC x63,W
073A4:  MOVWF  03
073A6:  MOVF   01,W
073A8:  ADDLW  3E
073AA:  MOVWF  01
073AC:  MOVLW  01
073AE:  ADDWFC 03,F
073B0:  MOVF   01,W
073B2:  ADDLW  2C
073B4:  MOVWF  FE9
073B6:  MOVLW  00
073B8:  ADDWFC 03,W
073BA:  MOVWF  FEA
073BC:  MOVF   FEF,W
073BE:  SUBWF  x61,W
073C0:  BZ    748C
073C2:  BNC   748C
073C4:  CLRF   1B
073C6:  BTFSC  FF2.7
073C8:  BSF    1B.7
073CA:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
073CC:  CLRF   xD7
073CE:  MOVFF  65E,6D6
073D2:  CLRF   xD9
073D4:  MOVLW  2F
073D6:  MOVWF  xD8
073D8:  MOVLB  0
073DA:  CALL   0442
073DE:  BTFSC  1B.7
073E0:  BSF    FF2.7
073E2:  MOVF   01,W
073E4:  ADDLW  4C
073E6:  MOVLB  6
073E8:  MOVWF  x5F
073EA:  MOVLW  01
073EC:  ADDWFC 02,W
073EE:  MOVWF  x60
073F0:  MOVLW  01
073F2:  ADDWF  x5F,W
073F4:  MOVWF  01
073F6:  MOVLW  00
073F8:  ADDWFC x60,W
073FA:  MOVWF  03
073FC:  MOVF   01,W
073FE:  ADDLW  3E
07400:  MOVWF  01
07402:  MOVLW  01
07404:  ADDWFC 03,F
07406:  MOVF   01,W
07408:  ADDLW  2D
0740A:  MOVWF  FE9
0740C:  MOVLW  00
0740E:  ADDWFC 03,W
07410:  MOVWF  FEA
07412:  MOVLW  04
07414:  MOVWF  FEF
07416:  CLRF   1B
07418:  BTFSC  FF2.7
0741A:  BSF    1B.7
0741C:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
0741E:  CLRF   xD7
07420:  MOVFF  65E,6D6
07424:  CLRF   xD9
07426:  MOVLW  2F
07428:  MOVWF  xD8
0742A:  MOVLB  0
0742C:  CALL   0442
07430:  BTFSC  1B.7
07432:  BSF    FF2.7
07434:  MOVF   01,W
07436:  ADDLW  4C
07438:  MOVLB  6
0743A:  MOVWF  x5F
0743C:  MOVLW  01
0743E:  ADDWFC 02,W
07440:  MOVWF  x60
07442:  MOVLW  01
07444:  ADDWF  x5F,W
07446:  MOVWF  01
07448:  MOVLW  00
0744A:  ADDWFC x60,W
0744C:  MOVWF  03
0744E:  MOVF   01,W
07450:  ADDLW  3E
07452:  MOVWF  01
07454:  MOVLW  01
07456:  ADDWFC 03,F
07458:  MOVF   01,W
0745A:  ADDLW  28
0745C:  MOVWF  FE9
0745E:  MOVLW  00
07460:  ADDWFC 03,W
07462:  MOVWF  FEA
07464:  BCF    FD8.0
07466:  RLCF   FEF,W
07468:  CLRF   03
0746A:  MOVLB  0
0746C:  CALL   0172
07470:  TBLRD*+
07472:  MOVFF  FF5,03
07476:  CLRF   00
07478:  DECF   00,F
0747A:  XORWF  00,F
0747C:  MOVLW  FF
0747E:  XORWF  03,F
07480:  MOVF   00,W
07482:  MOVLB  5
07484:  IORWF  x7F,F
07486:  MOVF   03,W
07488:  IORWF  x80,F
0748A:  MOVLB  6
0748C:  CLRF   1B
0748E:  BTFSC  FF2.7
07490:  BSF    1B.7
07492:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
07494:  CLRF   xD7
07496:  MOVFF  65E,6D6
0749A:  CLRF   xD9
0749C:  MOVLW  2F
0749E:  MOVWF  xD8
074A0:  MOVLB  0
074A2:  CALL   0442
074A6:  BTFSC  1B.7
074A8:  BSF    FF2.7
074AA:  MOVF   01,W
074AC:  ADDLW  4C
074AE:  MOVLB  6
074B0:  MOVWF  x5F
074B2:  MOVLW  01
074B4:  ADDWFC 02,W
074B6:  MOVWF  x60
074B8:  MOVLW  01
074BA:  ADDWF  x5F,W
074BC:  MOVWF  01
074BE:  MOVLW  00
074C0:  ADDWFC x60,W
074C2:  MOVWF  03
074C4:  MOVF   01,W
074C6:  ADDLW  3E
074C8:  MOVWF  01
074CA:  MOVLW  01
074CC:  ADDWFC 03,F
074CE:  MOVF   01,W
074D0:  ADDLW  2D
074D2:  MOVWF  FE9
074D4:  MOVLW  00
074D6:  ADDWFC 03,W
074D8:  MOVWF  FEA
074DA:  DECFSZ FEF,W
074DC:  BRA    764E
074DE:  CLRF   1B
074E0:  BTFSC  FF2.7
074E2:  BSF    1B.7
074E4:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
074E6:  CLRF   xD7
074E8:  MOVFF  65E,6D6
074EC:  CLRF   xD9
074EE:  MOVLW  2F
074F0:  MOVWF  xD8
074F2:  MOVLB  0
074F4:  CALL   0442
074F8:  BTFSC  1B.7
074FA:  BSF    FF2.7
074FC:  MOVF   01,W
074FE:  ADDLW  4C
07500:  MOVLB  6
07502:  MOVWF  x5F
07504:  MOVLW  01
07506:  ADDWFC 02,W
07508:  MOVWF  x60
0750A:  MOVLW  01
0750C:  ADDWF  x5F,W
0750E:  MOVWF  01
07510:  MOVLW  00
07512:  ADDWFC x60,W
07514:  MOVWF  03
07516:  MOVF   01,W
07518:  ADDLW  3E
0751A:  MOVWF  01
0751C:  MOVLW  01
0751E:  ADDWFC 03,F
07520:  MOVF   01,W
07522:  ADDLW  2A
07524:  MOVWF  FE9
07526:  MOVLW  00
07528:  ADDWFC 03,W
0752A:  MOVWF  FEA
0752C:  MOVFF  FEF,661
07530:  CLRF   1B
07532:  BTFSC  FF2.7
07534:  BSF    1B.7
07536:  BCF    FF2.7
07538:  CLRF   xD7
0753A:  MOVFF  65E,6D6
0753E:  CLRF   xD9
07540:  MOVLW  2F
07542:  MOVWF  xD8
07544:  MOVLB  0
07546:  CALL   0442
0754A:  BTFSC  1B.7
0754C:  BSF    FF2.7
0754E:  MOVF   01,W
07550:  ADDLW  4C
07552:  MOVLB  6
07554:  MOVWF  x62
07556:  MOVLW  01
07558:  ADDWFC 02,W
0755A:  MOVWF  x63
0755C:  MOVLW  01
0755E:  ADDWF  x62,W
07560:  MOVWF  01
07562:  MOVLW  00
07564:  ADDWFC x63,W
07566:  MOVWF  03
07568:  MOVF   01,W
0756A:  ADDLW  3E
0756C:  MOVWF  01
0756E:  MOVLW  01
07570:  ADDWFC 03,F
07572:  MOVF   01,W
07574:  ADDLW  2C
07576:  MOVWF  FE9
07578:  MOVLW  00
0757A:  ADDWFC 03,W
0757C:  MOVWF  FEA
0757E:  MOVF   FEF,W
07580:  SUBWF  x61,W
07582:  BZ    764E
07584:  BNC   764E
07586:  CLRF   1B
07588:  BTFSC  FF2.7
0758A:  BSF    1B.7
0758C:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0758E:  CLRF   xD7
07590:  MOVFF  65E,6D6
07594:  CLRF   xD9
07596:  MOVLW  2F
07598:  MOVWF  xD8
0759A:  MOVLB  0
0759C:  CALL   0442
075A0:  BTFSC  1B.7
075A2:  BSF    FF2.7
075A4:  MOVF   01,W
075A6:  ADDLW  4C
075A8:  MOVLB  6
075AA:  MOVWF  x5F
075AC:  MOVLW  01
075AE:  ADDWFC 02,W
075B0:  MOVWF  x60
075B2:  MOVLW  01
075B4:  ADDWF  x5F,W
075B6:  MOVWF  01
075B8:  MOVLW  00
075BA:  ADDWFC x60,W
075BC:  MOVWF  03
075BE:  MOVF   01,W
075C0:  ADDLW  3E
075C2:  MOVWF  01
075C4:  MOVLW  01
075C6:  ADDWFC 03,F
075C8:  MOVF   01,W
075CA:  ADDLW  2D
075CC:  MOVWF  FE9
075CE:  MOVLW  00
075D0:  ADDWFC 03,W
075D2:  MOVWF  FEA
075D4:  MOVLW  04
075D6:  MOVWF  FEF
075D8:  CLRF   1B
075DA:  BTFSC  FF2.7
075DC:  BSF    1B.7
075DE:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
075E0:  CLRF   xD7
075E2:  MOVFF  65E,6D6
075E6:  CLRF   xD9
075E8:  MOVLW  2F
075EA:  MOVWF  xD8
075EC:  MOVLB  0
075EE:  CALL   0442
075F2:  BTFSC  1B.7
075F4:  BSF    FF2.7
075F6:  MOVF   01,W
075F8:  ADDLW  4C
075FA:  MOVLB  6
075FC:  MOVWF  x5F
075FE:  MOVLW  01
07600:  ADDWFC 02,W
07602:  MOVWF  x60
07604:  MOVLW  01
07606:  ADDWF  x5F,W
07608:  MOVWF  01
0760A:  MOVLW  00
0760C:  ADDWFC x60,W
0760E:  MOVWF  03
07610:  MOVF   01,W
07612:  ADDLW  3E
07614:  MOVWF  01
07616:  MOVLW  01
07618:  ADDWFC 03,F
0761A:  MOVF   01,W
0761C:  ADDLW  29
0761E:  MOVWF  FE9
07620:  MOVLW  00
07622:  ADDWFC 03,W
07624:  MOVWF  FEA
07626:  BCF    FD8.0
07628:  RLCF   FEF,W
0762A:  CLRF   03
0762C:  MOVLB  0
0762E:  CALL   0172
07632:  TBLRD*+
07634:  MOVFF  FF5,03
07638:  CLRF   00
0763A:  DECF   00,F
0763C:  XORWF  00,F
0763E:  MOVLW  FF
07640:  XORWF  03,F
07642:  MOVF   00,W
07644:  MOVLB  5
07646:  IORWF  x7F,F
07648:  MOVF   03,W
0764A:  IORWF  x80,F
0764C:  MOVLB  6
0764E:  CLRF   1B
07650:  BTFSC  FF2.7
07652:  BSF    1B.7
07654:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
07656:  CLRF   xD7
07658:  MOVFF  65E,6D6
0765C:  CLRF   xD9
0765E:  MOVLW  2F
07660:  MOVWF  xD8
07662:  MOVLB  0
07664:  CALL   0442
07668:  BTFSC  1B.7
0766A:  BSF    FF2.7
0766C:  MOVF   01,W
0766E:  ADDLW  4C
07670:  MOVLB  6
07672:  MOVWF  x5F
07674:  MOVLW  01
07676:  ADDWFC 02,W
07678:  MOVWF  x60
0767A:  MOVLW  01
0767C:  ADDWF  x5F,W
0767E:  MOVWF  01
07680:  MOVLW  00
07682:  ADDWFC x60,W
07684:  MOVWF  03
07686:  MOVF   01,W
07688:  ADDLW  3E
0768A:  MOVWF  01
0768C:  MOVLW  01
0768E:  ADDWFC 03,F
07690:  MOVF   01,W
07692:  ADDLW  2D
07694:  MOVWF  FE9
07696:  MOVLW  00
07698:  ADDWFC 03,W
0769A:  MOVWF  FEA
0769C:  MOVF   FEF,W
0769E:  SUBLW  02
076A0:  BTFSS  FD8.2
076A2:  BRA    7814
076A4:  CLRF   1B
076A6:  BTFSC  FF2.7
076A8:  BSF    1B.7
076AA:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
076AC:  CLRF   xD7
076AE:  MOVFF  65E,6D6
076B2:  CLRF   xD9
076B4:  MOVLW  2F
076B6:  MOVWF  xD8
076B8:  MOVLB  0
076BA:  CALL   0442
076BE:  BTFSC  1B.7
076C0:  BSF    FF2.7
076C2:  MOVF   01,W
076C4:  ADDLW  4C
076C6:  MOVLB  6
076C8:  MOVWF  x5F
076CA:  MOVLW  01
076CC:  ADDWFC 02,W
076CE:  MOVWF  x60
076D0:  MOVLW  01
076D2:  ADDWF  x5F,W
076D4:  MOVWF  01
076D6:  MOVLW  00
076D8:  ADDWFC x60,W
076DA:  MOVWF  03
076DC:  MOVF   01,W
076DE:  ADDLW  3E
076E0:  MOVWF  01
076E2:  MOVLW  01
076E4:  ADDWFC 03,F
076E6:  MOVF   01,W
076E8:  ADDLW  2A
076EA:  MOVWF  FE9
076EC:  MOVLW  00
076EE:  ADDWFC 03,W
076F0:  MOVWF  FEA
076F2:  MOVFF  FEF,661
076F6:  CLRF   1B
076F8:  BTFSC  FF2.7
076FA:  BSF    1B.7
076FC:  BCF    FF2.7
076FE:  CLRF   xD7
07700:  MOVFF  65E,6D6
07704:  CLRF   xD9
07706:  MOVLW  2F
07708:  MOVWF  xD8
0770A:  MOVLB  0
0770C:  CALL   0442
07710:  BTFSC  1B.7
07712:  BSF    FF2.7
07714:  MOVF   01,W
07716:  ADDLW  4C
07718:  MOVLB  6
0771A:  MOVWF  x62
0771C:  MOVLW  01
0771E:  ADDWFC 02,W
07720:  MOVWF  x63
07722:  MOVLW  01
07724:  ADDWF  x62,W
07726:  MOVWF  01
07728:  MOVLW  00
0772A:  ADDWFC x63,W
0772C:  MOVWF  03
0772E:  MOVF   01,W
07730:  ADDLW  3E
07732:  MOVWF  01
07734:  MOVLW  01
07736:  ADDWFC 03,F
07738:  MOVF   01,W
0773A:  ADDLW  2B
0773C:  MOVWF  FE9
0773E:  MOVLW  00
07740:  ADDWFC 03,W
07742:  MOVWF  FEA
07744:  MOVF   FEF,W
07746:  SUBWF  x61,W
07748:  BZ    7814
0774A:  BNC   7814
0774C:  CLRF   1B
0774E:  BTFSC  FF2.7
07750:  BSF    1B.7
07752:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07754:  CLRF   xD7
07756:  MOVFF  65E,6D6
0775A:  CLRF   xD9
0775C:  MOVLW  2F
0775E:  MOVWF  xD8
07760:  MOVLB  0
07762:  CALL   0442
07766:  BTFSC  1B.7
07768:  BSF    FF2.7
0776A:  MOVF   01,W
0776C:  ADDLW  4C
0776E:  MOVLB  6
07770:  MOVWF  x5F
07772:  MOVLW  01
07774:  ADDWFC 02,W
07776:  MOVWF  x60
07778:  MOVLW  01
0777A:  ADDWF  x5F,W
0777C:  MOVWF  01
0777E:  MOVLW  00
07780:  ADDWFC x60,W
07782:  MOVWF  03
07784:  MOVF   01,W
07786:  ADDLW  3E
07788:  MOVWF  01
0778A:  MOVLW  01
0778C:  ADDWFC 03,F
0778E:  MOVF   01,W
07790:  ADDLW  2D
07792:  MOVWF  FE9
07794:  MOVLW  00
07796:  ADDWFC 03,W
07798:  MOVWF  FEA
0779A:  MOVLW  04
0779C:  MOVWF  FEF
0779E:  CLRF   1B
077A0:  BTFSC  FF2.7
077A2:  BSF    1B.7
077A4:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
077A6:  CLRF   xD7
077A8:  MOVFF  65E,6D6
077AC:  CLRF   xD9
077AE:  MOVLW  2F
077B0:  MOVWF  xD8
077B2:  MOVLB  0
077B4:  CALL   0442
077B8:  BTFSC  1B.7
077BA:  BSF    FF2.7
077BC:  MOVF   01,W
077BE:  ADDLW  4C
077C0:  MOVLB  6
077C2:  MOVWF  x5F
077C4:  MOVLW  01
077C6:  ADDWFC 02,W
077C8:  MOVWF  x60
077CA:  MOVLW  01
077CC:  ADDWF  x5F,W
077CE:  MOVWF  01
077D0:  MOVLW  00
077D2:  ADDWFC x60,W
077D4:  MOVWF  03
077D6:  MOVF   01,W
077D8:  ADDLW  3E
077DA:  MOVWF  01
077DC:  MOVLW  01
077DE:  ADDWFC 03,F
077E0:  MOVF   01,W
077E2:  ADDLW  28
077E4:  MOVWF  FE9
077E6:  MOVLW  00
077E8:  ADDWFC 03,W
077EA:  MOVWF  FEA
077EC:  BCF    FD8.0
077EE:  RLCF   FEF,W
077F0:  CLRF   03
077F2:  MOVLB  0
077F4:  CALL   0172
077F8:  TBLRD*+
077FA:  MOVFF  FF5,03
077FE:  CLRF   00
07800:  DECF   00,F
07802:  XORWF  00,F
07804:  MOVLW  FF
07806:  XORWF  03,F
07808:  MOVF   00,W
0780A:  MOVLB  5
0780C:  IORWF  x7F,F
0780E:  MOVF   03,W
07810:  IORWF  x80,F
07812:  MOVLB  6
07814:  CLRF   1B
07816:  BTFSC  FF2.7
07818:  BSF    1B.7
0781A:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
0781C:  CLRF   xD7
0781E:  MOVFF  65E,6D6
07822:  CLRF   xD9
07824:  MOVLW  2F
07826:  MOVWF  xD8
07828:  MOVLB  0
0782A:  CALL   0442
0782E:  BTFSC  1B.7
07830:  BSF    FF2.7
07832:  MOVF   01,W
07834:  ADDLW  4C
07836:  MOVLB  6
07838:  MOVWF  x5F
0783A:  MOVLW  01
0783C:  ADDWFC 02,W
0783E:  MOVWF  x60
07840:  MOVLW  01
07842:  ADDWF  x5F,W
07844:  MOVWF  01
07846:  MOVLW  00
07848:  ADDWFC x60,W
0784A:  MOVWF  03
0784C:  MOVF   01,W
0784E:  ADDLW  3E
07850:  MOVWF  01
07852:  MOVLW  01
07854:  ADDWFC 03,F
07856:  MOVF   01,W
07858:  ADDLW  2D
0785A:  MOVWF  FE9
0785C:  MOVLW  00
0785E:  ADDWFC 03,W
07860:  MOVWF  FEA
07862:  MOVF   FEF,W
07864:  SUBLW  03
07866:  BTFSS  FD8.2
07868:  BRA    79DA
0786A:  CLRF   1B
0786C:  BTFSC  FF2.7
0786E:  BSF    1B.7
07870:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
07872:  CLRF   xD7
07874:  MOVFF  65E,6D6
07878:  CLRF   xD9
0787A:  MOVLW  2F
0787C:  MOVWF  xD8
0787E:  MOVLB  0
07880:  CALL   0442
07884:  BTFSC  1B.7
07886:  BSF    FF2.7
07888:  MOVF   01,W
0788A:  ADDLW  4C
0788C:  MOVLB  6
0788E:  MOVWF  x5F
07890:  MOVLW  01
07892:  ADDWFC 02,W
07894:  MOVWF  x60
07896:  MOVLW  01
07898:  ADDWF  x5F,W
0789A:  MOVWF  01
0789C:  MOVLW  00
0789E:  ADDWFC x60,W
078A0:  MOVWF  03
078A2:  MOVF   01,W
078A4:  ADDLW  3E
078A6:  MOVWF  01
078A8:  MOVLW  01
078AA:  ADDWFC 03,F
078AC:  MOVF   01,W
078AE:  ADDLW  2A
078B0:  MOVWF  FE9
078B2:  MOVLW  00
078B4:  ADDWFC 03,W
078B6:  MOVWF  FEA
078B8:  MOVFF  FEF,661
078BC:  CLRF   1B
078BE:  BTFSC  FF2.7
078C0:  BSF    1B.7
078C2:  BCF    FF2.7
078C4:  CLRF   xD7
078C6:  MOVFF  65E,6D6
078CA:  CLRF   xD9
078CC:  MOVLW  2F
078CE:  MOVWF  xD8
078D0:  MOVLB  0
078D2:  CALL   0442
078D6:  BTFSC  1B.7
078D8:  BSF    FF2.7
078DA:  MOVF   01,W
078DC:  ADDLW  4C
078DE:  MOVLB  6
078E0:  MOVWF  x62
078E2:  MOVLW  01
078E4:  ADDWFC 02,W
078E6:  MOVWF  x63
078E8:  MOVLW  01
078EA:  ADDWF  x62,W
078EC:  MOVWF  01
078EE:  MOVLW  00
078F0:  ADDWFC x63,W
078F2:  MOVWF  03
078F4:  MOVF   01,W
078F6:  ADDLW  3E
078F8:  MOVWF  01
078FA:  MOVLW  01
078FC:  ADDWFC 03,F
078FE:  MOVF   01,W
07900:  ADDLW  2B
07902:  MOVWF  FE9
07904:  MOVLW  00
07906:  ADDWFC 03,W
07908:  MOVWF  FEA
0790A:  MOVF   FEF,W
0790C:  SUBWF  x61,W
0790E:  BZ    79DA
07910:  BNC   79DA
07912:  CLRF   1B
07914:  BTFSC  FF2.7
07916:  BSF    1B.7
07918:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0791A:  CLRF   xD7
0791C:  MOVFF  65E,6D6
07920:  CLRF   xD9
07922:  MOVLW  2F
07924:  MOVWF  xD8
07926:  MOVLB  0
07928:  CALL   0442
0792C:  BTFSC  1B.7
0792E:  BSF    FF2.7
07930:  MOVF   01,W
07932:  ADDLW  4C
07934:  MOVLB  6
07936:  MOVWF  x5F
07938:  MOVLW  01
0793A:  ADDWFC 02,W
0793C:  MOVWF  x60
0793E:  MOVLW  01
07940:  ADDWF  x5F,W
07942:  MOVWF  01
07944:  MOVLW  00
07946:  ADDWFC x60,W
07948:  MOVWF  03
0794A:  MOVF   01,W
0794C:  ADDLW  3E
0794E:  MOVWF  01
07950:  MOVLW  01
07952:  ADDWFC 03,F
07954:  MOVF   01,W
07956:  ADDLW  2D
07958:  MOVWF  FE9
0795A:  MOVLW  00
0795C:  ADDWFC 03,W
0795E:  MOVWF  FEA
07960:  MOVLW  04
07962:  MOVWF  FEF
07964:  CLRF   1B
07966:  BTFSC  FF2.7
07968:  BSF    1B.7
0796A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
0796C:  CLRF   xD7
0796E:  MOVFF  65E,6D6
07972:  CLRF   xD9
07974:  MOVLW  2F
07976:  MOVWF  xD8
07978:  MOVLB  0
0797A:  CALL   0442
0797E:  BTFSC  1B.7
07980:  BSF    FF2.7
07982:  MOVF   01,W
07984:  ADDLW  4C
07986:  MOVLB  6
07988:  MOVWF  x5F
0798A:  MOVLW  01
0798C:  ADDWFC 02,W
0798E:  MOVWF  x60
07990:  MOVLW  01
07992:  ADDWF  x5F,W
07994:  MOVWF  01
07996:  MOVLW  00
07998:  ADDWFC x60,W
0799A:  MOVWF  03
0799C:  MOVF   01,W
0799E:  ADDLW  3E
079A0:  MOVWF  01
079A2:  MOVLW  01
079A4:  ADDWFC 03,F
079A6:  MOVF   01,W
079A8:  ADDLW  29
079AA:  MOVWF  FE9
079AC:  MOVLW  00
079AE:  ADDWFC 03,W
079B0:  MOVWF  FEA
079B2:  BCF    FD8.0
079B4:  RLCF   FEF,W
079B6:  CLRF   03
079B8:  MOVLB  0
079BA:  CALL   0172
079BE:  TBLRD*+
079C0:  MOVFF  FF5,03
079C4:  CLRF   00
079C6:  DECF   00,F
079C8:  XORWF  00,F
079CA:  MOVLW  FF
079CC:  XORWF  03,F
079CE:  MOVF   00,W
079D0:  MOVLB  5
079D2:  IORWF  x7F,F
079D4:  MOVF   03,W
079D6:  IORWF  x80,F
079D8:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
079DA:  MOVLB  0
079DC:  BRA    79DE
....................       } 
....................    } 
079DE:  MOVLB  6
079E0:  INCF   x5E,F
079E2:  GOTO   71D6
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
079E6:  CLRF   x5E
079E8:  MOVLB  1
079EA:  MOVF   x3E,W
079EC:  MOVLB  6
079EE:  SUBWF  x5E,W
079F0:  BTFSC  FD8.0
079F2:  BRA    80C2
079F4:  CLRF   1B
079F6:  BTFSC  FF2.7
079F8:  BSF    1B.7
079FA:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
079FC:  CLRF   xD7
079FE:  MOVFF  65E,6D6
07A02:  CLRF   xD9
07A04:  MOVLW  21
07A06:  MOVWF  xD8
07A08:  MOVLB  0
07A0A:  CALL   0442
07A0E:  BTFSC  1B.7
07A10:  BSF    FF2.7
07A12:  MOVFF  02,03
07A16:  MOVF   01,W
07A18:  ADDLW  40
07A1A:  MOVWF  01
07A1C:  MOVLW  01
07A1E:  ADDWFC 03,F
07A20:  MOVFF  01,FE9
07A24:  MOVFF  03,FEA
07A28:  MOVF   FEF,W
07A2A:  XORLW  02
07A2C:  BZ    7A36
07A2E:  XORLW  01
07A30:  BTFSC  FD8.2
07A32:  BRA    7B82
07A34:  BRA    80BC
....................          case button_switch: 
07A36:  CLRF   1B
07A38:  BTFSC  FF2.7
07A3A:  BSF    1B.7
07A3C:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
07A3E:  MOVLB  6
07A40:  CLRF   xD7
07A42:  MOVFF  65E,6D6
07A46:  CLRF   xD9
07A48:  MOVLW  21
07A4A:  MOVWF  xD8
07A4C:  MOVLB  0
07A4E:  CALL   0442
07A52:  BTFSC  1B.7
07A54:  BSF    FF2.7
07A56:  MOVF   01,W
07A58:  ADDLW  02
07A5A:  MOVLB  6
07A5C:  MOVWF  x5F
07A5E:  MOVLW  00
07A60:  ADDWFC 02,W
07A62:  MOVWF  x60
07A64:  MOVLW  01
07A66:  ADDWF  x5F,W
07A68:  MOVWF  01
07A6A:  MOVLW  00
07A6C:  ADDWFC x60,W
07A6E:  MOVWF  03
07A70:  MOVF   01,W
07A72:  ADDLW  3E
07A74:  MOVWF  01
07A76:  MOVLW  01
07A78:  ADDWFC 03,F
07A7A:  MOVF   01,W
07A7C:  ADDLW  08
07A7E:  MOVWF  FE9
07A80:  MOVLW  00
07A82:  ADDWFC 03,W
07A84:  MOVWF  FEA
07A86:  BTFSS  FEF.0
07A88:  BRA    7B7E
07A8A:  CLRF   1B
07A8C:  BTFSC  FF2.7
07A8E:  BSF    1B.7
07A90:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
07A92:  CLRF   xD7
07A94:  MOVFF  65E,6D6
07A98:  CLRF   xD9
07A9A:  MOVLW  21
07A9C:  MOVWF  xD8
07A9E:  MOVLB  0
07AA0:  CALL   0442
07AA4:  BTFSC  1B.7
07AA6:  BSF    FF2.7
07AA8:  MOVF   01,W
07AAA:  ADDLW  02
07AAC:  MOVLB  6
07AAE:  MOVWF  x5F
07AB0:  MOVLW  00
07AB2:  ADDWFC 02,W
07AB4:  MOVWF  x60
07AB6:  MOVLW  01
07AB8:  ADDWF  x5F,W
07ABA:  MOVWF  01
07ABC:  MOVLW  00
07ABE:  ADDWFC x60,W
07AC0:  MOVWF  03
07AC2:  MOVF   01,W
07AC4:  ADDLW  3E
07AC6:  MOVWF  01
07AC8:  MOVLW  01
07ACA:  ADDWFC 03,F
07ACC:  MOVF   01,W
07ACE:  ADDLW  07
07AD0:  MOVWF  FE9
07AD2:  MOVLW  00
07AD4:  ADDWFC 03,W
07AD6:  MOVWF  FEA
07AD8:  MOVF   FEF,F
07ADA:  BNZ   7B7E
07ADC:  CLRF   1B
07ADE:  BTFSC  FF2.7
07AE0:  BSF    1B.7
07AE2:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
07AE4:  CLRF   xD7
07AE6:  MOVFF  65E,6D6
07AEA:  CLRF   xD9
07AEC:  MOVLW  21
07AEE:  MOVWF  xD8
07AF0:  MOVLB  0
07AF2:  CALL   0442
07AF6:  BTFSC  1B.7
07AF8:  BSF    FF2.7
07AFA:  MOVF   01,W
07AFC:  ADDLW  02
07AFE:  MOVLB  6
07B00:  MOVWF  x5F
07B02:  MOVLW  00
07B04:  ADDWFC 02,W
07B06:  MOVWF  x60
07B08:  MOVLW  01
07B0A:  ADDWF  x5F,W
07B0C:  MOVWF  01
07B0E:  MOVLW  00
07B10:  ADDWFC x60,W
07B12:  MOVWF  03
07B14:  MOVF   01,W
07B16:  ADDLW  3E
07B18:  MOVWF  01
07B1A:  MOVLW  01
07B1C:  ADDWFC 03,F
07B1E:  MOVF   01,W
07B20:  ADDLW  01
07B22:  MOVWF  FE9
07B24:  MOVLW  00
07B26:  ADDWFC 03,W
07B28:  MOVWF  FEA
07B2A:  MOVLW  01
07B2C:  MOVWF  FEF
07B2E:  CLRF   1B
07B30:  BTFSC  FF2.7
07B32:  BSF    1B.7
07B34:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
07B36:  CLRF   xD7
07B38:  MOVFF  65E,6D6
07B3C:  CLRF   xD9
07B3E:  MOVLW  21
07B40:  MOVWF  xD8
07B42:  MOVLB  0
07B44:  CALL   0442
07B48:  BTFSC  1B.7
07B4A:  BSF    FF2.7
07B4C:  MOVF   01,W
07B4E:  ADDLW  02
07B50:  MOVLB  6
07B52:  MOVWF  x5F
07B54:  MOVLW  00
07B56:  ADDWFC 02,W
07B58:  MOVWF  x60
07B5A:  MOVLW  01
07B5C:  ADDWF  x5F,W
07B5E:  MOVWF  01
07B60:  MOVLW  00
07B62:  ADDWFC x60,W
07B64:  MOVWF  03
07B66:  MOVF   01,W
07B68:  ADDLW  3E
07B6A:  MOVWF  01
07B6C:  MOVLW  01
07B6E:  ADDWFC 03,F
07B70:  MOVF   01,W
07B72:  ADDLW  02
07B74:  MOVWF  FE9
07B76:  MOVLW  00
07B78:  ADDWFC 03,W
07B7A:  MOVWF  FEA
07B7C:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
07B7E:  MOVLB  0
07B80:  BRA    80BC
....................          case timer: 
07B82:  CLRF   1B
07B84:  BTFSC  FF2.7
07B86:  BSF    1B.7
07B88:  BCF    FF2.7
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
07B8A:  MOVLB  6
07B8C:  CLRF   xD7
07B8E:  MOVFF  65E,6D6
07B92:  CLRF   xD9
07B94:  MOVLW  21
07B96:  MOVWF  xD8
07B98:  MOVLB  0
07B9A:  CALL   0442
07B9E:  BTFSC  1B.7
07BA0:  BSF    FF2.7
07BA2:  MOVF   01,W
07BA4:  ADDLW  02
07BA6:  MOVLB  6
07BA8:  MOVWF  x5F
07BAA:  MOVLW  00
07BAC:  ADDWFC 02,W
07BAE:  MOVWF  x60
07BB0:  MOVLW  01
07BB2:  ADDWF  x5F,W
07BB4:  MOVWF  01
07BB6:  MOVLW  00
07BB8:  ADDWFC x60,W
07BBA:  MOVWF  03
07BBC:  MOVF   01,W
07BBE:  ADDLW  3E
07BC0:  MOVWF  01
07BC2:  MOVLW  01
07BC4:  ADDWFC 03,F
07BC6:  MOVF   01,W
07BC8:  ADDLW  1F
07BCA:  MOVWF  FE9
07BCC:  MOVLW  00
07BCE:  ADDWFC 03,W
07BD0:  MOVWF  FEA
07BD2:  BTFSS  FEF.0
07BD4:  BRA    80B8
07BD6:  CLRF   1B
07BD8:  BTFSC  FF2.7
07BDA:  BSF    1B.7
07BDC:  BCF    FF2.7
....................           { 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
07BDE:  CLRF   xD7
07BE0:  MOVFF  65E,6D6
07BE4:  CLRF   xD9
07BE6:  MOVLW  21
07BE8:  MOVWF  xD8
07BEA:  MOVLB  0
07BEC:  CALL   0442
07BF0:  BTFSC  1B.7
07BF2:  BSF    FF2.7
07BF4:  MOVF   01,W
07BF6:  ADDLW  02
07BF8:  MOVLB  6
07BFA:  MOVWF  x5F
07BFC:  MOVLW  00
07BFE:  ADDWFC 02,W
07C00:  MOVWF  x60
07C02:  MOVLW  01
07C04:  ADDWF  x5F,W
07C06:  MOVWF  01
07C08:  MOVLW  00
07C0A:  ADDWFC x60,W
07C0C:  MOVWF  03
07C0E:  MOVF   01,W
07C10:  ADDLW  3E
07C12:  MOVWF  01
07C14:  MOVLW  01
07C16:  ADDWFC 03,F
07C18:  MOVF   01,W
07C1A:  ADDLW  1D
07C1C:  MOVWF  FE9
07C1E:  MOVLW  00
07C20:  ADDWFC 03,W
07C22:  MOVWF  FEA
07C24:  MOVLW  01
07C26:  ADDWF  FEE,F
07C28:  BNC   7C2C
07C2A:  INCF   FEF,F
07C2C:  CLRF   1B
07C2E:  BTFSC  FF2.7
07C30:  BSF    1B.7
07C32:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
07C34:  CLRF   xD7
07C36:  MOVFF  65E,6D6
07C3A:  CLRF   xD9
07C3C:  MOVLW  21
07C3E:  MOVWF  xD8
07C40:  MOVLB  0
07C42:  CALL   0442
07C46:  BTFSC  1B.7
07C48:  BSF    FF2.7
07C4A:  MOVF   01,W
07C4C:  ADDLW  02
07C4E:  MOVLB  6
07C50:  MOVWF  x5F
07C52:  MOVLW  00
07C54:  ADDWFC 02,W
07C56:  MOVWF  x60
07C58:  MOVLW  01
07C5A:  ADDWF  x5F,W
07C5C:  MOVWF  01
07C5E:  MOVLW  00
07C60:  ADDWFC x60,W
07C62:  MOVWF  03
07C64:  MOVF   01,W
07C66:  ADDLW  3E
07C68:  MOVWF  01
07C6A:  MOVLW  01
07C6C:  ADDWFC 03,F
07C6E:  MOVF   01,W
07C70:  ADDLW  1D
07C72:  MOVWF  FE9
07C74:  MOVLW  00
07C76:  ADDWFC 03,W
07C78:  MOVWF  FEA
07C7A:  MOVFF  FEC,662
07C7E:  MOVF   FED,F
07C80:  MOVFF  FEF,661
07C84:  CLRF   1B
07C86:  BTFSC  FF2.7
07C88:  BSF    1B.7
07C8A:  BCF    FF2.7
07C8C:  CLRF   xD7
07C8E:  MOVFF  65E,6D6
07C92:  CLRF   xD9
07C94:  MOVLW  21
07C96:  MOVWF  xD8
07C98:  MOVLB  0
07C9A:  CALL   0442
07C9E:  BTFSC  1B.7
07CA0:  BSF    FF2.7
07CA2:  MOVF   01,W
07CA4:  ADDLW  02
07CA6:  MOVLB  6
07CA8:  MOVWF  x63
07CAA:  MOVLW  00
07CAC:  ADDWFC 02,W
07CAE:  MOVWF  x64
07CB0:  MOVLW  01
07CB2:  ADDWF  x63,W
07CB4:  MOVWF  01
07CB6:  MOVLW  00
07CB8:  ADDWFC x64,W
07CBA:  MOVWF  03
07CBC:  MOVF   01,W
07CBE:  ADDLW  3E
07CC0:  MOVWF  01
07CC2:  MOVLW  01
07CC4:  ADDWFC 03,F
07CC6:  MOVF   01,W
07CC8:  ADDLW  01
07CCA:  MOVWF  FE9
07CCC:  MOVLW  00
07CCE:  ADDWFC 03,W
07CD0:  MOVWF  FEA
07CD2:  MOVFF  FEC,03
07CD6:  MOVF   FED,F
07CD8:  MOVFF  FEF,01
07CDC:  MOVF   03,W
07CDE:  SUBWF  x62,W
07CE0:  BTFSS  FD8.0
07CE2:  BRA    80B8
07CE4:  BNZ   7CEE
07CE6:  MOVF   x61,W
07CE8:  SUBWF  01,W
07CEA:  BTFSC  FD8.0
07CEC:  BRA    80B8
07CEE:  CLRF   1B
07CF0:  BTFSC  FF2.7
07CF2:  BSF    1B.7
07CF4:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
07CF6:  CLRF   xD7
07CF8:  MOVFF  65E,6D6
07CFC:  CLRF   xD9
07CFE:  MOVLW  21
07D00:  MOVWF  xD8
07D02:  MOVLB  0
07D04:  CALL   0442
07D08:  BTFSC  1B.7
07D0A:  BSF    FF2.7
07D0C:  MOVF   01,W
07D0E:  ADDLW  02
07D10:  MOVLB  6
07D12:  MOVWF  x5F
07D14:  MOVLW  00
07D16:  ADDWFC 02,W
07D18:  MOVWF  x60
07D1A:  MOVLW  01
07D1C:  ADDWF  x5F,W
07D1E:  MOVWF  01
07D20:  MOVLW  00
07D22:  ADDWFC x60,W
07D24:  MOVWF  03
07D26:  MOVF   01,W
07D28:  ADDLW  3E
07D2A:  MOVWF  01
07D2C:  MOVLW  01
07D2E:  ADDWFC 03,F
07D30:  MOVFF  01,FE9
07D34:  MOVFF  03,FEA
07D38:  MOVF   FEF,F
07D3A:  BNZ   7E30
07D3C:  CLRF   1B
07D3E:  BTFSC  FF2.7
07D40:  BSF    1B.7
07D42:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07D44:  CLRF   xD7
07D46:  MOVFF  65E,6D6
07D4A:  CLRF   xD9
07D4C:  MOVLW  21
07D4E:  MOVWF  xD8
07D50:  MOVLB  0
07D52:  CALL   0442
07D56:  BTFSC  1B.7
07D58:  BSF    FF2.7
07D5A:  MOVF   01,W
07D5C:  ADDLW  02
07D5E:  MOVLB  6
07D60:  MOVWF  x5F
07D62:  MOVLW  00
07D64:  ADDWFC 02,W
07D66:  MOVWF  x60
07D68:  MOVLW  01
07D6A:  ADDWF  x5F,W
07D6C:  MOVWF  01
07D6E:  MOVLW  00
07D70:  ADDWFC x60,W
07D72:  MOVWF  03
07D74:  MOVF   01,W
07D76:  ADDLW  3E
07D78:  MOVWF  01
07D7A:  MOVLW  01
07D7C:  ADDWFC 03,F
07D7E:  MOVF   01,W
07D80:  ADDLW  04
07D82:  MOVWF  FE9
07D84:  MOVLW  00
07D86:  ADDWFC 03,W
07D88:  MOVWF  FEA
07D8A:  MOVLW  01
07D8C:  MOVWF  FEF
07D8E:  CLRF   1B
07D90:  BTFSC  FF2.7
07D92:  BSF    1B.7
07D94:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
07D96:  CLRF   xD7
07D98:  MOVFF  65E,6D6
07D9C:  CLRF   xD9
07D9E:  MOVLW  21
07DA0:  MOVWF  xD8
07DA2:  MOVLB  0
07DA4:  CALL   0442
07DA8:  BTFSC  1B.7
07DAA:  BSF    FF2.7
07DAC:  MOVF   01,W
07DAE:  ADDLW  02
07DB0:  MOVLB  6
07DB2:  MOVWF  x5F
07DB4:  MOVLW  00
07DB6:  ADDWFC 02,W
07DB8:  MOVWF  x60
07DBA:  MOVLW  01
07DBC:  ADDWF  x5F,W
07DBE:  MOVWF  01
07DC0:  MOVLW  00
07DC2:  ADDWFC x60,W
07DC4:  MOVWF  03
07DC6:  MOVF   01,W
07DC8:  ADDLW  3E
07DCA:  MOVWF  01
07DCC:  MOVLW  01
07DCE:  ADDWFC 03,F
07DD0:  MOVF   01,W
07DD2:  ADDLW  05
07DD4:  MOVWF  FE9
07DD6:  MOVLW  00
07DD8:  ADDWFC 03,W
07DDA:  MOVWF  FEA
07DDC:  BSF    FEF.0
07DDE:  CLRF   1B
07DE0:  BTFSC  FF2.7
07DE2:  BSF    1B.7
07DE4:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07DE6:  CLRF   xD7
07DE8:  MOVFF  65E,6D6
07DEC:  CLRF   xD9
07DEE:  MOVLW  21
07DF0:  MOVWF  xD8
07DF2:  MOVLB  0
07DF4:  CALL   0442
07DF8:  BTFSC  1B.7
07DFA:  BSF    FF2.7
07DFC:  MOVF   01,W
07DFE:  ADDLW  02
07E00:  MOVLB  6
07E02:  MOVWF  x5F
07E04:  MOVLW  00
07E06:  ADDWFC 02,W
07E08:  MOVWF  x60
07E0A:  MOVLW  01
07E0C:  ADDWF  x5F,W
07E0E:  MOVWF  01
07E10:  MOVLW  00
07E12:  ADDWFC x60,W
07E14:  MOVWF  03
07E16:  MOVF   01,W
07E18:  ADDLW  3E
07E1A:  MOVWF  01
07E1C:  MOVLW  01
07E1E:  ADDWFC 03,F
07E20:  MOVF   01,W
07E22:  ADDLW  1F
07E24:  MOVWF  FE9
07E26:  MOVLW  00
07E28:  ADDWFC 03,W
07E2A:  MOVWF  FEA
07E2C:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
07E2E:  BRA    80B8
07E30:  CLRF   1B
07E32:  BTFSC  FF2.7
07E34:  BSF    1B.7
07E36:  BCF    FF2.7
07E38:  CLRF   xD7
07E3A:  MOVFF  65E,6D6
07E3E:  CLRF   xD9
07E40:  MOVLW  21
07E42:  MOVWF  xD8
07E44:  MOVLB  0
07E46:  CALL   0442
07E4A:  BTFSC  1B.7
07E4C:  BSF    FF2.7
07E4E:  MOVF   01,W
07E50:  ADDLW  02
07E52:  MOVLB  6
07E54:  MOVWF  x5F
07E56:  MOVLW  00
07E58:  ADDWFC 02,W
07E5A:  MOVWF  x60
07E5C:  MOVLW  01
07E5E:  ADDWF  x5F,W
07E60:  MOVWF  01
07E62:  MOVLW  00
07E64:  ADDWFC x60,W
07E66:  MOVWF  03
07E68:  MOVF   01,W
07E6A:  ADDLW  3E
07E6C:  MOVWF  01
07E6E:  MOVLW  01
07E70:  ADDWFC 03,F
07E72:  MOVFF  01,FE9
07E76:  MOVFF  03,FEA
07E7A:  DECFSZ FEF,W
07E7C:  BRA    7F72
07E7E:  CLRF   1B
07E80:  BTFSC  FF2.7
07E82:  BSF    1B.7
07E84:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
07E86:  CLRF   xD7
07E88:  MOVFF  65E,6D6
07E8C:  CLRF   xD9
07E8E:  MOVLW  21
07E90:  MOVWF  xD8
07E92:  MOVLB  0
07E94:  CALL   0442
07E98:  BTFSC  1B.7
07E9A:  BSF    FF2.7
07E9C:  MOVF   01,W
07E9E:  ADDLW  02
07EA0:  MOVLB  6
07EA2:  MOVWF  x5F
07EA4:  MOVLW  00
07EA6:  ADDWFC 02,W
07EA8:  MOVWF  x60
07EAA:  MOVLW  01
07EAC:  ADDWF  x5F,W
07EAE:  MOVWF  01
07EB0:  MOVLW  00
07EB2:  ADDWFC x60,W
07EB4:  MOVWF  03
07EB6:  MOVF   01,W
07EB8:  ADDLW  3E
07EBA:  MOVWF  01
07EBC:  MOVLW  01
07EBE:  ADDWFC 03,F
07EC0:  MOVF   01,W
07EC2:  ADDLW  07
07EC4:  MOVWF  FE9
07EC6:  MOVLW  00
07EC8:  ADDWFC 03,W
07ECA:  MOVWF  FEA
07ECC:  MOVLW  01
07ECE:  MOVWF  FEF
07ED0:  CLRF   1B
07ED2:  BTFSC  FF2.7
07ED4:  BSF    1B.7
07ED6:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
07ED8:  CLRF   xD7
07EDA:  MOVFF  65E,6D6
07EDE:  CLRF   xD9
07EE0:  MOVLW  21
07EE2:  MOVWF  xD8
07EE4:  MOVLB  0
07EE6:  CALL   0442
07EEA:  BTFSC  1B.7
07EEC:  BSF    FF2.7
07EEE:  MOVF   01,W
07EF0:  ADDLW  02
07EF2:  MOVLB  6
07EF4:  MOVWF  x5F
07EF6:  MOVLW  00
07EF8:  ADDWFC 02,W
07EFA:  MOVWF  x60
07EFC:  MOVLW  01
07EFE:  ADDWF  x5F,W
07F00:  MOVWF  01
07F02:  MOVLW  00
07F04:  ADDWFC x60,W
07F06:  MOVWF  03
07F08:  MOVF   01,W
07F0A:  ADDLW  3E
07F0C:  MOVWF  01
07F0E:  MOVLW  01
07F10:  ADDWFC 03,F
07F12:  MOVF   01,W
07F14:  ADDLW  08
07F16:  MOVWF  FE9
07F18:  MOVLW  00
07F1A:  ADDWFC 03,W
07F1C:  MOVWF  FEA
07F1E:  BSF    FEF.0
07F20:  CLRF   1B
07F22:  BTFSC  FF2.7
07F24:  BSF    1B.7
07F26:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
07F28:  CLRF   xD7
07F2A:  MOVFF  65E,6D6
07F2E:  CLRF   xD9
07F30:  MOVLW  21
07F32:  MOVWF  xD8
07F34:  MOVLB  0
07F36:  CALL   0442
07F3A:  BTFSC  1B.7
07F3C:  BSF    FF2.7
07F3E:  MOVF   01,W
07F40:  ADDLW  02
07F42:  MOVLB  6
07F44:  MOVWF  x5F
07F46:  MOVLW  00
07F48:  ADDWFC 02,W
07F4A:  MOVWF  x60
07F4C:  MOVLW  01
07F4E:  ADDWF  x5F,W
07F50:  MOVWF  01
07F52:  MOVLW  00
07F54:  ADDWFC x60,W
07F56:  MOVWF  03
07F58:  MOVF   01,W
07F5A:  ADDLW  3E
07F5C:  MOVWF  01
07F5E:  MOVLW  01
07F60:  ADDWFC 03,F
07F62:  MOVF   01,W
07F64:  ADDLW  1F
07F66:  MOVWF  FE9
07F68:  MOVLW  00
07F6A:  ADDWFC 03,W
07F6C:  MOVWF  FEA
07F6E:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
07F70:  BRA    80B8
07F72:  CLRF   1B
07F74:  BTFSC  FF2.7
07F76:  BSF    1B.7
07F78:  BCF    FF2.7
07F7A:  CLRF   xD7
07F7C:  MOVFF  65E,6D6
07F80:  CLRF   xD9
07F82:  MOVLW  21
07F84:  MOVWF  xD8
07F86:  MOVLB  0
07F88:  CALL   0442
07F8C:  BTFSC  1B.7
07F8E:  BSF    FF2.7
07F90:  MOVF   01,W
07F92:  ADDLW  02
07F94:  MOVLB  6
07F96:  MOVWF  x5F
07F98:  MOVLW  00
07F9A:  ADDWFC 02,W
07F9C:  MOVWF  x60
07F9E:  MOVLW  01
07FA0:  ADDWF  x5F,W
07FA2:  MOVWF  01
07FA4:  MOVLW  00
07FA6:  ADDWFC x60,W
07FA8:  MOVWF  03
07FAA:  MOVF   01,W
07FAC:  ADDLW  3E
07FAE:  MOVWF  01
07FB0:  MOVLW  01
07FB2:  ADDWFC 03,F
07FB4:  MOVFF  01,FE9
07FB8:  MOVFF  03,FEA
07FBC:  MOVF   FEF,W
07FBE:  SUBLW  02
07FC0:  BNZ   80B8
07FC2:  CLRF   1B
07FC4:  BTFSC  FF2.7
07FC6:  BSF    1B.7
07FC8:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07FCA:  CLRF   xD7
07FCC:  MOVFF  65E,6D6
07FD0:  CLRF   xD9
07FD2:  MOVLW  21
07FD4:  MOVWF  xD8
07FD6:  MOVLB  0
07FD8:  CALL   0442
07FDC:  BTFSC  1B.7
07FDE:  BSF    FF2.7
07FE0:  MOVF   01,W
07FE2:  ADDLW  02
07FE4:  MOVLB  6
07FE6:  MOVWF  x5F
07FE8:  MOVLW  00
07FEA:  ADDWFC 02,W
07FEC:  MOVWF  x60
07FEE:  MOVLW  01
07FF0:  ADDWF  x5F,W
07FF2:  MOVWF  01
07FF4:  MOVLW  00
07FF6:  ADDWFC x60,W
07FF8:  MOVWF  03
07FFA:  MOVF   01,W
07FFC:  ADDLW  3E
07FFE:  MOVWF  01
08000:  MOVLW  01
08002:  ADDWFC 03,F
08004:  MOVF   01,W
08006:  ADDLW  04
08008:  MOVWF  FE9
0800A:  MOVLW  00
0800C:  ADDWFC 03,W
0800E:  MOVWF  FEA
08010:  MOVLW  01
08012:  MOVWF  FEF
08014:  CLRF   1B
08016:  BTFSC  FF2.7
08018:  BSF    1B.7
0801A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
0801C:  CLRF   xD7
0801E:  MOVFF  65E,6D6
08022:  CLRF   xD9
08024:  MOVLW  21
08026:  MOVWF  xD8
08028:  MOVLB  0
0802A:  CALL   0442
0802E:  BTFSC  1B.7
08030:  BSF    FF2.7
08032:  MOVF   01,W
08034:  ADDLW  02
08036:  MOVLB  6
08038:  MOVWF  x5F
0803A:  MOVLW  00
0803C:  ADDWFC 02,W
0803E:  MOVWF  x60
08040:  MOVLW  01
08042:  ADDWF  x5F,W
08044:  MOVWF  01
08046:  MOVLW  00
08048:  ADDWFC x60,W
0804A:  MOVWF  03
0804C:  MOVF   01,W
0804E:  ADDLW  3E
08050:  MOVWF  01
08052:  MOVLW  01
08054:  ADDWFC 03,F
08056:  MOVF   01,W
08058:  ADDLW  05
0805A:  MOVWF  FE9
0805C:  MOVLW  00
0805E:  ADDWFC 03,W
08060:  MOVWF  FEA
08062:  BSF    FEF.0
08064:  CLRF   1B
08066:  BTFSC  FF2.7
08068:  BSF    1B.7
0806A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
0806C:  CLRF   xD7
0806E:  MOVFF  65E,6D6
08072:  CLRF   xD9
08074:  MOVLW  21
08076:  MOVWF  xD8
08078:  MOVLB  0
0807A:  CALL   0442
0807E:  BTFSC  1B.7
08080:  BSF    FF2.7
08082:  MOVF   01,W
08084:  ADDLW  02
08086:  MOVLB  6
08088:  MOVWF  x5F
0808A:  MOVLW  00
0808C:  ADDWFC 02,W
0808E:  MOVWF  x60
08090:  MOVLW  01
08092:  ADDWF  x5F,W
08094:  MOVWF  01
08096:  MOVLW  00
08098:  ADDWFC x60,W
0809A:  MOVWF  03
0809C:  MOVF   01,W
0809E:  ADDLW  3E
080A0:  MOVWF  01
080A2:  MOVLW  01
080A4:  ADDWFC 03,F
080A6:  MOVF   01,W
080A8:  ADDLW  1D
080AA:  MOVWF  FE9
080AC:  MOVLW  00
080AE:  ADDWFC 03,W
080B0:  MOVWF  FEA
080B2:  CLRF   FEC
080B4:  MOVF   FED,F
080B6:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
080B8:  MOVLB  0
080BA:  BRA    80BC
....................       } 
....................    } 
080BC:  MOVLB  6
080BE:  INCF   x5E,F
080C0:  BRA    79E8
.................... } 
080C2:  MOVLB  0
080C4:  GOTO   84E6 (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
*
05078:  MOVLW  D4
0507A:  MOVWF  FF6
0507C:  MOVLW  02
0507E:  MOVWF  FF7
05080:  MOVLW  00
05082:  MOVWF  FF8
05084:  CALL   2222
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
05088:  MOVLW  DE
0508A:  MOVWF  FF6
0508C:  MOVLW  02
0508E:  MOVWF  FF7
05090:  MOVLW  00
05092:  MOVWF  FF8
05094:  CALL   2222
....................    while(!kbhit()) 
....................    { 
05098:  BTFSS  F81.4
0509A:  BRA    541A
0509C:  CLRF   1B
0509E:  BTFSC  FF2.7
050A0:  BSF    1B.7
050A2:  BCF    FF2.7
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
050A4:  MOVFF  1C,6D9
050A8:  MOVLW  01
050AA:  MOVLB  6
050AC:  MOVWF  xDA
050AE:  MOVLW  0F
050B0:  MOVWF  xDC
050B2:  MOVLW  92
050B4:  MOVWF  xDB
050B6:  MOVLB  0
050B8:  CALL   0464
050BC:  BTFSC  1B.7
050BE:  BSF    FF2.7
050C0:  CLRF   1B
050C2:  BTFSC  FF2.7
050C4:  BSF    1B.7
050C6:  BCF    FF2.7
050C8:  MOVFF  1C,6D9
050CC:  MOVLW  0F
050CE:  MOVLB  6
050D0:  MOVWF  xDB
050D2:  MOVLW  80
050D4:  MOVWF  xDA
050D6:  MOVLB  0
050D8:  CALL   04A6
050DC:  BTFSC  1B.7
050DE:  BSF    FF2.7
050E0:  MOVLB  6
050E2:  BCF    x5F.0
050E4:  BTFSC  01.0
050E6:  BSF    x5F.0
050E8:  CLRF   1B
050EA:  BTFSC  FF2.7
050EC:  BSF    1B.7
050EE:  BCF    FF2.7
050F0:  MOVFF  1D,6D9
050F4:  MOVLW  01
050F6:  MOVWF  xDA
050F8:  MOVLW  0F
050FA:  MOVWF  xDC
050FC:  MOVLW  92
050FE:  MOVWF  xDB
05100:  MOVLB  0
05102:  CALL   0464
05106:  BTFSC  1B.7
05108:  BSF    FF2.7
0510A:  CLRF   1B
0510C:  BTFSC  FF2.7
0510E:  BSF    1B.7
05110:  BCF    FF2.7
05112:  MOVFF  1D,6D9
05116:  MOVLW  0F
05118:  MOVLB  6
0511A:  MOVWF  xDB
0511C:  MOVLW  80
0511E:  MOVWF  xDA
05120:  MOVLB  0
05122:  CALL   04A6
05126:  BTFSC  1B.7
05128:  BSF    FF2.7
0512A:  MOVLB  6
0512C:  BCF    x5F.1
0512E:  BTFSC  01.0
05130:  BSF    x5F.1
05132:  CLRF   1B
05134:  BTFSC  FF2.7
05136:  BSF    1B.7
05138:  BCF    FF2.7
0513A:  MOVFF  1E,6D9
0513E:  MOVLW  01
05140:  MOVWF  xDA
05142:  MOVLW  0F
05144:  MOVWF  xDC
05146:  MOVLW  92
05148:  MOVWF  xDB
0514A:  MOVLB  0
0514C:  CALL   0464
05150:  BTFSC  1B.7
05152:  BSF    FF2.7
05154:  CLRF   1B
05156:  BTFSC  FF2.7
05158:  BSF    1B.7
0515A:  BCF    FF2.7
0515C:  MOVFF  1E,6D9
05160:  MOVLW  0F
05162:  MOVLB  6
05164:  MOVWF  xDB
05166:  MOVLW  80
05168:  MOVWF  xDA
0516A:  MOVLB  0
0516C:  CALL   04A6
05170:  BTFSC  1B.7
05172:  BSF    FF2.7
05174:  MOVLB  6
05176:  BCF    x5F.2
05178:  BTFSC  01.0
0517A:  BSF    x5F.2
0517C:  CLRF   1B
0517E:  BTFSC  FF2.7
05180:  BSF    1B.7
05182:  BCF    FF2.7
05184:  MOVFF  1F,6D9
05188:  MOVLW  01
0518A:  MOVWF  xDA
0518C:  MOVLW  0F
0518E:  MOVWF  xDC
05190:  MOVLW  92
05192:  MOVWF  xDB
05194:  MOVLB  0
05196:  CALL   0464
0519A:  BTFSC  1B.7
0519C:  BSF    FF2.7
0519E:  CLRF   1B
051A0:  BTFSC  FF2.7
051A2:  BSF    1B.7
051A4:  BCF    FF2.7
051A6:  MOVFF  1F,6D9
051AA:  MOVLW  0F
051AC:  MOVLB  6
051AE:  MOVWF  xDB
051B0:  MOVLW  80
051B2:  MOVWF  xDA
051B4:  MOVLB  0
051B6:  CALL   04A6
051BA:  BTFSC  1B.7
051BC:  BSF    FF2.7
051BE:  MOVLB  6
051C0:  BCF    x5F.3
051C2:  BTFSC  01.0
051C4:  BSF    x5F.3
051C6:  CLRF   1B
051C8:  BTFSC  FF2.7
051CA:  BSF    1B.7
051CC:  BCF    FF2.7
051CE:  MOVFF  20,6D9
051D2:  MOVLW  01
051D4:  MOVWF  xDA
051D6:  MOVLW  0F
051D8:  MOVWF  xDC
051DA:  MOVLW  92
051DC:  MOVWF  xDB
051DE:  MOVLB  0
051E0:  CALL   0464
051E4:  BTFSC  1B.7
051E6:  BSF    FF2.7
051E8:  CLRF   1B
051EA:  BTFSC  FF2.7
051EC:  BSF    1B.7
051EE:  BCF    FF2.7
051F0:  MOVFF  20,6D9
051F4:  MOVLW  0F
051F6:  MOVLB  6
051F8:  MOVWF  xDB
051FA:  MOVLW  80
051FC:  MOVWF  xDA
051FE:  MOVLB  0
05200:  CALL   04A6
05204:  BTFSC  1B.7
05206:  BSF    FF2.7
05208:  MOVLB  6
0520A:  BCF    x5F.4
0520C:  BTFSC  01.0
0520E:  BSF    x5F.4
05210:  CLRF   1B
05212:  BTFSC  FF2.7
05214:  BSF    1B.7
05216:  BCF    FF2.7
05218:  MOVFF  21,6D9
0521C:  MOVLW  01
0521E:  MOVWF  xDA
05220:  MOVLW  0F
05222:  MOVWF  xDC
05224:  MOVLW  92
05226:  MOVWF  xDB
05228:  MOVLB  0
0522A:  CALL   0464
0522E:  BTFSC  1B.7
05230:  BSF    FF2.7
05232:  CLRF   1B
05234:  BTFSC  FF2.7
05236:  BSF    1B.7
05238:  BCF    FF2.7
0523A:  MOVFF  21,6D9
0523E:  MOVLW  0F
05240:  MOVLB  6
05242:  MOVWF  xDB
05244:  MOVLW  80
05246:  MOVWF  xDA
05248:  MOVLB  0
0524A:  CALL   04A6
0524E:  BTFSC  1B.7
05250:  BSF    FF2.7
05252:  MOVLB  6
05254:  BCF    x5F.5
05256:  BTFSC  01.0
05258:  BSF    x5F.5
0525A:  CLRF   1B
0525C:  BTFSC  FF2.7
0525E:  BSF    1B.7
05260:  BCF    FF2.7
05262:  MOVFF  22,6D9
05266:  MOVLW  01
05268:  MOVWF  xDA
0526A:  MOVLW  0F
0526C:  MOVWF  xDC
0526E:  MOVLW  92
05270:  MOVWF  xDB
05272:  MOVLB  0
05274:  CALL   0464
05278:  BTFSC  1B.7
0527A:  BSF    FF2.7
0527C:  CLRF   1B
0527E:  BTFSC  FF2.7
05280:  BSF    1B.7
05282:  BCF    FF2.7
05284:  MOVFF  22,6D9
05288:  MOVLW  0F
0528A:  MOVLB  6
0528C:  MOVWF  xDB
0528E:  MOVLW  80
05290:  MOVWF  xDA
05292:  MOVLB  0
05294:  CALL   04A6
05298:  BTFSC  1B.7
0529A:  BSF    FF2.7
0529C:  MOVLB  6
0529E:  BCF    x5F.6
052A0:  BTFSC  01.0
052A2:  BSF    x5F.6
052A4:  CLRF   1B
052A6:  BTFSC  FF2.7
052A8:  BSF    1B.7
052AA:  BCF    FF2.7
052AC:  MOVFF  23,6D9
052B0:  MOVLW  01
052B2:  MOVWF  xDA
052B4:  MOVLW  0F
052B6:  MOVWF  xDC
052B8:  MOVLW  92
052BA:  MOVWF  xDB
052BC:  MOVLB  0
052BE:  CALL   0464
052C2:  BTFSC  1B.7
052C4:  BSF    FF2.7
052C6:  CLRF   1B
052C8:  BTFSC  FF2.7
052CA:  BSF    1B.7
052CC:  BCF    FF2.7
052CE:  MOVFF  23,6D9
052D2:  MOVLW  0F
052D4:  MOVLB  6
052D6:  MOVWF  xDB
052D8:  MOVLW  80
052DA:  MOVWF  xDA
052DC:  MOVLB  0
052DE:  CALL   04A6
052E2:  BTFSC  1B.7
052E4:  BSF    FF2.7
052E6:  MOVLB  6
052E8:  BCF    x5F.7
052EA:  BTFSC  01.0
052EC:  BSF    x5F.7
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
052EE:  MOVLW  00
052F0:  BTFSC  x5F.0
052F2:  MOVLW  01
052F4:  MOVWF  x60
052F6:  MOVLW  00
052F8:  BTFSC  x5F.1
052FA:  MOVLW  01
052FC:  MOVWF  x61
052FE:  MOVLW  00
05300:  BTFSC  x5F.2
05302:  MOVLW  01
05304:  MOVWF  x62
05306:  MOVLW  00
05308:  BTFSC  x5F.3
0530A:  MOVLW  01
0530C:  MOVWF  x63
0530E:  MOVLW  00
05310:  BTFSC  x5F.4
05312:  MOVLW  01
05314:  MOVWF  x64
05316:  MOVLW  00
05318:  BTFSC  x5F.5
0531A:  MOVLW  01
0531C:  MOVWF  x65
0531E:  MOVLW  00
05320:  BTFSC  x5F.6
05322:  MOVLW  01
05324:  MOVWF  x66
05326:  MOVLW  00
05328:  BTFSC  x5F.7
0532A:  MOVLW  01
0532C:  MOVWF  x67
0532E:  MOVFF  660,6BA
05332:  MOVLW  1F
05334:  MOVWF  xBB
05336:  MOVLB  0
05338:  CALL   1ED0
0533C:  MOVLW  20
0533E:  MOVLB  6
05340:  MOVWF  xC0
05342:  MOVLB  0
05344:  CALL   1E2E
05348:  MOVFF  661,6BA
0534C:  MOVLW  1F
0534E:  MOVLB  6
05350:  MOVWF  xBB
05352:  MOVLB  0
05354:  CALL   1ED0
05358:  MOVLW  20
0535A:  MOVLB  6
0535C:  MOVWF  xC0
0535E:  MOVLB  0
05360:  CALL   1E2E
05364:  MOVFF  662,6BA
05368:  MOVLW  1F
0536A:  MOVLB  6
0536C:  MOVWF  xBB
0536E:  MOVLB  0
05370:  CALL   1ED0
05374:  MOVLW  20
05376:  MOVLB  6
05378:  MOVWF  xC0
0537A:  MOVLB  0
0537C:  CALL   1E2E
05380:  MOVFF  663,6BA
05384:  MOVLW  1F
05386:  MOVLB  6
05388:  MOVWF  xBB
0538A:  MOVLB  0
0538C:  CALL   1ED0
05390:  MOVLW  20
05392:  MOVLB  6
05394:  MOVWF  xC0
05396:  MOVLB  0
05398:  CALL   1E2E
0539C:  MOVFF  664,6BA
053A0:  MOVLW  1F
053A2:  MOVLB  6
053A4:  MOVWF  xBB
053A6:  MOVLB  0
053A8:  CALL   1ED0
053AC:  MOVLW  20
053AE:  MOVLB  6
053B0:  MOVWF  xC0
053B2:  MOVLB  0
053B4:  CALL   1E2E
053B8:  MOVFF  665,6BA
053BC:  MOVLW  1F
053BE:  MOVLB  6
053C0:  MOVWF  xBB
053C2:  MOVLB  0
053C4:  CALL   1ED0
053C8:  MOVLW  20
053CA:  MOVLB  6
053CC:  MOVWF  xC0
053CE:  MOVLB  0
053D0:  CALL   1E2E
053D4:  MOVFF  666,6BA
053D8:  MOVLW  1F
053DA:  MOVLB  6
053DC:  MOVWF  xBB
053DE:  MOVLB  0
053E0:  CALL   1ED0
053E4:  MOVLW  20
053E6:  MOVLB  6
053E8:  MOVWF  xC0
053EA:  MOVLB  0
053EC:  CALL   1E2E
053F0:  MOVFF  667,6BA
053F4:  MOVLW  1F
053F6:  MOVLB  6
053F8:  MOVWF  xBB
053FA:  MOVLB  0
053FC:  CALL   1ED0
05400:  MOVLW  0D
05402:  MOVLB  6
05404:  MOVWF  xC0
05406:  MOVLB  0
05408:  CALL   1E2E
....................       delay_us(10); 
0540C:  CLRWDT
0540E:  MOVLW  20
05410:  MOVWF  00
05412:  DECFSZ 00,F
05414:  BRA    5412
05416:  BRA    5418
....................    } 
05418:  BRA    5098
.................... } 
0541A:  GOTO   55BA (RETURN)
.................... void testOutputs() 
.................... { 
0541E:  MOVLB  6
05420:  BSF    x5F.0
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
05422:  MOVLW  F0
05424:  MOVWF  FF6
05426:  MOVLW  02
05428:  MOVWF  FF7
0542A:  MOVLW  00
0542C:  MOVWF  FF8
0542E:  MOVLB  0
05430:  CALL   2222
....................    while(loop) 
....................    { 
05434:  MOVLB  6
05436:  BTFSS  x5F.0
05438:  BRA    5546
....................    while(!kbhit()){} 
0543A:  BTFSS  F81.4
0543C:  BRA    5440
0543E:  BRA    543A
....................    char c=getc(); 
05440:  MOVLB  0
05442:  RCALL  5028
05444:  MOVFF  01,660
....................    switch(c) 
....................    { 
05448:  MOVLB  6
0544A:  MOVF   x60,W
0544C:  XORLW  30
0544E:  MOVLB  0
05450:  BZ    5494
05452:  XORLW  01
05454:  BZ    549E
05456:  XORLW  03
05458:  BZ    54A8
0545A:  XORLW  01
0545C:  BZ    54B2
0545E:  XORLW  07
05460:  BZ    54BC
05462:  XORLW  01
05464:  BZ    54C6
05466:  XORLW  03
05468:  BZ    54D0
0546A:  XORLW  01
0546C:  BZ    54DA
0546E:  XORLW  0F
05470:  BZ    54E4
05472:  XORLW  01
05474:  BZ    54EE
05476:  XORLW  58
05478:  BZ    54F8
0547A:  XORLW  03
0547C:  BZ    5502
0547E:  XORLW  01
05480:  BZ    550C
05482:  XORLW  07
05484:  BZ    5516
05486:  XORLW  01
05488:  BZ    5520
0548A:  XORLW  03
0548C:  BZ    552A
0548E:  XORLW  1E
05490:  BZ    5534
05492:  BRA    5542
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
05494:  MOVLW  FF
05496:  MOVWF  F82
....................          portd=(MAKE8(light_pins[0],0)); 
05498:  MOVLW  EF
0549A:  MOVWF  F83
....................       break; 
0549C:  BRA    5542
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
0549E:  MOVLW  FF
054A0:  MOVWF  F82
....................          portd=(MAKE8(light_pins[1],0)); 
054A2:  MOVLW  DF
054A4:  MOVWF  F83
....................       break; 
054A6:  BRA    5542
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
054A8:  MOVLW  FF
054AA:  MOVWF  F82
....................          portd=(MAKE8(light_pins[2],0)); 
054AC:  MOVLW  BF
054AE:  MOVWF  F83
....................       break; 
054B0:  BRA    5542
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
054B2:  MOVLW  FF
054B4:  MOVWF  F82
....................          portd=(MAKE8(light_pins[3],0)); 
054B6:  MOVLW  7F
054B8:  MOVWF  F83
....................       break; 
054BA:  BRA    5542
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
054BC:  MOVLW  FF
054BE:  MOVWF  F82
....................          portd=(MAKE8(light_pins[4],0)); 
054C0:  MOVLW  F7
054C2:  MOVWF  F83
....................       break; 
054C4:  BRA    5542
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
054C6:  MOVLW  FF
054C8:  MOVWF  F82
....................          portd=(MAKE8(light_pins[5],0)); 
054CA:  MOVLW  FB
054CC:  MOVWF  F83
....................       break; 
054CE:  BRA    5542
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
054D0:  MOVLW  FF
054D2:  MOVWF  F82
....................          portd=(MAKE8(light_pins[6],0)); 
054D4:  MOVLW  FE
054D6:  MOVWF  F83
....................       break; 
054D8:  BRA    5542
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
054DA:  MOVLW  FF
054DC:  MOVWF  F82
....................          portd=(MAKE8(light_pins[7],0)); 
054DE:  MOVLW  FD
054E0:  MOVWF  F83
....................       break; 
054E2:  BRA    5542
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
054E4:  MOVLW  7F
054E6:  MOVWF  F82
....................          portd=(MAKE8(light_pins[8],0)); 
054E8:  MOVLW  FF
054EA:  MOVWF  F83
....................       break; 
054EC:  BRA    5542
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
054EE:  MOVLW  BF
054F0:  MOVWF  F82
....................          portd=(MAKE8(light_pins[9],0)); 
054F2:  MOVLW  FF
054F4:  MOVWF  F83
....................       break; 
054F6:  BRA    5542
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
054F8:  MOVLW  DF
054FA:  MOVWF  F82
....................          portd=(MAKE8(light_pins[10],0)); 
054FC:  MOVLW  FF
054FE:  MOVWF  F83
....................       break; 
05500:  BRA    5542
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
05502:  MOVLW  EF
05504:  MOVWF  F82
....................          portd=(MAKE8(light_pins[11],0)); 
05506:  MOVLW  FF
05508:  MOVWF  F83
....................       break; 
0550A:  BRA    5542
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
0550C:  MOVLW  F7
0550E:  MOVWF  F82
....................          portd=(MAKE8(light_pins[12],0)); 
05510:  MOVLW  FF
05512:  MOVWF  F83
....................       break; 
05514:  BRA    5542
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
05516:  MOVLW  FB
05518:  MOVWF  F82
....................          portd=(MAKE8(light_pins[13],0)); 
0551A:  MOVLW  FF
0551C:  MOVWF  F83
....................       break; 
0551E:  BRA    5542
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
05520:  MOVLW  FD
05522:  MOVWF  F82
....................          portd=(MAKE8(light_pins[14],0)); 
05524:  MOVLW  FF
05526:  MOVWF  F83
....................       break; 
05528:  BRA    5542
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
0552A:  MOVLW  FE
0552C:  MOVWF  F82
....................          portd=(MAKE8(light_pins[15],0)); 
0552E:  MOVLW  FF
05530:  MOVWF  F83
....................       break; 
05532:  BRA    5542
....................       case 'x': 
....................          loop=false; 
05534:  MOVLB  6
05536:  BCF    x5F.0
....................          portc=0xFF; 
05538:  MOVLW  FF
0553A:  MOVWF  F82
....................          portd=0xFF; 
0553C:  MOVWF  F83
....................       break; 
0553E:  MOVLB  0
05540:  BRA    5542
....................    } 
....................    } 
05542:  BRA    5434
05544:  MOVLB  6
.................... } 
05546:  MOVLB  0
05548:  GOTO   55BA (RETURN)
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
0554C:  MOVLW  10
0554E:  MOVWF  FF6
05550:  MOVLW  03
05552:  MOVWF  FF7
05554:  MOVLW  00
05556:  MOVWF  FF8
05558:  CALL   2222
....................       printf("1-Test inputs\n\r"); 
0555C:  MOVLW  24
0555E:  MOVWF  FF6
05560:  MOVLW  03
05562:  MOVWF  FF7
05564:  MOVLW  00
05566:  MOVWF  FF8
05568:  CALL   2222
....................       printf("2-Test outputs\n\r"); 
0556C:  MOVLW  34
0556E:  MOVWF  FF6
05570:  MOVLW  03
05572:  MOVWF  FF7
05574:  MOVLW  00
05576:  MOVWF  FF8
05578:  CALL   2222
....................       while(!kbhit()){} 
0557C:  BTFSS  F81.4
0557E:  BRA    5582
05580:  BRA    557C
....................       char c=getc(); 
05582:  RCALL  5028
05584:  MOVFF  01,65E
....................       if(c=='1') 
05588:  MOVLB  6
0558A:  MOVF   x5E,W
0558C:  SUBLW  31
0558E:  BNZ   559A
....................          testInputs(); 
05590:  MOVLB  0
05592:  BRA    5078
....................       else if(c=='2') 
05594:  MOVLB  0
05596:  BRA    55BA
05598:  MOVLB  6
0559A:  MOVF   x5E,W
0559C:  SUBLW  32
0559E:  BNZ   55AA
....................          testOutputs(); 
055A0:  MOVLB  0
055A2:  BRA    541E
....................       else if(c=='x') 
055A4:  MOVLB  0
055A6:  BRA    55BA
055A8:  MOVLB  6
055AA:  MOVF   x5E,W
055AC:  SUBLW  78
055AE:  BNZ   55B8
....................       { 
....................          setup_wdt(WDT_ON); 
055B0:  BSF    FD1.0
....................          enable_interrupts (GLOBAL) ; 
055B2:  MOVLW  C0
055B4:  IORWF  FF2,F
....................          return; 
055B6:  BRA    55BE
055B8:  MOVLB  0
....................       } 
....................    } 
055BA:  BRA    554C
055BC:  MOVLB  6
.................... } 
055BE:  MOVLB  0
055C0:  GOTO   84D4 (RETURN)
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
.................... #define DEBUG 
....................  
.................... _write_eeprom(int adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%d value=%d\n\r",adress,value); 
*
01FAE:  MOVLW  46
01FB0:  MOVWF  FF6
01FB2:  MOVLW  03
01FB4:  MOVWF  FF7
01FB6:  MOVLW  00
01FB8:  MOVWF  FF8
01FBA:  MOVLW  07
01FBC:  MOVLB  6
01FBE:  MOVWF  xBA
01FC0:  MOVLB  0
01FC2:  RCALL  1E74
01FC4:  MOVFF  671,6BA
01FC8:  MOVLW  1F
01FCA:  MOVLB  6
01FCC:  MOVWF  xBB
01FCE:  MOVLB  0
01FD0:  RCALL  1ED0
01FD2:  MOVLW  4F
01FD4:  MOVWF  FF6
01FD6:  MOVLW  03
01FD8:  MOVWF  FF7
01FDA:  MOVLW  00
01FDC:  MOVWF  FF8
01FDE:  MOVLW  07
01FE0:  MOVLB  6
01FE2:  MOVWF  xBA
01FE4:  MOVLB  0
01FE6:  RCALL  1E74
01FE8:  MOVFF  672,6BA
01FEC:  MOVLW  1F
01FEE:  MOVLB  6
01FF0:  MOVWF  xBB
01FF2:  MOVLB  0
01FF4:  RCALL  1ED0
01FF6:  MOVLW  0A
01FF8:  MOVLB  6
01FFA:  MOVWF  xC0
01FFC:  MOVLB  0
01FFE:  RCALL  1E2E
02000:  MOVLW  0D
02002:  MOVLB  6
02004:  MOVWF  xC0
02006:  MOVLB  0
02008:  RCALL  1E2E
.................... #endif 
....................    write_eeprom(adress,value); 
0200A:  CLRF   FAA
0200C:  MOVFF  671,FA9
02010:  MOVFF  672,FA8
02014:  BCF    FA6.6
02016:  BCF    FA6.7
02018:  BSF    FA6.2
0201A:  MOVF   FF2,W
0201C:  MOVWF  00
0201E:  BCF    FF2.7
02020:  MOVLB  F
02022:  MOVLW  55
02024:  MOVWF  FA7
02026:  MOVLW  AA
02028:  MOVWF  FA7
0202A:  BSF    FA6.1
0202C:  BTFSC  FA6.1
0202E:  BRA    202C
02030:  BCF    FA6.2
02032:  MOVF   00,W
02034:  IORWF  FF2,F
.................... } 
02036:  MOVLB  0
02038:  RETLW  00
....................  
.................... int writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,int memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
024CA:  MOVLB  6
024CC:  CLRF   xBC
024CE:  MOVF   xBB,W
024D0:  SUBWF  xBC,W
024D2:  BC    250A
....................    { 
....................       *array=read_eeprom(memAdress+x); 
024D4:  MOVFF  6B9,03
024D8:  MOVF   xB8,W
024DA:  MOVWF  FE9
024DC:  MOVFF  03,FEA
024E0:  MOVF   xBC,W
024E2:  ADDWF  xBA,W
024E4:  MOVWF  xBF
024E6:  MOVFF  FF2,6C0
024EA:  BCF    FF2.7
024EC:  CLRF   FAA
024EE:  MOVFF  6BF,FA9
024F2:  BCF    FA6.6
024F4:  BCF    FA6.7
024F6:  BSF    FA6.0
024F8:  MOVF   FA8,W
024FA:  BTFSC  xC0.7
024FC:  BSF    FF2.7
024FE:  MOVWF  FEF
....................       ++array; 
02500:  INCF   xB8,F
02502:  BTFSC  FD8.2
02504:  INCF   xB9,F
....................    } 
02506:  INCF   xBC,F
02508:  BRA    24CE
.................... } 
0250A:  MOVLB  0
0250C:  RETLW  00
.................... void ArrayToMem(int * array,int memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
02080:  MOVLB  6
02082:  CLRF   x6E
02084:  MOVF   x6D,W
02086:  SUBWF  x6E,W
02088:  BC    20B6
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
0208A:  MOVF   x6E,W
0208C:  ADDWF  x6C,W
0208E:  MOVWF  x6F
02090:  MOVFF  66B,03
02094:  MOVFF  66A,FE9
02098:  MOVFF  66B,FEA
0209C:  MOVFF  FEF,670
020A0:  MOVWF  x71
020A2:  MOVFF  670,672
020A6:  MOVLB  0
020A8:  RCALL  1FAE
....................       ++array; 
020AA:  MOVLB  6
020AC:  INCF   x6A,F
020AE:  BTFSC  FD8.2
020B0:  INCF   x6B,F
....................    } 
020B2:  INCF   x6E,F
020B4:  BRA    2084
.................... } 
020B6:  MOVLB  0
020B8:  RETLW  00
.................... void readDevices() 
.................... { 
*
02C00:  MOVLB  6
02C02:  CLRF   x5E
02C04:  CLRF   x5F
02C06:  CLRF   x60
....................    int mempointer=MEM_OFFSET; 
....................    int inputNumber=0; 
....................    int outputNumber=0; 
....................     while(mempointer<30) 
....................     { 
02C08:  MOVF   x5E,W
02C0A:  SUBLW  1D
02C0C:  BNC   2C88
....................       printf("EEPROM at %d=%d\n\r",mempointer,read_eeprom(mempointer)); 
02C0E:  MOVFF  FF2,6B8
02C12:  BCF    FF2.7
02C14:  CLRF   FAA
02C16:  MOVFF  65E,FA9
02C1A:  BCF    FA6.6
02C1C:  BCF    FA6.7
02C1E:  BSF    FA6.0
02C20:  MOVF   FA8,W
02C22:  BTFSC  xB8.7
02C24:  BSF    FF2.7
02C26:  MOVWF  xB9
02C28:  MOVLW  5C
02C2A:  MOVWF  FF6
02C2C:  MOVLW  03
02C2E:  MOVWF  FF7
02C30:  MOVLW  00
02C32:  MOVWF  FF8
02C34:  MOVLW  0A
02C36:  MOVWF  xBA
02C38:  MOVLB  0
02C3A:  CALL   1E74
02C3E:  MOVFF  65E,6BA
02C42:  MOVLW  1F
02C44:  MOVLB  6
02C46:  MOVWF  xBB
02C48:  MOVLB  0
02C4A:  CALL   1ED0
02C4E:  MOVLW  3D
02C50:  MOVLB  6
02C52:  MOVWF  xC0
02C54:  MOVLB  0
02C56:  CALL   1E2E
02C5A:  MOVFF  6B9,6BA
02C5E:  MOVLW  1F
02C60:  MOVLB  6
02C62:  MOVWF  xBB
02C64:  MOVLB  0
02C66:  CALL   1ED0
02C6A:  MOVLW  0A
02C6C:  MOVLB  6
02C6E:  MOVWF  xC0
02C70:  MOVLB  0
02C72:  CALL   1E2E
02C76:  MOVLW  0D
02C78:  MOVLB  6
02C7A:  MOVWF  xC0
02C7C:  MOVLB  0
02C7E:  CALL   1E2E
....................       ++mempointer; 
02C82:  MOVLB  6
02C84:  INCF   x5E,F
....................     } 
02C86:  BRA    2C08
....................     mempointer=MEM_OFFSET; 
02C88:  CLRF   x5E
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02C8A:  MOVFF  FF2,6B8
02C8E:  BCF    FF2.7
02C90:  CLRF   FAA
02C92:  MOVFF  65E,FA9
02C96:  BCF    FA6.6
02C98:  BCF    FA6.7
02C9A:  BSF    FA6.0
02C9C:  MOVF   FA8,W
02C9E:  BTFSC  xB8.7
02CA0:  BSF    FF2.7
02CA2:  SUBLW  FF
02CA4:  BTFSC  FD8.2
02CA6:  BRA    344A
....................       switch(read_eeprom(mempointer)) 
....................       { 
02CA8:  MOVFF  FF2,6B8
02CAC:  BCF    FF2.7
02CAE:  CLRF   FAA
02CB0:  MOVFF  65E,FA9
02CB4:  BCF    FA6.6
02CB6:  BCF    FA6.7
02CB8:  BSF    FA6.0
02CBA:  MOVF   FA8,W
02CBC:  BTFSC  xB8.7
02CBE:  BSF    FF2.7
02CC0:  XORLW  01
02CC2:  MOVLB  0
02CC4:  BZ    2CEC
02CC6:  XORLW  01
02CC8:  BTFSC  FD8.2
02CCA:  BRA    2E0A
02CCC:  XORLW  02
02CCE:  BTFSC  FD8.2
02CD0:  BRA    2EE8
02CD2:  XORLW  01
02CD4:  BTFSC  FD8.2
02CD6:  BRA    2FD2
02CD8:  XORLW  66
02CDA:  BTFSC  FD8.2
02CDC:  BRA    3122
02CDE:  XORLW  03
02CE0:  BTFSC  FD8.2
02CE2:  BRA    320E
02CE4:  XORLW  02
02CE6:  BTFSC  FD8.2
02CE8:  BRA    337E
02CEA:  BRA    3446
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
02CEC:  MOVLW  6E
02CEE:  MOVWF  FF6
02CF0:  MOVLW  03
02CF2:  MOVWF  FF7
02CF4:  MOVLW  00
02CF6:  MOVWF  FF8
02CF8:  CALL   2222
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02CFC:  MOVLB  6
02CFE:  INCF   x5E,F
02D00:  MOVFF  FF2,6B8
02D04:  BCF    FF2.7
02D06:  CLRF   FAA
02D08:  MOVFF  65E,FA9
02D0C:  BCF    FA6.6
02D0E:  BCF    FA6.7
02D10:  BSF    FA6.0
02D12:  MOVF   FA8,W
02D14:  BTFSC  xB8.7
02D16:  BSF    FF2.7
02D18:  MOVWF  x61
02D1A:  INCF   x5E,F
02D1C:  MOVFF  FF2,6B9
02D20:  BCF    FF2.7
02D22:  CLRF   FAA
02D24:  MOVFF  65E,FA9
02D28:  BCF    FA6.6
02D2A:  BCF    FA6.7
02D2C:  BSF    FA6.0
02D2E:  MOVF   FA8,W
02D30:  BTFSC  xB9.7
02D32:  BSF    FF2.7
02D34:  MOVWF  x62
02D36:  INCF   x5E,F
02D38:  MOVFF  FF2,6BA
02D3C:  BCF    FF2.7
02D3E:  CLRF   FAA
02D40:  MOVFF  65E,FA9
02D44:  BCF    FA6.6
02D46:  BCF    FA6.7
02D48:  BSF    FA6.0
02D4A:  MOVF   FA8,W
02D4C:  BTFSC  xBA.7
02D4E:  BSF    FF2.7
02D50:  MOVWF  x63
....................             printf("on/off %d %d %d",on_adr,off_adr,real_button); 
02D52:  MOVLW  86
02D54:  MOVWF  FF6
02D56:  MOVLW  03
02D58:  MOVWF  FF7
02D5A:  MOVLW  00
02D5C:  MOVWF  FF8
02D5E:  MOVLW  07
02D60:  MOVWF  xBA
02D62:  MOVLB  0
02D64:  CALL   1E74
02D68:  MOVFF  661,6BA
02D6C:  MOVLW  1F
02D6E:  MOVLB  6
02D70:  MOVWF  xBB
02D72:  MOVLB  0
02D74:  CALL   1ED0
02D78:  MOVLW  20
02D7A:  MOVLB  6
02D7C:  MOVWF  xC0
02D7E:  MOVLB  0
02D80:  CALL   1E2E
02D84:  MOVFF  662,6BA
02D88:  MOVLW  1F
02D8A:  MOVLB  6
02D8C:  MOVWF  xBB
02D8E:  MOVLB  0
02D90:  CALL   1ED0
02D94:  MOVLW  20
02D96:  MOVLB  6
02D98:  MOVWF  xC0
02D9A:  MOVLB  0
02D9C:  CALL   1E2E
02DA0:  MOVFF  663,6BA
02DA4:  MOVLW  1F
02DA6:  MOVLB  6
02DA8:  MOVWF  xBB
02DAA:  MOVLB  0
02DAC:  CALL   1ED0
02DB0:  CLRF   1B
02DB2:  BTFSC  FF2.7
02DB4:  BSF    1B.7
02DB6:  BCF    FF2.7
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02DB8:  MOVLB  6
02DBA:  CLRF   xD7
02DBC:  MOVFF  65F,6D6
02DC0:  CLRF   xD9
02DC2:  MOVLW  21
02DC4:  MOVWF  xD8
02DC6:  MOVLB  0
02DC8:  CALL   0442
02DCC:  BTFSC  1B.7
02DCE:  BSF    FF2.7
02DD0:  MOVFF  02,03
02DD4:  MOVF   01,W
02DD6:  ADDLW  40
02DD8:  MOVWF  01
02DDA:  MOVLW  01
02DDC:  ADDWFC 03,F
02DDE:  MOVFF  01,6B8
02DE2:  MOVFF  03,6B9
02DE6:  MOVFF  661,6BA
02DEA:  MOVFF  662,6BB
02DEE:  MOVFF  03,6BD
02DF2:  MOVFF  01,6BC
02DF6:  MOVFF  663,6BE
02DFA:  MOVLB  0
02DFC:  GOTO   224A
....................             ++inputNumber; 
02E00:  MOVLB  6
02E02:  INCF   x5F,F
....................             ++mempointer; 
02E04:  INCF   x5E,F
....................          break; 
02E06:  MOVLB  0
02E08:  BRA    3446
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
02E0A:  MOVLW  96
02E0C:  MOVWF  FF6
02E0E:  MOVLW  03
02E10:  MOVWF  FF7
02E12:  MOVLW  00
02E14:  MOVWF  FF8
02E16:  CALL   2222
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
02E1A:  MOVLB  6
02E1C:  INCF   x5E,F
02E1E:  MOVFF  FF2,6B8
02E22:  BCF    FF2.7
02E24:  CLRF   FAA
02E26:  MOVFF  65E,FA9
02E2A:  BCF    FA6.6
02E2C:  BCF    FA6.7
02E2E:  BSF    FA6.0
02E30:  MOVF   FA8,W
02E32:  BTFSC  xB8.7
02E34:  BSF    FF2.7
02E36:  MOVWF  x64
....................             on_adr=read_eeprom(++mempointer); 
02E38:  INCF   x5E,F
02E3A:  MOVFF  FF2,6B8
02E3E:  BCF    FF2.7
02E40:  CLRF   FAA
02E42:  MOVFF  65E,FA9
02E46:  BCF    FA6.6
02E48:  BCF    FA6.7
02E4A:  BSF    FA6.0
02E4C:  MOVF   FA8,W
02E4E:  BTFSC  xB8.7
02E50:  BSF    FF2.7
02E52:  MOVWF  x61
....................             off_adr=read_eeprom(++mempointer); 
02E54:  INCF   x5E,F
02E56:  MOVFF  FF2,6B8
02E5A:  BCF    FF2.7
02E5C:  CLRF   FAA
02E5E:  MOVFF  65E,FA9
02E62:  BCF    FA6.6
02E64:  BCF    FA6.7
02E66:  BSF    FA6.0
02E68:  MOVF   FA8,W
02E6A:  BTFSC  xB8.7
02E6C:  BSF    FF2.7
02E6E:  MOVWF  x62
....................             real_button=read_eeprom(++mempointer); 
02E70:  INCF   x5E,F
02E72:  MOVFF  FF2,6B8
02E76:  BCF    FF2.7
02E78:  CLRF   FAA
02E7A:  MOVFF  65E,FA9
02E7E:  BCF    FA6.6
02E80:  BCF    FA6.7
02E82:  BSF    FA6.0
02E84:  MOVF   FA8,W
02E86:  BTFSC  xB8.7
02E88:  BSF    FF2.7
02E8A:  MOVWF  x63
02E8C:  CLRF   1B
02E8E:  BTFSC  FF2.7
02E90:  BSF    1B.7
02E92:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
02E94:  CLRF   xD7
02E96:  MOVFF  65F,6D6
02E9A:  CLRF   xD9
02E9C:  MOVLW  21
02E9E:  MOVWF  xD8
02EA0:  MOVLB  0
02EA2:  CALL   0442
02EA6:  BTFSC  1B.7
02EA8:  BSF    FF2.7
02EAA:  MOVFF  02,03
02EAE:  MOVF   01,W
02EB0:  ADDLW  40
02EB2:  MOVWF  01
02EB4:  MOVLW  01
02EB6:  ADDWFC 03,F
02EB8:  MOVFF  01,6B8
02EBC:  MOVFF  03,6B9
02EC0:  MOVFF  664,6BA
02EC4:  MOVFF  661,6BB
02EC8:  MOVFF  662,6BC
02ECC:  MOVFF  03,6BE
02ED0:  MOVFF  01,6BD
02ED4:  MOVFF  663,6BF
02ED8:  MOVLB  0
02EDA:  GOTO   22A4
....................             ++inputNumber; 
02EDE:  MOVLB  6
02EE0:  INCF   x5F,F
....................             ++mempointer; 
02EE2:  INCF   x5E,F
....................          break; 
02EE4:  MOVLB  0
02EE6:  BRA    3446
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
02EE8:  MOVLW  AE
02EEA:  MOVWF  FF6
02EEC:  MOVLW  03
02EEE:  MOVWF  FF7
02EF0:  MOVLW  00
02EF2:  MOVWF  FF8
02EF4:  CALL   2222
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
02EF8:  MOVLB  6
02EFA:  INCF   x5E,F
02EFC:  MOVFF  FF2,6B8
02F00:  BCF    FF2.7
02F02:  CLRF   FAA
02F04:  MOVFF  65E,FA9
02F08:  BCF    FA6.6
02F0A:  BCF    FA6.7
02F0C:  BSF    FA6.0
02F0E:  MOVF   FA8,W
02F10:  BTFSC  xB8.7
02F12:  BSF    FF2.7
02F14:  MOVWF  x61
....................             off_adr=read_eeprom(++mempointer); 
02F16:  INCF   x5E,F
02F18:  MOVFF  FF2,6B8
02F1C:  BCF    FF2.7
02F1E:  CLRF   FAA
02F20:  MOVFF  65E,FA9
02F24:  BCF    FA6.6
02F26:  BCF    FA6.7
02F28:  BSF    FA6.0
02F2A:  MOVF   FA8,W
02F2C:  BTFSC  xB8.7
02F2E:  BSF    FF2.7
02F30:  MOVWF  x62
....................             real_button=read_eeprom(++mempointer); 
02F32:  INCF   x5E,F
02F34:  MOVFF  FF2,6B8
02F38:  BCF    FF2.7
02F3A:  CLRF   FAA
02F3C:  MOVFF  65E,FA9
02F40:  BCF    FA6.6
02F42:  BCF    FA6.7
02F44:  BSF    FA6.0
02F46:  MOVF   FA8,W
02F48:  BTFSC  xB8.7
02F4A:  BSF    FF2.7
02F4C:  MOVWF  x63
....................             int1 repeat=read_eeprom(++mempointer); 
02F4E:  INCF   x5E,F
02F50:  MOVFF  FF2,6B8
02F54:  BCF    FF2.7
02F56:  CLRF   FAA
02F58:  MOVFF  65E,FA9
02F5C:  BCF    FA6.6
02F5E:  BCF    FA6.7
02F60:  BSF    FA6.0
02F62:  MOVF   FA8,W
02F64:  BTFSC  xB8.7
02F66:  BSF    FF2.7
02F68:  MOVWF  01
02F6A:  BCF    x65.0
02F6C:  BTFSC  01.0
02F6E:  BSF    x65.0
02F70:  CLRF   1B
02F72:  BTFSC  FF2.7
02F74:  BSF    1B.7
02F76:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
02F78:  CLRF   xD7
02F7A:  MOVFF  65F,6D6
02F7E:  CLRF   xD9
02F80:  MOVLW  21
02F82:  MOVWF  xD8
02F84:  MOVLB  0
02F86:  CALL   0442
02F8A:  BTFSC  1B.7
02F8C:  BSF    FF2.7
02F8E:  MOVFF  02,03
02F92:  MOVF   01,W
02F94:  ADDLW  40
02F96:  MOVWF  01
02F98:  MOVLW  01
02F9A:  ADDWFC 03,F
02F9C:  MOVFF  01,6B8
02FA0:  MOVLB  6
02FA2:  MOVFF  03,6B9
02FA6:  MOVLW  00
02FA8:  BTFSC  x65.0
02FAA:  MOVLW  01
02FAC:  MOVFF  661,6BB
02FB0:  MOVFF  662,6BC
02FB4:  MOVFF  03,6BE
02FB8:  MOVFF  01,6BD
02FBC:  MOVFF  663,6BF
02FC0:  MOVWF  xC0
02FC2:  MOVLB  0
02FC4:  GOTO   2468
....................             ++inputNumber; 
02FC8:  MOVLB  6
02FCA:  INCF   x5F,F
....................             ++mempointer; 
02FCC:  INCF   x5E,F
....................          break; 
02FCE:  MOVLB  0
02FD0:  BRA    3446
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
02FD2:  MOVLW  C6
02FD4:  MOVWF  FF6
02FD6:  MOVLW  03
02FD8:  MOVWF  FF7
02FDA:  MOVLW  00
02FDC:  MOVWF  FF8
02FDE:  CALL   2222
.................... #endif 
....................  
....................             unsigned int start_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
02FE2:  MOVLW  06
02FE4:  MOVLB  6
02FE6:  MOVWF  xB9
02FE8:  MOVLW  66
02FEA:  MOVWF  xB8
02FEC:  MOVFF  65E,6BA
02FF0:  MOVLW  08
02FF2:  MOVWF  xBB
02FF4:  MOVLB  0
02FF6:  CALL   24CA
....................             mempointer+=8; 
02FFA:  MOVLW  08
02FFC:  MOVLB  6
02FFE:  ADDWF  x5E,F
....................             unsigned int stop_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
03000:  MOVLW  06
03002:  MOVWF  xB9
03004:  MOVLW  66
03006:  MOVWF  xB8
03008:  MOVFF  65E,6BA
0300C:  MOVLW  08
0300E:  MOVWF  xBB
03010:  MOVLB  0
03012:  CALL   24CA
....................             mempointer+=8;           
03016:  MOVLW  08
03018:  MOVLB  6
0301A:  ADDWF  x5E,F
....................             unsigned int out_on=read_eeprom(++mempointer); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
0301C:  INCF   x5E,F
0301E:  MOVFF  FF2,6B8
03022:  BCF    FF2.7
03024:  CLRF   FAA
03026:  MOVFF  65E,FA9
0302A:  BCF    FA6.6
0302C:  BCF    FA6.7
0302E:  BSF    FA6.0
03030:  MOVF   FA8,W
03032:  BTFSC  xB8.7
03034:  BSF    FF2.7
03036:  MOVWF  x76
03038:  INCF   x5E,F
0303A:  MOVFF  FF2,6B9
0303E:  BCF    FF2.7
03040:  CLRF   FAA
03042:  MOVFF  65E,FA9
03046:  BCF    FA6.6
03048:  BCF    FA6.7
0304A:  BSF    FA6.0
0304C:  MOVF   FA8,W
0304E:  BTFSC  xB9.7
03050:  BSF    FF2.7
03052:  MOVWF  x77
03054:  INCF   x5E,F
03056:  MOVFF  FF2,6BA
0305A:  BCF    FF2.7
0305C:  CLRF   FAA
0305E:  MOVFF  65E,FA9
03062:  BCF    FA6.6
03064:  BCF    FA6.7
03066:  BSF    FA6.0
03068:  MOVF   FA8,W
0306A:  BTFSC  xBA.7
0306C:  BSF    FF2.7
0306E:  MOVWF  x78
03070:  INCF   x5E,F
03072:  MOVFF  FF2,6BB
03076:  BCF    FF2.7
03078:  CLRF   FAA
0307A:  MOVFF  65E,FA9
0307E:  BCF    FA6.6
03080:  BCF    FA6.7
03082:  BSF    FA6.0
03084:  MOVF   FA8,W
03086:  BTFSC  xBB.7
03088:  BSF    FF2.7
0308A:  CLRF   x7A
0308C:  MOVWF  x79
....................             timeToAct<<=8; 
0308E:  MOVFF  679,67A
03092:  CLRF   x79
....................             timeToAct|=read_eeprom(++mempointer); 
03094:  INCF   x5E,F
03096:  MOVFF  FF2,6B8
0309A:  BCF    FF2.7
0309C:  CLRF   FAA
0309E:  MOVFF  65E,FA9
030A2:  BCF    FA6.6
030A4:  BCF    FA6.7
030A6:  BSF    FA6.0
030A8:  MOVF   FA8,W
030AA:  BTFSC  xB8.7
030AC:  BSF    FF2.7
030AE:  IORWF  x79,F
030B0:  CLRF   1B
030B2:  BTFSC  FF2.7
030B4:  BSF    1B.7
030B6:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
030B8:  CLRF   xD7
030BA:  MOVFF  65F,6D6
030BE:  CLRF   xD9
030C0:  MOVLW  21
030C2:  MOVWF  xD8
030C4:  MOVLB  0
030C6:  CALL   0442
030CA:  BTFSC  1B.7
030CC:  BSF    FF2.7
030CE:  MOVFF  02,03
030D2:  MOVF   01,W
030D4:  ADDLW  40
030D6:  MOVWF  01
030D8:  MOVLW  01
030DA:  ADDWFC 03,F
030DC:  MOVFF  01,6B8
030E0:  MOVLB  6
030E2:  MOVFF  03,6B9
030E6:  MOVLW  06
030E8:  MOVWF  xBB
030EA:  MOVLW  66
030EC:  MOVWF  xBA
030EE:  MOVLW  06
030F0:  MOVWF  xBD
030F2:  MOVLW  6E
030F4:  MOVWF  xBC
030F6:  MOVFF  676,6BE
030FA:  MOVFF  677,6BF
030FE:  MOVFF  03,6C1
03102:  MOVFF  01,6C0
03106:  MOVFF  678,6C2
0310A:  MOVFF  67A,6C4
0310E:  MOVFF  679,6C3
03112:  MOVLB  0
03114:  GOTO   254E
....................             ++inputNumber; 
03118:  MOVLB  6
0311A:  INCF   x5F,F
....................             ++mempointer; 
0311C:  INCF   x5E,F
....................          break; 
0311E:  MOVLB  0
03120:  BRA    3446
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
03122:  MOVLW  D6
03124:  MOVWF  FF6
03126:  MOVLW  03
03128:  MOVWF  FF7
0312A:  MOVLW  00
0312C:  MOVWF  FF8
0312E:  CALL   2222
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
03132:  MOVLW  06
03134:  MOVLB  6
03136:  MOVWF  xB9
03138:  MOVLW  66
0313A:  MOVWF  xB8
0313C:  MOVFF  65E,6BA
03140:  MOVLW  08
03142:  MOVWF  xBB
03144:  MOVLB  0
03146:  CALL   24CA
....................             mempointer+=8; 
0314A:  MOVLW  08
0314C:  MOVLB  6
0314E:  ADDWF  x5E,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
03150:  MOVLW  06
03152:  MOVWF  xB9
03154:  MOVLW  66
03156:  MOVWF  xB8
03158:  MOVFF  65E,6BA
0315C:  MOVLW  08
0315E:  MOVWF  xBB
03160:  MOVLB  0
03162:  CALL   24CA
....................             mempointer+=8;   
03166:  MOVLW  08
03168:  MOVLB  6
0316A:  ADDWF  x5E,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(start_adr,mempointer,8); 
0316C:  MOVLW  06
0316E:  MOVWF  xB9
03170:  MOVLW  66
03172:  MOVWF  xB8
03174:  MOVFF  65E,6BA
03178:  MOVLW  08
0317A:  MOVWF  xBB
0317C:  MOVLB  0
0317E:  CALL   24CA
....................             mempointer+=8;   
03182:  MOVLW  08
03184:  MOVLB  6
03186:  ADDWF  x5E,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
03188:  INCF   x5E,F
0318A:  MOVFF  FF2,6B8
0318E:  BCF    FF2.7
03190:  CLRF   FAA
03192:  MOVFF  65E,FA9
03196:  BCF    FA6.6
03198:  BCF    FA6.7
0319A:  BSF    FA6.0
0319C:  MOVF   FA8,W
0319E:  BTFSC  xB8.7
031A0:  BSF    FF2.7
031A2:  MOVWF  x93
031A4:  CLRF   1B
031A6:  BTFSC  FF2.7
031A8:  BSF    1B.7
031AA:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
031AC:  CLRF   xD7
031AE:  MOVFF  660,6D6
031B2:  CLRF   xD9
031B4:  MOVLW  2F
031B6:  MOVWF  xD8
031B8:  MOVLB  0
031BA:  CALL   0442
031BE:  BTFSC  1B.7
031C0:  BSF    FF2.7
031C2:  MOVFF  02,03
031C6:  MOVF   01,W
031C8:  ADDLW  8A
031CA:  MOVWF  01
031CC:  MOVLW  02
031CE:  ADDWFC 03,F
031D0:  MOVFF  01,6B8
031D4:  MOVLB  6
031D6:  MOVFF  03,6B9
031DA:  MOVLW  06
031DC:  MOVWF  xBB
031DE:  MOVLW  7B
031E0:  MOVWF  xBA
031E2:  MOVLW  06
031E4:  MOVWF  xBD
031E6:  MOVLW  83
031E8:  MOVWF  xBC
031EA:  MOVLW  06
031EC:  MOVWF  xBF
031EE:  MOVLW  8B
031F0:  MOVWF  xBE
031F2:  MOVFF  03,6C1
031F6:  MOVFF  01,6C0
031FA:  MOVFF  693,6C2
031FE:  MOVLB  0
03200:  GOTO   2744
....................             ++outputNumber; 
03204:  MOVLB  6
03206:  INCF   x60,F
....................             ++mempointer; 
03208:  INCF   x5E,F
....................          break; 
0320A:  MOVLB  0
0320C:  BRA    3446
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
0320E:  MOVLW  EA
03210:  MOVWF  FF6
03212:  MOVLW  03
03214:  MOVWF  FF7
03216:  MOVLW  00
03218:  MOVWF  FF8
0321A:  CALL   2222
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
0321E:  MOVLW  06
03220:  MOVLB  6
03222:  MOVWF  xB9
03224:  MOVLW  94
03226:  MOVWF  xB8
03228:  MOVFF  65E,6BA
0322C:  MOVLW  08
0322E:  MOVWF  xBB
03230:  MOVLB  0
03232:  CALL   24CA
....................             mempointer+=8; 
03236:  MOVLW  08
03238:  MOVLB  6
0323A:  ADDWF  x5E,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
0323C:  MOVLW  06
0323E:  MOVWF  xB9
03240:  MOVLW  9C
03242:  MOVWF  xB8
03244:  MOVFF  65E,6BA
03248:  MOVLW  08
0324A:  MOVWF  xBB
0324C:  MOVLB  0
0324E:  CALL   24CA
....................             mempointer+=8;   
03252:  MOVLW  08
03254:  MOVLB  6
03256:  ADDWF  x5E,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
03258:  MOVLW  06
0325A:  MOVWF  xB9
0325C:  MOVLW  A4
0325E:  MOVWF  xB8
03260:  MOVFF  65E,6BA
03264:  MOVLW  08
03266:  MOVWF  xBB
03268:  MOVLB  0
0326A:  CALL   24CA
....................             mempointer+=8;   
0326E:  MOVLW  08
03270:  MOVLB  6
03272:  ADDWF  x5E,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
03274:  MOVLW  06
03276:  MOVWF  xB9
03278:  MOVLW  AC
0327A:  MOVWF  xB8
0327C:  MOVFF  65E,6BA
03280:  MOVLW  08
03282:  MOVWF  xBB
03284:  MOVLB  0
03286:  CALL   24CA
....................             mempointer+=8; 
0328A:  MOVLW  08
0328C:  MOVLB  6
0328E:  ADDWF  x5E,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
03290:  INCF   x5E,F
03292:  MOVFF  FF2,6B8
03296:  BCF    FF2.7
03298:  CLRF   FAA
0329A:  MOVFF  65E,FA9
0329E:  BCF    FA6.6
032A0:  BCF    FA6.7
032A2:  BSF    FA6.0
032A4:  MOVF   FA8,W
032A6:  BTFSC  xB8.7
032A8:  BSF    FF2.7
032AA:  MOVWF  xB4
032AC:  INCF   x5E,F
032AE:  MOVFF  FF2,6B9
032B2:  BCF    FF2.7
032B4:  CLRF   FAA
032B6:  MOVFF  65E,FA9
032BA:  BCF    FA6.6
032BC:  BCF    FA6.7
032BE:  BSF    FA6.0
032C0:  MOVF   FA8,W
032C2:  BTFSC  xB9.7
032C4:  BSF    FF2.7
032C6:  MOVWF  xB5
032C8:  INCF   x5E,F
032CA:  MOVFF  FF2,6BA
032CE:  BCF    FF2.7
032D0:  CLRF   FAA
032D2:  MOVFF  65E,FA9
032D6:  BCF    FA6.6
032D8:  BCF    FA6.7
032DA:  BSF    FA6.0
032DC:  MOVF   FA8,W
032DE:  BTFSC  xBA.7
032E0:  BSF    FF2.7
032E2:  MOVWF  xB6
032E4:  INCF   x5E,F
032E6:  MOVFF  FF2,6BB
032EA:  BCF    FF2.7
032EC:  CLRF   FAA
032EE:  MOVFF  65E,FA9
032F2:  BCF    FA6.6
032F4:  BCF    FA6.7
032F6:  BSF    FA6.0
032F8:  MOVF   FA8,W
032FA:  BTFSC  xBB.7
032FC:  BSF    FF2.7
032FE:  MOVWF  xB7
03300:  CLRF   1B
03302:  BTFSC  FF2.7
03304:  BSF    1B.7
03306:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
03308:  CLRF   xD7
0330A:  MOVFF  660,6D6
0330E:  CLRF   xD9
03310:  MOVLW  2F
03312:  MOVWF  xD8
03314:  MOVLB  0
03316:  CALL   0442
0331A:  BTFSC  1B.7
0331C:  BSF    FF2.7
0331E:  MOVFF  02,03
03322:  MOVF   01,W
03324:  ADDLW  8A
03326:  MOVWF  01
03328:  MOVLW  02
0332A:  ADDWFC 03,F
0332C:  MOVFF  01,6B8
03330:  MOVLB  6
03332:  MOVFF  03,6B9
03336:  MOVLW  06
03338:  MOVWF  xBB
0333A:  MOVLW  94
0333C:  MOVWF  xBA
0333E:  MOVLW  06
03340:  MOVWF  xBD
03342:  MOVLW  9C
03344:  MOVWF  xBC
03346:  MOVLW  06
03348:  MOVWF  xBF
0334A:  MOVLW  A4
0334C:  MOVWF  xBE
0334E:  MOVLW  06
03350:  MOVWF  xC1
03352:  MOVLW  AC
03354:  MOVWF  xC0
03356:  MOVFF  03,6C3
0335A:  MOVFF  01,6C2
0335E:  MOVFF  6B4,6C4
03362:  MOVFF  6B5,6C5
03366:  MOVFF  6B6,6C6
0336A:  MOVFF  6B7,6C7
0336E:  MOVLB  0
03370:  GOTO   28C8
....................             ++outputNumber; 
03374:  MOVLB  6
03376:  INCF   x60,F
....................             ++mempointer; 
03378:  INCF   x5E,F
....................          break; 
0337A:  MOVLB  0
0337C:  BRA    3446
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
0337E:  MOVLW  00
03380:  MOVWF  FF6
03382:  MOVLW  04
03384:  MOVWF  FF7
03386:  MOVLW  00
03388:  MOVWF  FF8
0338A:  CALL   2222
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
0338E:  MOVLW  06
03390:  MOVLB  6
03392:  MOVWF  xB9
03394:  MOVLW  83
03396:  MOVWF  xB8
03398:  MOVFF  65E,6BA
0339C:  MOVLW  08
0339E:  MOVWF  xBB
033A0:  MOVLB  0
033A2:  CALL   24CA
....................             mempointer+=8;   
033A6:  MOVLW  08
033A8:  MOVLB  6
033AA:  ADDWF  x5E,F
....................             memToArray(_off_adr,mempointer,8); 
033AC:  MOVLW  06
033AE:  MOVWF  xB9
033B0:  MOVLW  8B
033B2:  MOVWF  xB8
033B4:  MOVFF  65E,6BA
033B8:  MOVLW  08
033BA:  MOVWF  xBB
033BC:  MOVLB  0
033BE:  CALL   24CA
....................             mempointer+=8;   
033C2:  MOVLW  08
033C4:  MOVLB  6
033C6:  ADDWF  x5E,F
....................             output_pin=read_eeprom(++mempointer); 
033C8:  INCF   x5E,F
033CA:  MOVFF  FF2,6B8
033CE:  BCF    FF2.7
033D0:  CLRF   FAA
033D2:  MOVFF  65E,FA9
033D6:  BCF    FA6.6
033D8:  BCF    FA6.7
033DA:  BSF    FA6.0
033DC:  MOVF   FA8,W
033DE:  BTFSC  xB8.7
033E0:  BSF    FF2.7
033E2:  MOVWF  x93
033E4:  CLRF   1B
033E6:  BTFSC  FF2.7
033E8:  BSF    1B.7
033EA:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
033EC:  CLRF   xD7
033EE:  MOVFF  660,6D6
033F2:  CLRF   xD9
033F4:  MOVLW  2F
033F6:  MOVWF  xD8
033F8:  MOVLB  0
033FA:  CALL   0442
033FE:  BTFSC  1B.7
03400:  BSF    FF2.7
03402:  MOVFF  02,03
03406:  MOVF   01,W
03408:  ADDLW  8A
0340A:  MOVWF  01
0340C:  MOVLW  02
0340E:  ADDWFC 03,F
03410:  MOVFF  01,6B8
03414:  MOVLB  6
03416:  MOVFF  03,6B9
0341A:  MOVLW  06
0341C:  MOVWF  xBB
0341E:  MOVLW  83
03420:  MOVWF  xBA
03422:  MOVLW  06
03424:  MOVWF  xBD
03426:  MOVLW  8B
03428:  MOVWF  xBC
0342A:  MOVFF  03,6BF
0342E:  MOVFF  01,6BE
03432:  MOVFF  693,6C0
03436:  MOVLB  0
03438:  GOTO   2B0A
....................             ++outputNumber; 
0343C:  MOVLB  6
0343E:  INCF   x60,F
....................             ++mempointer; 
03440:  INCF   x5E,F
....................          break; 
03442:  MOVLB  0
03444:  BRA    3446
....................       } 
....................     
....................    } 
03446:  MOVLB  6
03448:  BRA    2C8A
....................    mydevices.numberOfInputs=inputNumber; 
0344A:  MOVFF  65F,13E
....................    mydevices.numberOfOutputs=outputNumber; 
0344E:  MOVFF  660,13F
....................     
.................... } 
03452:  MOVLB  0
03454:  GOTO   83DE (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
....................    _write_eeprom(++writeMemPointer,dim_adr); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    ++writeMemPointer; 
....................     
.................... } 
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
0203A:  MOVFF  639,671
0203E:  MOVLW  01
02040:  MOVLB  6
02042:  MOVWF  x72
02044:  MOVLB  0
02046:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,on_adr); 
02048:  MOVLB  6
0204A:  INCF   x39,F
0204C:  MOVFF  639,671
02050:  MOVFF  65E,672
02054:  MOVLB  0
02056:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,off_adr); 
02058:  MOVLB  6
0205A:  INCF   x39,F
0205C:  MOVFF  639,671
02060:  MOVFF  65F,672
02064:  MOVLB  0
02066:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,real_button); 
02068:  MOVLB  6
0206A:  INCF   x39,F
0206C:  MOVFF  639,671
02070:  MOVFF  660,672
02074:  MOVLB  0
02076:  RCALL  1FAE
....................    ++writeMemPointer; 
02078:  MOVLB  6
0207A:  INCF   x39,F
.................... } 
0207C:  MOVLB  0
0207E:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
*
02112:  MOVFF  639,671
02116:  MOVLW  02
02118:  MOVLB  6
0211A:  MOVWF  x72
0211C:  MOVLB  0
0211E:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,on_adr); 
02120:  MOVLB  6
02122:  INCF   x39,F
02124:  MOVFF  639,671
02128:  MOVFF  65E,672
0212C:  MOVLB  0
0212E:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,off_adr); 
02130:  MOVLB  6
02132:  INCF   x39,F
02134:  MOVFF  639,671
02138:  MOVFF  65F,672
0213C:  MOVLB  0
0213E:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,real_button); 
02140:  MOVLB  6
02142:  INCF   x39,F
02144:  MOVFF  639,671
02148:  MOVFF  660,672
0214C:  MOVLB  0
0214E:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,repeat); 
02150:  MOVLB  6
02152:  INCF   x39,F
02154:  MOVFF  639,671
02158:  MOVFF  661,672
0215C:  MOVLB  0
0215E:  RCALL  1FAE
....................     
....................    ++writeMemPointer; 
02160:  MOVLB  6
02162:  INCF   x39,F
.................... } 
02164:  MOVLB  0
02166:  RETLW  00
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
....................    ++writeMemPointer; 
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(on_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(off_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,output_pin); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
020BA:  MOVFF  639,671
020BE:  MOVLW  64
020C0:  MOVLB  6
020C2:  MOVWF  x72
020C4:  MOVLB  0
020C6:  RCALL  1FAE
....................    ++writeMemPointer; 
020C8:  MOVLB  6
020CA:  INCF   x39,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
020CC:  MOVFF  65F,66B
020D0:  MOVFF  65E,66A
020D4:  MOVFF  639,66C
020D8:  MOVLW  08
020DA:  MOVWF  x6D
020DC:  MOVLB  0
020DE:  RCALL  2080
....................    writeMemPointer+=8; 
020E0:  MOVLW  08
020E2:  MOVLB  6
020E4:  ADDWF  x39,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
020E6:  MOVFF  661,66B
020EA:  MOVFF  660,66A
020EE:  MOVFF  639,66C
020F2:  MOVWF  x6D
020F4:  MOVLB  0
020F6:  RCALL  2080
....................    writeMemPointer+=8; 
020F8:  MOVLW  08
020FA:  MOVLB  6
020FC:  ADDWF  x39,F
....................    _write_eeprom(writeMemPointer,output_pin); 
020FE:  MOVFF  639,671
02102:  MOVFF  662,672
02106:  MOVLB  0
02108:  RCALL  1FAE
....................    ++writeMemPointer; 
0210A:  MOVLB  6
0210C:  INCF   x39,F
.................... } 
0210E:  MOVLB  0
02110:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
*
02168:  MOVFF  639,671
0216C:  MOVLW  66
0216E:  MOVLB  6
02170:  MOVWF  x72
02172:  MOVLB  0
02174:  RCALL  1FAE
....................    ++writeMemPointer; 
02176:  MOVLB  6
02178:  INCF   x39,F
....................    ArrayToMem(up_adr,writeMemPointer,8); 
0217A:  MOVFF  65F,66B
0217E:  MOVFF  65E,66A
02182:  MOVFF  639,66C
02186:  MOVLW  08
02188:  MOVWF  x6D
0218A:  MOVLB  0
0218C:  RCALL  2080
....................    writeMemPointer+=8; 
0218E:  MOVLW  08
02190:  MOVLB  6
02192:  ADDWF  x39,F
....................    ArrayToMem(down_adr,writeMemPointer,8); 
02194:  MOVFF  661,66B
02198:  MOVFF  660,66A
0219C:  MOVFF  639,66C
021A0:  MOVWF  x6D
021A2:  MOVLB  0
021A4:  RCALL  2080
....................    writeMemPointer+=8; 
021A6:  MOVLW  08
021A8:  MOVLB  6
021AA:  ADDWF  x39,F
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
021AC:  MOVFF  663,66B
021B0:  MOVFF  662,66A
021B4:  MOVFF  639,66C
021B8:  MOVWF  x6D
021BA:  MOVLB  0
021BC:  RCALL  2080
....................    writeMemPointer+=8; 
021BE:  MOVLW  08
021C0:  MOVLB  6
021C2:  ADDWF  x39,F
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
021C4:  MOVFF  665,66B
021C8:  MOVFF  664,66A
021CC:  MOVFF  639,66C
021D0:  MOVWF  x6D
021D2:  MOVLB  0
021D4:  RCALL  2080
....................    writeMemPointer+=8; 
021D6:  MOVLW  08
021D8:  MOVLB  6
021DA:  ADDWF  x39,F
....................    _write_eeprom(writeMemPointer,up_output_pin); 
021DC:  MOVFF  639,671
021E0:  MOVFF  666,672
021E4:  MOVLB  0
021E6:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
021E8:  MOVLB  6
021EA:  INCF   x39,F
021EC:  MOVFF  639,671
021F0:  MOVFF  667,672
021F4:  MOVLB  0
021F6:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
021F8:  MOVLB  6
021FA:  INCF   x39,F
021FC:  MOVFF  639,671
02200:  MOVFF  668,672
02204:  MOVLB  0
02206:  RCALL  1FAE
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
02208:  MOVLB  6
0220A:  INCF   x39,F
0220C:  MOVFF  639,671
02210:  MOVFF  669,672
02214:  MOVLB  0
02216:  RCALL  1FAE
....................    ++writeMemPointer; 
02218:  MOVLB  6
0221A:  INCF   x39,F
.................... } 
0221C:  MOVLB  0
0221E:  GOTO   83DA (RETURN)
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    ArrayToMem(start_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,out_on); 
....................    _write_eeprom(++writeMemPointer,out_off); 
....................    _write_eeprom(++writeMemPointer,type); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
....................    ++writeMemPointer; 
.................... } 
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
0087E:  MOVLW  06
00880:  MOVLB  6
00882:  ADDWF  xD8,W
00884:  MOVWF  FE9
00886:  MOVLW  00
00888:  ADDWFC xD9,W
0088A:  MOVWF  FEA
0088C:  MOVLW  00
0088E:  BTFSC  FEF.0
00890:  MOVLW  01
00892:  ANDLW  01
00894:  BNZ   0972
00896:  MOVLW  06
00898:  ADDWF  xD8,W
0089A:  MOVWF  FE9
0089C:  MOVLW  00
0089E:  ADDWFC xD9,W
008A0:  MOVWF  FEA
008A2:  MOVLW  00
008A4:  BTFSC  FEF.1
008A6:  MOVLW  01
008A8:  ANDLW  01
008AA:  SUBLW  01
008AC:  BNZ   0972
....................    {    
....................       sw-> previous_state = button_pressed; 
008AE:  MOVLW  06
008B0:  ADDWF  xD8,W
008B2:  MOVWF  FE9
008B4:  MOVLW  00
008B6:  ADDWFC xD9,W
008B8:  MOVWF  FEA
008BA:  BCF    FEF.1
....................       if(sw->outstate==off) 
008BC:  MOVLW  0B
008BE:  ADDWF  xD8,W
008C0:  MOVWF  FE9
008C2:  MOVLW  00
008C4:  ADDWFC xD9,W
008C6:  MOVWF  FEA
008C8:  DECFSZ FEF,W
008CA:  BRA    0916
....................       { 
....................          sw->outstate=on; 
008CC:  MOVLW  0B
008CE:  ADDWF  xD8,W
008D0:  MOVWF  FE9
008D2:  MOVLW  00
008D4:  ADDWFC xD9,W
008D6:  MOVWF  FEA
008D8:  CLRF   FEF
....................          sw->on.value=1; 
008DA:  MOVLW  01
008DC:  ADDWF  xD8,W
008DE:  MOVWF  FE9
008E0:  MOVLW  00
008E2:  ADDWFC xD9,W
008E4:  MOVWF  FEA
008E6:  MOVLW  01
008E8:  MOVWF  FEF
....................          sw->on.needs_update=true; 
008EA:  MOVLW  02
008EC:  ADDWF  xD8,W
008EE:  MOVWF  FE9
008F0:  MOVLW  00
008F2:  ADDWFC xD9,W
008F4:  MOVWF  FEA
008F6:  BSF    FEF.0
....................          sw->off.value=0; 
008F8:  MOVLW  04
008FA:  ADDWF  xD8,W
008FC:  MOVWF  FE9
008FE:  MOVLW  00
00900:  ADDWFC xD9,W
00902:  MOVWF  FEA
00904:  CLRF   FEF
....................          sw->off.needs_update=true; 
00906:  MOVLW  05
00908:  ADDWF  xD8,W
0090A:  MOVWF  FE9
0090C:  MOVLW  00
0090E:  ADDWFC xD9,W
00910:  MOVWF  FEA
00912:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
00914:  BRA    0970
00916:  MOVLW  0B
00918:  ADDWF  xD8,W
0091A:  MOVWF  FE9
0091C:  MOVLW  00
0091E:  ADDWFC xD9,W
00920:  MOVWF  FEA
00922:  MOVF   FEF,F
00924:  BNZ   0970
....................       { 
....................          sw->outstate=off; 
00926:  MOVLW  0B
00928:  ADDWF  xD8,W
0092A:  MOVWF  FE9
0092C:  MOVLW  00
0092E:  ADDWFC xD9,W
00930:  MOVWF  FEA
00932:  MOVLW  01
00934:  MOVWF  FEF
....................          sw->off.value=1; 
00936:  MOVLW  04
00938:  ADDWF  xD8,W
0093A:  MOVWF  FE9
0093C:  MOVLW  00
0093E:  ADDWFC xD9,W
00940:  MOVWF  FEA
00942:  MOVLW  01
00944:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00946:  MOVLW  05
00948:  ADDWF  xD8,W
0094A:  MOVWF  FE9
0094C:  MOVLW  00
0094E:  ADDWFC xD9,W
00950:  MOVWF  FEA
00952:  BSF    FEF.0
....................          sw->on.value=0; 
00954:  MOVLW  01
00956:  ADDWF  xD8,W
00958:  MOVWF  FE9
0095A:  MOVLW  00
0095C:  ADDWFC xD9,W
0095E:  MOVWF  FEA
00960:  CLRF   FEF
....................          sw->on.needs_update=true; 
00962:  MOVLW  02
00964:  ADDWF  xD8,W
00966:  MOVWF  FE9
00968:  MOVLW  00
0096A:  ADDWFC xD9,W
0096C:  MOVWF  FEA
0096E:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
00970:  BRA    0998
00972:  MOVLW  06
00974:  ADDWF  xD8,W
00976:  MOVWF  FE9
00978:  MOVLW  00
0097A:  ADDWFC xD9,W
0097C:  MOVWF  FEA
0097E:  MOVLW  00
00980:  BTFSC  FEF.0
00982:  MOVLW  01
00984:  ANDLW  01
00986:  SUBLW  01
00988:  BNZ   0998
....................       sw-> previous_state = button_depressed; 
0098A:  MOVLW  06
0098C:  ADDWF  xD8,W
0098E:  MOVWF  FE9
00990:  MOVLW  00
00992:  ADDWFC xD9,W
00994:  MOVWF  FEA
00996:  BSF    FEF.1
.................... } 
00998:  MOVLB  0
0099A:  GOTO   0EC0 (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
0099E:  MOVLW  06
009A0:  MOVLB  6
009A2:  ADDWF  xD8,W
009A4:  MOVWF  FE9
009A6:  MOVLW  00
009A8:  ADDWFC xD9,W
009AA:  MOVWF  FEA
009AC:  MOVLW  00
009AE:  BTFSC  FEF.0
009B0:  MOVLW  01
009B2:  ANDLW  01
009B4:  BNZ   0A10
009B6:  MOVLW  07
009B8:  ADDWF  xD8,W
009BA:  MOVWF  FE9
009BC:  MOVLW  00
009BE:  ADDWFC xD9,W
009C0:  MOVWF  FEA
009C2:  DECFSZ FEF,W
009C4:  BRA    0A10
....................    { 
....................          sw->outstate=on; 
009C6:  MOVLW  07
009C8:  ADDWF  xD8,W
009CA:  MOVWF  FE9
009CC:  MOVLW  00
009CE:  ADDWFC xD9,W
009D0:  MOVWF  FEA
009D2:  CLRF   FEF
....................          sw->on.value=1; 
009D4:  MOVLW  01
009D6:  ADDWF  xD8,W
009D8:  MOVWF  FE9
009DA:  MOVLW  00
009DC:  ADDWFC xD9,W
009DE:  MOVWF  FEA
009E0:  MOVLW  01
009E2:  MOVWF  FEF
....................          sw->on.needs_update=true; 
009E4:  MOVLW  02
009E6:  ADDWF  xD8,W
009E8:  MOVWF  FE9
009EA:  MOVLW  00
009EC:  ADDWFC xD9,W
009EE:  MOVWF  FEA
009F0:  BSF    FEF.0
....................          sw->off.value=0; 
009F2:  MOVLW  04
009F4:  ADDWF  xD8,W
009F6:  MOVWF  FE9
009F8:  MOVLW  00
009FA:  ADDWFC xD9,W
009FC:  MOVWF  FEA
009FE:  CLRF   FEF
....................          sw->off.needs_update=true; 
00A00:  MOVLW  05
00A02:  ADDWF  xD8,W
00A04:  MOVWF  FE9
00A06:  MOVLW  00
00A08:  ADDWFC xD9,W
00A0A:  MOVWF  FEA
00A0C:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
00A0E:  BRA    0A82
00A10:  MOVLW  06
00A12:  ADDWF  xD8,W
00A14:  MOVWF  FE9
00A16:  MOVLW  00
00A18:  ADDWFC xD9,W
00A1A:  MOVWF  FEA
00A1C:  MOVLW  00
00A1E:  BTFSC  FEF.0
00A20:  MOVLW  01
00A22:  ANDLW  01
00A24:  SUBLW  01
00A26:  BNZ   0A82
00A28:  MOVLW  07
00A2A:  ADDWF  xD8,W
00A2C:  MOVWF  FE9
00A2E:  MOVLW  00
00A30:  ADDWFC xD9,W
00A32:  MOVWF  FEA
00A34:  MOVF   FEF,F
00A36:  BNZ   0A82
....................    { 
....................          sw->outstate=off; 
00A38:  MOVLW  07
00A3A:  ADDWF  xD8,W
00A3C:  MOVWF  FE9
00A3E:  MOVLW  00
00A40:  ADDWFC xD9,W
00A42:  MOVWF  FEA
00A44:  MOVLW  01
00A46:  MOVWF  FEF
....................          sw->off.value=1; 
00A48:  MOVLW  04
00A4A:  ADDWF  xD8,W
00A4C:  MOVWF  FE9
00A4E:  MOVLW  00
00A50:  ADDWFC xD9,W
00A52:  MOVWF  FEA
00A54:  MOVLW  01
00A56:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00A58:  MOVLW  05
00A5A:  ADDWF  xD8,W
00A5C:  MOVWF  FE9
00A5E:  MOVLW  00
00A60:  ADDWFC xD9,W
00A62:  MOVWF  FEA
00A64:  BSF    FEF.0
....................          sw->on.value=0; 
00A66:  MOVLW  01
00A68:  ADDWF  xD8,W
00A6A:  MOVWF  FE9
00A6C:  MOVLW  00
00A6E:  ADDWFC xD9,W
00A70:  MOVWF  FEA
00A72:  CLRF   FEF
....................          sw->on.needs_update=true; 
00A74:  MOVLW  02
00A76:  ADDWF  xD8,W
00A78:  MOVWF  FE9
00A7A:  MOVLW  00
00A7C:  ADDWFC xD9,W
00A7E:  MOVWF  FEA
00A80:  BSF    FEF.0
....................    } 
.................... } 
00A82:  MOVLB  0
00A84:  GOTO   0EC0 (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
004D8:  MOVLW  09
004DA:  MOVLB  6
004DC:  ADDWF  xD8,W
004DE:  MOVWF  FE9
004E0:  MOVLW  00
004E2:  ADDWFC xD9,W
004E4:  MOVWF  FEA
004E6:  MOVFF  FEF,6DA
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
004EA:  MOVLW  0E
004EC:  ADDWF  xD8,W
004EE:  MOVWF  FE9
004F0:  MOVLW  00
004F2:  ADDWFC xD9,W
004F4:  MOVWF  FEA
004F6:  MOVLW  00
004F8:  BTFSC  FEF.0
004FA:  MOVLW  01
004FC:  ANDLW  01
004FE:  BTFSS  FD8.2
00500:  BRA    06D0
....................    { 
....................     //  printf("STATE %u",sw->current_state); 
....................      // printf("DIF %LU",clock - sw->timer); 
....................       sw-> previous_state = button_pressed; 
00502:  MOVLW  0E
00504:  ADDWF  xD8,W
00506:  MOVWF  FE9
00508:  MOVLW  00
0050A:  ADDWFC xD9,W
0050C:  MOVWF  FEA
0050E:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
00510:  MOVLW  0A
00512:  ADDWF  xD8,W
00514:  MOVWF  FE9
00516:  MOVLW  00
00518:  ADDWFC xD9,W
0051A:  MOVWF  FEA
0051C:  MOVFF  FEF,00
00520:  MOVFF  FEC,01
00524:  MOVFF  FEC,02
00528:  MOVFF  FEC,03
0052C:  MOVF   00,W
0052E:  SUBWF  x3A,W
00530:  MOVWF  xDB
00532:  MOVF   01,W
00534:  SUBWFB x3B,W
00536:  MOVWF  xDC
00538:  MOVF   02,W
0053A:  SUBWFB x3C,W
0053C:  MOVWF  xDD
0053E:  MOVF   03,W
00540:  SUBWFB x3D,W
00542:  MOVWF  xDE
00544:  MOVF   x42,W
00546:  SUBWF  xDE,W
00548:  BNC   0562
0054A:  BNZ   0576
0054C:  MOVF   x41,W
0054E:  SUBWF  xDD,W
00550:  BNC   0562
00552:  BNZ   0576
00554:  MOVF   x40,W
00556:  SUBWF  xDC,W
00558:  BNC   0562
0055A:  BNZ   0576
0055C:  MOVF   xDB,W
0055E:  SUBWF  x3F,W
00560:  BNC   0576
00562:  MOVLW  0F
00564:  ADDWF  xD8,W
00566:  MOVWF  FE9
00568:  MOVLW  00
0056A:  ADDWFC xD9,W
0056C:  MOVWF  FEA
0056E:  MOVF   FEF,W
00570:  SUBLW  02
00572:  BTFSS  FD8.2
00574:  BRA    06CE
00576:  MOVLW  0F
00578:  ADDWF  xD8,W
0057A:  MOVWF  FE9
0057C:  MOVLW  00
0057E:  ADDWFC xD9,W
00580:  MOVWF  FEA
00582:  MOVF   FEF,W
00584:  SUBLW  04
00586:  BTFSC  FD8.2
00588:  BRA    06CE
....................       {  
....................          if(sw->outstate==off) 
0058A:  MOVLW  0F
0058C:  ADDWF  xD8,W
0058E:  MOVWF  FE9
00590:  MOVLW  00
00592:  ADDWFC xD9,W
00594:  MOVWF  FEA
00596:  DECFSZ FEF,W
00598:  BRA    05D8
....................          { 
....................             sw->outstate=maxed; 
0059A:  MOVLW  0F
0059C:  ADDWF  xD8,W
0059E:  MOVWF  FE9
005A0:  MOVLW  00
005A2:  ADDWFC xD9,W
005A4:  MOVWF  FEA
005A6:  MOVLW  04
005A8:  MOVWF  FEF
....................             sw->on.value=1; 
005AA:  ADDWF  xD8,W
005AC:  MOVWF  FE9
005AE:  MOVLW  00
005B0:  ADDWFC xD9,W
005B2:  MOVWF  FEA
005B4:  MOVLW  01
005B6:  MOVWF  FEF
....................             sw->current_level = 127; 
005B8:  MOVLW  09
005BA:  ADDWF  xD8,W
005BC:  MOVWF  FE9
005BE:  MOVLW  00
005C0:  ADDWFC xD9,W
005C2:  MOVWF  FEA
005C4:  MOVLW  7F
005C6:  MOVWF  FEF
....................             sw->on.needs_update=1; 
005C8:  MOVLW  05
005CA:  ADDWF  xD8,W
005CC:  MOVWF  FE9
005CE:  MOVLW  00
005D0:  ADDWFC xD9,W
005D2:  MOVWF  FEA
005D4:  BSF    FEF.0
....................          } 
....................         else 
005D6:  BRA    06CC
....................         { 
....................          sw->outstate = dimming; 
005D8:  MOVLW  0F
005DA:  ADDWF  xD8,W
005DC:  MOVWF  FE9
005DE:  MOVLW  00
005E0:  ADDWFC xD9,W
005E2:  MOVWF  FEA
005E4:  MOVLW  02
005E6:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
005E8:  MOVLW  0A
005EA:  ADDWF  xD8,W
005EC:  MOVWF  FE9
005EE:  MOVLW  00
005F0:  ADDWFC xD9,W
005F2:  MOVWF  FEA
005F4:  MOVFF  FEF,00
005F8:  MOVFF  FEC,01
005FC:  MOVFF  FEC,02
00600:  MOVFF  FEC,03
00604:  MOVF   00,W
00606:  SUBWF  x3A,W
00608:  MOVWF  xDB
0060A:  MOVF   01,W
0060C:  SUBWFB x3B,W
0060E:  MOVWF  xDC
00610:  MOVF   02,W
00612:  SUBWFB x3C,W
00614:  MOVWF  xDD
00616:  MOVF   03,W
00618:  SUBWFB x3D,W
0061A:  MOVWF  xDE
0061C:  MOVF   xDE,F
0061E:  BNZ   062E
00620:  MOVF   xDD,F
00622:  BNZ   062E
00624:  MOVF   xDC,F
00626:  BNZ   062E
00628:  MOVF   xDB,W
0062A:  SUBWF  x3E,W
0062C:  BC    06B0
....................          { 
....................             if (sw->direction == up) //para cima 
0062E:  MOVLW  0E
00630:  ADDWF  xD8,W
00632:  MOVWF  FE9
00634:  MOVLW  00
00636:  ADDWFC xD9,W
00638:  MOVWF  FEA
0063A:  MOVLW  00
0063C:  BTFSC  FEF.2
0063E:  MOVLW  01
00640:  ANDLW  01
00642:  BNZ   0674
....................             { 
....................                ++sw->current_level; 
00644:  MOVLW  09
00646:  ADDWF  xD8,W
00648:  MOVWF  FE9
0064A:  MOVLW  00
0064C:  ADDWFC xD9,W
0064E:  MOVWF  FEA
00650:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
00652:  MOVLW  09
00654:  ADDWF  xD8,W
00656:  MOVWF  FE9
00658:  MOVLW  00
0065A:  ADDWFC xD9,W
0065C:  MOVWF  FEA
0065E:  MOVF   FEF,W
00660:  SUBLW  7F
00662:  BNZ   0672
00664:  MOVLW  0E
00666:  ADDWF  xD8,W
00668:  MOVWF  FE9
0066A:  MOVLW  00
0066C:  ADDWFC xD9,W
0066E:  MOVWF  FEA
00670:  BSF    FEF.2
....................             } 
....................             else//para baixo 
00672:  BRA    06B0
....................             { 
....................                --sw->current_level; 
00674:  MOVLW  09
00676:  ADDWF  xD8,W
00678:  MOVWF  FE9
0067A:  MOVLW  00
0067C:  ADDWFC xD9,W
0067E:  MOVWF  FEA
00680:  DECF   FEF,F
....................                if (sw->current_level == 0)  
00682:  MOVLW  09
00684:  ADDWF  xD8,W
00686:  MOVWF  FE9
00688:  MOVLW  00
0068A:  ADDWFC xD9,W
0068C:  MOVWF  FEA
0068E:  MOVF   FEF,F
00690:  BNZ   06B0
....................                {   
....................                   sw->direction = up; 
00692:  MOVLW  0E
00694:  ADDWF  xD8,W
00696:  MOVWF  FE9
00698:  MOVLW  00
0069A:  ADDWFC xD9,W
0069C:  MOVWF  FEA
0069E:  BCF    FEF.2
....................                   sw->off.value=1; 
006A0:  MOVLW  07
006A2:  ADDWF  xD8,W
006A4:  MOVWF  FE9
006A6:  MOVLW  00
006A8:  ADDWFC xD9,W
006AA:  MOVWF  FEA
006AC:  MOVLW  01
006AE:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
006B0:  MOVLW  0A
006B2:  ADDWF  xD8,W
006B4:  MOVWF  FE9
006B6:  MOVLW  00
006B8:  ADDWFC xD9,W
006BA:  MOVWF  FEA
006BC:  MOVFF  63A,FEF
006C0:  MOVFF  63B,FEC
006C4:  MOVFF  63C,FEC
006C8:  MOVFF  63D,FEC
....................       } 
....................       } 
....................       else 
006CC:  BRA    06CE
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
006CE:  BRA    0830
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
006D0:  MOVLW  0E
006D2:  ADDWF  xD8,W
006D4:  MOVWF  FE9
006D6:  MOVLW  00
006D8:  ADDWFC xD9,W
006DA:  MOVWF  FEA
006DC:  MOVLW  00
006DE:  BTFSC  FEF.1
006E0:  MOVLW  01
006E2:  ANDLW  01
006E4:  BTFSS  FD8.2
006E6:  BRA    0814
....................       { 
....................          sw->previous_state = button_depressed; 
006E8:  MOVLW  0E
006EA:  ADDWF  xD8,W
006EC:  MOVWF  FE9
006EE:  MOVLW  00
006F0:  ADDWFC xD9,W
006F2:  MOVWF  FEA
006F4:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
006F6:  MOVLW  0F
006F8:  ADDWF  xD8,W
006FA:  MOVWF  FE9
006FC:  MOVLW  00
006FE:  ADDWFC xD9,W
00700:  MOVWF  FEA
00702:  MOVF   FEF,W
00704:  SUBLW  02
00706:  BNZ   074C
....................          { 
....................             sw-> outstate = on; 
00708:  MOVLW  0F
0070A:  ADDWF  xD8,W
0070C:  MOVWF  FE9
0070E:  MOVLW  00
00710:  ADDWFC xD9,W
00712:  MOVWF  FEA
00714:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
00716:  MOVLW  0E
00718:  ADDWF  xD8,W
0071A:  MOVWF  FE9
0071C:  MOVLW  00
0071E:  ADDWFC xD9,W
00720:  MOVWF  FEA
00722:  MOVLW  00
00724:  BTFSC  FEF.2
00726:  MOVLW  01
00728:  ANDLW  01
0072A:  BNZ   073C
0072C:  MOVLW  0E
0072E:  ADDWF  xD8,W
00730:  MOVWF  FE9
00732:  MOVLW  00
00734:  ADDWFC xD9,W
00736:  MOVWF  FEA
00738:  BSF    FEF.2
....................             else sw->direction = up; 
0073A:  BRA    074A
0073C:  MOVLW  0E
0073E:  ADDWF  xD8,W
00740:  MOVWF  FE9
00742:  MOVLW  00
00744:  ADDWFC xD9,W
00746:  MOVWF  FEA
00748:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
0074A:  BRA    0814
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
0074C:  MOVLW  0F
0074E:  ADDWF  xD8,W
00750:  MOVWF  FE9
00752:  MOVLW  00
00754:  ADDWFC xD9,W
00756:  MOVWF  FEA
00758:  DECFSZ FEF,W
0075A:  BRA    0798
....................             { 
....................                sw->outstate=on; 
0075C:  MOVLW  0F
0075E:  ADDWF  xD8,W
00760:  MOVWF  FE9
00762:  MOVLW  00
00764:  ADDWFC xD9,W
00766:  MOVWF  FEA
00768:  CLRF   FEF
....................                sw->on.value=1; 
0076A:  MOVLW  04
0076C:  ADDWF  xD8,W
0076E:  MOVWF  FE9
00770:  MOVLW  00
00772:  ADDWFC xD9,W
00774:  MOVWF  FEA
00776:  MOVLW  01
00778:  MOVWF  FEF
....................                sw->direction = down; 
0077A:  MOVLW  0E
0077C:  ADDWF  xD8,W
0077E:  MOVWF  FE9
00780:  MOVLW  00
00782:  ADDWFC xD9,W
00784:  MOVWF  FEA
00786:  BSF    FEF.2
....................                sw->on.needs_update=true; 
00788:  MOVLW  05
0078A:  ADDWF  xD8,W
0078C:  MOVWF  FE9
0078E:  MOVLW  00
00790:  ADDWFC xD9,W
00792:  MOVWF  FEA
00794:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
00796:  BRA    0814
00798:  MOVLW  0F
0079A:  ADDWF  xD8,W
0079C:  MOVWF  FE9
0079E:  MOVLW  00
007A0:  ADDWFC xD9,W
007A2:  MOVWF  FEA
007A4:  MOVF   FEF,F
007A6:  BNZ   07E6
....................             { 
....................                sw->outstate=off; 
007A8:  MOVLW  0F
007AA:  ADDWF  xD8,W
007AC:  MOVWF  FE9
007AE:  MOVLW  00
007B0:  ADDWFC xD9,W
007B2:  MOVWF  FEA
007B4:  MOVLW  01
007B6:  MOVWF  FEF
....................                sw->off.value=1; 
007B8:  MOVLW  07
007BA:  ADDWF  xD8,W
007BC:  MOVWF  FE9
007BE:  MOVLW  00
007C0:  ADDWFC xD9,W
007C2:  MOVWF  FEA
007C4:  MOVLW  01
007C6:  MOVWF  FEF
....................                sw->direction = up; 
007C8:  MOVLW  0E
007CA:  ADDWF  xD8,W
007CC:  MOVWF  FE9
007CE:  MOVLW  00
007D0:  ADDWFC xD9,W
007D2:  MOVWF  FEA
007D4:  BCF    FEF.2
....................                sw->off.needs_update=true; 
007D6:  MOVLW  08
007D8:  ADDWF  xD8,W
007DA:  MOVWF  FE9
007DC:  MOVLW  00
007DE:  ADDWFC xD9,W
007E0:  MOVWF  FEA
007E2:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
007E4:  BRA    0814
007E6:  MOVLW  0F
007E8:  ADDWF  xD8,W
007EA:  MOVWF  FE9
007EC:  MOVLW  00
007EE:  ADDWFC xD9,W
007F0:  MOVWF  FEA
007F2:  MOVF   FEF,W
007F4:  SUBLW  04
007F6:  BNZ   0814
....................             { 
....................                sw->outstate=on; 
007F8:  MOVLW  0F
007FA:  ADDWF  xD8,W
007FC:  MOVWF  FE9
007FE:  MOVLW  00
00800:  ADDWFC xD9,W
00802:  MOVWF  FEA
00804:  CLRF   FEF
....................                sw->direction = down; 
00806:  MOVLW  0E
00808:  ADDWF  xD8,W
0080A:  MOVWF  FE9
0080C:  MOVLW  00
0080E:  ADDWFC xD9,W
00810:  MOVWF  FEA
00812:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
00814:  MOVLW  0A
00816:  ADDWF  xD8,W
00818:  MOVWF  FE9
0081A:  MOVLW  00
0081C:  ADDWFC xD9,W
0081E:  MOVWF  FEA
00820:  MOVFF  63A,FEF
00824:  MOVFF  63B,FEC
00828:  MOVFF  63C,FEC
0082C:  MOVFF  63D,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
00830:  MOVLW  09
00832:  ADDWF  xD8,W
00834:  MOVWF  FE9
00836:  MOVLW  00
00838:  ADDWFC xD9,W
0083A:  MOVWF  FEA
0083C:  MOVF   FEF,W
0083E:  SUBWF  xDA,W
00840:  BZ    0878
....................    { 
....................       sw->dim_level.value=sw->current_level; 
00842:  MOVLW  01
00844:  ADDWF  xD8,W
00846:  MOVWF  01
00848:  MOVLW  00
0084A:  ADDWFC xD9,W
0084C:  MOVWF  03
0084E:  MOVLW  09
00850:  ADDWF  xD8,W
00852:  MOVWF  FE9
00854:  MOVLW  00
00856:  ADDWFC xD9,W
00858:  MOVWF  FEA
0085A:  MOVFF  FEF,6DD
0085E:  MOVFF  03,FEA
00862:  MOVFF  01,FE9
00866:  MOVFF  6DD,FEF
....................       sw->dim_level.needs_update=true; 
0086A:  MOVLW  02
0086C:  ADDWF  xD8,W
0086E:  MOVWF  FE9
00870:  MOVLW  00
00872:  ADDWFC xD9,W
00874:  MOVWF  FEA
00876:  BSF    FEF.0
....................    } 
.................... } 
00878:  MOVLB  0
0087A:  GOTO   0EC0 (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
00A88:  MOVLB  6
00A8A:  CLRF   xD5
00A8C:  MOVLB  1
00A8E:  MOVF   x3E,W
00A90:  MOVLB  6
00A92:  SUBWF  xD5,W
00A94:  BTFSC  FD8.0
00A96:  BRA    0EC6
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
00A98:  CLRF   xD7
00A9A:  MOVFF  6D5,6D6
00A9E:  CLRF   xD9
00AA0:  MOVLW  21
00AA2:  MOVWF  xD8
00AA4:  MOVLB  0
00AA6:  RCALL  0442
00AA8:  MOVFF  02,03
00AAC:  MOVF   01,W
00AAE:  ADDLW  40
00AB0:  MOVWF  01
00AB2:  MOVLW  01
00AB4:  ADDWFC 03,F
00AB6:  MOVFF  01,FE9
00ABA:  MOVFF  03,FEA
00ABE:  MOVF   FEF,W
00AC0:  BZ    0AD6
00AC2:  XORLW  03
00AC4:  BTFSC  FD8.2
00AC6:  BRA    0C1C
00AC8:  XORLW  02
00ACA:  BTFSC  FD8.2
00ACC:  BRA    0C1E
00ACE:  XORLW  03
00AD0:  BTFSC  FD8.2
00AD2:  BRA    0D6C
00AD4:  BRA    0EBE
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00AD6:  MOVLB  6
00AD8:  CLRF   xD7
00ADA:  MOVFF  6D5,6D6
00ADE:  CLRF   xD9
00AE0:  MOVLW  21
00AE2:  MOVWF  xD8
00AE4:  MOVLB  0
00AE6:  RCALL  0442
00AE8:  MOVF   01,W
00AEA:  ADDLW  02
00AEC:  MOVLB  6
00AEE:  MOVWF  xD6
00AF0:  MOVLW  00
00AF2:  ADDWFC 02,W
00AF4:  MOVWF  xD7
00AF6:  MOVLW  01
00AF8:  ADDWF  xD6,W
00AFA:  MOVWF  01
00AFC:  MOVLW  00
00AFE:  ADDWFC xD7,W
00B00:  MOVWF  03
00B02:  MOVF   01,W
00B04:  ADDLW  3E
00B06:  MOVWF  01
00B08:  MOVLW  01
00B0A:  ADDWFC 03,F
00B0C:  MOVF   01,W
00B0E:  ADDLW  10
00B10:  MOVWF  FE9
00B12:  MOVLW  00
00B14:  ADDWFC 03,W
00B16:  MOVWF  FEA
00B18:  MOVFF  FEF,6D8
00B1C:  MOVFF  6D8,6D9
00B20:  MOVLW  01
00B22:  MOVWF  xDA
00B24:  MOVLW  0F
00B26:  MOVWF  xDC
00B28:  MOVLW  92
00B2A:  MOVWF  xDB
00B2C:  MOVLB  0
00B2E:  RCALL  0464
00B30:  MOVFF  6D8,6D9
00B34:  MOVLW  0F
00B36:  MOVLB  6
00B38:  MOVWF  xDB
00B3A:  MOVLW  80
00B3C:  MOVWF  xDA
00B3E:  MOVLB  0
00B40:  RCALL  04A6
00B42:  BTFSS  01.0
00B44:  BRA    0B8E
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00B46:  MOVLB  6
00B48:  CLRF   xD7
00B4A:  MOVFF  6D5,6D6
00B4E:  CLRF   xD9
00B50:  MOVLW  21
00B52:  MOVWF  xD8
00B54:  MOVLB  0
00B56:  RCALL  0442
00B58:  MOVF   01,W
00B5A:  ADDLW  02
00B5C:  MOVLB  6
00B5E:  MOVWF  xD6
00B60:  MOVLW  00
00B62:  ADDWFC 02,W
00B64:  MOVWF  xD7
00B66:  MOVLW  01
00B68:  ADDWF  xD6,W
00B6A:  MOVWF  01
00B6C:  MOVLW  00
00B6E:  ADDWFC xD7,W
00B70:  MOVWF  03
00B72:  MOVF   01,W
00B74:  ADDLW  3E
00B76:  MOVWF  01
00B78:  MOVLW  01
00B7A:  ADDWFC 03,F
00B7C:  MOVF   01,W
00B7E:  ADDLW  0E
00B80:  MOVWF  FE9
00B82:  MOVLW  00
00B84:  ADDWFC 03,W
00B86:  MOVWF  FEA
00B88:  BSF    FEF.0
....................             } 
....................             else  
00B8A:  BRA    0BD2
00B8C:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00B8E:  MOVLB  6
00B90:  CLRF   xD7
00B92:  MOVFF  6D5,6D6
00B96:  CLRF   xD9
00B98:  MOVLW  21
00B9A:  MOVWF  xD8
00B9C:  MOVLB  0
00B9E:  RCALL  0442
00BA0:  MOVF   01,W
00BA2:  ADDLW  02
00BA4:  MOVLB  6
00BA6:  MOVWF  xD6
00BA8:  MOVLW  00
00BAA:  ADDWFC 02,W
00BAC:  MOVWF  xD7
00BAE:  MOVLW  01
00BB0:  ADDWF  xD6,W
00BB2:  MOVWF  01
00BB4:  MOVLW  00
00BB6:  ADDWFC xD7,W
00BB8:  MOVWF  03
00BBA:  MOVF   01,W
00BBC:  ADDLW  3E
00BBE:  MOVWF  01
00BC0:  MOVLW  01
00BC2:  ADDWFC 03,F
00BC4:  MOVF   01,W
00BC6:  ADDLW  0E
00BC8:  MOVWF  FE9
00BCA:  MOVLW  00
00BCC:  ADDWFC 03,W
00BCE:  MOVWF  FEA
00BD0:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00BD2:  CLRF   xD7
00BD4:  MOVFF  6D5,6D6
00BD8:  CLRF   xD9
00BDA:  MOVLW  21
00BDC:  MOVWF  xD8
00BDE:  MOVLB  0
00BE0:  RCALL  0442
00BE2:  MOVF   01,W
00BE4:  ADDLW  02
00BE6:  MOVLB  6
00BE8:  MOVWF  xD6
00BEA:  MOVLW  00
00BEC:  ADDWFC 02,W
00BEE:  MOVWF  xD7
00BF0:  MOVLW  01
00BF2:  ADDWF  xD6,W
00BF4:  MOVWF  01
00BF6:  MOVLW  00
00BF8:  ADDWFC xD7,W
00BFA:  MOVWF  03
00BFC:  MOVF   01,W
00BFE:  ADDLW  3E
00C00:  MOVWF  01
00C02:  MOVLW  01
00C04:  ADDWFC 03,F
00C06:  MOVFF  01,6D6
00C0A:  MOVFF  03,6D7
00C0E:  MOVFF  03,6D9
00C12:  MOVFF  01,6D8
00C16:  MOVLB  0
00C18:  BRA    04D8
....................             break; 
00C1A:  BRA    0EC0
....................     case timer: 
....................  
....................            break; 
00C1C:  BRA    0EC0
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00C1E:  MOVLB  6
00C20:  CLRF   xD7
00C22:  MOVFF  6D5,6D6
00C26:  CLRF   xD9
00C28:  MOVLW  21
00C2A:  MOVWF  xD8
00C2C:  MOVLB  0
00C2E:  RCALL  0442
00C30:  MOVF   01,W
00C32:  ADDLW  02
00C34:  MOVLB  6
00C36:  MOVWF  xD6
00C38:  MOVLW  00
00C3A:  ADDWFC 02,W
00C3C:  MOVWF  xD7
00C3E:  MOVLW  01
00C40:  ADDWF  xD6,W
00C42:  MOVWF  01
00C44:  MOVLW  00
00C46:  ADDWFC xD7,W
00C48:  MOVWF  03
00C4A:  MOVF   01,W
00C4C:  ADDLW  3E
00C4E:  MOVWF  01
00C50:  MOVLW  01
00C52:  ADDWFC 03,F
00C54:  MOVF   01,W
00C56:  ADDLW  0C
00C58:  MOVWF  FE9
00C5A:  MOVLW  00
00C5C:  ADDWFC 03,W
00C5E:  MOVWF  FEA
00C60:  MOVFF  FEF,6D8
00C64:  MOVFF  6D8,6D9
00C68:  MOVLW  01
00C6A:  MOVWF  xDA
00C6C:  MOVLW  0F
00C6E:  MOVWF  xDC
00C70:  MOVLW  92
00C72:  MOVWF  xDB
00C74:  MOVLB  0
00C76:  CALL   0464
00C7A:  MOVFF  6D8,6D9
00C7E:  MOVLW  0F
00C80:  MOVLB  6
00C82:  MOVWF  xDB
00C84:  MOVLW  80
00C86:  MOVWF  xDA
00C88:  MOVLB  0
00C8A:  RCALL  04A6
00C8C:  BTFSS  01.0
00C8E:  BRA    0CDA
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00C90:  MOVLB  6
00C92:  CLRF   xD7
00C94:  MOVFF  6D5,6D6
00C98:  CLRF   xD9
00C9A:  MOVLW  21
00C9C:  MOVWF  xD8
00C9E:  MOVLB  0
00CA0:  CALL   0442
00CA4:  MOVF   01,W
00CA6:  ADDLW  02
00CA8:  MOVLB  6
00CAA:  MOVWF  xD6
00CAC:  MOVLW  00
00CAE:  ADDWFC 02,W
00CB0:  MOVWF  xD7
00CB2:  MOVLW  01
00CB4:  ADDWF  xD6,W
00CB6:  MOVWF  01
00CB8:  MOVLW  00
00CBA:  ADDWFC xD7,W
00CBC:  MOVWF  03
00CBE:  MOVF   01,W
00CC0:  ADDLW  3E
00CC2:  MOVWF  01
00CC4:  MOVLW  01
00CC6:  ADDWFC 03,F
00CC8:  MOVF   01,W
00CCA:  ADDLW  06
00CCC:  MOVWF  FE9
00CCE:  MOVLW  00
00CD0:  ADDWFC 03,W
00CD2:  MOVWF  FEA
00CD4:  BSF    FEF.0
....................             } 
....................             else  
00CD6:  BRA    0D20
00CD8:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00CDA:  MOVLB  6
00CDC:  CLRF   xD7
00CDE:  MOVFF  6D5,6D6
00CE2:  CLRF   xD9
00CE4:  MOVLW  21
00CE6:  MOVWF  xD8
00CE8:  MOVLB  0
00CEA:  CALL   0442
00CEE:  MOVF   01,W
00CF0:  ADDLW  02
00CF2:  MOVLB  6
00CF4:  MOVWF  xD6
00CF6:  MOVLW  00
00CF8:  ADDWFC 02,W
00CFA:  MOVWF  xD7
00CFC:  MOVLW  01
00CFE:  ADDWF  xD6,W
00D00:  MOVWF  01
00D02:  MOVLW  00
00D04:  ADDWFC xD7,W
00D06:  MOVWF  03
00D08:  MOVF   01,W
00D0A:  ADDLW  3E
00D0C:  MOVWF  01
00D0E:  MOVLW  01
00D10:  ADDWFC 03,F
00D12:  MOVF   01,W
00D14:  ADDLW  06
00D16:  MOVWF  FE9
00D18:  MOVLW  00
00D1A:  ADDWFC 03,W
00D1C:  MOVWF  FEA
00D1E:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00D20:  CLRF   xD7
00D22:  MOVFF  6D5,6D6
00D26:  CLRF   xD9
00D28:  MOVLW  21
00D2A:  MOVWF  xD8
00D2C:  MOVLB  0
00D2E:  CALL   0442
00D32:  MOVF   01,W
00D34:  ADDLW  02
00D36:  MOVLB  6
00D38:  MOVWF  xD6
00D3A:  MOVLW  00
00D3C:  ADDWFC 02,W
00D3E:  MOVWF  xD7
00D40:  MOVLW  01
00D42:  ADDWF  xD6,W
00D44:  MOVWF  01
00D46:  MOVLW  00
00D48:  ADDWFC xD7,W
00D4A:  MOVWF  03
00D4C:  MOVF   01,W
00D4E:  ADDLW  3E
00D50:  MOVWF  01
00D52:  MOVLW  01
00D54:  ADDWFC 03,F
00D56:  MOVFF  01,6D6
00D5A:  MOVFF  03,6D7
00D5E:  MOVFF  03,6D9
00D62:  MOVFF  01,6D8
00D66:  MOVLB  0
00D68:  BRA    087E
....................     break; 
00D6A:  BRA    0EC0
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00D6C:  MOVLB  6
00D6E:  CLRF   xD7
00D70:  MOVFF  6D5,6D6
00D74:  CLRF   xD9
00D76:  MOVLW  21
00D78:  MOVWF  xD8
00D7A:  MOVLB  0
00D7C:  CALL   0442
00D80:  MOVF   01,W
00D82:  ADDLW  02
00D84:  MOVLB  6
00D86:  MOVWF  xD6
00D88:  MOVLW  00
00D8A:  ADDWFC 02,W
00D8C:  MOVWF  xD7
00D8E:  MOVLW  01
00D90:  ADDWF  xD6,W
00D92:  MOVWF  01
00D94:  MOVLW  00
00D96:  ADDWFC xD7,W
00D98:  MOVWF  03
00D9A:  MOVF   01,W
00D9C:  ADDLW  3E
00D9E:  MOVWF  01
00DA0:  MOVLW  01
00DA2:  ADDWFC 03,F
00DA4:  MOVF   01,W
00DA6:  ADDLW  09
00DA8:  MOVWF  FE9
00DAA:  MOVLW  00
00DAC:  ADDWFC 03,W
00DAE:  MOVWF  FEA
00DB0:  MOVFF  FEF,6D8
00DB4:  MOVFF  6D8,6D9
00DB8:  MOVLW  01
00DBA:  MOVWF  xDA
00DBC:  MOVLW  0F
00DBE:  MOVWF  xDC
00DC0:  MOVLW  92
00DC2:  MOVWF  xDB
00DC4:  MOVLB  0
00DC6:  CALL   0464
00DCA:  MOVFF  6D8,6D9
00DCE:  MOVLW  0F
00DD0:  MOVLB  6
00DD2:  MOVWF  xDB
00DD4:  MOVLW  80
00DD6:  MOVWF  xDA
00DD8:  MOVLB  0
00DDA:  CALL   04A6
00DDE:  BTFSS  01.0
00DE0:  BRA    0E2C
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00DE2:  MOVLB  6
00DE4:  CLRF   xD7
00DE6:  MOVFF  6D5,6D6
00DEA:  CLRF   xD9
00DEC:  MOVLW  21
00DEE:  MOVWF  xD8
00DF0:  MOVLB  0
00DF2:  CALL   0442
00DF6:  MOVF   01,W
00DF8:  ADDLW  02
00DFA:  MOVLB  6
00DFC:  MOVWF  xD6
00DFE:  MOVLW  00
00E00:  ADDWFC 02,W
00E02:  MOVWF  xD7
00E04:  MOVLW  01
00E06:  ADDWF  xD6,W
00E08:  MOVWF  01
00E0A:  MOVLW  00
00E0C:  ADDWFC xD7,W
00E0E:  MOVWF  03
00E10:  MOVF   01,W
00E12:  ADDLW  3E
00E14:  MOVWF  01
00E16:  MOVLW  01
00E18:  ADDWFC 03,F
00E1A:  MOVF   01,W
00E1C:  ADDLW  06
00E1E:  MOVWF  FE9
00E20:  MOVLW  00
00E22:  ADDWFC 03,W
00E24:  MOVWF  FEA
00E26:  BSF    FEF.0
....................             } 
....................             else  
00E28:  BRA    0E72
00E2A:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00E2C:  MOVLB  6
00E2E:  CLRF   xD7
00E30:  MOVFF  6D5,6D6
00E34:  CLRF   xD9
00E36:  MOVLW  21
00E38:  MOVWF  xD8
00E3A:  MOVLB  0
00E3C:  CALL   0442
00E40:  MOVF   01,W
00E42:  ADDLW  02
00E44:  MOVLB  6
00E46:  MOVWF  xD6
00E48:  MOVLW  00
00E4A:  ADDWFC 02,W
00E4C:  MOVWF  xD7
00E4E:  MOVLW  01
00E50:  ADDWF  xD6,W
00E52:  MOVWF  01
00E54:  MOVLW  00
00E56:  ADDWFC xD7,W
00E58:  MOVWF  03
00E5A:  MOVF   01,W
00E5C:  ADDLW  3E
00E5E:  MOVWF  01
00E60:  MOVLW  01
00E62:  ADDWFC 03,F
00E64:  MOVF   01,W
00E66:  ADDLW  06
00E68:  MOVWF  FE9
00E6A:  MOVLW  00
00E6C:  ADDWFC 03,W
00E6E:  MOVWF  FEA
00E70:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00E72:  CLRF   xD7
00E74:  MOVFF  6D5,6D6
00E78:  CLRF   xD9
00E7A:  MOVLW  21
00E7C:  MOVWF  xD8
00E7E:  MOVLB  0
00E80:  CALL   0442
00E84:  MOVF   01,W
00E86:  ADDLW  02
00E88:  MOVLB  6
00E8A:  MOVWF  xD6
00E8C:  MOVLW  00
00E8E:  ADDWFC 02,W
00E90:  MOVWF  xD7
00E92:  MOVLW  01
00E94:  ADDWF  xD6,W
00E96:  MOVWF  01
00E98:  MOVLW  00
00E9A:  ADDWFC xD7,W
00E9C:  MOVWF  03
00E9E:  MOVF   01,W
00EA0:  ADDLW  3E
00EA2:  MOVWF  01
00EA4:  MOVLW  01
00EA6:  ADDWFC 03,F
00EA8:  MOVFF  01,6D6
00EAC:  MOVFF  03,6D7
00EB0:  MOVFF  03,6D9
00EB4:  MOVFF  01,6D8
00EB8:  MOVLB  0
00EBA:  BRA    099E
....................     break; 
00EBC:  BRA    0EC0
....................     default: 
....................  
....................             break;  
00EBE:  BRA    0EC0
....................             } 
....................  
....................    } 
00EC0:  MOVLB  6
00EC2:  INCF   xD5,F
00EC4:  BRA    0A8C
.................... } 
00EC6:  MOVLB  0
00EC8:  GOTO   0EE6 (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct button_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct button_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00ECC:  MOVLW  01
00ECE:  MOVLB  6
00ED0:  ADDWF  x3A,F
00ED2:  BTFSC  FD8.0
00ED4:  INCF   x3B,F
00ED6:  BTFSC  FD8.2
00ED8:  INCF   x3C,F
00EDA:  BTFSC  FD8.2
00EDC:  INCF   x3D,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00EDE:  BTFSS  x3A.1
00EE0:  BRA    0EE8
00EE2:  MOVLB  0
00EE4:  BRA    0A88
00EE6:  MOVLB  6
.................... } 
....................  
00EE8:  BCF    FF2.2
00EEA:  MOVLB  0
00EEC:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
00EF0:  BSF    xB5.5
.................... } 
00EF2:  BCF    F9E.0
00EF4:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
00EF8:  MOVLB  6
00EFA:  INCF   x45,F
....................    if(clockT2temp==200)//1 second call 
00EFC:  MOVF   x45,W
00EFE:  SUBLW  C8
00F00:  BNZ   0F1A
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00F02:  CLRF   x45
....................       ++secClock; 
00F04:  MOVLW  01
00F06:  ADDWF  24,F
00F08:  BTFSC  FD8.0
00F0A:  INCF   25,F
00F0C:  BTFSC  FD8.2
00F0E:  INCF   26,F
00F10:  BTFSC  FD8.2
00F12:  INCF   27,F
....................       secondFlag=true; 
00F14:  MOVLB  0
00F16:  BSF    xB5.4
00F18:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00F1A:  BCF    F9E.1
00F1C:  MOVLB  0
00F1E:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................          portc=MAKE8(onoffsvalue,1); 
00F22:  MOVLB  5
00F24:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00F28:  MOVFF  57F,F83
....................   if(mnumluzes!=0) 
00F2C:  MOVF   x7E,F
00F2E:  BTFSC  FD8.2
00F30:  BRA    106C
....................    { 
....................          if (organizado) 
00F32:  MOVLB  0
00F34:  BTFSS  xB5.2
00F36:  BRA    0F5A
....................          { 
....................             organizado=0; 
00F38:  BCF    xB5.2
....................             if (actmat)  
00F3A:  BTFSS  xB5.3
00F3C:  BRA    0F4E
....................             { 
....................                actmat=0; 
00F3E:  BCF    xB5.3
....................                pointer=delays1; 
00F40:  MOVLW  05
00F42:  MOVLB  5
00F44:  MOVWF  x7C
00F46:  MOVLW  91
00F48:  MOVWF  x7B
....................             } 
....................             else 
00F4A:  BRA    0F5A
00F4C:  MOVLB  0
....................             { 
....................                actmat=1; 
00F4E:  BSF    xB5.3
....................                pointer=delays2; 
00F50:  MOVLW  05
00F52:  MOVLB  5
00F54:  MOVWF  x7C
00F56:  MOVLW  D5
00F58:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00F5A:  MOVLB  5
00F5C:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00F5E:  MOVLB  6
00F60:  CLRF   xD7
00F62:  CLRF   xD8
*
00FCE:  MOVFF  02,6D6
00FD2:  MOVFF  01,6D5
00FD6:  BCF    FD8.0
00FD8:  RLCF   01,W
00FDA:  MOVWF  02
00FDC:  RLCF   xD6,W
00FDE:  MOVWF  03
00FE0:  MOVF   02,W
00FE2:  MOVLB  0
00FE4:  CALL   01A6
00FE8:  TBLRD*+
00FEA:  MOVFF  FF5,03
00FEE:  MOVWF  FBE
00FF0:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
00FF4:  MOVLW  10
00FF6:  MOVLB  6
00FF8:  MOVWF  xD7
00FFA:  CLRF   xD8
*
01066:  MOVFF  01,57E
0106A:  MOVLB  5
....................           
....................    } 
....................          set_timer1(0); 
0106C:  CLRF   FCF
0106E:  CLRF   FCE
....................          syncError=false; 
01070:  MOVLB  0
01072:  BCF    xB5.5
.................... } 
....................  
01074:  BCF    FF2.1
01076:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {   
....................    if(mnumluzes!=0) 
0107A:  MOVLB  5
0107C:  MOVF   x7E,F
0107E:  BTFSC  FD8.2
01080:  BRA    11A6
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
01082:  MOVFF  57D,6D7
01086:  MOVLW  01
01088:  MOVLB  6
0108A:  MOVWF  xD8
*
010F6:  MOVFF  02,6D6
010FA:  MOVFF  01,6D5
....................      // printf("AUXCPP %lu",auxccp); 
....................       portc=(portc & MAKE8(auxccp,1)); 
010FE:  MOVF   xD6,W
01100:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
01102:  MOVF   xD5,W
01104:  ANDWF  F83,F
....................       ++vez; 
01106:  MOVLB  5
01108:  INCF   x7D,F
....................       --mnumluzes; 
0110A:  DECF   x7E,F
....................       CCP_1=matrizluz[fpointer(vez,0)]; 
0110C:  MOVFF  57D,6D7
01110:  MOVLB  6
01112:  CLRF   xD8
*
0117E:  MOVFF  02,6D8
01182:  MOVFF  01,6D7
01186:  BCF    FD8.0
01188:  RLCF   01,W
0118A:  MOVWF  02
0118C:  RLCF   xD8,W
0118E:  MOVWF  03
01190:  MOVF   02,W
01192:  MOVLB  0
01194:  CALL   01A6
01198:  TBLRD*+
0119A:  MOVFF  FF5,03
0119E:  MOVWF  FBE
011A0:  MOVFF  03,FBF
011A4:  MOVLB  5
....................    } 
.................... } 
....................  
011A6:  BCF    F9E.2
011A8:  MOVLB  0
011AA:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
011AE:  BCF    F9E.5
011B0:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
011B4:  BCF    F9E.4
011B6:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
011BA:  BCF    FA1.3
011BC:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
.................... } 
....................  
011C0:  BCF    FA1.7
011C2:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
0176E:  RCALL  13BE
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01770:  BCF    FA4.0
01772:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
01776:  RCALL  13BE
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01778:  BCF    FA4.1
0177A:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01B9E:  RCALL  1984
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01BA0:  BCF    FA4.2
01BA2:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01BA6:  RCALL  1984
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01BA8:  BCF    FA4.3
01BAA:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01BAE:  RCALL  1984
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01BB0:  BCF    FA4.4
01BB2:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01BB6:  BCF    FA4.7
01BB8:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01BBC:  BCF    FA4.5
01BBE:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    enable_interrupts (int_canrx0); 
*
05008:  BSF    FA3.0
....................    enable_interrupts (int_canrx1); 
0500A:  BSF    FA3.1
....................    enable_interrupts (int_cantx0); 
0500C:  BSF    FA3.2
....................    enable_interrupts (int_cantx1); 
0500E:  BSF    FA3.3
....................    enable_interrupts (int_cantx2); 
05010:  BSF    FA3.4
....................    enable_interrupts (int_canirx); 
05012:  BSF    FA3.7
....................    enable_interrupts (int_canerr); 
05014:  BSF    FA3.5
....................    enable_interrupts(INT_CCP1); 
05016:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
05018:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
0501A:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
0501C:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
0501E:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    //enable_interrupts (int_OSCF) ; 
....................    enable_interrupts (GLOBAL) ; 
05020:  MOVLW  C0
05022:  IORWF  FF2,F
.................... } 
05024:  GOTO   848A (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01D92:  BRA    1C3E
....................    can_set_mode (CAN_OP_CONFIG) ;   
01D94:  MOVLW  04
01D96:  MOVLB  6
01D98:  MOVWF  x5E
01D9A:  MOVLB  0
01D9C:  RCALL  1BE8
....................    BRGCON1.brp = 4; 
01D9E:  MOVLW  C0
01DA0:  ANDWF  F70,W
01DA2:  IORLW  04
01DA4:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01DA6:  MOVLW  3F
01DA8:  ANDWF  F70,W
01DAA:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01DAC:  MOVLW  F8
01DAE:  ANDWF  F71,W
01DB0:  IORLW  02
01DB2:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01DB4:  MOVLW  C7
01DB6:  ANDWF  F71,W
01DB8:  IORLW  28
01DBA:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01DBC:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01DBE:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01DC0:  MOVLW  F8
01DC2:  ANDWF  F72,W
01DC4:  IORLW  05
01DC6:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01DC8:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01DCA:  MOVLB  6
01DCC:  CLRF   x5E
01DCE:  MOVLB  0
01DD0:  RCALL  1BE8
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01DD2:  MOVLW  81
01DD4:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01DD6:  MOVLW  95
01DD8:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01DDA:  MOVLW  60
01DDC:  IORLW  06
01DDE:  MOVWF  FCA
01DE0:  MOVLW  F1
01DE2:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01DE4:  MOVLW  0A
01DE6:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01DE8:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01DEA:  MOVF   FC1,W
01DEC:  ANDLW  C0
01DEE:  IORLW  0F
01DF0:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01DF2:  MOVF   FC0,W
01DF4:  ANDLW  C0
01DF6:  MOVWF  FC0
01DF8:  BCF    FC0.7
01DFA:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01DFC:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01DFE:  BCF    FC6.5
01E00:  MOVLW  01
01E02:  MOVWF  FC6
01E04:  MOVLW  00
01E06:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01E08:  MOVLW  07
01E0A:  MOVWF  FB4
01E0C:  MOVF   F95,W
01E0E:  MOVWF  F95
01E10:  MOVF   F96,W
01E12:  MOVWF  F96
01E14:  CLRWDT
01E16:  MOVLW  20
01E18:  MOVWF  00
01E1A:  DECFSZ 00,F
01E1C:  BRA    1E1A
01E1E:  BRA    1E20
01E20:  MOVF   FB4,W
01E22:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01E24:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01E26:  CLRF   FB1
....................     
....................    setup_wdt(WDT_ON); 
01E28:  BSF    FD1.0
....................  
....................    //setup_wdt (WDT_ON) ; 
....................    } 
01E2A:  GOTO   82CA (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
080C8:  CLRF   FF8
080CA:  BCF    FD0.7
080CC:  BSF    07.7
080CE:  CLRF   FEA
080D0:  CLRF   FE9
080D2:  BCF    F93.5
080D4:  BSF    F8A.5
080D6:  CLRF   27
080D8:  CLRF   26
080DA:  CLRF   25
080DC:  CLRF   24
080DE:  CLRF   28
080E0:  BCF    xB5.0
080E2:  CLRF   xB6
080E4:  BSF    xB5.1
080E6:  MOVLB  5
080E8:  CLRF   x7A
080EA:  MOVLB  0
080EC:  BCF    xB5.3
080EE:  MOVLB  5
080F0:  CLRF   x7E
080F2:  MOVLW  FF
080F4:  MOVWF  x80
080F6:  MOVWF  x7F
080F8:  MOVLB  6
080FA:  CLRF   x39
080FC:  CLRF   x3E
080FE:  CLRF   x42
08100:  CLRF   x41
08102:  CLRF   x40
08104:  MOVLW  27
08106:  MOVWF  x3F
08108:  MOVF   FC1,W
0810A:  ANDLW  C0
0810C:  IORLW  0F
0810E:  MOVWF  FC1
08110:  MOVLW  07
08112:  MOVWF  FB4
08114:  CLRF   1C
08116:  MOVLW  01
08118:  MOVWF  1D
0811A:  MOVLW  02
0811C:  MOVWF  1E
0811E:  MOVLW  03
08120:  MOVWF  1F
08122:  MOVLW  04
08124:  MOVWF  20
08126:  MOVLW  05
08128:  MOVWF  21
0812A:  MOVLW  20
0812C:  MOVWF  22
0812E:  MOVLW  21
08130:  MOVWF  23
08132:  MOVLW  0B
08134:  MOVLB  1
08136:  MOVWF  x39
08138:  CLRF   x3A
0813A:  CLRF   x3B
0813C:  CLRF   x3C
0813E:  MOVLB  5
08140:  CLRF   x81
08142:  CLRF   x82
08144:  CLRF   x83
08146:  CLRF   x84
08148:  CLRF   x85
0814A:  CLRF   x86
0814C:  CLRF   x87
0814E:  CLRF   x88
08150:  CLRF   x89
08152:  CLRF   x8A
08154:  CLRF   x8B
08156:  CLRF   x8C
08158:  CLRF   x8D
0815A:  CLRF   x8E
0815C:  CLRF   x8F
0815E:  CLRF   x90
08160:  CLRF   x91
08162:  CLRF   x92
08164:  CLRF   x93
08166:  CLRF   x94
08168:  CLRF   x95
0816A:  CLRF   x96
0816C:  MOVLW  01
0816E:  MOVWF  x97
08170:  CLRF   x98
08172:  CLRF   x99
08174:  CLRF   x9A
08176:  MOVLW  02
08178:  MOVWF  x9B
0817A:  CLRF   x9C
0817C:  CLRF   x9D
0817E:  CLRF   x9E
08180:  MOVLW  03
08182:  MOVWF  x9F
08184:  CLRF   xA0
08186:  CLRF   xA1
08188:  CLRF   xA2
0818A:  MOVLW  04
0818C:  MOVWF  xA3
0818E:  CLRF   xA4
08190:  CLRF   xA5
08192:  CLRF   xA6
08194:  MOVLW  05
08196:  MOVWF  xA7
08198:  CLRF   xA8
0819A:  CLRF   xA9
0819C:  CLRF   xAA
0819E:  MOVLW  06
081A0:  MOVWF  xAB
081A2:  CLRF   xAC
081A4:  CLRF   xAD
081A6:  CLRF   xAE
081A8:  MOVLW  07
081AA:  MOVWF  xAF
081AC:  CLRF   xB0
081AE:  CLRF   xB1
081B0:  CLRF   xB2
081B2:  MOVLW  08
081B4:  MOVWF  xB3
081B6:  CLRF   xB4
081B8:  CLRF   xB5
081BA:  CLRF   xB6
081BC:  MOVLW  09
081BE:  MOVWF  xB7
081C0:  CLRF   xB8
081C2:  CLRF   xB9
081C4:  CLRF   xBA
081C6:  MOVLW  0A
081C8:  MOVWF  xBB
081CA:  CLRF   xBC
081CC:  CLRF   xBD
081CE:  CLRF   xBE
081D0:  MOVLW  0B
081D2:  MOVWF  xBF
081D4:  CLRF   xC0
081D6:  CLRF   xC1
081D8:  CLRF   xC2
081DA:  MOVLW  0C
081DC:  MOVWF  xC3
081DE:  CLRF   xC4
081E0:  CLRF   xC5
081E2:  CLRF   xC6
081E4:  MOVLW  0D
081E6:  MOVWF  xC7
081E8:  CLRF   xC8
081EA:  CLRF   xC9
081EC:  CLRF   xCA
081EE:  MOVLW  0E
081F0:  MOVWF  xCB
081F2:  CLRF   xCC
081F4:  CLRF   xCD
081F6:  CLRF   xCE
081F8:  MOVLW  0F
081FA:  MOVWF  xCF
081FC:  CLRF   xD0
081FE:  CLRF   xD1
08200:  CLRF   xD2
08202:  CLRF   xD3
08204:  CLRF   xD4
08206:  CLRF   xD5
08208:  CLRF   xD6
0820A:  CLRF   xD7
0820C:  CLRF   xD8
0820E:  CLRF   xD9
08210:  CLRF   xDA
08212:  MOVLW  01
08214:  MOVWF  xDB
08216:  CLRF   xDC
08218:  CLRF   xDD
0821A:  CLRF   xDE
0821C:  MOVLW  02
0821E:  MOVWF  xDF
08220:  CLRF   xE0
08222:  CLRF   xE1
08224:  CLRF   xE2
08226:  MOVLW  03
08228:  MOVWF  xE3
0822A:  CLRF   xE4
0822C:  CLRF   xE5
0822E:  CLRF   xE6
08230:  MOVLW  04
08232:  MOVWF  xE7
08234:  CLRF   xE8
08236:  CLRF   xE9
08238:  CLRF   xEA
0823A:  MOVLW  05
0823C:  MOVWF  xEB
0823E:  CLRF   xEC
08240:  CLRF   xED
08242:  CLRF   xEE
08244:  MOVLW  06
08246:  MOVWF  xEF
08248:  CLRF   xF0
0824A:  CLRF   xF1
0824C:  CLRF   xF2
0824E:  MOVLW  07
08250:  MOVWF  xF3
08252:  CLRF   xF4
08254:  CLRF   xF5
08256:  CLRF   xF6
08258:  MOVLW  08
0825A:  MOVWF  xF7
0825C:  CLRF   xF8
0825E:  CLRF   xF9
08260:  CLRF   xFA
08262:  MOVLW  09
08264:  MOVWF  xFB
08266:  CLRF   xFC
08268:  CLRF   xFD
0826A:  CLRF   xFE
0826C:  MOVLW  0A
0826E:  MOVWF  xFF
08270:  MOVLB  6
08272:  CLRF   x00
08274:  CLRF   x01
08276:  CLRF   x02
08278:  MOVLW  0B
0827A:  MOVWF  x03
0827C:  CLRF   x04
0827E:  CLRF   x05
08280:  CLRF   x06
08282:  MOVLW  0C
08284:  MOVWF  x07
08286:  CLRF   x08
08288:  CLRF   x09
0828A:  CLRF   x0A
0828C:  MOVLW  0D
0828E:  MOVWF  x0B
08290:  CLRF   x0C
08292:  CLRF   x0D
08294:  CLRF   x0E
08296:  MOVLW  0E
08298:  MOVWF  x0F
0829A:  CLRF   x10
0829C:  CLRF   x11
0829E:  CLRF   x12
082A0:  MOVLW  0F
082A2:  MOVWF  x13
082A4:  CLRF   x14
082A6:  CLRF   x15
082A8:  CLRF   x16
082AA:  CLRF   x17
082AC:  CLRF   x18
082AE:  CLRF   x45
....................    mydevices.numberOfInputs=0; 
082B0:  MOVLB  1
082B2:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
082B4:  CLRF   x3F
....................    clock = 0; 
082B6:  MOVLB  6
082B8:  CLRF   x3D
082BA:  CLRF   x3C
082BC:  CLRF   x3B
082BE:  CLRF   x3A
....................    ledErrorCounter=0;    
082C0:  CLRF   x44
082C2:  CLRF   x43
....................    hw_setup(); 
082C4:  MOVLB  0
082C6:  GOTO   1D92
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 
082CA:  MOVLW  01
082CC:  MOVLB  6
082CE:  MOVWF  x5E
082D0:  MOVLW  02
082D2:  MOVWF  x5F
082D4:  MOVWF  x60
082D6:  MOVLB  0
082D8:  CALL   203A
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
082DC:  MOVLW  02
082DE:  MOVLB  6
082E0:  MOVWF  x46
082E2:  MOVLW  FF
082E4:  MOVWF  x47
082E6:  MOVWF  x48
082E8:  MOVWF  x49
082EA:  MOVWF  x4A
082EC:  MOVWF  x4B
082EE:  MOVWF  x4C
082F0:  MOVWF  x4D
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
082F2:  MOVLW  01
082F4:  MOVWF  x4E
082F6:  MOVLW  FF
082F8:  MOVWF  x4F
082FA:  MOVWF  x50
082FC:  MOVWF  x51
082FE:  MOVWF  x52
08300:  MOVWF  x53
08302:  MOVWF  x54
08304:  MOVWF  x55
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
08306:  MOVLW  01
08308:  MOVWF  x56
0830A:  MOVLW  FF
0830C:  MOVWF  x57
0830E:  MOVWF  x58
08310:  MOVWF  x59
08312:  MOVWF  x5A
08314:  MOVWF  x5B
08316:  MOVWF  x5C
08318:  MOVWF  x5D
....................    eeprom_onOff_out_init(on_adr,off_adr,4); 
0831A:  MOVLW  06
0831C:  MOVWF  x5F
0831E:  MOVLW  4E
08320:  MOVWF  x5E
08322:  MOVLW  06
08324:  MOVWF  x61
08326:  MOVLW  46
08328:  MOVWF  x60
0832A:  MOVLW  04
0832C:  MOVWF  x62
0832E:  MOVLB  0
08330:  CALL   20BA
....................    eeprom_on_off_init(3,4,4); 
08334:  MOVLW  03
08336:  MOVLB  6
08338:  MOVWF  x5E
0833A:  MOVLW  04
0833C:  MOVWF  x5F
0833E:  MOVWF  x60
08340:  MOVLB  0
08342:  CALL   203A
....................    off_adr[0]=4; 
08346:  MOVLW  04
08348:  MOVLB  6
0834A:  MOVWF  x46
....................    on_adr[0]=3; 
0834C:  MOVLW  03
0834E:  MOVWF  x4E
....................    eeprom_onOff_out_init(on_adr,off_adr,3); 
08350:  MOVLW  06
08352:  MOVWF  x5F
08354:  MOVLW  4E
08356:  MOVWF  x5E
08358:  MOVLW  06
0835A:  MOVWF  x61
0835C:  MOVLW  46
0835E:  MOVWF  x60
08360:  MOVLW  03
08362:  MOVWF  x62
08364:  MOVLB  0
08366:  CALL   20BA
....................    eeprom_button_init(5,6,0,true);//2 
0836A:  MOVLW  05
0836C:  MOVLB  6
0836E:  MOVWF  x5E
08370:  MOVLW  06
08372:  MOVWF  x5F
08374:  CLRF   x60
08376:  MOVLW  01
08378:  MOVWF  x61
0837A:  MOVLB  0
0837C:  CALL   2112
....................    eeprom_button_init(7,8,1,true);//2 
08380:  MOVLW  07
08382:  MOVLB  6
08384:  MOVWF  x5E
08386:  MOVLW  08
08388:  MOVWF  x5F
0838A:  MOVLW  01
0838C:  MOVWF  x60
0838E:  MOVWF  x61
08390:  MOVLB  0
08392:  CALL   2112
....................    off_adr[0]=255; 
08396:  MOVLW  FF
08398:  MOVLB  6
0839A:  MOVWF  x46
....................    on_adr[0]=5; 
0839C:  MOVLW  05
0839E:  MOVWF  x4E
....................    x_adr[0]=7; 
083A0:  MOVLW  07
083A2:  MOVWF  x56
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,1,10); 
083A4:  MOVLW  06
083A6:  MOVWF  x5F
083A8:  MOVLW  4E
083AA:  MOVWF  x5E
083AC:  MOVLW  06
083AE:  MOVWF  x61
083B0:  MOVLW  56
083B2:  MOVWF  x60
083B4:  MOVLW  06
083B6:  MOVWF  x63
083B8:  MOVLW  46
083BA:  MOVWF  x62
083BC:  MOVLW  06
083BE:  MOVWF  x65
083C0:  MOVLW  46
083C2:  MOVWF  x64
083C4:  MOVLW  0B
083C6:  MOVWF  x66
083C8:  MOVLW  0A
083CA:  MOVWF  x67
083CC:  MOVLW  01
083CE:  MOVWF  x68
083D0:  MOVLW  0A
083D2:  MOVWF  x69
083D4:  MOVLB  0
083D6:  GOTO   2168
....................    /////////////////////////////////////////////////7 
....................     
....................     
....................    readDevices(); 
083DA:  GOTO   2C00
....................    printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
083DE:  MOVLW  C2
083E0:  MOVWF  FF6
083E2:  MOVLW  1B
083E4:  MOVWF  FF7
083E6:  MOVLW  00
083E8:  MOVWF  FF8
083EA:  MOVLW  07
083EC:  MOVLB  6
083EE:  MOVWF  xBA
083F0:  MOVLB  0
083F2:  CALL   1E74
083F6:  MOVFF  13E,6BA
083FA:  MOVLW  1F
083FC:  MOVLB  6
083FE:  MOVWF  xBB
08400:  MOVLB  0
08402:  CALL   1ED0
08406:  MOVLW  CB
08408:  MOVWF  FF6
0840A:  MOVLW  1B
0840C:  MOVWF  FF7
0840E:  MOVLW  00
08410:  MOVWF  FF8
08412:  MOVLW  09
08414:  MOVLB  6
08416:  MOVWF  xBA
08418:  MOVLB  0
0841A:  CALL   1E74
0841E:  MOVFF  13F,6BA
08422:  MOVLW  1F
08424:  MOVLB  6
08426:  MOVWF  xBB
08428:  MOVLB  0
0842A:  CALL   1ED0
0842E:  MOVLW  20
08430:  MOVLB  6
08432:  MOVWF  xC0
08434:  MOVLB  0
08436:  CALL   1E2E
0843A:  MOVFF  28A,6BA
0843E:  MOVLW  1F
08440:  MOVLB  6
08442:  MOVWF  xBB
08444:  MOVLB  0
08446:  CALL   1ED0
0844A:  MOVLW  20
0844C:  MOVLB  6
0844E:  MOVWF  xC0
08450:  MOVLB  0
08452:  CALL   1E2E
08456:  MOVFF  2B9,6BA
0845A:  MOVLW  1F
0845C:  MOVLB  6
0845E:  MOVWF  xBB
08460:  MOVLB  0
08462:  CALL   1ED0
08466:  MOVLW  0A
08468:  MOVLB  6
0846A:  MOVWF  xC0
0846C:  MOVLB  0
0846E:  CALL   1E2E
08472:  MOVLW  0D
08474:  MOVLB  6
08476:  MOVWF  xC0
08478:  MOVLB  0
0847A:  CALL   1E2E
....................     
....................    dimmer_outputs_init(); 
0847E:  GOTO   3A8C
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
08482:  CALL   3C20
....................   
....................  interrupts_enable(); 
08486:  GOTO   5008
....................  printf("start\n\r"); 
0848A:  MOVLW  E0
0848C:  MOVWF  FF6
0848E:  MOVLW  1B
08490:  MOVWF  FF7
08492:  MOVLW  00
08494:  MOVWF  FF8
08496:  CALL   2222
....................    while(true){ 
....................    restart_wdt(); 
0849A:  CLRWDT
....................    if(syncError) 
0849C:  BTFSS  xB5.5
0849E:  BRA    84C2
....................    {   
....................       ++ledErrorCounter; 
084A0:  MOVLB  6
084A2:  INCF   x43,F
084A4:  BTFSC  FD8.2
084A6:  INCF   x44,F
....................       if(ledErrorCounter>1000) 
084A8:  MOVF   x44,W
084AA:  SUBLW  02
084AC:  BC    84C0
084AE:  XORLW  FF
084B0:  BNZ   84B8
084B2:  MOVF   x43,W
084B4:  SUBLW  E8
084B6:  BC    84C0
....................       { 
....................          output_toggle(LED); 
084B8:  BCF    F96.2
084BA:  BTG    F8D.2
....................          ledErrorCounter=0; 
084BC:  CLRF   x44
084BE:  CLRF   x43
084C0:  MOVLB  0
....................       } 
....................    } 
....................    if(kbhit()) 
084C2:  BTFSC  F81.4
084C4:  BRA    84D4
....................    { 
....................       setup_wdt(WDT_OFF); 
084C6:  BCF    FD1.0
....................       disable_interrupts (GLOBAL) ; 
084C8:  BCF    FF2.6
084CA:  BCF    FF2.7
084CC:  BTFSC  FF2.7
084CE:  BRA    84CA
....................       goDebug(); 
084D0:  GOTO   554C
....................    } 
....................     
....................    process_outpoints(); 
084D4:  GOTO   628A
....................    write_outputs(); 
084D8:  CALL   3C20
....................    if(secondFlag) 
084DC:  BTFSS  xB5.4
084DE:  BRA    84EE
....................    { 
....................       secondFlag=false; 
084E0:  BCF    xB5.4
....................       processTimedEvents(); 
084E2:  GOTO   71D2
....................       if(!syncError) output_toggle(LED); 
084E6:  BTFSC  xB5.5
084E8:  BRA    84EE
084EA:  BCF    F96.2
084EC:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
084EE:  BRA    849A
.................... } 
....................  
084F0:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 151F   BROWNOUT WDT BORV20 NOPUT WDT1024
   Word  3: 0600   PBADEN LPT1OSC NOMCLR
   Word  4: 00B1   STVREN NODEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
