CCS PCH C Compiler, Version 4.106, 32200               18-Abr-13 23:17

               Filename: C:\Users\Xapo\Documents\Electronica\domos2011\FW\light_mod\main.lst

               ROM used: 34888 bytes (36%)
                         Largest free fragment is 31936
               RAM used: 1609 (49%) at main() level
                         1798 (54%) worst case
               Stack:    9 worst case (5 in main + 4 for interrupts)

*
00000:  GOTO   8368
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  FF2.5
0005E:  GOTO   0068
00062:  BTFSC  FF2.2
00064:  GOTO   0EB2
00068:  BTFSS  F9D.0
0006A:  GOTO   0074
0006E:  BTFSC  F9E.0
00070:  GOTO   0F52
00074:  BTFSS  F9D.1
00076:  GOTO   0080
0007A:  BTFSC  F9E.1
0007C:  GOTO   0F7A
00080:  BTFSS  FF2.4
00082:  GOTO   008C
00086:  BTFSC  FF2.1
00088:  GOTO   0FA4
0008C:  BTFSS  F9D.5
0008E:  GOTO   0098
00092:  BTFSC  F9E.5
00094:  GOTO   122C
00098:  BTFSS  F9D.4
0009A:  GOTO   00A4
0009E:  BTFSC  F9E.4
000A0:  GOTO   1232
000A4:  BTFSS  F9D.2
000A6:  GOTO   00B0
000AA:  BTFSC  F9E.2
000AC:  GOTO   10F4
000B0:  BTFSS  FA0.3
000B2:  GOTO   00BC
000B6:  BTFSC  FA1.3
000B8:  GOTO   1238
000BC:  BTFSS  FA3.7
000BE:  GOTO   00C8
000C2:  BTFSC  FA4.7
000C4:  GOTO   1C84
000C8:  BTFSS  FA3.5
000CA:  GOTO   00D4
000CE:  BTFSC  FA4.5
000D0:  GOTO   1C8A
000D4:  BTFSS  FA3.4
000D6:  GOTO   00E0
000DA:  BTFSC  FA4.4
000DC:  GOTO   1C7C
000E0:  BTFSS  FA3.3
000E2:  GOTO   00EC
000E6:  BTFSC  FA4.3
000E8:  GOTO   1C74
000EC:  BTFSS  FA3.2
000EE:  GOTO   00F8
000F2:  BTFSC  FA4.2
000F4:  GOTO   1C6C
000F8:  BTFSS  FA3.1
000FA:  GOTO   0104
000FE:  BTFSC  FA4.1
00100:  GOTO   1828
00104:  BTFSS  FA3.0
00106:  GOTO   0110
0010A:  BTFSC  FA4.0
0010C:  GOTO   1820
00110:  BTFSS  FA0.7
00112:  GOTO   011C
00116:  BTFSC  FA1.7
00118:  GOTO   123E
0011C:  MOVFF  0E,00
00120:  MOVFF  0F,01
00124:  MOVFF  10,02
00128:  MOVFF  11,03
0012C:  MOVFF  0C,FE9
00130:  MOVFF  07,FEA
00134:  BSF    07.7
00136:  MOVFF  08,FE1
0013A:  MOVFF  09,FE2
0013E:  MOVFF  0A,FD9
00142:  MOVFF  0B,FDA
00146:  MOVFF  12,FF3
0014A:  MOVFF  13,FF4
0014E:  MOVFF  14,FFA
00152:  MOVFF  15,FF5
00156:  MOVFF  16,FF6
0015A:  MOVFF  17,FF7
0015E:  MOVFF  18,FF8
00162:  MOVFF  19,FFB
00166:  MOVF   04,W
00168:  MOVFF  06,FE0
0016C:  MOVFF  05,FD8
00170:  RETFIE 0
....................  
.................... #include "main.h" 
.................... #include <18F4685.h> 
.................... //////// Standard Header file for the PIC18F4685 device //////////////// 
.................... #device PIC18F4685 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT256                  //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                       //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES BORV45                   //Brownout reset at 2.0V 
.................... #FUSES PUT                    //No Power Up Timer 
.................... #FUSES CPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ4K                  //4K words Boot Block size 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES NOLPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                     //Master Clear pin enabled 
.................... //#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(clock=40000000,RESTART_WDT) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B5,rcv=PIN_B4,bits=8,restart_wdt) 
*
00ED6:  BCF    F93.5
00ED8:  BCF    F8A.5
00EDA:  MOVLW  08
00EDC:  MOVWF  01
00EDE:  BRA    0EE0
00EE0:  NOP   
00EE2:  BSF    01.7
00EE4:  BRA    0F06
00EE6:  BCF    01.7
00EE8:  MOVLB  6
00EEA:  RRCF   xDC,F
00EEC:  MOVLB  0
00EEE:  BTFSC  FD8.0
00EF0:  BSF    F8A.5
00EF2:  BTFSS  FD8.0
00EF4:  BCF    F8A.5
00EF6:  BSF    01.6
00EF8:  BRA    0F06
00EFA:  BCF    01.6
00EFC:  DECFSZ 01,F
00EFE:  BRA    0EE8
00F00:  BRA    0F02
00F02:  NOP   
00F04:  BSF    F8A.5
00F06:  MOVLW  01
00F08:  MOVWF  00
00F0A:  CLRF   FE9
00F0C:  DECFSZ FE9,F
00F0E:  BRA    0F0C
00F10:  DECFSZ 00,F
00F12:  BRA    0F0A
00F14:  MOVLW  53
00F16:  MOVWF  FE9
00F18:  DECFSZ FE9,F
00F1A:  BRA    0F18
00F1C:  BRA    0F1E
00F1E:  CLRWDT
00F20:  BTFSC  01.7
00F22:  BRA    0EE6
00F24:  BTFSC  01.6
00F26:  BRA    0EFA
00F28:  RETLW  00
*
05224:  BSF    F93.4
05226:  CLRWDT
05228:  BTFSC  F81.4
0522A:  BRA    5226
0522C:  MOVLW  08
0522E:  MOVWF  00
05230:  MOVLB  6
05232:  CLRF   x64
05234:  BSF    00.7
05236:  BRA    5254
05238:  BCF    00.7
0523A:  BRA    5254
0523C:  BCF    FD8.0
0523E:  BTFSC  F81.4
05240:  BSF    FD8.0
05242:  RRCF   x64,F
05244:  BSF    00.6
05246:  BRA    5254
05248:  BCF    00.6
0524A:  DECFSZ 00,F
0524C:  BRA    523C
0524E:  MOVFF  664,01
05252:  BRA    5280
05254:  MOVLW  01
05256:  MOVWF  FE9
05258:  MOVLW  00
0525A:  BTFSC  00.7
0525C:  MOVLW  55
0525E:  MOVWF  01
05260:  DECFSZ 01,F
05262:  BRA    5260
05264:  DECFSZ FE9,F
05266:  BRA    5258
05268:  MOVLW  52
0526A:  BTFSC  00.7
0526C:  MOVLW  16
0526E:  MOVWF  01
05270:  DECFSZ 01,F
05272:  BRA    5270
05274:  BRA    5276
05276:  BTFSC  00.7
05278:  BRA    5238
0527A:  BTFSC  00.6
0527C:  BRA    5248
0527E:  BRA    523C
05280:  MOVLB  0
05282:  RETLW  00
....................  
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\global_defs.h" 
.................... #define  NUMBER_OF_SWITCHES 8 
.................... #define  LED PIN_E2 
.................... #define  OUT1  PIN_C0   //16 
.................... #define  OUT2  PIN_C1   //15 
.................... #define  OUT3  PIN_C2   //14 
.................... #define  OUT4  PIN_C3   //13 
.................... #define  OUT5  PIN_C4   //12 
.................... #define  OUT6  PIN_C5   //11 
.................... #define  OUT7  PIN_C6   //10 
.................... #define  OUT8  PIN_C7   //9 
.................... #define  OUT9  PIN_D1   //8 
.................... #define  OUT10  PIN_D0  //7 
.................... #define  OUT11  PIN_D2  //6 
.................... #define  OUT12  PIN_D3  //5 
.................... #define  OUT13  PIN_D7  //4 
.................... #define  OUT14  PIN_D6  //3 
.................... #define  OUT15  PIN_D5  //2 
.................... #define  OUT16  PIN_D4  //1 
....................  
.................... #define  INP1  PIN_A0 
.................... #define  INP2  PIN_A1 
.................... #define  INP3  PIN_A2 
.................... #define  INP4  PIN_A3 
.................... #define  INP5  PIN_A4 
.................... #define  INP6  PIN_A5 
.................... #define  INP7  PIN_E0 
.................... #define  INP8  PIN_E1 
....................  
.................... #byte porta=0xf80 
.................... #byte portb=0xf81 
.................... #byte portc=0xf82 
.................... #byte portd=0xf83 
.................... #byte porte=0xf84 
.................... #byte trisa=0xf92 
.................... #byte trisb=0xf93 
.................... #byte trisc=0xf94 
.................... #byte trisd=0xf95 
.................... #byte trise=0xf96 
....................  
.................... static int inputs[8]={INP1,INP2,INP3,INP4,INP5,INP6,INP7,INP8}; 
....................  
.................... volatile unsigned int32 secClock=0; 
....................  
.................... #include "C:\Users\Programacao\Documents\CCS_Projects\18F\LightMod\can_functions.c" 
.................... #define CAN_USE_EXTENDED_ID FALSE 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specifid message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transeiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = 0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = 0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT=0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1=0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2=0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3=0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive caputre 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON=0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON=0xF40 
.................... #byte   TXB1CON=0xF30 
.................... #byte   TXB2CON=0xF20 
.................... #byte TXBaCON=0xF60 //txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH=0xF41 
.................... #byte TXB0SIDL=0xF42 
.................... #byte TXB1SIDH=0xF31 
.................... #byte TXB1SIDL=0xF32 
.................... #byte TXB2SIDH=0xF21 
.................... #byte TXB2SIDL=0xF22 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH=0xF43 
.................... #byte TXB0EIDL=0xF44 
.................... #byte TXB1EIDH=0xF33 
.................... #byte TXB1EIDL=0xF34 
.................... #byte TXB2EIDH=0xF23 
.................... #byte TXB2EIDL=0xF24 
....................  
.................... #define RX0MASK      0xF1B    //rxm0eidl 
.................... #define RX1MASK      0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   0xF03    //rxf0eidl 
.................... #define RX0FILTER1   0xF07    //rxf1eidl 
.................... #define RX1FILTER2   0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   0xF13    //rxf4eidl 
.................... #define RX1FILTER5   0xF17    //rxf5eidl 
.................... #define RXB0ID       0xF64    //rxb0eidl 
.................... #define RXB1ID       0xF54    //rxb1eidl 
.................... #define TXB0ID       0xF44    //txb0eidl 
.................... #define TXB1ID       0xF34    //txb1eidl 
.................... #define TXB2ID       0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0=0xF46 
.................... #byte TXB0D7=0xF4D 
.................... #byte TXB1D0=0xF36 
.................... #byte TXB1D7=0xF3D 
.................... #byte TXB2D0=0xF26 
.................... #byte TXB2D7=0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote tranmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC=0xF45 
.................... #byte TXB1DLC=0xF35 
.................... #byte TXB2DLC=0xF25 
.................... #byte TXBaDLC=0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON=0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON=0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH=0xF61 
.................... #byte   RXB0SIDL=0xF62 
.................... #byte   RXB1SIDH=0xF51 
.................... #byte   RXB1SIDL=0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH=0xF63 
.................... #byte   RXB0EIDL=0xF64 
.................... #byte   RXB1EIDH=0xF53 
.................... #byte   RXB1EIDL=0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extendid id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC=0xF65 
.................... #byte   RXB1DLC=0xF55 
.................... #byte   RXBaDLC=0xF65 
....................  
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0=0xF66 
.................... #byte RXB0D7=0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT=0xF75 
....................  
.................... //receive acceptance filter n standard indifier 
.................... #byte RXF0SIDH=0xF00 
.................... #byte RXF0SIDL=0xF01 
.................... #byte RXF1SIDH=0xF04 
.................... #byte RXF1SIDL=0xF05 
.................... #byte RXF2SIDH=0xF08 
.................... #byte RXF2SIDL=0xF09 
.................... #byte RXF3SIDH=0xF0C 
.................... #byte RXF3SIDL=0xF0D 
.................... #byte RXF4SIDH=0xF10 
.................... #byte RXF4SIDL=0xF11 
.................... #byte RXF5SIDH=0xF14 
.................... #byte RXF5SIDL=0xF15 
....................  
.................... //receive acceptance filter n extended indifier 
.................... #byte RXF0EIDH=0xF02 
.................... #byte RXF0EIDL=0xF03 
.................... #byte RXF1EIDH=0xF06 
.................... #byte RXF1EIDL=0xF07 
.................... #byte RXF2EIDH=0xF0A 
.................... #byte RXF2EIDL=0xF0B 
.................... #byte RXF3EIDH=0xF0E 
.................... #byte RXF3EIDL=0xF0F 
.................... #byte RXF4EIDH=0xF12 
.................... #byte RXF4EIDL=0xF13 
.................... #byte RXF5EIDH=0xF16 
.................... #byte RXF5EIDL=0xF17 
....................  
.................... //receive acceptance mask n standard identifer mask 
.................... #byte RXM0SIDH=0xF18 
.................... #byte RXM0SIDL=0xF19 
.................... #byte RXM1SIDH=0xF1C 
.................... #byte RXM1SIDL=0xF1D 
....................  
.................... //receive acceptance mask n extended identifer mask 
.................... #byte RXM0EIDH=0xF1A 
.................... #byte RXM0EIDL=0xF1B 
.................... #byte RXM1EIDH=0xF1E 
.................... #byte RXM1EIDL=0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = 0xFA4.7 
.................... #bit CAN_INT_WAKIF = 0xFA4.6 
.................... #bit CAN_INT_ERRIF = 0xFA4.5 
.................... #bit CAN_INT_TXB2IF = 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(int* addr, int32 id, int1 ext); 
.................... int32 can_get_id(int * addr, int1 ext); 
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
01D04:  MOVLW  04
01D06:  MOVLB  6
01D08:  MOVWF  x61
01D0A:  MOVLB  0
01D0C:  RCALL  1CAE
....................    can_set_baud(); 
01D0E:  BRA    1CD4
....................  
....................    RXB0CON=0; 
01D10:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
01D12:  MOVLW  9F
01D14:  ANDWF  F60,W
01D16:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
01D18:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
01D1A:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
01D1E:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
01D20:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
01D22:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
01D24:  BCF    F73.6
01D26:  CLRF   1B
01D28:  BTFSC  FF2.7
01D2A:  BSF    1B.7
01D2C:  BCF    FF2.7
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
01D2E:  MOVLW  0F
01D30:  MOVLB  6
01D32:  MOVWF  xFA
01D34:  MOVLW  1B
01D36:  MOVWF  xF9
01D38:  CLRF   xFE
01D3A:  CLRF   xFD
01D3C:  CLRF   xFC
01D3E:  CLRF   xFB
01D40:  CLRF   xFF
01D42:  MOVLB  0
01D44:  RCALL  1830
01D46:  BTFSC  1B.7
01D48:  BSF    FF2.7
01D4A:  CLRF   1B
01D4C:  BTFSC  FF2.7
01D4E:  BSF    1B.7
01D50:  BCF    FF2.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
01D52:  MOVLW  0F
01D54:  MOVLB  6
01D56:  MOVWF  xFA
01D58:  MOVLW  03
01D5A:  MOVWF  xF9
01D5C:  CLRF   xFE
01D5E:  CLRF   xFD
01D60:  CLRF   xFC
01D62:  CLRF   xFB
01D64:  CLRF   xFF
01D66:  MOVLB  0
01D68:  RCALL  1830
01D6A:  BTFSC  1B.7
01D6C:  BSF    FF2.7
01D6E:  CLRF   1B
01D70:  BTFSC  FF2.7
01D72:  BSF    1B.7
01D74:  BCF    FF2.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
01D76:  MOVLW  0F
01D78:  MOVLB  6
01D7A:  MOVWF  xFA
01D7C:  MOVLW  07
01D7E:  MOVWF  xF9
01D80:  CLRF   xFE
01D82:  CLRF   xFD
01D84:  CLRF   xFC
01D86:  CLRF   xFB
01D88:  CLRF   xFF
01D8A:  MOVLB  0
01D8C:  RCALL  1830
01D8E:  BTFSC  1B.7
01D90:  BSF    FF2.7
01D92:  CLRF   1B
01D94:  BTFSC  FF2.7
01D96:  BSF    1B.7
01D98:  BCF    FF2.7
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
01D9A:  MOVLW  0F
01D9C:  MOVLB  6
01D9E:  MOVWF  xFA
01DA0:  MOVLW  1F
01DA2:  MOVWF  xF9
01DA4:  CLRF   xFE
01DA6:  CLRF   xFD
01DA8:  CLRF   xFC
01DAA:  CLRF   xFB
01DAC:  CLRF   xFF
01DAE:  MOVLB  0
01DB0:  RCALL  1830
01DB2:  BTFSC  1B.7
01DB4:  BSF    FF2.7
01DB6:  CLRF   1B
01DB8:  BTFSC  FF2.7
01DBA:  BSF    1B.7
01DBC:  BCF    FF2.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
01DBE:  MOVLW  0F
01DC0:  MOVLB  6
01DC2:  MOVWF  xFA
01DC4:  MOVLW  0B
01DC6:  MOVWF  xF9
01DC8:  CLRF   xFE
01DCA:  CLRF   xFD
01DCC:  CLRF   xFC
01DCE:  CLRF   xFB
01DD0:  CLRF   xFF
01DD2:  MOVLB  0
01DD4:  RCALL  1830
01DD6:  BTFSC  1B.7
01DD8:  BSF    FF2.7
01DDA:  CLRF   1B
01DDC:  BTFSC  FF2.7
01DDE:  BSF    1B.7
01DE0:  BCF    FF2.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
01DE2:  MOVLW  0F
01DE4:  MOVLB  6
01DE6:  MOVWF  xFA
01DE8:  MOVWF  xF9
01DEA:  CLRF   xFE
01DEC:  CLRF   xFD
01DEE:  CLRF   xFC
01DF0:  CLRF   xFB
01DF2:  CLRF   xFF
01DF4:  MOVLB  0
01DF6:  RCALL  1830
01DF8:  BTFSC  1B.7
01DFA:  BSF    FF2.7
01DFC:  CLRF   1B
01DFE:  BTFSC  FF2.7
01E00:  BSF    1B.7
01E02:  BCF    FF2.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
01E04:  MOVLW  0F
01E06:  MOVLB  6
01E08:  MOVWF  xFA
01E0A:  MOVLW  13
01E0C:  MOVWF  xF9
01E0E:  CLRF   xFE
01E10:  CLRF   xFD
01E12:  CLRF   xFC
01E14:  CLRF   xFB
01E16:  CLRF   xFF
01E18:  MOVLB  0
01E1A:  RCALL  1830
01E1C:  BTFSC  1B.7
01E1E:  BSF    FF2.7
01E20:  CLRF   1B
01E22:  BTFSC  FF2.7
01E24:  BSF    1B.7
01E26:  BCF    FF2.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
01E28:  MOVLW  0F
01E2A:  MOVLB  6
01E2C:  MOVWF  xFA
01E2E:  MOVLW  17
01E30:  MOVWF  xF9
01E32:  CLRF   xFE
01E34:  CLRF   xFD
01E36:  CLRF   xFC
01E38:  CLRF   xFB
01E3A:  CLRF   xFF
01E3C:  MOVLB  0
01E3E:  RCALL  1830
01E40:  BTFSC  1B.7
01E42:  BSF    FF2.7
....................  
....................    set_tris_b((*0xF93 & 0xFB ) | 0x08);   //b3 is out, b2 is in 
01E44:  MOVF   F93,W
01E46:  ANDLW  FB
01E48:  IORLW  08
01E4A:  MOVLB  6
01E4C:  MOVWF  F93
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
01E4E:  CLRF   x61
01E50:  MOVLB  0
01E52:  RCALL  1CAE
.................... } 
01E54:  GOTO   1E5A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
01CD4:  MOVLW  C0
01CD6:  ANDWF  F70,W
01CD8:  IORLW  04
01CDA:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
01CDC:  MOVLW  3F
01CDE:  ANDWF  F70,W
01CE0:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
01CE2:  MOVLW  F8
01CE4:  ANDWF  F71,W
01CE6:  IORLW  02
01CE8:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
01CEA:  MOVLW  C7
01CEC:  ANDWF  F71,W
01CEE:  IORLW  28
01CF0:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
01CF2:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
01CF4:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
01CF6:  MOVLW  F8
01CF8:  ANDWF  F72,W
01CFA:  IORLW  05
01CFC:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
01CFE:  BCF    F72.6
.................... } 
01D00:  GOTO   1D10 (RETURN)
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
01CAE:  MOVLB  6
01CB0:  SWAPF  x61,W
01CB2:  ANDLW  70
01CB4:  MOVWF  00
01CB6:  BCF    FD8.0
01CB8:  RLCF   00,F
01CBA:  MOVLW  1F
01CBC:  ANDWF  F6F,W
01CBE:  IORWF  00,W
01CC0:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
01CC2:  MOVFF  F6E,00
01CC6:  SWAPF  00,F
01CC8:  RRCF   00,W
01CCA:  ANDLW  07
01CCC:  SUBWF  x61,W
01CCE:  BNZ   1CC2
.................... } 
01CD0:  MOVLB  0
01CD2:  RETLW  00
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(int* addr, int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
01830:  MOVFF  6FA,701
01834:  MOVFF  6F9,700
....................  
....................    if (ext) {  //extended 
01838:  MOVLB  6
0183A:  MOVF   xFF,F
0183C:  BZ    18F4
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
0183E:  MOVFF  700,FE9
01842:  MOVFF  701,FEA
01846:  MOVLB  6
01848:  MOVFF  6FB,FEF
....................  
....................       //eidh 
....................       ptr--; 
0184C:  MOVLB  7
0184E:  MOVF   x00,W
01850:  BTFSC  FD8.2
01852:  DECF   x01,F
01854:  DECF   x00,F
....................       *ptr=make8(id,1); //8:15 
01856:  MOVFF  700,FE9
0185A:  MOVFF  701,FEA
0185E:  MOVLB  6
01860:  MOVFF  6FC,FEF
....................  
....................       //sidl 
....................       ptr--; 
01864:  MOVLB  7
01866:  MOVF   x00,W
01868:  BTFSC  FD8.2
0186A:  DECF   x01,F
0186C:  DECF   x00,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
0186E:  MOVFF  700,FE9
01872:  MOVFF  701,FEA
01876:  MOVLB  6
01878:  MOVF   xFD,W
0187A:  ANDLW  03
0187C:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
0187E:  MOVFF  700,FE9
01882:  MOVFF  701,FEA
01886:  MOVLB  6
01888:  MOVFF  6FD,00
0188C:  RLCF   00,F
0188E:  RLCF   00,F
01890:  RLCF   00,F
01892:  MOVLW  F8
01894:  ANDWF  00,F
01896:  MOVF   00,W
01898:  ANDLW  E0
0189A:  IORWF  FEF,W
0189C:  MOVWF  FEF
....................       *ptr|=0x08; 
0189E:  MOVLB  7
018A0:  MOVFF  700,FE9
018A4:  MOVFF  701,FEA
018A8:  MOVF   FEF,W
018AA:  IORLW  08
018AC:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
018AE:  MOVF   x00,W
018B0:  BTFSC  FD8.2
018B2:  DECF   x01,F
018B4:  DECF   x00,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
018B6:  MOVFF  700,FE9
018BA:  MOVFF  701,FEA
018BE:  MOVLB  6
018C0:  MOVFF  6FD,00
018C4:  SWAPF  00,F
018C6:  RRCF   00,F
018C8:  MOVLW  07
018CA:  ANDWF  00,F
018CC:  MOVF   00,W
018CE:  ANDLW  07
018D0:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
018D2:  MOVFF  700,FE9
018D6:  MOVFF  701,FEA
018DA:  MOVLB  6
018DC:  MOVFF  6FE,00
018E0:  RLCF   00,F
018E2:  RLCF   00,F
018E4:  RLCF   00,F
018E6:  MOVLW  F8
018E8:  ANDWF  00,F
018EA:  MOVF   00,W
018EC:  ANDLW  F8
018EE:  IORWF  FEF,W
018F0:  MOVWF  FEF
....................    } 
....................    else {   //standard 
018F2:  BRA    197C
....................       //eidl 
....................       *ptr=0; 
018F4:  MOVLB  7
018F6:  MOVFF  700,FE9
018FA:  MOVFF  701,FEA
018FE:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
01900:  MOVF   x00,W
01902:  BTFSC  FD8.2
01904:  DECF   x01,F
01906:  DECF   x00,F
....................       *ptr=0; 
01908:  MOVFF  700,FE9
0190C:  MOVFF  701,FEA
01910:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
01912:  MOVF   x00,W
01914:  BTFSC  FD8.2
01916:  DECF   x01,F
01918:  DECF   x00,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
0191A:  MOVFF  700,FE9
0191E:  MOVFF  701,FEA
01922:  MOVLB  6
01924:  MOVFF  6FB,00
01928:  SWAPF  00,F
0192A:  RLCF   00,F
0192C:  MOVLW  E0
0192E:  ANDWF  00,F
01930:  MOVF   00,W
01932:  ANDLW  E0
01934:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
01936:  MOVLB  7
01938:  MOVF   x00,W
0193A:  BTFSC  FD8.2
0193C:  DECF   x01,F
0193E:  DECF   x00,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
01940:  MOVFF  700,FE9
01944:  MOVFF  701,FEA
01948:  MOVLB  6
0194A:  MOVFF  6FB,00
0194E:  RRCF   00,F
01950:  RRCF   00,F
01952:  RRCF   00,F
01954:  MOVLW  1F
01956:  ANDWF  00,F
01958:  MOVF   00,W
0195A:  ANDLW  1F
0195C:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
0195E:  MOVFF  700,FE9
01962:  MOVFF  701,FEA
01966:  MOVLB  6
01968:  MOVFF  6FC,00
0196C:  SWAPF  00,F
0196E:  RLCF   00,F
01970:  MOVLW  E0
01972:  ANDWF  00,F
01974:  MOVF   00,W
01976:  ANDLW  E0
01978:  IORWF  FEF,W
0197A:  MOVWF  FEF
....................    } 
.................... } 
0197C:  MOVLB  0
0197E:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Paramaters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int32 can_get_id(int * addr, int1 ext) { 
....................    int32 ret; 
....................    int * ptr; 
....................  
....................    ret=0; 
*
01246:  MOVLB  6
01248:  CLRF   xFB
0124A:  CLRF   xFA
0124C:  CLRF   xF9
0124E:  CLRF   xF8
....................    ptr=addr; 
01250:  MOVFF  6F6,6FD
01254:  MOVFF  6F5,6FC
....................  
....................    if (ext) { 
01258:  MOVF   xF7,F
0125A:  BTFSC  FD8.2
0125C:  BRA    13A2
....................       ret=*ptr;  //eidl 
0125E:  MOVFF  6FD,03
01262:  MOVFF  6FC,FE9
01266:  MOVFF  6FD,FEA
0126A:  MOVFF  FEF,00
0126E:  CLRF   01
01270:  CLRF   02
01272:  CLRF   03
01274:  MOVFF  03,6FB
01278:  MOVFF  02,6FA
0127C:  MOVFF  01,6F9
01280:  MOVFF  00,6F8
....................  
....................       ptr--;     //eidh 
01284:  MOVF   xFC,W
01286:  BTFSC  FD8.2
01288:  DECF   xFD,F
0128A:  DECF   xFC,F
....................       ret|=((int32)*ptr << 8); 
0128C:  MOVFF  6FC,FE9
01290:  MOVFF  6FD,FEA
01294:  MOVF   FEF,W
01296:  MOVLB  7
01298:  CLRF   x00
0129A:  MOVLB  6
0129C:  CLRF   xFF
0129E:  MOVWF  xFE
012A0:  MOVFF  700,03
012A4:  CLRF   00
012A6:  MOVF   00,W
012A8:  IORWF  xF8,F
012AA:  MOVF   xFE,W
012AC:  IORWF  xF9,F
012AE:  MOVF   xFF,W
012B0:  IORWF  xFA,F
012B2:  MOVF   03,W
012B4:  IORWF  xFB,F
....................  
....................       ptr--;     //sidl 
012B6:  MOVF   xFC,W
012B8:  BTFSC  FD8.2
012BA:  DECF   xFD,F
012BC:  DECF   xFC,F
....................       ret|=((int32)*ptr & 0x03) << 16; 
012BE:  MOVFF  6FC,FE9
012C2:  MOVFF  6FD,FEA
012C6:  MOVF   FEF,W
012C8:  MOVLB  7
012CA:  CLRF   x01
012CC:  CLRF   x00
012CE:  MOVLB  6
012D0:  CLRF   xFF
012D2:  MOVWF  xFE
012D4:  MOVLW  03
012D6:  ANDWF  xFE,F
012D8:  CLRF   xFF
012DA:  MOVLB  7
012DC:  CLRF   x00
012DE:  CLRF   x01
012E0:  CLRF   00
012E2:  CLRF   01
012E4:  MOVF   00,W
012E6:  MOVLB  6
012E8:  IORWF  xF8,F
012EA:  MOVF   01,W
012EC:  IORWF  xF9,F
012EE:  MOVF   xFE,W
012F0:  IORWF  xFA,F
012F2:  MOVF   xFF,W
012F4:  IORWF  xFB,F
....................       ret|=((int32)*ptr & 0xE0) << 13; 
012F6:  MOVFF  6FC,FE9
012FA:  MOVFF  6FD,FEA
012FE:  MOVF   FEF,W
01300:  MOVLB  7
01302:  CLRF   x01
01304:  CLRF   x00
01306:  MOVLB  6
01308:  CLRF   xFF
0130A:  MOVWF  xFE
0130C:  MOVLW  E0
0130E:  ANDWF  xFE,F
01310:  CLRF   xFF
01312:  MOVLB  7
01314:  CLRF   x00
01316:  CLRF   x01
01318:  CLRF   00
0131A:  MOVLB  6
0131C:  RLCF   xFE,W
0131E:  MOVWF  01
01320:  RLCF   xFF,W
01322:  MOVWF  02
01324:  MOVLB  7
01326:  RLCF   x00,W
01328:  MOVWF  03
0132A:  RLCF   01,F
0132C:  RLCF   02,F
0132E:  RLCF   03,F
01330:  RLCF   01,F
01332:  RLCF   02,F
01334:  RLCF   03,F
01336:  RLCF   01,F
01338:  RLCF   02,F
0133A:  RLCF   03,F
0133C:  RLCF   01,F
0133E:  RLCF   02,F
01340:  RLCF   03,F
01342:  MOVLW  E0
01344:  ANDWF  01,F
01346:  MOVF   00,W
01348:  MOVLB  6
0134A:  IORWF  xF8,F
0134C:  MOVF   01,W
0134E:  IORWF  xF9,F
01350:  MOVF   02,W
01352:  IORWF  xFA,F
01354:  MOVF   03,W
01356:  IORWF  xFB,F
....................  
....................       ptr--;     //sidh 
01358:  MOVF   xFC,W
0135A:  BTFSC  FD8.2
0135C:  DECF   xFD,F
0135E:  DECF   xFC,F
....................       ret|=((int32)*ptr << 21); 
01360:  MOVFF  6FC,FE9
01364:  MOVFF  6FD,FEA
01368:  MOVF   FEF,W
0136A:  MOVLB  6
0136C:  CLRF   xFF
0136E:  MOVWF  xFE
01370:  CLRF   00
01372:  CLRF   01
01374:  RLCF   xFE,W
01376:  MOVWF  02
01378:  RLCF   xFF,W
0137A:  MOVWF  03
0137C:  RLCF   02,F
0137E:  RLCF   03,F
01380:  RLCF   02,F
01382:  RLCF   03,F
01384:  RLCF   02,F
01386:  RLCF   03,F
01388:  RLCF   02,F
0138A:  RLCF   03,F
0138C:  MOVLW  E0
0138E:  ANDWF  02,F
01390:  MOVF   00,W
01392:  IORWF  xF8,F
01394:  MOVF   01,W
01396:  IORWF  xF9,F
01398:  MOVF   02,W
0139A:  IORWF  xFA,F
0139C:  MOVF   03,W
0139E:  IORWF  xFB,F
....................  
....................    } 
....................    else { 
013A0:  BRA    145C
....................       ptr-=2;    //sidl 
013A2:  MOVLW  02
013A4:  SUBWF  xFC,F
013A6:  MOVLW  00
013A8:  SUBWFB xFD,F
....................       ret=((int32)*ptr & 0xE0) >> 5; 
013AA:  MOVFF  6FC,FE9
013AE:  MOVFF  6FD,FEA
013B2:  MOVF   FEF,W
013B4:  MOVLB  7
013B6:  CLRF   x01
013B8:  CLRF   x00
013BA:  MOVLB  6
013BC:  CLRF   xFF
013BE:  MOVWF  xFE
013C0:  MOVLW  E0
013C2:  ANDWF  xFE,F
013C4:  CLRF   xFF
013C6:  MOVLB  7
013C8:  CLRF   x00
013CA:  CLRF   x01
013CC:  RRCF   x01,W
013CE:  MOVLB  6
013D0:  MOVWF  xFB
013D2:  MOVLB  7
013D4:  RRCF   x00,W
013D6:  MOVLB  6
013D8:  MOVWF  xFA
013DA:  RRCF   xFF,W
013DC:  MOVWF  xF9
013DE:  RRCF   xFE,W
013E0:  MOVWF  xF8
013E2:  RRCF   xFB,F
013E4:  RRCF   xFA,F
013E6:  RRCF   xF9,F
013E8:  RRCF   xF8,F
013EA:  RRCF   xFB,F
013EC:  RRCF   xFA,F
013EE:  RRCF   xF9,F
013F0:  RRCF   xF8,F
013F2:  RRCF   xFB,F
013F4:  RRCF   xFA,F
013F6:  RRCF   xF9,F
013F8:  RRCF   xF8,F
013FA:  RRCF   xFB,F
013FC:  RRCF   xFA,F
013FE:  RRCF   xF9,F
01400:  RRCF   xF8,F
01402:  MOVLW  07
01404:  ANDWF  xFB,F
....................  
....................       ptr--;     //sidh 
01406:  MOVF   xFC,W
01408:  BTFSC  FD8.2
0140A:  DECF   xFD,F
0140C:  DECF   xFC,F
....................       ret|=((int32)*ptr << 3); 
0140E:  MOVFF  6FC,FE9
01412:  MOVFF  6FD,FEA
01416:  MOVF   FEF,W
01418:  MOVLB  7
0141A:  CLRF   x01
0141C:  CLRF   x00
0141E:  MOVLB  6
01420:  CLRF   xFF
01422:  MOVWF  xFE
01424:  RLCF   xFE,W
01426:  MOVWF  00
01428:  RLCF   xFF,W
0142A:  MOVWF  01
0142C:  MOVLB  7
0142E:  RLCF   x00,W
01430:  MOVWF  02
01432:  RLCF   x01,W
01434:  MOVWF  03
01436:  RLCF   00,F
01438:  RLCF   01,F
0143A:  RLCF   02,F
0143C:  RLCF   03,F
0143E:  RLCF   00,F
01440:  RLCF   01,F
01442:  RLCF   02,F
01444:  RLCF   03,F
01446:  MOVLW  F8
01448:  ANDWF  00,F
0144A:  MOVF   00,W
0144C:  MOVLB  6
0144E:  IORWF  xF8,F
01450:  MOVF   01,W
01452:  IORWF  xF9,F
01454:  MOVF   02,W
01456:  IORWF  xFA,F
01458:  MOVF   03,W
0145A:  IORWF  xFB,F
....................    } 
....................  
....................    return(ret); 
0145C:  MOVFF  6F8,00
01460:  MOVFF  6F9,01
01464:  MOVFF  6FA,02
01468:  MOVFF  6FB,03
.................... } 
0146C:  MOVLB  0
0146E:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Paramaters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) { 
....................    int i; 
....................    int * txd0; 
....................    int port; 
....................  
....................    txd0=&TXRXBaD0; 
*
01980:  MOVLW  0F
01982:  MOVLB  6
01984:  MOVWF  xF7
01986:  MOVLW  66
01988:  MOVWF  xF6
....................  
....................     // find emtpy transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
0198A:  MOVLB  F
0198C:  BTFSC  x40.3
0198E:  BRA    19A0
....................       CANCON.win=CAN_WIN_TX0; 
01990:  MOVLW  F1
01992:  ANDWF  F6F,W
01994:  IORLW  08
01996:  MOVWF  F6F
....................       port=0; 
01998:  MOVLB  6
0199A:  CLRF   xF8
....................    } 
....................    else if (!TXB1CON.txreq) { 
0199C:  BRA    19D4
0199E:  MOVLB  F
019A0:  BTFSC  x30.3
019A2:  BRA    19B6
....................       CANCON.win=CAN_WIN_TX1; 
019A4:  MOVLW  F1
019A6:  ANDWF  F6F,W
019A8:  IORLW  06
019AA:  MOVWF  F6F
....................       port=1; 
019AC:  MOVLW  01
019AE:  MOVLB  6
019B0:  MOVWF  xF8
....................    } 
....................    else if (!TXB2CON.txreq) { 
019B2:  BRA    19D4
019B4:  MOVLB  F
019B6:  BTFSC  x20.3
019B8:  BRA    19CC
....................       CANCON.win=CAN_WIN_TX2; 
019BA:  MOVLW  F1
019BC:  ANDWF  F6F,W
019BE:  IORLW  04
019C0:  MOVWF  F6F
....................       port=2; 
019C2:  MOVLW  02
019C4:  MOVLB  6
019C6:  MOVWF  xF8
....................    } 
....................    else { 
019C8:  BRA    19D4
019CA:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
019CC:  MOVLW  00
019CE:  MOVWF  01
019D0:  BRA    1A4C
019D2:  MOVLB  6
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
019D4:  MOVF   xF2,W
019D6:  ANDLW  03
019D8:  MOVWF  00
019DA:  MOVLW  FC
019DC:  ANDWF  F60,W
019DE:  IORWF  00,W
019E0:  MOVWF  F60
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
019E2:  MOVLW  0F
019E4:  MOVWF  xFA
019E6:  MOVLW  64
019E8:  MOVWF  xF9
019EA:  MOVFF  6EE,6FE
019EE:  MOVFF  6ED,6FD
019F2:  MOVFF  6EC,6FC
019F6:  MOVFF  6EB,6FB
019FA:  MOVFF  6F3,6FF
019FE:  MOVLB  0
01A00:  RCALL  1830
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
01A02:  MOVFF  6F1,F65
....................    TXBaDLC.rtr=rtr; 
01A06:  BCF    F65.6
01A08:  MOVLB  6
01A0A:  BTFSC  xF4.0
01A0C:  BSF    F65.6
....................  
....................     for (i=0; i<len; i++) { 
01A0E:  CLRF   xF5
01A10:  MOVF   xF1,W
01A12:  SUBWF  xF5,W
01A14:  BC    1A3E
....................       *txd0=*data; 
01A16:  MOVFF  6EF,FE9
01A1A:  MOVFF  6F0,FEA
01A1E:  MOVFF  FEF,6FB
01A22:  MOVFF  6F7,FEA
01A26:  MOVFF  6F6,FE9
01A2A:  MOVFF  6FB,FEF
....................       txd0++; 
01A2E:  INCF   xF6,F
01A30:  BTFSC  FD8.2
01A32:  INCF   xF7,F
....................       data++; 
01A34:  INCF   xEF,F
01A36:  BTFSC  FD8.2
01A38:  INCF   xF0,F
....................     } 
01A3A:  INCF   xF5,F
01A3C:  BRA    1A10
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
01A3E:  BSF    F60.3
....................  
....................    CANCON.win=CAN_WIN_RX0; 
01A40:  MOVLW  F1
01A42:  ANDWF  F6F,W
01A44:  MOVWF  F6F
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
01A46:  MOVLW  01
01A48:  MOVWF  01
01A4A:  MOVLB  F
.................... } 
01A4C:  MOVLB  0
01A4E:  GOTO   1C64 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             recieved it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat) 
.................... { 
....................     int i; 
....................     int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
0148A:  BTFSS  F60.7
0148C:  BRA    14BC
*
01712:  BTFSS  F60.7
01714:  BRA    1744
....................         CANCON.win=CAN_WIN_RX0; 
*
0148E:  MOVLW  F1
01490:  ANDWF  F6F,W
01492:  MOVWF  F6F
*
01716:  MOVLW  F1
01718:  ANDWF  F6F,W
0171A:  MOVWF  F6F
....................         stat.buffer=0; 
*
01494:  BCF    xDE.4
*
0171C:  BCF    xDE.4
....................  
....................         CAN_INT_RXB0IF=0; 
*
01496:  BCF    FA4.0
*
0171E:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
*
01498:  BCF    xDE.0
0149A:  BTFSC  F74.7
0149C:  BSF    xDE.0
*
01720:  BCF    xDE.0
01722:  BTFSC  F74.7
01724:  BSF    xDE.0
....................         COMSTAT.rx0ovfl=0; 
*
0149E:  BCF    F74.7
*
01726:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
*
014A0:  BTFSS  F60.2
014A2:  BRA    14BA
*
01728:  BTFSS  F60.2
0172A:  BRA    1742
....................          stat.filthit=RXB0CON.filthit0; 
*
014A4:  MOVLW  00
014A6:  BTFSC  F60.0
014A8:  MOVLW  01
014AA:  ANDLW  07
014AC:  MOVWF  00
014AE:  BCF    FD8.0
014B0:  RLCF   00,F
014B2:  MOVLW  F1
014B4:  ANDWF  xDE,W
014B6:  IORWF  00,W
014B8:  MOVWF  xDE
*
0172C:  MOVLW  00
0172E:  BTFSC  F60.0
01730:  MOVLW  01
01732:  ANDLW  07
01734:  MOVWF  00
01736:  BCF    FD8.0
01738:  RLCF   00,F
0173A:  MOVLW  F1
0173C:  ANDWF  xDE,W
0173E:  IORWF  00,W
01740:  MOVWF  xDE
....................         } 
....................     } 
....................     else if ( RXB1CON.rxful ) 
*
014BA:  BRA    14FC
014BC:  MOVLB  F
014BE:  BTFSS  x50.7
014C0:  BRA    14F4
*
01742:  BRA    1784
01744:  MOVLB  F
01746:  BTFSS  x50.7
01748:  BRA    177C
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
*
014C2:  MOVLW  F1
014C4:  ANDWF  F6F,W
014C6:  IORLW  0A
014C8:  MOVWF  F6F
*
0174A:  MOVLW  F1
0174C:  ANDWF  F6F,W
0174E:  IORLW  0A
01750:  MOVWF  F6F
....................         stat.buffer=1; 
*
014CA:  MOVLB  6
014CC:  BSF    xDE.4
*
01752:  MOVLB  6
01754:  BSF    xDE.4
....................  
....................         CAN_INT_RXB1IF=0; 
*
014CE:  BCF    FA4.1
*
01756:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
*
014D0:  BCF    xDE.0
014D2:  BTFSC  F74.6
014D4:  BSF    xDE.0
*
01758:  BCF    xDE.0
0175A:  BTFSC  F74.6
0175C:  BSF    xDE.0
....................         COMSTAT.rx1ovfl=0; 
*
014D6:  BCF    F74.6
*
0175E:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
*
014D8:  MOVLB  F
014DA:  MOVF   x50,W
014DC:  ANDLW  07
014DE:  ANDLW  07
014E0:  MOVWF  00
014E2:  BCF    FD8.0
014E4:  RLCF   00,F
014E6:  MOVLW  F1
014E8:  MOVLB  6
014EA:  ANDWF  xDE,W
014EC:  IORWF  00,W
014EE:  MOVWF  xDE
*
01760:  MOVLB  F
01762:  MOVF   x50,W
01764:  ANDLW  07
01766:  ANDLW  07
01768:  MOVWF  00
0176A:  BCF    FD8.0
0176C:  RLCF   00,F
0176E:  MOVLW  F1
01770:  MOVLB  6
01772:  ANDWF  xDE,W
01774:  IORWF  00,W
01776:  MOVWF  xDE
....................     } 
....................     else { 
*
014F0:  BRA    14FC
014F2:  MOVLB  F
*
01778:  BRA    1784
0177A:  MOVLB  F
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
*
014F4:  MOVLW  00
014F6:  MOVWF  01
014F8:  BRA    1592
014FA:  MOVLB  6
*
0177C:  MOVLW  00
0177E:  MOVWF  01
01780:  BRA    181A
01782:  MOVLB  6
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
*
014FC:  MOVF   F65,W
014FE:  ANDLW  0F
01500:  MOVWF  xDD
*
01784:  MOVF   F65,W
01786:  ANDLW  0F
01788:  MOVWF  xDD
....................     stat.rtr=RXBaDLC.rtr; 
*
01502:  BCF    xDE.5
01504:  BTFSC  F65.6
01506:  BSF    xDE.5
*
0178A:  BCF    xDE.5
0178C:  BTFSC  F65.6
0178E:  BSF    xDE.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
*
01508:  BCF    xDE.6
0150A:  BTFSC  F62.3
0150C:  BSF    xDE.6
*
01790:  BCF    xDE.6
01792:  BTFSC  F62.3
01794:  BSF    xDE.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
*
0150E:  MOVLW  00
01510:  BTFSC  xDE.6
01512:  MOVLW  01
01514:  MOVWF  xEE
01516:  MOVLW  0F
01518:  MOVWF  xF6
0151A:  MOVLW  64
0151C:  MOVWF  xF5
0151E:  MOVFF  6EE,6F7
01522:  MOVLB  0
01524:  RCALL  1246
01526:  MOVFF  03,6DC
0152A:  MOVFF  02,6DB
0152E:  MOVFF  01,6DA
01532:  MOVFF  00,6D9
*
01796:  MOVLW  00
01798:  BTFSC  xDE.6
0179A:  MOVLW  01
0179C:  MOVWF  xEE
0179E:  MOVLW  0F
017A0:  MOVWF  xF6
017A2:  MOVLW  64
017A4:  MOVWF  xF5
017A6:  MOVFF  6EE,6F7
017AA:  MOVLB  0
017AC:  RCALL  1246
017AE:  MOVFF  03,6DC
017B2:  MOVFF  02,6DB
017B6:  MOVFF  01,6DA
017BA:  MOVFF  00,6D9
....................  
....................     ptr = &TXRXBaD0; 
*
01536:  MOVLW  0F
01538:  MOVLB  6
0153A:  MOVWF  xED
0153C:  MOVLW  66
0153E:  MOVWF  xEC
*
017BE:  MOVLW  0F
017C0:  MOVLB  6
017C2:  MOVWF  xED
017C4:  MOVLW  66
017C6:  MOVWF  xEC
....................     for ( i = 0; i < len; i++ ) { 
*
01540:  CLRF   xEB
01542:  MOVF   xDD,W
01544:  SUBWF  xEB,W
01546:  BC    1570
*
017C8:  CLRF   xEB
017CA:  MOVF   xDD,W
017CC:  SUBWF  xEB,W
017CE:  BC    17F8
....................         *data = *ptr; 
*
01548:  MOVFF  6EC,FE9
0154C:  MOVFF  6ED,FEA
01550:  MOVFF  FEF,6F0
01554:  MOVFF  6EA,FEA
01558:  MOVFF  6E9,FE9
0155C:  MOVFF  6F0,FEF
*
017D0:  MOVFF  6EC,FE9
017D4:  MOVFF  6ED,FEA
017D8:  MOVFF  FEF,6F0
017DC:  MOVFF  6EA,FEA
017E0:  MOVFF  6E9,FE9
017E4:  MOVFF  6F0,FEF
....................         data++; 
*
01560:  INCF   xE9,F
01562:  BTFSC  FD8.2
01564:  INCF   xEA,F
*
017E8:  INCF   xE9,F
017EA:  BTFSC  FD8.2
017EC:  INCF   xEA,F
....................         ptr++; 
*
01566:  INCF   xEC,F
01568:  BTFSC  FD8.2
0156A:  INCF   xED,F
*
017EE:  INCF   xEC,F
017F0:  BTFSC  FD8.2
017F2:  INCF   xED,F
....................     } 
*
0156C:  INCF   xEB,F
0156E:  BRA    1542
*
017F4:  INCF   xEB,F
017F6:  BRA    17CA
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
*
01570:  MOVLW  F1
01572:  ANDWF  F6F,W
01574:  MOVWF  F6F
*
017F8:  MOVLW  F1
017FA:  ANDWF  F6F,W
017FC:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
*
01576:  BCF    xDE.7
01578:  BTFSC  FA4.7
0157A:  BSF    xDE.7
*
017FE:  BCF    xDE.7
01800:  BTFSC  FA4.7
01802:  BSF    xDE.7
....................     CAN_INT_IRXIF = 0; 
*
0157C:  BCF    FA4.7
*
01804:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
*
0157E:  BTFSS  xDE.4
01580:  BRA    158A
*
01806:  BTFSS  xDE.4
01808:  BRA    1812
....................       RXB1CON.rxful=0; 
*
01582:  MOVLB  F
01584:  BCF    x50.7
*
0180A:  MOVLB  F
0180C:  BCF    x50.7
....................     } 
....................     else { 
*
01586:  BRA    158E
01588:  MOVLB  6
*
0180E:  BRA    1816
01810:  MOVLB  6
....................       RXB0CON.rxful=0; 
*
0158A:  BCF    F60.7
0158C:  MOVLB  F
*
01812:  BCF    F60.7
01814:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
*
0158E:  MOVLW  01
01590:  MOVWF  01
*
01816:  MOVLW  01
01818:  MOVWF  01
0181A:  MOVLB  6
.................... } 
....................  
....................  
....................  
....................  
.................... /** 
....................  * no comments 
....................  */ 
.................... #define dev1_ze 10 
....................  
.................... #define CAN_RECEIVE_STACK_SIZE 10 
.................... int can_rspoint=0; 
.................... int can_rstack [CAN_RECEIVE_STACK_SIZE] [14]; 
.................... int1 can_rsfull=FALSE; 
.................... #define can_receiver_full() can_rsfull 
.................... #define CAN_TRANSMIT_STACK_SIZE 10 
.................... int can_tspoint=0; 
.................... int can_tstack [CAN_TRANSMIT_STACK_SIZE] [13]; 
.................... int1 can_tsempty=TRUE; 
.................... #define can_transmitter_empty() can_tsempty 
.................... #define CAN_FILTER_SIZE 1 
.................... int32 can_filter [CAN_FILTER_SIZE] = {11}; 
....................  
....................  
.................... void canReceive ( ) 
.................... { 
....................    int32 rx_id; 
....................    int8  rx_len, rx_stat; 
....................    int8  buffer [8]; 
....................    int8  i; 
....................  
....................    if(can_rspoint==-1) 
*
01470:  MOVF   28,W
01472:  SUBLW  FF
01474:  BNZ   1478
....................       can_rspoint++; 
01476:  INCF   28,F
....................  
....................    if(can_rspoint < CAN_RECEIVE_STACK_SIZE) 
01478:  MOVF   28,W
0147A:  SUBLW  09
0147C:  BTFSS  FD8.0
0147E:  BRA    1708
....................    { 
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01480:  MOVLW  06
01482:  MOVLB  6
01484:  MOVWF  xEA
01486:  MOVLW  DF
01488:  MOVWF  xE9
....................    { 
....................       int8 j; 
....................       for(j=0;j<CAN_FILTER_SIZE;j++) 
*
01592:  MOVLB  6
01594:  CLRF   xE8
01596:  MOVF   xE8,F
01598:  BNZ   15DA
....................          if(rx_id==can_filter[j]) 
0159A:  MOVF   xE8,W
0159C:  MULLW  04
0159E:  MOVF   FF3,W
015A0:  CLRF   03
015A2:  ADDLW  39
015A4:  MOVWF  FE9
015A6:  MOVLW  01
015A8:  ADDWFC 03,W
015AA:  MOVWF  FEA
015AC:  MOVFF  FEF,00
015B0:  MOVFF  FEC,01
015B4:  MOVFF  FEC,02
015B8:  MOVFF  FEC,03
015BC:  MOVF   00,W
015BE:  SUBWF  xD9,W
015C0:  BNZ   15D6
015C2:  MOVF   01,W
015C4:  SUBWF  xDA,W
015C6:  BNZ   15D6
015C8:  MOVF   02,W
015CA:  SUBWF  xDB,W
015CC:  BNZ   15D6
015CE:  MOVF   03,W
015D0:  SUBWF  xDC,W
015D2:  BNZ   15D6
....................             return; 
015D4:  BRA    181C
015D6:  INCF   xE8,F
015D8:  BRA    1596
....................    } 
....................       can_rstack[can_rspoint][0]=make8(rx_id,3); 
015DA:  MOVF   28,W
015DC:  MULLW  0E
015DE:  MOVF   FF3,W
015E0:  CLRF   xEA
015E2:  MOVWF  xE9
015E4:  MOVLW  29
015E6:  ADDWF  xE9,W
015E8:  MOVWF  FE9
015EA:  MOVLW  00
015EC:  ADDWFC xEA,W
015EE:  MOVWF  FEA
015F0:  MOVFF  6DC,FEF
....................       can_rstack[can_rspoint][1]=make8(rx_id,2); 
015F4:  MOVF   28,W
015F6:  MULLW  0E
015F8:  MOVF   FF3,W
015FA:  CLRF   xEA
015FC:  MOVWF  xE9
015FE:  MOVLW  01
01600:  ADDWF  xE9,W
01602:  MOVWF  01
01604:  MOVLW  00
01606:  ADDWFC xEA,W
01608:  MOVWF  03
0160A:  MOVF   01,W
0160C:  ADDLW  29
0160E:  MOVWF  FE9
01610:  MOVLW  00
01612:  ADDWFC 03,W
01614:  MOVWF  FEA
01616:  MOVFF  6DB,FEF
....................       can_rstack[can_rspoint][2]=make8(rx_id,1); 
0161A:  MOVF   28,W
0161C:  MULLW  0E
0161E:  MOVF   FF3,W
01620:  CLRF   xEA
01622:  MOVWF  xE9
01624:  MOVLW  02
01626:  ADDWF  xE9,W
01628:  MOVWF  01
0162A:  MOVLW  00
0162C:  ADDWFC xEA,W
0162E:  MOVWF  03
01630:  MOVF   01,W
01632:  ADDLW  29
01634:  MOVWF  FE9
01636:  MOVLW  00
01638:  ADDWFC 03,W
0163A:  MOVWF  FEA
0163C:  MOVFF  6DA,FEF
....................       can_rstack[can_rspoint][3]=make8(rx_id,0); 
01640:  MOVF   28,W
01642:  MULLW  0E
01644:  MOVF   FF3,W
01646:  CLRF   xEA
01648:  MOVWF  xE9
0164A:  MOVLW  03
0164C:  ADDWF  xE9,W
0164E:  MOVWF  01
01650:  MOVLW  00
01652:  ADDWFC xEA,W
01654:  MOVWF  03
01656:  MOVF   01,W
01658:  ADDLW  29
0165A:  MOVWF  FE9
0165C:  MOVLW  00
0165E:  ADDWFC 03,W
01660:  MOVWF  FEA
01662:  MOVFF  6D9,FEF
....................  
....................       can_rstack[can_rspoint][4]=rx_len; 
01666:  MOVF   28,W
01668:  MULLW  0E
0166A:  MOVF   FF3,W
0166C:  CLRF   xEA
0166E:  MOVWF  xE9
01670:  MOVLW  04
01672:  ADDWF  xE9,W
01674:  MOVWF  01
01676:  MOVLW  00
01678:  ADDWFC xEA,W
0167A:  MOVWF  03
0167C:  MOVF   01,W
0167E:  ADDLW  29
01680:  MOVWF  FE9
01682:  MOVLW  00
01684:  ADDWFC 03,W
01686:  MOVWF  FEA
01688:  MOVFF  6DD,FEF
....................       can_rstack[can_rspoint][5]=rx_stat; 
0168C:  MOVF   28,W
0168E:  MULLW  0E
01690:  MOVF   FF3,W
01692:  CLRF   xEA
01694:  MOVWF  xE9
01696:  MOVLW  05
01698:  ADDWF  xE9,W
0169A:  MOVWF  01
0169C:  MOVLW  00
0169E:  ADDWFC xEA,W
016A0:  MOVWF  03
016A2:  MOVF   01,W
016A4:  ADDLW  29
016A6:  MOVWF  FE9
016A8:  MOVLW  00
016AA:  ADDWFC 03,W
016AC:  MOVWF  FEA
016AE:  MOVFF  6DE,FEF
....................  
....................       for(i=0;i<rx_len;i++) 
016B2:  CLRF   xE7
016B4:  MOVF   xDD,W
016B6:  SUBWF  xE7,W
016B8:  BC    1702
....................       { 
....................          can_rstack[can_rspoint][i+6]=buffer[i]; 
016BA:  MOVF   28,W
016BC:  MULLW  0E
016BE:  MOVF   FF3,W
016C0:  CLRF   xEA
016C2:  MOVWF  xE9
016C4:  MOVLW  06
016C6:  ADDWF  xE7,W
016C8:  CLRF   03
016CA:  ADDWF  xE9,W
016CC:  MOVWF  01
016CE:  MOVF   xEA,W
016D0:  ADDWFC 03,F
016D2:  MOVF   01,W
016D4:  ADDLW  29
016D6:  MOVWF  01
016D8:  MOVLW  00
016DA:  ADDWFC 03,F
016DC:  MOVFF  03,6EA
016E0:  CLRF   03
016E2:  MOVF   xE7,W
016E4:  ADDLW  DF
016E6:  MOVWF  FE9
016E8:  MOVLW  06
016EA:  ADDWFC 03,W
016EC:  MOVWF  FEA
016EE:  MOVFF  FEF,6EB
016F2:  MOVFF  6EA,FEA
016F6:  MOVFF  01,FE9
016FA:  MOVFF  6EB,FEF
....................       } 
016FE:  INCF   xE7,F
01700:  BRA    16B4
....................  
....................       can_rspoint++; 
01702:  INCF   28,F
....................    } 
....................    else 
01704:  BRA    181C
01706:  MOVLB  0
....................       can_getd(rx_id,buffer,rx_len,rx_stat); 
01708:  MOVLW  06
0170A:  MOVLB  6
0170C:  MOVWF  xEA
0170E:  MOVLW  DF
01710:  MOVWF  xE9
.................... } 
*
0181C:  MOVLB  0
0181E:  RETLW  00
....................  
....................  
.................... int1 can_Pop ( int32 & rx_id, int * buffer, int & rx_len, int & rx_stat ) 
.................... { 
....................    int i; 
....................  
....................    if(can_rspoint==CAN_RECEIVE_STACK_SIZE) 
....................       can_rspoint--; 
....................  
....................    if(can_rspoint!=-1) 
....................    { 
....................       rx_id=make32(can_rstack[can_rspoint][0], 
....................                   can_rstack[can_rspoint][1], 
....................                   can_rstack[can_rspoint][2], 
....................                   can_rstack[can_rspoint][3]); 
....................  
....................       rx_len=can_rstack[can_rspoint][4]; 
....................       rx_stat=can_rstack[can_rspoint][5]; 
....................  
....................       for(i=0;i<rx_len;i++) 
....................       { 
....................          buffer[i]=can_rstack[can_rspoint][i+6]; 
....................       } 
....................       can_rspoint--; 
....................  
....................       return TRUE; 
....................    }    
....................    else 
....................    return FALSE; 
.................... } 
....................  
.................... void canTransmit ( ) 
.................... { 
....................    int32 tx_id; 
....................    int8  tx_length; 
....................    int8  tx_priority; 
....................    int8  tx_buffer[8]; 
....................    int1  tx_extendedID; 
....................    int1  tx_emptyframe; 
....................    int8  i; 
....................  
....................    if(can_tspoint==CAN_TRANSMIT_STACK_SIZE) 
*
01A52:  MOVF   xB6,W
01A54:  SUBLW  0A
01A56:  BNZ   1A5A
....................    { 
....................       can_tspoint--; 
01A58:  DECF   xB6,F
....................    } 
....................  
....................    if(can_tspoint!=-1) 
01A5A:  MOVF   xB6,W
01A5C:  SUBLW  FF
01A5E:  BTFSC  FD8.2
01A60:  BRA    1C68
....................    { 
....................  
....................       tx_id=make32(can_tstack[can_tspoint][0], 
....................                   can_tstack[can_tspoint][1], 
....................                   can_tstack[can_tspoint][2], 
....................                   can_tstack[can_tspoint][3]); 
01A62:  MOVF   xB6,W
01A64:  MULLW  0D
01A66:  MOVF   FF3,W
01A68:  MOVLB  6
01A6A:  CLRF   xEA
01A6C:  MOVWF  xE9
01A6E:  MOVLW  B7
01A70:  ADDWF  xE9,W
01A72:  MOVWF  FE9
01A74:  MOVLW  00
01A76:  ADDWFC xEA,W
01A78:  MOVWF  FEA
01A7A:  MOVFF  FEF,6E9
01A7E:  MOVLB  0
01A80:  MOVF   xB6,W
01A82:  MULLW  0D
01A84:  MOVF   FF3,W
01A86:  MOVLB  6
01A88:  CLRF   xEB
01A8A:  MOVWF  xEA
01A8C:  MOVLW  01
01A8E:  ADDWF  xEA,W
01A90:  MOVWF  01
01A92:  MOVLW  00
01A94:  ADDWFC xEB,W
01A96:  MOVWF  03
01A98:  MOVF   01,W
01A9A:  ADDLW  B7
01A9C:  MOVWF  FE9
01A9E:  MOVLW  00
01AA0:  ADDWFC 03,W
01AA2:  MOVWF  FEA
01AA4:  MOVFF  FEF,6EA
01AA8:  MOVLB  0
01AAA:  MOVF   xB6,W
01AAC:  MULLW  0D
01AAE:  MOVF   FF3,W
01AB0:  MOVLB  6
01AB2:  CLRF   xEC
01AB4:  MOVWF  xEB
01AB6:  MOVLW  02
01AB8:  ADDWF  xEB,W
01ABA:  MOVWF  01
01ABC:  MOVLW  00
01ABE:  ADDWFC xEC,W
01AC0:  MOVWF  03
01AC2:  MOVF   01,W
01AC4:  ADDLW  B7
01AC6:  MOVWF  FE9
01AC8:  MOVLW  00
01ACA:  ADDWFC 03,W
01ACC:  MOVWF  FEA
01ACE:  MOVFF  FEF,6EB
01AD2:  MOVLB  0
01AD4:  MOVF   xB6,W
01AD6:  MULLW  0D
01AD8:  MOVF   FF3,W
01ADA:  MOVLB  6
01ADC:  CLRF   xED
01ADE:  MOVWF  xEC
01AE0:  MOVLW  03
01AE2:  ADDWF  xEC,W
01AE4:  MOVWF  01
01AE6:  MOVLW  00
01AE8:  ADDWFC xED,W
01AEA:  MOVWF  03
01AEC:  MOVF   01,W
01AEE:  ADDLW  B7
01AF0:  MOVWF  FE9
01AF2:  MOVLW  00
01AF4:  ADDWFC 03,W
01AF6:  MOVWF  FEA
01AF8:  MOVFF  FEF,6EC
01AFC:  MOVFF  6E9,6DC
01B00:  MOVFF  6EA,6DB
01B04:  MOVFF  6EB,6DA
01B08:  MOVFF  6EC,6D9
....................  
....................       tx_length=can_tstack[can_tspoint][12]>>4; 
01B0C:  MOVLB  0
01B0E:  MOVF   xB6,W
01B10:  MULLW  0D
01B12:  MOVF   FF3,W
01B14:  MOVLB  6
01B16:  CLRF   xEA
01B18:  MOVWF  xE9
01B1A:  MOVLW  0C
01B1C:  ADDWF  xE9,W
01B1E:  MOVWF  01
01B20:  MOVLW  00
01B22:  ADDWFC xEA,W
01B24:  MOVWF  03
01B26:  MOVF   01,W
01B28:  ADDLW  B7
01B2A:  MOVWF  FE9
01B2C:  MOVLW  00
01B2E:  ADDWFC 03,W
01B30:  MOVWF  FEA
01B32:  SWAPF  FEF,W
01B34:  MOVWF  xDD
01B36:  MOVLW  0F
01B38:  ANDWF  xDD,F
....................       tx_priority=(can_tstack[can_tspoint][12]&0x0c)>>2; 
01B3A:  MOVLB  0
01B3C:  MOVF   xB6,W
01B3E:  MULLW  0D
01B40:  MOVF   FF3,W
01B42:  MOVLB  6
01B44:  CLRF   xEA
01B46:  MOVWF  xE9
01B48:  MOVLW  0C
01B4A:  ADDWF  xE9,W
01B4C:  MOVWF  01
01B4E:  MOVLW  00
01B50:  ADDWFC xEA,W
01B52:  MOVWF  03
01B54:  MOVF   01,W
01B56:  ADDLW  B7
01B58:  MOVWF  FE9
01B5A:  MOVLW  00
01B5C:  ADDWFC 03,W
01B5E:  MOVWF  FEA
01B60:  MOVF   FEF,W
01B62:  ANDLW  0C
01B64:  MOVWF  00
01B66:  RRCF   00,W
01B68:  MOVWF  xDE
01B6A:  RRCF   xDE,F
01B6C:  MOVLW  3F
01B6E:  ANDWF  xDE,F
....................       tx_extendedID=bit_test(can_tstack[can_tspoint][12],1); 
01B70:  MOVLB  0
01B72:  MOVF   xB6,W
01B74:  MULLW  0D
01B76:  MOVF   FF3,W
01B78:  MOVLB  6
01B7A:  CLRF   xEA
01B7C:  MOVWF  xE9
01B7E:  MOVLW  0C
01B80:  ADDWF  xE9,W
01B82:  MOVWF  01
01B84:  MOVLW  00
01B86:  ADDWFC xEA,W
01B88:  MOVWF  03
01B8A:  MOVF   01,W
01B8C:  ADDLW  B7
01B8E:  MOVWF  FE9
01B90:  MOVLW  00
01B92:  ADDWFC 03,W
01B94:  MOVWF  FEA
01B96:  MOVFF  FEF,6E9
01B9A:  BCF    xE7.0
01B9C:  BTFSC  xE9.1
01B9E:  BSF    xE7.0
....................       tx_emptyframe=bit_test(can_tstack[can_tspoint][12],0); 
01BA0:  MOVLB  0
01BA2:  MOVF   xB6,W
01BA4:  MULLW  0D
01BA6:  MOVF   FF3,W
01BA8:  MOVLB  6
01BAA:  CLRF   xEA
01BAC:  MOVWF  xE9
01BAE:  MOVLW  0C
01BB0:  ADDWF  xE9,W
01BB2:  MOVWF  01
01BB4:  MOVLW  00
01BB6:  ADDWFC xEA,W
01BB8:  MOVWF  03
01BBA:  MOVF   01,W
01BBC:  ADDLW  B7
01BBE:  MOVWF  FE9
01BC0:  MOVLW  00
01BC2:  ADDWFC 03,W
01BC4:  MOVWF  FEA
01BC6:  MOVFF  FEF,6E9
01BCA:  BCF    xE7.1
01BCC:  BTFSC  xE9.0
01BCE:  BSF    xE7.1
....................  
....................       for(i=0;i<tx_length;i++) 
01BD0:  CLRF   xE8
01BD2:  MOVF   xDD,W
01BD4:  SUBWF  xE8,W
01BD6:  BC    1C28
....................       { 
....................          tx_buffer[i]=can_tstack[can_tspoint][i+4]; 
01BD8:  CLRF   03
01BDA:  MOVF   xE8,W
01BDC:  ADDLW  DF
01BDE:  MOVWF  01
01BE0:  MOVLW  06
01BE2:  ADDWFC 03,F
01BE4:  MOVFF  01,6E9
01BE8:  MOVFF  03,6EA
01BEC:  MOVLB  0
01BEE:  MOVF   xB6,W
01BF0:  MULLW  0D
01BF2:  MOVF   FF3,W
01BF4:  MOVLB  6
01BF6:  CLRF   xEC
01BF8:  MOVWF  xEB
01BFA:  MOVLW  04
01BFC:  ADDWF  xE8,W
01BFE:  CLRF   03
01C00:  ADDWF  xEB,W
01C02:  MOVWF  01
01C04:  MOVF   xEC,W
01C06:  ADDWFC 03,F
01C08:  MOVF   01,W
01C0A:  ADDLW  B7
01C0C:  MOVWF  FE9
01C0E:  MOVLW  00
01C10:  ADDWFC 03,W
01C12:  MOVWF  FEA
01C14:  MOVFF  FEF,6EB
01C18:  MOVFF  6EA,FEA
01C1C:  MOVFF  6E9,FE9
01C20:  MOVFF  6EB,FEF
....................       } 
01C24:  INCF   xE8,F
01C26:  BRA    1BD2
....................  
....................       can_putd(tx_id,tx_buffer,tx_length,tx_priority,tx_extendedID,tx_emptyframe); 
01C28:  MOVLW  00
01C2A:  BTFSC  xE7.0
01C2C:  MOVLW  01
01C2E:  MOVWF  xE9
01C30:  MOVLW  00
01C32:  BTFSC  xE7.1
01C34:  MOVLW  01
01C36:  MOVWF  xEA
01C38:  MOVFF  6DC,6EE
01C3C:  MOVFF  6DB,6ED
01C40:  MOVFF  6DA,6EC
01C44:  MOVFF  6D9,6EB
01C48:  MOVLW  06
01C4A:  MOVWF  xF0
01C4C:  MOVLW  DF
01C4E:  MOVWF  xEF
01C50:  MOVFF  6DD,6F1
01C54:  MOVFF  6DE,6F2
01C58:  MOVFF  6E9,6F3
01C5C:  MOVFF  6EA,6F4
01C60:  MOVLB  0
01C62:  BRA    1980
....................  
....................       can_tspoint--; 
01C64:  DECF   xB6,F
....................    } 
....................    else 
01C66:  BRA    1C6A
....................       return; 
01C68:  BRA    1C6A
.................... } 
01C6A:  RETLW  00
....................  
....................  
.................... int1 can_push (int32 tx_id, int8 * tx_buffer, int8 tx_length, int8 tx_priority, int1 tx_extendedID, int1 tx_emptyframe) 
.................... { 
....................    int8  i; 
....................    if(can_tspoint==-1) 
....................       can_tspoint++; 
....................  
....................    if(can_tspoint < CAN_TRANSMIT_STACK_SIZE) 
....................    { 
....................       can_tstack[can_tspoint][0]=make8(tx_id,3); 
....................       can_tstack[can_tspoint][1]=make8(tx_id,2); 
....................       can_tstack[can_tspoint][2]=make8(tx_id,1); 
....................       can_tstack[can_tspoint][3]=make8(tx_id,0); 
....................  
....................       for(i=0;i<tx_length;i++) 
....................       { 
....................          can_tstack[can_tspoint][i+4]=tx_buffer[i]; 
....................       } 
....................  
....................       can_tstack[can_tspoint][12]=(tx_length<<4)|(tx_priority<<2)|((int8)tx_extendedID<<1)|((int8)tx_emptyframe); 
....................  
....................       can_tspoint++; 
....................    } 
.................... } 
....................  
.................... int temp; 
.................... #define DEBUG TRUE 
.................... #include "struct_and_enums.c" 
....................  
.................... enum switch_outstate {on, off, dimming, dimmed, maxed}; 
.................... enum switch_direction {up, down}; 
.................... enum switch_state {button_pressed, button_depressed}; 
.................... enum output_type {_on_off=100, dimmer,shutter}; 
.................... enum output_state {_on, _off, _dimmed}; 
.................... enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
....................  
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input); 
.................... typedef struct data_point_out 
.................... { 
....................    unsigned int adress; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... typedef struct data_point_in 
.................... { 
....................    unsigned int adress[8]; 
....................    unsigned int value; 
....................    int1 needs_update; 
.................... }; 
.................... ///////////////////////INPUTS////////////////////////////////////// 
.................... typedef struct dimmer_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out dim_level; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    unsigned int current_level; 
....................    int32  timer; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_direction direction; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
.................... typedef struct on_off_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................     switch_state current_state; 
....................    switch_state previous_state; 
....................    int32  timer; 
....................    switch_outstate outstate; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... typedef struct button_switch 
.................... { 
....................  //  switch_type type; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    switch_state current_state; 
....................    switch_state previous_state; 
....................    switch_outstate outstate; 
....................    int1 repeat; 
....................    unsigned int realbutton; 
.................... }; 
....................  
.................... enum timer_type {time_on, time_off, periodic_on}; 
.................... typedef struct timer 
.................... { 
....................    timer_type type; 
....................    int16  timeToAct; 
....................    struct data_point_out on; 
....................    struct data_point_out off; 
....................    struct data_point_in start; 
....................    struct data_point_in stop;  
....................    int16  timer; 
....................    int1  active; 
.................... }; 
.................... union input 
.................... { 
....................    struct on_off_switch; 
....................    struct dimmer_switch; 
....................    struct timer; 
....................    struct button_switch; 
.................... }; 
....................  
.................... typedef struct inputs 
.................... { 
....................    enum input_type type; 
....................    union input device; 
.................... }; 
.................... ///////////////////////OUTPUTS////////////////////////////////////// 
.................... struct light 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    struct data_point_in dim_value; 
....................    enum output_state out_state; 
....................    unsigned int output_pin; 
....................    int internal_order; 
....................    int1  needs_update; 
.................... }; 
.................... struct oNoFF 
.................... { 
....................    struct data_point_in on; 
....................    struct data_point_in off; 
....................    unsigned int output_pin; 
....................    int1  needs_update; 
.................... }; 
.................... enum shutter_state {goingUp, goingDown,goingFullUp,goingFullDown,idle,sleeping}; 
.................... struct shutter 
.................... { 
....................    struct data_point_in up; 
....................    struct data_point_in down; 
....................    struct data_point_in fullup; 
....................    struct data_point_in fulldown; 
....................    unsigned int output_pin_up; 
....................    unsigned int output_pin_down; 
....................  //  unsigned int32 antiSimulCounter; 
....................    unsigned int internalCounter; 
....................    int fullTime; 
....................    int shortTime; 
....................    enum shutter_state state; 
....................   // int1  needs_update; 
.................... }; 
....................  
.................... union output 
.................... { 
....................    struct light; 
....................    struct oNoFF; 
....................    struct shutter; 
.................... }; 
....................  
.................... typedef struct outputs 
.................... { 
....................    enum output_type type; 
....................    union output device; 
.................... }; 
....................  
.................... typedef struct devices 
.................... { 
....................       unsigned int numberOfInputs; 
....................       unsigned int numberOfOutputs; 
....................       struct inputs myinputs[10]; 
....................       struct outputs myoutputs[16]; 
.................... }devicestype; 
....................  
.................... devicestype mydevices; 
....................  
.................... void copy_array(unsigned int *origin,struct data_point_in* destination , unsigned int n_elements) 
.................... { 
....................    int x; 
....................    for (x=0;x<n_elements;++x) 
*
0270C:  MOVLB  6
0270E:  CLRF   xD5
02710:  MOVF   xD4,W
02712:  SUBWF  xD5,W
02714:  BC    2748
....................    { 
....................       ((struct data_point_in*)destination)->adress[x]=*origin; 
02716:  CLRF   03
02718:  MOVF   xD5,W
0271A:  ADDWF  xD2,W
0271C:  MOVWF  01
0271E:  MOVF   xD3,W
02720:  ADDWFC 03,F
02722:  MOVFF  03,6D7
02726:  MOVFF  6D0,FE9
0272A:  MOVFF  6D1,FEA
0272E:  MOVFF  FEF,6D8
02732:  MOVFF  6D7,FEA
02736:  MOVFF  01,FE9
0273A:  MOVFF  6D8,FEF
....................       ++origin; 
0273E:  INCF   xD0,F
02740:  BTFSC  FD8.2
02742:  INCF   xD1,F
....................    } 
02744:  INCF   xD5,F
02746:  BRA    2710
.................... } 
02748:  MOVLB  0
0274A:  RETLW  00
....................  
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       input->type=dimmer_switch; 
*
0249A:  MOVLB  6
0249C:  MOVFF  6C1,FE9
024A0:  MOVFF  6C2,FEA
024A4:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).dim_level.adress=dim_adr; 
024A6:  MOVLW  01
024A8:  ADDWF  xC1,W
024AA:  MOVWF  01
024AC:  MOVLW  00
024AE:  ADDWFC xC2,W
024B0:  MOVFF  01,FE9
024B4:  MOVWF  FEA
024B6:  MOVFF  6BE,FEF
....................       ((struct dimmer_switch)input->device).on.adress=on_adr; 
024BA:  MOVLW  01
024BC:  ADDWF  xC1,W
024BE:  MOVWF  01
024C0:  MOVLW  00
024C2:  ADDWFC xC2,W
024C4:  MOVWF  03
024C6:  MOVF   01,W
024C8:  ADDLW  03
024CA:  MOVWF  FE9
024CC:  MOVLW  00
024CE:  ADDWFC 03,W
024D0:  MOVWF  FEA
024D2:  MOVFF  6BF,FEF
....................       ((struct dimmer_switch)input->device).off.adress=off_adr; 
024D6:  MOVLW  01
024D8:  ADDWF  xC1,W
024DA:  MOVWF  01
024DC:  MOVLW  00
024DE:  ADDWFC xC2,W
024E0:  MOVWF  03
024E2:  MOVF   01,W
024E4:  ADDLW  06
024E6:  MOVWF  FE9
024E8:  MOVLW  00
024EA:  ADDWFC 03,W
024EC:  MOVWF  FEA
024EE:  MOVFF  6C0,FEF
....................       ((struct dimmer_switch)input->device).previous_state=button_depressed; 
024F2:  MOVLW  01
024F4:  ADDWF  xC1,W
024F6:  MOVWF  01
024F8:  MOVLW  00
024FA:  ADDWFC xC2,W
024FC:  MOVWF  03
024FE:  MOVF   01,W
02500:  ADDLW  0E
02502:  MOVWF  FE9
02504:  MOVLW  00
02506:  ADDWFC 03,W
02508:  MOVWF  FEA
0250A:  BSF    FEF.1
....................       ((struct dimmer_switch)input->device).outstate=off; 
0250C:  MOVLW  01
0250E:  ADDWF  xC1,W
02510:  MOVWF  01
02512:  MOVLW  00
02514:  ADDWFC xC2,W
02516:  MOVWF  03
02518:  MOVF   01,W
0251A:  ADDLW  0F
0251C:  MOVWF  FE9
0251E:  MOVLW  00
02520:  ADDWFC 03,W
02522:  MOVWF  FEA
02524:  MOVLW  01
02526:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).current_level=0; 
02528:  ADDWF  xC1,W
0252A:  MOVWF  01
0252C:  MOVLW  00
0252E:  ADDWFC xC2,W
02530:  MOVWF  03
02532:  MOVF   01,W
02534:  ADDLW  09
02536:  MOVWF  FE9
02538:  MOVLW  00
0253A:  ADDWFC 03,W
0253C:  MOVWF  FEA
0253E:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).direction=up; 
02540:  MOVLW  01
02542:  ADDWF  xC1,W
02544:  MOVWF  01
02546:  MOVLW  00
02548:  ADDWFC xC2,W
0254A:  MOVWF  03
0254C:  MOVF   01,W
0254E:  ADDLW  0E
02550:  MOVWF  FE9
02552:  MOVLW  00
02554:  ADDWFC 03,W
02556:  MOVWF  FEA
02558:  BCF    FEF.2
....................       ((struct dimmer_switch)input->device).dim_level.needs_update=0; 
0255A:  MOVLW  01
0255C:  ADDWF  xC1,W
0255E:  MOVWF  01
02560:  MOVLW  00
02562:  ADDWFC xC2,W
02564:  MOVWF  03
02566:  MOVF   01,W
02568:  ADDLW  02
0256A:  MOVWF  FE9
0256C:  MOVLW  00
0256E:  ADDWFC 03,W
02570:  MOVWF  FEA
02572:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).on.needs_update=0; 
02574:  MOVLW  01
02576:  ADDWF  xC1,W
02578:  MOVWF  01
0257A:  MOVLW  00
0257C:  ADDWFC xC2,W
0257E:  MOVWF  03
02580:  MOVF   01,W
02582:  ADDLW  05
02584:  MOVWF  FE9
02586:  MOVLW  00
02588:  ADDWFC 03,W
0258A:  MOVWF  FEA
0258C:  BCF    FEF.0
....................       ((struct dimmer_switch)input->device).off.needs_update=1; 
0258E:  MOVLW  01
02590:  ADDWF  xC1,W
02592:  MOVWF  01
02594:  MOVLW  00
02596:  ADDWFC xC2,W
02598:  MOVWF  03
0259A:  MOVF   01,W
0259C:  ADDLW  08
0259E:  MOVWF  FE9
025A0:  MOVLW  00
025A2:  ADDWFC 03,W
025A4:  MOVWF  FEA
025A6:  BSF    FEF.0
....................       ((struct dimmer_switch)input->device).dim_level.value=0; 
025A8:  MOVLW  01
025AA:  ADDWF  xC1,W
025AC:  MOVWF  01
025AE:  MOVLW  00
025B0:  ADDWFC xC2,W
025B2:  MOVWF  03
025B4:  MOVF   01,W
025B6:  ADDLW  01
025B8:  MOVWF  FE9
025BA:  MOVLW  00
025BC:  ADDWFC 03,W
025BE:  MOVWF  FEA
025C0:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).on.value=0; 
025C2:  MOVLW  01
025C4:  ADDWF  xC1,W
025C6:  MOVWF  01
025C8:  MOVLW  00
025CA:  ADDWFC xC2,W
025CC:  MOVWF  03
025CE:  MOVF   01,W
025D0:  ADDLW  04
025D2:  MOVWF  FE9
025D4:  MOVLW  00
025D6:  ADDWFC 03,W
025D8:  MOVWF  FEA
025DA:  CLRF   FEF
....................       ((struct dimmer_switch)input->device).off.value=1; 
025DC:  MOVLW  01
025DE:  ADDWF  xC1,W
025E0:  MOVWF  01
025E2:  MOVLW  00
025E4:  ADDWFC xC2,W
025E6:  MOVWF  03
025E8:  MOVF   01,W
025EA:  ADDLW  07
025EC:  MOVWF  FE9
025EE:  MOVLW  00
025F0:  ADDWFC 03,W
025F2:  MOVWF  FEA
025F4:  MOVLW  01
025F6:  MOVWF  FEF
....................       ((struct dimmer_switch)input->device).realbutton=inputs[real_button]; 
025F8:  ADDWF  xC1,W
025FA:  MOVWF  01
025FC:  MOVLW  00
025FE:  ADDWFC xC2,W
02600:  MOVWF  03
02602:  MOVF   01,W
02604:  ADDLW  10
02606:  MOVWF  01
02608:  MOVLW  00
0260A:  ADDWFC 03,F
0260C:  MOVFF  03,6C7
02610:  CLRF   03
02612:  MOVF   xC3,W
02614:  ADDLW  1C
02616:  MOVWF  FE9
02618:  MOVLW  00
0261A:  ADDWFC 03,W
0261C:  MOVWF  FEA
0261E:  MOVFF  FEF,6C8
02622:  MOVFF  6C7,FEA
02626:  MOVFF  01,FE9
0262A:  MOVFF  6C8,FEF
....................       ((struct dimmer_switch)input->device).timer=0; 
0262E:  MOVLW  01
02630:  ADDWF  xC1,W
02632:  MOVWF  01
02634:  MOVLW  00
02636:  ADDWFC xC2,W
02638:  MOVWF  03
0263A:  MOVF   01,W
0263C:  ADDLW  0A
0263E:  MOVWF  FE9
02640:  MOVLW  00
02642:  ADDWFC 03,W
02644:  MOVWF  FEA
02646:  MOVF   FEE,F
02648:  MOVF   FEE,F
0264A:  CLRF   FEC
0264C:  MOVF   FED,F
0264E:  CLRF   FEF
02650:  MOVF   FED,F
02652:  CLRF   FEF
02654:  MOVF   FED,F
02656:  CLRF   FEF
.................... } 
02658:  MOVLB  0
0265A:  GOTO   304A (RETURN)
.................... void on_off_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button) 
.................... { 
....................       struct on_off_switch sw; 
....................       input->type=on_off_switch; 
*
02440:  MOVLB  6
02442:  MOVFF  6C0,FE9
02446:  MOVFF  6C1,FEA
0244A:  MOVLW  01
0244C:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
0244E:  MOVFF  6BE,6C3
....................       sw.off.adress=off_adr; 
02452:  MOVFF  6BF,6C6
....................       sw.previous_state=button_depressed; 
02456:  BSF    xC9.1
....................       sw.outstate=off; 
02458:  MOVWF  xCE
....................       sw.on.needs_update=0; 
0245A:  BCF    xC5.0
....................       sw.off.needs_update=0; 
0245C:  BCF    xC8.0
....................       sw.on.value=0; 
0245E:  CLRF   xC4
....................       sw.off.value=0; 
02460:  CLRF   xC7
....................       sw.realbutton=inputs[real_button]; 
02462:  CLRF   03
02464:  MOVF   xC2,W
02466:  ADDLW  1C
02468:  MOVWF  FE9
0246A:  MOVLW  00
0246C:  ADDWFC 03,W
0246E:  MOVWF  FEA
02470:  MOVFF  FEF,6CF
....................       input->device=sw; 
02474:  MOVLW  01
02476:  ADDWF  xC0,W
02478:  MOVWF  FE9
0247A:  MOVLW  00
0247C:  ADDWFC xC1,W
0247E:  MOVWF  FEA
02480:  MOVLW  06
02482:  MOVWF  FE2
02484:  MOVLW  C3
02486:  MOVWF  FE1
02488:  MOVLW  20
0248A:  MOVWF  01
0248C:  MOVFF  FE6,FEE
02490:  DECFSZ 01,F
02492:  BRA    248C
.................... } 
02494:  MOVLB  0
02496:  GOTO   2F44 (RETURN)
.................... void button_init(unsigned int on_adr,unsigned int off_adr,struct inputs* input,unsigned int real_button,int1 repeat) 
.................... { 
....................       struct button_switch sw; 
....................       input->type=button_switch; 
*
0265E:  MOVLB  6
02660:  MOVFF  6C1,FE9
02664:  MOVFF  6C2,FEA
02668:  MOVLW  02
0266A:  MOVWF  FEF
....................       sw.on.adress=on_adr; 
0266C:  MOVFF  6BF,6C5
....................       sw.off.adress=off_adr; 
02670:  MOVFF  6C0,6C8
....................       sw.previous_state=button_depressed; 
02674:  BSF    xCB.1
....................       sw.outstate=off; 
02676:  MOVLW  01
02678:  MOVWF  xCC
....................       sw.on.needs_update=0; 
0267A:  BCF    xC7.0
....................       sw.off.needs_update=0; 
0267C:  BCF    xCA.0
....................       sw.on.value=0; 
0267E:  CLRF   xC6
....................       sw.off.value=0; 
02680:  CLRF   xC9
....................       sw.repeat=repeat; 
02682:  BCF    xCD.0
02684:  BTFSC  xC4.0
02686:  BSF    xCD.0
....................       sw.realbutton=inputs[real_button]; 
02688:  CLRF   03
0268A:  MOVF   xC3,W
0268C:  ADDLW  1C
0268E:  MOVWF  FE9
02690:  MOVLW  00
02692:  ADDWFC 03,W
02694:  MOVWF  FEA
02696:  MOVFF  FEF,6CE
....................       input->device=sw; 
0269A:  MOVLW  01
0269C:  ADDWF  xC1,W
0269E:  MOVWF  FE9
026A0:  MOVLW  00
026A2:  ADDWFC xC2,W
026A4:  MOVWF  FEA
026A6:  MOVLW  06
026A8:  MOVWF  FE2
026AA:  MOVLW  C5
026AC:  MOVWF  FE1
026AE:  MOVLW  20
026B0:  MOVWF  01
026B2:  MOVFF  FE6,FEE
026B6:  DECFSZ 01,F
026B8:  BRA    26B2
.................... } 
026BA:  MOVLB  0
026BC:  GOTO   315C (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=dimmer; 
*
02942:  MOVLB  6
02944:  MOVFF  6C4,FE9
02948:  MOVFF  6C5,FEA
0294C:  MOVLW  65
0294E:  MOVWF  FEF
....................    ((struct light)output->device).dim_value.needs_update=0; 
02950:  MOVLW  01
02952:  ADDWF  xC4,W
02954:  MOVWF  01
02956:  MOVLW  00
02958:  ADDWFC xC5,W
0295A:  MOVWF  03
0295C:  MOVF   01,W
0295E:  ADDLW  1D
02960:  MOVWF  FE9
02962:  MOVLW  00
02964:  ADDWFC 03,W
02966:  MOVWF  FEA
02968:  BCF    FEF.0
....................    ((struct light)output->device).on.needs_update=0; 
0296A:  MOVLW  01
0296C:  ADDWF  xC4,W
0296E:  MOVWF  01
02970:  MOVLW  00
02972:  ADDWFC xC5,W
02974:  MOVWF  03
02976:  MOVF   01,W
02978:  ADDLW  09
0297A:  MOVWF  FE9
0297C:  MOVLW  00
0297E:  ADDWFC 03,W
02980:  MOVWF  FEA
02982:  BCF    FEF.0
....................    ((struct light)output->device).off.needs_update=0; 
02984:  MOVLW  01
02986:  ADDWF  xC4,W
02988:  MOVWF  01
0298A:  MOVLW  00
0298C:  ADDWFC xC5,W
0298E:  MOVWF  03
02990:  MOVF   01,W
02992:  ADDLW  13
02994:  MOVWF  FE9
02996:  MOVLW  00
02998:  ADDWFC 03,W
0299A:  MOVWF  FEA
0299C:  BCF    FEF.0
....................    ((struct light)output->device).dim_value.value=127; 
0299E:  MOVLW  01
029A0:  ADDWF  xC4,W
029A2:  MOVWF  01
029A4:  MOVLW  00
029A6:  ADDWFC xC5,W
029A8:  MOVWF  03
029AA:  MOVF   01,W
029AC:  ADDLW  1C
029AE:  MOVWF  FE9
029B0:  MOVLW  00
029B2:  ADDWFC 03,W
029B4:  MOVWF  FEA
029B6:  MOVLW  7F
029B8:  MOVWF  FEF
....................    ((struct light)output->device).on.value=0; 
029BA:  MOVLW  01
029BC:  ADDWF  xC4,W
029BE:  MOVWF  01
029C0:  MOVLW  00
029C2:  ADDWFC xC5,W
029C4:  MOVWF  03
029C6:  MOVF   01,W
029C8:  ADDLW  08
029CA:  MOVWF  FE9
029CC:  MOVLW  00
029CE:  ADDWFC 03,W
029D0:  MOVWF  FEA
029D2:  CLRF   FEF
....................    ((struct light)output->device).off.value=0; 
029D4:  MOVLW  01
029D6:  ADDWF  xC4,W
029D8:  MOVWF  01
029DA:  MOVLW  00
029DC:  ADDWFC xC5,W
029DE:  MOVWF  03
029E0:  MOVF   01,W
029E2:  ADDLW  12
029E4:  MOVWF  FE9
029E6:  MOVLW  00
029E8:  ADDWFC 03,W
029EA:  MOVWF  FEA
029EC:  CLRF   FEF
....................    ((struct light)output->device).output_pin=output_pin; 
029EE:  MOVLW  01
029F0:  ADDWF  xC4,W
029F2:  MOVWF  01
029F4:  MOVLW  00
029F6:  ADDWFC xC5,W
029F8:  MOVWF  03
029FA:  MOVF   01,W
029FC:  ADDLW  1F
029FE:  MOVWF  FE9
02A00:  MOVLW  00
02A02:  ADDWFC 03,W
02A04:  MOVWF  FEA
02A06:  MOVFF  6C6,FEF
....................    copy_array(dim_adr,&((struct light)output->device).dim_value,8); 
02A0A:  MOVLW  01
02A0C:  ADDWF  xC4,W
02A0E:  MOVWF  01
02A10:  MOVLW  00
02A12:  ADDWFC xC5,W
02A14:  MOVWF  03
02A16:  MOVF   01,W
02A18:  ADDLW  14
02A1A:  MOVWF  01
02A1C:  MOVLW  00
02A1E:  ADDWFC 03,F
02A20:  MOVFF  01,6C9
02A24:  MOVFF  03,6CA
02A28:  MOVFF  6BF,6D1
02A2C:  MOVFF  6BE,6D0
02A30:  MOVFF  03,6D3
02A34:  MOVFF  01,6D2
02A38:  MOVLW  08
02A3A:  MOVWF  xD4
02A3C:  MOVLB  0
02A3E:  RCALL  270C
....................    copy_array(on_adr,&((struct light)output->device).on,8); 
02A40:  MOVLW  01
02A42:  MOVLB  6
02A44:  ADDWF  xC4,W
02A46:  MOVWF  01
02A48:  MOVLW  00
02A4A:  ADDWFC xC5,W
02A4C:  MOVWF  03
02A4E:  MOVFF  01,6C9
02A52:  MOVWF  xCA
02A54:  MOVFF  6C1,6D1
02A58:  MOVFF  6C0,6D0
02A5C:  MOVWF  xD3
02A5E:  MOVFF  01,6D2
02A62:  MOVLW  08
02A64:  MOVWF  xD4
02A66:  MOVLB  0
02A68:  RCALL  270C
....................    copy_array(off_adr,&((struct light)output->device).off,8); 
02A6A:  MOVLW  01
02A6C:  MOVLB  6
02A6E:  ADDWF  xC4,W
02A70:  MOVWF  01
02A72:  MOVLW  00
02A74:  ADDWFC xC5,W
02A76:  MOVWF  03
02A78:  MOVF   01,W
02A7A:  ADDLW  0A
02A7C:  MOVWF  01
02A7E:  MOVLW  00
02A80:  ADDWFC 03,F
02A82:  MOVFF  01,6C9
02A86:  MOVFF  03,6CA
02A8A:  MOVFF  6C3,6D1
02A8E:  MOVFF  6C2,6D0
02A92:  MOVFF  03,6D3
02A96:  MOVFF  01,6D2
02A9A:  MOVLW  08
02A9C:  MOVWF  xD4
02A9E:  MOVLB  0
02AA0:  RCALL  270C
....................    ((struct light)output->device).out_state=_off; 
02AA2:  MOVLW  01
02AA4:  MOVLB  6
02AA6:  ADDWF  xC4,W
02AA8:  MOVWF  01
02AAA:  MOVLW  00
02AAC:  ADDWFC xC5,W
02AAE:  MOVWF  03
02AB0:  MOVF   01,W
02AB2:  ADDLW  1E
02AB4:  MOVWF  FE9
02AB6:  MOVLW  00
02AB8:  ADDWFC 03,W
02ABA:  MOVWF  FEA
02ABC:  MOVLW  01
02ABE:  MOVWF  FEF
.................... } 
02AC0:  MOVLB  0
02AC2:  GOTO   3404 (RETURN)
.................... void onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,struct outputs* output,unsigned int output_pin) 
.................... { 
....................    ((struct outputs *)output)->type=_on_off; 
*
02D08:  MOVLB  6
02D0A:  MOVFF  6C2,FE9
02D0E:  MOVFF  6C3,FEA
02D12:  MOVLW  64
02D14:  MOVWF  FEF
....................    ((struct oNoFF)output->device).on.needs_update=0; 
02D16:  MOVLW  01
02D18:  ADDWF  xC2,W
02D1A:  MOVWF  01
02D1C:  MOVLW  00
02D1E:  ADDWFC xC3,W
02D20:  MOVWF  03
02D22:  MOVF   01,W
02D24:  ADDLW  09
02D26:  MOVWF  FE9
02D28:  MOVLW  00
02D2A:  ADDWFC 03,W
02D2C:  MOVWF  FEA
02D2E:  BCF    FEF.0
....................    ((struct oNoFF)output->device).off.needs_update=0; 
02D30:  MOVLW  01
02D32:  ADDWF  xC2,W
02D34:  MOVWF  01
02D36:  MOVLW  00
02D38:  ADDWFC xC3,W
02D3A:  MOVWF  03
02D3C:  MOVF   01,W
02D3E:  ADDLW  13
02D40:  MOVWF  FE9
02D42:  MOVLW  00
02D44:  ADDWFC 03,W
02D46:  MOVWF  FEA
02D48:  BCF    FEF.0
....................    ((struct oNoFF)output->device).on.value=0; 
02D4A:  MOVLW  01
02D4C:  ADDWF  xC2,W
02D4E:  MOVWF  01
02D50:  MOVLW  00
02D52:  ADDWFC xC3,W
02D54:  MOVWF  03
02D56:  MOVF   01,W
02D58:  ADDLW  08
02D5A:  MOVWF  FE9
02D5C:  MOVLW  00
02D5E:  ADDWFC 03,W
02D60:  MOVWF  FEA
02D62:  CLRF   FEF
....................    ((struct oNoFF)output->device).off.value=0; 
02D64:  MOVLW  01
02D66:  ADDWF  xC2,W
02D68:  MOVWF  01
02D6A:  MOVLW  00
02D6C:  ADDWFC xC3,W
02D6E:  MOVWF  03
02D70:  MOVF   01,W
02D72:  ADDLW  12
02D74:  MOVWF  FE9
02D76:  MOVLW  00
02D78:  ADDWFC 03,W
02D7A:  MOVWF  FEA
02D7C:  CLRF   FEF
....................    ((struct oNoFF)output->device).output_pin=output_pin; 
02D7E:  MOVLW  01
02D80:  ADDWF  xC2,W
02D82:  MOVWF  01
02D84:  MOVLW  00
02D86:  ADDWFC xC3,W
02D88:  MOVWF  03
02D8A:  MOVF   01,W
02D8C:  ADDLW  14
02D8E:  MOVWF  FE9
02D90:  MOVLW  00
02D92:  ADDWFC 03,W
02D94:  MOVWF  FEA
02D96:  MOVFF  6C4,FEF
....................    copy_array(on_adr,&((struct oNoFF)output->device).on,8); 
02D9A:  MOVLW  01
02D9C:  ADDWF  xC2,W
02D9E:  MOVWF  01
02DA0:  MOVLW  00
02DA2:  ADDWFC xC3,W
02DA4:  MOVWF  03
02DA6:  MOVFF  01,6C7
02DAA:  MOVWF  xC8
02DAC:  MOVFF  6BF,6D1
02DB0:  MOVFF  6BE,6D0
02DB4:  MOVWF  xD3
02DB6:  MOVFF  01,6D2
02DBA:  MOVLW  08
02DBC:  MOVWF  xD4
02DBE:  MOVLB  0
02DC0:  RCALL  270C
....................    copy_array(off_adr,&((struct oNoFF)output->device).off,8); 
02DC2:  MOVLW  01
02DC4:  MOVLB  6
02DC6:  ADDWF  xC2,W
02DC8:  MOVWF  01
02DCA:  MOVLW  00
02DCC:  ADDWFC xC3,W
02DCE:  MOVWF  03
02DD0:  MOVF   01,W
02DD2:  ADDLW  0A
02DD4:  MOVWF  01
02DD6:  MOVLW  00
02DD8:  ADDWFC 03,F
02DDA:  MOVFF  01,6C7
02DDE:  MOVFF  03,6C8
02DE2:  MOVFF  6C1,6D1
02DE6:  MOVFF  6C0,6D0
02DEA:  MOVFF  03,6D3
02DEE:  MOVFF  01,6D2
02DF2:  MOVLW  08
02DF4:  MOVWF  xD4
02DF6:  MOVLB  0
02DF8:  RCALL  270C
.................... } 
02DFA:  GOTO   36AA (RETURN)
....................  
.................... void shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... struct outputs* output,unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................    ((struct outputs *)output)->type=shutter; 
*
02AC6:  MOVLB  6
02AC8:  MOVFF  6C6,FE9
02ACC:  MOVFF  6C7,FEA
02AD0:  MOVLW  66
02AD2:  MOVWF  FEF
....................    ((struct shutter)output->device).up.needs_update=0; 
02AD4:  MOVLW  01
02AD6:  ADDWF  xC6,W
02AD8:  MOVWF  01
02ADA:  MOVLW  00
02ADC:  ADDWFC xC7,W
02ADE:  MOVWF  03
02AE0:  MOVF   01,W
02AE2:  ADDLW  09
02AE4:  MOVWF  FE9
02AE6:  MOVLW  00
02AE8:  ADDWFC 03,W
02AEA:  MOVWF  FEA
02AEC:  BCF    FEF.0
....................    ((struct shutter)output->device).down.needs_update=0; 
02AEE:  MOVLW  01
02AF0:  ADDWF  xC6,W
02AF2:  MOVWF  01
02AF4:  MOVLW  00
02AF6:  ADDWFC xC7,W
02AF8:  MOVWF  03
02AFA:  MOVF   01,W
02AFC:  ADDLW  13
02AFE:  MOVWF  FE9
02B00:  MOVLW  00
02B02:  ADDWFC 03,W
02B04:  MOVWF  FEA
02B06:  BCF    FEF.0
....................    ((struct shutter)output->device).up.value=0; 
02B08:  MOVLW  01
02B0A:  ADDWF  xC6,W
02B0C:  MOVWF  01
02B0E:  MOVLW  00
02B10:  ADDWFC xC7,W
02B12:  MOVWF  03
02B14:  MOVF   01,W
02B16:  ADDLW  08
02B18:  MOVWF  FE9
02B1A:  MOVLW  00
02B1C:  ADDWFC 03,W
02B1E:  MOVWF  FEA
02B20:  CLRF   FEF
....................    ((struct shutter)output->device).down.value=0; 
02B22:  MOVLW  01
02B24:  ADDWF  xC6,W
02B26:  MOVWF  01
02B28:  MOVLW  00
02B2A:  ADDWFC xC7,W
02B2C:  MOVWF  03
02B2E:  MOVF   01,W
02B30:  ADDLW  12
02B32:  MOVWF  FE9
02B34:  MOVLW  00
02B36:  ADDWFC 03,W
02B38:  MOVWF  FEA
02B3A:  CLRF   FEF
....................    ((struct shutter)output->device).fullup.needs_update=0; 
02B3C:  MOVLW  01
02B3E:  ADDWF  xC6,W
02B40:  MOVWF  01
02B42:  MOVLW  00
02B44:  ADDWFC xC7,W
02B46:  MOVWF  03
02B48:  MOVF   01,W
02B4A:  ADDLW  1D
02B4C:  MOVWF  FE9
02B4E:  MOVLW  00
02B50:  ADDWFC 03,W
02B52:  MOVWF  FEA
02B54:  BCF    FEF.0
....................    ((struct shutter)output->device).fulldown.needs_update=0; 
02B56:  MOVLW  01
02B58:  ADDWF  xC6,W
02B5A:  MOVWF  01
02B5C:  MOVLW  00
02B5E:  ADDWFC xC7,W
02B60:  MOVWF  03
02B62:  MOVF   01,W
02B64:  ADDLW  27
02B66:  MOVWF  FE9
02B68:  MOVLW  00
02B6A:  ADDWFC 03,W
02B6C:  MOVWF  FEA
02B6E:  BCF    FEF.0
....................    ((struct shutter)output->device).fullup.value=0; 
02B70:  MOVLW  01
02B72:  ADDWF  xC6,W
02B74:  MOVWF  01
02B76:  MOVLW  00
02B78:  ADDWFC xC7,W
02B7A:  MOVWF  03
02B7C:  MOVF   01,W
02B7E:  ADDLW  1C
02B80:  MOVWF  FE9
02B82:  MOVLW  00
02B84:  ADDWFC 03,W
02B86:  MOVWF  FEA
02B88:  CLRF   FEF
....................    ((struct shutter)output->device).fulldown.value=0; 
02B8A:  MOVLW  01
02B8C:  ADDWF  xC6,W
02B8E:  MOVWF  01
02B90:  MOVLW  00
02B92:  ADDWFC xC7,W
02B94:  MOVWF  03
02B96:  MOVF   01,W
02B98:  ADDLW  26
02B9A:  MOVWF  FE9
02B9C:  MOVLW  00
02B9E:  ADDWFC 03,W
02BA0:  MOVWF  FEA
02BA2:  CLRF   FEF
....................    ((struct shutter)output->device).output_pin_up=up_output_pin; 
02BA4:  MOVLW  01
02BA6:  ADDWF  xC6,W
02BA8:  MOVWF  01
02BAA:  MOVLW  00
02BAC:  ADDWFC xC7,W
02BAE:  MOVWF  03
02BB0:  MOVF   01,W
02BB2:  ADDLW  28
02BB4:  MOVWF  FE9
02BB6:  MOVLW  00
02BB8:  ADDWFC 03,W
02BBA:  MOVWF  FEA
02BBC:  MOVFF  6C8,FEF
....................    ((struct shutter)output->device).output_pin_down=down_output_pin; 
02BC0:  MOVLW  01
02BC2:  ADDWF  xC6,W
02BC4:  MOVWF  01
02BC6:  MOVLW  00
02BC8:  ADDWFC xC7,W
02BCA:  MOVWF  03
02BCC:  MOVF   01,W
02BCE:  ADDLW  29
02BD0:  MOVWF  FE9
02BD2:  MOVLW  00
02BD4:  ADDWFC 03,W
02BD6:  MOVWF  FEA
02BD8:  MOVFF  6C9,FEF
....................    ((struct shutter)output->device).fullTime=LongMoveTime; 
02BDC:  MOVLW  01
02BDE:  ADDWF  xC6,W
02BE0:  MOVWF  01
02BE2:  MOVLW  00
02BE4:  ADDWFC xC7,W
02BE6:  MOVWF  03
02BE8:  MOVF   01,W
02BEA:  ADDLW  2B
02BEC:  MOVWF  FE9
02BEE:  MOVLW  00
02BF0:  ADDWFC 03,W
02BF2:  MOVWF  FEA
02BF4:  MOVFF  6CB,FEF
....................    ((struct shutter)output->device).shortTime=shortMoveTime;  
02BF8:  MOVLW  01
02BFA:  ADDWF  xC6,W
02BFC:  MOVWF  01
02BFE:  MOVLW  00
02C00:  ADDWFC xC7,W
02C02:  MOVWF  03
02C04:  MOVF   01,W
02C06:  ADDLW  2C
02C08:  MOVWF  FE9
02C0A:  MOVLW  00
02C0C:  ADDWFC 03,W
02C0E:  MOVWF  FEA
02C10:  MOVFF  6CA,FEF
....................    copy_array(up_adr,&((struct shutter)output->device).up,8); 
02C14:  MOVLW  01
02C16:  ADDWF  xC6,W
02C18:  MOVWF  01
02C1A:  MOVLW  00
02C1C:  ADDWFC xC7,W
02C1E:  MOVWF  03
02C20:  MOVFF  01,6CE
02C24:  MOVWF  xCF
02C26:  MOVFF  6BF,6D1
02C2A:  MOVFF  6BE,6D0
02C2E:  MOVWF  xD3
02C30:  MOVFF  01,6D2
02C34:  MOVLW  08
02C36:  MOVWF  xD4
02C38:  MOVLB  0
02C3A:  RCALL  270C
....................    copy_array(down_adr,&((struct shutter)output->device).down,8); 
02C3C:  MOVLW  01
02C3E:  MOVLB  6
02C40:  ADDWF  xC6,W
02C42:  MOVWF  01
02C44:  MOVLW  00
02C46:  ADDWFC xC7,W
02C48:  MOVWF  03
02C4A:  MOVF   01,W
02C4C:  ADDLW  0A
02C4E:  MOVWF  01
02C50:  MOVLW  00
02C52:  ADDWFC 03,F
02C54:  MOVFF  01,6CE
02C58:  MOVFF  03,6CF
02C5C:  MOVFF  6C1,6D1
02C60:  MOVFF  6C0,6D0
02C64:  MOVFF  03,6D3
02C68:  MOVFF  01,6D2
02C6C:  MOVLW  08
02C6E:  MOVWF  xD4
02C70:  MOVLB  0
02C72:  RCALL  270C
....................    copy_array(fullup_adr,&((struct shutter)output->device).fullup,8); 
02C74:  MOVLW  01
02C76:  MOVLB  6
02C78:  ADDWF  xC6,W
02C7A:  MOVWF  01
02C7C:  MOVLW  00
02C7E:  ADDWFC xC7,W
02C80:  MOVWF  03
02C82:  MOVF   01,W
02C84:  ADDLW  14
02C86:  MOVWF  01
02C88:  MOVLW  00
02C8A:  ADDWFC 03,F
02C8C:  MOVFF  01,6CE
02C90:  MOVFF  03,6CF
02C94:  MOVFF  6C3,6D1
02C98:  MOVFF  6C2,6D0
02C9C:  MOVFF  03,6D3
02CA0:  MOVFF  01,6D2
02CA4:  MOVLW  08
02CA6:  MOVWF  xD4
02CA8:  MOVLB  0
02CAA:  RCALL  270C
....................    copy_array(fulldown_adr,&((struct shutter)output->device).fulldown,8); 
02CAC:  MOVLW  01
02CAE:  MOVLB  6
02CB0:  ADDWF  xC6,W
02CB2:  MOVWF  01
02CB4:  MOVLW  00
02CB6:  ADDWFC xC7,W
02CB8:  MOVWF  03
02CBA:  MOVF   01,W
02CBC:  ADDLW  1E
02CBE:  MOVWF  01
02CC0:  MOVLW  00
02CC2:  ADDWFC 03,F
02CC4:  MOVFF  01,6CE
02CC8:  MOVFF  03,6CF
02CCC:  MOVFF  6C5,6D1
02CD0:  MOVFF  6C4,6D0
02CD4:  MOVFF  03,6D3
02CD8:  MOVFF  01,6D2
02CDC:  MOVLW  08
02CDE:  MOVWF  xD4
02CE0:  MOVLB  0
02CE2:  RCALL  270C
....................    ((struct shutter)output->device).state=idle; 
02CE4:  MOVLW  01
02CE6:  MOVLB  6
02CE8:  ADDWF  xC6,W
02CEA:  MOVWF  01
02CEC:  MOVLW  00
02CEE:  ADDWFC xC7,W
02CF0:  MOVWF  03
02CF2:  MOVF   01,W
02CF4:  ADDLW  2D
02CF6:  MOVWF  FE9
02CF8:  MOVLW  00
02CFA:  ADDWFC 03,W
02CFC:  MOVWF  FEA
02CFE:  MOVLW  04
02D00:  MOVWF  FEF
.................... } 
02D02:  MOVLB  0
02D04:  GOTO   35BC (RETURN)
....................  
.................... void timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,struct inputs* input,timer_type type, int16  timeToAct) 
.................... { 
....................    ((struct inputs *)input)->type=timer; 
*
0274C:  MOVLB  6
0274E:  MOVFF  6C4,FE9
02752:  MOVFF  6C5,FEA
02756:  MOVLW  03
02758:  MOVWF  FEF
....................    ((struct timer)input->device).on.needs_update=0; 
0275A:  MOVLW  01
0275C:  ADDWF  xC4,W
0275E:  MOVWF  01
02760:  MOVLW  00
02762:  ADDWFC xC5,W
02764:  MOVWF  03
02766:  MOVF   01,W
02768:  ADDLW  05
0276A:  MOVWF  FE9
0276C:  MOVLW  00
0276E:  ADDWFC 03,W
02770:  MOVWF  FEA
02772:  BCF    FEF.0
....................    ((struct timer)input->device).off.needs_update=0; 
02774:  MOVLW  01
02776:  ADDWF  xC4,W
02778:  MOVWF  01
0277A:  MOVLW  00
0277C:  ADDWFC xC5,W
0277E:  MOVWF  03
02780:  MOVF   01,W
02782:  ADDLW  08
02784:  MOVWF  FE9
02786:  MOVLW  00
02788:  ADDWFC 03,W
0278A:  MOVWF  FEA
0278C:  BCF    FEF.0
....................    ((struct timer)input->device).on.value=0; 
0278E:  MOVLW  01
02790:  ADDWF  xC4,W
02792:  MOVWF  01
02794:  MOVLW  00
02796:  ADDWFC xC5,W
02798:  MOVWF  03
0279A:  MOVF   01,W
0279C:  ADDLW  04
0279E:  MOVWF  FE9
027A0:  MOVLW  00
027A2:  ADDWFC 03,W
027A4:  MOVWF  FEA
027A6:  CLRF   FEF
....................    ((struct timer)input->device).off.value=0; 
027A8:  MOVLW  01
027AA:  ADDWF  xC4,W
027AC:  MOVWF  01
027AE:  MOVLW  00
027B0:  ADDWFC xC5,W
027B2:  MOVWF  03
027B4:  MOVF   01,W
027B6:  ADDLW  07
027B8:  MOVWF  FE9
027BA:  MOVLW  00
027BC:  ADDWFC 03,W
027BE:  MOVWF  FEA
027C0:  CLRF   FEF
....................    ((struct timer)input->device).start.needs_update=0; 
027C2:  MOVLW  01
027C4:  ADDWF  xC4,W
027C6:  MOVWF  01
027C8:  MOVLW  00
027CA:  ADDWFC xC5,W
027CC:  MOVWF  03
027CE:  MOVF   01,W
027D0:  ADDLW  12
027D2:  MOVWF  FE9
027D4:  MOVLW  00
027D6:  ADDWFC 03,W
027D8:  MOVWF  FEA
027DA:  BCF    FEF.0
....................    ((struct timer)input->device).stop.needs_update=0; 
027DC:  MOVLW  01
027DE:  ADDWF  xC4,W
027E0:  MOVWF  01
027E2:  MOVLW  00
027E4:  ADDWFC xC5,W
027E6:  MOVWF  03
027E8:  MOVF   01,W
027EA:  ADDLW  1C
027EC:  MOVWF  FE9
027EE:  MOVLW  00
027F0:  ADDWFC 03,W
027F2:  MOVWF  FEA
027F4:  BCF    FEF.0
....................    ((struct timer)input->device).start.value=0; 
027F6:  MOVLW  01
027F8:  ADDWF  xC4,W
027FA:  MOVWF  01
027FC:  MOVLW  00
027FE:  ADDWFC xC5,W
02800:  MOVWF  03
02802:  MOVF   01,W
02804:  ADDLW  11
02806:  MOVWF  FE9
02808:  MOVLW  00
0280A:  ADDWFC 03,W
0280C:  MOVWF  FEA
0280E:  CLRF   FEF
....................    ((struct timer)input->device).stop.value=0; 
02810:  MOVLW  01
02812:  ADDWF  xC4,W
02814:  MOVWF  01
02816:  MOVLW  00
02818:  ADDWFC xC5,W
0281A:  MOVWF  03
0281C:  MOVF   01,W
0281E:  ADDLW  1B
02820:  MOVWF  FE9
02822:  MOVLW  00
02824:  ADDWFC 03,W
02826:  MOVWF  FEA
02828:  CLRF   FEF
....................    ((struct timer)input->device).timer=0; 
0282A:  MOVLW  01
0282C:  ADDWF  xC4,W
0282E:  MOVWF  01
02830:  MOVLW  00
02832:  ADDWFC xC5,W
02834:  MOVWF  03
02836:  MOVF   01,W
02838:  ADDLW  1D
0283A:  MOVWF  FE9
0283C:  MOVLW  00
0283E:  ADDWFC 03,W
02840:  MOVWF  FEA
02842:  CLRF   FEC
02844:  MOVF   FED,F
02846:  CLRF   FEF
....................    ((struct timer)input->device).type=type; 
02848:  MOVLW  01
0284A:  ADDWF  xC4,W
0284C:  MOVWF  01
0284E:  MOVLW  00
02850:  ADDWFC xC5,W
02852:  MOVFF  01,FE9
02856:  MOVWF  FEA
02858:  MOVFF  6C6,FEF
....................    ((struct timer)input->device).active=false; 
0285C:  MOVLW  01
0285E:  ADDWF  xC4,W
02860:  MOVWF  01
02862:  MOVLW  00
02864:  ADDWFC xC5,W
02866:  MOVWF  03
02868:  MOVF   01,W
0286A:  ADDLW  1F
0286C:  MOVWF  FE9
0286E:  MOVLW  00
02870:  ADDWFC 03,W
02872:  MOVWF  FEA
02874:  BCF    FEF.0
....................    ((struct timer)input->device).timeToAct=timeToAct; 
02876:  MOVLW  01
02878:  ADDWF  xC4,W
0287A:  MOVWF  01
0287C:  MOVLW  00
0287E:  ADDWFC xC5,W
02880:  MOVWF  03
02882:  MOVF   01,W
02884:  ADDLW  01
02886:  MOVWF  FE9
02888:  MOVLW  00
0288A:  ADDWFC 03,W
0288C:  MOVWF  FEA
0288E:  MOVFF  6C8,FEC
02892:  MOVF   FED,F
02894:  MOVFF  6C7,FEF
....................    ((struct timer)input->device).on.adress=out_on; 
02898:  MOVLW  01
0289A:  ADDWF  xC4,W
0289C:  MOVWF  01
0289E:  MOVLW  00
028A0:  ADDWFC xC5,W
028A2:  MOVWF  03
028A4:  MOVF   01,W
028A6:  ADDLW  03
028A8:  MOVWF  FE9
028AA:  MOVLW  00
028AC:  ADDWFC 03,W
028AE:  MOVWF  FEA
028B0:  MOVFF  6C2,FEF
....................    ((struct timer)input->device).off.adress=out_off; 
028B4:  MOVLW  01
028B6:  ADDWF  xC4,W
028B8:  MOVWF  01
028BA:  MOVLW  00
028BC:  ADDWFC xC5,W
028BE:  MOVWF  03
028C0:  MOVF   01,W
028C2:  ADDLW  06
028C4:  MOVWF  FE9
028C6:  MOVLW  00
028C8:  ADDWFC 03,W
028CA:  MOVWF  FEA
028CC:  MOVFF  6C3,FEF
....................    copy_array(start_adr,&((struct timer)input->device).start,8); 
028D0:  MOVLW  01
028D2:  ADDWF  xC4,W
028D4:  MOVWF  01
028D6:  MOVLW  00
028D8:  ADDWFC xC5,W
028DA:  MOVWF  03
028DC:  MOVF   01,W
028DE:  ADDLW  09
028E0:  MOVWF  01
028E2:  MOVLW  00
028E4:  ADDWFC 03,F
028E6:  MOVFF  01,6CB
028EA:  MOVFF  03,6CC
028EE:  MOVFF  6BF,6D1
028F2:  MOVFF  6BE,6D0
028F6:  MOVFF  03,6D3
028FA:  MOVFF  01,6D2
028FE:  MOVLW  08
02900:  MOVWF  xD4
02902:  MOVLB  0
02904:  RCALL  270C
....................    copy_array(stop_adr,&((struct timer)input->device).stop,8); 
02906:  MOVLW  01
02908:  MOVLB  6
0290A:  ADDWF  xC4,W
0290C:  MOVWF  01
0290E:  MOVLW  00
02910:  ADDWFC xC5,W
02912:  MOVWF  03
02914:  MOVF   01,W
02916:  ADDLW  13
02918:  MOVWF  01
0291A:  MOVLW  00
0291C:  ADDWFC 03,F
0291E:  MOVFF  01,6CB
02922:  MOVFF  03,6CC
02926:  MOVFF  6C1,6D1
0292A:  MOVFF  6C0,6D0
0292E:  MOVFF  03,6D3
02932:  MOVFF  01,6D2
02936:  MOVLW  08
02938:  MOVWF  xD4
0293A:  MOVLB  0
0293C:  RCALL  270C
....................   // printf("start %d stop %d outon %d outoff %d type %d time %Lu",((struct timer)input->device).start.adress[0],((struct timer)input->device).stop.adress[0],out_on,out_off,type,timeToAct); 
.................... } 
0293E:  GOTO   32EA (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void button_test() 
.................... {     mydevices.numberOfInputs=1; 
....................     //  struct dimmer_switch sw; 
....................     //  sw.dim_level.value=69; 
....................     //  mydevices.myinputs[0].device=sw; 
....................     //  printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................       on_off_init(1,2,&mydevices.myinputs[0],2); 
....................    // button_init(2,3,&mydevices.myinputs[0],0,false); 
....................     unsigned int start_adr[8]={2,255,255,255,255,255,255,255}; 
....................     unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    // timer_init(start_adr,empty,4,5,&mydevices.myinputs[1],time_on,5); 
....................      // dimmer_init(1,2,3,&mydevices.myinputs[0],0); 
....................       
....................       //printf("VALUE=%u\n\r",mydevices.myinputs[0].device.dim_level.value); 
....................      // while(true){}; 
.................... } 
....................  
....................  
....................  
.................... #include "dimming_functions.c" 
.................... #define N_LUZES 16 //numero maximo de dimmers 
.................... volatile int used_dimmers=0; 
....................  
.................... //#define printf_ printf 
.................... #define printf_ // 
.................... int1 organizado;//flag que diz se os dimmings estao organizados 
.................... int1 actmat=0;//matriz em uso 
.................... int16 pointer;//apontador para matriz em uso 
.................... int vez;//indice da matriz de dimming corrente 
.................... volatile int mnumluzes=0;//quantos valores de dimming diferentes temos 
.................... volatile unsigned int16 onoffsvalue=0xFFFF; 
.................... int ltlevel[N_LUZES]={50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50}; 
.................... volatile int16 delays1[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... volatile int16 delays2[N_LUZES+1][2]={0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15}; 
.................... const unsigned int16 light_pins[N_LUZES]={ 
.................... 0b1111111111101111,0b1111111111011111,0b1111111110111111,0b1111111101111111,0b1111111111110111,0b1111111111111011,0b1111111111111110,0b1111111111111101, 
.................... /*<........................................................................portD..................................................................................>*/ 
.................... 0b0111111111111111,0b1011111111111111,0b1101111111111111,0b1110111111111111,0b1111011111111111,0b1111101111111111,0b1111110111111111,0b1111111011111111}; 
.................... /*<.................................................................................portC.............................................................>*/ 
....................  
.................... unsigned int16 lights[N_LUZES]; 
.................... const long Matrizluz[128]={ 
.................... 38400,38731 , 38492 , 38253 , 38014 , 37775 , 37536 , 37297 , 37058 , 36819 , 36580 
.................... , 36341 , 36102 , 35863 , 35624 , 35385 , 35146 , 34907 , 34668 , 34429 , 34190 , 33951 
....................  , 33712 , 33473 , 33234 , 32995 , 32756 , 32517 , 32278 , 32039 , 31800 , 31561 , 31322 
....................  , 31083 , 30844 , 30605 , 30366 , 30127 , 29888 , 29649 , 29410 , 29171 , 28932 , 28693 
....................  , 28454 , 28215 , 27976 , 27737 , 27498 , 27259 , 27020 , 26781 , 26542 , 26303 , 26064 
....................  , 25825 , 25586 , 25347 , 25108 , 24869 , 24630 , 24391 , 24152 , 23913 , 23674 , 23435 
....................  , 23196 , 22957 , 22718 , 22479 , 22240 , 22001 , 21762 , 21523 , 21284 , 21045 , 20806 
....................  , 20567 , 20328 , 20089 , 19850 , 19611 , 19372 , 19133 , 18894 , 18655 , 18416 , 18177 
....................  , 17938 , 17699 , 17460 , 17221 , 16982 , 16743 , 16504 , 16265 , 16026 , 15787 , 15548 
....................  , 15309 , 15070 , 14831 , 14592 , 14353 , 14114 , 13875 , 13636 , 13397 , 13158 , 12919 
....................  , 12680 , 12441 , 12202 , 11963 , 11724 , 11485 , 11246 , 11007 , 10768 , 10529 , 10290 
....................  , 10051 , 9812 , 9573 , 9334 , 9095 , 8856 , 617 }; 
....................   
....................   
....................  #INLINE 
....................   INT16 fpointer(int ax,int ay) 
....................    { 
....................       int16 * p; 
....................       p=(pointer + 2* ax * 2 + 2*ay); 
*
00FE0:  BCF    FD8.0
00FE2:  RLCF   xDB,W
00FE4:  MOVWF  00
00FE6:  BCF    FD8.0
00FE8:  RLCF   00,F
00FEA:  MOVF   00,W
00FEC:  MOVLB  5
00FEE:  ADDWF  x7B,W
00FF0:  MOVLB  6
00FF2:  MOVWF  xDF
00FF4:  MOVLW  00
00FF6:  MOVLB  5
00FF8:  ADDWFC x7C,W
00FFA:  MOVLB  6
00FFC:  MOVWF  xE0
00FFE:  BCF    FD8.0
01000:  RLCF   xDC,W
01002:  ADDWF  xDF,W
01004:  MOVWF  xDD
01006:  MOVLW  00
01008:  ADDWFC xE0,W
0100A:  MOVWF  xDE
*
01078:  BCF    FD8.0
0107A:  RLCF   xDB,W
0107C:  MOVWF  00
0107E:  BCF    FD8.0
01080:  RLCF   00,F
01082:  MOVF   00,W
01084:  MOVLB  5
01086:  ADDWF  x7B,W
01088:  MOVLB  6
0108A:  MOVWF  xDF
0108C:  MOVLW  00
0108E:  MOVLB  5
01090:  ADDWFC x7C,W
01092:  MOVLB  6
01094:  MOVWF  xE0
01096:  BCF    FD8.0
01098:  RLCF   xDC,W
0109A:  ADDWF  xDF,W
0109C:  MOVWF  xDD
0109E:  MOVLW  00
010A0:  ADDWFC xE0,W
010A2:  MOVWF  xDE
*
01106:  BCF    FD8.0
01108:  RLCF   xDB,W
0110A:  MOVWF  00
0110C:  BCF    FD8.0
0110E:  RLCF   00,F
01110:  MOVF   00,W
01112:  MOVLB  5
01114:  ADDWF  x7B,W
01116:  MOVLB  6
01118:  MOVWF  xDF
0111A:  MOVLW  00
0111C:  MOVLB  5
0111E:  ADDWFC x7C,W
01120:  MOVLB  6
01122:  MOVWF  xE0
01124:  BCF    FD8.0
01126:  RLCF   xDC,W
01128:  ADDWF  xDF,W
0112A:  MOVWF  xDD
0112C:  MOVLW  00
0112E:  ADDWFC xE0,W
01130:  MOVWF  xDE
*
01192:  BCF    FD8.0
01194:  RLCF   xDB,W
01196:  MOVWF  00
01198:  BCF    FD8.0
0119A:  RLCF   00,F
0119C:  MOVF   00,W
0119E:  MOVLB  5
011A0:  ADDWF  x7B,W
011A2:  MOVLB  6
011A4:  MOVWF  xDF
011A6:  MOVLW  00
011A8:  MOVLB  5
011AA:  ADDWFC x7C,W
011AC:  MOVLB  6
011AE:  MOVWF  xE0
011B0:  BCF    FD8.0
011B2:  RLCF   xDC,W
011B4:  ADDWF  xDF,W
011B6:  MOVWF  xDD
011B8:  MOVLW  00
011BA:  ADDWFC xE0,W
011BC:  MOVWF  xDE
....................      RETURN *(int16*)(pointer + 2* ax * 2 + 2*ay); 
*
0100C:  BCF    FD8.0
0100E:  RLCF   xDB,W
01010:  MOVWF  00
01012:  BCF    FD8.0
01014:  RLCF   00,F
01016:  MOVF   00,W
01018:  MOVLB  5
0101A:  ADDWF  x7B,W
0101C:  MOVLB  6
0101E:  MOVWF  xDF
01020:  MOVLW  00
01022:  MOVLB  5
01024:  ADDWFC x7C,W
01026:  MOVLB  6
01028:  MOVWF  xE0
0102A:  BCF    FD8.0
0102C:  RLCF   xDC,W
0102E:  ADDWF  xDF,W
01030:  MOVWF  01
01032:  MOVLW  00
01034:  ADDWFC xE0,W
01036:  MOVWF  03
01038:  MOVFF  01,FE9
0103C:  MOVWF  FEA
0103E:  MOVFF  FEF,01
01042:  INCF   FE9,F
01044:  MOVF   FEF,W
01046:  DECF   FE9,F
01048:  MOVWF  02
*
010A4:  BCF    FD8.0
010A6:  RLCF   xDB,W
010A8:  MOVWF  00
010AA:  BCF    FD8.0
010AC:  RLCF   00,F
010AE:  MOVF   00,W
010B0:  MOVLB  5
010B2:  ADDWF  x7B,W
010B4:  MOVLB  6
010B6:  MOVWF  xDF
010B8:  MOVLW  00
010BA:  MOVLB  5
010BC:  ADDWFC x7C,W
010BE:  MOVLB  6
010C0:  MOVWF  xE0
010C2:  BCF    FD8.0
010C4:  RLCF   xDC,W
010C6:  ADDWF  xDF,W
010C8:  MOVWF  01
010CA:  MOVLW  00
010CC:  ADDWFC xE0,W
010CE:  MOVWF  03
010D0:  MOVFF  01,FE9
010D4:  MOVWF  FEA
010D6:  MOVFF  FEF,01
010DA:  INCF   FE9,F
010DC:  MOVF   FEF,W
010DE:  DECF   FE9,F
010E0:  MOVWF  02
*
01132:  BCF    FD8.0
01134:  RLCF   xDB,W
01136:  MOVWF  00
01138:  BCF    FD8.0
0113A:  RLCF   00,F
0113C:  MOVF   00,W
0113E:  MOVLB  5
01140:  ADDWF  x7B,W
01142:  MOVLB  6
01144:  MOVWF  xDF
01146:  MOVLW  00
01148:  MOVLB  5
0114A:  ADDWFC x7C,W
0114C:  MOVLB  6
0114E:  MOVWF  xE0
01150:  BCF    FD8.0
01152:  RLCF   xDC,W
01154:  ADDWF  xDF,W
01156:  MOVWF  01
01158:  MOVLW  00
0115A:  ADDWFC xE0,W
0115C:  MOVWF  03
0115E:  MOVFF  01,FE9
01162:  MOVWF  FEA
01164:  MOVFF  FEF,01
01168:  INCF   FE9,F
0116A:  MOVF   FEF,W
0116C:  DECF   FE9,F
0116E:  MOVWF  02
*
011BE:  BCF    FD8.0
011C0:  RLCF   xDB,W
011C2:  MOVWF  00
011C4:  BCF    FD8.0
011C6:  RLCF   00,F
011C8:  MOVF   00,W
011CA:  MOVLB  5
011CC:  ADDWF  x7B,W
011CE:  MOVLB  6
011D0:  MOVWF  xDF
011D2:  MOVLW  00
011D4:  MOVLB  5
011D6:  ADDWFC x7C,W
011D8:  MOVLB  6
011DA:  MOVWF  xE0
011DC:  BCF    FD8.0
011DE:  RLCF   xDC,W
011E0:  ADDWF  xDF,W
011E2:  MOVWF  01
011E4:  MOVLW  00
011E6:  ADDWFC xE0,W
011E8:  MOVWF  03
011EA:  MOVFF  01,FE9
011EE:  MOVWF  FEA
011F0:  MOVFF  FEF,01
011F4:  INCF   FE9,F
011F6:  MOVF   FEF,W
011F8:  DECF   FE9,F
011FA:  MOVWF  02
....................    } 
....................  
....................    
....................   VOID org(void) 
....................   { 
*
036CC:  MOVLB  6
036CE:  CLRF   xA3
036D0:  BSF    xA4.0
....................     // printf("org "); 
....................      INT16 tempd[N_LUZES][2]; 
....................      INT numluzes=0; 
....................      INT1 again = 1; 
....................      INT fa; 
....................      INT16 fl; 
....................      INT afa; 
....................      FOR(fa = 0;fa < used_dimmers;++fa) 
036D2:  CLRF   xA5
036D4:  MOVLB  5
036D6:  MOVF   x7A,W
036D8:  MOVLB  6
036DA:  SUBWF  xA5,W
036DC:  BC    376C
....................      { 
....................         tempd[fa][0] = ltlevel[fa];//tempd[x][0] fica com o valor de dimming 0...127 
036DE:  MOVF   xA5,W
036E0:  MULLW  04
036E2:  MOVF   FF3,W
036E4:  CLRF   xAA
036E6:  MOVWF  xA9
036E8:  MOVLW  63
036EA:  ADDWF  xA9,W
036EC:  MOVWF  01
036EE:  MOVLW  06
036F0:  ADDWFC xAA,W
036F2:  MOVWF  03
036F4:  MOVWF  xAA
036F6:  CLRF   03
036F8:  MOVF   xA5,W
036FA:  ADDLW  81
036FC:  MOVWF  FE9
036FE:  MOVLW  05
03700:  ADDWFC 03,W
03702:  MOVWF  FEA
03704:  MOVF   FEF,W
03706:  CLRF   03
03708:  MOVFF  6AA,FEA
0370C:  MOVFF  01,FE9
03710:  MOVFF  03,FEC
03714:  MOVF   FED,F
03716:  MOVWF  FEF
....................         tempd[fa][1] = lights[fa];//tempd[x][1] fica com o valor binario DO porto de saida 
03718:  MOVF   xA5,W
0371A:  MULLW  04
0371C:  MOVF   FF3,W
0371E:  CLRF   xAA
03720:  MOVWF  xA9
03722:  MOVLW  02
03724:  ADDWF  xA9,W
03726:  MOVWF  01
03728:  MOVLW  00
0372A:  ADDWFC xAA,W
0372C:  MOVWF  03
0372E:  MOVF   01,W
03730:  ADDLW  63
03732:  MOVWF  01
03734:  MOVLW  06
03736:  ADDWFC 03,F
03738:  MOVFF  03,6AA
0373C:  BCF    FD8.0
0373E:  RLCF   xA5,W
03740:  CLRF   03
03742:  ADDLW  19
03744:  MOVWF  FE9
03746:  MOVLW  06
03748:  ADDWFC 03,W
0374A:  MOVWF  FEA
0374C:  MOVFF  FEC,03
03750:  MOVF   FED,F
03752:  MOVFF  FEF,6AB
03756:  MOVFF  6AA,FEA
0375A:  MOVFF  01,FE9
0375E:  MOVFF  03,FEC
03762:  MOVF   FED,F
03764:  MOVFF  6AB,FEF
....................      } 
03768:  INCF   xA5,F
0376A:  BRA    36D4
....................  
....................      WHILE(again) 
....................      { 
0376C:  BTFSS  xA4.0
0376E:  BRA    3936
....................         again = 0; 
03770:  BCF    xA4.0
....................         FOR(fa = 0;fa < used_dimmers-1;++fa) 
03772:  CLRF   xA5
03774:  MOVLW  01
03776:  MOVLB  5
03778:  SUBWF  x7A,W
0377A:  MOVLB  6
0377C:  SUBWF  xA5,W
0377E:  BTFSC  FD8.0
03780:  BRA    3934
....................         { 
....................            //coloca valores por ordem tempd[0][0] o maior 
....................            IF(tempd[fa][0] < tempd[fa + 1][0]) 
03782:  MOVF   xA5,W
03784:  MULLW  04
03786:  MOVF   FF3,W
03788:  CLRF   xAA
0378A:  MOVWF  xA9
0378C:  MOVLW  63
0378E:  ADDWF  xA9,W
03790:  MOVWF  FE9
03792:  MOVLW  06
03794:  ADDWFC xAA,W
03796:  MOVWF  FEA
03798:  MOVFF  FEC,6AA
0379C:  MOVF   FED,F
0379E:  MOVFF  FEF,6A9
037A2:  MOVLW  01
037A4:  ADDWF  xA5,W
037A6:  MULLW  04
037A8:  MOVF   FF3,W
037AA:  CLRF   xAC
037AC:  MOVWF  xAB
037AE:  MOVLW  63
037B0:  ADDWF  xAB,W
037B2:  MOVWF  FE9
037B4:  MOVLW  06
037B6:  ADDWFC xAC,W
037B8:  MOVWF  FEA
037BA:  MOVFF  FEC,03
037BE:  MOVF   FED,F
037C0:  MOVFF  FEF,01
037C4:  MOVF   xAA,W
037C6:  SUBWF  03,W
037C8:  BTFSS  FD8.0
037CA:  BRA    3930
037CC:  BNZ   37D6
037CE:  MOVF   01,W
037D0:  SUBWF  xA9,W
037D2:  BTFSC  FD8.0
037D4:  BRA    3930
....................            { 
....................               again = 1; 
037D6:  BSF    xA4.0
....................               fl = tempd[fa][0]; 
037D8:  MOVF   xA5,W
037DA:  MULLW  04
037DC:  MOVF   FF3,W
037DE:  CLRF   xAA
037E0:  MOVWF  xA9
037E2:  MOVLW  63
037E4:  ADDWF  xA9,W
037E6:  MOVWF  FE9
037E8:  MOVLW  06
037EA:  ADDWFC xAA,W
037EC:  MOVWF  FEA
037EE:  MOVFF  FEC,03
037F2:  MOVF   FED,F
037F4:  MOVFF  FEF,6A6
037F8:  MOVFF  03,6A7
....................               tempd[fa][0] = tempd[fa + 1][0]; 
037FC:  MOVF   xA5,W
037FE:  MULLW  04
03800:  MOVF   FF3,W
03802:  CLRF   xAA
03804:  MOVWF  xA9
03806:  MOVLW  63
03808:  ADDWF  xA9,W
0380A:  MOVWF  01
0380C:  MOVLW  06
0380E:  ADDWFC xAA,W
03810:  MOVWF  03
03812:  MOVWF  xAA
03814:  MOVLW  01
03816:  ADDWF  xA5,W
03818:  MULLW  04
0381A:  MOVF   FF3,W
0381C:  CLRF   xAC
0381E:  MOVWF  xAB
03820:  MOVLW  63
03822:  ADDWF  xAB,W
03824:  MOVWF  FE9
03826:  MOVLW  06
03828:  ADDWFC xAC,W
0382A:  MOVWF  FEA
0382C:  MOVFF  FEC,03
03830:  MOVF   FED,F
03832:  MOVFF  FEF,6AB
03836:  MOVFF  6AA,FEA
0383A:  MOVFF  01,FE9
0383E:  MOVFF  03,FEC
03842:  MOVF   FED,F
03844:  MOVFF  6AB,FEF
....................               tempd[fa + 1][0] = fl; 
03848:  MOVLW  01
0384A:  ADDWF  xA5,W
0384C:  MULLW  04
0384E:  MOVF   FF3,W
03850:  CLRF   xAA
03852:  MOVWF  xA9
03854:  MOVLW  63
03856:  ADDWF  xA9,W
03858:  MOVWF  FE9
0385A:  MOVLW  06
0385C:  ADDWFC xAA,W
0385E:  MOVWF  FEA
03860:  MOVFF  6A7,FEC
03864:  MOVF   FED,F
03866:  MOVFF  6A6,FEF
....................               fl = tempd[fa][1]; 
0386A:  MOVF   xA5,W
0386C:  MULLW  04
0386E:  MOVF   FF3,W
03870:  CLRF   xAA
03872:  MOVWF  xA9
03874:  MOVLW  02
03876:  ADDWF  xA9,W
03878:  MOVWF  01
0387A:  MOVLW  00
0387C:  ADDWFC xAA,W
0387E:  MOVWF  03
03880:  MOVF   01,W
03882:  ADDLW  63
03884:  MOVWF  FE9
03886:  MOVLW  06
03888:  ADDWFC 03,W
0388A:  MOVWF  FEA
0388C:  MOVFF  FEC,03
03890:  MOVF   FED,F
03892:  MOVFF  FEF,6A6
03896:  MOVFF  03,6A7
....................               tempd[fa][1] = tempd[fa + 1][1]; 
0389A:  MOVF   xA5,W
0389C:  MULLW  04
0389E:  MOVF   FF3,W
038A0:  CLRF   xAA
038A2:  MOVWF  xA9
038A4:  MOVLW  02
038A6:  ADDWF  xA9,W
038A8:  MOVWF  01
038AA:  MOVLW  00
038AC:  ADDWFC xAA,W
038AE:  MOVWF  03
038B0:  MOVF   01,W
038B2:  ADDLW  63
038B4:  MOVWF  01
038B6:  MOVLW  06
038B8:  ADDWFC 03,F
038BA:  MOVFF  01,6A9
038BE:  MOVFF  03,6AA
038C2:  MOVLW  01
038C4:  ADDWF  xA5,W
038C6:  MULLW  04
038C8:  MOVF   FF3,W
038CA:  CLRF   xAC
038CC:  MOVWF  xAB
038CE:  MOVLW  02
038D0:  ADDWF  xAB,W
038D2:  MOVWF  01
038D4:  MOVLW  00
038D6:  ADDWFC xAC,W
038D8:  MOVWF  03
038DA:  MOVF   01,W
038DC:  ADDLW  63
038DE:  MOVWF  FE9
038E0:  MOVLW  06
038E2:  ADDWFC 03,W
038E4:  MOVWF  FEA
038E6:  MOVFF  FEC,03
038EA:  MOVF   FED,F
038EC:  MOVFF  FEF,6AB
038F0:  MOVFF  6AA,FEA
038F4:  MOVFF  6A9,FE9
038F8:  MOVFF  03,FEC
038FC:  MOVF   FED,F
038FE:  MOVFF  6AB,FEF
....................               tempd[fa + 1][1] = fl; 
03902:  MOVLW  01
03904:  ADDWF  xA5,W
03906:  MULLW  04
03908:  MOVF   FF3,W
0390A:  CLRF   xAA
0390C:  MOVWF  xA9
0390E:  MOVLW  02
03910:  ADDWF  xA9,W
03912:  MOVWF  01
03914:  MOVLW  00
03916:  ADDWFC xAA,W
03918:  MOVWF  03
0391A:  MOVF   01,W
0391C:  ADDLW  63
0391E:  MOVWF  FE9
03920:  MOVLW  06
03922:  ADDWFC 03,W
03924:  MOVWF  FEA
03926:  MOVFF  6A7,FEC
0392A:  MOVF   FED,F
0392C:  MOVFF  6A6,FEF
....................            } 
....................         } 
03930:  INCF   xA5,F
03932:  BRA    3774
....................      } 
03934:  BRA    376C
....................    /*   for(temp=0;temp<used_dimmers;++temp) 
....................    { 
....................       printf("DIMMER:%u value=%lu <-> portWrite=%lu\n\r",temp,tempd[temp][0],tempd[temp][1]); 
....................    }*/ 
....................      IF(tempd[0][0] == 0) 
03936:  MOVF   x63,F
03938:  BNZ   3942
0393A:  MOVF   x64,F
0393C:  BNZ   3942
....................      { 
....................          numluzes = 0; 
0393E:  CLRF   xA3
....................          //luzes todas off 
....................          //printf("TUDO OFF"); 
....................      } 
....................      ELSE 
03940:  BRA    3CE2
....................      { 
....................         numluzes = 1; 
03942:  MOVLW  01
03944:  MOVWF  xA3
....................         afa = 0; 
03946:  CLRF   xA8
....................         IF(actmat) 
03948:  MOVLB  0
0394A:  BTFSS  xB5.3
0394C:  BRA    3960
....................         { 
....................            delays1[0][0] = tempd[0][0]; 
0394E:  MOVFF  664,592
03952:  MOVFF  663,591
....................            delays1[0][1] = tempd[0][1]; 
03956:  MOVFF  666,594
0395A:  MOVFF  665,593
....................         } 
....................  
....................         ELSE 
0395E:  BRA    3970
....................         { 
....................            delays2[0][0] = tempd[0][0]; 
03960:  MOVFF  664,5D6
03964:  MOVFF  663,5D5
....................            delays2[0][1] = tempd[0][1]; 
03968:  MOVFF  666,5D8
0396C:  MOVFF  665,5D7
....................         } 
....................  
....................         FOR(fa = 1;fa < used_dimmers;++fa) 
03970:  MOVLW  01
03972:  MOVLB  6
03974:  MOVWF  xA5
03976:  MOVLB  5
03978:  MOVF   x7A,W
0397A:  MOVLB  6
0397C:  SUBWF  xA5,W
0397E:  BTFSC  FD8.0
03980:  BRA    3CE2
....................         { 
....................            IF((tempd[fa][0] == tempd[fa - 1][0])&( ! tempd[fa][0] == 0)) 
03982:  MOVF   xA5,W
03984:  MULLW  04
03986:  MOVF   FF3,W
03988:  CLRF   xAA
0398A:  MOVWF  xA9
0398C:  MOVLW  63
0398E:  ADDWF  xA9,W
03990:  MOVWF  FE9
03992:  MOVLW  06
03994:  ADDWFC xAA,W
03996:  MOVWF  FEA
03998:  MOVFF  FEC,6AA
0399C:  MOVF   FED,F
0399E:  MOVFF  FEF,6A9
039A2:  MOVLW  01
039A4:  SUBWF  xA5,W
039A6:  MULLW  04
039A8:  MOVF   FF3,W
039AA:  CLRF   xAC
039AC:  MOVWF  xAB
039AE:  MOVLW  63
039B0:  ADDWF  xAB,W
039B2:  MOVWF  FE9
039B4:  MOVLW  06
039B6:  ADDWFC xAC,W
039B8:  MOVWF  FEA
039BA:  MOVFF  FEC,03
039BE:  MOVF   FED,F
039C0:  MOVF   FEF,W
039C2:  SUBWF  xA9,W
039C4:  BNZ   39CC
039C6:  MOVF   03,W
039C8:  SUBWF  xAA,W
039CA:  BZ    39D0
039CC:  MOVLW  00
039CE:  BRA    39D2
039D0:  MOVLW  01
039D2:  MOVWF  xA9
039D4:  MOVF   xA5,W
039D6:  MULLW  04
039D8:  MOVF   FF3,W
039DA:  CLRF   xAB
039DC:  MOVWF  xAA
039DE:  MOVLW  63
039E0:  ADDWF  xAA,W
039E2:  MOVWF  FE9
039E4:  MOVLW  06
039E6:  ADDWFC xAB,W
039E8:  MOVWF  FEA
039EA:  MOVF   FEF,F
039EC:  BNZ   39F2
039EE:  MOVF   FEC,F
039F0:  BZ    39F6
039F2:  MOVLW  00
039F4:  BRA    39F8
039F6:  MOVLW  01
039F8:  XORLW  00
039FA:  BZ    3A00
039FC:  MOVLW  00
039FE:  BRA    3A02
03A00:  MOVLW  01
03A02:  ANDWF  xA9,W
03A04:  BTFSC  FD8.2
03A06:  BRA    3B42
....................            { 
....................               IF(actmat)delays1[afa][1] = delays1[afa][1]&tempd[fa][1]; 
03A08:  MOVLB  0
03A0A:  BTFSS  xB5.3
03A0C:  BRA    3AA8
03A0E:  MOVLB  6
03A10:  MOVF   xA8,W
03A12:  MULLW  04
03A14:  MOVF   FF3,W
03A16:  CLRF   xAA
03A18:  MOVWF  xA9
03A1A:  MOVLW  02
03A1C:  ADDWF  xA9,W
03A1E:  MOVWF  01
03A20:  MOVLW  00
03A22:  ADDWFC xAA,W
03A24:  MOVWF  03
03A26:  MOVF   01,W
03A28:  ADDLW  91
03A2A:  MOVWF  01
03A2C:  MOVLW  05
03A2E:  ADDWFC 03,F
03A30:  MOVFF  01,6A9
03A34:  MOVFF  03,6AA
03A38:  MOVF   xA8,W
03A3A:  MULLW  04
03A3C:  MOVF   FF3,W
03A3E:  CLRF   xAC
03A40:  MOVWF  xAB
03A42:  MOVLW  02
03A44:  ADDWF  xAB,W
03A46:  MOVWF  01
03A48:  MOVLW  00
03A4A:  ADDWFC xAC,W
03A4C:  MOVWF  03
03A4E:  MOVF   01,W
03A50:  ADDLW  91
03A52:  MOVWF  FE9
03A54:  MOVLW  05
03A56:  ADDWFC 03,W
03A58:  MOVWF  FEA
03A5A:  MOVFF  FEC,6AC
03A5E:  MOVF   FED,F
03A60:  MOVFF  FEF,6AB
03A64:  MOVF   xA5,W
03A66:  MULLW  04
03A68:  MOVF   FF3,W
03A6A:  CLRF   xAE
03A6C:  MOVWF  xAD
03A6E:  MOVLW  02
03A70:  ADDWF  xAD,W
03A72:  MOVWF  01
03A74:  MOVLW  00
03A76:  ADDWFC xAE,W
03A78:  MOVWF  03
03A7A:  MOVF   01,W
03A7C:  ADDLW  63
03A7E:  MOVWF  FE9
03A80:  MOVLW  06
03A82:  ADDWFC 03,W
03A84:  MOVWF  FEA
03A86:  MOVFF  FEC,03
03A8A:  MOVF   FED,F
03A8C:  MOVF   FEF,W
03A8E:  ANDWF  xAB,W
03A90:  MOVWF  00
03A92:  MOVF   03,W
03A94:  ANDWF  xAC,W
03A96:  MOVFF  6AA,FEA
03A9A:  MOVFF  6A9,FE9
03A9E:  MOVWF  FEC
03AA0:  MOVF   FED,F
03AA2:  MOVFF  00,FEF
....................               ELSE delays2[afa][1] = delays2[afa][1]&tempd[fa][1]; 
03AA6:  BRA    3B40
03AA8:  MOVLB  6
03AAA:  MOVF   xA8,W
03AAC:  MULLW  04
03AAE:  MOVF   FF3,W
03AB0:  CLRF   xAA
03AB2:  MOVWF  xA9
03AB4:  MOVLW  02
03AB6:  ADDWF  xA9,W
03AB8:  MOVWF  01
03ABA:  MOVLW  00
03ABC:  ADDWFC xAA,W
03ABE:  MOVWF  03
03AC0:  MOVF   01,W
03AC2:  ADDLW  D5
03AC4:  MOVWF  01
03AC6:  MOVLW  05
03AC8:  ADDWFC 03,F
03ACA:  MOVFF  01,6A9
03ACE:  MOVFF  03,6AA
03AD2:  MOVF   xA8,W
03AD4:  MULLW  04
03AD6:  MOVF   FF3,W
03AD8:  CLRF   xAC
03ADA:  MOVWF  xAB
03ADC:  MOVLW  02
03ADE:  ADDWF  xAB,W
03AE0:  MOVWF  01
03AE2:  MOVLW  00
03AE4:  ADDWFC xAC,W
03AE6:  MOVWF  03
03AE8:  MOVF   01,W
03AEA:  ADDLW  D5
03AEC:  MOVWF  FE9
03AEE:  MOVLW  05
03AF0:  ADDWFC 03,W
03AF2:  MOVWF  FEA
03AF4:  MOVFF  FEC,6AC
03AF8:  MOVF   FED,F
03AFA:  MOVFF  FEF,6AB
03AFE:  MOVF   xA5,W
03B00:  MULLW  04
03B02:  MOVF   FF3,W
03B04:  CLRF   xAE
03B06:  MOVWF  xAD
03B08:  MOVLW  02
03B0A:  ADDWF  xAD,W
03B0C:  MOVWF  01
03B0E:  MOVLW  00
03B10:  ADDWFC xAE,W
03B12:  MOVWF  03
03B14:  MOVF   01,W
03B16:  ADDLW  63
03B18:  MOVWF  FE9
03B1A:  MOVLW  06
03B1C:  ADDWFC 03,W
03B1E:  MOVWF  FEA
03B20:  MOVFF  FEC,03
03B24:  MOVF   FED,F
03B26:  MOVF   FEF,W
03B28:  ANDWF  xAB,W
03B2A:  MOVWF  00
03B2C:  MOVF   03,W
03B2E:  ANDWF  xAC,W
03B30:  MOVFF  6AA,FEA
03B34:  MOVFF  6A9,FE9
03B38:  MOVWF  FEC
03B3A:  MOVF   FED,F
03B3C:  MOVFF  00,FEF
....................            } 
....................  
....................            else IF( ! tempd[fa][0] == 0) 
03B40:  BRA    3CDE
03B42:  MOVF   xA5,W
03B44:  MULLW  04
03B46:  MOVF   FF3,W
03B48:  CLRF   xAA
03B4A:  MOVWF  xA9
03B4C:  MOVLW  63
03B4E:  ADDWF  xA9,W
03B50:  MOVWF  FE9
03B52:  MOVLW  06
03B54:  ADDWFC xAA,W
03B56:  MOVWF  FEA
03B58:  MOVF   FEF,F
03B5A:  BNZ   3B60
03B5C:  MOVF   FEC,F
03B5E:  BZ    3B64
03B60:  MOVLW  00
03B62:  BRA    3B66
03B64:  MOVLW  01
03B66:  XORLW  00
03B68:  BTFSS  FD8.2
03B6A:  BRA    3CDE
....................            { 
....................               ++afa; 
03B6C:  INCF   xA8,F
....................               IF(actmat) 
03B6E:  MOVLB  0
03B70:  BTFSS  xB5.3
03B72:  BRA    3C2A
....................               { 
....................                  delays1[afa][0] = tempd[fa][0]; 
03B74:  MOVLB  6
03B76:  MOVF   xA8,W
03B78:  MULLW  04
03B7A:  MOVF   FF3,W
03B7C:  CLRF   xAA
03B7E:  MOVWF  xA9
03B80:  MOVLW  91
03B82:  ADDWF  xA9,W
03B84:  MOVWF  01
03B86:  MOVLW  05
03B88:  ADDWFC xAA,W
03B8A:  MOVWF  03
03B8C:  MOVWF  xAA
03B8E:  MOVF   xA5,W
03B90:  MULLW  04
03B92:  MOVF   FF3,W
03B94:  CLRF   xAC
03B96:  MOVWF  xAB
03B98:  MOVLW  63
03B9A:  ADDWF  xAB,W
03B9C:  MOVWF  FE9
03B9E:  MOVLW  06
03BA0:  ADDWFC xAC,W
03BA2:  MOVWF  FEA
03BA4:  MOVFF  FEC,03
03BA8:  MOVF   FED,F
03BAA:  MOVFF  FEF,6AB
03BAE:  MOVFF  6AA,FEA
03BB2:  MOVFF  01,FE9
03BB6:  MOVFF  03,FEC
03BBA:  MOVF   FED,F
03BBC:  MOVFF  6AB,FEF
....................                  delays1[afa][1] = tempd[fa][1]; 
03BC0:  MOVF   xA8,W
03BC2:  MULLW  04
03BC4:  MOVF   FF3,W
03BC6:  CLRF   xAA
03BC8:  MOVWF  xA9
03BCA:  MOVLW  02
03BCC:  ADDWF  xA9,W
03BCE:  MOVWF  01
03BD0:  MOVLW  00
03BD2:  ADDWFC xAA,W
03BD4:  MOVWF  03
03BD6:  MOVF   01,W
03BD8:  ADDLW  91
03BDA:  MOVWF  01
03BDC:  MOVLW  05
03BDE:  ADDWFC 03,F
03BE0:  MOVFF  01,6A9
03BE4:  MOVFF  03,6AA
03BE8:  MOVF   xA5,W
03BEA:  MULLW  04
03BEC:  MOVF   FF3,W
03BEE:  CLRF   xAC
03BF0:  MOVWF  xAB
03BF2:  MOVLW  02
03BF4:  ADDWF  xAB,W
03BF6:  MOVWF  01
03BF8:  MOVLW  00
03BFA:  ADDWFC xAC,W
03BFC:  MOVWF  03
03BFE:  MOVF   01,W
03C00:  ADDLW  63
03C02:  MOVWF  FE9
03C04:  MOVLW  06
03C06:  ADDWFC 03,W
03C08:  MOVWF  FEA
03C0A:  MOVFF  FEC,03
03C0E:  MOVF   FED,F
03C10:  MOVFF  FEF,6AB
03C14:  MOVFF  6AA,FEA
03C18:  MOVFF  6A9,FE9
03C1C:  MOVFF  03,FEC
03C20:  MOVF   FED,F
03C22:  MOVFF  6AB,FEF
....................               } 
....................  
....................               ELSE 
03C26:  BRA    3CDC
03C28:  MOVLB  0
....................               { 
....................                  delays2[afa][0] = tempd[fa][0]; 
03C2A:  MOVLB  6
03C2C:  MOVF   xA8,W
03C2E:  MULLW  04
03C30:  MOVF   FF3,W
03C32:  CLRF   xAA
03C34:  MOVWF  xA9
03C36:  MOVLW  D5
03C38:  ADDWF  xA9,W
03C3A:  MOVWF  01
03C3C:  MOVLW  05
03C3E:  ADDWFC xAA,W
03C40:  MOVWF  03
03C42:  MOVWF  xAA
03C44:  MOVF   xA5,W
03C46:  MULLW  04
03C48:  MOVF   FF3,W
03C4A:  CLRF   xAC
03C4C:  MOVWF  xAB
03C4E:  MOVLW  63
03C50:  ADDWF  xAB,W
03C52:  MOVWF  FE9
03C54:  MOVLW  06
03C56:  ADDWFC xAC,W
03C58:  MOVWF  FEA
03C5A:  MOVFF  FEC,03
03C5E:  MOVF   FED,F
03C60:  MOVFF  FEF,6AB
03C64:  MOVFF  6AA,FEA
03C68:  MOVFF  01,FE9
03C6C:  MOVFF  03,FEC
03C70:  MOVF   FED,F
03C72:  MOVFF  6AB,FEF
....................                  delays2[afa][1] = tempd[fa][1]; 
03C76:  MOVF   xA8,W
03C78:  MULLW  04
03C7A:  MOVF   FF3,W
03C7C:  CLRF   xAA
03C7E:  MOVWF  xA9
03C80:  MOVLW  02
03C82:  ADDWF  xA9,W
03C84:  MOVWF  01
03C86:  MOVLW  00
03C88:  ADDWFC xAA,W
03C8A:  MOVWF  03
03C8C:  MOVF   01,W
03C8E:  ADDLW  D5
03C90:  MOVWF  01
03C92:  MOVLW  05
03C94:  ADDWFC 03,F
03C96:  MOVFF  01,6A9
03C9A:  MOVFF  03,6AA
03C9E:  MOVF   xA5,W
03CA0:  MULLW  04
03CA2:  MOVF   FF3,W
03CA4:  CLRF   xAC
03CA6:  MOVWF  xAB
03CA8:  MOVLW  02
03CAA:  ADDWF  xAB,W
03CAC:  MOVWF  01
03CAE:  MOVLW  00
03CB0:  ADDWFC xAC,W
03CB2:  MOVWF  03
03CB4:  MOVF   01,W
03CB6:  ADDLW  63
03CB8:  MOVWF  FE9
03CBA:  MOVLW  06
03CBC:  ADDWFC 03,W
03CBE:  MOVWF  FEA
03CC0:  MOVFF  FEC,03
03CC4:  MOVF   FED,F
03CC6:  MOVFF  FEF,6AB
03CCA:  MOVFF  6AA,FEA
03CCE:  MOVFF  6A9,FE9
03CD2:  MOVFF  03,FEC
03CD6:  MOVF   FED,F
03CD8:  MOVFF  6AB,FEF
....................               } 
....................      //          printf("numluzes=%d used_dimmers=%d",numluzes,used_dimmers); 
....................               ++numluzes; 
03CDC:  INCF   xA3,F
....................            } 
....................         } 
03CDE:  INCF   xA5,F
03CE0:  BRA    3976
....................      } 
....................      // printf("XnumluzesX=%d used_dimmers=%d",numluzes,used_dimmers); 
....................      IF(actmat)delays1[N_LUZES][0] = numluzes; 
03CE2:  MOVLB  0
03CE4:  BTFSS  xB5.3
03CE6:  BRA    3CF2
03CE8:  MOVLB  5
03CEA:  CLRF   xD2
03CEC:  MOVFF  6A3,5D1
....................      ELSE  delays2[N_LUZES][0] = numluzes; 
03CF0:  BRA    3CFA
03CF2:  MOVLB  6
03CF4:  CLRF   x16
03CF6:  MOVFF  6A3,615
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays1[0][0],delays1[0][1]); 
....................    //  printf("num luzes activas=%d valor primeira=%lu portWrite=%lu\n\r",numluzes,delays2[0][0],delays2[0][1]); 
....................     // delays2[0][1]=27498; 
....................     // delays1[0][1]=27498; 
....................      organizado=1; 
03CFA:  MOVLB  0
03CFC:  BSF    xB5.2
....................   } 
03CFE:  RETLW  00
....................  
.................... void dimmer_outputs_init() 
.................... { 
....................    delays1[N_LUZES][0]=0; 
03D00:  MOVLB  5
03D02:  CLRF   xD2
03D04:  CLRF   xD1
....................    delays2[N_LUZES][0]=0; 
03D06:  MOVLB  6
03D08:  CLRF   x16
03D0A:  CLRF   x15
....................    pointer=delays1; 
03D0C:  MOVLW  05
03D0E:  MOVLB  5
03D10:  MOVWF  x7C
03D12:  MOVLW  91
03D14:  MOVWF  x7B
....................    actmat=0; 
03D16:  MOVLB  0
03D18:  BCF    xB5.3
....................    portc=0xFF; 
03D1A:  MOVLW  FF
03D1C:  MOVWF  F82
....................    portd=0xFF; 
03D1E:  MOVWF  F83
....................   // trisc=0x00; //tudo saidas 
....................   // trisd=0x00; //tudo saidas 
....................    SET_TRIS_C( 0x00 ); 
03D20:  MOVLW  00
03D22:  MOVWF  F94
....................    SET_TRIS_D( 0x00 ); 
03D24:  MOVWF  F95
....................    portc=0xFF; 
03D26:  MOVLW  FF
03D28:  MOVWF  F82
....................    portd=0xFF; 
03D2A:  MOVWF  F83
....................    
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03D2C:  MOVLB  6
03D2E:  CLRF   x61
03D30:  MOVLB  1
03D32:  MOVF   x3F,W
03D34:  MOVLB  6
03D36:  SUBWF  x61,W
03D38:  BTFSC  FD8.0
03D3A:  BRA    3E80
03D3C:  CLRF   1B
03D3E:  BTFSC  FF2.7
03D40:  BSF    1B.7
03D42:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03D44:  CLRF   xDB
03D46:  MOVFF  661,6DA
03D4A:  CLRF   xDD
03D4C:  MOVLW  2F
03D4E:  MOVWF  xDC
03D50:  MOVLB  0
03D52:  CALL   041C
03D56:  BTFSC  1B.7
03D58:  BSF    FF2.7
03D5A:  MOVFF  02,03
03D5E:  MOVF   01,W
03D60:  ADDLW  8A
03D62:  MOVWF  01
03D64:  MOVLW  02
03D66:  ADDWFC 03,F
03D68:  MOVFF  01,FE9
03D6C:  MOVFF  03,FEA
03D70:  MOVF   FEF,W
03D72:  XORLW  65
03D74:  BZ    3D78
03D76:  BRA    3E7A
....................          case dimmer: 
.................... #ifdef DEBUG 
....................          printf("used dimmer!!!\n\r"); 
03D78:  MOVLW  BA
03D7A:  MOVWF  FF6
03D7C:  MOVLW  02
03D7E:  MOVWF  FF7
03D80:  MOVLW  00
03D82:  MOVWF  FF8
03D84:  CLRF   1B
03D86:  BTFSC  FF2.7
03D88:  BSF    1B.7
03D8A:  BCF    FF2.7
03D8C:  CALL   0F2A
03D90:  BTFSC  1B.7
03D92:  BSF    FF2.7
.................... #endif 
....................             lights[used_dimmers]=light_pins[((struct light)mydevices.myoutputs[x].device).output_pin]; 
03D94:  BCF    FD8.0
03D96:  MOVLB  5
03D98:  RLCF   x7A,W
03D9A:  CLRF   03
03D9C:  ADDLW  19
03D9E:  MOVWF  01
03DA0:  MOVLW  06
03DA2:  ADDWFC 03,F
03DA4:  MOVFF  01,662
03DA8:  MOVLB  6
03DAA:  MOVFF  03,663
03DAE:  CLRF   1B
03DB0:  BTFSC  FF2.7
03DB2:  BSF    1B.7
03DB4:  BCF    FF2.7
03DB6:  CLRF   xDB
03DB8:  MOVFF  661,6DA
03DBC:  CLRF   xDD
03DBE:  MOVLW  2F
03DC0:  MOVWF  xDC
03DC2:  MOVLB  0
03DC4:  CALL   041C
03DC8:  BTFSC  1B.7
03DCA:  BSF    FF2.7
03DCC:  MOVF   01,W
03DCE:  ADDLW  4C
03DD0:  MOVLB  6
03DD2:  MOVWF  x64
03DD4:  MOVLW  01
03DD6:  ADDWFC 02,W
03DD8:  MOVWF  x65
03DDA:  MOVLW  01
03DDC:  ADDWF  x64,W
03DDE:  MOVWF  01
03DE0:  MOVLW  00
03DE2:  ADDWFC x65,W
03DE4:  MOVWF  03
03DE6:  MOVF   01,W
03DE8:  ADDLW  3E
03DEA:  MOVWF  01
03DEC:  MOVLW  01
03DEE:  ADDWFC 03,F
03DF0:  MOVF   01,W
03DF2:  ADDLW  1F
03DF4:  MOVWF  FE9
03DF6:  MOVLW  00
03DF8:  ADDWFC 03,W
03DFA:  MOVWF  FEA
03DFC:  BCF    FD8.0
03DFE:  RLCF   FEF,W
03E00:  CLRF   03
03E02:  MOVLB  0
03E04:  CALL   0172
03E08:  TBLRD*+
03E0A:  MOVFF  FF5,03
03E0E:  MOVLB  6
03E10:  MOVFF  663,FEA
03E14:  MOVFF  662,FE9
03E18:  MOVFF  03,FEC
03E1C:  MOVF   FED,F
03E1E:  MOVWF  FEF
03E20:  CLRF   1B
03E22:  BTFSC  FF2.7
03E24:  BSF    1B.7
03E26:  BCF    FF2.7
....................             ((struct light)mydevices.myoutputs[x].device).internal_order=used_dimmers; 
03E28:  CLRF   xDB
03E2A:  MOVFF  661,6DA
03E2E:  CLRF   xDD
03E30:  MOVLW  2F
03E32:  MOVWF  xDC
03E34:  MOVLB  0
03E36:  CALL   041C
03E3A:  BTFSC  1B.7
03E3C:  BSF    FF2.7
03E3E:  MOVF   01,W
03E40:  ADDLW  4C
03E42:  MOVLB  6
03E44:  MOVWF  x62
03E46:  MOVLW  01
03E48:  ADDWFC 02,W
03E4A:  MOVWF  x63
03E4C:  MOVLW  01
03E4E:  ADDWF  x62,W
03E50:  MOVWF  01
03E52:  MOVLW  00
03E54:  ADDWFC x63,W
03E56:  MOVWF  03
03E58:  MOVF   01,W
03E5A:  ADDLW  3E
03E5C:  MOVWF  01
03E5E:  MOVLW  01
03E60:  ADDWFC 03,F
03E62:  MOVF   01,W
03E64:  ADDLW  20
03E66:  MOVWF  FE9
03E68:  MOVLW  00
03E6A:  ADDWFC 03,W
03E6C:  MOVWF  FEA
03E6E:  MOVFF  57A,FEF
....................             ++used_dimmers;           
03E72:  MOVLB  5
03E74:  INCF   x7A,F
....................          break; 
03E76:  MOVLB  0
03E78:  BRA    3E7A
....................       } 
....................    } 
03E7A:  MOVLB  6
03E7C:  INCF   x61,F
03E7E:  BRA    3D30
....................    if(used_dimmers>0) 
03E80:  MOVLB  5
03E82:  MOVF   x7A,F
03E84:  BZ    3EAA
....................    { 
....................    actmat=0; 
03E86:  MOVLB  0
03E88:  BCF    xB5.3
....................    pointer=delays1; 
03E8A:  MOVLW  05
03E8C:  MOVLB  5
03E8E:  MOVWF  x7C
03E90:  MOVLW  91
03E92:  MOVWF  x7B
....................    org(); 
03E94:  MOVLB  0
03E96:  RCALL  36CC
....................    pointer=delays2; 
03E98:  MOVLW  05
03E9A:  MOVLB  5
03E9C:  MOVWF  x7C
03E9E:  MOVLW  D5
03EA0:  MOVWF  x7B
....................    actmat=1; 
03EA2:  MOVLB  0
03EA4:  BSF    xB5.3
....................    org(); 
03EA6:  RCALL  36CC
03EA8:  MOVLB  5
....................    } 
.................... } 
03EAA:  MOVLB  0
03EAC:  GOTO   87E4 (RETURN)
....................  
.................... void write_outputs() 
.................... { 
03EB0:  MOVLB  6
03EB2:  BCF    x62.0
....................    volatile int x; 
....................    int1 update_dimmers=false; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
03EB4:  CLRF   x61
03EB6:  MOVLB  1
03EB8:  MOVF   x3F,W
03EBA:  MOVLB  6
03EBC:  SUBWF  x61,W
03EBE:  BTFSC  FD8.0
03EC0:  GOTO   5202
03EC4:  CLRF   1B
03EC6:  BTFSC  FF2.7
03EC8:  BSF    1B.7
03ECA:  BCF    FF2.7
....................    { 
....................      // printf_("%d",x); 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
03ECC:  CLRF   xDB
03ECE:  MOVFF  661,6DA
03ED2:  CLRF   xDD
03ED4:  MOVLW  2F
03ED6:  MOVWF  xDC
03ED8:  MOVLB  0
03EDA:  CALL   041C
03EDE:  BTFSC  1B.7
03EE0:  BSF    FF2.7
03EE2:  MOVFF  02,03
03EE6:  MOVF   01,W
03EE8:  ADDLW  8A
03EEA:  MOVWF  01
03EEC:  MOVLW  02
03EEE:  ADDWFC 03,F
03EF0:  MOVFF  01,FE9
03EF4:  MOVFF  03,FEA
03EF8:  MOVF   FEF,W
03EFA:  XORLW  65
03EFC:  BZ    3F10
03EFE:  XORLW  01
03F00:  BTFSC  FD8.2
03F02:  BRA    447C
03F04:  XORLW  02
03F06:  BTFSC  FD8.2
03F08:  GOTO   474C
03F0C:  GOTO   51FA
....................          case dimmer: 
03F10:  CLRF   1B
03F12:  BTFSC  FF2.7
03F14:  BSF    1B.7
03F16:  BCF    FF2.7
....................             if(((struct light)mydevices.myoutputs[x].device).dim_value.needs_update) 
03F18:  MOVLB  6
03F1A:  CLRF   xDB
03F1C:  MOVFF  661,6DA
03F20:  CLRF   xDD
03F22:  MOVLW  2F
03F24:  MOVWF  xDC
03F26:  MOVLB  0
03F28:  CALL   041C
03F2C:  BTFSC  1B.7
03F2E:  BSF    FF2.7
03F30:  MOVF   01,W
03F32:  ADDLW  4C
03F34:  MOVLB  6
03F36:  MOVWF  x63
03F38:  MOVLW  01
03F3A:  ADDWFC 02,W
03F3C:  MOVWF  x64
03F3E:  MOVLW  01
03F40:  ADDWF  x63,W
03F42:  MOVWF  01
03F44:  MOVLW  00
03F46:  ADDWFC x64,W
03F48:  MOVWF  03
03F4A:  MOVF   01,W
03F4C:  ADDLW  3E
03F4E:  MOVWF  01
03F50:  MOVLW  01
03F52:  ADDWFC 03,F
03F54:  MOVF   01,W
03F56:  ADDLW  1D
03F58:  MOVWF  FE9
03F5A:  MOVLW  00
03F5C:  ADDWFC 03,W
03F5E:  MOVWF  FEA
03F60:  BTFSS  FEF.0
03F62:  BRA    40C8
03F64:  CLRF   1B
03F66:  BTFSC  FF2.7
03F68:  BSF    1B.7
03F6A:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).out_state==_on) 
03F6C:  CLRF   xDB
03F6E:  MOVFF  661,6DA
03F72:  CLRF   xDD
03F74:  MOVLW  2F
03F76:  MOVWF  xDC
03F78:  MOVLB  0
03F7A:  CALL   041C
03F7E:  BTFSC  1B.7
03F80:  BSF    FF2.7
03F82:  MOVF   01,W
03F84:  ADDLW  4C
03F86:  MOVLB  6
03F88:  MOVWF  x63
03F8A:  MOVLW  01
03F8C:  ADDWFC 02,W
03F8E:  MOVWF  x64
03F90:  MOVLW  01
03F92:  ADDWF  x63,W
03F94:  MOVWF  01
03F96:  MOVLW  00
03F98:  ADDWFC x64,W
03F9A:  MOVWF  03
03F9C:  MOVF   01,W
03F9E:  ADDLW  3E
03FA0:  MOVWF  01
03FA2:  MOVLW  01
03FA4:  ADDWFC 03,F
03FA6:  MOVF   01,W
03FA8:  ADDLW  1E
03FAA:  MOVWF  FE9
03FAC:  MOVLW  00
03FAE:  ADDWFC 03,W
03FB0:  MOVWF  FEA
03FB2:  MOVF   FEF,F
03FB4:  BNZ   4078
03FB6:  CLRF   1B
03FB8:  BTFSC  FF2.7
03FBA:  BSF    1B.7
03FBC:  BCF    FF2.7
....................                { 
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
03FBE:  CLRF   xDB
03FC0:  MOVFF  661,6DA
03FC4:  CLRF   xDD
03FC6:  MOVLW  2F
03FC8:  MOVWF  xDC
03FCA:  MOVLB  0
03FCC:  CALL   041C
03FD0:  BTFSC  1B.7
03FD2:  BSF    FF2.7
03FD4:  MOVF   01,W
03FD6:  ADDLW  4C
03FD8:  MOVLB  6
03FDA:  MOVWF  x63
03FDC:  MOVLW  01
03FDE:  ADDWFC 02,W
03FE0:  MOVWF  x64
03FE2:  MOVLW  01
03FE4:  ADDWF  x63,W
03FE6:  MOVWF  01
03FE8:  MOVLW  00
03FEA:  ADDWFC x64,W
03FEC:  MOVWF  03
03FEE:  MOVF   01,W
03FF0:  ADDLW  3E
03FF2:  MOVWF  01
03FF4:  MOVLW  01
03FF6:  ADDWFC 03,F
03FF8:  MOVF   01,W
03FFA:  ADDLW  20
03FFC:  MOVWF  FE9
03FFE:  MOVLW  00
04000:  ADDWFC 03,W
04002:  MOVWF  FEA
04004:  CLRF   03
04006:  MOVF   FEF,W
04008:  ADDLW  81
0400A:  MOVWF  01
0400C:  MOVLW  05
0400E:  ADDWFC 03,F
04010:  MOVFF  01,665
04014:  MOVFF  03,666
04018:  CLRF   1B
0401A:  BTFSC  FF2.7
0401C:  BSF    1B.7
0401E:  BCF    FF2.7
04020:  CLRF   xDB
04022:  MOVFF  661,6DA
04026:  CLRF   xDD
04028:  MOVLW  2F
0402A:  MOVWF  xDC
0402C:  MOVLB  0
0402E:  CALL   041C
04032:  BTFSC  1B.7
04034:  BSF    FF2.7
04036:  MOVF   01,W
04038:  ADDLW  4C
0403A:  MOVLB  6
0403C:  MOVWF  x67
0403E:  MOVLW  01
04040:  ADDWFC 02,W
04042:  MOVWF  x68
04044:  MOVLW  01
04046:  ADDWF  x67,W
04048:  MOVWF  01
0404A:  MOVLW  00
0404C:  ADDWFC x68,W
0404E:  MOVWF  03
04050:  MOVF   01,W
04052:  ADDLW  3E
04054:  MOVWF  01
04056:  MOVLW  01
04058:  ADDWFC 03,F
0405A:  MOVF   01,W
0405C:  ADDLW  1C
0405E:  MOVWF  FE9
04060:  MOVLW  00
04062:  ADDWFC 03,W
04064:  MOVWF  FEA
04066:  MOVFF  FEF,669
0406A:  MOVFF  666,FEA
0406E:  MOVFF  665,FE9
04072:  MOVFF  669,FEF
....................                 //  printf_("ltlevel[%d]=%d\n\r",((struct light)mydevices.myoutputs[x].device).internal_order,((struct light)mydevices.myoutputs[x].device).dim_value.value); 
....................                   update_dimmers=true; 
04076:  BSF    x62.0
04078:  CLRF   1B
0407A:  BTFSC  FF2.7
0407C:  BSF    1B.7
0407E:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).dim_value.needs_update=false; 
04080:  CLRF   xDB
04082:  MOVFF  661,6DA
04086:  CLRF   xDD
04088:  MOVLW  2F
0408A:  MOVWF  xDC
0408C:  MOVLB  0
0408E:  CALL   041C
04092:  BTFSC  1B.7
04094:  BSF    FF2.7
04096:  MOVF   01,W
04098:  ADDLW  4C
0409A:  MOVLB  6
0409C:  MOVWF  x63
0409E:  MOVLW  01
040A0:  ADDWFC 02,W
040A2:  MOVWF  x64
040A4:  MOVLW  01
040A6:  ADDWF  x63,W
040A8:  MOVWF  01
040AA:  MOVLW  00
040AC:  ADDWFC x64,W
040AE:  MOVWF  03
040B0:  MOVF   01,W
040B2:  ADDLW  3E
040B4:  MOVWF  01
040B6:  MOVLW  01
040B8:  ADDWFC 03,F
040BA:  MOVF   01,W
040BC:  ADDLW  1D
040BE:  MOVWF  FE9
040C0:  MOVLW  00
040C2:  ADDWFC 03,W
040C4:  MOVWF  FEA
040C6:  BCF    FEF.0
040C8:  CLRF   1B
040CA:  BTFSC  FF2.7
040CC:  BSF    1B.7
040CE:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).off.needs_update) 
040D0:  CLRF   xDB
040D2:  MOVFF  661,6DA
040D6:  CLRF   xDD
040D8:  MOVLW  2F
040DA:  MOVWF  xDC
040DC:  MOVLB  0
040DE:  CALL   041C
040E2:  BTFSC  1B.7
040E4:  BSF    FF2.7
040E6:  MOVF   01,W
040E8:  ADDLW  4C
040EA:  MOVLB  6
040EC:  MOVWF  x63
040EE:  MOVLW  01
040F0:  ADDWFC 02,W
040F2:  MOVWF  x64
040F4:  MOVLW  01
040F6:  ADDWF  x63,W
040F8:  MOVWF  01
040FA:  MOVLW  00
040FC:  ADDWFC x64,W
040FE:  MOVWF  03
04100:  MOVF   01,W
04102:  ADDLW  3E
04104:  MOVWF  01
04106:  MOVLW  01
04108:  ADDWFC 03,F
0410A:  MOVF   01,W
0410C:  ADDLW  13
0410E:  MOVWF  FE9
04110:  MOVLW  00
04112:  ADDWFC 03,W
04114:  MOVWF  FEA
04116:  BTFSS  FEF.0
04118:  BRA    426E
0411A:  CLRF   1B
0411C:  BTFSC  FF2.7
0411E:  BSF    1B.7
04120:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).off.value) 
04122:  CLRF   xDB
04124:  MOVFF  661,6DA
04128:  CLRF   xDD
0412A:  MOVLW  2F
0412C:  MOVWF  xDC
0412E:  MOVLB  0
04130:  CALL   041C
04134:  BTFSC  1B.7
04136:  BSF    FF2.7
04138:  MOVF   01,W
0413A:  ADDLW  4C
0413C:  MOVLB  6
0413E:  MOVWF  x63
04140:  MOVLW  01
04142:  ADDWFC 02,W
04144:  MOVWF  x64
04146:  MOVLW  01
04148:  ADDWF  x63,W
0414A:  MOVWF  01
0414C:  MOVLW  00
0414E:  ADDWFC x64,W
04150:  MOVWF  03
04152:  MOVF   01,W
04154:  ADDLW  3E
04156:  MOVWF  01
04158:  MOVLW  01
0415A:  ADDWFC 03,F
0415C:  MOVF   01,W
0415E:  ADDLW  12
04160:  MOVWF  FE9
04162:  MOVLW  00
04164:  ADDWFC 03,W
04166:  MOVWF  FEA
04168:  MOVF   FEF,F
0416A:  BZ    421E
0416C:  CLRF   1B
0416E:  BTFSC  FF2.7
04170:  BSF    1B.7
04172:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_off; 
04174:  CLRF   xDB
04176:  MOVFF  661,6DA
0417A:  CLRF   xDD
0417C:  MOVLW  2F
0417E:  MOVWF  xDC
04180:  MOVLB  0
04182:  CALL   041C
04186:  BTFSC  1B.7
04188:  BSF    FF2.7
0418A:  MOVF   01,W
0418C:  ADDLW  4C
0418E:  MOVLB  6
04190:  MOVWF  x63
04192:  MOVLW  01
04194:  ADDWFC 02,W
04196:  MOVWF  x64
04198:  MOVLW  01
0419A:  ADDWF  x63,W
0419C:  MOVWF  01
0419E:  MOVLW  00
041A0:  ADDWFC x64,W
041A2:  MOVWF  03
041A4:  MOVF   01,W
041A6:  ADDLW  3E
041A8:  MOVWF  01
041AA:  MOVLW  01
041AC:  ADDWFC 03,F
041AE:  MOVF   01,W
041B0:  ADDLW  1E
041B2:  MOVWF  FE9
041B4:  MOVLW  00
041B6:  ADDWFC 03,W
041B8:  MOVWF  FEA
041BA:  MOVLW  01
041BC:  MOVWF  FEF
041BE:  CLRF   1B
041C0:  BTFSC  FF2.7
041C2:  BSF    1B.7
041C4:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=0; 
041C6:  CLRF   xDB
041C8:  MOVFF  661,6DA
041CC:  CLRF   xDD
041CE:  MOVLW  2F
041D0:  MOVWF  xDC
041D2:  MOVLB  0
041D4:  CALL   041C
041D8:  BTFSC  1B.7
041DA:  BSF    FF2.7
041DC:  MOVF   01,W
041DE:  ADDLW  4C
041E0:  MOVLB  6
041E2:  MOVWF  x63
041E4:  MOVLW  01
041E6:  ADDWFC 02,W
041E8:  MOVWF  x64
041EA:  MOVLW  01
041EC:  ADDWF  x63,W
041EE:  MOVWF  01
041F0:  MOVLW  00
041F2:  ADDWFC x64,W
041F4:  MOVWF  03
041F6:  MOVF   01,W
041F8:  ADDLW  3E
041FA:  MOVWF  01
041FC:  MOVLW  01
041FE:  ADDWFC 03,F
04200:  MOVF   01,W
04202:  ADDLW  20
04204:  MOVWF  FE9
04206:  MOVLW  00
04208:  ADDWFC 03,W
0420A:  MOVWF  FEA
0420C:  CLRF   03
0420E:  MOVF   FEF,W
04210:  ADDLW  81
04212:  MOVWF  FE9
04214:  MOVLW  05
04216:  ADDWFC 03,W
04218:  MOVWF  FEA
0421A:  CLRF   FEF
....................                   update_dimmers=true; 
0421C:  BSF    x62.0
0421E:  CLRF   1B
04220:  BTFSC  FF2.7
04222:  BSF    1B.7
04224:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).off.needs_update=false; 
04226:  CLRF   xDB
04228:  MOVFF  661,6DA
0422C:  CLRF   xDD
0422E:  MOVLW  2F
04230:  MOVWF  xDC
04232:  MOVLB  0
04234:  CALL   041C
04238:  BTFSC  1B.7
0423A:  BSF    FF2.7
0423C:  MOVF   01,W
0423E:  ADDLW  4C
04240:  MOVLB  6
04242:  MOVWF  x63
04244:  MOVLW  01
04246:  ADDWFC 02,W
04248:  MOVWF  x64
0424A:  MOVLW  01
0424C:  ADDWF  x63,W
0424E:  MOVWF  01
04250:  MOVLW  00
04252:  ADDWFC x64,W
04254:  MOVWF  03
04256:  MOVF   01,W
04258:  ADDLW  3E
0425A:  MOVWF  01
0425C:  MOVLW  01
0425E:  ADDWFC 03,F
04260:  MOVF   01,W
04262:  ADDLW  13
04264:  MOVWF  FE9
04266:  MOVLW  00
04268:  ADDWFC 03,W
0426A:  MOVWF  FEA
0426C:  BCF    FEF.0
0426E:  CLRF   1B
04270:  BTFSC  FF2.7
04272:  BSF    1B.7
04274:  BCF    FF2.7
....................             } 
....................              
....................             if(((struct light)mydevices.myoutputs[x].device).on.needs_update) 
04276:  CLRF   xDB
04278:  MOVFF  661,6DA
0427C:  CLRF   xDD
0427E:  MOVLW  2F
04280:  MOVWF  xDC
04282:  MOVLB  0
04284:  CALL   041C
04288:  BTFSC  1B.7
0428A:  BSF    FF2.7
0428C:  MOVF   01,W
0428E:  ADDLW  4C
04290:  MOVLB  6
04292:  MOVWF  x63
04294:  MOVLW  01
04296:  ADDWFC 02,W
04298:  MOVWF  x64
0429A:  MOVLW  01
0429C:  ADDWF  x63,W
0429E:  MOVWF  01
042A0:  MOVLW  00
042A2:  ADDWFC x64,W
042A4:  MOVWF  03
042A6:  MOVF   01,W
042A8:  ADDLW  3E
042AA:  MOVWF  01
042AC:  MOVLW  01
042AE:  ADDWFC 03,F
042B0:  MOVF   01,W
042B2:  ADDLW  09
042B4:  MOVWF  FE9
042B6:  MOVLW  00
042B8:  ADDWFC 03,W
042BA:  MOVWF  FEA
042BC:  BTFSS  FEF.0
042BE:  BRA    4476
042C0:  CLRF   1B
042C2:  BTFSC  FF2.7
042C4:  BSF    1B.7
042C6:  BCF    FF2.7
....................             { 
....................                if(((struct light)mydevices.myoutputs[x].device).on.value) 
042C8:  CLRF   xDB
042CA:  MOVFF  661,6DA
042CE:  CLRF   xDD
042D0:  MOVLW  2F
042D2:  MOVWF  xDC
042D4:  MOVLB  0
042D6:  CALL   041C
042DA:  BTFSC  1B.7
042DC:  BSF    FF2.7
042DE:  MOVF   01,W
042E0:  ADDLW  4C
042E2:  MOVLB  6
042E4:  MOVWF  x63
042E6:  MOVLW  01
042E8:  ADDWFC 02,W
042EA:  MOVWF  x64
042EC:  MOVLW  01
042EE:  ADDWF  x63,W
042F0:  MOVWF  01
042F2:  MOVLW  00
042F4:  ADDWFC x64,W
042F6:  MOVWF  03
042F8:  MOVF   01,W
042FA:  ADDLW  3E
042FC:  MOVWF  01
042FE:  MOVLW  01
04300:  ADDWFC 03,F
04302:  MOVF   01,W
04304:  ADDLW  08
04306:  MOVWF  FE9
04308:  MOVLW  00
0430A:  ADDWFC 03,W
0430C:  MOVWF  FEA
0430E:  MOVF   FEF,F
04310:  BTFSC  FD8.2
04312:  BRA    4426
04314:  CLRF   1B
04316:  BTFSC  FF2.7
04318:  BSF    1B.7
0431A:  BCF    FF2.7
....................                { 
....................                   ((struct light)mydevices.myoutputs[x].device).out_state=_on; 
0431C:  CLRF   xDB
0431E:  MOVFF  661,6DA
04322:  CLRF   xDD
04324:  MOVLW  2F
04326:  MOVWF  xDC
04328:  MOVLB  0
0432A:  CALL   041C
0432E:  BTFSC  1B.7
04330:  BSF    FF2.7
04332:  MOVF   01,W
04334:  ADDLW  4C
04336:  MOVLB  6
04338:  MOVWF  x63
0433A:  MOVLW  01
0433C:  ADDWFC 02,W
0433E:  MOVWF  x64
04340:  MOVLW  01
04342:  ADDWF  x63,W
04344:  MOVWF  01
04346:  MOVLW  00
04348:  ADDWFC x64,W
0434A:  MOVWF  03
0434C:  MOVF   01,W
0434E:  ADDLW  3E
04350:  MOVWF  01
04352:  MOVLW  01
04354:  ADDWFC 03,F
04356:  MOVF   01,W
04358:  ADDLW  1E
0435A:  MOVWF  FE9
0435C:  MOVLW  00
0435E:  ADDWFC 03,W
04360:  MOVWF  FEA
04362:  CLRF   FEF
04364:  CLRF   1B
04366:  BTFSC  FF2.7
04368:  BSF    1B.7
0436A:  BCF    FF2.7
....................                   ltlevel[((struct light)mydevices.myoutputs[x].device).internal_order]=((struct light)mydevices.myoutputs[x].device).dim_value.value; 
0436C:  CLRF   xDB
0436E:  MOVFF  661,6DA
04372:  CLRF   xDD
04374:  MOVLW  2F
04376:  MOVWF  xDC
04378:  MOVLB  0
0437A:  CALL   041C
0437E:  BTFSC  1B.7
04380:  BSF    FF2.7
04382:  MOVF   01,W
04384:  ADDLW  4C
04386:  MOVLB  6
04388:  MOVWF  x63
0438A:  MOVLW  01
0438C:  ADDWFC 02,W
0438E:  MOVWF  x64
04390:  MOVLW  01
04392:  ADDWF  x63,W
04394:  MOVWF  01
04396:  MOVLW  00
04398:  ADDWFC x64,W
0439A:  MOVWF  03
0439C:  MOVF   01,W
0439E:  ADDLW  3E
043A0:  MOVWF  01
043A2:  MOVLW  01
043A4:  ADDWFC 03,F
043A6:  MOVF   01,W
043A8:  ADDLW  20
043AA:  MOVWF  FE9
043AC:  MOVLW  00
043AE:  ADDWFC 03,W
043B0:  MOVWF  FEA
043B2:  CLRF   03
043B4:  MOVF   FEF,W
043B6:  ADDLW  81
043B8:  MOVWF  01
043BA:  MOVLW  05
043BC:  ADDWFC 03,F
043BE:  MOVFF  01,665
043C2:  MOVFF  03,666
043C6:  CLRF   1B
043C8:  BTFSC  FF2.7
043CA:  BSF    1B.7
043CC:  BCF    FF2.7
043CE:  CLRF   xDB
043D0:  MOVFF  661,6DA
043D4:  CLRF   xDD
043D6:  MOVLW  2F
043D8:  MOVWF  xDC
043DA:  MOVLB  0
043DC:  CALL   041C
043E0:  BTFSC  1B.7
043E2:  BSF    FF2.7
043E4:  MOVF   01,W
043E6:  ADDLW  4C
043E8:  MOVLB  6
043EA:  MOVWF  x67
043EC:  MOVLW  01
043EE:  ADDWFC 02,W
043F0:  MOVWF  x68
043F2:  MOVLW  01
043F4:  ADDWF  x67,W
043F6:  MOVWF  01
043F8:  MOVLW  00
043FA:  ADDWFC x68,W
043FC:  MOVWF  03
043FE:  MOVF   01,W
04400:  ADDLW  3E
04402:  MOVWF  01
04404:  MOVLW  01
04406:  ADDWFC 03,F
04408:  MOVF   01,W
0440A:  ADDLW  1C
0440C:  MOVWF  FE9
0440E:  MOVLW  00
04410:  ADDWFC 03,W
04412:  MOVWF  FEA
04414:  MOVFF  FEF,669
04418:  MOVFF  666,FEA
0441C:  MOVFF  665,FE9
04420:  MOVFF  669,FEF
....................                   update_dimmers=true; 
04424:  BSF    x62.0
04426:  CLRF   1B
04428:  BTFSC  FF2.7
0442A:  BSF    1B.7
0442C:  BCF    FF2.7
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
0442E:  CLRF   xDB
04430:  MOVFF  661,6DA
04434:  CLRF   xDD
04436:  MOVLW  2F
04438:  MOVWF  xDC
0443A:  MOVLB  0
0443C:  CALL   041C
04440:  BTFSC  1B.7
04442:  BSF    FF2.7
04444:  MOVF   01,W
04446:  ADDLW  4C
04448:  MOVLB  6
0444A:  MOVWF  x63
0444C:  MOVLW  01
0444E:  ADDWFC 02,W
04450:  MOVWF  x64
04452:  MOVLW  01
04454:  ADDWF  x63,W
04456:  MOVWF  01
04458:  MOVLW  00
0445A:  ADDWFC x64,W
0445C:  MOVWF  03
0445E:  MOVF   01,W
04460:  ADDLW  3E
04462:  MOVWF  01
04464:  MOVLW  01
04466:  ADDWFC 03,F
04468:  MOVF   01,W
0446A:  ADDLW  09
0446C:  MOVWF  FE9
0446E:  MOVLW  00
04470:  ADDWFC 03,W
04472:  MOVWF  FEA
04474:  BCF    FEF.0
....................             } 
....................          break; 
04476:  MOVLB  0
04478:  GOTO   51FA
....................          case _on_off: 
0447C:  CLRF   1B
0447E:  BTFSC  FF2.7
04480:  BSF    1B.7
04482:  BCF    FF2.7
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update) 
04484:  MOVLB  6
04486:  CLRF   xDB
04488:  MOVFF  661,6DA
0448C:  CLRF   xDD
0448E:  MOVLW  2F
04490:  MOVWF  xDC
04492:  MOVLB  0
04494:  CALL   041C
04498:  BTFSC  1B.7
0449A:  BSF    FF2.7
0449C:  MOVF   01,W
0449E:  ADDLW  4C
044A0:  MOVLB  6
044A2:  MOVWF  x63
044A4:  MOVLW  01
044A6:  ADDWFC 02,W
044A8:  MOVWF  x64
044AA:  MOVLW  01
044AC:  ADDWF  x63,W
044AE:  MOVWF  01
044B0:  MOVLW  00
044B2:  ADDWFC x64,W
044B4:  MOVWF  03
044B6:  MOVF   01,W
044B8:  ADDLW  3E
044BA:  MOVWF  01
044BC:  MOVLW  01
044BE:  ADDWFC 03,F
044C0:  MOVF   01,W
044C2:  ADDLW  13
044C4:  MOVWF  FE9
044C6:  MOVLW  00
044C8:  ADDWFC 03,W
044CA:  MOVWF  FEA
044CC:  BTFSS  FEF.0
044CE:  BRA    45E8
044D0:  CLRF   1B
044D2:  BTFSC  FF2.7
044D4:  BSF    1B.7
044D6:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).off.value) 
044D8:  CLRF   xDB
044DA:  MOVFF  661,6DA
044DE:  CLRF   xDD
044E0:  MOVLW  2F
044E2:  MOVWF  xDC
044E4:  MOVLB  0
044E6:  CALL   041C
044EA:  BTFSC  1B.7
044EC:  BSF    FF2.7
044EE:  MOVF   01,W
044F0:  ADDLW  4C
044F2:  MOVLB  6
044F4:  MOVWF  x63
044F6:  MOVLW  01
044F8:  ADDWFC 02,W
044FA:  MOVWF  x64
044FC:  MOVLW  01
044FE:  ADDWF  x63,W
04500:  MOVWF  01
04502:  MOVLW  00
04504:  ADDWFC x64,W
04506:  MOVWF  03
04508:  MOVF   01,W
0450A:  ADDLW  3E
0450C:  MOVWF  01
0450E:  MOVLW  01
04510:  ADDWFC 03,F
04512:  MOVF   01,W
04514:  ADDLW  12
04516:  MOVWF  FE9
04518:  MOVLW  00
0451A:  ADDWFC 03,W
0451C:  MOVWF  FEA
0451E:  MOVF   FEF,F
04520:  BZ    4598
04522:  CLRF   1B
04524:  BTFSC  FF2.7
04526:  BSF    1B.7
04528:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue|~light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
0452A:  CLRF   xDB
0452C:  MOVFF  661,6DA
04530:  CLRF   xDD
04532:  MOVLW  2F
04534:  MOVWF  xDC
04536:  MOVLB  0
04538:  CALL   041C
0453C:  BTFSC  1B.7
0453E:  BSF    FF2.7
04540:  MOVF   01,W
04542:  ADDLW  4C
04544:  MOVLB  6
04546:  MOVWF  x63
04548:  MOVLW  01
0454A:  ADDWFC 02,W
0454C:  MOVWF  x64
0454E:  MOVLW  01
04550:  ADDWF  x63,W
04552:  MOVWF  01
04554:  MOVLW  00
04556:  ADDWFC x64,W
04558:  MOVWF  03
0455A:  MOVF   01,W
0455C:  ADDLW  3E
0455E:  MOVWF  01
04560:  MOVLW  01
04562:  ADDWFC 03,F
04564:  MOVF   01,W
04566:  ADDLW  14
04568:  MOVWF  FE9
0456A:  MOVLW  00
0456C:  ADDWFC 03,W
0456E:  MOVWF  FEA
04570:  BCF    FD8.0
04572:  RLCF   FEF,W
04574:  CLRF   03
04576:  MOVLB  0
04578:  CALL   0172
0457C:  TBLRD*+
0457E:  MOVFF  FF5,03
04582:  CLRF   00
04584:  DECF   00,F
04586:  XORWF  00,F
04588:  MOVLW  FF
0458A:  XORWF  03,F
0458C:  MOVF   00,W
0458E:  MOVLB  5
04590:  IORWF  x7F,F
04592:  MOVF   03,W
04594:  IORWF  x80,F
04596:  MOVLB  6
04598:  CLRF   1B
0459A:  BTFSC  FF2.7
0459C:  BSF    1B.7
0459E:  BCF    FF2.7
....................                } 
....................                ((struct oNoFF)mydevices.myoutputs[x].device).off.needs_update=false; 
045A0:  CLRF   xDB
045A2:  MOVFF  661,6DA
045A6:  CLRF   xDD
045A8:  MOVLW  2F
045AA:  MOVWF  xDC
045AC:  MOVLB  0
045AE:  CALL   041C
045B2:  BTFSC  1B.7
045B4:  BSF    FF2.7
045B6:  MOVF   01,W
045B8:  ADDLW  4C
045BA:  MOVLB  6
045BC:  MOVWF  x63
045BE:  MOVLW  01
045C0:  ADDWFC 02,W
045C2:  MOVWF  x64
045C4:  MOVLW  01
045C6:  ADDWF  x63,W
045C8:  MOVWF  01
045CA:  MOVLW  00
045CC:  ADDWFC x64,W
045CE:  MOVWF  03
045D0:  MOVF   01,W
045D2:  ADDLW  3E
045D4:  MOVWF  01
045D6:  MOVLW  01
045D8:  ADDWFC 03,F
045DA:  MOVF   01,W
045DC:  ADDLW  13
045DE:  MOVWF  FE9
045E0:  MOVLW  00
045E2:  ADDWFC 03,W
045E4:  MOVWF  FEA
045E6:  BCF    FEF.0
045E8:  CLRF   1B
045EA:  BTFSC  FF2.7
045EC:  BSF    1B.7
045EE:  BCF    FF2.7
....................             } 
....................             if(((struct oNoFF)mydevices.myoutputs[x].device).on.needs_update) 
045F0:  CLRF   xDB
045F2:  MOVFF  661,6DA
045F6:  CLRF   xDD
045F8:  MOVLW  2F
045FA:  MOVWF  xDC
045FC:  MOVLB  0
045FE:  CALL   041C
04602:  BTFSC  1B.7
04604:  BSF    FF2.7
04606:  MOVF   01,W
04608:  ADDLW  4C
0460A:  MOVLB  6
0460C:  MOVWF  x63
0460E:  MOVLW  01
04610:  ADDWFC 02,W
04612:  MOVWF  x64
04614:  MOVLW  01
04616:  ADDWF  x63,W
04618:  MOVWF  01
0461A:  MOVLW  00
0461C:  ADDWFC x64,W
0461E:  MOVWF  03
04620:  MOVF   01,W
04622:  ADDLW  3E
04624:  MOVWF  01
04626:  MOVLW  01
04628:  ADDWFC 03,F
0462A:  MOVF   01,W
0462C:  ADDLW  09
0462E:  MOVWF  FE9
04630:  MOVLW  00
04632:  ADDWFC 03,W
04634:  MOVWF  FEA
04636:  BTFSS  FEF.0
04638:  BRA    4746
0463A:  CLRF   1B
0463C:  BTFSC  FF2.7
0463E:  BSF    1B.7
04640:  BCF    FF2.7
....................             { 
....................                if(((struct oNoFF)mydevices.myoutputs[x].device).on.value) 
04642:  CLRF   xDB
04644:  MOVFF  661,6DA
04648:  CLRF   xDD
0464A:  MOVLW  2F
0464C:  MOVWF  xDC
0464E:  MOVLB  0
04650:  CALL   041C
04654:  BTFSC  1B.7
04656:  BSF    FF2.7
04658:  MOVF   01,W
0465A:  ADDLW  4C
0465C:  MOVLB  6
0465E:  MOVWF  x63
04660:  MOVLW  01
04662:  ADDWFC 02,W
04664:  MOVWF  x64
04666:  MOVLW  01
04668:  ADDWF  x63,W
0466A:  MOVWF  01
0466C:  MOVLW  00
0466E:  ADDWFC x64,W
04670:  MOVWF  03
04672:  MOVF   01,W
04674:  ADDLW  3E
04676:  MOVWF  01
04678:  MOVLW  01
0467A:  ADDWFC 03,F
0467C:  MOVF   01,W
0467E:  ADDLW  08
04680:  MOVWF  FE9
04682:  MOVLW  00
04684:  ADDWFC 03,W
04686:  MOVWF  FEA
04688:  MOVF   FEF,F
0468A:  BZ    46F6
0468C:  CLRF   1B
0468E:  BTFSC  FF2.7
04690:  BSF    1B.7
04692:  BCF    FF2.7
....................                { 
....................                   onoffsvalue=onoffsvalue & light_pins[((struct oNoFF)mydevices.myoutputs[x].device).output_pin]; 
04694:  CLRF   xDB
04696:  MOVFF  661,6DA
0469A:  CLRF   xDD
0469C:  MOVLW  2F
0469E:  MOVWF  xDC
046A0:  MOVLB  0
046A2:  CALL   041C
046A6:  BTFSC  1B.7
046A8:  BSF    FF2.7
046AA:  MOVF   01,W
046AC:  ADDLW  4C
046AE:  MOVLB  6
046B0:  MOVWF  x63
046B2:  MOVLW  01
046B4:  ADDWFC 02,W
046B6:  MOVWF  x64
046B8:  MOVLW  01
046BA:  ADDWF  x63,W
046BC:  MOVWF  01
046BE:  MOVLW  00
046C0:  ADDWFC x64,W
046C2:  MOVWF  03
046C4:  MOVF   01,W
046C6:  ADDLW  3E
046C8:  MOVWF  01
046CA:  MOVLW  01
046CC:  ADDWFC 03,F
046CE:  MOVF   01,W
046D0:  ADDLW  14
046D2:  MOVWF  FE9
046D4:  MOVLW  00
046D6:  ADDWFC 03,W
046D8:  MOVWF  FEA
046DA:  BCF    FD8.0
046DC:  RLCF   FEF,W
046DE:  CLRF   03
046E0:  MOVLB  0
046E2:  CALL   0172
046E6:  TBLRD*+
046E8:  MOVFF  FF5,03
046EC:  MOVLB  5
046EE:  ANDWF  x7F,F
046F0:  MOVF   03,W
046F2:  ANDWF  x80,F
046F4:  MOVLB  6
046F6:  CLRF   1B
046F8:  BTFSC  FF2.7
046FA:  BSF    1B.7
046FC:  BCF    FF2.7
....................                   
....................                } 
....................                ((struct light)mydevices.myoutputs[x].device).on.needs_update=false; 
046FE:  CLRF   xDB
04700:  MOVFF  661,6DA
04704:  CLRF   xDD
04706:  MOVLW  2F
04708:  MOVWF  xDC
0470A:  MOVLB  0
0470C:  CALL   041C
04710:  BTFSC  1B.7
04712:  BSF    FF2.7
04714:  MOVF   01,W
04716:  ADDLW  4C
04718:  MOVLB  6
0471A:  MOVWF  x63
0471C:  MOVLW  01
0471E:  ADDWFC 02,W
04720:  MOVWF  x64
04722:  MOVLW  01
04724:  ADDWF  x63,W
04726:  MOVWF  01
04728:  MOVLW  00
0472A:  ADDWFC x64,W
0472C:  MOVWF  03
0472E:  MOVF   01,W
04730:  ADDLW  3E
04732:  MOVWF  01
04734:  MOVLW  01
04736:  ADDWFC 03,F
04738:  MOVF   01,W
0473A:  ADDLW  09
0473C:  MOVWF  FE9
0473E:  MOVLW  00
04740:  ADDWFC 03,W
04742:  MOVWF  FEA
04744:  BCF    FEF.0
....................             } 
....................          break; 
04746:  MOVLB  0
04748:  GOTO   51FA
....................            case shutter: 
0474C:  CLRF   1B
0474E:  BTFSC  FF2.7
04750:  BSF    1B.7
04752:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).up.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingUp))) 
04754:  MOVLB  6
04756:  CLRF   xDB
04758:  MOVFF  661,6DA
0475C:  CLRF   xDD
0475E:  MOVLW  2F
04760:  MOVWF  xDC
04762:  MOVLB  0
04764:  CALL   041C
04768:  BTFSC  1B.7
0476A:  BSF    FF2.7
0476C:  MOVF   01,W
0476E:  ADDLW  4C
04770:  MOVLB  6
04772:  MOVWF  x63
04774:  MOVLW  01
04776:  ADDWFC 02,W
04778:  MOVWF  x64
0477A:  MOVLW  01
0477C:  ADDWF  x63,W
0477E:  MOVWF  01
04780:  MOVLW  00
04782:  ADDWFC x64,W
04784:  MOVWF  03
04786:  MOVF   01,W
04788:  ADDLW  3E
0478A:  MOVWF  01
0478C:  MOVLW  01
0478E:  ADDWFC 03,F
04790:  MOVF   01,W
04792:  ADDLW  09
04794:  MOVWF  FE9
04796:  MOVLW  00
04798:  ADDWFC 03,W
0479A:  MOVWF  FEA
0479C:  BTFSS  FEF.0
0479E:  BRA    49F6
047A0:  CLRF   1B
047A2:  BTFSC  FF2.7
047A4:  BSF    1B.7
047A6:  BCF    FF2.7
047A8:  CLRF   xDB
047AA:  MOVFF  661,6DA
047AE:  CLRF   xDD
047B0:  MOVLW  2F
047B2:  MOVWF  xDC
047B4:  MOVLB  0
047B6:  CALL   041C
047BA:  BTFSC  1B.7
047BC:  BSF    FF2.7
047BE:  MOVF   01,W
047C0:  ADDLW  4C
047C2:  MOVLB  6
047C4:  MOVWF  x65
047C6:  MOVLW  01
047C8:  ADDWFC 02,W
047CA:  MOVWF  x66
047CC:  MOVLW  01
047CE:  ADDWF  x65,W
047D0:  MOVWF  01
047D2:  MOVLW  00
047D4:  ADDWFC x66,W
047D6:  MOVWF  03
047D8:  MOVF   01,W
047DA:  ADDLW  3E
047DC:  MOVWF  01
047DE:  MOVLW  01
047E0:  ADDWFC 03,F
047E2:  MOVF   01,W
047E4:  ADDLW  2D
047E6:  MOVWF  FE9
047E8:  MOVLW  00
047EA:  ADDWFC 03,W
047EC:  MOVWF  FEA
047EE:  MOVF   FEF,W
047F0:  SUBLW  04
047F2:  BZ    4848
047F4:  CLRF   1B
047F6:  BTFSC  FF2.7
047F8:  BSF    1B.7
047FA:  BCF    FF2.7
047FC:  CLRF   xDB
047FE:  MOVFF  661,6DA
04802:  CLRF   xDD
04804:  MOVLW  2F
04806:  MOVWF  xDC
04808:  MOVLB  0
0480A:  CALL   041C
0480E:  BTFSC  1B.7
04810:  BSF    FF2.7
04812:  MOVF   01,W
04814:  ADDLW  4C
04816:  MOVLB  6
04818:  MOVWF  x67
0481A:  MOVLW  01
0481C:  ADDWFC 02,W
0481E:  MOVWF  x68
04820:  MOVLW  01
04822:  ADDWF  x67,W
04824:  MOVWF  01
04826:  MOVLW  00
04828:  ADDWFC x68,W
0482A:  MOVWF  03
0482C:  MOVF   01,W
0482E:  ADDLW  3E
04830:  MOVWF  01
04832:  MOVLW  01
04834:  ADDWFC 03,F
04836:  MOVF   01,W
04838:  ADDLW  2D
0483A:  MOVWF  FE9
0483C:  MOVLW  00
0483E:  ADDWFC 03,W
04840:  MOVWF  FEA
04842:  MOVF   FEF,F
04844:  BTFSS  FD8.2
04846:  BRA    49F6
04848:  CLRF   1B
0484A:  BTFSC  FF2.7
0484C:  BSF    1B.7
0484E:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).up.value) 
04850:  CLRF   xDB
04852:  MOVFF  661,6DA
04856:  CLRF   xDD
04858:  MOVLW  2F
0485A:  MOVWF  xDC
0485C:  MOVLB  0
0485E:  CALL   041C
04862:  BTFSC  1B.7
04864:  BSF    FF2.7
04866:  MOVF   01,W
04868:  ADDLW  4C
0486A:  MOVLB  6
0486C:  MOVWF  x63
0486E:  MOVLW  01
04870:  ADDWFC 02,W
04872:  MOVWF  x64
04874:  MOVLW  01
04876:  ADDWF  x63,W
04878:  MOVWF  01
0487A:  MOVLW  00
0487C:  ADDWFC x64,W
0487E:  MOVWF  03
04880:  MOVF   01,W
04882:  ADDLW  3E
04884:  MOVWF  01
04886:  MOVLW  01
04888:  ADDWFC 03,F
0488A:  MOVF   01,W
0488C:  ADDLW  08
0488E:  MOVWF  FE9
04890:  MOVLW  00
04892:  ADDWFC 03,W
04894:  MOVWF  FEA
04896:  MOVF   FEF,F
04898:  BTFSC  FD8.2
0489A:  BRA    49A6
0489C:  CLRF   1B
0489E:  BTFSC  FF2.7
048A0:  BSF    1B.7
048A2:  BCF    FF2.7
....................                { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
048A4:  CLRF   xDB
048A6:  MOVFF  661,6DA
048AA:  CLRF   xDD
048AC:  MOVLW  2F
048AE:  MOVWF  xDC
048B0:  MOVLB  0
048B2:  CALL   041C
048B6:  BTFSC  1B.7
048B8:  BSF    FF2.7
048BA:  MOVF   01,W
048BC:  ADDLW  4C
048BE:  MOVLB  6
048C0:  MOVWF  x63
048C2:  MOVLW  01
048C4:  ADDWFC 02,W
048C6:  MOVWF  x64
048C8:  MOVLW  01
048CA:  ADDWF  x63,W
048CC:  MOVWF  01
048CE:  MOVLW  00
048D0:  ADDWFC x64,W
048D2:  MOVWF  03
048D4:  MOVF   01,W
048D6:  ADDLW  3E
048D8:  MOVWF  01
048DA:  MOVLW  01
048DC:  ADDWFC 03,F
048DE:  MOVF   01,W
048E0:  ADDLW  2A
048E2:  MOVWF  FE9
048E4:  MOVLW  00
048E6:  ADDWFC 03,W
048E8:  MOVWF  FEA
048EA:  CLRF   FEF
048EC:  CLRF   1B
048EE:  BTFSC  FF2.7
048F0:  BSF    1B.7
048F2:  BCF    FF2.7
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=goingUp; 
048F4:  CLRF   xDB
048F6:  MOVFF  661,6DA
048FA:  CLRF   xDD
048FC:  MOVLW  2F
048FE:  MOVWF  xDC
04900:  MOVLB  0
04902:  CALL   041C
04906:  BTFSC  1B.7
04908:  BSF    FF2.7
0490A:  MOVF   01,W
0490C:  ADDLW  4C
0490E:  MOVLB  6
04910:  MOVWF  x63
04912:  MOVLW  01
04914:  ADDWFC 02,W
04916:  MOVWF  x64
04918:  MOVLW  01
0491A:  ADDWF  x63,W
0491C:  MOVWF  01
0491E:  MOVLW  00
04920:  ADDWFC x64,W
04922:  MOVWF  03
04924:  MOVF   01,W
04926:  ADDLW  3E
04928:  MOVWF  01
0492A:  MOVLW  01
0492C:  ADDWFC 03,F
0492E:  MOVF   01,W
04930:  ADDLW  2D
04932:  MOVWF  FE9
04934:  MOVLW  00
04936:  ADDWFC 03,W
04938:  MOVWF  FEA
0493A:  CLRF   FEF
0493C:  CLRF   1B
0493E:  BTFSC  FF2.7
04940:  BSF    1B.7
04942:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04944:  CLRF   xDB
04946:  MOVFF  661,6DA
0494A:  CLRF   xDD
0494C:  MOVLW  2F
0494E:  MOVWF  xDC
04950:  MOVLB  0
04952:  CALL   041C
04956:  BTFSC  1B.7
04958:  BSF    FF2.7
0495A:  MOVF   01,W
0495C:  ADDLW  4C
0495E:  MOVLB  6
04960:  MOVWF  x63
04962:  MOVLW  01
04964:  ADDWFC 02,W
04966:  MOVWF  x64
04968:  MOVLW  01
0496A:  ADDWF  x63,W
0496C:  MOVWF  01
0496E:  MOVLW  00
04970:  ADDWFC x64,W
04972:  MOVWF  03
04974:  MOVF   01,W
04976:  ADDLW  3E
04978:  MOVWF  01
0497A:  MOVLW  01
0497C:  ADDWFC 03,F
0497E:  MOVF   01,W
04980:  ADDLW  28
04982:  MOVWF  FE9
04984:  MOVLW  00
04986:  ADDWFC 03,W
04988:  MOVWF  FEA
0498A:  BCF    FD8.0
0498C:  RLCF   FEF,W
0498E:  CLRF   03
04990:  MOVLB  0
04992:  CALL   0172
04996:  TBLRD*+
04998:  MOVFF  FF5,03
0499C:  MOVLB  5
0499E:  ANDWF  x7F,F
049A0:  MOVF   03,W
049A2:  ANDWF  x80,F
049A4:  MOVLB  6
049A6:  CLRF   1B
049A8:  BTFSC  FF2.7
049AA:  BSF    1B.7
049AC:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).up.needs_update=false; 
049AE:  CLRF   xDB
049B0:  MOVFF  661,6DA
049B4:  CLRF   xDD
049B6:  MOVLW  2F
049B8:  MOVWF  xDC
049BA:  MOVLB  0
049BC:  CALL   041C
049C0:  BTFSC  1B.7
049C2:  BSF    FF2.7
049C4:  MOVF   01,W
049C6:  ADDLW  4C
049C8:  MOVLB  6
049CA:  MOVWF  x63
049CC:  MOVLW  01
049CE:  ADDWFC 02,W
049D0:  MOVWF  x64
049D2:  MOVLW  01
049D4:  ADDWF  x63,W
049D6:  MOVWF  01
049D8:  MOVLW  00
049DA:  ADDWFC x64,W
049DC:  MOVWF  03
049DE:  MOVF   01,W
049E0:  ADDLW  3E
049E2:  MOVWF  01
049E4:  MOVLW  01
049E6:  ADDWFC 03,F
049E8:  MOVF   01,W
049EA:  ADDLW  09
049EC:  MOVWF  FE9
049EE:  MOVLW  00
049F0:  ADDWFC 03,W
049F2:  MOVWF  FEA
049F4:  BCF    FEF.0
049F6:  CLRF   1B
049F8:  BTFSC  FF2.7
049FA:  BSF    1B.7
049FC:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).down.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingDown))) 
049FE:  CLRF   xDB
04A00:  MOVFF  661,6DA
04A04:  CLRF   xDD
04A06:  MOVLW  2F
04A08:  MOVWF  xDC
04A0A:  MOVLB  0
04A0C:  CALL   041C
04A10:  BTFSC  1B.7
04A12:  BSF    FF2.7
04A14:  MOVF   01,W
04A16:  ADDLW  4C
04A18:  MOVLB  6
04A1A:  MOVWF  x63
04A1C:  MOVLW  01
04A1E:  ADDWFC 02,W
04A20:  MOVWF  x64
04A22:  MOVLW  01
04A24:  ADDWF  x63,W
04A26:  MOVWF  01
04A28:  MOVLW  00
04A2A:  ADDWFC x64,W
04A2C:  MOVWF  03
04A2E:  MOVF   01,W
04A30:  ADDLW  3E
04A32:  MOVWF  01
04A34:  MOVLW  01
04A36:  ADDWFC 03,F
04A38:  MOVF   01,W
04A3A:  ADDLW  13
04A3C:  MOVWF  FE9
04A3E:  MOVLW  00
04A40:  ADDWFC 03,W
04A42:  MOVWF  FEA
04A44:  BTFSS  FEF.0
04A46:  BRA    4C9E
04A48:  CLRF   1B
04A4A:  BTFSC  FF2.7
04A4C:  BSF    1B.7
04A4E:  BCF    FF2.7
04A50:  CLRF   xDB
04A52:  MOVFF  661,6DA
04A56:  CLRF   xDD
04A58:  MOVLW  2F
04A5A:  MOVWF  xDC
04A5C:  MOVLB  0
04A5E:  CALL   041C
04A62:  BTFSC  1B.7
04A64:  BSF    FF2.7
04A66:  MOVF   01,W
04A68:  ADDLW  4C
04A6A:  MOVLB  6
04A6C:  MOVWF  x65
04A6E:  MOVLW  01
04A70:  ADDWFC 02,W
04A72:  MOVWF  x66
04A74:  MOVLW  01
04A76:  ADDWF  x65,W
04A78:  MOVWF  01
04A7A:  MOVLW  00
04A7C:  ADDWFC x66,W
04A7E:  MOVWF  03
04A80:  MOVF   01,W
04A82:  ADDLW  3E
04A84:  MOVWF  01
04A86:  MOVLW  01
04A88:  ADDWFC 03,F
04A8A:  MOVF   01,W
04A8C:  ADDLW  2D
04A8E:  MOVWF  FE9
04A90:  MOVLW  00
04A92:  ADDWFC 03,W
04A94:  MOVWF  FEA
04A96:  MOVF   FEF,W
04A98:  SUBLW  04
04A9A:  BZ    4AEE
04A9C:  CLRF   1B
04A9E:  BTFSC  FF2.7
04AA0:  BSF    1B.7
04AA2:  BCF    FF2.7
04AA4:  CLRF   xDB
04AA6:  MOVFF  661,6DA
04AAA:  CLRF   xDD
04AAC:  MOVLW  2F
04AAE:  MOVWF  xDC
04AB0:  MOVLB  0
04AB2:  CALL   041C
04AB6:  BTFSC  1B.7
04AB8:  BSF    FF2.7
04ABA:  MOVF   01,W
04ABC:  ADDLW  4C
04ABE:  MOVLB  6
04AC0:  MOVWF  x67
04AC2:  MOVLW  01
04AC4:  ADDWFC 02,W
04AC6:  MOVWF  x68
04AC8:  MOVLW  01
04ACA:  ADDWF  x67,W
04ACC:  MOVWF  01
04ACE:  MOVLW  00
04AD0:  ADDWFC x68,W
04AD2:  MOVWF  03
04AD4:  MOVF   01,W
04AD6:  ADDLW  3E
04AD8:  MOVWF  01
04ADA:  MOVLW  01
04ADC:  ADDWFC 03,F
04ADE:  MOVF   01,W
04AE0:  ADDLW  2D
04AE2:  MOVWF  FE9
04AE4:  MOVLW  00
04AE6:  ADDWFC 03,W
04AE8:  MOVWF  FEA
04AEA:  DECFSZ FEF,W
04AEC:  BRA    4C9E
04AEE:  CLRF   1B
04AF0:  BTFSC  FF2.7
04AF2:  BSF    1B.7
04AF4:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).down.value) 
04AF6:  CLRF   xDB
04AF8:  MOVFF  661,6DA
04AFC:  CLRF   xDD
04AFE:  MOVLW  2F
04B00:  MOVWF  xDC
04B02:  MOVLB  0
04B04:  CALL   041C
04B08:  BTFSC  1B.7
04B0A:  BSF    FF2.7
04B0C:  MOVF   01,W
04B0E:  ADDLW  4C
04B10:  MOVLB  6
04B12:  MOVWF  x63
04B14:  MOVLW  01
04B16:  ADDWFC 02,W
04B18:  MOVWF  x64
04B1A:  MOVLW  01
04B1C:  ADDWF  x63,W
04B1E:  MOVWF  01
04B20:  MOVLW  00
04B22:  ADDWFC x64,W
04B24:  MOVWF  03
04B26:  MOVF   01,W
04B28:  ADDLW  3E
04B2A:  MOVWF  01
04B2C:  MOVLW  01
04B2E:  ADDWFC 03,F
04B30:  MOVF   01,W
04B32:  ADDLW  12
04B34:  MOVWF  FE9
04B36:  MOVLW  00
04B38:  ADDWFC 03,W
04B3A:  MOVWF  FEA
04B3C:  MOVF   FEF,F
04B3E:  BTFSC  FD8.2
04B40:  BRA    4C4E
04B42:  CLRF   1B
04B44:  BTFSC  FF2.7
04B46:  BSF    1B.7
04B48:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04B4A:  CLRF   xDB
04B4C:  MOVFF  661,6DA
04B50:  CLRF   xDD
04B52:  MOVLW  2F
04B54:  MOVWF  xDC
04B56:  MOVLB  0
04B58:  CALL   041C
04B5C:  BTFSC  1B.7
04B5E:  BSF    FF2.7
04B60:  MOVF   01,W
04B62:  ADDLW  4C
04B64:  MOVLB  6
04B66:  MOVWF  x63
04B68:  MOVLW  01
04B6A:  ADDWFC 02,W
04B6C:  MOVWF  x64
04B6E:  MOVLW  01
04B70:  ADDWF  x63,W
04B72:  MOVWF  01
04B74:  MOVLW  00
04B76:  ADDWFC x64,W
04B78:  MOVWF  03
04B7A:  MOVF   01,W
04B7C:  ADDLW  3E
04B7E:  MOVWF  01
04B80:  MOVLW  01
04B82:  ADDWFC 03,F
04B84:  MOVF   01,W
04B86:  ADDLW  2A
04B88:  MOVWF  FE9
04B8A:  MOVLW  00
04B8C:  ADDWFC 03,W
04B8E:  MOVWF  FEA
04B90:  CLRF   FEF
04B92:  CLRF   1B
04B94:  BTFSC  FF2.7
04B96:  BSF    1B.7
04B98:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingDown; 
04B9A:  CLRF   xDB
04B9C:  MOVFF  661,6DA
04BA0:  CLRF   xDD
04BA2:  MOVLW  2F
04BA4:  MOVWF  xDC
04BA6:  MOVLB  0
04BA8:  CALL   041C
04BAC:  BTFSC  1B.7
04BAE:  BSF    FF2.7
04BB0:  MOVF   01,W
04BB2:  ADDLW  4C
04BB4:  MOVLB  6
04BB6:  MOVWF  x63
04BB8:  MOVLW  01
04BBA:  ADDWFC 02,W
04BBC:  MOVWF  x64
04BBE:  MOVLW  01
04BC0:  ADDWF  x63,W
04BC2:  MOVWF  01
04BC4:  MOVLW  00
04BC6:  ADDWFC x64,W
04BC8:  MOVWF  03
04BCA:  MOVF   01,W
04BCC:  ADDLW  3E
04BCE:  MOVWF  01
04BD0:  MOVLW  01
04BD2:  ADDWFC 03,F
04BD4:  MOVF   01,W
04BD6:  ADDLW  2D
04BD8:  MOVWF  FE9
04BDA:  MOVLW  00
04BDC:  ADDWFC 03,W
04BDE:  MOVWF  FEA
04BE0:  MOVLW  01
04BE2:  MOVWF  FEF
04BE4:  CLRF   1B
04BE6:  BTFSC  FF2.7
04BE8:  BSF    1B.7
04BEA:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
04BEC:  CLRF   xDB
04BEE:  MOVFF  661,6DA
04BF2:  CLRF   xDD
04BF4:  MOVLW  2F
04BF6:  MOVWF  xDC
04BF8:  MOVLB  0
04BFA:  CALL   041C
04BFE:  BTFSC  1B.7
04C00:  BSF    FF2.7
04C02:  MOVF   01,W
04C04:  ADDLW  4C
04C06:  MOVLB  6
04C08:  MOVWF  x63
04C0A:  MOVLW  01
04C0C:  ADDWFC 02,W
04C0E:  MOVWF  x64
04C10:  MOVLW  01
04C12:  ADDWF  x63,W
04C14:  MOVWF  01
04C16:  MOVLW  00
04C18:  ADDWFC x64,W
04C1A:  MOVWF  03
04C1C:  MOVF   01,W
04C1E:  ADDLW  3E
04C20:  MOVWF  01
04C22:  MOVLW  01
04C24:  ADDWFC 03,F
04C26:  MOVF   01,W
04C28:  ADDLW  29
04C2A:  MOVWF  FE9
04C2C:  MOVLW  00
04C2E:  ADDWFC 03,W
04C30:  MOVWF  FEA
04C32:  BCF    FD8.0
04C34:  RLCF   FEF,W
04C36:  CLRF   03
04C38:  MOVLB  0
04C3A:  CALL   0172
04C3E:  TBLRD*+
04C40:  MOVFF  FF5,03
04C44:  MOVLB  5
04C46:  ANDWF  x7F,F
04C48:  MOVF   03,W
04C4A:  ANDWF  x80,F
04C4C:  MOVLB  6
04C4E:  CLRF   1B
04C50:  BTFSC  FF2.7
04C52:  BSF    1B.7
04C54:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).down.needs_update=false; 
04C56:  CLRF   xDB
04C58:  MOVFF  661,6DA
04C5C:  CLRF   xDD
04C5E:  MOVLW  2F
04C60:  MOVWF  xDC
04C62:  MOVLB  0
04C64:  CALL   041C
04C68:  BTFSC  1B.7
04C6A:  BSF    FF2.7
04C6C:  MOVF   01,W
04C6E:  ADDLW  4C
04C70:  MOVLB  6
04C72:  MOVWF  x63
04C74:  MOVLW  01
04C76:  ADDWFC 02,W
04C78:  MOVWF  x64
04C7A:  MOVLW  01
04C7C:  ADDWF  x63,W
04C7E:  MOVWF  01
04C80:  MOVLW  00
04C82:  ADDWFC x64,W
04C84:  MOVWF  03
04C86:  MOVF   01,W
04C88:  ADDLW  3E
04C8A:  MOVWF  01
04C8C:  MOVLW  01
04C8E:  ADDWFC 03,F
04C90:  MOVF   01,W
04C92:  ADDLW  13
04C94:  MOVWF  FE9
04C96:  MOVLW  00
04C98:  ADDWFC 03,W
04C9A:  MOVWF  FEA
04C9C:  BCF    FEF.0
04C9E:  CLRF   1B
04CA0:  BTFSC  FF2.7
04CA2:  BSF    1B.7
04CA4:  BCF    FF2.7
....................             } 
....................             if(((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp))) 
04CA6:  CLRF   xDB
04CA8:  MOVFF  661,6DA
04CAC:  CLRF   xDD
04CAE:  MOVLW  2F
04CB0:  MOVWF  xDC
04CB2:  MOVLB  0
04CB4:  CALL   041C
04CB8:  BTFSC  1B.7
04CBA:  BSF    FF2.7
04CBC:  MOVF   01,W
04CBE:  ADDLW  4C
04CC0:  MOVLB  6
04CC2:  MOVWF  x63
04CC4:  MOVLW  01
04CC6:  ADDWFC 02,W
04CC8:  MOVWF  x64
04CCA:  MOVLW  01
04CCC:  ADDWF  x63,W
04CCE:  MOVWF  01
04CD0:  MOVLW  00
04CD2:  ADDWFC x64,W
04CD4:  MOVWF  03
04CD6:  MOVF   01,W
04CD8:  ADDLW  3E
04CDA:  MOVWF  01
04CDC:  MOVLW  01
04CDE:  ADDWFC 03,F
04CE0:  MOVF   01,W
04CE2:  ADDLW  1D
04CE4:  MOVWF  FE9
04CE6:  MOVLW  00
04CE8:  ADDWFC 03,W
04CEA:  MOVWF  FEA
04CEC:  BTFSS  FEF.0
04CEE:  BRA    4F4A
04CF0:  CLRF   1B
04CF2:  BTFSC  FF2.7
04CF4:  BSF    1B.7
04CF6:  BCF    FF2.7
04CF8:  CLRF   xDB
04CFA:  MOVFF  661,6DA
04CFE:  CLRF   xDD
04D00:  MOVLW  2F
04D02:  MOVWF  xDC
04D04:  MOVLB  0
04D06:  CALL   041C
04D0A:  BTFSC  1B.7
04D0C:  BSF    FF2.7
04D0E:  MOVF   01,W
04D10:  ADDLW  4C
04D12:  MOVLB  6
04D14:  MOVWF  x65
04D16:  MOVLW  01
04D18:  ADDWFC 02,W
04D1A:  MOVWF  x66
04D1C:  MOVLW  01
04D1E:  ADDWF  x65,W
04D20:  MOVWF  01
04D22:  MOVLW  00
04D24:  ADDWFC x66,W
04D26:  MOVWF  03
04D28:  MOVF   01,W
04D2A:  ADDLW  3E
04D2C:  MOVWF  01
04D2E:  MOVLW  01
04D30:  ADDWFC 03,F
04D32:  MOVF   01,W
04D34:  ADDLW  2D
04D36:  MOVWF  FE9
04D38:  MOVLW  00
04D3A:  ADDWFC 03,W
04D3C:  MOVWF  FEA
04D3E:  MOVF   FEF,W
04D40:  SUBLW  04
04D42:  BZ    4D9A
04D44:  CLRF   1B
04D46:  BTFSC  FF2.7
04D48:  BSF    1B.7
04D4A:  BCF    FF2.7
04D4C:  CLRF   xDB
04D4E:  MOVFF  661,6DA
04D52:  CLRF   xDD
04D54:  MOVLW  2F
04D56:  MOVWF  xDC
04D58:  MOVLB  0
04D5A:  CALL   041C
04D5E:  BTFSC  1B.7
04D60:  BSF    FF2.7
04D62:  MOVF   01,W
04D64:  ADDLW  4C
04D66:  MOVLB  6
04D68:  MOVWF  x67
04D6A:  MOVLW  01
04D6C:  ADDWFC 02,W
04D6E:  MOVWF  x68
04D70:  MOVLW  01
04D72:  ADDWF  x67,W
04D74:  MOVWF  01
04D76:  MOVLW  00
04D78:  ADDWFC x68,W
04D7A:  MOVWF  03
04D7C:  MOVF   01,W
04D7E:  ADDLW  3E
04D80:  MOVWF  01
04D82:  MOVLW  01
04D84:  ADDWFC 03,F
04D86:  MOVF   01,W
04D88:  ADDLW  2D
04D8A:  MOVWF  FE9
04D8C:  MOVLW  00
04D8E:  ADDWFC 03,W
04D90:  MOVWF  FEA
04D92:  MOVF   FEF,W
04D94:  SUBLW  02
04D96:  BTFSS  FD8.2
04D98:  BRA    4F4A
04D9A:  CLRF   1B
04D9C:  BTFSC  FF2.7
04D9E:  BSF    1B.7
04DA0:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fullup.value) 
04DA2:  CLRF   xDB
04DA4:  MOVFF  661,6DA
04DA8:  CLRF   xDD
04DAA:  MOVLW  2F
04DAC:  MOVWF  xDC
04DAE:  MOVLB  0
04DB0:  CALL   041C
04DB4:  BTFSC  1B.7
04DB6:  BSF    FF2.7
04DB8:  MOVF   01,W
04DBA:  ADDLW  4C
04DBC:  MOVLB  6
04DBE:  MOVWF  x63
04DC0:  MOVLW  01
04DC2:  ADDWFC 02,W
04DC4:  MOVWF  x64
04DC6:  MOVLW  01
04DC8:  ADDWF  x63,W
04DCA:  MOVWF  01
04DCC:  MOVLW  00
04DCE:  ADDWFC x64,W
04DD0:  MOVWF  03
04DD2:  MOVF   01,W
04DD4:  ADDLW  3E
04DD6:  MOVWF  01
04DD8:  MOVLW  01
04DDA:  ADDWFC 03,F
04DDC:  MOVF   01,W
04DDE:  ADDLW  1C
04DE0:  MOVWF  FE9
04DE2:  MOVLW  00
04DE4:  ADDWFC 03,W
04DE6:  MOVWF  FEA
04DE8:  MOVF   FEF,F
04DEA:  BTFSC  FD8.2
04DEC:  BRA    4EFA
04DEE:  CLRF   1B
04DF0:  BTFSC  FF2.7
04DF2:  BSF    1B.7
04DF4:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
04DF6:  CLRF   xDB
04DF8:  MOVFF  661,6DA
04DFC:  CLRF   xDD
04DFE:  MOVLW  2F
04E00:  MOVWF  xDC
04E02:  MOVLB  0
04E04:  CALL   041C
04E08:  BTFSC  1B.7
04E0A:  BSF    FF2.7
04E0C:  MOVF   01,W
04E0E:  ADDLW  4C
04E10:  MOVLB  6
04E12:  MOVWF  x63
04E14:  MOVLW  01
04E16:  ADDWFC 02,W
04E18:  MOVWF  x64
04E1A:  MOVLW  01
04E1C:  ADDWF  x63,W
04E1E:  MOVWF  01
04E20:  MOVLW  00
04E22:  ADDWFC x64,W
04E24:  MOVWF  03
04E26:  MOVF   01,W
04E28:  ADDLW  3E
04E2A:  MOVWF  01
04E2C:  MOVLW  01
04E2E:  ADDWFC 03,F
04E30:  MOVF   01,W
04E32:  ADDLW  2A
04E34:  MOVWF  FE9
04E36:  MOVLW  00
04E38:  ADDWFC 03,W
04E3A:  MOVWF  FEA
04E3C:  CLRF   FEF
04E3E:  CLRF   1B
04E40:  BTFSC  FF2.7
04E42:  BSF    1B.7
04E44:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullUp; 
04E46:  CLRF   xDB
04E48:  MOVFF  661,6DA
04E4C:  CLRF   xDD
04E4E:  MOVLW  2F
04E50:  MOVWF  xDC
04E52:  MOVLB  0
04E54:  CALL   041C
04E58:  BTFSC  1B.7
04E5A:  BSF    FF2.7
04E5C:  MOVF   01,W
04E5E:  ADDLW  4C
04E60:  MOVLB  6
04E62:  MOVWF  x63
04E64:  MOVLW  01
04E66:  ADDWFC 02,W
04E68:  MOVWF  x64
04E6A:  MOVLW  01
04E6C:  ADDWF  x63,W
04E6E:  MOVWF  01
04E70:  MOVLW  00
04E72:  ADDWFC x64,W
04E74:  MOVWF  03
04E76:  MOVF   01,W
04E78:  ADDLW  3E
04E7A:  MOVWF  01
04E7C:  MOVLW  01
04E7E:  ADDWFC 03,F
04E80:  MOVF   01,W
04E82:  ADDLW  2D
04E84:  MOVWF  FE9
04E86:  MOVLW  00
04E88:  ADDWFC 03,W
04E8A:  MOVWF  FEA
04E8C:  MOVLW  02
04E8E:  MOVWF  FEF
04E90:  CLRF   1B
04E92:  BTFSC  FF2.7
04E94:  BSF    1B.7
04E96:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
04E98:  CLRF   xDB
04E9A:  MOVFF  661,6DA
04E9E:  CLRF   xDD
04EA0:  MOVLW  2F
04EA2:  MOVWF  xDC
04EA4:  MOVLB  0
04EA6:  CALL   041C
04EAA:  BTFSC  1B.7
04EAC:  BSF    FF2.7
04EAE:  MOVF   01,W
04EB0:  ADDLW  4C
04EB2:  MOVLB  6
04EB4:  MOVWF  x63
04EB6:  MOVLW  01
04EB8:  ADDWFC 02,W
04EBA:  MOVWF  x64
04EBC:  MOVLW  01
04EBE:  ADDWF  x63,W
04EC0:  MOVWF  01
04EC2:  MOVLW  00
04EC4:  ADDWFC x64,W
04EC6:  MOVWF  03
04EC8:  MOVF   01,W
04ECA:  ADDLW  3E
04ECC:  MOVWF  01
04ECE:  MOVLW  01
04ED0:  ADDWFC 03,F
04ED2:  MOVF   01,W
04ED4:  ADDLW  28
04ED6:  MOVWF  FE9
04ED8:  MOVLW  00
04EDA:  ADDWFC 03,W
04EDC:  MOVWF  FEA
04EDE:  BCF    FD8.0
04EE0:  RLCF   FEF,W
04EE2:  CLRF   03
04EE4:  MOVLB  0
04EE6:  CALL   0172
04EEA:  TBLRD*+
04EEC:  MOVFF  FF5,03
04EF0:  MOVLB  5
04EF2:  ANDWF  x7F,F
04EF4:  MOVF   03,W
04EF6:  ANDWF  x80,F
04EF8:  MOVLB  6
04EFA:  CLRF   1B
04EFC:  BTFSC  FF2.7
04EFE:  BSF    1B.7
04F00:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fullup.needs_update=false; 
04F02:  CLRF   xDB
04F04:  MOVFF  661,6DA
04F08:  CLRF   xDD
04F0A:  MOVLW  2F
04F0C:  MOVWF  xDC
04F0E:  MOVLB  0
04F10:  CALL   041C
04F14:  BTFSC  1B.7
04F16:  BSF    FF2.7
04F18:  MOVF   01,W
04F1A:  ADDLW  4C
04F1C:  MOVLB  6
04F1E:  MOVWF  x63
04F20:  MOVLW  01
04F22:  ADDWFC 02,W
04F24:  MOVWF  x64
04F26:  MOVLW  01
04F28:  ADDWF  x63,W
04F2A:  MOVWF  01
04F2C:  MOVLW  00
04F2E:  ADDWFC x64,W
04F30:  MOVWF  03
04F32:  MOVF   01,W
04F34:  ADDLW  3E
04F36:  MOVWF  01
04F38:  MOVLW  01
04F3A:  ADDWFC 03,F
04F3C:  MOVF   01,W
04F3E:  ADDLW  1D
04F40:  MOVWF  FE9
04F42:  MOVLW  00
04F44:  ADDWFC 03,W
04F46:  MOVWF  FEA
04F48:  BCF    FEF.0
04F4A:  CLRF   1B
04F4C:  BTFSC  FF2.7
04F4E:  BSF    1B.7
04F50:  BCF    FF2.7
....................             }           
....................             if(((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update && ((((struct shutter)mydevices.myoutputs[x].device).state==idle)||(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown))) 
04F52:  CLRF   xDB
04F54:  MOVFF  661,6DA
04F58:  CLRF   xDD
04F5A:  MOVLW  2F
04F5C:  MOVWF  xDC
04F5E:  MOVLB  0
04F60:  CALL   041C
04F64:  BTFSC  1B.7
04F66:  BSF    FF2.7
04F68:  MOVF   01,W
04F6A:  ADDLW  4C
04F6C:  MOVLB  6
04F6E:  MOVWF  x63
04F70:  MOVLW  01
04F72:  ADDWFC 02,W
04F74:  MOVWF  x64
04F76:  MOVLW  01
04F78:  ADDWF  x63,W
04F7A:  MOVWF  01
04F7C:  MOVLW  00
04F7E:  ADDWFC x64,W
04F80:  MOVWF  03
04F82:  MOVF   01,W
04F84:  ADDLW  3E
04F86:  MOVWF  01
04F88:  MOVLW  01
04F8A:  ADDWFC 03,F
04F8C:  MOVF   01,W
04F8E:  ADDLW  27
04F90:  MOVWF  FE9
04F92:  MOVLW  00
04F94:  ADDWFC 03,W
04F96:  MOVWF  FEA
04F98:  BTFSS  FEF.0
04F9A:  BRA    51F6
04F9C:  CLRF   1B
04F9E:  BTFSC  FF2.7
04FA0:  BSF    1B.7
04FA2:  BCF    FF2.7
04FA4:  CLRF   xDB
04FA6:  MOVFF  661,6DA
04FAA:  CLRF   xDD
04FAC:  MOVLW  2F
04FAE:  MOVWF  xDC
04FB0:  MOVLB  0
04FB2:  CALL   041C
04FB6:  BTFSC  1B.7
04FB8:  BSF    FF2.7
04FBA:  MOVF   01,W
04FBC:  ADDLW  4C
04FBE:  MOVLB  6
04FC0:  MOVWF  x65
04FC2:  MOVLW  01
04FC4:  ADDWFC 02,W
04FC6:  MOVWF  x66
04FC8:  MOVLW  01
04FCA:  ADDWF  x65,W
04FCC:  MOVWF  01
04FCE:  MOVLW  00
04FD0:  ADDWFC x66,W
04FD2:  MOVWF  03
04FD4:  MOVF   01,W
04FD6:  ADDLW  3E
04FD8:  MOVWF  01
04FDA:  MOVLW  01
04FDC:  ADDWFC 03,F
04FDE:  MOVF   01,W
04FE0:  ADDLW  2D
04FE2:  MOVWF  FE9
04FE4:  MOVLW  00
04FE6:  ADDWFC 03,W
04FE8:  MOVWF  FEA
04FEA:  MOVF   FEF,W
04FEC:  SUBLW  04
04FEE:  BZ    5046
04FF0:  CLRF   1B
04FF2:  BTFSC  FF2.7
04FF4:  BSF    1B.7
04FF6:  BCF    FF2.7
04FF8:  CLRF   xDB
04FFA:  MOVFF  661,6DA
04FFE:  CLRF   xDD
05000:  MOVLW  2F
05002:  MOVWF  xDC
05004:  MOVLB  0
05006:  CALL   041C
0500A:  BTFSC  1B.7
0500C:  BSF    FF2.7
0500E:  MOVF   01,W
05010:  ADDLW  4C
05012:  MOVLB  6
05014:  MOVWF  x67
05016:  MOVLW  01
05018:  ADDWFC 02,W
0501A:  MOVWF  x68
0501C:  MOVLW  01
0501E:  ADDWF  x67,W
05020:  MOVWF  01
05022:  MOVLW  00
05024:  ADDWFC x68,W
05026:  MOVWF  03
05028:  MOVF   01,W
0502A:  ADDLW  3E
0502C:  MOVWF  01
0502E:  MOVLW  01
05030:  ADDWFC 03,F
05032:  MOVF   01,W
05034:  ADDLW  2D
05036:  MOVWF  FE9
05038:  MOVLW  00
0503A:  ADDWFC 03,W
0503C:  MOVWF  FEA
0503E:  MOVF   FEF,W
05040:  SUBLW  03
05042:  BTFSS  FD8.2
05044:  BRA    51F6
05046:  CLRF   1B
05048:  BTFSC  FF2.7
0504A:  BSF    1B.7
0504C:  BCF    FF2.7
....................             { 
....................                if(((struct shutter)mydevices.myoutputs[x].device).fulldown.value) 
0504E:  CLRF   xDB
05050:  MOVFF  661,6DA
05054:  CLRF   xDD
05056:  MOVLW  2F
05058:  MOVWF  xDC
0505A:  MOVLB  0
0505C:  CALL   041C
05060:  BTFSC  1B.7
05062:  BSF    FF2.7
05064:  MOVF   01,W
05066:  ADDLW  4C
05068:  MOVLB  6
0506A:  MOVWF  x63
0506C:  MOVLW  01
0506E:  ADDWFC 02,W
05070:  MOVWF  x64
05072:  MOVLW  01
05074:  ADDWF  x63,W
05076:  MOVWF  01
05078:  MOVLW  00
0507A:  ADDWFC x64,W
0507C:  MOVWF  03
0507E:  MOVF   01,W
05080:  ADDLW  3E
05082:  MOVWF  01
05084:  MOVLW  01
05086:  ADDWFC 03,F
05088:  MOVF   01,W
0508A:  ADDLW  26
0508C:  MOVWF  FE9
0508E:  MOVLW  00
05090:  ADDWFC 03,W
05092:  MOVWF  FEA
05094:  MOVF   FEF,F
05096:  BTFSC  FD8.2
05098:  BRA    51A6
0509A:  CLRF   1B
0509C:  BTFSC  FF2.7
0509E:  BSF    1B.7
050A0:  BCF    FF2.7
....................                { 
....................                    ((struct shutter)mydevices.myoutputs[x].device).internalCounter=0; 
050A2:  CLRF   xDB
050A4:  MOVFF  661,6DA
050A8:  CLRF   xDD
050AA:  MOVLW  2F
050AC:  MOVWF  xDC
050AE:  MOVLB  0
050B0:  CALL   041C
050B4:  BTFSC  1B.7
050B6:  BSF    FF2.7
050B8:  MOVF   01,W
050BA:  ADDLW  4C
050BC:  MOVLB  6
050BE:  MOVWF  x63
050C0:  MOVLW  01
050C2:  ADDWFC 02,W
050C4:  MOVWF  x64
050C6:  MOVLW  01
050C8:  ADDWF  x63,W
050CA:  MOVWF  01
050CC:  MOVLW  00
050CE:  ADDWFC x64,W
050D0:  MOVWF  03
050D2:  MOVF   01,W
050D4:  ADDLW  3E
050D6:  MOVWF  01
050D8:  MOVLW  01
050DA:  ADDWFC 03,F
050DC:  MOVF   01,W
050DE:  ADDLW  2A
050E0:  MOVWF  FE9
050E2:  MOVLW  00
050E4:  ADDWFC 03,W
050E6:  MOVWF  FEA
050E8:  CLRF   FEF
050EA:  CLRF   1B
050EC:  BTFSC  FF2.7
050EE:  BSF    1B.7
050F0:  BCF    FF2.7
....................                    ((struct shutter)mydevices.myoutputs[x].device).state=goingFullDown; 
050F2:  CLRF   xDB
050F4:  MOVFF  661,6DA
050F8:  CLRF   xDD
050FA:  MOVLW  2F
050FC:  MOVWF  xDC
050FE:  MOVLB  0
05100:  CALL   041C
05104:  BTFSC  1B.7
05106:  BSF    FF2.7
05108:  MOVF   01,W
0510A:  ADDLW  4C
0510C:  MOVLB  6
0510E:  MOVWF  x63
05110:  MOVLW  01
05112:  ADDWFC 02,W
05114:  MOVWF  x64
05116:  MOVLW  01
05118:  ADDWF  x63,W
0511A:  MOVWF  01
0511C:  MOVLW  00
0511E:  ADDWFC x64,W
05120:  MOVWF  03
05122:  MOVF   01,W
05124:  ADDLW  3E
05126:  MOVWF  01
05128:  MOVLW  01
0512A:  ADDWFC 03,F
0512C:  MOVF   01,W
0512E:  ADDLW  2D
05130:  MOVWF  FE9
05132:  MOVLW  00
05134:  ADDWFC 03,W
05136:  MOVWF  FEA
05138:  MOVLW  03
0513A:  MOVWF  FEF
0513C:  CLRF   1B
0513E:  BTFSC  FF2.7
05140:  BSF    1B.7
05142:  BCF    FF2.7
....................                    onoffsvalue=onoffsvalue & light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
05144:  CLRF   xDB
05146:  MOVFF  661,6DA
0514A:  CLRF   xDD
0514C:  MOVLW  2F
0514E:  MOVWF  xDC
05150:  MOVLB  0
05152:  CALL   041C
05156:  BTFSC  1B.7
05158:  BSF    FF2.7
0515A:  MOVF   01,W
0515C:  ADDLW  4C
0515E:  MOVLB  6
05160:  MOVWF  x63
05162:  MOVLW  01
05164:  ADDWFC 02,W
05166:  MOVWF  x64
05168:  MOVLW  01
0516A:  ADDWF  x63,W
0516C:  MOVWF  01
0516E:  MOVLW  00
05170:  ADDWFC x64,W
05172:  MOVWF  03
05174:  MOVF   01,W
05176:  ADDLW  3E
05178:  MOVWF  01
0517A:  MOVLW  01
0517C:  ADDWFC 03,F
0517E:  MOVF   01,W
05180:  ADDLW  29
05182:  MOVWF  FE9
05184:  MOVLW  00
05186:  ADDWFC 03,W
05188:  MOVWF  FEA
0518A:  BCF    FD8.0
0518C:  RLCF   FEF,W
0518E:  CLRF   03
05190:  MOVLB  0
05192:  CALL   0172
05196:  TBLRD*+
05198:  MOVFF  FF5,03
0519C:  MOVLB  5
0519E:  ANDWF  x7F,F
051A0:  MOVF   03,W
051A2:  ANDWF  x80,F
051A4:  MOVLB  6
051A6:  CLRF   1B
051A8:  BTFSC  FF2.7
051AA:  BSF    1B.7
051AC:  BCF    FF2.7
....................                } 
....................                ((struct shutter)mydevices.myoutputs[x].device).fulldown.needs_update=false; 
051AE:  CLRF   xDB
051B0:  MOVFF  661,6DA
051B4:  CLRF   xDD
051B6:  MOVLW  2F
051B8:  MOVWF  xDC
051BA:  MOVLB  0
051BC:  CALL   041C
051C0:  BTFSC  1B.7
051C2:  BSF    FF2.7
051C4:  MOVF   01,W
051C6:  ADDLW  4C
051C8:  MOVLB  6
051CA:  MOVWF  x63
051CC:  MOVLW  01
051CE:  ADDWFC 02,W
051D0:  MOVWF  x64
051D2:  MOVLW  01
051D4:  ADDWF  x63,W
051D6:  MOVWF  01
051D8:  MOVLW  00
051DA:  ADDWFC x64,W
051DC:  MOVWF  03
051DE:  MOVF   01,W
051E0:  ADDLW  3E
051E2:  MOVWF  01
051E4:  MOVLW  01
051E6:  ADDWFC 03,F
051E8:  MOVF   01,W
051EA:  ADDLW  27
051EC:  MOVWF  FE9
051EE:  MOVLW  00
051F0:  ADDWFC 03,W
051F2:  MOVWF  FEA
051F4:  BCF    FEF.0
....................             } 
....................             
....................             break; 
051F6:  MOVLB  0
051F8:  BRA    51FA
....................    } 
....................    } 
051FA:  MOVLB  6
051FC:  INCF   x61,F
051FE:  GOTO   3EB6
....................    if(update_dimmers) 
05202:  BTFSS  x62.0
05204:  BRA    520E
....................       org(); 
05206:  MOVLB  0
05208:  CALL   36CC
0520C:  MOVLB  6
.................... } 
0520E:  MOVLB  0
05210:  RETLW  00
....................  
.................... void dimmer_test() 
.................... { 
....................    mydevices.numberOfoutputs=1; 
....................    unsigned int dim_adr[8]={1,21,31,255,255,255,255,255}; 
....................   // unsigned int off_adr[8]={3,51,61,255,255,255,255,255}; 
....................   // unsigned int on_adr[8]={2,81,91,255,255,255,255,255}; 
....................    unsigned int timedon_adr[8]={4,81,91,255,255,255,255,255}; 
....................    unsigned int empty[8]={255,255,255,255,255,255,255,255}; 
....................    //dimmer_out_init(dim_adr,on_adr,off_adr,&mydevices.myoutputs[0],0); 
....................   // shutter_out_init(on_adr,empty,empty,empty,&mydevices.myoutputs[0],0,1,3,10); 
....................    unsigned int off_adr[8]={2,255,255,255,255,255,255,255}; 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    onOff_out_init(on_adr,off_adr,&mydevices.myoutputs[0],4); 
....................   //onOff_out_init(timedon_adr,off_adr,&mydevices.myoutputs[0],0); 
.................... } 
....................  
....................  
.................... #include "datapoints.c" 
.................... int1 array_contains(struct data_point_in* array,unsigned int value) 
.................... { 
....................    int x; 
....................    for (x = 0; x < 8; ++x) 
*
05878:  MOVLB  6
0587A:  CLRF   x74
0587C:  MOVF   x74,W
0587E:  SUBLW  07
05880:  BNC   58A0
....................    { 
....................       // printf ("array[ % d] = % u for value % u\n\r", x, ( (struct data_point_in *) array) - > adress[x], value); 
....................       // delay_ms (100) ; 
....................       if ( ( (struct data_point_in *) array)->adress[x] == value) return true; 
05882:  CLRF   03
05884:  MOVF   x74,W
05886:  ADDWF  x71,W
05888:  MOVWF  FE9
0588A:  MOVF   x72,W
0588C:  ADDWFC 03,W
0588E:  MOVWF  FEA
05890:  MOVF   x73,W
05892:  SUBWF  FEF,W
05894:  BNZ   589C
05896:  MOVLW  01
05898:  MOVWF  01
0589A:  BRA    58A4
....................    } 
0589C:  INCF   x74,F
0589E:  BRA    587C
....................  
....................    return false; 
058A0:  MOVLW  00
058A2:  MOVWF  01
.................... } 
058A4:  MOVLB  0
058A6:  RETLW  00
....................  
.................... void process_inpoints(unsigned int datapoint, unsigned int value)//processa os datapoints de entrada que estao associados a saidas reais 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfOutputs; ++x) 
058A8:  MOVLB  6
058AA:  CLRF   x6C
058AC:  MOVLB  1
058AE:  MOVF   x3F,W
058B0:  MOVLB  6
058B2:  SUBWF  x6C,W
058B4:  BTFSC  FD8.0
058B6:  GOTO   6296
058BA:  CLRF   1B
058BC:  BTFSC  FF2.7
058BE:  BSF    1B.7
058C0:  BCF    FF2.7
....................    { 
....................       switch (( (struct outputs) mydevices.myoutputs[x]) .type) 
....................       { 
058C2:  CLRF   xDB
058C4:  MOVFF  66C,6DA
058C8:  CLRF   xDD
058CA:  MOVLW  2F
058CC:  MOVWF  xDC
058CE:  MOVLB  0
058D0:  CALL   041C
058D4:  BTFSC  1B.7
058D6:  BSF    FF2.7
058D8:  MOVFF  02,03
058DC:  MOVF   01,W
058DE:  ADDLW  8A
058E0:  MOVWF  01
058E2:  MOVLW  02
058E4:  ADDWFC 03,F
058E6:  MOVFF  01,FE9
058EA:  MOVFF  03,FEA
058EE:  MOVF   FEF,W
058F0:  XORLW  65
058F2:  BZ    5904
058F4:  XORLW  01
058F6:  BTFSC  FD8.2
058F8:  BRA    5C30
058FA:  XORLW  02
058FC:  BTFSC  FD8.2
058FE:  BRA    5E4A
05900:  GOTO   628C
....................          case dimmer: 
05904:  CLRF   1B
05906:  BTFSC  FF2.7
05908:  BSF    1B.7
0590A:  BCF    FF2.7
....................          // printf ("process datapoint % d with value % d\n", datapoint, value); 
....................          if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .dim_value, datapoint)) 
0590C:  MOVLB  6
0590E:  CLRF   xDB
05910:  MOVFF  66C,6DA
05914:  CLRF   xDD
05916:  MOVLW  2F
05918:  MOVWF  xDC
0591A:  MOVLB  0
0591C:  CALL   041C
05920:  BTFSC  1B.7
05922:  BSF    FF2.7
05924:  MOVF   01,W
05926:  ADDLW  4C
05928:  MOVLB  6
0592A:  MOVWF  x6D
0592C:  MOVLW  01
0592E:  ADDWFC 02,W
05930:  MOVWF  x6E
05932:  MOVLW  01
05934:  ADDWF  x6D,W
05936:  MOVWF  01
05938:  MOVLW  00
0593A:  ADDWFC x6E,W
0593C:  MOVWF  03
0593E:  MOVF   01,W
05940:  ADDLW  3E
05942:  MOVWF  01
05944:  MOVLW  01
05946:  ADDWFC 03,F
05948:  MOVF   01,W
0594A:  ADDLW  14
0594C:  MOVWF  01
0594E:  MOVLW  00
05950:  ADDWFC 03,F
05952:  MOVFF  01,66F
05956:  MOVFF  03,670
0595A:  MOVFF  03,672
0595E:  MOVFF  01,671
05962:  MOVFF  66A,673
05966:  MOVLB  0
05968:  RCALL  5878
0596A:  MOVF   01,F
0596C:  BZ    5A16
0596E:  CLRF   1B
05970:  BTFSC  FF2.7
05972:  BSF    1B.7
05974:  BCF    FF2.7
....................          { 
....................           //  printf("DIM"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.value = value; 
05976:  MOVLB  6
05978:  CLRF   xDB
0597A:  MOVFF  66C,6DA
0597E:  CLRF   xDD
05980:  MOVLW  2F
05982:  MOVWF  xDC
05984:  MOVLB  0
05986:  CALL   041C
0598A:  BTFSC  1B.7
0598C:  BSF    FF2.7
0598E:  MOVF   01,W
05990:  ADDLW  4C
05992:  MOVLB  6
05994:  MOVWF  x6D
05996:  MOVLW  01
05998:  ADDWFC 02,W
0599A:  MOVWF  x6E
0599C:  MOVLW  01
0599E:  ADDWF  x6D,W
059A0:  MOVWF  01
059A2:  MOVLW  00
059A4:  ADDWFC x6E,W
059A6:  MOVWF  03
059A8:  MOVF   01,W
059AA:  ADDLW  3E
059AC:  MOVWF  01
059AE:  MOVLW  01
059B0:  ADDWFC 03,F
059B2:  MOVF   01,W
059B4:  ADDLW  1C
059B6:  MOVWF  FE9
059B8:  MOVLW  00
059BA:  ADDWFC 03,W
059BC:  MOVWF  FEA
059BE:  MOVFF  66B,FEF
059C2:  CLRF   1B
059C4:  BTFSC  FF2.7
059C6:  BSF    1B.7
059C8:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .dim_value.needs_update = true; 
059CA:  CLRF   xDB
059CC:  MOVFF  66C,6DA
059D0:  CLRF   xDD
059D2:  MOVLW  2F
059D4:  MOVWF  xDC
059D6:  MOVLB  0
059D8:  CALL   041C
059DC:  BTFSC  1B.7
059DE:  BSF    FF2.7
059E0:  MOVF   01,W
059E2:  ADDLW  4C
059E4:  MOVLB  6
059E6:  MOVWF  x6D
059E8:  MOVLW  01
059EA:  ADDWFC 02,W
059EC:  MOVWF  x6E
059EE:  MOVLW  01
059F0:  ADDWF  x6D,W
059F2:  MOVWF  01
059F4:  MOVLW  00
059F6:  ADDWFC x6E,W
059F8:  MOVWF  03
059FA:  MOVF   01,W
059FC:  ADDLW  3E
059FE:  MOVWF  01
05A00:  MOVLW  01
05A02:  ADDWFC 03,F
05A04:  MOVF   01,W
05A06:  ADDLW  1D
05A08:  MOVWF  FE9
05A0A:  MOVLW  00
05A0C:  ADDWFC 03,W
05A0E:  MOVWF  FEA
05A10:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .on, datapoint)) 
05A12:  BRA    5C2C
05A14:  MOVLB  0
05A16:  CLRF   1B
05A18:  BTFSC  FF2.7
05A1A:  BSF    1B.7
05A1C:  BCF    FF2.7
05A1E:  MOVLB  6
05A20:  CLRF   xDB
05A22:  MOVFF  66C,6DA
05A26:  CLRF   xDD
05A28:  MOVLW  2F
05A2A:  MOVWF  xDC
05A2C:  MOVLB  0
05A2E:  CALL   041C
05A32:  BTFSC  1B.7
05A34:  BSF    FF2.7
05A36:  MOVF   01,W
05A38:  ADDLW  4C
05A3A:  MOVLB  6
05A3C:  MOVWF  x6D
05A3E:  MOVLW  01
05A40:  ADDWFC 02,W
05A42:  MOVWF  x6E
05A44:  MOVLW  01
05A46:  ADDWF  x6D,W
05A48:  MOVWF  01
05A4A:  MOVLW  00
05A4C:  ADDWFC x6E,W
05A4E:  MOVWF  03
05A50:  MOVF   01,W
05A52:  ADDLW  3E
05A54:  MOVWF  01
05A56:  MOVLW  01
05A58:  ADDWFC 03,F
05A5A:  MOVFF  01,66F
05A5E:  MOVFF  03,670
05A62:  MOVFF  03,672
05A66:  MOVFF  01,671
05A6A:  MOVFF  66A,673
05A6E:  MOVLB  0
05A70:  RCALL  5878
05A72:  MOVF   01,F
05A74:  BZ    5B1E
05A76:  CLRF   1B
05A78:  BTFSC  FF2.7
05A7A:  BSF    1B.7
05A7C:  BCF    FF2.7
....................          { 
....................         // printf("DIM ON"); 
....................             ( (struct light) mydevices.myoutputs[x].device) .on.value = value; 
05A7E:  MOVLB  6
05A80:  CLRF   xDB
05A82:  MOVFF  66C,6DA
05A86:  CLRF   xDD
05A88:  MOVLW  2F
05A8A:  MOVWF  xDC
05A8C:  MOVLB  0
05A8E:  CALL   041C
05A92:  BTFSC  1B.7
05A94:  BSF    FF2.7
05A96:  MOVF   01,W
05A98:  ADDLW  4C
05A9A:  MOVLB  6
05A9C:  MOVWF  x6D
05A9E:  MOVLW  01
05AA0:  ADDWFC 02,W
05AA2:  MOVWF  x6E
05AA4:  MOVLW  01
05AA6:  ADDWF  x6D,W
05AA8:  MOVWF  01
05AAA:  MOVLW  00
05AAC:  ADDWFC x6E,W
05AAE:  MOVWF  03
05AB0:  MOVF   01,W
05AB2:  ADDLW  3E
05AB4:  MOVWF  01
05AB6:  MOVLW  01
05AB8:  ADDWFC 03,F
05ABA:  MOVF   01,W
05ABC:  ADDLW  08
05ABE:  MOVWF  FE9
05AC0:  MOVLW  00
05AC2:  ADDWFC 03,W
05AC4:  MOVWF  FEA
05AC6:  MOVFF  66B,FEF
05ACA:  CLRF   1B
05ACC:  BTFSC  FF2.7
05ACE:  BSF    1B.7
05AD0:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device) .on.needs_update = true; 
05AD2:  CLRF   xDB
05AD4:  MOVFF  66C,6DA
05AD8:  CLRF   xDD
05ADA:  MOVLW  2F
05ADC:  MOVWF  xDC
05ADE:  MOVLB  0
05AE0:  CALL   041C
05AE4:  BTFSC  1B.7
05AE6:  BSF    FF2.7
05AE8:  MOVF   01,W
05AEA:  ADDLW  4C
05AEC:  MOVLB  6
05AEE:  MOVWF  x6D
05AF0:  MOVLW  01
05AF2:  ADDWFC 02,W
05AF4:  MOVWF  x6E
05AF6:  MOVLW  01
05AF8:  ADDWF  x6D,W
05AFA:  MOVWF  01
05AFC:  MOVLW  00
05AFE:  ADDWFC x6E,W
05B00:  MOVWF  03
05B02:  MOVF   01,W
05B04:  ADDLW  3E
05B06:  MOVWF  01
05B08:  MOVLW  01
05B0A:  ADDWFC 03,F
05B0C:  MOVF   01,W
05B0E:  ADDLW  09
05B10:  MOVWF  FE9
05B12:  MOVLW  00
05B14:  ADDWFC 03,W
05B16:  MOVWF  FEA
05B18:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct light) mydevices.myoutputs[x].device) .off, datapoint)) 
05B1A:  BRA    5C2C
05B1C:  MOVLB  0
05B1E:  CLRF   1B
05B20:  BTFSC  FF2.7
05B22:  BSF    1B.7
05B24:  BCF    FF2.7
05B26:  MOVLB  6
05B28:  CLRF   xDB
05B2A:  MOVFF  66C,6DA
05B2E:  CLRF   xDD
05B30:  MOVLW  2F
05B32:  MOVWF  xDC
05B34:  MOVLB  0
05B36:  CALL   041C
05B3A:  BTFSC  1B.7
05B3C:  BSF    FF2.7
05B3E:  MOVF   01,W
05B40:  ADDLW  4C
05B42:  MOVLB  6
05B44:  MOVWF  x6D
05B46:  MOVLW  01
05B48:  ADDWFC 02,W
05B4A:  MOVWF  x6E
05B4C:  MOVLW  01
05B4E:  ADDWF  x6D,W
05B50:  MOVWF  01
05B52:  MOVLW  00
05B54:  ADDWFC x6E,W
05B56:  MOVWF  03
05B58:  MOVF   01,W
05B5A:  ADDLW  3E
05B5C:  MOVWF  01
05B5E:  MOVLW  01
05B60:  ADDWFC 03,F
05B62:  MOVF   01,W
05B64:  ADDLW  0A
05B66:  MOVWF  01
05B68:  MOVLW  00
05B6A:  ADDWFC 03,F
05B6C:  MOVFF  01,66F
05B70:  MOVFF  03,670
05B74:  MOVFF  03,672
05B78:  MOVFF  01,671
05B7C:  MOVFF  66A,673
05B80:  MOVLB  0
05B82:  RCALL  5878
05B84:  MOVF   01,F
05B86:  BZ    5C2E
05B88:  CLRF   1B
05B8A:  BTFSC  FF2.7
05B8C:  BSF    1B.7
05B8E:  BCF    FF2.7
....................          { 
....................             ( (struct light) mydevices.myoutputs[x].device).off.value = value; 
05B90:  MOVLB  6
05B92:  CLRF   xDB
05B94:  MOVFF  66C,6DA
05B98:  CLRF   xDD
05B9A:  MOVLW  2F
05B9C:  MOVWF  xDC
05B9E:  MOVLB  0
05BA0:  CALL   041C
05BA4:  BTFSC  1B.7
05BA6:  BSF    FF2.7
05BA8:  MOVF   01,W
05BAA:  ADDLW  4C
05BAC:  MOVLB  6
05BAE:  MOVWF  x6D
05BB0:  MOVLW  01
05BB2:  ADDWFC 02,W
05BB4:  MOVWF  x6E
05BB6:  MOVLW  01
05BB8:  ADDWF  x6D,W
05BBA:  MOVWF  01
05BBC:  MOVLW  00
05BBE:  ADDWFC x6E,W
05BC0:  MOVWF  03
05BC2:  MOVF   01,W
05BC4:  ADDLW  3E
05BC6:  MOVWF  01
05BC8:  MOVLW  01
05BCA:  ADDWFC 03,F
05BCC:  MOVF   01,W
05BCE:  ADDLW  12
05BD0:  MOVWF  FE9
05BD2:  MOVLW  00
05BD4:  ADDWFC 03,W
05BD6:  MOVWF  FEA
05BD8:  MOVFF  66B,FEF
05BDC:  CLRF   1B
05BDE:  BTFSC  FF2.7
05BE0:  BSF    1B.7
05BE2:  BCF    FF2.7
....................             ( (struct light) mydevices.myoutputs[x].device).off.needs_update = true; 
05BE4:  CLRF   xDB
05BE6:  MOVFF  66C,6DA
05BEA:  CLRF   xDD
05BEC:  MOVLW  2F
05BEE:  MOVWF  xDC
05BF0:  MOVLB  0
05BF2:  CALL   041C
05BF6:  BTFSC  1B.7
05BF8:  BSF    FF2.7
05BFA:  MOVF   01,W
05BFC:  ADDLW  4C
05BFE:  MOVLB  6
05C00:  MOVWF  x6D
05C02:  MOVLW  01
05C04:  ADDWFC 02,W
05C06:  MOVWF  x6E
05C08:  MOVLW  01
05C0A:  ADDWF  x6D,W
05C0C:  MOVWF  01
05C0E:  MOVLW  00
05C10:  ADDWFC x6E,W
05C12:  MOVWF  03
05C14:  MOVF   01,W
05C16:  ADDLW  3E
05C18:  MOVWF  01
05C1A:  MOVLW  01
05C1C:  ADDWFC 03,F
05C1E:  MOVF   01,W
05C20:  ADDLW  13
05C22:  MOVWF  FE9
05C24:  MOVLW  00
05C26:  ADDWFC 03,W
05C28:  MOVWF  FEA
05C2A:  BSF    FEF.0
05C2C:  MOVLB  0
....................          } 
....................  
....................          break; 
05C2E:  BRA    628E
....................          case _on_off: 
05C30:  CLRF   1B
05C32:  BTFSC  FF2.7
05C34:  BSF    1B.7
05C36:  BCF    FF2.7
....................          if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .on, datapoint)) 
05C38:  MOVLB  6
05C3A:  CLRF   xDB
05C3C:  MOVFF  66C,6DA
05C40:  CLRF   xDD
05C42:  MOVLW  2F
05C44:  MOVWF  xDC
05C46:  MOVLB  0
05C48:  CALL   041C
05C4C:  BTFSC  1B.7
05C4E:  BSF    FF2.7
05C50:  MOVF   01,W
05C52:  ADDLW  4C
05C54:  MOVLB  6
05C56:  MOVWF  x6D
05C58:  MOVLW  01
05C5A:  ADDWFC 02,W
05C5C:  MOVWF  x6E
05C5E:  MOVLW  01
05C60:  ADDWF  x6D,W
05C62:  MOVWF  01
05C64:  MOVLW  00
05C66:  ADDWFC x6E,W
05C68:  MOVWF  03
05C6A:  MOVF   01,W
05C6C:  ADDLW  3E
05C6E:  MOVWF  01
05C70:  MOVLW  01
05C72:  ADDWFC 03,F
05C74:  MOVFF  01,66F
05C78:  MOVFF  03,670
05C7C:  MOVFF  03,672
05C80:  MOVFF  01,671
05C84:  MOVFF  66A,673
05C88:  MOVLB  0
05C8A:  RCALL  5878
05C8C:  MOVF   01,F
05C8E:  BZ    5D38
05C90:  CLRF   1B
05C92:  BTFSC  FF2.7
05C94:  BSF    1B.7
05C96:  BCF    FF2.7
....................          { 
....................            // printf("OF %d\n\r",x); 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.value = value; 
05C98:  MOVLB  6
05C9A:  CLRF   xDB
05C9C:  MOVFF  66C,6DA
05CA0:  CLRF   xDD
05CA2:  MOVLW  2F
05CA4:  MOVWF  xDC
05CA6:  MOVLB  0
05CA8:  CALL   041C
05CAC:  BTFSC  1B.7
05CAE:  BSF    FF2.7
05CB0:  MOVF   01,W
05CB2:  ADDLW  4C
05CB4:  MOVLB  6
05CB6:  MOVWF  x6D
05CB8:  MOVLW  01
05CBA:  ADDWFC 02,W
05CBC:  MOVWF  x6E
05CBE:  MOVLW  01
05CC0:  ADDWF  x6D,W
05CC2:  MOVWF  01
05CC4:  MOVLW  00
05CC6:  ADDWFC x6E,W
05CC8:  MOVWF  03
05CCA:  MOVF   01,W
05CCC:  ADDLW  3E
05CCE:  MOVWF  01
05CD0:  MOVLW  01
05CD2:  ADDWFC 03,F
05CD4:  MOVF   01,W
05CD6:  ADDLW  08
05CD8:  MOVWF  FE9
05CDA:  MOVLW  00
05CDC:  ADDWFC 03,W
05CDE:  MOVWF  FEA
05CE0:  MOVFF  66B,FEF
05CE4:  CLRF   1B
05CE6:  BTFSC  FF2.7
05CE8:  BSF    1B.7
05CEA:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device).on.needs_update = true; 
05CEC:  CLRF   xDB
05CEE:  MOVFF  66C,6DA
05CF2:  CLRF   xDD
05CF4:  MOVLW  2F
05CF6:  MOVWF  xDC
05CF8:  MOVLB  0
05CFA:  CALL   041C
05CFE:  BTFSC  1B.7
05D00:  BSF    FF2.7
05D02:  MOVF   01,W
05D04:  ADDLW  4C
05D06:  MOVLB  6
05D08:  MOVWF  x6D
05D0A:  MOVLW  01
05D0C:  ADDWFC 02,W
05D0E:  MOVWF  x6E
05D10:  MOVLW  01
05D12:  ADDWF  x6D,W
05D14:  MOVWF  01
05D16:  MOVLW  00
05D18:  ADDWFC x6E,W
05D1A:  MOVWF  03
05D1C:  MOVF   01,W
05D1E:  ADDLW  3E
05D20:  MOVWF  01
05D22:  MOVLW  01
05D24:  ADDWFC 03,F
05D26:  MOVF   01,W
05D28:  ADDLW  09
05D2A:  MOVWF  FE9
05D2C:  MOVLW  00
05D2E:  ADDWFC 03,W
05D30:  MOVWF  FEA
05D32:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct oNoFF) mydevices.myoutputs[x].device) .off, datapoint)) 
05D34:  BRA    5E46
05D36:  MOVLB  0
05D38:  CLRF   1B
05D3A:  BTFSC  FF2.7
05D3C:  BSF    1B.7
05D3E:  BCF    FF2.7
05D40:  MOVLB  6
05D42:  CLRF   xDB
05D44:  MOVFF  66C,6DA
05D48:  CLRF   xDD
05D4A:  MOVLW  2F
05D4C:  MOVWF  xDC
05D4E:  MOVLB  0
05D50:  CALL   041C
05D54:  BTFSC  1B.7
05D56:  BSF    FF2.7
05D58:  MOVF   01,W
05D5A:  ADDLW  4C
05D5C:  MOVLB  6
05D5E:  MOVWF  x6D
05D60:  MOVLW  01
05D62:  ADDWFC 02,W
05D64:  MOVWF  x6E
05D66:  MOVLW  01
05D68:  ADDWF  x6D,W
05D6A:  MOVWF  01
05D6C:  MOVLW  00
05D6E:  ADDWFC x6E,W
05D70:  MOVWF  03
05D72:  MOVF   01,W
05D74:  ADDLW  3E
05D76:  MOVWF  01
05D78:  MOVLW  01
05D7A:  ADDWFC 03,F
05D7C:  MOVF   01,W
05D7E:  ADDLW  0A
05D80:  MOVWF  01
05D82:  MOVLW  00
05D84:  ADDWFC 03,F
05D86:  MOVFF  01,66F
05D8A:  MOVFF  03,670
05D8E:  MOVFF  03,672
05D92:  MOVFF  01,671
05D96:  MOVFF  66A,673
05D9A:  MOVLB  0
05D9C:  RCALL  5878
05D9E:  MOVF   01,F
05DA0:  BZ    5E48
05DA2:  CLRF   1B
05DA4:  BTFSC  FF2.7
05DA6:  BSF    1B.7
05DA8:  BCF    FF2.7
....................          { 
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.value = value; 
05DAA:  MOVLB  6
05DAC:  CLRF   xDB
05DAE:  MOVFF  66C,6DA
05DB2:  CLRF   xDD
05DB4:  MOVLW  2F
05DB6:  MOVWF  xDC
05DB8:  MOVLB  0
05DBA:  CALL   041C
05DBE:  BTFSC  1B.7
05DC0:  BSF    FF2.7
05DC2:  MOVF   01,W
05DC4:  ADDLW  4C
05DC6:  MOVLB  6
05DC8:  MOVWF  x6D
05DCA:  MOVLW  01
05DCC:  ADDWFC 02,W
05DCE:  MOVWF  x6E
05DD0:  MOVLW  01
05DD2:  ADDWF  x6D,W
05DD4:  MOVWF  01
05DD6:  MOVLW  00
05DD8:  ADDWFC x6E,W
05DDA:  MOVWF  03
05DDC:  MOVF   01,W
05DDE:  ADDLW  3E
05DE0:  MOVWF  01
05DE2:  MOVLW  01
05DE4:  ADDWFC 03,F
05DE6:  MOVF   01,W
05DE8:  ADDLW  12
05DEA:  MOVWF  FE9
05DEC:  MOVLW  00
05DEE:  ADDWFC 03,W
05DF0:  MOVWF  FEA
05DF2:  MOVFF  66B,FEF
05DF6:  CLRF   1B
05DF8:  BTFSC  FF2.7
05DFA:  BSF    1B.7
05DFC:  BCF    FF2.7
....................             ( (struct oNoFF) mydevices.myoutputs[x].device) .off.needs_update = true; 
05DFE:  CLRF   xDB
05E00:  MOVFF  66C,6DA
05E04:  CLRF   xDD
05E06:  MOVLW  2F
05E08:  MOVWF  xDC
05E0A:  MOVLB  0
05E0C:  CALL   041C
05E10:  BTFSC  1B.7
05E12:  BSF    FF2.7
05E14:  MOVF   01,W
05E16:  ADDLW  4C
05E18:  MOVLB  6
05E1A:  MOVWF  x6D
05E1C:  MOVLW  01
05E1E:  ADDWFC 02,W
05E20:  MOVWF  x6E
05E22:  MOVLW  01
05E24:  ADDWF  x6D,W
05E26:  MOVWF  01
05E28:  MOVLW  00
05E2A:  ADDWFC x6E,W
05E2C:  MOVWF  03
05E2E:  MOVF   01,W
05E30:  ADDLW  3E
05E32:  MOVWF  01
05E34:  MOVLW  01
05E36:  ADDWFC 03,F
05E38:  MOVF   01,W
05E3A:  ADDLW  13
05E3C:  MOVWF  FE9
05E3E:  MOVLW  00
05E40:  ADDWFC 03,W
05E42:  MOVWF  FEA
05E44:  BSF    FEF.0
05E46:  MOVLB  0
....................          } 
....................  
....................          break; 
05E48:  BRA    628E
....................          case shutter: 
05E4A:  CLRF   1B
05E4C:  BTFSC  FF2.7
05E4E:  BSF    1B.7
05E50:  BCF    FF2.7
....................          if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .up, datapoint)) 
05E52:  MOVLB  6
05E54:  CLRF   xDB
05E56:  MOVFF  66C,6DA
05E5A:  CLRF   xDD
05E5C:  MOVLW  2F
05E5E:  MOVWF  xDC
05E60:  MOVLB  0
05E62:  CALL   041C
05E66:  BTFSC  1B.7
05E68:  BSF    FF2.7
05E6A:  MOVF   01,W
05E6C:  ADDLW  4C
05E6E:  MOVLB  6
05E70:  MOVWF  x6D
05E72:  MOVLW  01
05E74:  ADDWFC 02,W
05E76:  MOVWF  x6E
05E78:  MOVLW  01
05E7A:  ADDWF  x6D,W
05E7C:  MOVWF  01
05E7E:  MOVLW  00
05E80:  ADDWFC x6E,W
05E82:  MOVWF  03
05E84:  MOVF   01,W
05E86:  ADDLW  3E
05E88:  MOVWF  01
05E8A:  MOVLW  01
05E8C:  ADDWFC 03,F
05E8E:  MOVFF  01,66F
05E92:  MOVFF  03,670
05E96:  MOVFF  03,672
05E9A:  MOVFF  01,671
05E9E:  MOVFF  66A,673
05EA2:  MOVLB  0
05EA4:  RCALL  5878
05EA6:  MOVF   01,F
05EA8:  BZ    5F52
05EAA:  CLRF   1B
05EAC:  BTFSC  FF2.7
05EAE:  BSF    1B.7
05EB0:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.value = value; 
05EB2:  MOVLB  6
05EB4:  CLRF   xDB
05EB6:  MOVFF  66C,6DA
05EBA:  CLRF   xDD
05EBC:  MOVLW  2F
05EBE:  MOVWF  xDC
05EC0:  MOVLB  0
05EC2:  CALL   041C
05EC6:  BTFSC  1B.7
05EC8:  BSF    FF2.7
05ECA:  MOVF   01,W
05ECC:  ADDLW  4C
05ECE:  MOVLB  6
05ED0:  MOVWF  x6D
05ED2:  MOVLW  01
05ED4:  ADDWFC 02,W
05ED6:  MOVWF  x6E
05ED8:  MOVLW  01
05EDA:  ADDWF  x6D,W
05EDC:  MOVWF  01
05EDE:  MOVLW  00
05EE0:  ADDWFC x6E,W
05EE2:  MOVWF  03
05EE4:  MOVF   01,W
05EE6:  ADDLW  3E
05EE8:  MOVWF  01
05EEA:  MOVLW  01
05EEC:  ADDWFC 03,F
05EEE:  MOVF   01,W
05EF0:  ADDLW  08
05EF2:  MOVWF  FE9
05EF4:  MOVLW  00
05EF6:  ADDWFC 03,W
05EF8:  MOVWF  FEA
05EFA:  MOVFF  66B,FEF
05EFE:  CLRF   1B
05F00:  BTFSC  FF2.7
05F02:  BSF    1B.7
05F04:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .up.needs_update = true; 
05F06:  CLRF   xDB
05F08:  MOVFF  66C,6DA
05F0C:  CLRF   xDD
05F0E:  MOVLW  2F
05F10:  MOVWF  xDC
05F12:  MOVLB  0
05F14:  CALL   041C
05F18:  BTFSC  1B.7
05F1A:  BSF    FF2.7
05F1C:  MOVF   01,W
05F1E:  ADDLW  4C
05F20:  MOVLB  6
05F22:  MOVWF  x6D
05F24:  MOVLW  01
05F26:  ADDWFC 02,W
05F28:  MOVWF  x6E
05F2A:  MOVLW  01
05F2C:  ADDWF  x6D,W
05F2E:  MOVWF  01
05F30:  MOVLW  00
05F32:  ADDWFC x6E,W
05F34:  MOVWF  03
05F36:  MOVF   01,W
05F38:  ADDLW  3E
05F3A:  MOVWF  01
05F3C:  MOVLW  01
05F3E:  ADDWFC 03,F
05F40:  MOVF   01,W
05F42:  ADDLW  09
05F44:  MOVWF  FE9
05F46:  MOVLW  00
05F48:  ADDWFC 03,W
05F4A:  MOVWF  FEA
05F4C:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .down, datapoint)) 
05F4E:  BRA    6288
05F50:  MOVLB  0
05F52:  CLRF   1B
05F54:  BTFSC  FF2.7
05F56:  BSF    1B.7
05F58:  BCF    FF2.7
05F5A:  MOVLB  6
05F5C:  CLRF   xDB
05F5E:  MOVFF  66C,6DA
05F62:  CLRF   xDD
05F64:  MOVLW  2F
05F66:  MOVWF  xDC
05F68:  MOVLB  0
05F6A:  CALL   041C
05F6E:  BTFSC  1B.7
05F70:  BSF    FF2.7
05F72:  MOVF   01,W
05F74:  ADDLW  4C
05F76:  MOVLB  6
05F78:  MOVWF  x6D
05F7A:  MOVLW  01
05F7C:  ADDWFC 02,W
05F7E:  MOVWF  x6E
05F80:  MOVLW  01
05F82:  ADDWF  x6D,W
05F84:  MOVWF  01
05F86:  MOVLW  00
05F88:  ADDWFC x6E,W
05F8A:  MOVWF  03
05F8C:  MOVF   01,W
05F8E:  ADDLW  3E
05F90:  MOVWF  01
05F92:  MOVLW  01
05F94:  ADDWFC 03,F
05F96:  MOVF   01,W
05F98:  ADDLW  0A
05F9A:  MOVWF  01
05F9C:  MOVLW  00
05F9E:  ADDWFC 03,F
05FA0:  MOVFF  01,66F
05FA4:  MOVFF  03,670
05FA8:  MOVFF  03,672
05FAC:  MOVFF  01,671
05FB0:  MOVFF  66A,673
05FB4:  MOVLB  0
05FB6:  RCALL  5878
05FB8:  MOVF   01,F
05FBA:  BZ    6064
05FBC:  CLRF   1B
05FBE:  BTFSC  FF2.7
05FC0:  BSF    1B.7
05FC2:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.value = value; 
05FC4:  MOVLB  6
05FC6:  CLRF   xDB
05FC8:  MOVFF  66C,6DA
05FCC:  CLRF   xDD
05FCE:  MOVLW  2F
05FD0:  MOVWF  xDC
05FD2:  MOVLB  0
05FD4:  CALL   041C
05FD8:  BTFSC  1B.7
05FDA:  BSF    FF2.7
05FDC:  MOVF   01,W
05FDE:  ADDLW  4C
05FE0:  MOVLB  6
05FE2:  MOVWF  x6D
05FE4:  MOVLW  01
05FE6:  ADDWFC 02,W
05FE8:  MOVWF  x6E
05FEA:  MOVLW  01
05FEC:  ADDWF  x6D,W
05FEE:  MOVWF  01
05FF0:  MOVLW  00
05FF2:  ADDWFC x6E,W
05FF4:  MOVWF  03
05FF6:  MOVF   01,W
05FF8:  ADDLW  3E
05FFA:  MOVWF  01
05FFC:  MOVLW  01
05FFE:  ADDWFC 03,F
06000:  MOVF   01,W
06002:  ADDLW  12
06004:  MOVWF  FE9
06006:  MOVLW  00
06008:  ADDWFC 03,W
0600A:  MOVWF  FEA
0600C:  MOVFF  66B,FEF
06010:  CLRF   1B
06012:  BTFSC  FF2.7
06014:  BSF    1B.7
06016:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .down.needs_update = true; 
06018:  CLRF   xDB
0601A:  MOVFF  66C,6DA
0601E:  CLRF   xDD
06020:  MOVLW  2F
06022:  MOVWF  xDC
06024:  MOVLB  0
06026:  CALL   041C
0602A:  BTFSC  1B.7
0602C:  BSF    FF2.7
0602E:  MOVF   01,W
06030:  ADDLW  4C
06032:  MOVLB  6
06034:  MOVWF  x6D
06036:  MOVLW  01
06038:  ADDWFC 02,W
0603A:  MOVWF  x6E
0603C:  MOVLW  01
0603E:  ADDWF  x6D,W
06040:  MOVWF  01
06042:  MOVLW  00
06044:  ADDWFC x6E,W
06046:  MOVWF  03
06048:  MOVF   01,W
0604A:  ADDLW  3E
0604C:  MOVWF  01
0604E:  MOVLW  01
06050:  ADDWFC 03,F
06052:  MOVF   01,W
06054:  ADDLW  13
06056:  MOVWF  FE9
06058:  MOVLW  00
0605A:  ADDWFC 03,W
0605C:  MOVWF  FEA
0605E:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fullup, datapoint)) 
06060:  BRA    6288
06062:  MOVLB  0
06064:  CLRF   1B
06066:  BTFSC  FF2.7
06068:  BSF    1B.7
0606A:  BCF    FF2.7
0606C:  MOVLB  6
0606E:  CLRF   xDB
06070:  MOVFF  66C,6DA
06074:  CLRF   xDD
06076:  MOVLW  2F
06078:  MOVWF  xDC
0607A:  MOVLB  0
0607C:  CALL   041C
06080:  BTFSC  1B.7
06082:  BSF    FF2.7
06084:  MOVF   01,W
06086:  ADDLW  4C
06088:  MOVLB  6
0608A:  MOVWF  x6D
0608C:  MOVLW  01
0608E:  ADDWFC 02,W
06090:  MOVWF  x6E
06092:  MOVLW  01
06094:  ADDWF  x6D,W
06096:  MOVWF  01
06098:  MOVLW  00
0609A:  ADDWFC x6E,W
0609C:  MOVWF  03
0609E:  MOVF   01,W
060A0:  ADDLW  3E
060A2:  MOVWF  01
060A4:  MOVLW  01
060A6:  ADDWFC 03,F
060A8:  MOVF   01,W
060AA:  ADDLW  14
060AC:  MOVWF  01
060AE:  MOVLW  00
060B0:  ADDWFC 03,F
060B2:  MOVFF  01,66F
060B6:  MOVFF  03,670
060BA:  MOVFF  03,672
060BE:  MOVFF  01,671
060C2:  MOVFF  66A,673
060C6:  MOVLB  0
060C8:  CALL   5878
060CC:  MOVF   01,F
060CE:  BZ    6178
060D0:  CLRF   1B
060D2:  BTFSC  FF2.7
060D4:  BSF    1B.7
060D6:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.value = value; 
060D8:  MOVLB  6
060DA:  CLRF   xDB
060DC:  MOVFF  66C,6DA
060E0:  CLRF   xDD
060E2:  MOVLW  2F
060E4:  MOVWF  xDC
060E6:  MOVLB  0
060E8:  CALL   041C
060EC:  BTFSC  1B.7
060EE:  BSF    FF2.7
060F0:  MOVF   01,W
060F2:  ADDLW  4C
060F4:  MOVLB  6
060F6:  MOVWF  x6D
060F8:  MOVLW  01
060FA:  ADDWFC 02,W
060FC:  MOVWF  x6E
060FE:  MOVLW  01
06100:  ADDWF  x6D,W
06102:  MOVWF  01
06104:  MOVLW  00
06106:  ADDWFC x6E,W
06108:  MOVWF  03
0610A:  MOVF   01,W
0610C:  ADDLW  3E
0610E:  MOVWF  01
06110:  MOVLW  01
06112:  ADDWFC 03,F
06114:  MOVF   01,W
06116:  ADDLW  1C
06118:  MOVWF  FE9
0611A:  MOVLW  00
0611C:  ADDWFC 03,W
0611E:  MOVWF  FEA
06120:  MOVFF  66B,FEF
06124:  CLRF   1B
06126:  BTFSC  FF2.7
06128:  BSF    1B.7
0612A:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fullup.needs_update = true; 
0612C:  CLRF   xDB
0612E:  MOVFF  66C,6DA
06132:  CLRF   xDD
06134:  MOVLW  2F
06136:  MOVWF  xDC
06138:  MOVLB  0
0613A:  CALL   041C
0613E:  BTFSC  1B.7
06140:  BSF    FF2.7
06142:  MOVF   01,W
06144:  ADDLW  4C
06146:  MOVLB  6
06148:  MOVWF  x6D
0614A:  MOVLW  01
0614C:  ADDWFC 02,W
0614E:  MOVWF  x6E
06150:  MOVLW  01
06152:  ADDWF  x6D,W
06154:  MOVWF  01
06156:  MOVLW  00
06158:  ADDWFC x6E,W
0615A:  MOVWF  03
0615C:  MOVF   01,W
0615E:  ADDLW  3E
06160:  MOVWF  01
06162:  MOVLW  01
06164:  ADDWFC 03,F
06166:  MOVF   01,W
06168:  ADDLW  1D
0616A:  MOVWF  FE9
0616C:  MOVLW  00
0616E:  ADDWFC 03,W
06170:  MOVWF  FEA
06172:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct shutter) mydevices.myoutputs[x].device) .fulldown, datapoint)) 
06174:  BRA    6288
06176:  MOVLB  0
06178:  CLRF   1B
0617A:  BTFSC  FF2.7
0617C:  BSF    1B.7
0617E:  BCF    FF2.7
06180:  MOVLB  6
06182:  CLRF   xDB
06184:  MOVFF  66C,6DA
06188:  CLRF   xDD
0618A:  MOVLW  2F
0618C:  MOVWF  xDC
0618E:  MOVLB  0
06190:  CALL   041C
06194:  BTFSC  1B.7
06196:  BSF    FF2.7
06198:  MOVF   01,W
0619A:  ADDLW  4C
0619C:  MOVLB  6
0619E:  MOVWF  x6D
061A0:  MOVLW  01
061A2:  ADDWFC 02,W
061A4:  MOVWF  x6E
061A6:  MOVLW  01
061A8:  ADDWF  x6D,W
061AA:  MOVWF  01
061AC:  MOVLW  00
061AE:  ADDWFC x6E,W
061B0:  MOVWF  03
061B2:  MOVF   01,W
061B4:  ADDLW  3E
061B6:  MOVWF  01
061B8:  MOVLW  01
061BA:  ADDWFC 03,F
061BC:  MOVF   01,W
061BE:  ADDLW  1E
061C0:  MOVWF  01
061C2:  MOVLW  00
061C4:  ADDWFC 03,F
061C6:  MOVFF  01,66F
061CA:  MOVFF  03,670
061CE:  MOVFF  03,672
061D2:  MOVFF  01,671
061D6:  MOVFF  66A,673
061DA:  MOVLB  0
061DC:  CALL   5878
061E0:  MOVF   01,F
061E2:  BZ    628A
061E4:  CLRF   1B
061E6:  BTFSC  FF2.7
061E8:  BSF    1B.7
061EA:  BCF    FF2.7
....................          { 
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.value = value; 
061EC:  MOVLB  6
061EE:  CLRF   xDB
061F0:  MOVFF  66C,6DA
061F4:  CLRF   xDD
061F6:  MOVLW  2F
061F8:  MOVWF  xDC
061FA:  MOVLB  0
061FC:  CALL   041C
06200:  BTFSC  1B.7
06202:  BSF    FF2.7
06204:  MOVF   01,W
06206:  ADDLW  4C
06208:  MOVLB  6
0620A:  MOVWF  x6D
0620C:  MOVLW  01
0620E:  ADDWFC 02,W
06210:  MOVWF  x6E
06212:  MOVLW  01
06214:  ADDWF  x6D,W
06216:  MOVWF  01
06218:  MOVLW  00
0621A:  ADDWFC x6E,W
0621C:  MOVWF  03
0621E:  MOVF   01,W
06220:  ADDLW  3E
06222:  MOVWF  01
06224:  MOVLW  01
06226:  ADDWFC 03,F
06228:  MOVF   01,W
0622A:  ADDLW  26
0622C:  MOVWF  FE9
0622E:  MOVLW  00
06230:  ADDWFC 03,W
06232:  MOVWF  FEA
06234:  MOVFF  66B,FEF
06238:  CLRF   1B
0623A:  BTFSC  FF2.7
0623C:  BSF    1B.7
0623E:  BCF    FF2.7
....................             ( (struct shutter) mydevices.myoutputs[x].device) .fulldown.needs_update = true; 
06240:  CLRF   xDB
06242:  MOVFF  66C,6DA
06246:  CLRF   xDD
06248:  MOVLW  2F
0624A:  MOVWF  xDC
0624C:  MOVLB  0
0624E:  CALL   041C
06252:  BTFSC  1B.7
06254:  BSF    FF2.7
06256:  MOVF   01,W
06258:  ADDLW  4C
0625A:  MOVLB  6
0625C:  MOVWF  x6D
0625E:  MOVLW  01
06260:  ADDWFC 02,W
06262:  MOVWF  x6E
06264:  MOVLW  01
06266:  ADDWF  x6D,W
06268:  MOVWF  01
0626A:  MOVLW  00
0626C:  ADDWFC x6E,W
0626E:  MOVWF  03
06270:  MOVF   01,W
06272:  ADDLW  3E
06274:  MOVWF  01
06276:  MOVLW  01
06278:  ADDWFC 03,F
0627A:  MOVF   01,W
0627C:  ADDLW  27
0627E:  MOVWF  FE9
06280:  MOVLW  00
06282:  ADDWFC 03,W
06284:  MOVWF  FEA
06286:  BSF    FEF.0
06288:  MOVLB  0
....................          } 
....................  
....................          break; 
0628A:  BRA    628E
....................          default: 
....................          break; 
0628C:  BRA    628E
....................       } 
....................    } 
0628E:  MOVLB  6
06290:  INCF   x6C,F
06292:  GOTO   58AC
....................     for (x = 0; x < mydevices.numberOfInputs; ++x)//special cases (timer 
06296:  CLRF   x6C
06298:  MOVLB  1
0629A:  MOVF   x3E,W
0629C:  MOVLB  6
0629E:  SUBWF  x6C,W
062A0:  BTFSC  FD8.0
062A2:  BRA    6516
062A4:  CLRF   1B
062A6:  BTFSC  FF2.7
062A8:  BSF    1B.7
062AA:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
062AC:  CLRF   xDB
062AE:  MOVFF  66C,6DA
062B2:  CLRF   xDD
062B4:  MOVLW  21
062B6:  MOVWF  xDC
062B8:  MOVLB  0
062BA:  CALL   041C
062BE:  BTFSC  1B.7
062C0:  BSF    FF2.7
062C2:  MOVFF  02,03
062C6:  MOVF   01,W
062C8:  ADDLW  40
062CA:  MOVWF  01
062CC:  MOVLW  01
062CE:  ADDWFC 03,F
062D0:  MOVFF  01,FE9
062D4:  MOVFF  03,FEA
062D8:  MOVF   FEF,W
062DA:  XORLW  03
062DC:  BZ    62E0
062DE:  BRA    6510
....................          
....................           
....................          case timer: 
....................           if(value==1) 
062E0:  MOVLB  6
062E2:  DECFSZ x6B,W
062E4:  BRA    650C
062E6:  CLRF   1B
062E8:  BTFSC  FF2.7
062EA:  BSF    1B.7
062EC:  BCF    FF2.7
....................           { 
....................          if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).start, datapoint)) 
062EE:  CLRF   xDB
062F0:  MOVFF  66C,6DA
062F4:  CLRF   xDD
062F6:  MOVLW  21
062F8:  MOVWF  xDC
062FA:  MOVLB  0
062FC:  CALL   041C
06300:  BTFSC  1B.7
06302:  BSF    FF2.7
06304:  MOVF   01,W
06306:  ADDLW  02
06308:  MOVLB  6
0630A:  MOVWF  x6D
0630C:  MOVLW  00
0630E:  ADDWFC 02,W
06310:  MOVWF  x6E
06312:  MOVLW  01
06314:  ADDWF  x6D,W
06316:  MOVWF  01
06318:  MOVLW  00
0631A:  ADDWFC x6E,W
0631C:  MOVWF  03
0631E:  MOVF   01,W
06320:  ADDLW  3E
06322:  MOVWF  01
06324:  MOVLW  01
06326:  ADDWFC 03,F
06328:  MOVF   01,W
0632A:  ADDLW  09
0632C:  MOVWF  01
0632E:  MOVLW  00
06330:  ADDWFC 03,F
06332:  MOVFF  01,66F
06336:  MOVFF  03,670
0633A:  MOVFF  03,672
0633E:  MOVFF  01,671
06342:  MOVFF  66A,673
06346:  MOVLB  0
06348:  CALL   5878
0634C:  MOVF   01,F
0634E:  BZ    63FA
06350:  CLRF   1B
06352:  BTFSC  FF2.7
06354:  BSF    1B.7
06356:  BCF    FF2.7
....................          {//printf("AKI1"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
06358:  MOVLB  6
0635A:  CLRF   xDB
0635C:  MOVFF  66C,6DA
06360:  CLRF   xDD
06362:  MOVLW  21
06364:  MOVWF  xDC
06366:  MOVLB  0
06368:  CALL   041C
0636C:  BTFSC  1B.7
0636E:  BSF    FF2.7
06370:  MOVF   01,W
06372:  ADDLW  02
06374:  MOVLB  6
06376:  MOVWF  x6D
06378:  MOVLW  00
0637A:  ADDWFC 02,W
0637C:  MOVWF  x6E
0637E:  MOVLW  01
06380:  ADDWF  x6D,W
06382:  MOVWF  01
06384:  MOVLW  00
06386:  ADDWFC x6E,W
06388:  MOVWF  03
0638A:  MOVF   01,W
0638C:  ADDLW  3E
0638E:  MOVWF  01
06390:  MOVLW  01
06392:  ADDWFC 03,F
06394:  MOVF   01,W
06396:  ADDLW  1D
06398:  MOVWF  FE9
0639A:  MOVLW  00
0639C:  ADDWFC 03,W
0639E:  MOVWF  FEA
063A0:  CLRF   FEC
063A2:  MOVF   FED,F
063A4:  CLRF   FEF
063A6:  CLRF   1B
063A8:  BTFSC  FF2.7
063AA:  BSF    1B.7
063AC:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=true; 
063AE:  CLRF   xDB
063B0:  MOVFF  66C,6DA
063B4:  CLRF   xDD
063B6:  MOVLW  21
063B8:  MOVWF  xDC
063BA:  MOVLB  0
063BC:  CALL   041C
063C0:  BTFSC  1B.7
063C2:  BSF    FF2.7
063C4:  MOVF   01,W
063C6:  ADDLW  02
063C8:  MOVLB  6
063CA:  MOVWF  x6D
063CC:  MOVLW  00
063CE:  ADDWFC 02,W
063D0:  MOVWF  x6E
063D2:  MOVLW  01
063D4:  ADDWF  x6D,W
063D6:  MOVWF  01
063D8:  MOVLW  00
063DA:  ADDWFC x6E,W
063DC:  MOVWF  03
063DE:  MOVF   01,W
063E0:  ADDLW  3E
063E2:  MOVWF  01
063E4:  MOVLW  01
063E6:  ADDWFC 03,F
063E8:  MOVF   01,W
063EA:  ADDLW  1F
063EC:  MOVWF  FE9
063EE:  MOVLW  00
063F0:  ADDWFC 03,W
063F2:  MOVWF  FEA
063F4:  BSF    FEF.0
....................          } 
....................  
....................          else if (array_contains ( & ( (struct timer) mydevices.myinputs[x].device).stop, datapoint)) 
063F6:  BRA    650C
063F8:  MOVLB  0
063FA:  CLRF   1B
063FC:  BTFSC  FF2.7
063FE:  BSF    1B.7
06400:  BCF    FF2.7
06402:  MOVLB  6
06404:  CLRF   xDB
06406:  MOVFF  66C,6DA
0640A:  CLRF   xDD
0640C:  MOVLW  21
0640E:  MOVWF  xDC
06410:  MOVLB  0
06412:  CALL   041C
06416:  BTFSC  1B.7
06418:  BSF    FF2.7
0641A:  MOVF   01,W
0641C:  ADDLW  02
0641E:  MOVLB  6
06420:  MOVWF  x6D
06422:  MOVLW  00
06424:  ADDWFC 02,W
06426:  MOVWF  x6E
06428:  MOVLW  01
0642A:  ADDWF  x6D,W
0642C:  MOVWF  01
0642E:  MOVLW  00
06430:  ADDWFC x6E,W
06432:  MOVWF  03
06434:  MOVF   01,W
06436:  ADDLW  3E
06438:  MOVWF  01
0643A:  MOVLW  01
0643C:  ADDWFC 03,F
0643E:  MOVF   01,W
06440:  ADDLW  13
06442:  MOVWF  01
06444:  MOVLW  00
06446:  ADDWFC 03,F
06448:  MOVFF  01,66F
0644C:  MOVFF  03,670
06450:  MOVFF  03,672
06454:  MOVFF  01,671
06458:  MOVFF  66A,673
0645C:  MOVLB  0
0645E:  CALL   5878
06462:  MOVF   01,F
06464:  BZ    650E
06466:  CLRF   1B
06468:  BTFSC  FF2.7
0646A:  BSF    1B.7
0646C:  BCF    FF2.7
....................          {//printf("AKI2"); 
....................             ( (struct timer) mydevices.myinputs[x].device).timer=0; 
0646E:  MOVLB  6
06470:  CLRF   xDB
06472:  MOVFF  66C,6DA
06476:  CLRF   xDD
06478:  MOVLW  21
0647A:  MOVWF  xDC
0647C:  MOVLB  0
0647E:  CALL   041C
06482:  BTFSC  1B.7
06484:  BSF    FF2.7
06486:  MOVF   01,W
06488:  ADDLW  02
0648A:  MOVLB  6
0648C:  MOVWF  x6D
0648E:  MOVLW  00
06490:  ADDWFC 02,W
06492:  MOVWF  x6E
06494:  MOVLW  01
06496:  ADDWF  x6D,W
06498:  MOVWF  01
0649A:  MOVLW  00
0649C:  ADDWFC x6E,W
0649E:  MOVWF  03
064A0:  MOVF   01,W
064A2:  ADDLW  3E
064A4:  MOVWF  01
064A6:  MOVLW  01
064A8:  ADDWFC 03,F
064AA:  MOVF   01,W
064AC:  ADDLW  1D
064AE:  MOVWF  FE9
064B0:  MOVLW  00
064B2:  ADDWFC 03,W
064B4:  MOVWF  FEA
064B6:  CLRF   FEC
064B8:  MOVF   FED,F
064BA:  CLRF   FEF
064BC:  CLRF   1B
064BE:  BTFSC  FF2.7
064C0:  BSF    1B.7
064C2:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device).active=false; 
064C4:  CLRF   xDB
064C6:  MOVFF  66C,6DA
064CA:  CLRF   xDD
064CC:  MOVLW  21
064CE:  MOVWF  xDC
064D0:  MOVLB  0
064D2:  CALL   041C
064D6:  BTFSC  1B.7
064D8:  BSF    FF2.7
064DA:  MOVF   01,W
064DC:  ADDLW  02
064DE:  MOVLB  6
064E0:  MOVWF  x6D
064E2:  MOVLW  00
064E4:  ADDWFC 02,W
064E6:  MOVWF  x6E
064E8:  MOVLW  01
064EA:  ADDWF  x6D,W
064EC:  MOVWF  01
064EE:  MOVLW  00
064F0:  ADDWFC x6E,W
064F2:  MOVWF  03
064F4:  MOVF   01,W
064F6:  ADDLW  3E
064F8:  MOVWF  01
064FA:  MOVLW  01
064FC:  ADDWFC 03,F
064FE:  MOVF   01,W
06500:  ADDLW  1F
06502:  MOVWF  FE9
06504:  MOVLW  00
06506:  ADDWFC 03,W
06508:  MOVWF  FEA
0650A:  BCF    FEF.0
0650C:  MOVLB  0
....................          } 
....................          } 
....................          break; 
0650E:  BRA    6510
....................       } 
....................    } 
06510:  MOVLB  6
06512:  INCF   x6C,F
06514:  BRA    6298
....................           
.................... } 
06516:  MOVLB  0
06518:  GOTO   6528 (RETURN)
....................  
.................... void process_outpoint_answer(unsigned int adress,unsigned int value) 
.................... {   
....................   /* disable_interrupts (GLOBAL) ; 
....................    delay_ms(100); 
....................    enable_interrupts (GLOBAL) ;*/ 
....................    process_inpoints (adress, value); //internal processing 
0651C:  MOVFF  668,66A
06520:  MOVFF  669,66B
06524:  GOTO   58A8
....................    //TODO CAN Sending of values 
.................... } 
06528:  RETLW  00
....................  
.................... void process_outpoints() 
.................... { 
....................    int x; 
....................    for (x = 0; x < mydevices.numberOfInputs; ++x) 
0652A:  MOVLB  6
0652C:  CLRF   x61
0652E:  MOVLB  1
06530:  MOVF   x3E,W
06532:  MOVLB  6
06534:  SUBWF  x61,W
06536:  BTFSC  FD8.0
06538:  GOTO   746C
0653C:  CLRF   1B
0653E:  BTFSC  FF2.7
06540:  BSF    1B.7
06542:  BCF    FF2.7
....................    { 
....................       switch (( (struct inputs) mydevices.myinputs[x]) .type) 
....................       { 
06544:  CLRF   xDB
06546:  MOVFF  661,6DA
0654A:  CLRF   xDD
0654C:  MOVLW  21
0654E:  MOVWF  xDC
06550:  MOVLB  0
06552:  CALL   041C
06556:  BTFSC  1B.7
06558:  BSF    FF2.7
0655A:  MOVFF  02,03
0655E:  MOVF   01,W
06560:  ADDLW  40
06562:  MOVWF  01
06564:  MOVLW  01
06566:  ADDWFC 03,F
06568:  MOVFF  01,FE9
0656C:  MOVFF  03,FEA
06570:  MOVF   FEF,W
06572:  BZ    658E
06574:  XORLW  02
06576:  BTFSC  FD8.2
06578:  BRA    6A7C
0657A:  XORLW  03
0657C:  BTFSC  FD8.2
0657E:  GOTO   6DC6
06582:  XORLW  02
06584:  BTFSC  FD8.2
06586:  GOTO   7112
0658A:  GOTO   7462
....................          case dimmer_switch: 
0658E:  CLRF   1B
06590:  BTFSC  FF2.7
06592:  BSF    1B.7
06594:  BCF    FF2.7
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update) 
06596:  MOVLB  6
06598:  CLRF   xDB
0659A:  MOVFF  661,6DA
0659E:  CLRF   xDD
065A0:  MOVLW  21
065A2:  MOVWF  xDC
065A4:  MOVLB  0
065A6:  CALL   041C
065AA:  BTFSC  1B.7
065AC:  BSF    FF2.7
065AE:  MOVF   01,W
065B0:  ADDLW  02
065B2:  MOVLB  6
065B4:  MOVWF  x62
065B6:  MOVLW  00
065B8:  ADDWFC 02,W
065BA:  MOVWF  x63
065BC:  MOVLW  01
065BE:  ADDWF  x62,W
065C0:  MOVWF  01
065C2:  MOVLW  00
065C4:  ADDWFC x63,W
065C6:  MOVWF  03
065C8:  MOVF   01,W
065CA:  ADDLW  3E
065CC:  MOVWF  01
065CE:  MOVLW  01
065D0:  ADDWFC 03,F
065D2:  MOVF   01,W
065D4:  ADDLW  02
065D6:  MOVWF  FE9
065D8:  MOVLW  00
065DA:  ADDWFC 03,W
065DC:  MOVWF  FEA
065DE:  BTFSS  FEF.0
065E0:  BRA    6730
065E2:  CLRF   1B
065E4:  BTFSC  FF2.7
065E6:  BSF    1B.7
065E8:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value); 
065EA:  CLRF   xDB
065EC:  MOVFF  661,6DA
065F0:  CLRF   xDD
065F2:  MOVLW  21
065F4:  MOVWF  xDC
065F6:  MOVLB  0
065F8:  CALL   041C
065FC:  BTFSC  1B.7
065FE:  BSF    FF2.7
06600:  MOVF   01,W
06602:  ADDLW  02
06604:  MOVLB  6
06606:  MOVWF  x62
06608:  MOVLW  00
0660A:  ADDWFC 02,W
0660C:  MOVWF  x63
0660E:  MOVLW  01
06610:  ADDWF  x62,W
06612:  MOVWF  01
06614:  MOVLW  00
06616:  ADDWFC x63,W
06618:  MOVWF  03
0661A:  MOVF   01,W
0661C:  ADDLW  3E
0661E:  MOVWF  01
06620:  MOVLW  01
06622:  ADDWFC 03,F
06624:  MOVFF  01,FE9
06628:  MOVFF  03,FEA
0662C:  MOVFF  FEF,664
06630:  CLRF   1B
06632:  BTFSC  FF2.7
06634:  BSF    1B.7
06636:  BCF    FF2.7
06638:  CLRF   xDB
0663A:  MOVFF  661,6DA
0663E:  CLRF   xDD
06640:  MOVLW  21
06642:  MOVWF  xDC
06644:  MOVLB  0
06646:  CALL   041C
0664A:  BTFSC  1B.7
0664C:  BSF    FF2.7
0664E:  MOVF   01,W
06650:  ADDLW  02
06652:  MOVLB  6
06654:  MOVWF  x65
06656:  MOVLW  00
06658:  ADDWFC 02,W
0665A:  MOVWF  x66
0665C:  MOVLW  01
0665E:  ADDWF  x65,W
06660:  MOVWF  01
06662:  MOVLW  00
06664:  ADDWFC x66,W
06666:  MOVWF  03
06668:  MOVF   01,W
0666A:  ADDLW  3E
0666C:  MOVWF  01
0666E:  MOVLW  01
06670:  ADDWFC 03,F
06672:  MOVF   01,W
06674:  ADDLW  01
06676:  MOVWF  FE9
06678:  MOVLW  00
0667A:  ADDWFC 03,W
0667C:  MOVWF  FEA
0667E:  MOVFF  FEF,667
06682:  MOVFF  664,668
06686:  MOVFF  667,669
0668A:  MOVLB  0
0668C:  RCALL  651C
0668E:  CLRF   1B
06690:  BTFSC  FF2.7
06692:  BSF    1B.7
06694:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.needs_update = false; 
06696:  MOVLB  6
06698:  CLRF   xDB
0669A:  MOVFF  661,6DA
0669E:  CLRF   xDD
066A0:  MOVLW  21
066A2:  MOVWF  xDC
066A4:  MOVLB  0
066A6:  CALL   041C
066AA:  BTFSC  1B.7
066AC:  BSF    FF2.7
066AE:  MOVF   01,W
066B0:  ADDLW  02
066B2:  MOVLB  6
066B4:  MOVWF  x62
066B6:  MOVLW  00
066B8:  ADDWFC 02,W
066BA:  MOVWF  x63
066BC:  MOVLW  01
066BE:  ADDWF  x62,W
066C0:  MOVWF  01
066C2:  MOVLW  00
066C4:  ADDWFC x63,W
066C6:  MOVWF  03
066C8:  MOVF   01,W
066CA:  ADDLW  3E
066CC:  MOVWF  01
066CE:  MOVLW  01
066D0:  ADDWFC 03,F
066D2:  MOVF   01,W
066D4:  ADDLW  02
066D6:  MOVWF  FE9
066D8:  MOVLW  00
066DA:  ADDWFC 03,W
066DC:  MOVWF  FEA
066DE:  BCF    FEF.0
066E0:  CLRF   1B
066E2:  BTFSC  FF2.7
066E4:  BSF    1B.7
066E6:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .dim_level.value = 0; 
066E8:  CLRF   xDB
066EA:  MOVFF  661,6DA
066EE:  CLRF   xDD
066F0:  MOVLW  21
066F2:  MOVWF  xDC
066F4:  MOVLB  0
066F6:  CALL   041C
066FA:  BTFSC  1B.7
066FC:  BSF    FF2.7
066FE:  MOVF   01,W
06700:  ADDLW  02
06702:  MOVLB  6
06704:  MOVWF  x62
06706:  MOVLW  00
06708:  ADDWFC 02,W
0670A:  MOVWF  x63
0670C:  MOVLW  01
0670E:  ADDWF  x62,W
06710:  MOVWF  01
06712:  MOVLW  00
06714:  ADDWFC x63,W
06716:  MOVWF  03
06718:  MOVF   01,W
0671A:  ADDLW  3E
0671C:  MOVWF  01
0671E:  MOVLW  01
06720:  ADDWFC 03,F
06722:  MOVF   01,W
06724:  ADDLW  01
06726:  MOVWF  FE9
06728:  MOVLW  00
0672A:  ADDWFC 03,W
0672C:  MOVWF  FEA
0672E:  CLRF   FEF
06730:  CLRF   1B
06732:  BTFSC  FF2.7
06734:  BSF    1B.7
06736:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update) 
06738:  CLRF   xDB
0673A:  MOVFF  661,6DA
0673E:  CLRF   xDD
06740:  MOVLW  21
06742:  MOVWF  xDC
06744:  MOVLB  0
06746:  CALL   041C
0674A:  BTFSC  1B.7
0674C:  BSF    FF2.7
0674E:  MOVF   01,W
06750:  ADDLW  02
06752:  MOVLB  6
06754:  MOVWF  x62
06756:  MOVLW  00
06758:  ADDWFC 02,W
0675A:  MOVWF  x63
0675C:  MOVLW  01
0675E:  ADDWF  x62,W
06760:  MOVWF  01
06762:  MOVLW  00
06764:  ADDWFC x63,W
06766:  MOVWF  03
06768:  MOVF   01,W
0676A:  ADDLW  3E
0676C:  MOVWF  01
0676E:  MOVLW  01
06770:  ADDWFC 03,F
06772:  MOVF   01,W
06774:  ADDLW  05
06776:  MOVWF  FE9
06778:  MOVLW  00
0677A:  ADDWFC 03,W
0677C:  MOVWF  FEA
0677E:  BTFSS  FEF.0
06780:  BRA    68D4
06782:  CLRF   1B
06784:  BTFSC  FF2.7
06786:  BSF    1B.7
06788:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .on.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value); 
0678A:  CLRF   xDB
0678C:  MOVFF  661,6DA
06790:  CLRF   xDD
06792:  MOVLW  21
06794:  MOVWF  xDC
06796:  MOVLB  0
06798:  CALL   041C
0679C:  BTFSC  1B.7
0679E:  BSF    FF2.7
067A0:  MOVF   01,W
067A2:  ADDLW  02
067A4:  MOVLB  6
067A6:  MOVWF  x62
067A8:  MOVLW  00
067AA:  ADDWFC 02,W
067AC:  MOVWF  x63
067AE:  MOVLW  01
067B0:  ADDWF  x62,W
067B2:  MOVWF  01
067B4:  MOVLW  00
067B6:  ADDWFC x63,W
067B8:  MOVWF  03
067BA:  MOVF   01,W
067BC:  ADDLW  3E
067BE:  MOVWF  01
067C0:  MOVLW  01
067C2:  ADDWFC 03,F
067C4:  MOVF   01,W
067C6:  ADDLW  03
067C8:  MOVWF  FE9
067CA:  MOVLW  00
067CC:  ADDWFC 03,W
067CE:  MOVWF  FEA
067D0:  MOVFF  FEF,664
067D4:  CLRF   1B
067D6:  BTFSC  FF2.7
067D8:  BSF    1B.7
067DA:  BCF    FF2.7
067DC:  CLRF   xDB
067DE:  MOVFF  661,6DA
067E2:  CLRF   xDD
067E4:  MOVLW  21
067E6:  MOVWF  xDC
067E8:  MOVLB  0
067EA:  CALL   041C
067EE:  BTFSC  1B.7
067F0:  BSF    FF2.7
067F2:  MOVF   01,W
067F4:  ADDLW  02
067F6:  MOVLB  6
067F8:  MOVWF  x65
067FA:  MOVLW  00
067FC:  ADDWFC 02,W
067FE:  MOVWF  x66
06800:  MOVLW  01
06802:  ADDWF  x65,W
06804:  MOVWF  01
06806:  MOVLW  00
06808:  ADDWFC x66,W
0680A:  MOVWF  03
0680C:  MOVF   01,W
0680E:  ADDLW  3E
06810:  MOVWF  01
06812:  MOVLW  01
06814:  ADDWFC 03,F
06816:  MOVF   01,W
06818:  ADDLW  04
0681A:  MOVWF  FE9
0681C:  MOVLW  00
0681E:  ADDWFC 03,W
06820:  MOVWF  FEA
06822:  MOVFF  FEF,667
06826:  MOVFF  664,668
0682A:  MOVFF  667,669
0682E:  MOVLB  0
06830:  RCALL  651C
06832:  CLRF   1B
06834:  BTFSC  FF2.7
06836:  BSF    1B.7
06838:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
0683A:  MOVLB  6
0683C:  CLRF   xDB
0683E:  MOVFF  661,6DA
06842:  CLRF   xDD
06844:  MOVLW  21
06846:  MOVWF  xDC
06848:  MOVLB  0
0684A:  CALL   041C
0684E:  BTFSC  1B.7
06850:  BSF    FF2.7
06852:  MOVF   01,W
06854:  ADDLW  02
06856:  MOVLB  6
06858:  MOVWF  x62
0685A:  MOVLW  00
0685C:  ADDWFC 02,W
0685E:  MOVWF  x63
06860:  MOVLW  01
06862:  ADDWF  x62,W
06864:  MOVWF  01
06866:  MOVLW  00
06868:  ADDWFC x63,W
0686A:  MOVWF  03
0686C:  MOVF   01,W
0686E:  ADDLW  3E
06870:  MOVWF  01
06872:  MOVLW  01
06874:  ADDWFC 03,F
06876:  MOVF   01,W
06878:  ADDLW  05
0687A:  MOVWF  FE9
0687C:  MOVLW  00
0687E:  ADDWFC 03,W
06880:  MOVWF  FEA
06882:  BCF    FEF.0
06884:  CLRF   1B
06886:  BTFSC  FF2.7
06888:  BSF    1B.7
0688A:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .on.value = 0; 
0688C:  CLRF   xDB
0688E:  MOVFF  661,6DA
06892:  CLRF   xDD
06894:  MOVLW  21
06896:  MOVWF  xDC
06898:  MOVLB  0
0689A:  CALL   041C
0689E:  BTFSC  1B.7
068A0:  BSF    FF2.7
068A2:  MOVF   01,W
068A4:  ADDLW  02
068A6:  MOVLB  6
068A8:  MOVWF  x62
068AA:  MOVLW  00
068AC:  ADDWFC 02,W
068AE:  MOVWF  x63
068B0:  MOVLW  01
068B2:  ADDWF  x62,W
068B4:  MOVWF  01
068B6:  MOVLW  00
068B8:  ADDWFC x63,W
068BA:  MOVWF  03
068BC:  MOVF   01,W
068BE:  ADDLW  3E
068C0:  MOVWF  01
068C2:  MOVLW  01
068C4:  ADDWFC 03,F
068C6:  MOVF   01,W
068C8:  ADDLW  04
068CA:  MOVWF  FE9
068CC:  MOVLW  00
068CE:  ADDWFC 03,W
068D0:  MOVWF  FEA
068D2:  CLRF   FEF
068D4:  CLRF   1B
068D6:  BTFSC  FF2.7
068D8:  BSF    1B.7
068DA:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update) 
068DC:  CLRF   xDB
068DE:  MOVFF  661,6DA
068E2:  CLRF   xDD
068E4:  MOVLW  21
068E6:  MOVWF  xDC
068E8:  MOVLB  0
068EA:  CALL   041C
068EE:  BTFSC  1B.7
068F0:  BSF    FF2.7
068F2:  MOVF   01,W
068F4:  ADDLW  02
068F6:  MOVLB  6
068F8:  MOVWF  x62
068FA:  MOVLW  00
068FC:  ADDWFC 02,W
068FE:  MOVWF  x63
06900:  MOVLW  01
06902:  ADDWF  x62,W
06904:  MOVWF  01
06906:  MOVLW  00
06908:  ADDWFC x63,W
0690A:  MOVWF  03
0690C:  MOVF   01,W
0690E:  ADDLW  3E
06910:  MOVWF  01
06912:  MOVLW  01
06914:  ADDWFC 03,F
06916:  MOVF   01,W
06918:  ADDLW  08
0691A:  MOVWF  FE9
0691C:  MOVLW  00
0691E:  ADDWFC 03,W
06920:  MOVWF  FEA
06922:  BTFSS  FEF.0
06924:  BRA    6A78
06926:  CLRF   1B
06928:  BTFSC  FF2.7
0692A:  BSF    1B.7
0692C:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct dimmer_switch) mydevices.myinputs[x].device) .off.adress, ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value); 
0692E:  CLRF   xDB
06930:  MOVFF  661,6DA
06934:  CLRF   xDD
06936:  MOVLW  21
06938:  MOVWF  xDC
0693A:  MOVLB  0
0693C:  CALL   041C
06940:  BTFSC  1B.7
06942:  BSF    FF2.7
06944:  MOVF   01,W
06946:  ADDLW  02
06948:  MOVLB  6
0694A:  MOVWF  x62
0694C:  MOVLW  00
0694E:  ADDWFC 02,W
06950:  MOVWF  x63
06952:  MOVLW  01
06954:  ADDWF  x62,W
06956:  MOVWF  01
06958:  MOVLW  00
0695A:  ADDWFC x63,W
0695C:  MOVWF  03
0695E:  MOVF   01,W
06960:  ADDLW  3E
06962:  MOVWF  01
06964:  MOVLW  01
06966:  ADDWFC 03,F
06968:  MOVF   01,W
0696A:  ADDLW  06
0696C:  MOVWF  FE9
0696E:  MOVLW  00
06970:  ADDWFC 03,W
06972:  MOVWF  FEA
06974:  MOVFF  FEF,664
06978:  CLRF   1B
0697A:  BTFSC  FF2.7
0697C:  BSF    1B.7
0697E:  BCF    FF2.7
06980:  CLRF   xDB
06982:  MOVFF  661,6DA
06986:  CLRF   xDD
06988:  MOVLW  21
0698A:  MOVWF  xDC
0698C:  MOVLB  0
0698E:  CALL   041C
06992:  BTFSC  1B.7
06994:  BSF    FF2.7
06996:  MOVF   01,W
06998:  ADDLW  02
0699A:  MOVLB  6
0699C:  MOVWF  x65
0699E:  MOVLW  00
069A0:  ADDWFC 02,W
069A2:  MOVWF  x66
069A4:  MOVLW  01
069A6:  ADDWF  x65,W
069A8:  MOVWF  01
069AA:  MOVLW  00
069AC:  ADDWFC x66,W
069AE:  MOVWF  03
069B0:  MOVF   01,W
069B2:  ADDLW  3E
069B4:  MOVWF  01
069B6:  MOVLW  01
069B8:  ADDWFC 03,F
069BA:  MOVF   01,W
069BC:  ADDLW  07
069BE:  MOVWF  FE9
069C0:  MOVLW  00
069C2:  ADDWFC 03,W
069C4:  MOVWF  FEA
069C6:  MOVFF  FEF,667
069CA:  MOVFF  664,668
069CE:  MOVFF  667,669
069D2:  MOVLB  0
069D4:  RCALL  651C
069D6:  CLRF   1B
069D8:  BTFSC  FF2.7
069DA:  BSF    1B.7
069DC:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
069DE:  MOVLB  6
069E0:  CLRF   xDB
069E2:  MOVFF  661,6DA
069E6:  CLRF   xDD
069E8:  MOVLW  21
069EA:  MOVWF  xDC
069EC:  MOVLB  0
069EE:  CALL   041C
069F2:  BTFSC  1B.7
069F4:  BSF    FF2.7
069F6:  MOVF   01,W
069F8:  ADDLW  02
069FA:  MOVLB  6
069FC:  MOVWF  x62
069FE:  MOVLW  00
06A00:  ADDWFC 02,W
06A02:  MOVWF  x63
06A04:  MOVLW  01
06A06:  ADDWF  x62,W
06A08:  MOVWF  01
06A0A:  MOVLW  00
06A0C:  ADDWFC x63,W
06A0E:  MOVWF  03
06A10:  MOVF   01,W
06A12:  ADDLW  3E
06A14:  MOVWF  01
06A16:  MOVLW  01
06A18:  ADDWFC 03,F
06A1A:  MOVF   01,W
06A1C:  ADDLW  08
06A1E:  MOVWF  FE9
06A20:  MOVLW  00
06A22:  ADDWFC 03,W
06A24:  MOVWF  FEA
06A26:  BCF    FEF.0
06A28:  CLRF   1B
06A2A:  BTFSC  FF2.7
06A2C:  BSF    1B.7
06A2E:  BCF    FF2.7
....................             ( (struct dimmer_switch) mydevices.myinputs[x].device) .off.value = 0; 
06A30:  CLRF   xDB
06A32:  MOVFF  661,6DA
06A36:  CLRF   xDD
06A38:  MOVLW  21
06A3A:  MOVWF  xDC
06A3C:  MOVLB  0
06A3E:  CALL   041C
06A42:  BTFSC  1B.7
06A44:  BSF    FF2.7
06A46:  MOVF   01,W
06A48:  ADDLW  02
06A4A:  MOVLB  6
06A4C:  MOVWF  x62
06A4E:  MOVLW  00
06A50:  ADDWFC 02,W
06A52:  MOVWF  x63
06A54:  MOVLW  01
06A56:  ADDWF  x62,W
06A58:  MOVWF  01
06A5A:  MOVLW  00
06A5C:  ADDWFC x63,W
06A5E:  MOVWF  03
06A60:  MOVF   01,W
06A62:  ADDLW  3E
06A64:  MOVWF  01
06A66:  MOVLW  01
06A68:  ADDWFC 03,F
06A6A:  MOVF   01,W
06A6C:  ADDLW  07
06A6E:  MOVWF  FE9
06A70:  MOVLW  00
06A72:  ADDWFC 03,W
06A74:  MOVWF  FEA
06A76:  CLRF   FEF
....................          } 
....................  
....................          break; 
06A78:  GOTO   7466
....................          case button_switch: 
06A7C:  CLRF   1B
06A7E:  BTFSC  FF2.7
06A80:  BSF    1B.7
06A82:  BCF    FF2.7
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update) 
06A84:  MOVLB  6
06A86:  CLRF   xDB
06A88:  MOVFF  661,6DA
06A8C:  CLRF   xDD
06A8E:  MOVLW  21
06A90:  MOVWF  xDC
06A92:  MOVLB  0
06A94:  CALL   041C
06A98:  BTFSC  1B.7
06A9A:  BSF    FF2.7
06A9C:  MOVF   01,W
06A9E:  ADDLW  02
06AA0:  MOVLB  6
06AA2:  MOVWF  x62
06AA4:  MOVLW  00
06AA6:  ADDWFC 02,W
06AA8:  MOVWF  x63
06AAA:  MOVLW  01
06AAC:  ADDWF  x62,W
06AAE:  MOVWF  01
06AB0:  MOVLW  00
06AB2:  ADDWFC x63,W
06AB4:  MOVWF  03
06AB6:  MOVF   01,W
06AB8:  ADDLW  3E
06ABA:  MOVWF  01
06ABC:  MOVLW  01
06ABE:  ADDWFC 03,F
06AC0:  MOVF   01,W
06AC2:  ADDLW  02
06AC4:  MOVWF  FE9
06AC6:  MOVLW  00
06AC8:  ADDWFC 03,W
06ACA:  MOVWF  FEA
06ACC:  BTFSS  FEF.0
06ACE:  BRA    6C1E
06AD0:  CLRF   1B
06AD2:  BTFSC  FF2.7
06AD4:  BSF    1B.7
06AD6:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .on.adress, ( (struct button_switch) mydevices.myinputs[x].device) .on.value); 
06AD8:  CLRF   xDB
06ADA:  MOVFF  661,6DA
06ADE:  CLRF   xDD
06AE0:  MOVLW  21
06AE2:  MOVWF  xDC
06AE4:  MOVLB  0
06AE6:  CALL   041C
06AEA:  BTFSC  1B.7
06AEC:  BSF    FF2.7
06AEE:  MOVF   01,W
06AF0:  ADDLW  02
06AF2:  MOVLB  6
06AF4:  MOVWF  x62
06AF6:  MOVLW  00
06AF8:  ADDWFC 02,W
06AFA:  MOVWF  x63
06AFC:  MOVLW  01
06AFE:  ADDWF  x62,W
06B00:  MOVWF  01
06B02:  MOVLW  00
06B04:  ADDWFC x63,W
06B06:  MOVWF  03
06B08:  MOVF   01,W
06B0A:  ADDLW  3E
06B0C:  MOVWF  01
06B0E:  MOVLW  01
06B10:  ADDWFC 03,F
06B12:  MOVFF  01,FE9
06B16:  MOVFF  03,FEA
06B1A:  MOVFF  FEF,664
06B1E:  CLRF   1B
06B20:  BTFSC  FF2.7
06B22:  BSF    1B.7
06B24:  BCF    FF2.7
06B26:  CLRF   xDB
06B28:  MOVFF  661,6DA
06B2C:  CLRF   xDD
06B2E:  MOVLW  21
06B30:  MOVWF  xDC
06B32:  MOVLB  0
06B34:  CALL   041C
06B38:  BTFSC  1B.7
06B3A:  BSF    FF2.7
06B3C:  MOVF   01,W
06B3E:  ADDLW  02
06B40:  MOVLB  6
06B42:  MOVWF  x65
06B44:  MOVLW  00
06B46:  ADDWFC 02,W
06B48:  MOVWF  x66
06B4A:  MOVLW  01
06B4C:  ADDWF  x65,W
06B4E:  MOVWF  01
06B50:  MOVLW  00
06B52:  ADDWFC x66,W
06B54:  MOVWF  03
06B56:  MOVF   01,W
06B58:  ADDLW  3E
06B5A:  MOVWF  01
06B5C:  MOVLW  01
06B5E:  ADDWFC 03,F
06B60:  MOVF   01,W
06B62:  ADDLW  01
06B64:  MOVWF  FE9
06B66:  MOVLW  00
06B68:  ADDWFC 03,W
06B6A:  MOVWF  FEA
06B6C:  MOVFF  FEF,667
06B70:  MOVFF  664,668
06B74:  MOVFF  667,669
06B78:  MOVLB  0
06B7A:  RCALL  651C
06B7C:  CLRF   1B
06B7E:  BTFSC  FF2.7
06B80:  BSF    1B.7
06B82:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06B84:  MOVLB  6
06B86:  CLRF   xDB
06B88:  MOVFF  661,6DA
06B8C:  CLRF   xDD
06B8E:  MOVLW  21
06B90:  MOVWF  xDC
06B92:  MOVLB  0
06B94:  CALL   041C
06B98:  BTFSC  1B.7
06B9A:  BSF    FF2.7
06B9C:  MOVF   01,W
06B9E:  ADDLW  02
06BA0:  MOVLB  6
06BA2:  MOVWF  x62
06BA4:  MOVLW  00
06BA6:  ADDWFC 02,W
06BA8:  MOVWF  x63
06BAA:  MOVLW  01
06BAC:  ADDWF  x62,W
06BAE:  MOVWF  01
06BB0:  MOVLW  00
06BB2:  ADDWFC x63,W
06BB4:  MOVWF  03
06BB6:  MOVF   01,W
06BB8:  ADDLW  3E
06BBA:  MOVWF  01
06BBC:  MOVLW  01
06BBE:  ADDWFC 03,F
06BC0:  MOVF   01,W
06BC2:  ADDLW  02
06BC4:  MOVWF  FE9
06BC6:  MOVLW  00
06BC8:  ADDWFC 03,W
06BCA:  MOVWF  FEA
06BCC:  BCF    FEF.0
06BCE:  CLRF   1B
06BD0:  BTFSC  FF2.7
06BD2:  BSF    1B.7
06BD4:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .on.value = 0; 
06BD6:  CLRF   xDB
06BD8:  MOVFF  661,6DA
06BDC:  CLRF   xDD
06BDE:  MOVLW  21
06BE0:  MOVWF  xDC
06BE2:  MOVLB  0
06BE4:  CALL   041C
06BE8:  BTFSC  1B.7
06BEA:  BSF    FF2.7
06BEC:  MOVF   01,W
06BEE:  ADDLW  02
06BF0:  MOVLB  6
06BF2:  MOVWF  x62
06BF4:  MOVLW  00
06BF6:  ADDWFC 02,W
06BF8:  MOVWF  x63
06BFA:  MOVLW  01
06BFC:  ADDWF  x62,W
06BFE:  MOVWF  01
06C00:  MOVLW  00
06C02:  ADDWFC x63,W
06C04:  MOVWF  03
06C06:  MOVF   01,W
06C08:  ADDLW  3E
06C0A:  MOVWF  01
06C0C:  MOVLW  01
06C0E:  ADDWFC 03,F
06C10:  MOVF   01,W
06C12:  ADDLW  01
06C14:  MOVWF  FE9
06C16:  MOVLW  00
06C18:  ADDWFC 03,W
06C1A:  MOVWF  FEA
06C1C:  CLRF   FEF
06C1E:  CLRF   1B
06C20:  BTFSC  FF2.7
06C22:  BSF    1B.7
06C24:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update) 
06C26:  CLRF   xDB
06C28:  MOVFF  661,6DA
06C2C:  CLRF   xDD
06C2E:  MOVLW  21
06C30:  MOVWF  xDC
06C32:  MOVLB  0
06C34:  CALL   041C
06C38:  BTFSC  1B.7
06C3A:  BSF    FF2.7
06C3C:  MOVF   01,W
06C3E:  ADDLW  02
06C40:  MOVLB  6
06C42:  MOVWF  x62
06C44:  MOVLW  00
06C46:  ADDWFC 02,W
06C48:  MOVWF  x63
06C4A:  MOVLW  01
06C4C:  ADDWF  x62,W
06C4E:  MOVWF  01
06C50:  MOVLW  00
06C52:  ADDWFC x63,W
06C54:  MOVWF  03
06C56:  MOVF   01,W
06C58:  ADDLW  3E
06C5A:  MOVWF  01
06C5C:  MOVLW  01
06C5E:  ADDWFC 03,F
06C60:  MOVF   01,W
06C62:  ADDLW  05
06C64:  MOVWF  FE9
06C66:  MOVLW  00
06C68:  ADDWFC 03,W
06C6A:  MOVWF  FEA
06C6C:  BTFSS  FEF.0
06C6E:  BRA    6DC4
06C70:  CLRF   1B
06C72:  BTFSC  FF2.7
06C74:  BSF    1B.7
06C76:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct button_switch) mydevices.myinputs[x].device) .off.adress, ( (struct button_switch) mydevices.myinputs[x].device) .off.value); 
06C78:  CLRF   xDB
06C7A:  MOVFF  661,6DA
06C7E:  CLRF   xDD
06C80:  MOVLW  21
06C82:  MOVWF  xDC
06C84:  MOVLB  0
06C86:  CALL   041C
06C8A:  BTFSC  1B.7
06C8C:  BSF    FF2.7
06C8E:  MOVF   01,W
06C90:  ADDLW  02
06C92:  MOVLB  6
06C94:  MOVWF  x62
06C96:  MOVLW  00
06C98:  ADDWFC 02,W
06C9A:  MOVWF  x63
06C9C:  MOVLW  01
06C9E:  ADDWF  x62,W
06CA0:  MOVWF  01
06CA2:  MOVLW  00
06CA4:  ADDWFC x63,W
06CA6:  MOVWF  03
06CA8:  MOVF   01,W
06CAA:  ADDLW  3E
06CAC:  MOVWF  01
06CAE:  MOVLW  01
06CB0:  ADDWFC 03,F
06CB2:  MOVF   01,W
06CB4:  ADDLW  03
06CB6:  MOVWF  FE9
06CB8:  MOVLW  00
06CBA:  ADDWFC 03,W
06CBC:  MOVWF  FEA
06CBE:  MOVFF  FEF,664
06CC2:  CLRF   1B
06CC4:  BTFSC  FF2.7
06CC6:  BSF    1B.7
06CC8:  BCF    FF2.7
06CCA:  CLRF   xDB
06CCC:  MOVFF  661,6DA
06CD0:  CLRF   xDD
06CD2:  MOVLW  21
06CD4:  MOVWF  xDC
06CD6:  MOVLB  0
06CD8:  CALL   041C
06CDC:  BTFSC  1B.7
06CDE:  BSF    FF2.7
06CE0:  MOVF   01,W
06CE2:  ADDLW  02
06CE4:  MOVLB  6
06CE6:  MOVWF  x65
06CE8:  MOVLW  00
06CEA:  ADDWFC 02,W
06CEC:  MOVWF  x66
06CEE:  MOVLW  01
06CF0:  ADDWF  x65,W
06CF2:  MOVWF  01
06CF4:  MOVLW  00
06CF6:  ADDWFC x66,W
06CF8:  MOVWF  03
06CFA:  MOVF   01,W
06CFC:  ADDLW  3E
06CFE:  MOVWF  01
06D00:  MOVLW  01
06D02:  ADDWFC 03,F
06D04:  MOVF   01,W
06D06:  ADDLW  04
06D08:  MOVWF  FE9
06D0A:  MOVLW  00
06D0C:  ADDWFC 03,W
06D0E:  MOVWF  FEA
06D10:  MOVFF  FEF,667
06D14:  MOVFF  664,668
06D18:  MOVFF  667,669
06D1C:  MOVLB  0
06D1E:  CALL   651C
06D22:  CLRF   1B
06D24:  BTFSC  FF2.7
06D26:  BSF    1B.7
06D28:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
06D2A:  MOVLB  6
06D2C:  CLRF   xDB
06D2E:  MOVFF  661,6DA
06D32:  CLRF   xDD
06D34:  MOVLW  21
06D36:  MOVWF  xDC
06D38:  MOVLB  0
06D3A:  CALL   041C
06D3E:  BTFSC  1B.7
06D40:  BSF    FF2.7
06D42:  MOVF   01,W
06D44:  ADDLW  02
06D46:  MOVLB  6
06D48:  MOVWF  x62
06D4A:  MOVLW  00
06D4C:  ADDWFC 02,W
06D4E:  MOVWF  x63
06D50:  MOVLW  01
06D52:  ADDWF  x62,W
06D54:  MOVWF  01
06D56:  MOVLW  00
06D58:  ADDWFC x63,W
06D5A:  MOVWF  03
06D5C:  MOVF   01,W
06D5E:  ADDLW  3E
06D60:  MOVWF  01
06D62:  MOVLW  01
06D64:  ADDWFC 03,F
06D66:  MOVF   01,W
06D68:  ADDLW  05
06D6A:  MOVWF  FE9
06D6C:  MOVLW  00
06D6E:  ADDWFC 03,W
06D70:  MOVWF  FEA
06D72:  BCF    FEF.0
06D74:  CLRF   1B
06D76:  BTFSC  FF2.7
06D78:  BSF    1B.7
06D7A:  BCF    FF2.7
....................             ( (struct button_switch) mydevices.myinputs[x].device) .off.value = 0; 
06D7C:  CLRF   xDB
06D7E:  MOVFF  661,6DA
06D82:  CLRF   xDD
06D84:  MOVLW  21
06D86:  MOVWF  xDC
06D88:  MOVLB  0
06D8A:  CALL   041C
06D8E:  BTFSC  1B.7
06D90:  BSF    FF2.7
06D92:  MOVF   01,W
06D94:  ADDLW  02
06D96:  MOVLB  6
06D98:  MOVWF  x62
06D9A:  MOVLW  00
06D9C:  ADDWFC 02,W
06D9E:  MOVWF  x63
06DA0:  MOVLW  01
06DA2:  ADDWF  x62,W
06DA4:  MOVWF  01
06DA6:  MOVLW  00
06DA8:  ADDWFC x63,W
06DAA:  MOVWF  03
06DAC:  MOVF   01,W
06DAE:  ADDLW  3E
06DB0:  MOVWF  01
06DB2:  MOVLW  01
06DB4:  ADDWFC 03,F
06DB6:  MOVF   01,W
06DB8:  ADDLW  04
06DBA:  MOVWF  FE9
06DBC:  MOVLW  00
06DBE:  ADDWFC 03,W
06DC0:  MOVWF  FEA
06DC2:  CLRF   FEF
....................          } 
....................  
....................          break; 
06DC4:  BRA    7466
....................          case on_off_switch: 
06DC6:  CLRF   1B
06DC8:  BTFSC  FF2.7
06DCA:  BSF    1B.7
06DCC:  BCF    FF2.7
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update) 
06DCE:  MOVLB  6
06DD0:  CLRF   xDB
06DD2:  MOVFF  661,6DA
06DD6:  CLRF   xDD
06DD8:  MOVLW  21
06DDA:  MOVWF  xDC
06DDC:  MOVLB  0
06DDE:  CALL   041C
06DE2:  BTFSC  1B.7
06DE4:  BSF    FF2.7
06DE6:  MOVF   01,W
06DE8:  ADDLW  02
06DEA:  MOVLB  6
06DEC:  MOVWF  x62
06DEE:  MOVLW  00
06DF0:  ADDWFC 02,W
06DF2:  MOVWF  x63
06DF4:  MOVLW  01
06DF6:  ADDWF  x62,W
06DF8:  MOVWF  01
06DFA:  MOVLW  00
06DFC:  ADDWFC x63,W
06DFE:  MOVWF  03
06E00:  MOVF   01,W
06E02:  ADDLW  3E
06E04:  MOVWF  01
06E06:  MOVLW  01
06E08:  ADDWFC 03,F
06E0A:  MOVF   01,W
06E0C:  ADDLW  02
06E0E:  MOVWF  FE9
06E10:  MOVLW  00
06E12:  ADDWFC 03,W
06E14:  MOVWF  FEA
06E16:  BTFSS  FEF.0
06E18:  BRA    6F6A
06E1A:  CLRF   1B
06E1C:  BTFSC  FF2.7
06E1E:  BSF    1B.7
06E20:  BCF    FF2.7
....................          { 
....................            // printf("on needs update"); 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .on.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value); 
06E22:  CLRF   xDB
06E24:  MOVFF  661,6DA
06E28:  CLRF   xDD
06E2A:  MOVLW  21
06E2C:  MOVWF  xDC
06E2E:  MOVLB  0
06E30:  CALL   041C
06E34:  BTFSC  1B.7
06E36:  BSF    FF2.7
06E38:  MOVF   01,W
06E3A:  ADDLW  02
06E3C:  MOVLB  6
06E3E:  MOVWF  x62
06E40:  MOVLW  00
06E42:  ADDWFC 02,W
06E44:  MOVWF  x63
06E46:  MOVLW  01
06E48:  ADDWF  x62,W
06E4A:  MOVWF  01
06E4C:  MOVLW  00
06E4E:  ADDWFC x63,W
06E50:  MOVWF  03
06E52:  MOVF   01,W
06E54:  ADDLW  3E
06E56:  MOVWF  01
06E58:  MOVLW  01
06E5A:  ADDWFC 03,F
06E5C:  MOVFF  01,FE9
06E60:  MOVFF  03,FEA
06E64:  MOVFF  FEF,664
06E68:  CLRF   1B
06E6A:  BTFSC  FF2.7
06E6C:  BSF    1B.7
06E6E:  BCF    FF2.7
06E70:  CLRF   xDB
06E72:  MOVFF  661,6DA
06E76:  CLRF   xDD
06E78:  MOVLW  21
06E7A:  MOVWF  xDC
06E7C:  MOVLB  0
06E7E:  CALL   041C
06E82:  BTFSC  1B.7
06E84:  BSF    FF2.7
06E86:  MOVF   01,W
06E88:  ADDLW  02
06E8A:  MOVLB  6
06E8C:  MOVWF  x65
06E8E:  MOVLW  00
06E90:  ADDWFC 02,W
06E92:  MOVWF  x66
06E94:  MOVLW  01
06E96:  ADDWF  x65,W
06E98:  MOVWF  01
06E9A:  MOVLW  00
06E9C:  ADDWFC x66,W
06E9E:  MOVWF  03
06EA0:  MOVF   01,W
06EA2:  ADDLW  3E
06EA4:  MOVWF  01
06EA6:  MOVLW  01
06EA8:  ADDWFC 03,F
06EAA:  MOVF   01,W
06EAC:  ADDLW  01
06EAE:  MOVWF  FE9
06EB0:  MOVLW  00
06EB2:  ADDWFC 03,W
06EB4:  MOVWF  FEA
06EB6:  MOVFF  FEF,667
06EBA:  MOVFF  664,668
06EBE:  MOVFF  667,669
06EC2:  MOVLB  0
06EC4:  CALL   651C
06EC8:  CLRF   1B
06ECA:  BTFSC  FF2.7
06ECC:  BSF    1B.7
06ECE:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.needs_update = false; 
06ED0:  MOVLB  6
06ED2:  CLRF   xDB
06ED4:  MOVFF  661,6DA
06ED8:  CLRF   xDD
06EDA:  MOVLW  21
06EDC:  MOVWF  xDC
06EDE:  MOVLB  0
06EE0:  CALL   041C
06EE4:  BTFSC  1B.7
06EE6:  BSF    FF2.7
06EE8:  MOVF   01,W
06EEA:  ADDLW  02
06EEC:  MOVLB  6
06EEE:  MOVWF  x62
06EF0:  MOVLW  00
06EF2:  ADDWFC 02,W
06EF4:  MOVWF  x63
06EF6:  MOVLW  01
06EF8:  ADDWF  x62,W
06EFA:  MOVWF  01
06EFC:  MOVLW  00
06EFE:  ADDWFC x63,W
06F00:  MOVWF  03
06F02:  MOVF   01,W
06F04:  ADDLW  3E
06F06:  MOVWF  01
06F08:  MOVLW  01
06F0A:  ADDWFC 03,F
06F0C:  MOVF   01,W
06F0E:  ADDLW  02
06F10:  MOVWF  FE9
06F12:  MOVLW  00
06F14:  ADDWFC 03,W
06F16:  MOVWF  FEA
06F18:  BCF    FEF.0
06F1A:  CLRF   1B
06F1C:  BTFSC  FF2.7
06F1E:  BSF    1B.7
06F20:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .on.value = 0; 
06F22:  CLRF   xDB
06F24:  MOVFF  661,6DA
06F28:  CLRF   xDD
06F2A:  MOVLW  21
06F2C:  MOVWF  xDC
06F2E:  MOVLB  0
06F30:  CALL   041C
06F34:  BTFSC  1B.7
06F36:  BSF    FF2.7
06F38:  MOVF   01,W
06F3A:  ADDLW  02
06F3C:  MOVLB  6
06F3E:  MOVWF  x62
06F40:  MOVLW  00
06F42:  ADDWFC 02,W
06F44:  MOVWF  x63
06F46:  MOVLW  01
06F48:  ADDWF  x62,W
06F4A:  MOVWF  01
06F4C:  MOVLW  00
06F4E:  ADDWFC x63,W
06F50:  MOVWF  03
06F52:  MOVF   01,W
06F54:  ADDLW  3E
06F56:  MOVWF  01
06F58:  MOVLW  01
06F5A:  ADDWFC 03,F
06F5C:  MOVF   01,W
06F5E:  ADDLW  01
06F60:  MOVWF  FE9
06F62:  MOVLW  00
06F64:  ADDWFC 03,W
06F66:  MOVWF  FEA
06F68:  CLRF   FEF
06F6A:  CLRF   1B
06F6C:  BTFSC  FF2.7
06F6E:  BSF    1B.7
06F70:  BCF    FF2.7
....................          } 
....................  
....................          if (( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update) 
06F72:  CLRF   xDB
06F74:  MOVFF  661,6DA
06F78:  CLRF   xDD
06F7A:  MOVLW  21
06F7C:  MOVWF  xDC
06F7E:  MOVLB  0
06F80:  CALL   041C
06F84:  BTFSC  1B.7
06F86:  BSF    FF2.7
06F88:  MOVF   01,W
06F8A:  ADDLW  02
06F8C:  MOVLB  6
06F8E:  MOVWF  x62
06F90:  MOVLW  00
06F92:  ADDWFC 02,W
06F94:  MOVWF  x63
06F96:  MOVLW  01
06F98:  ADDWF  x62,W
06F9A:  MOVWF  01
06F9C:  MOVLW  00
06F9E:  ADDWFC x63,W
06FA0:  MOVWF  03
06FA2:  MOVF   01,W
06FA4:  ADDLW  3E
06FA6:  MOVWF  01
06FA8:  MOVLW  01
06FAA:  ADDWFC 03,F
06FAC:  MOVF   01,W
06FAE:  ADDLW  05
06FB0:  MOVWF  FE9
06FB2:  MOVLW  00
06FB4:  ADDWFC 03,W
06FB6:  MOVWF  FEA
06FB8:  BTFSS  FEF.0
06FBA:  BRA    7110
06FBC:  CLRF   1B
06FBE:  BTFSC  FF2.7
06FC0:  BSF    1B.7
06FC2:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct on_off_switch) mydevices.myinputs[x].device) .off.adress, ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value); 
06FC4:  CLRF   xDB
06FC6:  MOVFF  661,6DA
06FCA:  CLRF   xDD
06FCC:  MOVLW  21
06FCE:  MOVWF  xDC
06FD0:  MOVLB  0
06FD2:  CALL   041C
06FD6:  BTFSC  1B.7
06FD8:  BSF    FF2.7
06FDA:  MOVF   01,W
06FDC:  ADDLW  02
06FDE:  MOVLB  6
06FE0:  MOVWF  x62
06FE2:  MOVLW  00
06FE4:  ADDWFC 02,W
06FE6:  MOVWF  x63
06FE8:  MOVLW  01
06FEA:  ADDWF  x62,W
06FEC:  MOVWF  01
06FEE:  MOVLW  00
06FF0:  ADDWFC x63,W
06FF2:  MOVWF  03
06FF4:  MOVF   01,W
06FF6:  ADDLW  3E
06FF8:  MOVWF  01
06FFA:  MOVLW  01
06FFC:  ADDWFC 03,F
06FFE:  MOVF   01,W
07000:  ADDLW  03
07002:  MOVWF  FE9
07004:  MOVLW  00
07006:  ADDWFC 03,W
07008:  MOVWF  FEA
0700A:  MOVFF  FEF,664
0700E:  CLRF   1B
07010:  BTFSC  FF2.7
07012:  BSF    1B.7
07014:  BCF    FF2.7
07016:  CLRF   xDB
07018:  MOVFF  661,6DA
0701C:  CLRF   xDD
0701E:  MOVLW  21
07020:  MOVWF  xDC
07022:  MOVLB  0
07024:  CALL   041C
07028:  BTFSC  1B.7
0702A:  BSF    FF2.7
0702C:  MOVF   01,W
0702E:  ADDLW  02
07030:  MOVLB  6
07032:  MOVWF  x65
07034:  MOVLW  00
07036:  ADDWFC 02,W
07038:  MOVWF  x66
0703A:  MOVLW  01
0703C:  ADDWF  x65,W
0703E:  MOVWF  01
07040:  MOVLW  00
07042:  ADDWFC x66,W
07044:  MOVWF  03
07046:  MOVF   01,W
07048:  ADDLW  3E
0704A:  MOVWF  01
0704C:  MOVLW  01
0704E:  ADDWFC 03,F
07050:  MOVF   01,W
07052:  ADDLW  04
07054:  MOVWF  FE9
07056:  MOVLW  00
07058:  ADDWFC 03,W
0705A:  MOVWF  FEA
0705C:  MOVFF  FEF,667
07060:  MOVFF  664,668
07064:  MOVFF  667,669
07068:  MOVLB  0
0706A:  CALL   651C
0706E:  CLRF   1B
07070:  BTFSC  FF2.7
07072:  BSF    1B.7
07074:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.needs_update = false; 
07076:  MOVLB  6
07078:  CLRF   xDB
0707A:  MOVFF  661,6DA
0707E:  CLRF   xDD
07080:  MOVLW  21
07082:  MOVWF  xDC
07084:  MOVLB  0
07086:  CALL   041C
0708A:  BTFSC  1B.7
0708C:  BSF    FF2.7
0708E:  MOVF   01,W
07090:  ADDLW  02
07092:  MOVLB  6
07094:  MOVWF  x62
07096:  MOVLW  00
07098:  ADDWFC 02,W
0709A:  MOVWF  x63
0709C:  MOVLW  01
0709E:  ADDWF  x62,W
070A0:  MOVWF  01
070A2:  MOVLW  00
070A4:  ADDWFC x63,W
070A6:  MOVWF  03
070A8:  MOVF   01,W
070AA:  ADDLW  3E
070AC:  MOVWF  01
070AE:  MOVLW  01
070B0:  ADDWFC 03,F
070B2:  MOVF   01,W
070B4:  ADDLW  05
070B6:  MOVWF  FE9
070B8:  MOVLW  00
070BA:  ADDWFC 03,W
070BC:  MOVWF  FEA
070BE:  BCF    FEF.0
070C0:  CLRF   1B
070C2:  BTFSC  FF2.7
070C4:  BSF    1B.7
070C6:  BCF    FF2.7
....................             ( (struct on_off_switch) mydevices.myinputs[x].device) .off.value = 0; 
070C8:  CLRF   xDB
070CA:  MOVFF  661,6DA
070CE:  CLRF   xDD
070D0:  MOVLW  21
070D2:  MOVWF  xDC
070D4:  MOVLB  0
070D6:  CALL   041C
070DA:  BTFSC  1B.7
070DC:  BSF    FF2.7
070DE:  MOVF   01,W
070E0:  ADDLW  02
070E2:  MOVLB  6
070E4:  MOVWF  x62
070E6:  MOVLW  00
070E8:  ADDWFC 02,W
070EA:  MOVWF  x63
070EC:  MOVLW  01
070EE:  ADDWF  x62,W
070F0:  MOVWF  01
070F2:  MOVLW  00
070F4:  ADDWFC x63,W
070F6:  MOVWF  03
070F8:  MOVF   01,W
070FA:  ADDLW  3E
070FC:  MOVWF  01
070FE:  MOVLW  01
07100:  ADDWFC 03,F
07102:  MOVF   01,W
07104:  ADDLW  04
07106:  MOVWF  FE9
07108:  MOVLW  00
0710A:  ADDWFC 03,W
0710C:  MOVWF  FEA
0710E:  CLRF   FEF
....................          } 
....................  
....................          break; 
07110:  BRA    7466
....................          case timer: 
07112:  CLRF   1B
07114:  BTFSC  FF2.7
07116:  BSF    1B.7
07118:  BCF    FF2.7
....................           if (( (struct timer) mydevices.myinputs[x].device).on.needs_update) 
0711A:  MOVLB  6
0711C:  CLRF   xDB
0711E:  MOVFF  661,6DA
07122:  CLRF   xDD
07124:  MOVLW  21
07126:  MOVWF  xDC
07128:  MOVLB  0
0712A:  CALL   041C
0712E:  BTFSC  1B.7
07130:  BSF    FF2.7
07132:  MOVF   01,W
07134:  ADDLW  02
07136:  MOVLB  6
07138:  MOVWF  x62
0713A:  MOVLW  00
0713C:  ADDWFC 02,W
0713E:  MOVWF  x63
07140:  MOVLW  01
07142:  ADDWF  x62,W
07144:  MOVWF  01
07146:  MOVLW  00
07148:  ADDWFC x63,W
0714A:  MOVWF  03
0714C:  MOVF   01,W
0714E:  ADDLW  3E
07150:  MOVWF  01
07152:  MOVLW  01
07154:  ADDWFC 03,F
07156:  MOVF   01,W
07158:  ADDLW  05
0715A:  MOVWF  FE9
0715C:  MOVLW  00
0715E:  ADDWFC 03,W
07160:  MOVWF  FEA
07162:  BTFSS  FEF.0
07164:  BRA    72BA
07166:  CLRF   1B
07168:  BTFSC  FF2.7
0716A:  BSF    1B.7
0716C:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device).on.adress, ( (struct timer) mydevices.myinputs[x].device) .on.value); 
0716E:  CLRF   xDB
07170:  MOVFF  661,6DA
07174:  CLRF   xDD
07176:  MOVLW  21
07178:  MOVWF  xDC
0717A:  MOVLB  0
0717C:  CALL   041C
07180:  BTFSC  1B.7
07182:  BSF    FF2.7
07184:  MOVF   01,W
07186:  ADDLW  02
07188:  MOVLB  6
0718A:  MOVWF  x62
0718C:  MOVLW  00
0718E:  ADDWFC 02,W
07190:  MOVWF  x63
07192:  MOVLW  01
07194:  ADDWF  x62,W
07196:  MOVWF  01
07198:  MOVLW  00
0719A:  ADDWFC x63,W
0719C:  MOVWF  03
0719E:  MOVF   01,W
071A0:  ADDLW  3E
071A2:  MOVWF  01
071A4:  MOVLW  01
071A6:  ADDWFC 03,F
071A8:  MOVF   01,W
071AA:  ADDLW  03
071AC:  MOVWF  FE9
071AE:  MOVLW  00
071B0:  ADDWFC 03,W
071B2:  MOVWF  FEA
071B4:  MOVFF  FEF,664
071B8:  CLRF   1B
071BA:  BTFSC  FF2.7
071BC:  BSF    1B.7
071BE:  BCF    FF2.7
071C0:  CLRF   xDB
071C2:  MOVFF  661,6DA
071C6:  CLRF   xDD
071C8:  MOVLW  21
071CA:  MOVWF  xDC
071CC:  MOVLB  0
071CE:  CALL   041C
071D2:  BTFSC  1B.7
071D4:  BSF    FF2.7
071D6:  MOVF   01,W
071D8:  ADDLW  02
071DA:  MOVLB  6
071DC:  MOVWF  x65
071DE:  MOVLW  00
071E0:  ADDWFC 02,W
071E2:  MOVWF  x66
071E4:  MOVLW  01
071E6:  ADDWF  x65,W
071E8:  MOVWF  01
071EA:  MOVLW  00
071EC:  ADDWFC x66,W
071EE:  MOVWF  03
071F0:  MOVF   01,W
071F2:  ADDLW  3E
071F4:  MOVWF  01
071F6:  MOVLW  01
071F8:  ADDWFC 03,F
071FA:  MOVF   01,W
071FC:  ADDLW  04
071FE:  MOVWF  FE9
07200:  MOVLW  00
07202:  ADDWFC 03,W
07204:  MOVWF  FEA
07206:  MOVFF  FEF,667
0720A:  MOVFF  664,668
0720E:  MOVFF  667,669
07212:  MOVLB  0
07214:  CALL   651C
07218:  CLRF   1B
0721A:  BTFSC  FF2.7
0721C:  BSF    1B.7
0721E:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.needs_update = false; 
07220:  MOVLB  6
07222:  CLRF   xDB
07224:  MOVFF  661,6DA
07228:  CLRF   xDD
0722A:  MOVLW  21
0722C:  MOVWF  xDC
0722E:  MOVLB  0
07230:  CALL   041C
07234:  BTFSC  1B.7
07236:  BSF    FF2.7
07238:  MOVF   01,W
0723A:  ADDLW  02
0723C:  MOVLB  6
0723E:  MOVWF  x62
07240:  MOVLW  00
07242:  ADDWFC 02,W
07244:  MOVWF  x63
07246:  MOVLW  01
07248:  ADDWF  x62,W
0724A:  MOVWF  01
0724C:  MOVLW  00
0724E:  ADDWFC x63,W
07250:  MOVWF  03
07252:  MOVF   01,W
07254:  ADDLW  3E
07256:  MOVWF  01
07258:  MOVLW  01
0725A:  ADDWFC 03,F
0725C:  MOVF   01,W
0725E:  ADDLW  05
07260:  MOVWF  FE9
07262:  MOVLW  00
07264:  ADDWFC 03,W
07266:  MOVWF  FEA
07268:  BCF    FEF.0
0726A:  CLRF   1B
0726C:  BTFSC  FF2.7
0726E:  BSF    1B.7
07270:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .on.value = 0; 
07272:  CLRF   xDB
07274:  MOVFF  661,6DA
07278:  CLRF   xDD
0727A:  MOVLW  21
0727C:  MOVWF  xDC
0727E:  MOVLB  0
07280:  CALL   041C
07284:  BTFSC  1B.7
07286:  BSF    FF2.7
07288:  MOVF   01,W
0728A:  ADDLW  02
0728C:  MOVLB  6
0728E:  MOVWF  x62
07290:  MOVLW  00
07292:  ADDWFC 02,W
07294:  MOVWF  x63
07296:  MOVLW  01
07298:  ADDWF  x62,W
0729A:  MOVWF  01
0729C:  MOVLW  00
0729E:  ADDWFC x63,W
072A0:  MOVWF  03
072A2:  MOVF   01,W
072A4:  ADDLW  3E
072A6:  MOVWF  01
072A8:  MOVLW  01
072AA:  ADDWFC 03,F
072AC:  MOVF   01,W
072AE:  ADDLW  04
072B0:  MOVWF  FE9
072B2:  MOVLW  00
072B4:  ADDWFC 03,W
072B6:  MOVWF  FEA
072B8:  CLRF   FEF
072BA:  CLRF   1B
072BC:  BTFSC  FF2.7
072BE:  BSF    1B.7
072C0:  BCF    FF2.7
....................          } 
....................          if (( (struct timer) mydevices.myinputs[x].device) .off.needs_update) 
072C2:  CLRF   xDB
072C4:  MOVFF  661,6DA
072C8:  CLRF   xDD
072CA:  MOVLW  21
072CC:  MOVWF  xDC
072CE:  MOVLB  0
072D0:  CALL   041C
072D4:  BTFSC  1B.7
072D6:  BSF    FF2.7
072D8:  MOVF   01,W
072DA:  ADDLW  02
072DC:  MOVLB  6
072DE:  MOVWF  x62
072E0:  MOVLW  00
072E2:  ADDWFC 02,W
072E4:  MOVWF  x63
072E6:  MOVLW  01
072E8:  ADDWF  x62,W
072EA:  MOVWF  01
072EC:  MOVLW  00
072EE:  ADDWFC x63,W
072F0:  MOVWF  03
072F2:  MOVF   01,W
072F4:  ADDLW  3E
072F6:  MOVWF  01
072F8:  MOVLW  01
072FA:  ADDWFC 03,F
072FC:  MOVF   01,W
072FE:  ADDLW  08
07300:  MOVWF  FE9
07302:  MOVLW  00
07304:  ADDWFC 03,W
07306:  MOVWF  FEA
07308:  BTFSS  FEF.0
0730A:  BRA    7460
0730C:  CLRF   1B
0730E:  BTFSC  FF2.7
07310:  BSF    1B.7
07312:  BCF    FF2.7
....................          { 
....................             process_outpoint_answer (( (struct timer) mydevices.myinputs[x].device) .off.adress, ( (struct timer) mydevices.myinputs[x].device) .off.value); 
07314:  CLRF   xDB
07316:  MOVFF  661,6DA
0731A:  CLRF   xDD
0731C:  MOVLW  21
0731E:  MOVWF  xDC
07320:  MOVLB  0
07322:  CALL   041C
07326:  BTFSC  1B.7
07328:  BSF    FF2.7
0732A:  MOVF   01,W
0732C:  ADDLW  02
0732E:  MOVLB  6
07330:  MOVWF  x62
07332:  MOVLW  00
07334:  ADDWFC 02,W
07336:  MOVWF  x63
07338:  MOVLW  01
0733A:  ADDWF  x62,W
0733C:  MOVWF  01
0733E:  MOVLW  00
07340:  ADDWFC x63,W
07342:  MOVWF  03
07344:  MOVF   01,W
07346:  ADDLW  3E
07348:  MOVWF  01
0734A:  MOVLW  01
0734C:  ADDWFC 03,F
0734E:  MOVF   01,W
07350:  ADDLW  06
07352:  MOVWF  FE9
07354:  MOVLW  00
07356:  ADDWFC 03,W
07358:  MOVWF  FEA
0735A:  MOVFF  FEF,664
0735E:  CLRF   1B
07360:  BTFSC  FF2.7
07362:  BSF    1B.7
07364:  BCF    FF2.7
07366:  CLRF   xDB
07368:  MOVFF  661,6DA
0736C:  CLRF   xDD
0736E:  MOVLW  21
07370:  MOVWF  xDC
07372:  MOVLB  0
07374:  CALL   041C
07378:  BTFSC  1B.7
0737A:  BSF    FF2.7
0737C:  MOVF   01,W
0737E:  ADDLW  02
07380:  MOVLB  6
07382:  MOVWF  x65
07384:  MOVLW  00
07386:  ADDWFC 02,W
07388:  MOVWF  x66
0738A:  MOVLW  01
0738C:  ADDWF  x65,W
0738E:  MOVWF  01
07390:  MOVLW  00
07392:  ADDWFC x66,W
07394:  MOVWF  03
07396:  MOVF   01,W
07398:  ADDLW  3E
0739A:  MOVWF  01
0739C:  MOVLW  01
0739E:  ADDWFC 03,F
073A0:  MOVF   01,W
073A2:  ADDLW  07
073A4:  MOVWF  FE9
073A6:  MOVLW  00
073A8:  ADDWFC 03,W
073AA:  MOVWF  FEA
073AC:  MOVFF  FEF,667
073B0:  MOVFF  664,668
073B4:  MOVFF  667,669
073B8:  MOVLB  0
073BA:  CALL   651C
073BE:  CLRF   1B
073C0:  BTFSC  FF2.7
073C2:  BSF    1B.7
073C4:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.needs_update = false; 
073C6:  MOVLB  6
073C8:  CLRF   xDB
073CA:  MOVFF  661,6DA
073CE:  CLRF   xDD
073D0:  MOVLW  21
073D2:  MOVWF  xDC
073D4:  MOVLB  0
073D6:  CALL   041C
073DA:  BTFSC  1B.7
073DC:  BSF    FF2.7
073DE:  MOVF   01,W
073E0:  ADDLW  02
073E2:  MOVLB  6
073E4:  MOVWF  x62
073E6:  MOVLW  00
073E8:  ADDWFC 02,W
073EA:  MOVWF  x63
073EC:  MOVLW  01
073EE:  ADDWF  x62,W
073F0:  MOVWF  01
073F2:  MOVLW  00
073F4:  ADDWFC x63,W
073F6:  MOVWF  03
073F8:  MOVF   01,W
073FA:  ADDLW  3E
073FC:  MOVWF  01
073FE:  MOVLW  01
07400:  ADDWFC 03,F
07402:  MOVF   01,W
07404:  ADDLW  08
07406:  MOVWF  FE9
07408:  MOVLW  00
0740A:  ADDWFC 03,W
0740C:  MOVWF  FEA
0740E:  BCF    FEF.0
07410:  CLRF   1B
07412:  BTFSC  FF2.7
07414:  BSF    1B.7
07416:  BCF    FF2.7
....................             ( (struct timer) mydevices.myinputs[x].device) .off.value = 0; 
07418:  CLRF   xDB
0741A:  MOVFF  661,6DA
0741E:  CLRF   xDD
07420:  MOVLW  21
07422:  MOVWF  xDC
07424:  MOVLB  0
07426:  CALL   041C
0742A:  BTFSC  1B.7
0742C:  BSF    FF2.7
0742E:  MOVF   01,W
07430:  ADDLW  02
07432:  MOVLB  6
07434:  MOVWF  x62
07436:  MOVLW  00
07438:  ADDWFC 02,W
0743A:  MOVWF  x63
0743C:  MOVLW  01
0743E:  ADDWF  x62,W
07440:  MOVWF  01
07442:  MOVLW  00
07444:  ADDWFC x63,W
07446:  MOVWF  03
07448:  MOVF   01,W
0744A:  ADDLW  3E
0744C:  MOVWF  01
0744E:  MOVLW  01
07450:  ADDWFC 03,F
07452:  MOVF   01,W
07454:  ADDLW  07
07456:  MOVWF  FE9
07458:  MOVLW  00
0745A:  ADDWFC 03,W
0745C:  MOVWF  FEA
0745E:  CLRF   FEF
....................          } 
....................          break; 
07460:  BRA    7466
....................          default: 
....................          break; 
07462:  MOVLB  6
07464:  BRA    7466
....................       } 
....................    } 
07466:  INCF   x61,F
07468:  GOTO   652E
.................... } 
0746C:  MOVLB  0
0746E:  GOTO   882E (RETURN)
....................  
....................  
....................  
.................... #include "timedevents.c" 
.................... void processTimedEvents() 
.................... { 
....................    int x; 
....................    for(x=0;x<mydevices.numberOfOutputs;++x) 
07472:  MOVLB  6
07474:  CLRF   x61
07476:  MOVLB  1
07478:  MOVF   x3F,W
0747A:  MOVLB  6
0747C:  SUBWF  x61,W
0747E:  BTFSC  FD8.0
07480:  GOTO   7C86
07484:  CLRF   1B
07486:  BTFSC  FF2.7
07488:  BSF    1B.7
0748A:  BCF    FF2.7
....................    { 
....................       switch (((struct outputs)mydevices.myoutputs[x]).type) { 
0748C:  CLRF   xDB
0748E:  MOVFF  661,6DA
07492:  CLRF   xDD
07494:  MOVLW  2F
07496:  MOVWF  xDC
07498:  MOVLB  0
0749A:  CALL   041C
0749E:  BTFSC  1B.7
074A0:  BSF    FF2.7
074A2:  MOVFF  02,03
074A6:  MOVF   01,W
074A8:  ADDLW  8A
074AA:  MOVWF  01
074AC:  MOVLW  02
074AE:  ADDWFC 03,F
074B0:  MOVFF  01,FE9
074B4:  MOVFF  03,FEA
074B8:  MOVF   FEF,W
074BA:  XORLW  66
074BC:  BZ    74C0
074BE:  BRA    7C7E
....................            case shutter: 
074C0:  CLRF   1B
074C2:  BTFSC  FF2.7
074C4:  BSF    1B.7
074C6:  BCF    FF2.7
....................            if(((struct shutter)mydevices.myoutputs[x].device).state!=idle) 
074C8:  MOVLB  6
074CA:  CLRF   xDB
074CC:  MOVFF  661,6DA
074D0:  CLRF   xDD
074D2:  MOVLW  2F
074D4:  MOVWF  xDC
074D6:  MOVLB  0
074D8:  CALL   041C
074DC:  BTFSC  1B.7
074DE:  BSF    FF2.7
074E0:  MOVF   01,W
074E2:  ADDLW  4C
074E4:  MOVLB  6
074E6:  MOVWF  x62
074E8:  MOVLW  01
074EA:  ADDWFC 02,W
074EC:  MOVWF  x63
074EE:  MOVLW  01
074F0:  ADDWF  x62,W
074F2:  MOVWF  01
074F4:  MOVLW  00
074F6:  ADDWFC x63,W
074F8:  MOVWF  03
074FA:  MOVF   01,W
074FC:  ADDLW  3E
074FE:  MOVWF  01
07500:  MOVLW  01
07502:  ADDWFC 03,F
07504:  MOVF   01,W
07506:  ADDLW  2D
07508:  MOVWF  FE9
0750A:  MOVLW  00
0750C:  ADDWFC 03,W
0750E:  MOVWF  FEA
07510:  MOVF   FEF,W
07512:  SUBLW  04
07514:  BTFSC  FD8.2
07516:  BRA    7C7A
07518:  CLRF   1B
0751A:  BTFSC  FF2.7
0751C:  BSF    1B.7
0751E:  BCF    FF2.7
....................            { 
....................                ++((struct shutter)mydevices.myoutputs[x].device).internalCounter; 
07520:  CLRF   xDB
07522:  MOVFF  661,6DA
07526:  CLRF   xDD
07528:  MOVLW  2F
0752A:  MOVWF  xDC
0752C:  MOVLB  0
0752E:  CALL   041C
07532:  BTFSC  1B.7
07534:  BSF    FF2.7
07536:  MOVF   01,W
07538:  ADDLW  4C
0753A:  MOVLB  6
0753C:  MOVWF  x62
0753E:  MOVLW  01
07540:  ADDWFC 02,W
07542:  MOVWF  x63
07544:  MOVLW  01
07546:  ADDWF  x62,W
07548:  MOVWF  01
0754A:  MOVLW  00
0754C:  ADDWFC x63,W
0754E:  MOVWF  03
07550:  MOVF   01,W
07552:  ADDLW  3E
07554:  MOVWF  01
07556:  MOVLW  01
07558:  ADDWFC 03,F
0755A:  MOVF   01,W
0755C:  ADDLW  2A
0755E:  MOVWF  FE9
07560:  MOVLW  00
07562:  ADDWFC 03,W
07564:  MOVWF  FEA
07566:  INCF   FEF,F
07568:  CLRF   1B
0756A:  BTFSC  FF2.7
0756C:  BSF    1B.7
0756E:  BCF    FF2.7
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingUp) 
07570:  CLRF   xDB
07572:  MOVFF  661,6DA
07576:  CLRF   xDD
07578:  MOVLW  2F
0757A:  MOVWF  xDC
0757C:  MOVLB  0
0757E:  CALL   041C
07582:  BTFSC  1B.7
07584:  BSF    FF2.7
07586:  MOVF   01,W
07588:  ADDLW  4C
0758A:  MOVLB  6
0758C:  MOVWF  x62
0758E:  MOVLW  01
07590:  ADDWFC 02,W
07592:  MOVWF  x63
07594:  MOVLW  01
07596:  ADDWF  x62,W
07598:  MOVWF  01
0759A:  MOVLW  00
0759C:  ADDWFC x63,W
0759E:  MOVWF  03
075A0:  MOVF   01,W
075A2:  ADDLW  3E
075A4:  MOVWF  01
075A6:  MOVLW  01
075A8:  ADDWFC 03,F
075AA:  MOVF   01,W
075AC:  ADDLW  2D
075AE:  MOVWF  FE9
075B0:  MOVLW  00
075B2:  ADDWFC 03,W
075B4:  MOVWF  FEA
075B6:  MOVF   FEF,F
075B8:  BTFSS  FD8.2
075BA:  BRA    772C
075BC:  CLRF   1B
075BE:  BTFSC  FF2.7
075C0:  BSF    1B.7
075C2:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
075C4:  CLRF   xDB
075C6:  MOVFF  661,6DA
075CA:  CLRF   xDD
075CC:  MOVLW  2F
075CE:  MOVWF  xDC
075D0:  MOVLB  0
075D2:  CALL   041C
075D6:  BTFSC  1B.7
075D8:  BSF    FF2.7
075DA:  MOVF   01,W
075DC:  ADDLW  4C
075DE:  MOVLB  6
075E0:  MOVWF  x62
075E2:  MOVLW  01
075E4:  ADDWFC 02,W
075E6:  MOVWF  x63
075E8:  MOVLW  01
075EA:  ADDWF  x62,W
075EC:  MOVWF  01
075EE:  MOVLW  00
075F0:  ADDWFC x63,W
075F2:  MOVWF  03
075F4:  MOVF   01,W
075F6:  ADDLW  3E
075F8:  MOVWF  01
075FA:  MOVLW  01
075FC:  ADDWFC 03,F
075FE:  MOVF   01,W
07600:  ADDLW  2A
07602:  MOVWF  FE9
07604:  MOVLW  00
07606:  ADDWFC 03,W
07608:  MOVWF  FEA
0760A:  MOVFF  FEF,664
0760E:  CLRF   1B
07610:  BTFSC  FF2.7
07612:  BSF    1B.7
07614:  BCF    FF2.7
07616:  CLRF   xDB
07618:  MOVFF  661,6DA
0761C:  CLRF   xDD
0761E:  MOVLW  2F
07620:  MOVWF  xDC
07622:  MOVLB  0
07624:  CALL   041C
07628:  BTFSC  1B.7
0762A:  BSF    FF2.7
0762C:  MOVF   01,W
0762E:  ADDLW  4C
07630:  MOVLB  6
07632:  MOVWF  x65
07634:  MOVLW  01
07636:  ADDWFC 02,W
07638:  MOVWF  x66
0763A:  MOVLW  01
0763C:  ADDWF  x65,W
0763E:  MOVWF  01
07640:  MOVLW  00
07642:  ADDWFC x66,W
07644:  MOVWF  03
07646:  MOVF   01,W
07648:  ADDLW  3E
0764A:  MOVWF  01
0764C:  MOVLW  01
0764E:  ADDWFC 03,F
07650:  MOVF   01,W
07652:  ADDLW  2C
07654:  MOVWF  FE9
07656:  MOVLW  00
07658:  ADDWFC 03,W
0765A:  MOVWF  FEA
0765C:  MOVF   FEF,W
0765E:  SUBWF  x64,W
07660:  BZ    772C
07662:  BNC   772C
07664:  CLRF   1B
07666:  BTFSC  FF2.7
07668:  BSF    1B.7
0766A:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0766C:  CLRF   xDB
0766E:  MOVFF  661,6DA
07672:  CLRF   xDD
07674:  MOVLW  2F
07676:  MOVWF  xDC
07678:  MOVLB  0
0767A:  CALL   041C
0767E:  BTFSC  1B.7
07680:  BSF    FF2.7
07682:  MOVF   01,W
07684:  ADDLW  4C
07686:  MOVLB  6
07688:  MOVWF  x62
0768A:  MOVLW  01
0768C:  ADDWFC 02,W
0768E:  MOVWF  x63
07690:  MOVLW  01
07692:  ADDWF  x62,W
07694:  MOVWF  01
07696:  MOVLW  00
07698:  ADDWFC x63,W
0769A:  MOVWF  03
0769C:  MOVF   01,W
0769E:  ADDLW  3E
076A0:  MOVWF  01
076A2:  MOVLW  01
076A4:  ADDWFC 03,F
076A6:  MOVF   01,W
076A8:  ADDLW  2D
076AA:  MOVWF  FE9
076AC:  MOVLW  00
076AE:  ADDWFC 03,W
076B0:  MOVWF  FEA
076B2:  MOVLW  04
076B4:  MOVWF  FEF
076B6:  CLRF   1B
076B8:  BTFSC  FF2.7
076BA:  BSF    1B.7
076BC:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
076BE:  CLRF   xDB
076C0:  MOVFF  661,6DA
076C4:  CLRF   xDD
076C6:  MOVLW  2F
076C8:  MOVWF  xDC
076CA:  MOVLB  0
076CC:  CALL   041C
076D0:  BTFSC  1B.7
076D2:  BSF    FF2.7
076D4:  MOVF   01,W
076D6:  ADDLW  4C
076D8:  MOVLB  6
076DA:  MOVWF  x62
076DC:  MOVLW  01
076DE:  ADDWFC 02,W
076E0:  MOVWF  x63
076E2:  MOVLW  01
076E4:  ADDWF  x62,W
076E6:  MOVWF  01
076E8:  MOVLW  00
076EA:  ADDWFC x63,W
076EC:  MOVWF  03
076EE:  MOVF   01,W
076F0:  ADDLW  3E
076F2:  MOVWF  01
076F4:  MOVLW  01
076F6:  ADDWFC 03,F
076F8:  MOVF   01,W
076FA:  ADDLW  28
076FC:  MOVWF  FE9
076FE:  MOVLW  00
07700:  ADDWFC 03,W
07702:  MOVWF  FEA
07704:  BCF    FD8.0
07706:  RLCF   FEF,W
07708:  CLRF   03
0770A:  MOVLB  0
0770C:  CALL   0172
07710:  TBLRD*+
07712:  MOVFF  FF5,03
07716:  CLRF   00
07718:  DECF   00,F
0771A:  XORWF  00,F
0771C:  MOVLW  FF
0771E:  XORWF  03,F
07720:  MOVF   00,W
07722:  MOVLB  5
07724:  IORWF  x7F,F
07726:  MOVF   03,W
07728:  IORWF  x80,F
0772A:  MOVLB  6
0772C:  CLRF   1B
0772E:  BTFSC  FF2.7
07730:  BSF    1B.7
07732:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingDown) 
07734:  CLRF   xDB
07736:  MOVFF  661,6DA
0773A:  CLRF   xDD
0773C:  MOVLW  2F
0773E:  MOVWF  xDC
07740:  MOVLB  0
07742:  CALL   041C
07746:  BTFSC  1B.7
07748:  BSF    FF2.7
0774A:  MOVF   01,W
0774C:  ADDLW  4C
0774E:  MOVLB  6
07750:  MOVWF  x62
07752:  MOVLW  01
07754:  ADDWFC 02,W
07756:  MOVWF  x63
07758:  MOVLW  01
0775A:  ADDWF  x62,W
0775C:  MOVWF  01
0775E:  MOVLW  00
07760:  ADDWFC x63,W
07762:  MOVWF  03
07764:  MOVF   01,W
07766:  ADDLW  3E
07768:  MOVWF  01
0776A:  MOVLW  01
0776C:  ADDWFC 03,F
0776E:  MOVF   01,W
07770:  ADDLW  2D
07772:  MOVWF  FE9
07774:  MOVLW  00
07776:  ADDWFC 03,W
07778:  MOVWF  FEA
0777A:  DECFSZ FEF,W
0777C:  BRA    78EE
0777E:  CLRF   1B
07780:  BTFSC  FF2.7
07782:  BSF    1B.7
07784:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).shortTime) 
07786:  CLRF   xDB
07788:  MOVFF  661,6DA
0778C:  CLRF   xDD
0778E:  MOVLW  2F
07790:  MOVWF  xDC
07792:  MOVLB  0
07794:  CALL   041C
07798:  BTFSC  1B.7
0779A:  BSF    FF2.7
0779C:  MOVF   01,W
0779E:  ADDLW  4C
077A0:  MOVLB  6
077A2:  MOVWF  x62
077A4:  MOVLW  01
077A6:  ADDWFC 02,W
077A8:  MOVWF  x63
077AA:  MOVLW  01
077AC:  ADDWF  x62,W
077AE:  MOVWF  01
077B0:  MOVLW  00
077B2:  ADDWFC x63,W
077B4:  MOVWF  03
077B6:  MOVF   01,W
077B8:  ADDLW  3E
077BA:  MOVWF  01
077BC:  MOVLW  01
077BE:  ADDWFC 03,F
077C0:  MOVF   01,W
077C2:  ADDLW  2A
077C4:  MOVWF  FE9
077C6:  MOVLW  00
077C8:  ADDWFC 03,W
077CA:  MOVWF  FEA
077CC:  MOVFF  FEF,664
077D0:  CLRF   1B
077D2:  BTFSC  FF2.7
077D4:  BSF    1B.7
077D6:  BCF    FF2.7
077D8:  CLRF   xDB
077DA:  MOVFF  661,6DA
077DE:  CLRF   xDD
077E0:  MOVLW  2F
077E2:  MOVWF  xDC
077E4:  MOVLB  0
077E6:  CALL   041C
077EA:  BTFSC  1B.7
077EC:  BSF    FF2.7
077EE:  MOVF   01,W
077F0:  ADDLW  4C
077F2:  MOVLB  6
077F4:  MOVWF  x65
077F6:  MOVLW  01
077F8:  ADDWFC 02,W
077FA:  MOVWF  x66
077FC:  MOVLW  01
077FE:  ADDWF  x65,W
07800:  MOVWF  01
07802:  MOVLW  00
07804:  ADDWFC x66,W
07806:  MOVWF  03
07808:  MOVF   01,W
0780A:  ADDLW  3E
0780C:  MOVWF  01
0780E:  MOVLW  01
07810:  ADDWFC 03,F
07812:  MOVF   01,W
07814:  ADDLW  2C
07816:  MOVWF  FE9
07818:  MOVLW  00
0781A:  ADDWFC 03,W
0781C:  MOVWF  FEA
0781E:  MOVF   FEF,W
07820:  SUBWF  x64,W
07822:  BZ    78EE
07824:  BNC   78EE
07826:  CLRF   1B
07828:  BTFSC  FF2.7
0782A:  BSF    1B.7
0782C:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
0782E:  CLRF   xDB
07830:  MOVFF  661,6DA
07834:  CLRF   xDD
07836:  MOVLW  2F
07838:  MOVWF  xDC
0783A:  MOVLB  0
0783C:  CALL   041C
07840:  BTFSC  1B.7
07842:  BSF    FF2.7
07844:  MOVF   01,W
07846:  ADDLW  4C
07848:  MOVLB  6
0784A:  MOVWF  x62
0784C:  MOVLW  01
0784E:  ADDWFC 02,W
07850:  MOVWF  x63
07852:  MOVLW  01
07854:  ADDWF  x62,W
07856:  MOVWF  01
07858:  MOVLW  00
0785A:  ADDWFC x63,W
0785C:  MOVWF  03
0785E:  MOVF   01,W
07860:  ADDLW  3E
07862:  MOVWF  01
07864:  MOVLW  01
07866:  ADDWFC 03,F
07868:  MOVF   01,W
0786A:  ADDLW  2D
0786C:  MOVWF  FE9
0786E:  MOVLW  00
07870:  ADDWFC 03,W
07872:  MOVWF  FEA
07874:  MOVLW  04
07876:  MOVWF  FEF
07878:  CLRF   1B
0787A:  BTFSC  FF2.7
0787C:  BSF    1B.7
0787E:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
07880:  CLRF   xDB
07882:  MOVFF  661,6DA
07886:  CLRF   xDD
07888:  MOVLW  2F
0788A:  MOVWF  xDC
0788C:  MOVLB  0
0788E:  CALL   041C
07892:  BTFSC  1B.7
07894:  BSF    FF2.7
07896:  MOVF   01,W
07898:  ADDLW  4C
0789A:  MOVLB  6
0789C:  MOVWF  x62
0789E:  MOVLW  01
078A0:  ADDWFC 02,W
078A2:  MOVWF  x63
078A4:  MOVLW  01
078A6:  ADDWF  x62,W
078A8:  MOVWF  01
078AA:  MOVLW  00
078AC:  ADDWFC x63,W
078AE:  MOVWF  03
078B0:  MOVF   01,W
078B2:  ADDLW  3E
078B4:  MOVWF  01
078B6:  MOVLW  01
078B8:  ADDWFC 03,F
078BA:  MOVF   01,W
078BC:  ADDLW  29
078BE:  MOVWF  FE9
078C0:  MOVLW  00
078C2:  ADDWFC 03,W
078C4:  MOVWF  FEA
078C6:  BCF    FD8.0
078C8:  RLCF   FEF,W
078CA:  CLRF   03
078CC:  MOVLB  0
078CE:  CALL   0172
078D2:  TBLRD*+
078D4:  MOVFF  FF5,03
078D8:  CLRF   00
078DA:  DECF   00,F
078DC:  XORWF  00,F
078DE:  MOVLW  FF
078E0:  XORWF  03,F
078E2:  MOVF   00,W
078E4:  MOVLB  5
078E6:  IORWF  x7F,F
078E8:  MOVF   03,W
078EA:  IORWF  x80,F
078EC:  MOVLB  6
078EE:  CLRF   1B
078F0:  BTFSC  FF2.7
078F2:  BSF    1B.7
078F4:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullUp) 
078F6:  CLRF   xDB
078F8:  MOVFF  661,6DA
078FC:  CLRF   xDD
078FE:  MOVLW  2F
07900:  MOVWF  xDC
07902:  MOVLB  0
07904:  CALL   041C
07908:  BTFSC  1B.7
0790A:  BSF    FF2.7
0790C:  MOVF   01,W
0790E:  ADDLW  4C
07910:  MOVLB  6
07912:  MOVWF  x62
07914:  MOVLW  01
07916:  ADDWFC 02,W
07918:  MOVWF  x63
0791A:  MOVLW  01
0791C:  ADDWF  x62,W
0791E:  MOVWF  01
07920:  MOVLW  00
07922:  ADDWFC x63,W
07924:  MOVWF  03
07926:  MOVF   01,W
07928:  ADDLW  3E
0792A:  MOVWF  01
0792C:  MOVLW  01
0792E:  ADDWFC 03,F
07930:  MOVF   01,W
07932:  ADDLW  2D
07934:  MOVWF  FE9
07936:  MOVLW  00
07938:  ADDWFC 03,W
0793A:  MOVWF  FEA
0793C:  MOVF   FEF,W
0793E:  SUBLW  02
07940:  BTFSS  FD8.2
07942:  BRA    7AB4
07944:  CLRF   1B
07946:  BTFSC  FF2.7
07948:  BSF    1B.7
0794A:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
0794C:  CLRF   xDB
0794E:  MOVFF  661,6DA
07952:  CLRF   xDD
07954:  MOVLW  2F
07956:  MOVWF  xDC
07958:  MOVLB  0
0795A:  CALL   041C
0795E:  BTFSC  1B.7
07960:  BSF    FF2.7
07962:  MOVF   01,W
07964:  ADDLW  4C
07966:  MOVLB  6
07968:  MOVWF  x62
0796A:  MOVLW  01
0796C:  ADDWFC 02,W
0796E:  MOVWF  x63
07970:  MOVLW  01
07972:  ADDWF  x62,W
07974:  MOVWF  01
07976:  MOVLW  00
07978:  ADDWFC x63,W
0797A:  MOVWF  03
0797C:  MOVF   01,W
0797E:  ADDLW  3E
07980:  MOVWF  01
07982:  MOVLW  01
07984:  ADDWFC 03,F
07986:  MOVF   01,W
07988:  ADDLW  2A
0798A:  MOVWF  FE9
0798C:  MOVLW  00
0798E:  ADDWFC 03,W
07990:  MOVWF  FEA
07992:  MOVFF  FEF,664
07996:  CLRF   1B
07998:  BTFSC  FF2.7
0799A:  BSF    1B.7
0799C:  BCF    FF2.7
0799E:  CLRF   xDB
079A0:  MOVFF  661,6DA
079A4:  CLRF   xDD
079A6:  MOVLW  2F
079A8:  MOVWF  xDC
079AA:  MOVLB  0
079AC:  CALL   041C
079B0:  BTFSC  1B.7
079B2:  BSF    FF2.7
079B4:  MOVF   01,W
079B6:  ADDLW  4C
079B8:  MOVLB  6
079BA:  MOVWF  x65
079BC:  MOVLW  01
079BE:  ADDWFC 02,W
079C0:  MOVWF  x66
079C2:  MOVLW  01
079C4:  ADDWF  x65,W
079C6:  MOVWF  01
079C8:  MOVLW  00
079CA:  ADDWFC x66,W
079CC:  MOVWF  03
079CE:  MOVF   01,W
079D0:  ADDLW  3E
079D2:  MOVWF  01
079D4:  MOVLW  01
079D6:  ADDWFC 03,F
079D8:  MOVF   01,W
079DA:  ADDLW  2B
079DC:  MOVWF  FE9
079DE:  MOVLW  00
079E0:  ADDWFC 03,W
079E2:  MOVWF  FEA
079E4:  MOVF   FEF,W
079E6:  SUBWF  x64,W
079E8:  BZ    7AB4
079EA:  BNC   7AB4
079EC:  CLRF   1B
079EE:  BTFSC  FF2.7
079F0:  BSF    1B.7
079F2:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
079F4:  CLRF   xDB
079F6:  MOVFF  661,6DA
079FA:  CLRF   xDD
079FC:  MOVLW  2F
079FE:  MOVWF  xDC
07A00:  MOVLB  0
07A02:  CALL   041C
07A06:  BTFSC  1B.7
07A08:  BSF    FF2.7
07A0A:  MOVF   01,W
07A0C:  ADDLW  4C
07A0E:  MOVLB  6
07A10:  MOVWF  x62
07A12:  MOVLW  01
07A14:  ADDWFC 02,W
07A16:  MOVWF  x63
07A18:  MOVLW  01
07A1A:  ADDWF  x62,W
07A1C:  MOVWF  01
07A1E:  MOVLW  00
07A20:  ADDWFC x63,W
07A22:  MOVWF  03
07A24:  MOVF   01,W
07A26:  ADDLW  3E
07A28:  MOVWF  01
07A2A:  MOVLW  01
07A2C:  ADDWFC 03,F
07A2E:  MOVF   01,W
07A30:  ADDLW  2D
07A32:  MOVWF  FE9
07A34:  MOVLW  00
07A36:  ADDWFC 03,W
07A38:  MOVWF  FEA
07A3A:  MOVLW  04
07A3C:  MOVWF  FEF
07A3E:  CLRF   1B
07A40:  BTFSC  FF2.7
07A42:  BSF    1B.7
07A44:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_up]; 
07A46:  CLRF   xDB
07A48:  MOVFF  661,6DA
07A4C:  CLRF   xDD
07A4E:  MOVLW  2F
07A50:  MOVWF  xDC
07A52:  MOVLB  0
07A54:  CALL   041C
07A58:  BTFSC  1B.7
07A5A:  BSF    FF2.7
07A5C:  MOVF   01,W
07A5E:  ADDLW  4C
07A60:  MOVLB  6
07A62:  MOVWF  x62
07A64:  MOVLW  01
07A66:  ADDWFC 02,W
07A68:  MOVWF  x63
07A6A:  MOVLW  01
07A6C:  ADDWF  x62,W
07A6E:  MOVWF  01
07A70:  MOVLW  00
07A72:  ADDWFC x63,W
07A74:  MOVWF  03
07A76:  MOVF   01,W
07A78:  ADDLW  3E
07A7A:  MOVWF  01
07A7C:  MOVLW  01
07A7E:  ADDWFC 03,F
07A80:  MOVF   01,W
07A82:  ADDLW  28
07A84:  MOVWF  FE9
07A86:  MOVLW  00
07A88:  ADDWFC 03,W
07A8A:  MOVWF  FEA
07A8C:  BCF    FD8.0
07A8E:  RLCF   FEF,W
07A90:  CLRF   03
07A92:  MOVLB  0
07A94:  CALL   0172
07A98:  TBLRD*+
07A9A:  MOVFF  FF5,03
07A9E:  CLRF   00
07AA0:  DECF   00,F
07AA2:  XORWF  00,F
07AA4:  MOVLW  FF
07AA6:  XORWF  03,F
07AA8:  MOVF   00,W
07AAA:  MOVLB  5
07AAC:  IORWF  x7F,F
07AAE:  MOVF   03,W
07AB0:  IORWF  x80,F
07AB2:  MOVLB  6
07AB4:  CLRF   1B
07AB6:  BTFSC  FF2.7
07AB8:  BSF    1B.7
07ABA:  BCF    FF2.7
....................                   } 
....................                } 
....................                if(((struct shutter)mydevices.myoutputs[x].device).state==goingFullDown) 
07ABC:  CLRF   xDB
07ABE:  MOVFF  661,6DA
07AC2:  CLRF   xDD
07AC4:  MOVLW  2F
07AC6:  MOVWF  xDC
07AC8:  MOVLB  0
07ACA:  CALL   041C
07ACE:  BTFSC  1B.7
07AD0:  BSF    FF2.7
07AD2:  MOVF   01,W
07AD4:  ADDLW  4C
07AD6:  MOVLB  6
07AD8:  MOVWF  x62
07ADA:  MOVLW  01
07ADC:  ADDWFC 02,W
07ADE:  MOVWF  x63
07AE0:  MOVLW  01
07AE2:  ADDWF  x62,W
07AE4:  MOVWF  01
07AE6:  MOVLW  00
07AE8:  ADDWFC x63,W
07AEA:  MOVWF  03
07AEC:  MOVF   01,W
07AEE:  ADDLW  3E
07AF0:  MOVWF  01
07AF2:  MOVLW  01
07AF4:  ADDWFC 03,F
07AF6:  MOVF   01,W
07AF8:  ADDLW  2D
07AFA:  MOVWF  FE9
07AFC:  MOVLW  00
07AFE:  ADDWFC 03,W
07B00:  MOVWF  FEA
07B02:  MOVF   FEF,W
07B04:  SUBLW  03
07B06:  BTFSS  FD8.2
07B08:  BRA    7C7A
07B0A:  CLRF   1B
07B0C:  BTFSC  FF2.7
07B0E:  BSF    1B.7
07B10:  BCF    FF2.7
....................                { 
....................                   if(((struct shutter)mydevices.myoutputs[x].device).internalCounter>((struct shutter)mydevices.myoutputs[x].device).fullTime) 
07B12:  CLRF   xDB
07B14:  MOVFF  661,6DA
07B18:  CLRF   xDD
07B1A:  MOVLW  2F
07B1C:  MOVWF  xDC
07B1E:  MOVLB  0
07B20:  CALL   041C
07B24:  BTFSC  1B.7
07B26:  BSF    FF2.7
07B28:  MOVF   01,W
07B2A:  ADDLW  4C
07B2C:  MOVLB  6
07B2E:  MOVWF  x62
07B30:  MOVLW  01
07B32:  ADDWFC 02,W
07B34:  MOVWF  x63
07B36:  MOVLW  01
07B38:  ADDWF  x62,W
07B3A:  MOVWF  01
07B3C:  MOVLW  00
07B3E:  ADDWFC x63,W
07B40:  MOVWF  03
07B42:  MOVF   01,W
07B44:  ADDLW  3E
07B46:  MOVWF  01
07B48:  MOVLW  01
07B4A:  ADDWFC 03,F
07B4C:  MOVF   01,W
07B4E:  ADDLW  2A
07B50:  MOVWF  FE9
07B52:  MOVLW  00
07B54:  ADDWFC 03,W
07B56:  MOVWF  FEA
07B58:  MOVFF  FEF,664
07B5C:  CLRF   1B
07B5E:  BTFSC  FF2.7
07B60:  BSF    1B.7
07B62:  BCF    FF2.7
07B64:  CLRF   xDB
07B66:  MOVFF  661,6DA
07B6A:  CLRF   xDD
07B6C:  MOVLW  2F
07B6E:  MOVWF  xDC
07B70:  MOVLB  0
07B72:  CALL   041C
07B76:  BTFSC  1B.7
07B78:  BSF    FF2.7
07B7A:  MOVF   01,W
07B7C:  ADDLW  4C
07B7E:  MOVLB  6
07B80:  MOVWF  x65
07B82:  MOVLW  01
07B84:  ADDWFC 02,W
07B86:  MOVWF  x66
07B88:  MOVLW  01
07B8A:  ADDWF  x65,W
07B8C:  MOVWF  01
07B8E:  MOVLW  00
07B90:  ADDWFC x66,W
07B92:  MOVWF  03
07B94:  MOVF   01,W
07B96:  ADDLW  3E
07B98:  MOVWF  01
07B9A:  MOVLW  01
07B9C:  ADDWFC 03,F
07B9E:  MOVF   01,W
07BA0:  ADDLW  2B
07BA2:  MOVWF  FE9
07BA4:  MOVLW  00
07BA6:  ADDWFC 03,W
07BA8:  MOVWF  FEA
07BAA:  MOVF   FEF,W
07BAC:  SUBWF  x64,W
07BAE:  BZ    7C7A
07BB0:  BNC   7C7A
07BB2:  CLRF   1B
07BB4:  BTFSC  FF2.7
07BB6:  BSF    1B.7
07BB8:  BCF    FF2.7
....................                   { 
....................                      ((struct shutter)mydevices.myoutputs[x].device).state=idle; 
07BBA:  CLRF   xDB
07BBC:  MOVFF  661,6DA
07BC0:  CLRF   xDD
07BC2:  MOVLW  2F
07BC4:  MOVWF  xDC
07BC6:  MOVLB  0
07BC8:  CALL   041C
07BCC:  BTFSC  1B.7
07BCE:  BSF    FF2.7
07BD0:  MOVF   01,W
07BD2:  ADDLW  4C
07BD4:  MOVLB  6
07BD6:  MOVWF  x62
07BD8:  MOVLW  01
07BDA:  ADDWFC 02,W
07BDC:  MOVWF  x63
07BDE:  MOVLW  01
07BE0:  ADDWF  x62,W
07BE2:  MOVWF  01
07BE4:  MOVLW  00
07BE6:  ADDWFC x63,W
07BE8:  MOVWF  03
07BEA:  MOVF   01,W
07BEC:  ADDLW  3E
07BEE:  MOVWF  01
07BF0:  MOVLW  01
07BF2:  ADDWFC 03,F
07BF4:  MOVF   01,W
07BF6:  ADDLW  2D
07BF8:  MOVWF  FE9
07BFA:  MOVLW  00
07BFC:  ADDWFC 03,W
07BFE:  MOVWF  FEA
07C00:  MOVLW  04
07C02:  MOVWF  FEF
07C04:  CLRF   1B
07C06:  BTFSC  FF2.7
07C08:  BSF    1B.7
07C0A:  BCF    FF2.7
....................                      onoffsvalue=onoffsvalue | ~light_pins[((struct shutter)mydevices.myoutputs[x].device).output_pin_down]; 
07C0C:  CLRF   xDB
07C0E:  MOVFF  661,6DA
07C12:  CLRF   xDD
07C14:  MOVLW  2F
07C16:  MOVWF  xDC
07C18:  MOVLB  0
07C1A:  CALL   041C
07C1E:  BTFSC  1B.7
07C20:  BSF    FF2.7
07C22:  MOVF   01,W
07C24:  ADDLW  4C
07C26:  MOVLB  6
07C28:  MOVWF  x62
07C2A:  MOVLW  01
07C2C:  ADDWFC 02,W
07C2E:  MOVWF  x63
07C30:  MOVLW  01
07C32:  ADDWF  x62,W
07C34:  MOVWF  01
07C36:  MOVLW  00
07C38:  ADDWFC x63,W
07C3A:  MOVWF  03
07C3C:  MOVF   01,W
07C3E:  ADDLW  3E
07C40:  MOVWF  01
07C42:  MOVLW  01
07C44:  ADDWFC 03,F
07C46:  MOVF   01,W
07C48:  ADDLW  29
07C4A:  MOVWF  FE9
07C4C:  MOVLW  00
07C4E:  ADDWFC 03,W
07C50:  MOVWF  FEA
07C52:  BCF    FD8.0
07C54:  RLCF   FEF,W
07C56:  CLRF   03
07C58:  MOVLB  0
07C5A:  CALL   0172
07C5E:  TBLRD*+
07C60:  MOVFF  FF5,03
07C64:  CLRF   00
07C66:  DECF   00,F
07C68:  XORWF  00,F
07C6A:  MOVLW  FF
07C6C:  XORWF  03,F
07C6E:  MOVF   00,W
07C70:  MOVLB  5
07C72:  IORWF  x7F,F
07C74:  MOVF   03,W
07C76:  IORWF  x80,F
07C78:  MOVLB  6
....................                   } 
....................                } 
....................            } 
....................             
....................          break; 
07C7A:  MOVLB  0
07C7C:  BRA    7C7E
....................       } 
....................    } 
07C7E:  MOVLB  6
07C80:  INCF   x61,F
07C82:  GOTO   7476
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
07C86:  CLRF   x61
07C88:  MOVLB  1
07C8A:  MOVF   x3E,W
07C8C:  MOVLB  6
07C8E:  SUBWF  x61,W
07C90:  BTFSC  FD8.0
07C92:  BRA    8362
07C94:  CLRF   1B
07C96:  BTFSC  FF2.7
07C98:  BSF    1B.7
07C9A:  BCF    FF2.7
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
07C9C:  CLRF   xDB
07C9E:  MOVFF  661,6DA
07CA2:  CLRF   xDD
07CA4:  MOVLW  21
07CA6:  MOVWF  xDC
07CA8:  MOVLB  0
07CAA:  CALL   041C
07CAE:  BTFSC  1B.7
07CB0:  BSF    FF2.7
07CB2:  MOVFF  02,03
07CB6:  MOVF   01,W
07CB8:  ADDLW  40
07CBA:  MOVWF  01
07CBC:  MOVLW  01
07CBE:  ADDWFC 03,F
07CC0:  MOVFF  01,FE9
07CC4:  MOVFF  03,FEA
07CC8:  MOVF   FEF,W
07CCA:  XORLW  02
07CCC:  BZ    7CD6
07CCE:  XORLW  01
07CD0:  BTFSC  FD8.2
07CD2:  BRA    7E22
07CD4:  BRA    835C
....................          case button_switch: 
07CD6:  CLRF   1B
07CD8:  BTFSC  FF2.7
07CDA:  BSF    1B.7
07CDC:  BCF    FF2.7
....................           if(((struct button_switch)mydevices.myinputs[x].device).repeat) 
07CDE:  MOVLB  6
07CE0:  CLRF   xDB
07CE2:  MOVFF  661,6DA
07CE6:  CLRF   xDD
07CE8:  MOVLW  21
07CEA:  MOVWF  xDC
07CEC:  MOVLB  0
07CEE:  CALL   041C
07CF2:  BTFSC  1B.7
07CF4:  BSF    FF2.7
07CF6:  MOVF   01,W
07CF8:  ADDLW  02
07CFA:  MOVLB  6
07CFC:  MOVWF  x62
07CFE:  MOVLW  00
07D00:  ADDWFC 02,W
07D02:  MOVWF  x63
07D04:  MOVLW  01
07D06:  ADDWF  x62,W
07D08:  MOVWF  01
07D0A:  MOVLW  00
07D0C:  ADDWFC x63,W
07D0E:  MOVWF  03
07D10:  MOVF   01,W
07D12:  ADDLW  3E
07D14:  MOVWF  01
07D16:  MOVLW  01
07D18:  ADDWFC 03,F
07D1A:  MOVF   01,W
07D1C:  ADDLW  08
07D1E:  MOVWF  FE9
07D20:  MOVLW  00
07D22:  ADDWFC 03,W
07D24:  MOVWF  FEA
07D26:  BTFSS  FEF.0
07D28:  BRA    7E1E
07D2A:  CLRF   1B
07D2C:  BTFSC  FF2.7
07D2E:  BSF    1B.7
07D30:  BCF    FF2.7
....................           { 
....................             if(((struct button_switch)mydevices.myinputs[x].device).outstate==on) 
07D32:  CLRF   xDB
07D34:  MOVFF  661,6DA
07D38:  CLRF   xDD
07D3A:  MOVLW  21
07D3C:  MOVWF  xDC
07D3E:  MOVLB  0
07D40:  CALL   041C
07D44:  BTFSC  1B.7
07D46:  BSF    FF2.7
07D48:  MOVF   01,W
07D4A:  ADDLW  02
07D4C:  MOVLB  6
07D4E:  MOVWF  x62
07D50:  MOVLW  00
07D52:  ADDWFC 02,W
07D54:  MOVWF  x63
07D56:  MOVLW  01
07D58:  ADDWF  x62,W
07D5A:  MOVWF  01
07D5C:  MOVLW  00
07D5E:  ADDWFC x63,W
07D60:  MOVWF  03
07D62:  MOVF   01,W
07D64:  ADDLW  3E
07D66:  MOVWF  01
07D68:  MOVLW  01
07D6A:  ADDWFC 03,F
07D6C:  MOVF   01,W
07D6E:  ADDLW  07
07D70:  MOVWF  FE9
07D72:  MOVLW  00
07D74:  ADDWFC 03,W
07D76:  MOVWF  FEA
07D78:  MOVF   FEF,F
07D7A:  BNZ   7E1E
07D7C:  CLRF   1B
07D7E:  BTFSC  FF2.7
07D80:  BSF    1B.7
07D82:  BCF    FF2.7
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).on.value=1; 
07D84:  CLRF   xDB
07D86:  MOVFF  661,6DA
07D8A:  CLRF   xDD
07D8C:  MOVLW  21
07D8E:  MOVWF  xDC
07D90:  MOVLB  0
07D92:  CALL   041C
07D96:  BTFSC  1B.7
07D98:  BSF    FF2.7
07D9A:  MOVF   01,W
07D9C:  ADDLW  02
07D9E:  MOVLB  6
07DA0:  MOVWF  x62
07DA2:  MOVLW  00
07DA4:  ADDWFC 02,W
07DA6:  MOVWF  x63
07DA8:  MOVLW  01
07DAA:  ADDWF  x62,W
07DAC:  MOVWF  01
07DAE:  MOVLW  00
07DB0:  ADDWFC x63,W
07DB2:  MOVWF  03
07DB4:  MOVF   01,W
07DB6:  ADDLW  3E
07DB8:  MOVWF  01
07DBA:  MOVLW  01
07DBC:  ADDWFC 03,F
07DBE:  MOVF   01,W
07DC0:  ADDLW  01
07DC2:  MOVWF  FE9
07DC4:  MOVLW  00
07DC6:  ADDWFC 03,W
07DC8:  MOVWF  FEA
07DCA:  MOVLW  01
07DCC:  MOVWF  FEF
07DCE:  CLRF   1B
07DD0:  BTFSC  FF2.7
07DD2:  BSF    1B.7
07DD4:  BCF    FF2.7
....................                ((struct button_switch)mydevices.myinputs[x].device).on.needs_update=true; 
07DD6:  CLRF   xDB
07DD8:  MOVFF  661,6DA
07DDC:  CLRF   xDD
07DDE:  MOVLW  21
07DE0:  MOVWF  xDC
07DE2:  MOVLB  0
07DE4:  CALL   041C
07DE8:  BTFSC  1B.7
07DEA:  BSF    FF2.7
07DEC:  MOVF   01,W
07DEE:  ADDLW  02
07DF0:  MOVLB  6
07DF2:  MOVWF  x62
07DF4:  MOVLW  00
07DF6:  ADDWFC 02,W
07DF8:  MOVWF  x63
07DFA:  MOVLW  01
07DFC:  ADDWF  x62,W
07DFE:  MOVWF  01
07E00:  MOVLW  00
07E02:  ADDWFC x63,W
07E04:  MOVWF  03
07E06:  MOVF   01,W
07E08:  ADDLW  3E
07E0A:  MOVWF  01
07E0C:  MOVLW  01
07E0E:  ADDWFC 03,F
07E10:  MOVF   01,W
07E12:  ADDLW  02
07E14:  MOVWF  FE9
07E16:  MOVLW  00
07E18:  ADDWFC 03,W
07E1A:  MOVWF  FEA
07E1C:  BSF    FEF.0
....................             } 
....................           } 
....................          break; 
07E1E:  MOVLB  0
07E20:  BRA    835C
....................          case timer: 
07E22:  CLRF   1B
07E24:  BTFSC  FF2.7
07E26:  BSF    1B.7
07E28:  BCF    FF2.7
....................           
....................           if(((struct timer)mydevices.myinputs[x].device).active) 
07E2A:  MOVLB  6
07E2C:  CLRF   xDB
07E2E:  MOVFF  661,6DA
07E32:  CLRF   xDD
07E34:  MOVLW  21
07E36:  MOVWF  xDC
07E38:  MOVLB  0
07E3A:  CALL   041C
07E3E:  BTFSC  1B.7
07E40:  BSF    FF2.7
07E42:  MOVF   01,W
07E44:  ADDLW  02
07E46:  MOVLB  6
07E48:  MOVWF  x62
07E4A:  MOVLW  00
07E4C:  ADDWFC 02,W
07E4E:  MOVWF  x63
07E50:  MOVLW  01
07E52:  ADDWF  x62,W
07E54:  MOVWF  01
07E56:  MOVLW  00
07E58:  ADDWFC x63,W
07E5A:  MOVWF  03
07E5C:  MOVF   01,W
07E5E:  ADDLW  3E
07E60:  MOVWF  01
07E62:  MOVLW  01
07E64:  ADDWFC 03,F
07E66:  MOVF   01,W
07E68:  ADDLW  1F
07E6A:  MOVWF  FE9
07E6C:  MOVLW  00
07E6E:  ADDWFC 03,W
07E70:  MOVWF  FEA
07E72:  BTFSS  FEF.0
07E74:  BRA    8358
07E76:  CLRF   1B
07E78:  BTFSC  FF2.7
07E7A:  BSF    1B.7
07E7C:  BCF    FF2.7
....................           { 
....................          // printf("ACTIVE"); 
....................             ++((struct timer)mydevices.myinputs[x].device).timer; 
07E7E:  CLRF   xDB
07E80:  MOVFF  661,6DA
07E84:  CLRF   xDD
07E86:  MOVLW  21
07E88:  MOVWF  xDC
07E8A:  MOVLB  0
07E8C:  CALL   041C
07E90:  BTFSC  1B.7
07E92:  BSF    FF2.7
07E94:  MOVF   01,W
07E96:  ADDLW  02
07E98:  MOVLB  6
07E9A:  MOVWF  x62
07E9C:  MOVLW  00
07E9E:  ADDWFC 02,W
07EA0:  MOVWF  x63
07EA2:  MOVLW  01
07EA4:  ADDWF  x62,W
07EA6:  MOVWF  01
07EA8:  MOVLW  00
07EAA:  ADDWFC x63,W
07EAC:  MOVWF  03
07EAE:  MOVF   01,W
07EB0:  ADDLW  3E
07EB2:  MOVWF  01
07EB4:  MOVLW  01
07EB6:  ADDWFC 03,F
07EB8:  MOVF   01,W
07EBA:  ADDLW  1D
07EBC:  MOVWF  FE9
07EBE:  MOVLW  00
07EC0:  ADDWFC 03,W
07EC2:  MOVWF  FEA
07EC4:  MOVLW  01
07EC6:  ADDWF  FEE,F
07EC8:  BNC   7ECC
07ECA:  INCF   FEF,F
07ECC:  CLRF   1B
07ECE:  BTFSC  FF2.7
07ED0:  BSF    1B.7
07ED2:  BCF    FF2.7
....................             if(((struct timer)mydevices.myinputs[x].device).timer>((struct timer)mydevices.myinputs[x].device).timeToAct) 
07ED4:  CLRF   xDB
07ED6:  MOVFF  661,6DA
07EDA:  CLRF   xDD
07EDC:  MOVLW  21
07EDE:  MOVWF  xDC
07EE0:  MOVLB  0
07EE2:  CALL   041C
07EE6:  BTFSC  1B.7
07EE8:  BSF    FF2.7
07EEA:  MOVF   01,W
07EEC:  ADDLW  02
07EEE:  MOVLB  6
07EF0:  MOVWF  x62
07EF2:  MOVLW  00
07EF4:  ADDWFC 02,W
07EF6:  MOVWF  x63
07EF8:  MOVLW  01
07EFA:  ADDWF  x62,W
07EFC:  MOVWF  01
07EFE:  MOVLW  00
07F00:  ADDWFC x63,W
07F02:  MOVWF  03
07F04:  MOVF   01,W
07F06:  ADDLW  3E
07F08:  MOVWF  01
07F0A:  MOVLW  01
07F0C:  ADDWFC 03,F
07F0E:  MOVF   01,W
07F10:  ADDLW  1D
07F12:  MOVWF  FE9
07F14:  MOVLW  00
07F16:  ADDWFC 03,W
07F18:  MOVWF  FEA
07F1A:  MOVFF  FEC,665
07F1E:  MOVF   FED,F
07F20:  MOVFF  FEF,664
07F24:  CLRF   1B
07F26:  BTFSC  FF2.7
07F28:  BSF    1B.7
07F2A:  BCF    FF2.7
07F2C:  CLRF   xDB
07F2E:  MOVFF  661,6DA
07F32:  CLRF   xDD
07F34:  MOVLW  21
07F36:  MOVWF  xDC
07F38:  MOVLB  0
07F3A:  CALL   041C
07F3E:  BTFSC  1B.7
07F40:  BSF    FF2.7
07F42:  MOVF   01,W
07F44:  ADDLW  02
07F46:  MOVLB  6
07F48:  MOVWF  x66
07F4A:  MOVLW  00
07F4C:  ADDWFC 02,W
07F4E:  MOVWF  x67
07F50:  MOVLW  01
07F52:  ADDWF  x66,W
07F54:  MOVWF  01
07F56:  MOVLW  00
07F58:  ADDWFC x67,W
07F5A:  MOVWF  03
07F5C:  MOVF   01,W
07F5E:  ADDLW  3E
07F60:  MOVWF  01
07F62:  MOVLW  01
07F64:  ADDWFC 03,F
07F66:  MOVF   01,W
07F68:  ADDLW  01
07F6A:  MOVWF  FE9
07F6C:  MOVLW  00
07F6E:  ADDWFC 03,W
07F70:  MOVWF  FEA
07F72:  MOVFF  FEC,03
07F76:  MOVF   FED,F
07F78:  MOVFF  FEF,01
07F7C:  MOVF   03,W
07F7E:  SUBWF  x65,W
07F80:  BTFSS  FD8.0
07F82:  BRA    8358
07F84:  BNZ   7F8E
07F86:  MOVF   x64,W
07F88:  SUBWF  01,W
07F8A:  BTFSC  FD8.0
07F8C:  BRA    8358
07F8E:  CLRF   1B
07F90:  BTFSC  FF2.7
07F92:  BSF    1B.7
07F94:  BCF    FF2.7
....................             { 
....................                if(((struct timer)mydevices.myinputs[x].device).type==time_on) 
07F96:  CLRF   xDB
07F98:  MOVFF  661,6DA
07F9C:  CLRF   xDD
07F9E:  MOVLW  21
07FA0:  MOVWF  xDC
07FA2:  MOVLB  0
07FA4:  CALL   041C
07FA8:  BTFSC  1B.7
07FAA:  BSF    FF2.7
07FAC:  MOVF   01,W
07FAE:  ADDLW  02
07FB0:  MOVLB  6
07FB2:  MOVWF  x62
07FB4:  MOVLW  00
07FB6:  ADDWFC 02,W
07FB8:  MOVWF  x63
07FBA:  MOVLW  01
07FBC:  ADDWF  x62,W
07FBE:  MOVWF  01
07FC0:  MOVLW  00
07FC2:  ADDWFC x63,W
07FC4:  MOVWF  03
07FC6:  MOVF   01,W
07FC8:  ADDLW  3E
07FCA:  MOVWF  01
07FCC:  MOVLW  01
07FCE:  ADDWFC 03,F
07FD0:  MOVFF  01,FE9
07FD4:  MOVFF  03,FEA
07FD8:  MOVF   FEF,F
07FDA:  BNZ   80D0
07FDC:  CLRF   1B
07FDE:  BTFSC  FF2.7
07FE0:  BSF    1B.7
07FE2:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
07FE4:  CLRF   xDB
07FE6:  MOVFF  661,6DA
07FEA:  CLRF   xDD
07FEC:  MOVLW  21
07FEE:  MOVWF  xDC
07FF0:  MOVLB  0
07FF2:  CALL   041C
07FF6:  BTFSC  1B.7
07FF8:  BSF    FF2.7
07FFA:  MOVF   01,W
07FFC:  ADDLW  02
07FFE:  MOVLB  6
08000:  MOVWF  x62
08002:  MOVLW  00
08004:  ADDWFC 02,W
08006:  MOVWF  x63
08008:  MOVLW  01
0800A:  ADDWF  x62,W
0800C:  MOVWF  01
0800E:  MOVLW  00
08010:  ADDWFC x63,W
08012:  MOVWF  03
08014:  MOVF   01,W
08016:  ADDLW  3E
08018:  MOVWF  01
0801A:  MOVLW  01
0801C:  ADDWFC 03,F
0801E:  MOVF   01,W
08020:  ADDLW  04
08022:  MOVWF  FE9
08024:  MOVLW  00
08026:  ADDWFC 03,W
08028:  MOVWF  FEA
0802A:  MOVLW  01
0802C:  MOVWF  FEF
0802E:  CLRF   1B
08030:  BTFSC  FF2.7
08032:  BSF    1B.7
08034:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
08036:  CLRF   xDB
08038:  MOVFF  661,6DA
0803C:  CLRF   xDD
0803E:  MOVLW  21
08040:  MOVWF  xDC
08042:  MOVLB  0
08044:  CALL   041C
08048:  BTFSC  1B.7
0804A:  BSF    FF2.7
0804C:  MOVF   01,W
0804E:  ADDLW  02
08050:  MOVLB  6
08052:  MOVWF  x62
08054:  MOVLW  00
08056:  ADDWFC 02,W
08058:  MOVWF  x63
0805A:  MOVLW  01
0805C:  ADDWF  x62,W
0805E:  MOVWF  01
08060:  MOVLW  00
08062:  ADDWFC x63,W
08064:  MOVWF  03
08066:  MOVF   01,W
08068:  ADDLW  3E
0806A:  MOVWF  01
0806C:  MOVLW  01
0806E:  ADDWFC 03,F
08070:  MOVF   01,W
08072:  ADDLW  05
08074:  MOVWF  FE9
08076:  MOVLW  00
08078:  ADDWFC 03,W
0807A:  MOVWF  FEA
0807C:  BSF    FEF.0
0807E:  CLRF   1B
08080:  BTFSC  FF2.7
08082:  BSF    1B.7
08084:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
08086:  CLRF   xDB
08088:  MOVFF  661,6DA
0808C:  CLRF   xDD
0808E:  MOVLW  21
08090:  MOVWF  xDC
08092:  MOVLB  0
08094:  CALL   041C
08098:  BTFSC  1B.7
0809A:  BSF    FF2.7
0809C:  MOVF   01,W
0809E:  ADDLW  02
080A0:  MOVLB  6
080A2:  MOVWF  x62
080A4:  MOVLW  00
080A6:  ADDWFC 02,W
080A8:  MOVWF  x63
080AA:  MOVLW  01
080AC:  ADDWF  x62,W
080AE:  MOVWF  01
080B0:  MOVLW  00
080B2:  ADDWFC x63,W
080B4:  MOVWF  03
080B6:  MOVF   01,W
080B8:  ADDLW  3E
080BA:  MOVWF  01
080BC:  MOVLW  01
080BE:  ADDWFC 03,F
080C0:  MOVF   01,W
080C2:  ADDLW  1F
080C4:  MOVWF  FE9
080C6:  MOVLW  00
080C8:  ADDWFC 03,W
080CA:  MOVWF  FEA
080CC:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==time_off) 
080CE:  BRA    8358
080D0:  CLRF   1B
080D2:  BTFSC  FF2.7
080D4:  BSF    1B.7
080D6:  BCF    FF2.7
080D8:  CLRF   xDB
080DA:  MOVFF  661,6DA
080DE:  CLRF   xDD
080E0:  MOVLW  21
080E2:  MOVWF  xDC
080E4:  MOVLB  0
080E6:  CALL   041C
080EA:  BTFSC  1B.7
080EC:  BSF    FF2.7
080EE:  MOVF   01,W
080F0:  ADDLW  02
080F2:  MOVLB  6
080F4:  MOVWF  x62
080F6:  MOVLW  00
080F8:  ADDWFC 02,W
080FA:  MOVWF  x63
080FC:  MOVLW  01
080FE:  ADDWF  x62,W
08100:  MOVWF  01
08102:  MOVLW  00
08104:  ADDWFC x63,W
08106:  MOVWF  03
08108:  MOVF   01,W
0810A:  ADDLW  3E
0810C:  MOVWF  01
0810E:  MOVLW  01
08110:  ADDWFC 03,F
08112:  MOVFF  01,FE9
08116:  MOVFF  03,FEA
0811A:  DECFSZ FEF,W
0811C:  BRA    8212
0811E:  CLRF   1B
08120:  BTFSC  FF2.7
08122:  BSF    1B.7
08124:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).off.value=1; 
08126:  CLRF   xDB
08128:  MOVFF  661,6DA
0812C:  CLRF   xDD
0812E:  MOVLW  21
08130:  MOVWF  xDC
08132:  MOVLB  0
08134:  CALL   041C
08138:  BTFSC  1B.7
0813A:  BSF    FF2.7
0813C:  MOVF   01,W
0813E:  ADDLW  02
08140:  MOVLB  6
08142:  MOVWF  x62
08144:  MOVLW  00
08146:  ADDWFC 02,W
08148:  MOVWF  x63
0814A:  MOVLW  01
0814C:  ADDWF  x62,W
0814E:  MOVWF  01
08150:  MOVLW  00
08152:  ADDWFC x63,W
08154:  MOVWF  03
08156:  MOVF   01,W
08158:  ADDLW  3E
0815A:  MOVWF  01
0815C:  MOVLW  01
0815E:  ADDWFC 03,F
08160:  MOVF   01,W
08162:  ADDLW  07
08164:  MOVWF  FE9
08166:  MOVLW  00
08168:  ADDWFC 03,W
0816A:  MOVWF  FEA
0816C:  MOVLW  01
0816E:  MOVWF  FEF
08170:  CLRF   1B
08172:  BTFSC  FF2.7
08174:  BSF    1B.7
08176:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).off.needs_update=true; 
08178:  CLRF   xDB
0817A:  MOVFF  661,6DA
0817E:  CLRF   xDD
08180:  MOVLW  21
08182:  MOVWF  xDC
08184:  MOVLB  0
08186:  CALL   041C
0818A:  BTFSC  1B.7
0818C:  BSF    FF2.7
0818E:  MOVF   01,W
08190:  ADDLW  02
08192:  MOVLB  6
08194:  MOVWF  x62
08196:  MOVLW  00
08198:  ADDWFC 02,W
0819A:  MOVWF  x63
0819C:  MOVLW  01
0819E:  ADDWF  x62,W
081A0:  MOVWF  01
081A2:  MOVLW  00
081A4:  ADDWFC x63,W
081A6:  MOVWF  03
081A8:  MOVF   01,W
081AA:  ADDLW  3E
081AC:  MOVWF  01
081AE:  MOVLW  01
081B0:  ADDWFC 03,F
081B2:  MOVF   01,W
081B4:  ADDLW  08
081B6:  MOVWF  FE9
081B8:  MOVLW  00
081BA:  ADDWFC 03,W
081BC:  MOVWF  FEA
081BE:  BSF    FEF.0
081C0:  CLRF   1B
081C2:  BTFSC  FF2.7
081C4:  BSF    1B.7
081C6:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).active=false; 
081C8:  CLRF   xDB
081CA:  MOVFF  661,6DA
081CE:  CLRF   xDD
081D0:  MOVLW  21
081D2:  MOVWF  xDC
081D4:  MOVLB  0
081D6:  CALL   041C
081DA:  BTFSC  1B.7
081DC:  BSF    FF2.7
081DE:  MOVF   01,W
081E0:  ADDLW  02
081E2:  MOVLB  6
081E4:  MOVWF  x62
081E6:  MOVLW  00
081E8:  ADDWFC 02,W
081EA:  MOVWF  x63
081EC:  MOVLW  01
081EE:  ADDWF  x62,W
081F0:  MOVWF  01
081F2:  MOVLW  00
081F4:  ADDWFC x63,W
081F6:  MOVWF  03
081F8:  MOVF   01,W
081FA:  ADDLW  3E
081FC:  MOVWF  01
081FE:  MOVLW  01
08200:  ADDWFC 03,F
08202:  MOVF   01,W
08204:  ADDLW  1F
08206:  MOVWF  FE9
08208:  MOVLW  00
0820A:  ADDWFC 03,W
0820C:  MOVWF  FEA
0820E:  BCF    FEF.0
....................                } 
....................                else if(((struct timer)mydevices.myinputs[x].device).type==periodic_on) 
08210:  BRA    8358
08212:  CLRF   1B
08214:  BTFSC  FF2.7
08216:  BSF    1B.7
08218:  BCF    FF2.7
0821A:  CLRF   xDB
0821C:  MOVFF  661,6DA
08220:  CLRF   xDD
08222:  MOVLW  21
08224:  MOVWF  xDC
08226:  MOVLB  0
08228:  CALL   041C
0822C:  BTFSC  1B.7
0822E:  BSF    FF2.7
08230:  MOVF   01,W
08232:  ADDLW  02
08234:  MOVLB  6
08236:  MOVWF  x62
08238:  MOVLW  00
0823A:  ADDWFC 02,W
0823C:  MOVWF  x63
0823E:  MOVLW  01
08240:  ADDWF  x62,W
08242:  MOVWF  01
08244:  MOVLW  00
08246:  ADDWFC x63,W
08248:  MOVWF  03
0824A:  MOVF   01,W
0824C:  ADDLW  3E
0824E:  MOVWF  01
08250:  MOVLW  01
08252:  ADDWFC 03,F
08254:  MOVFF  01,FE9
08258:  MOVFF  03,FEA
0825C:  MOVF   FEF,W
0825E:  SUBLW  02
08260:  BNZ   8358
08262:  CLRF   1B
08264:  BTFSC  FF2.7
08266:  BSF    1B.7
08268:  BCF    FF2.7
....................                { 
....................                   ((struct timer)mydevices.myinputs[x].device).on.value=1; 
0826A:  CLRF   xDB
0826C:  MOVFF  661,6DA
08270:  CLRF   xDD
08272:  MOVLW  21
08274:  MOVWF  xDC
08276:  MOVLB  0
08278:  CALL   041C
0827C:  BTFSC  1B.7
0827E:  BSF    FF2.7
08280:  MOVF   01,W
08282:  ADDLW  02
08284:  MOVLB  6
08286:  MOVWF  x62
08288:  MOVLW  00
0828A:  ADDWFC 02,W
0828C:  MOVWF  x63
0828E:  MOVLW  01
08290:  ADDWF  x62,W
08292:  MOVWF  01
08294:  MOVLW  00
08296:  ADDWFC x63,W
08298:  MOVWF  03
0829A:  MOVF   01,W
0829C:  ADDLW  3E
0829E:  MOVWF  01
082A0:  MOVLW  01
082A2:  ADDWFC 03,F
082A4:  MOVF   01,W
082A6:  ADDLW  04
082A8:  MOVWF  FE9
082AA:  MOVLW  00
082AC:  ADDWFC 03,W
082AE:  MOVWF  FEA
082B0:  MOVLW  01
082B2:  MOVWF  FEF
082B4:  CLRF   1B
082B6:  BTFSC  FF2.7
082B8:  BSF    1B.7
082BA:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).on.needs_update=true; 
082BC:  CLRF   xDB
082BE:  MOVFF  661,6DA
082C2:  CLRF   xDD
082C4:  MOVLW  21
082C6:  MOVWF  xDC
082C8:  MOVLB  0
082CA:  CALL   041C
082CE:  BTFSC  1B.7
082D0:  BSF    FF2.7
082D2:  MOVF   01,W
082D4:  ADDLW  02
082D6:  MOVLB  6
082D8:  MOVWF  x62
082DA:  MOVLW  00
082DC:  ADDWFC 02,W
082DE:  MOVWF  x63
082E0:  MOVLW  01
082E2:  ADDWF  x62,W
082E4:  MOVWF  01
082E6:  MOVLW  00
082E8:  ADDWFC x63,W
082EA:  MOVWF  03
082EC:  MOVF   01,W
082EE:  ADDLW  3E
082F0:  MOVWF  01
082F2:  MOVLW  01
082F4:  ADDWFC 03,F
082F6:  MOVF   01,W
082F8:  ADDLW  05
082FA:  MOVWF  FE9
082FC:  MOVLW  00
082FE:  ADDWFC 03,W
08300:  MOVWF  FEA
08302:  BSF    FEF.0
08304:  CLRF   1B
08306:  BTFSC  FF2.7
08308:  BSF    1B.7
0830A:  BCF    FF2.7
....................                   ((struct timer)mydevices.myinputs[x].device).timer=0; 
0830C:  CLRF   xDB
0830E:  MOVFF  661,6DA
08312:  CLRF   xDD
08314:  MOVLW  21
08316:  MOVWF  xDC
08318:  MOVLB  0
0831A:  CALL   041C
0831E:  BTFSC  1B.7
08320:  BSF    FF2.7
08322:  MOVF   01,W
08324:  ADDLW  02
08326:  MOVLB  6
08328:  MOVWF  x62
0832A:  MOVLW  00
0832C:  ADDWFC 02,W
0832E:  MOVWF  x63
08330:  MOVLW  01
08332:  ADDWF  x62,W
08334:  MOVWF  01
08336:  MOVLW  00
08338:  ADDWFC x63,W
0833A:  MOVWF  03
0833C:  MOVF   01,W
0833E:  ADDLW  3E
08340:  MOVWF  01
08342:  MOVLW  01
08344:  ADDWFC 03,F
08346:  MOVF   01,W
08348:  ADDLW  1D
0834A:  MOVWF  FE9
0834C:  MOVLW  00
0834E:  ADDWFC 03,W
08350:  MOVWF  FEA
08352:  CLRF   FEC
08354:  MOVF   FED,F
08356:  CLRF   FEF
....................                } 
....................             } 
....................           } 
....................          break; 
08358:  MOVLB  0
0835A:  BRA    835C
....................       } 
....................    } 
0835C:  MOVLB  6
0835E:  INCF   x61,F
08360:  BRA    7C88
.................... } 
08362:  MOVLB  0
08364:  GOTO   883C (RETURN)
....................  
.................... #include "debug.c" 
.................... void testInputs() 
.................... { 
....................    printf("Inputs\n\r"); 
*
05284:  MOVLW  CC
05286:  MOVWF  FF6
05288:  MOVLW  02
0528A:  MOVWF  FF7
0528C:  MOVLW  00
0528E:  MOVWF  FF8
05290:  CLRF   1B
05292:  BTFSC  FF2.7
05294:  BSF    1B.7
05296:  BCF    FF2.7
05298:  CALL   0F2A
0529C:  BTFSC  1B.7
0529E:  BSF    FF2.7
....................    printf("1 2 3 4 5 6 7 8\n\r"); 
052A0:  MOVLW  D6
052A2:  MOVWF  FF6
052A4:  MOVLW  02
052A6:  MOVWF  FF7
052A8:  MOVLW  00
052AA:  MOVWF  FF8
052AC:  CLRF   1B
052AE:  BTFSC  FF2.7
052B0:  BSF    1B.7
052B2:  BCF    FF2.7
052B4:  CALL   0F2A
052B8:  BTFSC  1B.7
052BA:  BSF    FF2.7
....................    while(!kbhit()) 
....................    { 
052BC:  BTFSS  F81.4
052BE:  BRA    569E
052C0:  CLRF   1B
052C2:  BTFSC  FF2.7
052C4:  BSF    1B.7
052C6:  BCF    FF2.7
....................       int1 bit1=input(inputs[0]); 
....................       int1 bit2=input(inputs[1]); 
....................       int1 bit3=input(inputs[2]); 
....................       int1 bit4=input(inputs[3]); 
....................       int1 bit5=input(inputs[4]); 
....................       int1 bit6=input(inputs[5]); 
....................       int1 bit7=input(inputs[6]); 
....................       int1 bit8=input(inputs[7]); 
052C8:  MOVFF  1C,6DD
052CC:  MOVLW  01
052CE:  MOVLB  6
052D0:  MOVWF  xDE
052D2:  MOVLW  0F
052D4:  MOVWF  xE0
052D6:  MOVLW  92
052D8:  MOVWF  xDF
052DA:  MOVLB  0
052DC:  CALL   043E
052E0:  BTFSC  1B.7
052E2:  BSF    FF2.7
052E4:  CLRF   1B
052E6:  BTFSC  FF2.7
052E8:  BSF    1B.7
052EA:  BCF    FF2.7
052EC:  MOVFF  1C,6DD
052F0:  MOVLW  0F
052F2:  MOVLB  6
052F4:  MOVWF  xDF
052F6:  MOVLW  80
052F8:  MOVWF  xDE
052FA:  MOVLB  0
052FC:  CALL   0480
05300:  BTFSC  1B.7
05302:  BSF    FF2.7
05304:  MOVLB  6
05306:  BCF    x62.0
05308:  BTFSC  01.0
0530A:  BSF    x62.0
0530C:  CLRF   1B
0530E:  BTFSC  FF2.7
05310:  BSF    1B.7
05312:  BCF    FF2.7
05314:  MOVFF  1D,6DD
05318:  MOVLW  01
0531A:  MOVWF  xDE
0531C:  MOVLW  0F
0531E:  MOVWF  xE0
05320:  MOVLW  92
05322:  MOVWF  xDF
05324:  MOVLB  0
05326:  CALL   043E
0532A:  BTFSC  1B.7
0532C:  BSF    FF2.7
0532E:  CLRF   1B
05330:  BTFSC  FF2.7
05332:  BSF    1B.7
05334:  BCF    FF2.7
05336:  MOVFF  1D,6DD
0533A:  MOVLW  0F
0533C:  MOVLB  6
0533E:  MOVWF  xDF
05340:  MOVLW  80
05342:  MOVWF  xDE
05344:  MOVLB  0
05346:  CALL   0480
0534A:  BTFSC  1B.7
0534C:  BSF    FF2.7
0534E:  MOVLB  6
05350:  BCF    x62.1
05352:  BTFSC  01.0
05354:  BSF    x62.1
05356:  CLRF   1B
05358:  BTFSC  FF2.7
0535A:  BSF    1B.7
0535C:  BCF    FF2.7
0535E:  MOVFF  1E,6DD
05362:  MOVLW  01
05364:  MOVWF  xDE
05366:  MOVLW  0F
05368:  MOVWF  xE0
0536A:  MOVLW  92
0536C:  MOVWF  xDF
0536E:  MOVLB  0
05370:  CALL   043E
05374:  BTFSC  1B.7
05376:  BSF    FF2.7
05378:  CLRF   1B
0537A:  BTFSC  FF2.7
0537C:  BSF    1B.7
0537E:  BCF    FF2.7
05380:  MOVFF  1E,6DD
05384:  MOVLW  0F
05386:  MOVLB  6
05388:  MOVWF  xDF
0538A:  MOVLW  80
0538C:  MOVWF  xDE
0538E:  MOVLB  0
05390:  CALL   0480
05394:  BTFSC  1B.7
05396:  BSF    FF2.7
05398:  MOVLB  6
0539A:  BCF    x62.2
0539C:  BTFSC  01.0
0539E:  BSF    x62.2
053A0:  CLRF   1B
053A2:  BTFSC  FF2.7
053A4:  BSF    1B.7
053A6:  BCF    FF2.7
053A8:  MOVFF  1F,6DD
053AC:  MOVLW  01
053AE:  MOVWF  xDE
053B0:  MOVLW  0F
053B2:  MOVWF  xE0
053B4:  MOVLW  92
053B6:  MOVWF  xDF
053B8:  MOVLB  0
053BA:  CALL   043E
053BE:  BTFSC  1B.7
053C0:  BSF    FF2.7
053C2:  CLRF   1B
053C4:  BTFSC  FF2.7
053C6:  BSF    1B.7
053C8:  BCF    FF2.7
053CA:  MOVFF  1F,6DD
053CE:  MOVLW  0F
053D0:  MOVLB  6
053D2:  MOVWF  xDF
053D4:  MOVLW  80
053D6:  MOVWF  xDE
053D8:  MOVLB  0
053DA:  CALL   0480
053DE:  BTFSC  1B.7
053E0:  BSF    FF2.7
053E2:  MOVLB  6
053E4:  BCF    x62.3
053E6:  BTFSC  01.0
053E8:  BSF    x62.3
053EA:  CLRF   1B
053EC:  BTFSC  FF2.7
053EE:  BSF    1B.7
053F0:  BCF    FF2.7
053F2:  MOVFF  20,6DD
053F6:  MOVLW  01
053F8:  MOVWF  xDE
053FA:  MOVLW  0F
053FC:  MOVWF  xE0
053FE:  MOVLW  92
05400:  MOVWF  xDF
05402:  MOVLB  0
05404:  CALL   043E
05408:  BTFSC  1B.7
0540A:  BSF    FF2.7
0540C:  CLRF   1B
0540E:  BTFSC  FF2.7
05410:  BSF    1B.7
05412:  BCF    FF2.7
05414:  MOVFF  20,6DD
05418:  MOVLW  0F
0541A:  MOVLB  6
0541C:  MOVWF  xDF
0541E:  MOVLW  80
05420:  MOVWF  xDE
05422:  MOVLB  0
05424:  CALL   0480
05428:  BTFSC  1B.7
0542A:  BSF    FF2.7
0542C:  MOVLB  6
0542E:  BCF    x62.4
05430:  BTFSC  01.0
05432:  BSF    x62.4
05434:  CLRF   1B
05436:  BTFSC  FF2.7
05438:  BSF    1B.7
0543A:  BCF    FF2.7
0543C:  MOVFF  21,6DD
05440:  MOVLW  01
05442:  MOVWF  xDE
05444:  MOVLW  0F
05446:  MOVWF  xE0
05448:  MOVLW  92
0544A:  MOVWF  xDF
0544C:  MOVLB  0
0544E:  CALL   043E
05452:  BTFSC  1B.7
05454:  BSF    FF2.7
05456:  CLRF   1B
05458:  BTFSC  FF2.7
0545A:  BSF    1B.7
0545C:  BCF    FF2.7
0545E:  MOVFF  21,6DD
05462:  MOVLW  0F
05464:  MOVLB  6
05466:  MOVWF  xDF
05468:  MOVLW  80
0546A:  MOVWF  xDE
0546C:  MOVLB  0
0546E:  CALL   0480
05472:  BTFSC  1B.7
05474:  BSF    FF2.7
05476:  MOVLB  6
05478:  BCF    x62.5
0547A:  BTFSC  01.0
0547C:  BSF    x62.5
0547E:  CLRF   1B
05480:  BTFSC  FF2.7
05482:  BSF    1B.7
05484:  BCF    FF2.7
05486:  MOVFF  22,6DD
0548A:  MOVLW  01
0548C:  MOVWF  xDE
0548E:  MOVLW  0F
05490:  MOVWF  xE0
05492:  MOVLW  92
05494:  MOVWF  xDF
05496:  MOVLB  0
05498:  CALL   043E
0549C:  BTFSC  1B.7
0549E:  BSF    FF2.7
054A0:  CLRF   1B
054A2:  BTFSC  FF2.7
054A4:  BSF    1B.7
054A6:  BCF    FF2.7
054A8:  MOVFF  22,6DD
054AC:  MOVLW  0F
054AE:  MOVLB  6
054B0:  MOVWF  xDF
054B2:  MOVLW  80
054B4:  MOVWF  xDE
054B6:  MOVLB  0
054B8:  CALL   0480
054BC:  BTFSC  1B.7
054BE:  BSF    FF2.7
054C0:  MOVLB  6
054C2:  BCF    x62.6
054C4:  BTFSC  01.0
054C6:  BSF    x62.6
054C8:  CLRF   1B
054CA:  BTFSC  FF2.7
054CC:  BSF    1B.7
054CE:  BCF    FF2.7
054D0:  MOVFF  23,6DD
054D4:  MOVLW  01
054D6:  MOVWF  xDE
054D8:  MOVLW  0F
054DA:  MOVWF  xE0
054DC:  MOVLW  92
054DE:  MOVWF  xDF
054E0:  MOVLB  0
054E2:  CALL   043E
054E6:  BTFSC  1B.7
054E8:  BSF    FF2.7
054EA:  CLRF   1B
054EC:  BTFSC  FF2.7
054EE:  BSF    1B.7
054F0:  BCF    FF2.7
054F2:  MOVFF  23,6DD
054F6:  MOVLW  0F
054F8:  MOVLB  6
054FA:  MOVWF  xDF
054FC:  MOVLW  80
054FE:  MOVWF  xDE
05500:  MOVLB  0
05502:  CALL   0480
05506:  BTFSC  1B.7
05508:  BSF    FF2.7
0550A:  MOVLB  6
0550C:  BCF    x62.7
0550E:  BTFSC  01.0
05510:  BSF    x62.7
....................       printf("%d %d %d %d %d %d %d %d\r",bit1,bit2,bit3,bit4,bit5,bit6,bit7,bit8); 
05512:  MOVLW  00
05514:  BTFSC  x62.0
05516:  MOVLW  01
05518:  MOVWF  x63
0551A:  MOVLW  00
0551C:  BTFSC  x62.1
0551E:  MOVLW  01
05520:  MOVWF  x64
05522:  MOVLW  00
05524:  BTFSC  x62.2
05526:  MOVLW  01
05528:  MOVWF  x65
0552A:  MOVLW  00
0552C:  BTFSC  x62.3
0552E:  MOVLW  01
05530:  MOVWF  x66
05532:  MOVLW  00
05534:  BTFSC  x62.4
05536:  MOVLW  01
05538:  MOVWF  x67
0553A:  MOVLW  00
0553C:  BTFSC  x62.5
0553E:  MOVLW  01
05540:  MOVWF  x68
05542:  MOVLW  00
05544:  BTFSC  x62.6
05546:  MOVLW  01
05548:  MOVWF  x69
0554A:  MOVLW  00
0554C:  BTFSC  x62.7
0554E:  MOVLW  01
05550:  MOVWF  x6A
05552:  MOVFF  663,674
05556:  MOVLW  1F
05558:  MOVWF  x75
0555A:  MOVLB  0
0555C:  CALL   2040
05560:  CLRF   1B
05562:  BTFSC  FF2.7
05564:  BSF    1B.7
05566:  BCF    FF2.7
05568:  MOVLW  20
0556A:  MOVLB  6
0556C:  MOVWF  xDC
0556E:  MOVLB  0
05570:  CALL   0ED6
05574:  BTFSC  1B.7
05576:  BSF    FF2.7
05578:  MOVFF  664,674
0557C:  MOVLW  1F
0557E:  MOVLB  6
05580:  MOVWF  x75
05582:  MOVLB  0
05584:  CALL   2040
05588:  CLRF   1B
0558A:  BTFSC  FF2.7
0558C:  BSF    1B.7
0558E:  BCF    FF2.7
05590:  MOVLW  20
05592:  MOVLB  6
05594:  MOVWF  xDC
05596:  MOVLB  0
05598:  CALL   0ED6
0559C:  BTFSC  1B.7
0559E:  BSF    FF2.7
055A0:  MOVFF  665,674
055A4:  MOVLW  1F
055A6:  MOVLB  6
055A8:  MOVWF  x75
055AA:  MOVLB  0
055AC:  CALL   2040
055B0:  CLRF   1B
055B2:  BTFSC  FF2.7
055B4:  BSF    1B.7
055B6:  BCF    FF2.7
055B8:  MOVLW  20
055BA:  MOVLB  6
055BC:  MOVWF  xDC
055BE:  MOVLB  0
055C0:  CALL   0ED6
055C4:  BTFSC  1B.7
055C6:  BSF    FF2.7
055C8:  MOVFF  666,674
055CC:  MOVLW  1F
055CE:  MOVLB  6
055D0:  MOVWF  x75
055D2:  MOVLB  0
055D4:  CALL   2040
055D8:  CLRF   1B
055DA:  BTFSC  FF2.7
055DC:  BSF    1B.7
055DE:  BCF    FF2.7
055E0:  MOVLW  20
055E2:  MOVLB  6
055E4:  MOVWF  xDC
055E6:  MOVLB  0
055E8:  CALL   0ED6
055EC:  BTFSC  1B.7
055EE:  BSF    FF2.7
055F0:  MOVFF  667,674
055F4:  MOVLW  1F
055F6:  MOVLB  6
055F8:  MOVWF  x75
055FA:  MOVLB  0
055FC:  CALL   2040
05600:  CLRF   1B
05602:  BTFSC  FF2.7
05604:  BSF    1B.7
05606:  BCF    FF2.7
05608:  MOVLW  20
0560A:  MOVLB  6
0560C:  MOVWF  xDC
0560E:  MOVLB  0
05610:  CALL   0ED6
05614:  BTFSC  1B.7
05616:  BSF    FF2.7
05618:  MOVFF  668,674
0561C:  MOVLW  1F
0561E:  MOVLB  6
05620:  MOVWF  x75
05622:  MOVLB  0
05624:  CALL   2040
05628:  CLRF   1B
0562A:  BTFSC  FF2.7
0562C:  BSF    1B.7
0562E:  BCF    FF2.7
05630:  MOVLW  20
05632:  MOVLB  6
05634:  MOVWF  xDC
05636:  MOVLB  0
05638:  CALL   0ED6
0563C:  BTFSC  1B.7
0563E:  BSF    FF2.7
05640:  MOVFF  669,674
05644:  MOVLW  1F
05646:  MOVLB  6
05648:  MOVWF  x75
0564A:  MOVLB  0
0564C:  CALL   2040
05650:  CLRF   1B
05652:  BTFSC  FF2.7
05654:  BSF    1B.7
05656:  BCF    FF2.7
05658:  MOVLW  20
0565A:  MOVLB  6
0565C:  MOVWF  xDC
0565E:  MOVLB  0
05660:  CALL   0ED6
05664:  BTFSC  1B.7
05666:  BSF    FF2.7
05668:  MOVFF  66A,674
0566C:  MOVLW  1F
0566E:  MOVLB  6
05670:  MOVWF  x75
05672:  MOVLB  0
05674:  CALL   2040
05678:  CLRF   1B
0567A:  BTFSC  FF2.7
0567C:  BSF    1B.7
0567E:  BCF    FF2.7
05680:  MOVLW  0D
05682:  MOVLB  6
05684:  MOVWF  xDC
05686:  MOVLB  0
05688:  CALL   0ED6
0568C:  BTFSC  1B.7
0568E:  BSF    FF2.7
....................       delay_us(10); 
05690:  CLRWDT
05692:  MOVLW  20
05694:  MOVWF  00
05696:  DECFSZ 00,F
05698:  BRA    5696
0569A:  BRA    569C
....................    } 
0569C:  BRA    52BC
.................... } 
0569E:  GOTO   586E (RETURN)
.................... void testOutputs() 
.................... { 
056A2:  MOVLB  6
056A4:  BSF    x62.0
....................    int1 loop=true; 
....................    printf("Press 0-F to activate output\n\r"); 
056A6:  MOVLW  E8
056A8:  MOVWF  FF6
056AA:  MOVLW  02
056AC:  MOVWF  FF7
056AE:  MOVLW  00
056B0:  MOVWF  FF8
056B2:  CLRF   1B
056B4:  BTFSC  FF2.7
056B6:  BSF    1B.7
056B8:  BCF    FF2.7
056BA:  MOVLB  0
056BC:  CALL   0F2A
056C0:  BTFSC  1B.7
056C2:  BSF    FF2.7
....................    while(loop) 
....................    { 
056C4:  MOVLB  6
056C6:  BTFSS  x62.0
056C8:  BRA    57D6
....................    while(!kbhit()){} 
056CA:  BTFSS  F81.4
056CC:  BRA    56D0
056CE:  BRA    56CA
....................    char c=getc(); 
056D0:  MOVLB  0
056D2:  RCALL  5224
056D4:  MOVFF  01,663
....................    switch(c) 
....................    { 
056D8:  MOVLB  6
056DA:  MOVF   x63,W
056DC:  XORLW  30
056DE:  MOVLB  0
056E0:  BZ    5724
056E2:  XORLW  01
056E4:  BZ    572E
056E6:  XORLW  03
056E8:  BZ    5738
056EA:  XORLW  01
056EC:  BZ    5742
056EE:  XORLW  07
056F0:  BZ    574C
056F2:  XORLW  01
056F4:  BZ    5756
056F6:  XORLW  03
056F8:  BZ    5760
056FA:  XORLW  01
056FC:  BZ    576A
056FE:  XORLW  0F
05700:  BZ    5774
05702:  XORLW  01
05704:  BZ    577E
05706:  XORLW  58
05708:  BZ    5788
0570A:  XORLW  03
0570C:  BZ    5792
0570E:  XORLW  01
05710:  BZ    579C
05712:  XORLW  07
05714:  BZ    57A6
05716:  XORLW  01
05718:  BZ    57B0
0571A:  XORLW  03
0571C:  BZ    57BA
0571E:  XORLW  1E
05720:  BZ    57C4
05722:  BRA    57D2
....................       case '0': 
....................          portc=(MAKE8(light_pins[0],1)); 
05724:  MOVLW  FF
05726:  MOVWF  F82
....................          portd=(MAKE8(light_pins[0],0)); 
05728:  MOVLW  EF
0572A:  MOVWF  F83
....................       break; 
0572C:  BRA    57D2
....................       case '1': 
....................          portc=(MAKE8(light_pins[1],1)); 
0572E:  MOVLW  FF
05730:  MOVWF  F82
....................          portd=(MAKE8(light_pins[1],0)); 
05732:  MOVLW  DF
05734:  MOVWF  F83
....................       break; 
05736:  BRA    57D2
....................       case '2': 
....................          portc=(MAKE8(light_pins[2],1)); 
05738:  MOVLW  FF
0573A:  MOVWF  F82
....................          portd=(MAKE8(light_pins[2],0)); 
0573C:  MOVLW  BF
0573E:  MOVWF  F83
....................       break; 
05740:  BRA    57D2
....................       case '3': 
....................          portc=(MAKE8(light_pins[3],1)); 
05742:  MOVLW  FF
05744:  MOVWF  F82
....................          portd=(MAKE8(light_pins[3],0)); 
05746:  MOVLW  7F
05748:  MOVWF  F83
....................       break; 
0574A:  BRA    57D2
....................       case '4': 
....................          portc=(MAKE8(light_pins[4],1)); 
0574C:  MOVLW  FF
0574E:  MOVWF  F82
....................          portd=(MAKE8(light_pins[4],0)); 
05750:  MOVLW  F7
05752:  MOVWF  F83
....................       break; 
05754:  BRA    57D2
....................       case '5': 
....................          portc=(MAKE8(light_pins[5],1)); 
05756:  MOVLW  FF
05758:  MOVWF  F82
....................          portd=(MAKE8(light_pins[5],0)); 
0575A:  MOVLW  FB
0575C:  MOVWF  F83
....................       break; 
0575E:  BRA    57D2
....................       case '6': 
....................          portc=(MAKE8(light_pins[6],1)); 
05760:  MOVLW  FF
05762:  MOVWF  F82
....................          portd=(MAKE8(light_pins[6],0)); 
05764:  MOVLW  FE
05766:  MOVWF  F83
....................       break; 
05768:  BRA    57D2
....................       case '7': 
....................          portc=(MAKE8(light_pins[7],1)); 
0576A:  MOVLW  FF
0576C:  MOVWF  F82
....................          portd=(MAKE8(light_pins[7],0)); 
0576E:  MOVLW  FD
05770:  MOVWF  F83
....................       break; 
05772:  BRA    57D2
....................       case '8': 
....................          portc=(MAKE8(light_pins[8],1)); 
05774:  MOVLW  7F
05776:  MOVWF  F82
....................          portd=(MAKE8(light_pins[8],0)); 
05778:  MOVLW  FF
0577A:  MOVWF  F83
....................       break; 
0577C:  BRA    57D2
....................       case '9': 
....................          portc=(MAKE8(light_pins[9],1)); 
0577E:  MOVLW  BF
05780:  MOVWF  F82
....................          portd=(MAKE8(light_pins[9],0)); 
05782:  MOVLW  FF
05784:  MOVWF  F83
....................       break; 
05786:  BRA    57D2
....................       case 'a': 
....................          portc=(MAKE8(light_pins[10],1)); 
05788:  MOVLW  DF
0578A:  MOVWF  F82
....................          portd=(MAKE8(light_pins[10],0)); 
0578C:  MOVLW  FF
0578E:  MOVWF  F83
....................       break; 
05790:  BRA    57D2
....................       case 'b': 
....................          portc=(MAKE8(light_pins[11],1)); 
05792:  MOVLW  EF
05794:  MOVWF  F82
....................          portd=(MAKE8(light_pins[11],0)); 
05796:  MOVLW  FF
05798:  MOVWF  F83
....................       break; 
0579A:  BRA    57D2
....................       case 'c': 
....................          portc=(MAKE8(light_pins[12],1)); 
0579C:  MOVLW  F7
0579E:  MOVWF  F82
....................          portd=(MAKE8(light_pins[12],0)); 
057A0:  MOVLW  FF
057A2:  MOVWF  F83
....................       break; 
057A4:  BRA    57D2
....................       case 'd': 
....................          portc=(MAKE8(light_pins[13],1)); 
057A6:  MOVLW  FB
057A8:  MOVWF  F82
....................          portd=(MAKE8(light_pins[13],0)); 
057AA:  MOVLW  FF
057AC:  MOVWF  F83
....................       break; 
057AE:  BRA    57D2
....................       case 'e': 
....................          portc=(MAKE8(light_pins[14],1)); 
057B0:  MOVLW  FD
057B2:  MOVWF  F82
....................          portd=(MAKE8(light_pins[14],0)); 
057B4:  MOVLW  FF
057B6:  MOVWF  F83
....................       break; 
057B8:  BRA    57D2
....................       case 'f': 
....................          portc=(MAKE8(light_pins[15],1)); 
057BA:  MOVLW  FE
057BC:  MOVWF  F82
....................          portd=(MAKE8(light_pins[15],0)); 
057BE:  MOVLW  FF
057C0:  MOVWF  F83
....................       break; 
057C2:  BRA    57D2
....................       case 'x': 
....................          loop=false; 
057C4:  MOVLB  6
057C6:  BCF    x62.0
....................          portc=0xFF; 
057C8:  MOVLW  FF
057CA:  MOVWF  F82
....................          portd=0xFF; 
057CC:  MOVWF  F83
....................       break; 
057CE:  MOVLB  0
057D0:  BRA    57D2
....................    } 
....................    } 
057D2:  BRA    56C4
057D4:  MOVLB  6
.................... } 
057D6:  MOVLB  0
057D8:  GOTO   586E (RETURN)
.................... void goDebug() 
.................... { 
....................    while(true) 
....................    {   
....................       printf("Debug mode active\n\r"); 
057DC:  MOVLW  08
057DE:  MOVWF  FF6
057E0:  MOVLW  03
057E2:  MOVWF  FF7
057E4:  MOVLW  00
057E6:  MOVWF  FF8
057E8:  CLRF   1B
057EA:  BTFSC  FF2.7
057EC:  BSF    1B.7
057EE:  BCF    FF2.7
057F0:  CALL   0F2A
057F4:  BTFSC  1B.7
057F6:  BSF    FF2.7
....................       printf("1-Test inputs\n\r"); 
057F8:  MOVLW  1C
057FA:  MOVWF  FF6
057FC:  MOVLW  03
057FE:  MOVWF  FF7
05800:  MOVLW  00
05802:  MOVWF  FF8
05804:  CLRF   1B
05806:  BTFSC  FF2.7
05808:  BSF    1B.7
0580A:  BCF    FF2.7
0580C:  CALL   0F2A
05810:  BTFSC  1B.7
05812:  BSF    FF2.7
....................       printf("2-Test outputs\n\r"); 
05814:  MOVLW  2C
05816:  MOVWF  FF6
05818:  MOVLW  03
0581A:  MOVWF  FF7
0581C:  MOVLW  00
0581E:  MOVWF  FF8
05820:  CLRF   1B
05822:  BTFSC  FF2.7
05824:  BSF    1B.7
05826:  BCF    FF2.7
05828:  CALL   0F2A
0582C:  BTFSC  1B.7
0582E:  BSF    FF2.7
....................       while(!kbhit()){} 
05830:  BTFSS  F81.4
05832:  BRA    5836
05834:  BRA    5830
....................       char c=getc(); 
05836:  RCALL  5224
05838:  MOVFF  01,661
....................       if(c=='1') 
0583C:  MOVLB  6
0583E:  MOVF   x61,W
05840:  SUBLW  31
05842:  BNZ   584E
....................          testInputs(); 
05844:  MOVLB  0
05846:  BRA    5284
....................       else if(c=='2') 
05848:  MOVLB  0
0584A:  BRA    586E
0584C:  MOVLB  6
0584E:  MOVF   x61,W
05850:  SUBLW  32
05852:  BNZ   585E
....................          testOutputs(); 
05854:  MOVLB  0
05856:  BRA    56A2
....................       else if(c=='x') 
05858:  MOVLB  0
0585A:  BRA    586E
0585C:  MOVLB  6
0585E:  MOVF   x61,W
05860:  SUBLW  78
05862:  BNZ   586C
....................       { 
....................          setup_wdt(WDT_ON); 
05864:  BSF    FD1.0
....................          enable_interrupts (GLOBAL) ; 
05866:  MOVLW  C0
05868:  IORWF  FF2,F
....................          return; 
0586A:  BRA    5872
0586C:  MOVLB  0
....................       } 
....................    } 
0586E:  BRA    57DC
05870:  MOVLB  6
.................... } 
05872:  MOVLB  0
05874:  GOTO   882A (RETURN)
....................  
.................... #include "eprom.c" 
.................... #define MEM_OFFSET 0 
....................  
....................  
.................... _write_eeprom(unsigned int16 adress,int value) 
.................... { 
.................... #ifdef DEBUG   
....................    printf("adress=%Lu value=%d\n\r",adress,value); 
*
02158:  MOVLW  3E
0215A:  MOVWF  FF6
0215C:  MOVLW  03
0215E:  MOVWF  FF7
02160:  MOVLW  00
02162:  MOVWF  FF8
02164:  MOVLW  07
02166:  MOVLB  6
02168:  MOVWF  x74
0216A:  MOVLB  0
0216C:  RCALL  1F0A
0216E:  MOVLW  10
02170:  MOVWF  FE9
02172:  MOVFF  672,675
02176:  MOVFF  671,674
0217A:  BRA    1F48
0217C:  MOVLW  48
0217E:  MOVWF  FF6
02180:  MOVLW  03
02182:  MOVWF  FF7
02184:  MOVLW  00
02186:  MOVWF  FF8
02188:  MOVLW  07
0218A:  MOVLB  6
0218C:  MOVWF  x74
0218E:  MOVLB  0
02190:  RCALL  1F0A
02192:  MOVFF  673,674
02196:  MOVLW  1F
02198:  MOVLB  6
0219A:  MOVWF  x75
0219C:  MOVLB  0
0219E:  RCALL  2040
021A0:  CLRF   1B
021A2:  BTFSC  FF2.7
021A4:  BSF    1B.7
021A6:  BCF    FF2.7
021A8:  MOVLW  0A
021AA:  MOVLB  6
021AC:  MOVWF  xDC
021AE:  MOVLB  0
021B0:  CALL   0ED6
021B4:  BTFSC  1B.7
021B6:  BSF    FF2.7
021B8:  CLRF   1B
021BA:  BTFSC  FF2.7
021BC:  BSF    1B.7
021BE:  BCF    FF2.7
021C0:  MOVLW  0D
021C2:  MOVLB  6
021C4:  MOVWF  xDC
021C6:  MOVLB  0
021C8:  CALL   0ED6
021CC:  BTFSC  1B.7
021CE:  BSF    FF2.7
.................... #endif 
....................    write_eeprom(adress,value); 
021D0:  MOVFF  672,FAA
021D4:  MOVFF  671,FA9
021D8:  MOVFF  673,FA8
021DC:  BCF    FA6.6
021DE:  BCF    FA6.7
021E0:  BSF    FA6.2
021E2:  MOVF   FF2,W
021E4:  MOVWF  00
021E6:  BCF    FF2.7
021E8:  MOVLB  F
021EA:  MOVLW  55
021EC:  MOVWF  FA7
021EE:  MOVLW  AA
021F0:  MOVWF  FA7
021F2:  BSF    FA6.1
021F4:  BTFSC  FA6.1
021F6:  BRA    21F4
021F8:  BCF    FA6.2
021FA:  MOVF   00,W
021FC:  IORWF  FF2,F
.................... } 
021FE:  MOVLB  0
02200:  RETLW  00
....................  
.................... unsigned int16 writeMemPointer=MEM_OFFSET; 
.................... //enum output_type {_on_off=100, dimmer,shutter}; 
.................... //enum input_type {dimmer_switch,on_off_switch,button_switch,timer,none}; 
.................... void memToArray(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
026C0:  MOVLB  6
026C2:  CLRF   xC1
026C4:  MOVF   xC0,W
026C6:  SUBWF  xC1,W
026C8:  BC    2708
....................    { 
....................       *array=read_eeprom(memAdress+x); 
026CA:  MOVFF  6BD,03
026CE:  MOVF   xBC,W
026D0:  MOVWF  FE9
026D2:  MOVFF  03,FEA
026D6:  MOVF   xC1,W
026D8:  ADDWF  xBE,W
026DA:  MOVWF  xC4
026DC:  MOVLW  00
026DE:  ADDWFC xBF,W
026E0:  MOVWF  xC5
026E2:  MOVFF  FF2,6C6
026E6:  BCF    FF2.7
026E8:  MOVFF  6C5,FAA
026EC:  MOVFF  6C4,FA9
026F0:  BCF    FA6.6
026F2:  BCF    FA6.7
026F4:  BSF    FA6.0
026F6:  MOVF   FA8,W
026F8:  BTFSC  xC6.7
026FA:  BSF    FF2.7
026FC:  MOVWF  FEF
....................       ++array; 
026FE:  INCF   xBC,F
02700:  BTFSC  FD8.2
02702:  INCF   xBD,F
....................    } 
02704:  INCF   xC1,F
02706:  BRA    26C4
.................... } 
02708:  MOVLB  0
0270A:  RETLW  00
.................... void ArrayToMem(int * array,unsigned int16 memAdress,int lenght) 
.................... { 
....................    int x; 
....................    for(x=0;x<lenght;++x) 
*
022E6:  MOVLB  6
022E8:  CLRF   x6D
022EA:  MOVF   x6C,W
022EC:  SUBWF  x6D,W
022EE:  BC    2326
....................    { 
....................       _write_eeprom(memAdress+x,*array); 
022F0:  MOVF   x6D,W
022F2:  ADDWF  x6A,W
022F4:  MOVWF  x6E
022F6:  MOVLW  00
022F8:  ADDWFC x6B,W
022FA:  MOVWF  x6F
022FC:  MOVFF  669,03
02300:  MOVFF  668,FE9
02304:  MOVFF  669,FEA
02308:  MOVFF  FEF,670
0230C:  MOVWF  x72
0230E:  MOVFF  66E,671
02312:  MOVFF  670,673
02316:  MOVLB  0
02318:  RCALL  2158
....................       ++array; 
0231A:  MOVLB  6
0231C:  INCF   x68,F
0231E:  BTFSC  FD8.2
02320:  INCF   x69,F
....................    } 
02322:  INCF   x6D,F
02324:  BRA    22EA
.................... } 
02326:  MOVLB  0
02328:  RETLW  00
.................... void readDevices() 
.................... { 
*
02DFE:  MOVLB  6
02E00:  CLRF   x62
02E02:  CLRF   x61
02E04:  CLRF   x63
02E06:  CLRF   x64
....................    unsigned int16 mempointer=MEM_OFFSET; 
....................    unsigned int inputNumber=0; 
....................    unsigned int outputNumber=0; 
....................    while(read_eeprom(mempointer)!=0xFF) 
....................    { 
02E08:  MOVFF  FF2,6BC
02E0C:  BCF    FF2.7
02E0E:  MOVFF  662,FAA
02E12:  MOVFF  661,FA9
02E16:  BCF    FA6.6
02E18:  BCF    FA6.7
02E1A:  BSF    FA6.0
02E1C:  MOVF   FA8,W
02E1E:  BTFSC  xBC.7
02E20:  BSF    FF2.7
02E22:  SUBLW  FF
02E24:  BTFSC  FD8.2
02E26:  GOTO   36BE
....................       switch(read_eeprom(mempointer)) 
....................       { 
02E2A:  MOVFF  FF2,6BC
02E2E:  BCF    FF2.7
02E30:  MOVFF  662,FAA
02E34:  MOVFF  661,FA9
02E38:  BCF    FA6.6
02E3A:  BCF    FA6.7
02E3C:  BSF    FA6.0
02E3E:  MOVF   FA8,W
02E40:  BTFSC  xBC.7
02E42:  BSF    FF2.7
02E44:  XORLW  01
02E46:  MOVLB  0
02E48:  BZ    2E72
02E4A:  XORLW  01
02E4C:  BTFSC  FD8.2
02E4E:  BRA    2F52
02E50:  XORLW  02
02E52:  BTFSC  FD8.2
02E54:  BRA    3058
02E56:  XORLW  01
02E58:  BTFSC  FD8.2
02E5A:  BRA    316A
02E5C:  XORLW  66
02E5E:  BTFSC  FD8.2
02E60:  BRA    32F8
02E62:  XORLW  03
02E64:  BTFSC  FD8.2
02E66:  BRA    3412
02E68:  XORLW  02
02E6A:  BTFSC  FD8.2
02E6C:  BRA    35CA
02E6E:  GOTO   36B8
....................          case on_off_switch: 
.................... #ifdef DEBUG  
....................             printf("loaded on/off switch\n\r"); 
02E72:  MOVLW  54
02E74:  MOVWF  FF6
02E76:  MOVLW  03
02E78:  MOVWF  FF7
02E7A:  MOVLW  00
02E7C:  MOVWF  FF8
02E7E:  CLRF   1B
02E80:  BTFSC  FF2.7
02E82:  BSF    1B.7
02E84:  BCF    FF2.7
02E86:  CALL   0F2A
02E8A:  BTFSC  1B.7
02E8C:  BSF    FF2.7
.................... #endif 
....................             unsigned int on_adr=read_eeprom(++mempointer); 
....................             unsigned int off_adr=read_eeprom(++mempointer); 
....................             unsigned int real_button=read_eeprom(++mempointer); 
02E8E:  MOVLB  6
02E90:  INCF   x61,F
02E92:  BTFSC  FD8.2
02E94:  INCF   x62,F
02E96:  MOVFF  FF2,6BC
02E9A:  BCF    FF2.7
02E9C:  MOVFF  662,FAA
02EA0:  MOVFF  661,FA9
02EA4:  BCF    FA6.6
02EA6:  BCF    FA6.7
02EA8:  BSF    FA6.0
02EAA:  MOVF   FA8,W
02EAC:  BTFSC  xBC.7
02EAE:  BSF    FF2.7
02EB0:  MOVWF  x65
02EB2:  INCF   x61,F
02EB4:  BTFSC  FD8.2
02EB6:  INCF   x62,F
02EB8:  MOVFF  FF2,6BD
02EBC:  BCF    FF2.7
02EBE:  MOVFF  662,FAA
02EC2:  MOVFF  661,FA9
02EC6:  BCF    FA6.6
02EC8:  BCF    FA6.7
02ECA:  BSF    FA6.0
02ECC:  MOVF   FA8,W
02ECE:  BTFSC  xBD.7
02ED0:  BSF    FF2.7
02ED2:  MOVWF  x66
02ED4:  INCF   x61,F
02ED6:  BTFSC  FD8.2
02ED8:  INCF   x62,F
02EDA:  MOVFF  FF2,6BE
02EDE:  BCF    FF2.7
02EE0:  MOVFF  662,FAA
02EE4:  MOVFF  661,FA9
02EE8:  BCF    FA6.6
02EEA:  BCF    FA6.7
02EEC:  BSF    FA6.0
02EEE:  MOVF   FA8,W
02EF0:  BTFSC  xBE.7
02EF2:  BSF    FF2.7
02EF4:  MOVWF  x67
02EF6:  CLRF   1B
02EF8:  BTFSC  FF2.7
02EFA:  BSF    1B.7
02EFC:  BCF    FF2.7
....................             //printf("on/off %d %d %d",on_adr,off_adr,real_button); 
....................             on_off_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button); 
02EFE:  CLRF   xDB
02F00:  MOVFF  663,6DA
02F04:  CLRF   xDD
02F06:  MOVLW  21
02F08:  MOVWF  xDC
02F0A:  MOVLB  0
02F0C:  CALL   041C
02F10:  BTFSC  1B.7
02F12:  BSF    FF2.7
02F14:  MOVFF  02,03
02F18:  MOVF   01,W
02F1A:  ADDLW  40
02F1C:  MOVWF  01
02F1E:  MOVLW  01
02F20:  ADDWFC 03,F
02F22:  MOVFF  01,6BC
02F26:  MOVFF  03,6BD
02F2A:  MOVFF  665,6BE
02F2E:  MOVFF  666,6BF
02F32:  MOVFF  03,6C1
02F36:  MOVFF  01,6C0
02F3A:  MOVFF  667,6C2
02F3E:  MOVLB  0
02F40:  GOTO   2440
....................             ++inputNumber; 
02F44:  MOVLB  6
02F46:  INCF   x63,F
....................             ++mempointer; 
02F48:  INCF   x61,F
02F4A:  BTFSC  FD8.2
02F4C:  INCF   x62,F
....................          break; 
02F4E:  MOVLB  0
02F50:  BRA    36B8
....................          case dimmer_switch: 
.................... #ifdef DEBUG   
....................             printf("loaded dimmer switch\n\r"); 
02F52:  MOVLW  6C
02F54:  MOVWF  FF6
02F56:  MOVLW  03
02F58:  MOVWF  FF7
02F5A:  MOVLW  00
02F5C:  MOVWF  FF8
02F5E:  CLRF   1B
02F60:  BTFSC  FF2.7
02F62:  BSF    1B.7
02F64:  BCF    FF2.7
02F66:  CALL   0F2A
02F6A:  BTFSC  1B.7
02F6C:  BSF    FF2.7
.................... #endif 
....................             unsigned int dim_adr=read_eeprom(++mempointer); 
02F6E:  MOVLB  6
02F70:  INCF   x61,F
02F72:  BTFSC  FD8.2
02F74:  INCF   x62,F
02F76:  MOVFF  FF2,6BC
02F7A:  BCF    FF2.7
02F7C:  MOVFF  662,FAA
02F80:  MOVFF  661,FA9
02F84:  BCF    FA6.6
02F86:  BCF    FA6.7
02F88:  BSF    FA6.0
02F8A:  MOVF   FA8,W
02F8C:  BTFSC  xBC.7
02F8E:  BSF    FF2.7
02F90:  MOVWF  x68
....................             on_adr=read_eeprom(++mempointer); 
02F92:  INCF   x61,F
02F94:  BTFSC  FD8.2
02F96:  INCF   x62,F
02F98:  MOVFF  FF2,6BC
02F9C:  BCF    FF2.7
02F9E:  MOVFF  662,FAA
02FA2:  MOVFF  661,FA9
02FA6:  BCF    FA6.6
02FA8:  BCF    FA6.7
02FAA:  BSF    FA6.0
02FAC:  MOVF   FA8,W
02FAE:  BTFSC  xBC.7
02FB0:  BSF    FF2.7
02FB2:  MOVWF  x65
....................             off_adr=read_eeprom(++mempointer); 
02FB4:  INCF   x61,F
02FB6:  BTFSC  FD8.2
02FB8:  INCF   x62,F
02FBA:  MOVFF  FF2,6BC
02FBE:  BCF    FF2.7
02FC0:  MOVFF  662,FAA
02FC4:  MOVFF  661,FA9
02FC8:  BCF    FA6.6
02FCA:  BCF    FA6.7
02FCC:  BSF    FA6.0
02FCE:  MOVF   FA8,W
02FD0:  BTFSC  xBC.7
02FD2:  BSF    FF2.7
02FD4:  MOVWF  x66
....................             real_button=read_eeprom(++mempointer); 
02FD6:  INCF   x61,F
02FD8:  BTFSC  FD8.2
02FDA:  INCF   x62,F
02FDC:  MOVFF  FF2,6BC
02FE0:  BCF    FF2.7
02FE2:  MOVFF  662,FAA
02FE6:  MOVFF  661,FA9
02FEA:  BCF    FA6.6
02FEC:  BCF    FA6.7
02FEE:  BSF    FA6.0
02FF0:  MOVF   FA8,W
02FF2:  BTFSC  xBC.7
02FF4:  BSF    FF2.7
02FF6:  MOVWF  x67
02FF8:  CLRF   1B
02FFA:  BTFSC  FF2.7
02FFC:  BSF    1B.7
02FFE:  BCF    FF2.7
....................             dimmer_init(dim_adr,on_adr, off_adr,&mydevices.myinputs[inputNumber],real_button); 
03000:  CLRF   xDB
03002:  MOVFF  663,6DA
03006:  CLRF   xDD
03008:  MOVLW  21
0300A:  MOVWF  xDC
0300C:  MOVLB  0
0300E:  CALL   041C
03012:  BTFSC  1B.7
03014:  BSF    FF2.7
03016:  MOVFF  02,03
0301A:  MOVF   01,W
0301C:  ADDLW  40
0301E:  MOVWF  01
03020:  MOVLW  01
03022:  ADDWFC 03,F
03024:  MOVFF  01,6BC
03028:  MOVFF  03,6BD
0302C:  MOVFF  668,6BE
03030:  MOVFF  665,6BF
03034:  MOVFF  666,6C0
03038:  MOVFF  03,6C2
0303C:  MOVFF  01,6C1
03040:  MOVFF  667,6C3
03044:  MOVLB  0
03046:  GOTO   249A
....................             ++inputNumber; 
0304A:  MOVLB  6
0304C:  INCF   x63,F
....................             ++mempointer; 
0304E:  INCF   x61,F
03050:  BTFSC  FD8.2
03052:  INCF   x62,F
....................          break; 
03054:  MOVLB  0
03056:  BRA    36B8
....................          case button_switch: 
....................          #ifdef DEBUG 
....................             printf("loaded button switch\n\r"); 
03058:  MOVLW  84
0305A:  MOVWF  FF6
0305C:  MOVLW  03
0305E:  MOVWF  FF7
03060:  MOVLW  00
03062:  MOVWF  FF8
03064:  CLRF   1B
03066:  BTFSC  FF2.7
03068:  BSF    1B.7
0306A:  BCF    FF2.7
0306C:  CALL   0F2A
03070:  BTFSC  1B.7
03072:  BSF    FF2.7
.................... #endif 
....................  
....................             on_adr=read_eeprom(++mempointer); 
03074:  MOVLB  6
03076:  INCF   x61,F
03078:  BTFSC  FD8.2
0307A:  INCF   x62,F
0307C:  MOVFF  FF2,6BC
03080:  BCF    FF2.7
03082:  MOVFF  662,FAA
03086:  MOVFF  661,FA9
0308A:  BCF    FA6.6
0308C:  BCF    FA6.7
0308E:  BSF    FA6.0
03090:  MOVF   FA8,W
03092:  BTFSC  xBC.7
03094:  BSF    FF2.7
03096:  MOVWF  x65
....................             off_adr=read_eeprom(++mempointer); 
03098:  INCF   x61,F
0309A:  BTFSC  FD8.2
0309C:  INCF   x62,F
0309E:  MOVFF  FF2,6BC
030A2:  BCF    FF2.7
030A4:  MOVFF  662,FAA
030A8:  MOVFF  661,FA9
030AC:  BCF    FA6.6
030AE:  BCF    FA6.7
030B0:  BSF    FA6.0
030B2:  MOVF   FA8,W
030B4:  BTFSC  xBC.7
030B6:  BSF    FF2.7
030B8:  MOVWF  x66
....................             real_button=read_eeprom(++mempointer); 
030BA:  INCF   x61,F
030BC:  BTFSC  FD8.2
030BE:  INCF   x62,F
030C0:  MOVFF  FF2,6BC
030C4:  BCF    FF2.7
030C6:  MOVFF  662,FAA
030CA:  MOVFF  661,FA9
030CE:  BCF    FA6.6
030D0:  BCF    FA6.7
030D2:  BSF    FA6.0
030D4:  MOVF   FA8,W
030D6:  BTFSC  xBC.7
030D8:  BSF    FF2.7
030DA:  MOVWF  x67
....................             int1 repeat=read_eeprom(++mempointer); 
030DC:  INCF   x61,F
030DE:  BTFSC  FD8.2
030E0:  INCF   x62,F
030E2:  MOVFF  FF2,6BC
030E6:  BCF    FF2.7
030E8:  MOVFF  662,FAA
030EC:  MOVFF  661,FA9
030F0:  BCF    FA6.6
030F2:  BCF    FA6.7
030F4:  BSF    FA6.0
030F6:  MOVF   FA8,W
030F8:  BTFSC  xBC.7
030FA:  BSF    FF2.7
030FC:  MOVWF  01
030FE:  BCF    x69.0
03100:  BTFSC  01.0
03102:  BSF    x69.0
03104:  CLRF   1B
03106:  BTFSC  FF2.7
03108:  BSF    1B.7
0310A:  BCF    FF2.7
....................             button_init(on_adr,off_adr,&mydevices.myinputs[inputNumber],real_button,repeat); 
0310C:  CLRF   xDB
0310E:  MOVFF  663,6DA
03112:  CLRF   xDD
03114:  MOVLW  21
03116:  MOVWF  xDC
03118:  MOVLB  0
0311A:  CALL   041C
0311E:  BTFSC  1B.7
03120:  BSF    FF2.7
03122:  MOVFF  02,03
03126:  MOVF   01,W
03128:  ADDLW  40
0312A:  MOVWF  01
0312C:  MOVLW  01
0312E:  ADDWFC 03,F
03130:  MOVFF  01,6BC
03134:  MOVLB  6
03136:  MOVFF  03,6BD
0313A:  MOVLW  00
0313C:  BTFSC  x69.0
0313E:  MOVLW  01
03140:  MOVFF  665,6BF
03144:  MOVFF  666,6C0
03148:  MOVFF  03,6C2
0314C:  MOVFF  01,6C1
03150:  MOVFF  667,6C3
03154:  MOVWF  xC4
03156:  MOVLB  0
03158:  GOTO   265E
....................             ++inputNumber; 
0315C:  MOVLB  6
0315E:  INCF   x63,F
....................             ++mempointer; 
03160:  INCF   x61,F
03162:  BTFSC  FD8.2
03164:  INCF   x62,F
....................          break; 
03166:  MOVLB  0
03168:  BRA    36B8
....................          case timer: 
....................          #ifdef DEBUG    
....................             printf("loaded timer\n\r"); 
0316A:  MOVLW  9C
0316C:  MOVWF  FF6
0316E:  MOVLW  03
03170:  MOVWF  FF7
03172:  MOVLW  00
03174:  MOVWF  FF8
03176:  CLRF   1B
03178:  BTFSC  FF2.7
0317A:  BSF    1B.7
0317C:  BCF    FF2.7
0317E:  CALL   0F2A
03182:  BTFSC  1B.7
03184:  BSF    FF2.7
.................... #endif 
....................             ++mempointer; 
03186:  MOVLB  6
03188:  INCF   x61,F
0318A:  BTFSC  FD8.2
0318C:  INCF   x62,F
....................             unsigned int start_adr[8]; 
....................           //  printf("EEPROM start %d %Lu\n\r",read_eeprom(mempointer),mempointer); 
....................             memToArray(start_adr,mempointer,8); 
0318E:  MOVLW  06
03190:  MOVWF  xBD
03192:  MOVLW  6A
03194:  MOVWF  xBC
03196:  MOVFF  662,6BF
0319A:  MOVFF  661,6BE
0319E:  MOVLW  08
031A0:  MOVWF  xC0
031A2:  MOVLB  0
031A4:  CALL   26C0
....................             mempointer+=8; 
031A8:  MOVLW  08
031AA:  MOVLB  6
031AC:  ADDWF  x61,F
031AE:  MOVLW  00
031B0:  ADDWFC x62,F
....................             unsigned int stop_adr[8]; 
....................           //  printf("EEPROM stop %d\n\r",read_eeprom(mempointer)); 
....................             memToArray(stop_adr,mempointer,8); 
031B2:  MOVLW  06
031B4:  MOVWF  xBD
031B6:  MOVLW  72
031B8:  MOVWF  xBC
031BA:  MOVFF  662,6BF
031BE:  MOVFF  661,6BE
031C2:  MOVLW  08
031C4:  MOVWF  xC0
031C6:  MOVLB  0
031C8:  CALL   26C0
....................             mempointer+=8;           
031CC:  MOVLW  08
031CE:  MOVLB  6
031D0:  ADDWF  x61,F
031D2:  MOVLW  00
031D4:  ADDWFC x62,F
....................             unsigned int out_on=read_eeprom(mempointer); 
....................           //  printf("EEPROM on %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int out_off=read_eeprom(++mempointer); 
....................           //  printf("EEPROM off %d\n\r",read_eeprom(mempointer)); 
....................             unsigned int type=read_eeprom(++mempointer); 
....................             int16 timeToAct=read_eeprom(++mempointer); 
031D6:  MOVFF  FF2,6BC
031DA:  BCF    FF2.7
031DC:  MOVFF  662,FAA
031E0:  MOVFF  661,FA9
031E4:  BCF    FA6.6
031E6:  BCF    FA6.7
031E8:  BSF    FA6.0
031EA:  MOVF   FA8,W
031EC:  BTFSC  xBC.7
031EE:  BSF    FF2.7
031F0:  MOVWF  x7A
031F2:  INCF   x61,F
031F4:  BTFSC  FD8.2
031F6:  INCF   x62,F
031F8:  MOVFF  FF2,6BD
031FC:  BCF    FF2.7
031FE:  MOVFF  662,FAA
03202:  MOVFF  661,FA9
03206:  BCF    FA6.6
03208:  BCF    FA6.7
0320A:  BSF    FA6.0
0320C:  MOVF   FA8,W
0320E:  BTFSC  xBD.7
03210:  BSF    FF2.7
03212:  MOVWF  x7B
03214:  INCF   x61,F
03216:  BTFSC  FD8.2
03218:  INCF   x62,F
0321A:  MOVFF  FF2,6BE
0321E:  BCF    FF2.7
03220:  MOVFF  662,FAA
03224:  MOVFF  661,FA9
03228:  BCF    FA6.6
0322A:  BCF    FA6.7
0322C:  BSF    FA6.0
0322E:  MOVF   FA8,W
03230:  BTFSC  xBE.7
03232:  BSF    FF2.7
03234:  MOVWF  x7C
03236:  INCF   x61,F
03238:  BTFSC  FD8.2
0323A:  INCF   x62,F
0323C:  MOVFF  FF2,6BF
03240:  BCF    FF2.7
03242:  MOVFF  662,FAA
03246:  MOVFF  661,FA9
0324A:  BCF    FA6.6
0324C:  BCF    FA6.7
0324E:  BSF    FA6.0
03250:  MOVF   FA8,W
03252:  BTFSC  xBF.7
03254:  BSF    FF2.7
03256:  CLRF   x7E
03258:  MOVWF  x7D
....................             timeToAct<<=8; 
0325A:  MOVFF  67D,67E
0325E:  CLRF   x7D
....................             timeToAct|=read_eeprom(++mempointer); 
03260:  INCF   x61,F
03262:  BTFSC  FD8.2
03264:  INCF   x62,F
03266:  MOVFF  FF2,6BC
0326A:  BCF    FF2.7
0326C:  MOVFF  662,FAA
03270:  MOVFF  661,FA9
03274:  BCF    FA6.6
03276:  BCF    FA6.7
03278:  BSF    FA6.0
0327A:  MOVF   FA8,W
0327C:  BTFSC  xBC.7
0327E:  BSF    FF2.7
03280:  IORWF  x7D,F
03282:  CLRF   1B
03284:  BTFSC  FF2.7
03286:  BSF    1B.7
03288:  BCF    FF2.7
....................             timer_init(start_adr,stop_adr,out_on,out_off,&mydevices.myinputs[inputNumber],type, timeToAct); 
0328A:  CLRF   xDB
0328C:  MOVFF  663,6DA
03290:  CLRF   xDD
03292:  MOVLW  21
03294:  MOVWF  xDC
03296:  MOVLB  0
03298:  CALL   041C
0329C:  BTFSC  1B.7
0329E:  BSF    FF2.7
032A0:  MOVFF  02,03
032A4:  MOVF   01,W
032A6:  ADDLW  40
032A8:  MOVWF  01
032AA:  MOVLW  01
032AC:  ADDWFC 03,F
032AE:  MOVFF  01,6BC
032B2:  MOVLB  6
032B4:  MOVFF  03,6BD
032B8:  MOVLW  06
032BA:  MOVWF  xBF
032BC:  MOVLW  6A
032BE:  MOVWF  xBE
032C0:  MOVLW  06
032C2:  MOVWF  xC1
032C4:  MOVLW  72
032C6:  MOVWF  xC0
032C8:  MOVFF  67A,6C2
032CC:  MOVFF  67B,6C3
032D0:  MOVFF  03,6C5
032D4:  MOVFF  01,6C4
032D8:  MOVFF  67C,6C6
032DC:  MOVFF  67E,6C8
032E0:  MOVFF  67D,6C7
032E4:  MOVLB  0
032E6:  GOTO   274C
....................             ++inputNumber; 
032EA:  MOVLB  6
032EC:  INCF   x63,F
....................             ++mempointer; 
032EE:  INCF   x61,F
032F0:  BTFSC  FD8.2
032F2:  INCF   x62,F
....................          break; 
032F4:  MOVLB  0
032F6:  BRA    36B8
....................          case dimmer: 
....................          #ifdef DEBUG   
....................             printf("loaded dimmer out\n\r"); 
032F8:  MOVLW  AC
032FA:  MOVWF  FF6
032FC:  MOVLW  03
032FE:  MOVWF  FF7
03300:  MOVLW  00
03302:  MOVWF  FF8
03304:  CLRF   1B
03306:  BTFSC  FF2.7
03308:  BSF    1B.7
0330A:  BCF    FF2.7
0330C:  CALL   0F2A
03310:  BTFSC  1B.7
03312:  BSF    FF2.7
.................... #endif 
....................  
....................             unsigned int _dim_adr[8]; 
....................             memToArray(_dim_adr,mempointer,8); 
03314:  MOVLW  06
03316:  MOVLB  6
03318:  MOVWF  xBD
0331A:  MOVLW  7F
0331C:  MOVWF  xBC
0331E:  MOVFF  662,6BF
03322:  MOVFF  661,6BE
03326:  MOVLW  08
03328:  MOVWF  xC0
0332A:  MOVLB  0
0332C:  CALL   26C0
....................             mempointer+=8; 
03330:  MOVLW  08
03332:  MOVLB  6
03334:  ADDWF  x61,F
03336:  MOVLW  00
03338:  ADDWFC x62,F
....................             unsigned int _on_adr[8]; 
....................             memToArray(_on_adr,mempointer,8); 
0333A:  MOVLW  06
0333C:  MOVWF  xBD
0333E:  MOVLW  87
03340:  MOVWF  xBC
03342:  MOVFF  662,6BF
03346:  MOVFF  661,6BE
0334A:  MOVLW  08
0334C:  MOVWF  xC0
0334E:  MOVLB  0
03350:  CALL   26C0
....................             mempointer+=8;   
03354:  MOVLW  08
03356:  MOVLB  6
03358:  ADDWF  x61,F
0335A:  MOVLW  00
0335C:  ADDWFC x62,F
....................             unsigned int _off_adr[8]; 
....................             memToArray(_off_adr,mempointer,8); 
0335E:  MOVLW  06
03360:  MOVWF  xBD
03362:  MOVLW  8F
03364:  MOVWF  xBC
03366:  MOVFF  662,6BF
0336A:  MOVFF  661,6BE
0336E:  MOVLW  08
03370:  MOVWF  xC0
03372:  MOVLB  0
03374:  CALL   26C0
....................             mempointer+=8;   
03378:  MOVLW  08
0337A:  MOVLB  6
0337C:  ADDWF  x61,F
0337E:  MOVLW  00
03380:  ADDWFC x62,F
....................             unsigned int output_pin=read_eeprom(++mempointer); 
03382:  INCF   x61,F
03384:  BTFSC  FD8.2
03386:  INCF   x62,F
03388:  MOVFF  FF2,6BC
0338C:  BCF    FF2.7
0338E:  MOVFF  662,FAA
03392:  MOVFF  661,FA9
03396:  BCF    FA6.6
03398:  BCF    FA6.7
0339A:  BSF    FA6.0
0339C:  MOVF   FA8,W
0339E:  BTFSC  xBC.7
033A0:  BSF    FF2.7
033A2:  MOVWF  x97
033A4:  CLRF   1B
033A6:  BTFSC  FF2.7
033A8:  BSF    1B.7
033AA:  BCF    FF2.7
....................             dimmer_out_init(_dim_adr,_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
033AC:  CLRF   xDB
033AE:  MOVFF  664,6DA
033B2:  CLRF   xDD
033B4:  MOVLW  2F
033B6:  MOVWF  xDC
033B8:  MOVLB  0
033BA:  CALL   041C
033BE:  BTFSC  1B.7
033C0:  BSF    FF2.7
033C2:  MOVFF  02,03
033C6:  MOVF   01,W
033C8:  ADDLW  8A
033CA:  MOVWF  01
033CC:  MOVLW  02
033CE:  ADDWFC 03,F
033D0:  MOVFF  01,6BC
033D4:  MOVLB  6
033D6:  MOVFF  03,6BD
033DA:  MOVLW  06
033DC:  MOVWF  xBF
033DE:  MOVLW  7F
033E0:  MOVWF  xBE
033E2:  MOVLW  06
033E4:  MOVWF  xC1
033E6:  MOVLW  87
033E8:  MOVWF  xC0
033EA:  MOVLW  06
033EC:  MOVWF  xC3
033EE:  MOVLW  8F
033F0:  MOVWF  xC2
033F2:  MOVFF  03,6C5
033F6:  MOVFF  01,6C4
033FA:  MOVFF  697,6C6
033FE:  MOVLB  0
03400:  GOTO   2942
....................             ++outputNumber; 
03404:  MOVLB  6
03406:  INCF   x64,F
....................             ++mempointer; 
03408:  INCF   x61,F
0340A:  BTFSC  FD8.2
0340C:  INCF   x62,F
....................          break; 
0340E:  MOVLB  0
03410:  BRA    36B8
....................          case shutter: 
....................          #ifdef DEBUG   
....................             printf("loaded shutter out\n\r"); 
03412:  MOVLW  C0
03414:  MOVWF  FF6
03416:  MOVLW  03
03418:  MOVWF  FF7
0341A:  MOVLW  00
0341C:  MOVWF  FF8
0341E:  CLRF   1B
03420:  BTFSC  FF2.7
03422:  BSF    1B.7
03424:  BCF    FF2.7
03426:  CALL   0F2A
0342A:  BTFSC  1B.7
0342C:  BSF    FF2.7
.................... #endif 
....................  
....................             unsigned int up_adr[8]; 
....................             memToArray(up_adr,mempointer,8); 
0342E:  MOVLW  06
03430:  MOVLB  6
03432:  MOVWF  xBD
03434:  MOVLW  98
03436:  MOVWF  xBC
03438:  MOVFF  662,6BF
0343C:  MOVFF  661,6BE
03440:  MOVLW  08
03442:  MOVWF  xC0
03444:  MOVLB  0
03446:  CALL   26C0
....................             mempointer+=8; 
0344A:  MOVLW  08
0344C:  MOVLB  6
0344E:  ADDWF  x61,F
03450:  MOVLW  00
03452:  ADDWFC x62,F
....................             unsigned int down_adr[8]; 
....................             memToArray(down_adr,mempointer,8); 
03454:  MOVLW  06
03456:  MOVWF  xBD
03458:  MOVLW  A0
0345A:  MOVWF  xBC
0345C:  MOVFF  662,6BF
03460:  MOVFF  661,6BE
03464:  MOVLW  08
03466:  MOVWF  xC0
03468:  MOVLB  0
0346A:  CALL   26C0
....................             mempointer+=8;   
0346E:  MOVLW  08
03470:  MOVLB  6
03472:  ADDWF  x61,F
03474:  MOVLW  00
03476:  ADDWFC x62,F
....................             unsigned int fullup_adr[8]; 
....................             memToArray(fullup_adr,mempointer,8); 
03478:  MOVLW  06
0347A:  MOVWF  xBD
0347C:  MOVLW  A8
0347E:  MOVWF  xBC
03480:  MOVFF  662,6BF
03484:  MOVFF  661,6BE
03488:  MOVLW  08
0348A:  MOVWF  xC0
0348C:  MOVLB  0
0348E:  CALL   26C0
....................             mempointer+=8;   
03492:  MOVLW  08
03494:  MOVLB  6
03496:  ADDWF  x61,F
03498:  MOVLW  00
0349A:  ADDWFC x62,F
....................             unsigned int fulldown_adr[8]; 
....................             memToArray(fulldown_adr,mempointer,8); 
0349C:  MOVLW  06
0349E:  MOVWF  xBD
034A0:  MOVLW  B0
034A2:  MOVWF  xBC
034A4:  MOVFF  662,6BF
034A8:  MOVFF  661,6BE
034AC:  MOVLW  08
034AE:  MOVWF  xC0
034B0:  MOVLB  0
034B2:  CALL   26C0
....................             mempointer+=8; 
034B6:  MOVLW  08
034B8:  MOVLB  6
034BA:  ADDWF  x61,F
034BC:  MOVLW  00
034BE:  ADDWFC x62,F
....................             unsigned int up_output_pin=read_eeprom(++mempointer); 
....................             unsigned int down_output_pin=read_eeprom(++mempointer); 
....................             unsigned int shortMoveTime=read_eeprom(++mempointer); 
....................             unsigned int LongMoveTime=read_eeprom(++mempointer); 
034C0:  INCF   x61,F
034C2:  BTFSC  FD8.2
034C4:  INCF   x62,F
034C6:  MOVFF  FF2,6BC
034CA:  BCF    FF2.7
034CC:  MOVFF  662,FAA
034D0:  MOVFF  661,FA9
034D4:  BCF    FA6.6
034D6:  BCF    FA6.7
034D8:  BSF    FA6.0
034DA:  MOVF   FA8,W
034DC:  BTFSC  xBC.7
034DE:  BSF    FF2.7
034E0:  MOVWF  xB8
034E2:  INCF   x61,F
034E4:  BTFSC  FD8.2
034E6:  INCF   x62,F
034E8:  MOVFF  FF2,6BD
034EC:  BCF    FF2.7
034EE:  MOVFF  662,FAA
034F2:  MOVFF  661,FA9
034F6:  BCF    FA6.6
034F8:  BCF    FA6.7
034FA:  BSF    FA6.0
034FC:  MOVF   FA8,W
034FE:  BTFSC  xBD.7
03500:  BSF    FF2.7
03502:  MOVWF  xB9
03504:  INCF   x61,F
03506:  BTFSC  FD8.2
03508:  INCF   x62,F
0350A:  MOVFF  FF2,6BE
0350E:  BCF    FF2.7
03510:  MOVFF  662,FAA
03514:  MOVFF  661,FA9
03518:  BCF    FA6.6
0351A:  BCF    FA6.7
0351C:  BSF    FA6.0
0351E:  MOVF   FA8,W
03520:  BTFSC  xBE.7
03522:  BSF    FF2.7
03524:  MOVWF  xBA
03526:  INCF   x61,F
03528:  BTFSC  FD8.2
0352A:  INCF   x62,F
0352C:  MOVFF  FF2,6BF
03530:  BCF    FF2.7
03532:  MOVFF  662,FAA
03536:  MOVFF  661,FA9
0353A:  BCF    FA6.6
0353C:  BCF    FA6.7
0353E:  BSF    FA6.0
03540:  MOVF   FA8,W
03542:  BTFSC  xBF.7
03544:  BSF    FF2.7
03546:  MOVWF  xBB
03548:  CLRF   1B
0354A:  BTFSC  FF2.7
0354C:  BSF    1B.7
0354E:  BCF    FF2.7
....................             shutter_out_init(up_adr,down_adr,fullup_adr,fulldown_adr,&mydevices.myoutputs[outputNumber],up_output_pin,down_output_pin,shortMoveTime,LongMoveTime); 
03550:  CLRF   xDB
03552:  MOVFF  664,6DA
03556:  CLRF   xDD
03558:  MOVLW  2F
0355A:  MOVWF  xDC
0355C:  MOVLB  0
0355E:  CALL   041C
03562:  BTFSC  1B.7
03564:  BSF    FF2.7
03566:  MOVFF  02,03
0356A:  MOVF   01,W
0356C:  ADDLW  8A
0356E:  MOVWF  01
03570:  MOVLW  02
03572:  ADDWFC 03,F
03574:  MOVFF  01,6BC
03578:  MOVLB  6
0357A:  MOVFF  03,6BD
0357E:  MOVLW  06
03580:  MOVWF  xBF
03582:  MOVLW  98
03584:  MOVWF  xBE
03586:  MOVLW  06
03588:  MOVWF  xC1
0358A:  MOVLW  A0
0358C:  MOVWF  xC0
0358E:  MOVLW  06
03590:  MOVWF  xC3
03592:  MOVLW  A8
03594:  MOVWF  xC2
03596:  MOVLW  06
03598:  MOVWF  xC5
0359A:  MOVLW  B0
0359C:  MOVWF  xC4
0359E:  MOVFF  03,6C7
035A2:  MOVFF  01,6C6
035A6:  MOVFF  6B8,6C8
035AA:  MOVFF  6B9,6C9
035AE:  MOVFF  6BA,6CA
035B2:  MOVFF  6BB,6CB
035B6:  MOVLB  0
035B8:  GOTO   2AC6
....................             ++outputNumber; 
035BC:  MOVLB  6
035BE:  INCF   x64,F
....................             ++mempointer; 
035C0:  INCF   x61,F
035C2:  BTFSC  FD8.2
035C4:  INCF   x62,F
....................          break; 
035C6:  MOVLB  0
035C8:  BRA    36B8
....................          case _on_off: 
....................          #ifdef DEBUG   
....................             printf("loaded on/off out\n\r"); 
035CA:  MOVLW  D6
035CC:  MOVWF  FF6
035CE:  MOVLW  03
035D0:  MOVWF  FF7
035D2:  MOVLW  00
035D4:  MOVWF  FF8
035D6:  CLRF   1B
035D8:  BTFSC  FF2.7
035DA:  BSF    1B.7
035DC:  BCF    FF2.7
035DE:  CALL   0F2A
035E2:  BTFSC  1B.7
035E4:  BSF    FF2.7
.................... #endif 
....................  
....................             memToArray(_on_adr,mempointer,8); 
035E6:  MOVLW  06
035E8:  MOVLB  6
035EA:  MOVWF  xBD
035EC:  MOVLW  87
035EE:  MOVWF  xBC
035F0:  MOVFF  662,6BF
035F4:  MOVFF  661,6BE
035F8:  MOVLW  08
035FA:  MOVWF  xC0
035FC:  MOVLB  0
035FE:  CALL   26C0
....................             mempointer+=8;   
03602:  MOVLW  08
03604:  MOVLB  6
03606:  ADDWF  x61,F
03608:  MOVLW  00
0360A:  ADDWFC x62,F
....................             memToArray(_off_adr,mempointer,8); 
0360C:  MOVLW  06
0360E:  MOVWF  xBD
03610:  MOVLW  8F
03612:  MOVWF  xBC
03614:  MOVFF  662,6BF
03618:  MOVFF  661,6BE
0361C:  MOVLW  08
0361E:  MOVWF  xC0
03620:  MOVLB  0
03622:  CALL   26C0
....................             mempointer+=8;   
03626:  MOVLW  08
03628:  MOVLB  6
0362A:  ADDWF  x61,F
0362C:  MOVLW  00
0362E:  ADDWFC x62,F
....................             output_pin=read_eeprom(++mempointer); 
03630:  INCF   x61,F
03632:  BTFSC  FD8.2
03634:  INCF   x62,F
03636:  MOVFF  FF2,6BC
0363A:  BCF    FF2.7
0363C:  MOVFF  662,FAA
03640:  MOVFF  661,FA9
03644:  BCF    FA6.6
03646:  BCF    FA6.7
03648:  BSF    FA6.0
0364A:  MOVF   FA8,W
0364C:  BTFSC  xBC.7
0364E:  BSF    FF2.7
03650:  MOVWF  x97
03652:  CLRF   1B
03654:  BTFSC  FF2.7
03656:  BSF    1B.7
03658:  BCF    FF2.7
....................             onOff_out_init(_on_adr,_off_adr,&mydevices.myoutputs[outputNumber],output_pin); 
0365A:  CLRF   xDB
0365C:  MOVFF  664,6DA
03660:  CLRF   xDD
03662:  MOVLW  2F
03664:  MOVWF  xDC
03666:  MOVLB  0
03668:  CALL   041C
0366C:  BTFSC  1B.7
0366E:  BSF    FF2.7
03670:  MOVFF  02,03
03674:  MOVF   01,W
03676:  ADDLW  8A
03678:  MOVWF  01
0367A:  MOVLW  02
0367C:  ADDWFC 03,F
0367E:  MOVFF  01,6BC
03682:  MOVLB  6
03684:  MOVFF  03,6BD
03688:  MOVLW  06
0368A:  MOVWF  xBF
0368C:  MOVLW  87
0368E:  MOVWF  xBE
03690:  MOVLW  06
03692:  MOVWF  xC1
03694:  MOVLW  8F
03696:  MOVWF  xC0
03698:  MOVFF  03,6C3
0369C:  MOVFF  01,6C2
036A0:  MOVFF  697,6C4
036A4:  MOVLB  0
036A6:  GOTO   2D08
....................             ++outputNumber; 
036AA:  MOVLB  6
036AC:  INCF   x64,F
....................             ++mempointer; 
036AE:  INCF   x61,F
036B0:  BTFSC  FD8.2
036B2:  INCF   x62,F
....................          break; 
036B4:  MOVLB  0
036B6:  BRA    36B8
....................       } 
....................     
....................    } 
036B8:  MOVLB  6
036BA:  GOTO   2E08
....................    mydevices.numberOfInputs=inputNumber; 
036BE:  MOVFF  663,13E
....................    mydevices.numberOfOutputs=outputNumber; 
036C2:  MOVFF  664,13F
....................     
.................... } 
036C6:  MOVLB  0
036C8:  GOTO   8710 (RETURN)
....................  
.................... ///////INPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_init(unsigned int dim_adr,unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer_switch); 
*
02268:  MOVFF  63A,672
0226C:  MOVFF  639,671
02270:  MOVLB  6
02272:  CLRF   x73
02274:  MOVLB  0
02276:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,dim_adr); 
02278:  MOVLB  6
0227A:  INCF   x39,F
0227C:  BTFSC  FD8.2
0227E:  INCF   x3A,F
02280:  MOVFF  63A,672
02284:  MOVFF  639,671
02288:  MOVFF  661,673
0228C:  MOVLB  0
0228E:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,on_adr); 
02290:  MOVLB  6
02292:  INCF   x39,F
02294:  BTFSC  FD8.2
02296:  INCF   x3A,F
02298:  MOVFF  63A,672
0229C:  MOVFF  639,671
022A0:  MOVFF  662,673
022A4:  MOVLB  0
022A6:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,off_adr); 
022A8:  MOVLB  6
022AA:  INCF   x39,F
022AC:  BTFSC  FD8.2
022AE:  INCF   x3A,F
022B0:  MOVFF  63A,672
022B4:  MOVFF  639,671
022B8:  MOVFF  663,673
022BC:  MOVLB  0
022BE:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,real_button); 
022C0:  MOVLB  6
022C2:  INCF   x39,F
022C4:  BTFSC  FD8.2
022C6:  INCF   x3A,F
022C8:  MOVFF  63A,672
022CC:  MOVFF  639,671
022D0:  MOVFF  664,673
022D4:  MOVLB  0
022D6:  RCALL  2158
....................    ++writeMemPointer; 
022D8:  MOVLB  6
022DA:  INCF   x39,F
022DC:  BTFSC  FD8.2
022DE:  INCF   x3A,F
....................     
.................... } 
022E0:  MOVLB  0
022E2:  GOTO   85C6 (RETURN)
.................... void eeprom_on_off_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button) 
.................... { 
....................    _write_eeprom(writeMemPointer,on_off_switch); 
*
02202:  MOVFF  63A,672
02206:  MOVFF  639,671
0220A:  MOVLW  01
0220C:  MOVLB  6
0220E:  MOVWF  x73
02210:  MOVLB  0
02212:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,on_adr); 
02214:  MOVLB  6
02216:  INCF   x39,F
02218:  BTFSC  FD8.2
0221A:  INCF   x3A,F
0221C:  MOVFF  63A,672
02220:  MOVFF  639,671
02224:  MOVFF  661,673
02228:  MOVLB  0
0222A:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,off_adr); 
0222C:  MOVLB  6
0222E:  INCF   x39,F
02230:  BTFSC  FD8.2
02232:  INCF   x3A,F
02234:  MOVFF  63A,672
02238:  MOVFF  639,671
0223C:  MOVFF  662,673
02240:  MOVLB  0
02242:  RCALL  2158
....................    _write_eeprom(++writeMemPointer,real_button); 
02244:  MOVLB  6
02246:  INCF   x39,F
02248:  BTFSC  FD8.2
0224A:  INCF   x3A,F
0224C:  MOVFF  63A,672
02250:  MOVFF  639,671
02254:  MOVFF  663,673
02258:  MOVLB  0
0225A:  RCALL  2158
....................    ++writeMemPointer; 
0225C:  MOVLB  6
0225E:  INCF   x39,F
02260:  BTFSC  FD8.2
02262:  INCF   x3A,F
.................... } 
02264:  MOVLB  0
02266:  RETLW  00
.................... void eeprom_button_init(unsigned int on_adr,unsigned int off_adr,unsigned int real_button,int1 repeat) 
.................... { 
....................    _write_eeprom(writeMemPointer,button_switch); 
....................    _write_eeprom(++writeMemPointer,on_adr); 
....................    _write_eeprom(++writeMemPointer,off_adr); 
....................    _write_eeprom(++writeMemPointer,real_button); 
....................    _write_eeprom(++writeMemPointer,repeat); 
....................     
....................    ++writeMemPointer; 
.................... } 
.................... ///////OUTPUTS INITIALIZATION////////////////////////////////////////////////// 
.................... void eeprom_dimmer_out_init(unsigned int *dim_adr,unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,dimmer); 
*
023A4:  MOVFF  63A,672
023A8:  MOVFF  639,671
023AC:  MOVLW  65
023AE:  MOVLB  6
023B0:  MOVWF  x73
023B2:  MOVLB  0
023B4:  RCALL  2158
....................    ++writeMemPointer; 
023B6:  MOVLB  6
023B8:  INCF   x39,F
023BA:  BTFSC  FD8.2
023BC:  INCF   x3A,F
....................    ArrayToMem(dim_adr,writeMemPointer,8); 
023BE:  MOVFF  662,669
023C2:  MOVFF  661,668
023C6:  MOVFF  63A,66B
023CA:  MOVFF  639,66A
023CE:  MOVLW  08
023D0:  MOVWF  x6C
023D2:  MOVLB  0
023D4:  RCALL  22E6
....................    writeMemPointer+=8; 
023D6:  MOVLW  08
023D8:  MOVLB  6
023DA:  ADDWF  x39,F
023DC:  MOVLW  00
023DE:  ADDWFC x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
023E0:  MOVFF  664,669
023E4:  MOVFF  663,668
023E8:  MOVFF  63A,66B
023EC:  MOVFF  639,66A
023F0:  MOVLW  08
023F2:  MOVWF  x6C
023F4:  MOVLB  0
023F6:  RCALL  22E6
....................    writeMemPointer+=8; 
023F8:  MOVLW  08
023FA:  MOVLB  6
023FC:  ADDWF  x39,F
023FE:  MOVLW  00
02400:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
02402:  MOVFF  666,669
02406:  MOVFF  665,668
0240A:  MOVFF  63A,66B
0240E:  MOVFF  639,66A
02412:  MOVLW  08
02414:  MOVWF  x6C
02416:  MOVLB  0
02418:  RCALL  22E6
....................    writeMemPointer+=8; 
0241A:  MOVLW  08
0241C:  MOVLB  6
0241E:  ADDWF  x39,F
02420:  MOVLW  00
02422:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
02424:  MOVFF  63A,672
02428:  MOVFF  639,671
0242C:  MOVFF  667,673
02430:  MOVLB  0
02432:  RCALL  2158
....................    ++writeMemPointer; 
02434:  MOVLB  6
02436:  INCF   x39,F
02438:  BTFSC  FD8.2
0243A:  INCF   x3A,F
.................... } 
0243C:  MOVLB  0
0243E:  RETLW  00
.................... void eeprom_onOff_out_init(unsigned int *on_adr,unsigned int *off_adr,unsigned int output_pin) 
.................... { 
....................    _write_eeprom(writeMemPointer,_on_off); 
*
0232A:  MOVFF  63A,672
0232E:  MOVFF  639,671
02332:  MOVLW  64
02334:  MOVLB  6
02336:  MOVWF  x73
02338:  MOVLB  0
0233A:  RCALL  2158
....................    ++writeMemPointer; 
0233C:  MOVLB  6
0233E:  INCF   x39,F
02340:  BTFSC  FD8.2
02342:  INCF   x3A,F
....................    ArrayToMem(on_adr,writeMemPointer,8); 
02344:  MOVFF  662,669
02348:  MOVFF  661,668
0234C:  MOVFF  63A,66B
02350:  MOVFF  639,66A
02354:  MOVLW  08
02356:  MOVWF  x6C
02358:  MOVLB  0
0235A:  RCALL  22E6
....................    writeMemPointer+=8; 
0235C:  MOVLW  08
0235E:  MOVLB  6
02360:  ADDWF  x39,F
02362:  MOVLW  00
02364:  ADDWFC x3A,F
....................    ArrayToMem(off_adr,writeMemPointer,8); 
02366:  MOVFF  664,669
0236A:  MOVFF  663,668
0236E:  MOVFF  63A,66B
02372:  MOVFF  639,66A
02376:  MOVLW  08
02378:  MOVWF  x6C
0237A:  MOVLB  0
0237C:  RCALL  22E6
....................    writeMemPointer+=8; 
0237E:  MOVLW  08
02380:  MOVLB  6
02382:  ADDWF  x39,F
02384:  MOVLW  00
02386:  ADDWFC x3A,F
....................    _write_eeprom(writeMemPointer,output_pin); 
02388:  MOVFF  63A,672
0238C:  MOVFF  639,671
02390:  MOVFF  665,673
02394:  MOVLB  0
02396:  RCALL  2158
....................    ++writeMemPointer; 
02398:  MOVLB  6
0239A:  INCF   x39,F
0239C:  BTFSC  FD8.2
0239E:  INCF   x3A,F
.................... } 
023A0:  MOVLB  0
023A2:  RETLW  00
....................  
.................... void eeprom_shutter_out_init(unsigned int *up_adr,unsigned int *down_adr,unsigned int *fullup_adr,unsigned int *fulldown_adr, 
.................... unsigned int up_output_pin,unsigned int down_output_pin,unsigned int shortMoveTime,unsigned int LongMoveTime) 
.................... { 
....................  _write_eeprom(writeMemPointer,shutter); 
....................    ++writeMemPointer; 
....................    ArrayToMem(up_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(down_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(fullup_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(fulldown_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,up_output_pin); 
....................    _write_eeprom(++writeMemPointer,down_output_pin); 
....................    _write_eeprom(++writeMemPointer,shortMoveTime); 
....................    _write_eeprom(++writeMemPointer,LongMoveTime); 
....................    ++writeMemPointer; 
.................... } 
.................... void eeprom_timer_init(unsigned int *start_adr,unsigned int *stop_adr,unsigned int out_on,unsigned int out_off,timer_type type, int16  timeToAct) 
.................... { 
....................    _write_eeprom(writeMemPointer,timer); 
....................       ++writeMemPointer; 
....................    ArrayToMem(start_adr,writeMemPointer,8); 
....................    printf("Start adr=%d",start_adr[0]); 
....................    writeMemPointer+=8; 
....................    ArrayToMem(stop_adr,writeMemPointer,8); 
....................    writeMemPointer+=8; 
....................    _write_eeprom(writeMemPointer,out_on); 
....................    _write_eeprom(++writeMemPointer,out_off); 
....................    _write_eeprom(++writeMemPointer,type); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,1)); 
....................    _write_eeprom(++writeMemPointer,MAKE8(timeToAct,0)); 
....................    ++writeMemPointer; 
.................... } 
....................  
.................... ////////////////////////////////////////// 
.................... //apagar 
.................... volatile unsigned int32 clock; 
.................... volatile unsigned int1 secondFlag; 
.................... volatile unsigned int1 syncError; 
.................... volatile unsigned int1 oscError=0; 
.................... volatile unsigned long misscounter; 
.................... //dimmer constants 
.................... static int TimeBase=0; 
.................... static int32 reg=39; 
.................... int16 ledErrorCounter; 
.................... //dimmer end 
....................  
.................... //struct switches msw; 
.................... #include "switch_functions.c" 
....................  
....................  
.................... void process_onOff(struct on_off_switch *sw) 
.................... { 
....................    if((sw->current_state==button_pressed) && (sw-> previous_state == button_depressed)) 
*
00864:  MOVLW  06
00866:  MOVLB  6
00868:  ADDWF  xDC,W
0086A:  MOVWF  FE9
0086C:  MOVLW  00
0086E:  ADDWFC xDD,W
00870:  MOVWF  FEA
00872:  MOVLW  00
00874:  BTFSC  FEF.0
00876:  MOVLW  01
00878:  ANDLW  01
0087A:  BNZ   0958
0087C:  MOVLW  06
0087E:  ADDWF  xDC,W
00880:  MOVWF  FE9
00882:  MOVLW  00
00884:  ADDWFC xDD,W
00886:  MOVWF  FEA
00888:  MOVLW  00
0088A:  BTFSC  FEF.1
0088C:  MOVLW  01
0088E:  ANDLW  01
00890:  SUBLW  01
00892:  BNZ   0958
....................    { 
....................       printf_("STATE %u",sw->current_state); 
....................       sw-> previous_state = button_pressed; 
00894:  MOVLW  06
00896:  ADDWF  xDC,W
00898:  MOVWF  FE9
0089A:  MOVLW  00
0089C:  ADDWFC xDD,W
0089E:  MOVWF  FEA
008A0:  BCF    FEF.1
....................       if(sw->outstate==off) 
008A2:  MOVLW  0B
008A4:  ADDWF  xDC,W
008A6:  MOVWF  FE9
008A8:  MOVLW  00
008AA:  ADDWFC xDD,W
008AC:  MOVWF  FEA
008AE:  DECFSZ FEF,W
008B0:  BRA    08FC
....................       { 
....................          sw->outstate=on; 
008B2:  MOVLW  0B
008B4:  ADDWF  xDC,W
008B6:  MOVWF  FE9
008B8:  MOVLW  00
008BA:  ADDWFC xDD,W
008BC:  MOVWF  FEA
008BE:  CLRF   FEF
....................          sw->on.value=1; 
008C0:  MOVLW  01
008C2:  ADDWF  xDC,W
008C4:  MOVWF  FE9
008C6:  MOVLW  00
008C8:  ADDWFC xDD,W
008CA:  MOVWF  FEA
008CC:  MOVLW  01
008CE:  MOVWF  FEF
....................          sw->on.needs_update=true; 
008D0:  MOVLW  02
008D2:  ADDWF  xDC,W
008D4:  MOVWF  FE9
008D6:  MOVLW  00
008D8:  ADDWFC xDD,W
008DA:  MOVWF  FEA
008DC:  BSF    FEF.0
....................          sw->off.value=0; 
008DE:  MOVLW  04
008E0:  ADDWF  xDC,W
008E2:  MOVWF  FE9
008E4:  MOVLW  00
008E6:  ADDWFC xDD,W
008E8:  MOVWF  FEA
008EA:  CLRF   FEF
....................          sw->off.needs_update=true; 
008EC:  MOVLW  05
008EE:  ADDWF  xDC,W
008F0:  MOVWF  FE9
008F2:  MOVLW  00
008F4:  ADDWFC xDD,W
008F6:  MOVWF  FEA
008F8:  BSF    FEF.0
....................       } 
....................       else if(sw->outstate==on) 
008FA:  BRA    0956
008FC:  MOVLW  0B
008FE:  ADDWF  xDC,W
00900:  MOVWF  FE9
00902:  MOVLW  00
00904:  ADDWFC xDD,W
00906:  MOVWF  FEA
00908:  MOVF   FEF,F
0090A:  BNZ   0956
....................       { 
....................          sw->outstate=off; 
0090C:  MOVLW  0B
0090E:  ADDWF  xDC,W
00910:  MOVWF  FE9
00912:  MOVLW  00
00914:  ADDWFC xDD,W
00916:  MOVWF  FEA
00918:  MOVLW  01
0091A:  MOVWF  FEF
....................          sw->off.value=1; 
0091C:  MOVLW  04
0091E:  ADDWF  xDC,W
00920:  MOVWF  FE9
00922:  MOVLW  00
00924:  ADDWFC xDD,W
00926:  MOVWF  FEA
00928:  MOVLW  01
0092A:  MOVWF  FEF
....................          sw->off.needs_update=true; 
0092C:  MOVLW  05
0092E:  ADDWF  xDC,W
00930:  MOVWF  FE9
00932:  MOVLW  00
00934:  ADDWFC xDD,W
00936:  MOVWF  FEA
00938:  BSF    FEF.0
....................          sw->on.value=0; 
0093A:  MOVLW  01
0093C:  ADDWF  xDC,W
0093E:  MOVWF  FE9
00940:  MOVLW  00
00942:  ADDWFC xDD,W
00944:  MOVWF  FEA
00946:  CLRF   FEF
....................          sw->on.needs_update=true; 
00948:  MOVLW  02
0094A:  ADDWF  xDC,W
0094C:  MOVWF  FE9
0094E:  MOVLW  00
00950:  ADDWFC xDD,W
00952:  MOVWF  FEA
00954:  BSF    FEF.0
....................       } 
.................... } 
....................    else if(sw->current_state==button_depressed) 
00956:  BRA    097E
00958:  MOVLW  06
0095A:  ADDWF  xDC,W
0095C:  MOVWF  FE9
0095E:  MOVLW  00
00960:  ADDWFC xDD,W
00962:  MOVWF  FEA
00964:  MOVLW  00
00966:  BTFSC  FEF.0
00968:  MOVLW  01
0096A:  ANDLW  01
0096C:  SUBLW  01
0096E:  BNZ   097E
....................       sw-> previous_state = button_depressed; 
00970:  MOVLW  06
00972:  ADDWF  xDC,W
00974:  MOVWF  FE9
00976:  MOVLW  00
00978:  ADDWFC xDD,W
0097A:  MOVWF  FEA
0097C:  BSF    FEF.1
.................... } 
0097E:  MOVLB  0
00980:  GOTO   0EA6 (RETURN)
.................... void process_buttons(struct button_switch *sw) 
.................... { 
....................    if(sw->current_state==button_pressed && sw->outstate==off)  
00984:  MOVLW  06
00986:  MOVLB  6
00988:  ADDWF  xDC,W
0098A:  MOVWF  FE9
0098C:  MOVLW  00
0098E:  ADDWFC xDD,W
00990:  MOVWF  FEA
00992:  MOVLW  00
00994:  BTFSC  FEF.0
00996:  MOVLW  01
00998:  ANDLW  01
0099A:  BNZ   09F6
0099C:  MOVLW  07
0099E:  ADDWF  xDC,W
009A0:  MOVWF  FE9
009A2:  MOVLW  00
009A4:  ADDWFC xDD,W
009A6:  MOVWF  FEA
009A8:  DECFSZ FEF,W
009AA:  BRA    09F6
....................    { 
....................          sw->outstate=on; 
009AC:  MOVLW  07
009AE:  ADDWF  xDC,W
009B0:  MOVWF  FE9
009B2:  MOVLW  00
009B4:  ADDWFC xDD,W
009B6:  MOVWF  FEA
009B8:  CLRF   FEF
....................          sw->on.value=1; 
009BA:  MOVLW  01
009BC:  ADDWF  xDC,W
009BE:  MOVWF  FE9
009C0:  MOVLW  00
009C2:  ADDWFC xDD,W
009C4:  MOVWF  FEA
009C6:  MOVLW  01
009C8:  MOVWF  FEF
....................          sw->on.needs_update=true; 
009CA:  MOVLW  02
009CC:  ADDWF  xDC,W
009CE:  MOVWF  FE9
009D0:  MOVLW  00
009D2:  ADDWFC xDD,W
009D4:  MOVWF  FEA
009D6:  BSF    FEF.0
....................          sw->off.value=0; 
009D8:  MOVLW  04
009DA:  ADDWF  xDC,W
009DC:  MOVWF  FE9
009DE:  MOVLW  00
009E0:  ADDWFC xDD,W
009E2:  MOVWF  FEA
009E4:  CLRF   FEF
....................          sw->off.needs_update=true; 
009E6:  MOVLW  05
009E8:  ADDWF  xDC,W
009EA:  MOVWF  FE9
009EC:  MOVLW  00
009EE:  ADDWFC xDD,W
009F0:  MOVWF  FEA
009F2:  BSF    FEF.0
....................    } 
....................    else if(sw->current_state==button_depressed && sw->outstate==on)   
009F4:  BRA    0A68
009F6:  MOVLW  06
009F8:  ADDWF  xDC,W
009FA:  MOVWF  FE9
009FC:  MOVLW  00
009FE:  ADDWFC xDD,W
00A00:  MOVWF  FEA
00A02:  MOVLW  00
00A04:  BTFSC  FEF.0
00A06:  MOVLW  01
00A08:  ANDLW  01
00A0A:  SUBLW  01
00A0C:  BNZ   0A68
00A0E:  MOVLW  07
00A10:  ADDWF  xDC,W
00A12:  MOVWF  FE9
00A14:  MOVLW  00
00A16:  ADDWFC xDD,W
00A18:  MOVWF  FEA
00A1A:  MOVF   FEF,F
00A1C:  BNZ   0A68
....................    { 
....................          sw->outstate=off; 
00A1E:  MOVLW  07
00A20:  ADDWF  xDC,W
00A22:  MOVWF  FE9
00A24:  MOVLW  00
00A26:  ADDWFC xDD,W
00A28:  MOVWF  FEA
00A2A:  MOVLW  01
00A2C:  MOVWF  FEF
....................          sw->off.value=1; 
00A2E:  MOVLW  04
00A30:  ADDWF  xDC,W
00A32:  MOVWF  FE9
00A34:  MOVLW  00
00A36:  ADDWFC xDD,W
00A38:  MOVWF  FEA
00A3A:  MOVLW  01
00A3C:  MOVWF  FEF
....................          sw->off.needs_update=true; 
00A3E:  MOVLW  05
00A40:  ADDWF  xDC,W
00A42:  MOVWF  FE9
00A44:  MOVLW  00
00A46:  ADDWFC xDD,W
00A48:  MOVWF  FEA
00A4A:  BSF    FEF.0
....................          sw->on.value=0; 
00A4C:  MOVLW  01
00A4E:  ADDWF  xDC,W
00A50:  MOVWF  FE9
00A52:  MOVLW  00
00A54:  ADDWFC xDD,W
00A56:  MOVWF  FEA
00A58:  CLRF   FEF
....................          sw->on.needs_update=true; 
00A5A:  MOVLW  02
00A5C:  ADDWF  xDC,W
00A5E:  MOVWF  FE9
00A60:  MOVLW  00
00A62:  ADDWFC xDD,W
00A64:  MOVWF  FEA
00A66:  BSF    FEF.0
....................    } 
.................... } 
00A68:  MOVLB  0
00A6A:  GOTO   0EA6 (RETURN)
.................... void process_dimmers(struct dimmer_switch *sw) 
.................... { 
*
004B2:  MOVLW  09
004B4:  MOVLB  6
004B6:  ADDWF  xDC,W
004B8:  MOVWF  FE9
004BA:  MOVLW  00
004BC:  ADDWFC xDD,W
004BE:  MOVWF  FEA
004C0:  MOVFF  FEF,6DE
....................    int last_level=sw->current_level; 
....................    if(sw->current_state==button_pressed)//se o botao esta premido 
004C4:  MOVLW  0E
004C6:  ADDWF  xDC,W
004C8:  MOVWF  FE9
004CA:  MOVLW  00
004CC:  ADDWFC xDD,W
004CE:  MOVWF  FEA
004D0:  MOVLW  00
004D2:  BTFSC  FEF.0
004D4:  MOVLW  01
004D6:  ANDLW  01
004D8:  BTFSS  FD8.2
004DA:  BRA    06B6
....................    { 
....................       printf_("STATE %u",sw->current_state); 
....................       printf_("DIF %LU",clock - sw->timer); 
004DC:  MOVLW  0A
004DE:  ADDWF  xDC,W
004E0:  MOVWF  FE9
004E2:  MOVLW  00
004E4:  ADDWFC xDD,W
004E6:  MOVWF  FEA
....................       sw->previous_state = button_pressed; 
004E8:  MOVLW  0E
004EA:  ADDWF  xDC,W
004EC:  MOVWF  FE9
004EE:  MOVLW  00
004F0:  ADDWFC xDD,W
004F2:  MOVWF  FEA
004F4:  BCF    FEF.1
....................       if ((clock - sw->timer > reg || sw->outstate == dimming) && sw->outstate!=maxed) 
004F6:  MOVLW  0A
004F8:  ADDWF  xDC,W
004FA:  MOVWF  FE9
004FC:  MOVLW  00
004FE:  ADDWFC xDD,W
00500:  MOVWF  FEA
00502:  MOVFF  FEF,00
00506:  MOVFF  FEC,01
0050A:  MOVFF  FEC,02
0050E:  MOVFF  FEC,03
00512:  MOVF   00,W
00514:  SUBWF  x3B,W
00516:  MOVWF  xDF
00518:  MOVF   01,W
0051A:  SUBWFB x3C,W
0051C:  MOVWF  xE0
0051E:  MOVF   02,W
00520:  SUBWFB x3D,W
00522:  MOVWF  xE1
00524:  MOVF   03,W
00526:  SUBWFB x3E,W
00528:  MOVWF  xE2
0052A:  MOVF   x45,W
0052C:  SUBWF  xE2,W
0052E:  BNC   0548
00530:  BNZ   055C
00532:  MOVF   x44,W
00534:  SUBWF  xE1,W
00536:  BNC   0548
00538:  BNZ   055C
0053A:  MOVF   x43,W
0053C:  SUBWF  xE0,W
0053E:  BNC   0548
00540:  BNZ   055C
00542:  MOVF   xDF,W
00544:  SUBWF  x42,W
00546:  BNC   055C
00548:  MOVLW  0F
0054A:  ADDWF  xDC,W
0054C:  MOVWF  FE9
0054E:  MOVLW  00
00550:  ADDWFC xDD,W
00552:  MOVWF  FEA
00554:  MOVF   FEF,W
00556:  SUBLW  02
00558:  BTFSS  FD8.2
0055A:  BRA    06B4
0055C:  MOVLW  0F
0055E:  ADDWF  xDC,W
00560:  MOVWF  FE9
00562:  MOVLW  00
00564:  ADDWFC xDD,W
00566:  MOVWF  FEA
00568:  MOVF   FEF,W
0056A:  SUBLW  04
0056C:  BTFSC  FD8.2
0056E:  BRA    06B4
....................       {  
....................          if(sw->outstate==off) 
00570:  MOVLW  0F
00572:  ADDWF  xDC,W
00574:  MOVWF  FE9
00576:  MOVLW  00
00578:  ADDWFC xDD,W
0057A:  MOVWF  FEA
0057C:  DECFSZ FEF,W
0057E:  BRA    05BE
....................          { 
....................             sw->outstate=maxed; 
00580:  MOVLW  0F
00582:  ADDWF  xDC,W
00584:  MOVWF  FE9
00586:  MOVLW  00
00588:  ADDWFC xDD,W
0058A:  MOVWF  FEA
0058C:  MOVLW  04
0058E:  MOVWF  FEF
....................             sw->on.value=1; 
00590:  ADDWF  xDC,W
00592:  MOVWF  FE9
00594:  MOVLW  00
00596:  ADDWFC xDD,W
00598:  MOVWF  FEA
0059A:  MOVLW  01
0059C:  MOVWF  FEF
....................             sw->current_level = 127; 
0059E:  MOVLW  09
005A0:  ADDWF  xDC,W
005A2:  MOVWF  FE9
005A4:  MOVLW  00
005A6:  ADDWFC xDD,W
005A8:  MOVWF  FEA
005AA:  MOVLW  7F
005AC:  MOVWF  FEF
....................             sw->on.needs_update=1; 
005AE:  MOVLW  05
005B0:  ADDWF  xDC,W
005B2:  MOVWF  FE9
005B4:  MOVLW  00
005B6:  ADDWFC xDD,W
005B8:  MOVWF  FEA
005BA:  BSF    FEF.0
....................          } 
....................         else 
005BC:  BRA    06B2
....................         { 
....................          sw->outstate = dimming; 
005BE:  MOVLW  0F
005C0:  ADDWF  xDC,W
005C2:  MOVWF  FE9
005C4:  MOVLW  00
005C6:  ADDWFC xDD,W
005C8:  MOVWF  FEA
005CA:  MOVLW  02
005CC:  MOVWF  FEF
....................          if (clock - sw->timer > TimeBase) //regula 
005CE:  MOVLW  0A
005D0:  ADDWF  xDC,W
005D2:  MOVWF  FE9
005D4:  MOVLW  00
005D6:  ADDWFC xDD,W
005D8:  MOVWF  FEA
005DA:  MOVFF  FEF,00
005DE:  MOVFF  FEC,01
005E2:  MOVFF  FEC,02
005E6:  MOVFF  FEC,03
005EA:  MOVF   00,W
005EC:  SUBWF  x3B,W
005EE:  MOVWF  xDF
005F0:  MOVF   01,W
005F2:  SUBWFB x3C,W
005F4:  MOVWF  xE0
005F6:  MOVF   02,W
005F8:  SUBWFB x3D,W
005FA:  MOVWF  xE1
005FC:  MOVF   03,W
005FE:  SUBWFB x3E,W
00600:  MOVWF  xE2
00602:  MOVF   xE2,F
00604:  BNZ   0614
00606:  MOVF   xE1,F
00608:  BNZ   0614
0060A:  MOVF   xE0,F
0060C:  BNZ   0614
0060E:  MOVF   xDF,W
00610:  SUBWF  x41,W
00612:  BC    0696
....................          { 
....................             if (sw->direction == up) //para cima 
00614:  MOVLW  0E
00616:  ADDWF  xDC,W
00618:  MOVWF  FE9
0061A:  MOVLW  00
0061C:  ADDWFC xDD,W
0061E:  MOVWF  FEA
00620:  MOVLW  00
00622:  BTFSC  FEF.2
00624:  MOVLW  01
00626:  ANDLW  01
00628:  BNZ   065A
....................             { 
....................                ++sw->current_level; 
0062A:  MOVLW  09
0062C:  ADDWF  xDC,W
0062E:  MOVWF  FE9
00630:  MOVLW  00
00632:  ADDWFC xDD,W
00634:  MOVWF  FEA
00636:  INCF   FEF,F
....................                if (sw->current_level == 127) sw->direction = down; 
00638:  MOVLW  09
0063A:  ADDWF  xDC,W
0063C:  MOVWF  FE9
0063E:  MOVLW  00
00640:  ADDWFC xDD,W
00642:  MOVWF  FEA
00644:  MOVF   FEF,W
00646:  SUBLW  7F
00648:  BNZ   0658
0064A:  MOVLW  0E
0064C:  ADDWF  xDC,W
0064E:  MOVWF  FE9
00650:  MOVLW  00
00652:  ADDWFC xDD,W
00654:  MOVWF  FEA
00656:  BSF    FEF.2
....................             } 
....................             else//para baixo 
00658:  BRA    0696
....................             { 
....................                --sw->current_level; 
0065A:  MOVLW  09
0065C:  ADDWF  xDC,W
0065E:  MOVWF  FE9
00660:  MOVLW  00
00662:  ADDWFC xDD,W
00664:  MOVWF  FEA
00666:  DECF   FEF,F
....................                if (sw->current_level == 0)  
00668:  MOVLW  09
0066A:  ADDWF  xDC,W
0066C:  MOVWF  FE9
0066E:  MOVLW  00
00670:  ADDWFC xDD,W
00672:  MOVWF  FEA
00674:  MOVF   FEF,F
00676:  BNZ   0696
....................                {   
....................                   sw->direction = up; 
00678:  MOVLW  0E
0067A:  ADDWF  xDC,W
0067C:  MOVWF  FE9
0067E:  MOVLW  00
00680:  ADDWFC xDD,W
00682:  MOVWF  FEA
00684:  BCF    FEF.2
....................                   sw->off.value=1; 
00686:  MOVLW  07
00688:  ADDWF  xDC,W
0068A:  MOVWF  FE9
0068C:  MOVLW  00
0068E:  ADDWFC xDD,W
00690:  MOVWF  FEA
00692:  MOVLW  01
00694:  MOVWF  FEF
....................                } 
....................             } 
....................          } 
....................          sw->timer = clock; 
00696:  MOVLW  0A
00698:  ADDWF  xDC,W
0069A:  MOVWF  FE9
0069C:  MOVLW  00
0069E:  ADDWFC xDD,W
006A0:  MOVWF  FEA
006A2:  MOVFF  63B,FEF
006A6:  MOVFF  63C,FEC
006AA:  MOVFF  63D,FEC
006AE:  MOVFF  63E,FEC
....................       } 
....................       } 
....................       else 
006B2:  BRA    06B4
....................       { 
....................          //sw - > timer = clock; 
....................       } 
....................    } 
....................    else//se o botao nao esta premido 
006B4:  BRA    0816
....................    { 
....................       if (sw->previous_state == button_pressed) //se o botao acabou de ser deslargado 
006B6:  MOVLW  0E
006B8:  ADDWF  xDC,W
006BA:  MOVWF  FE9
006BC:  MOVLW  00
006BE:  ADDWFC xDD,W
006C0:  MOVWF  FEA
006C2:  MOVLW  00
006C4:  BTFSC  FEF.1
006C6:  MOVLW  01
006C8:  ANDLW  01
006CA:  BTFSS  FD8.2
006CC:  BRA    07FA
....................       { 
....................          sw->previous_state = button_depressed; 
006CE:  MOVLW  0E
006D0:  ADDWF  xDC,W
006D2:  MOVWF  FE9
006D4:  MOVLW  00
006D6:  ADDWFC xDD,W
006D8:  MOVWF  FEA
006DA:  BSF    FEF.1
....................          if (sw->outstate == dimming) //se esteve a regular 
006DC:  MOVLW  0F
006DE:  ADDWF  xDC,W
006E0:  MOVWF  FE9
006E2:  MOVLW  00
006E4:  ADDWFC xDD,W
006E6:  MOVWF  FEA
006E8:  MOVF   FEF,W
006EA:  SUBLW  02
006EC:  BNZ   0732
....................          { 
....................             sw-> outstate = on; 
006EE:  MOVLW  0F
006F0:  ADDWF  xDC,W
006F2:  MOVWF  FE9
006F4:  MOVLW  00
006F6:  ADDWFC xDD,W
006F8:  MOVWF  FEA
006FA:  CLRF   FEF
....................             if (sw->direction == up) sw->direction = down; //inverte direccao 
006FC:  MOVLW  0E
006FE:  ADDWF  xDC,W
00700:  MOVWF  FE9
00702:  MOVLW  00
00704:  ADDWFC xDD,W
00706:  MOVWF  FEA
00708:  MOVLW  00
0070A:  BTFSC  FEF.2
0070C:  MOVLW  01
0070E:  ANDLW  01
00710:  BNZ   0722
00712:  MOVLW  0E
00714:  ADDWF  xDC,W
00716:  MOVWF  FE9
00718:  MOVLW  00
0071A:  ADDWFC xDD,W
0071C:  MOVWF  FEA
0071E:  BSF    FEF.2
....................             else sw->direction = up; 
00720:  BRA    0730
00722:  MOVLW  0E
00724:  ADDWF  xDC,W
00726:  MOVWF  FE9
00728:  MOVLW  00
0072A:  ADDWFC xDD,W
0072C:  MOVWF  FEA
0072E:  BCF    FEF.2
....................          } 
....................          else//se nao esteve a regular 
00730:  BRA    07FA
....................          { 
....................             if (sw->outstate == off) //se estava desligada 
00732:  MOVLW  0F
00734:  ADDWF  xDC,W
00736:  MOVWF  FE9
00738:  MOVLW  00
0073A:  ADDWFC xDD,W
0073C:  MOVWF  FEA
0073E:  DECFSZ FEF,W
00740:  BRA    077E
....................             { 
....................                sw->outstate=on; 
00742:  MOVLW  0F
00744:  ADDWF  xDC,W
00746:  MOVWF  FE9
00748:  MOVLW  00
0074A:  ADDWFC xDD,W
0074C:  MOVWF  FEA
0074E:  CLRF   FEF
....................                sw->on.value=1; 
00750:  MOVLW  04
00752:  ADDWF  xDC,W
00754:  MOVWF  FE9
00756:  MOVLW  00
00758:  ADDWFC xDD,W
0075A:  MOVWF  FEA
0075C:  MOVLW  01
0075E:  MOVWF  FEF
....................                sw->direction = down; 
00760:  MOVLW  0E
00762:  ADDWF  xDC,W
00764:  MOVWF  FE9
00766:  MOVLW  00
00768:  ADDWFC xDD,W
0076A:  MOVWF  FEA
0076C:  BSF    FEF.2
....................                sw->on.needs_update=true; 
0076E:  MOVLW  05
00770:  ADDWF  xDC,W
00772:  MOVWF  FE9
00774:  MOVLW  00
00776:  ADDWFC xDD,W
00778:  MOVWF  FEA
0077A:  BSF    FEF.0
....................             } 
....................             else if (sw->outstate == on) 
0077C:  BRA    07FA
0077E:  MOVLW  0F
00780:  ADDWF  xDC,W
00782:  MOVWF  FE9
00784:  MOVLW  00
00786:  ADDWFC xDD,W
00788:  MOVWF  FEA
0078A:  MOVF   FEF,F
0078C:  BNZ   07CC
....................             { 
....................                sw->outstate=off; 
0078E:  MOVLW  0F
00790:  ADDWF  xDC,W
00792:  MOVWF  FE9
00794:  MOVLW  00
00796:  ADDWFC xDD,W
00798:  MOVWF  FEA
0079A:  MOVLW  01
0079C:  MOVWF  FEF
....................                sw->off.value=1; 
0079E:  MOVLW  07
007A0:  ADDWF  xDC,W
007A2:  MOVWF  FE9
007A4:  MOVLW  00
007A6:  ADDWFC xDD,W
007A8:  MOVWF  FEA
007AA:  MOVLW  01
007AC:  MOVWF  FEF
....................                sw->direction = up; 
007AE:  MOVLW  0E
007B0:  ADDWF  xDC,W
007B2:  MOVWF  FE9
007B4:  MOVLW  00
007B6:  ADDWFC xDD,W
007B8:  MOVWF  FEA
007BA:  BCF    FEF.2
....................                sw->off.needs_update=true; 
007BC:  MOVLW  08
007BE:  ADDWF  xDC,W
007C0:  MOVWF  FE9
007C2:  MOVLW  00
007C4:  ADDWFC xDD,W
007C6:  MOVWF  FEA
007C8:  BSF    FEF.0
....................             } 
....................             else if(sw->outstate == maxed) 
007CA:  BRA    07FA
007CC:  MOVLW  0F
007CE:  ADDWF  xDC,W
007D0:  MOVWF  FE9
007D2:  MOVLW  00
007D4:  ADDWFC xDD,W
007D6:  MOVWF  FEA
007D8:  MOVF   FEF,W
007DA:  SUBLW  04
007DC:  BNZ   07FA
....................             { 
....................                sw->outstate=on; 
007DE:  MOVLW  0F
007E0:  ADDWF  xDC,W
007E2:  MOVWF  FE9
007E4:  MOVLW  00
007E6:  ADDWFC xDD,W
007E8:  MOVWF  FEA
007EA:  CLRF   FEF
....................                sw->direction = down; 
007EC:  MOVLW  0E
007EE:  ADDWF  xDC,W
007F0:  MOVWF  FE9
007F2:  MOVLW  00
007F4:  ADDWFC xDD,W
007F6:  MOVWF  FEA
007F8:  BSF    FEF.2
....................             } 
....................          } 
....................       } 
....................       sw->timer = clock; 
007FA:  MOVLW  0A
007FC:  ADDWF  xDC,W
007FE:  MOVWF  FE9
00800:  MOVLW  00
00802:  ADDWFC xDD,W
00804:  MOVWF  FEA
00806:  MOVFF  63B,FEF
0080A:  MOVFF  63C,FEC
0080E:  MOVFF  63D,FEC
00812:  MOVFF  63E,FEC
....................    } 
....................  //  onOffHelper(sw); 
....................    if (last_level!=sw->current_level)  
00816:  MOVLW  09
00818:  ADDWF  xDC,W
0081A:  MOVWF  FE9
0081C:  MOVLW  00
0081E:  ADDWFC xDD,W
00820:  MOVWF  FEA
00822:  MOVF   FEF,W
00824:  SUBWF  xDE,W
00826:  BZ    085E
....................    { 
....................       sw->dim_level.value=sw->current_level; 
00828:  MOVLW  01
0082A:  ADDWF  xDC,W
0082C:  MOVWF  01
0082E:  MOVLW  00
00830:  ADDWFC xDD,W
00832:  MOVWF  03
00834:  MOVLW  09
00836:  ADDWF  xDC,W
00838:  MOVWF  FE9
0083A:  MOVLW  00
0083C:  ADDWFC xDD,W
0083E:  MOVWF  FEA
00840:  MOVFF  FEF,6E1
00844:  MOVFF  03,FEA
00848:  MOVFF  01,FE9
0084C:  MOVFF  6E1,FEF
....................       sw->dim_level.needs_update=true; 
00850:  MOVLW  02
00852:  ADDWF  xDC,W
00854:  MOVWF  FE9
00856:  MOVLW  00
00858:  ADDWFC xDD,W
0085A:  MOVWF  FEA
0085C:  BSF    FEF.0
....................    } 
.................... } 
0085E:  MOVLB  0
00860:  GOTO   0EA6 (RETURN)
....................  
.................... void read_inputs()//called periodicaly to pass current phisical input (or timer values) value to structures 
.................... { 
....................   int x; 
....................    for(x=0;x<mydevices.numberOfInputs;++x) 
*
00A6E:  MOVLB  6
00A70:  CLRF   xD9
00A72:  MOVLB  1
00A74:  MOVF   x3E,W
00A76:  MOVLB  6
00A78:  SUBWF  xD9,W
00A7A:  BTFSC  FD8.0
00A7C:  BRA    0EAC
....................    { 
....................       switch (((struct inputs)mydevices.myinputs[x]).type) { 
00A7E:  CLRF   xDB
00A80:  MOVFF  6D9,6DA
00A84:  CLRF   xDD
00A86:  MOVLW  21
00A88:  MOVWF  xDC
00A8A:  MOVLB  0
00A8C:  RCALL  041C
00A8E:  MOVFF  02,03
00A92:  MOVF   01,W
00A94:  ADDLW  40
00A96:  MOVWF  01
00A98:  MOVLW  01
00A9A:  ADDWFC 03,F
00A9C:  MOVFF  01,FE9
00AA0:  MOVFF  03,FEA
00AA4:  MOVF   FEF,W
00AA6:  BZ    0ABC
00AA8:  XORLW  03
00AAA:  BTFSC  FD8.2
00AAC:  BRA    0C02
00AAE:  XORLW  02
00AB0:  BTFSC  FD8.2
00AB2:  BRA    0C04
00AB4:  XORLW  03
00AB6:  BTFSC  FD8.2
00AB8:  BRA    0D52
00ABA:  BRA    0EA4
....................     case dimmer_switch: 
....................             if (input (((struct dimmer_switch)mydevices.myinputs[x].device).realbutton))  
00ABC:  MOVLB  6
00ABE:  CLRF   xDB
00AC0:  MOVFF  6D9,6DA
00AC4:  CLRF   xDD
00AC6:  MOVLW  21
00AC8:  MOVWF  xDC
00ACA:  MOVLB  0
00ACC:  RCALL  041C
00ACE:  MOVF   01,W
00AD0:  ADDLW  02
00AD2:  MOVLB  6
00AD4:  MOVWF  xDA
00AD6:  MOVLW  00
00AD8:  ADDWFC 02,W
00ADA:  MOVWF  xDB
00ADC:  MOVLW  01
00ADE:  ADDWF  xDA,W
00AE0:  MOVWF  01
00AE2:  MOVLW  00
00AE4:  ADDWFC xDB,W
00AE6:  MOVWF  03
00AE8:  MOVF   01,W
00AEA:  ADDLW  3E
00AEC:  MOVWF  01
00AEE:  MOVLW  01
00AF0:  ADDWFC 03,F
00AF2:  MOVF   01,W
00AF4:  ADDLW  10
00AF6:  MOVWF  FE9
00AF8:  MOVLW  00
00AFA:  ADDWFC 03,W
00AFC:  MOVWF  FEA
00AFE:  MOVFF  FEF,6DC
00B02:  MOVFF  6DC,6DD
00B06:  MOVLW  01
00B08:  MOVWF  xDE
00B0A:  MOVLW  0F
00B0C:  MOVWF  xE0
00B0E:  MOVLW  92
00B10:  MOVWF  xDF
00B12:  MOVLB  0
00B14:  RCALL  043E
00B16:  MOVFF  6DC,6DD
00B1A:  MOVLW  0F
00B1C:  MOVLB  6
00B1E:  MOVWF  xDF
00B20:  MOVLW  80
00B22:  MOVWF  xDE
00B24:  MOVLB  0
00B26:  RCALL  0480
00B28:  BTFSS  01.0
00B2A:  BRA    0B74
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00B2C:  MOVLB  6
00B2E:  CLRF   xDB
00B30:  MOVFF  6D9,6DA
00B34:  CLRF   xDD
00B36:  MOVLW  21
00B38:  MOVWF  xDC
00B3A:  MOVLB  0
00B3C:  RCALL  041C
00B3E:  MOVF   01,W
00B40:  ADDLW  02
00B42:  MOVLB  6
00B44:  MOVWF  xDA
00B46:  MOVLW  00
00B48:  ADDWFC 02,W
00B4A:  MOVWF  xDB
00B4C:  MOVLW  01
00B4E:  ADDWF  xDA,W
00B50:  MOVWF  01
00B52:  MOVLW  00
00B54:  ADDWFC xDB,W
00B56:  MOVWF  03
00B58:  MOVF   01,W
00B5A:  ADDLW  3E
00B5C:  MOVWF  01
00B5E:  MOVLW  01
00B60:  ADDWFC 03,F
00B62:  MOVF   01,W
00B64:  ADDLW  0E
00B66:  MOVWF  FE9
00B68:  MOVLW  00
00B6A:  ADDWFC 03,W
00B6C:  MOVWF  FEA
00B6E:  BSF    FEF.0
....................             } 
....................             else  
00B70:  BRA    0BB8
00B72:  MOVLB  0
....................             { 
....................                ((struct dimmer_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00B74:  MOVLB  6
00B76:  CLRF   xDB
00B78:  MOVFF  6D9,6DA
00B7C:  CLRF   xDD
00B7E:  MOVLW  21
00B80:  MOVWF  xDC
00B82:  MOVLB  0
00B84:  RCALL  041C
00B86:  MOVF   01,W
00B88:  ADDLW  02
00B8A:  MOVLB  6
00B8C:  MOVWF  xDA
00B8E:  MOVLW  00
00B90:  ADDWFC 02,W
00B92:  MOVWF  xDB
00B94:  MOVLW  01
00B96:  ADDWF  xDA,W
00B98:  MOVWF  01
00B9A:  MOVLW  00
00B9C:  ADDWFC xDB,W
00B9E:  MOVWF  03
00BA0:  MOVF   01,W
00BA2:  ADDLW  3E
00BA4:  MOVWF  01
00BA6:  MOVLW  01
00BA8:  ADDWFC 03,F
00BAA:  MOVF   01,W
00BAC:  ADDLW  0E
00BAE:  MOVWF  FE9
00BB0:  MOVLW  00
00BB2:  ADDWFC 03,W
00BB4:  MOVWF  FEA
00BB6:  BCF    FEF.0
....................             } 
....................             process_dimmers(&mydevices.myinputs[x].device); 
00BB8:  CLRF   xDB
00BBA:  MOVFF  6D9,6DA
00BBE:  CLRF   xDD
00BC0:  MOVLW  21
00BC2:  MOVWF  xDC
00BC4:  MOVLB  0
00BC6:  RCALL  041C
00BC8:  MOVF   01,W
00BCA:  ADDLW  02
00BCC:  MOVLB  6
00BCE:  MOVWF  xDA
00BD0:  MOVLW  00
00BD2:  ADDWFC 02,W
00BD4:  MOVWF  xDB
00BD6:  MOVLW  01
00BD8:  ADDWF  xDA,W
00BDA:  MOVWF  01
00BDC:  MOVLW  00
00BDE:  ADDWFC xDB,W
00BE0:  MOVWF  03
00BE2:  MOVF   01,W
00BE4:  ADDLW  3E
00BE6:  MOVWF  01
00BE8:  MOVLW  01
00BEA:  ADDWFC 03,F
00BEC:  MOVFF  01,6DA
00BF0:  MOVFF  03,6DB
00BF4:  MOVFF  03,6DD
00BF8:  MOVFF  01,6DC
00BFC:  MOVLB  0
00BFE:  BRA    04B2
....................             break; 
00C00:  BRA    0EA6
....................     case timer: 
....................  
....................            break; 
00C02:  BRA    0EA6
....................     case on_off_switch: 
....................             if (input (((struct on_off_switch)mydevices.myinputs[x].device).realbutton))  
00C04:  MOVLB  6
00C06:  CLRF   xDB
00C08:  MOVFF  6D9,6DA
00C0C:  CLRF   xDD
00C0E:  MOVLW  21
00C10:  MOVWF  xDC
00C12:  MOVLB  0
00C14:  RCALL  041C
00C16:  MOVF   01,W
00C18:  ADDLW  02
00C1A:  MOVLB  6
00C1C:  MOVWF  xDA
00C1E:  MOVLW  00
00C20:  ADDWFC 02,W
00C22:  MOVWF  xDB
00C24:  MOVLW  01
00C26:  ADDWF  xDA,W
00C28:  MOVWF  01
00C2A:  MOVLW  00
00C2C:  ADDWFC xDB,W
00C2E:  MOVWF  03
00C30:  MOVF   01,W
00C32:  ADDLW  3E
00C34:  MOVWF  01
00C36:  MOVLW  01
00C38:  ADDWFC 03,F
00C3A:  MOVF   01,W
00C3C:  ADDLW  0C
00C3E:  MOVWF  FE9
00C40:  MOVLW  00
00C42:  ADDWFC 03,W
00C44:  MOVWF  FEA
00C46:  MOVFF  FEF,6DC
00C4A:  MOVFF  6DC,6DD
00C4E:  MOVLW  01
00C50:  MOVWF  xDE
00C52:  MOVLW  0F
00C54:  MOVWF  xE0
00C56:  MOVLW  92
00C58:  MOVWF  xDF
00C5A:  MOVLB  0
00C5C:  CALL   043E
00C60:  MOVFF  6DC,6DD
00C64:  MOVLW  0F
00C66:  MOVLB  6
00C68:  MOVWF  xDF
00C6A:  MOVLW  80
00C6C:  MOVWF  xDE
00C6E:  MOVLB  0
00C70:  RCALL  0480
00C72:  BTFSS  01.0
00C74:  BRA    0CC0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00C76:  MOVLB  6
00C78:  CLRF   xDB
00C7A:  MOVFF  6D9,6DA
00C7E:  CLRF   xDD
00C80:  MOVLW  21
00C82:  MOVWF  xDC
00C84:  MOVLB  0
00C86:  CALL   041C
00C8A:  MOVF   01,W
00C8C:  ADDLW  02
00C8E:  MOVLB  6
00C90:  MOVWF  xDA
00C92:  MOVLW  00
00C94:  ADDWFC 02,W
00C96:  MOVWF  xDB
00C98:  MOVLW  01
00C9A:  ADDWF  xDA,W
00C9C:  MOVWF  01
00C9E:  MOVLW  00
00CA0:  ADDWFC xDB,W
00CA2:  MOVWF  03
00CA4:  MOVF   01,W
00CA6:  ADDLW  3E
00CA8:  MOVWF  01
00CAA:  MOVLW  01
00CAC:  ADDWFC 03,F
00CAE:  MOVF   01,W
00CB0:  ADDLW  06
00CB2:  MOVWF  FE9
00CB4:  MOVLW  00
00CB6:  ADDWFC 03,W
00CB8:  MOVWF  FEA
00CBA:  BSF    FEF.0
....................             } 
....................             else  
00CBC:  BRA    0D06
00CBE:  MOVLB  0
....................             { 
....................                ((struct on_off_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00CC0:  MOVLB  6
00CC2:  CLRF   xDB
00CC4:  MOVFF  6D9,6DA
00CC8:  CLRF   xDD
00CCA:  MOVLW  21
00CCC:  MOVWF  xDC
00CCE:  MOVLB  0
00CD0:  CALL   041C
00CD4:  MOVF   01,W
00CD6:  ADDLW  02
00CD8:  MOVLB  6
00CDA:  MOVWF  xDA
00CDC:  MOVLW  00
00CDE:  ADDWFC 02,W
00CE0:  MOVWF  xDB
00CE2:  MOVLW  01
00CE4:  ADDWF  xDA,W
00CE6:  MOVWF  01
00CE8:  MOVLW  00
00CEA:  ADDWFC xDB,W
00CEC:  MOVWF  03
00CEE:  MOVF   01,W
00CF0:  ADDLW  3E
00CF2:  MOVWF  01
00CF4:  MOVLW  01
00CF6:  ADDWFC 03,F
00CF8:  MOVF   01,W
00CFA:  ADDLW  06
00CFC:  MOVWF  FE9
00CFE:  MOVLW  00
00D00:  ADDWFC 03,W
00D02:  MOVWF  FEA
00D04:  BCF    FEF.0
....................             } 
....................             process_onOff(&mydevices.myinputs[x].device); 
00D06:  CLRF   xDB
00D08:  MOVFF  6D9,6DA
00D0C:  CLRF   xDD
00D0E:  MOVLW  21
00D10:  MOVWF  xDC
00D12:  MOVLB  0
00D14:  CALL   041C
00D18:  MOVF   01,W
00D1A:  ADDLW  02
00D1C:  MOVLB  6
00D1E:  MOVWF  xDA
00D20:  MOVLW  00
00D22:  ADDWFC 02,W
00D24:  MOVWF  xDB
00D26:  MOVLW  01
00D28:  ADDWF  xDA,W
00D2A:  MOVWF  01
00D2C:  MOVLW  00
00D2E:  ADDWFC xDB,W
00D30:  MOVWF  03
00D32:  MOVF   01,W
00D34:  ADDLW  3E
00D36:  MOVWF  01
00D38:  MOVLW  01
00D3A:  ADDWFC 03,F
00D3C:  MOVFF  01,6DA
00D40:  MOVFF  03,6DB
00D44:  MOVFF  03,6DD
00D48:  MOVFF  01,6DC
00D4C:  MOVLB  0
00D4E:  BRA    0864
....................     break; 
00D50:  BRA    0EA6
....................     case button_switch: 
....................             if (input (((struct button_switch)mydevices.myinputs[x].device).realbutton))  
00D52:  MOVLB  6
00D54:  CLRF   xDB
00D56:  MOVFF  6D9,6DA
00D5A:  CLRF   xDD
00D5C:  MOVLW  21
00D5E:  MOVWF  xDC
00D60:  MOVLB  0
00D62:  CALL   041C
00D66:  MOVF   01,W
00D68:  ADDLW  02
00D6A:  MOVLB  6
00D6C:  MOVWF  xDA
00D6E:  MOVLW  00
00D70:  ADDWFC 02,W
00D72:  MOVWF  xDB
00D74:  MOVLW  01
00D76:  ADDWF  xDA,W
00D78:  MOVWF  01
00D7A:  MOVLW  00
00D7C:  ADDWFC xDB,W
00D7E:  MOVWF  03
00D80:  MOVF   01,W
00D82:  ADDLW  3E
00D84:  MOVWF  01
00D86:  MOVLW  01
00D88:  ADDWFC 03,F
00D8A:  MOVF   01,W
00D8C:  ADDLW  09
00D8E:  MOVWF  FE9
00D90:  MOVLW  00
00D92:  ADDWFC 03,W
00D94:  MOVWF  FEA
00D96:  MOVFF  FEF,6DC
00D9A:  MOVFF  6DC,6DD
00D9E:  MOVLW  01
00DA0:  MOVWF  xDE
00DA2:  MOVLW  0F
00DA4:  MOVWF  xE0
00DA6:  MOVLW  92
00DA8:  MOVWF  xDF
00DAA:  MOVLB  0
00DAC:  CALL   043E
00DB0:  MOVFF  6DC,6DD
00DB4:  MOVLW  0F
00DB6:  MOVLB  6
00DB8:  MOVWF  xDF
00DBA:  MOVLW  80
00DBC:  MOVWF  xDE
00DBE:  MOVLB  0
00DC0:  CALL   0480
00DC4:  BTFSS  01.0
00DC6:  BRA    0E12
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_depressed; 
00DC8:  MOVLB  6
00DCA:  CLRF   xDB
00DCC:  MOVFF  6D9,6DA
00DD0:  CLRF   xDD
00DD2:  MOVLW  21
00DD4:  MOVWF  xDC
00DD6:  MOVLB  0
00DD8:  CALL   041C
00DDC:  MOVF   01,W
00DDE:  ADDLW  02
00DE0:  MOVLB  6
00DE2:  MOVWF  xDA
00DE4:  MOVLW  00
00DE6:  ADDWFC 02,W
00DE8:  MOVWF  xDB
00DEA:  MOVLW  01
00DEC:  ADDWF  xDA,W
00DEE:  MOVWF  01
00DF0:  MOVLW  00
00DF2:  ADDWFC xDB,W
00DF4:  MOVWF  03
00DF6:  MOVF   01,W
00DF8:  ADDLW  3E
00DFA:  MOVWF  01
00DFC:  MOVLW  01
00DFE:  ADDWFC 03,F
00E00:  MOVF   01,W
00E02:  ADDLW  06
00E04:  MOVWF  FE9
00E06:  MOVLW  00
00E08:  ADDWFC 03,W
00E0A:  MOVWF  FEA
00E0C:  BSF    FEF.0
....................             } 
....................             else  
00E0E:  BRA    0E58
00E10:  MOVLB  0
....................             { 
....................                ((struct button_switch)mydevices.myinputs[x].device).current_state = button_pressed; 
00E12:  MOVLB  6
00E14:  CLRF   xDB
00E16:  MOVFF  6D9,6DA
00E1A:  CLRF   xDD
00E1C:  MOVLW  21
00E1E:  MOVWF  xDC
00E20:  MOVLB  0
00E22:  CALL   041C
00E26:  MOVF   01,W
00E28:  ADDLW  02
00E2A:  MOVLB  6
00E2C:  MOVWF  xDA
00E2E:  MOVLW  00
00E30:  ADDWFC 02,W
00E32:  MOVWF  xDB
00E34:  MOVLW  01
00E36:  ADDWF  xDA,W
00E38:  MOVWF  01
00E3A:  MOVLW  00
00E3C:  ADDWFC xDB,W
00E3E:  MOVWF  03
00E40:  MOVF   01,W
00E42:  ADDLW  3E
00E44:  MOVWF  01
00E46:  MOVLW  01
00E48:  ADDWFC 03,F
00E4A:  MOVF   01,W
00E4C:  ADDLW  06
00E4E:  MOVWF  FE9
00E50:  MOVLW  00
00E52:  ADDWFC 03,W
00E54:  MOVWF  FEA
00E56:  BCF    FEF.0
....................             } 
....................             process_buttons(&mydevices.myinputs[x].device); 
00E58:  CLRF   xDB
00E5A:  MOVFF  6D9,6DA
00E5E:  CLRF   xDD
00E60:  MOVLW  21
00E62:  MOVWF  xDC
00E64:  MOVLB  0
00E66:  CALL   041C
00E6A:  MOVF   01,W
00E6C:  ADDLW  02
00E6E:  MOVLB  6
00E70:  MOVWF  xDA
00E72:  MOVLW  00
00E74:  ADDWFC 02,W
00E76:  MOVWF  xDB
00E78:  MOVLW  01
00E7A:  ADDWF  xDA,W
00E7C:  MOVWF  01
00E7E:  MOVLW  00
00E80:  ADDWFC xDB,W
00E82:  MOVWF  03
00E84:  MOVF   01,W
00E86:  ADDLW  3E
00E88:  MOVWF  01
00E8A:  MOVLW  01
00E8C:  ADDWFC 03,F
00E8E:  MOVFF  01,6DA
00E92:  MOVFF  03,6DB
00E96:  MOVFF  03,6DD
00E9A:  MOVFF  01,6DC
00E9E:  MOVLB  0
00EA0:  BRA    0984
....................     break; 
00EA2:  BRA    0EA6
....................     default: 
....................  
....................             break;  
00EA4:  BRA    0EA6
....................             } 
....................  
....................    } 
00EA6:  MOVLB  6
00EA8:  INCF   xD9,F
00EAA:  BRA    0A72
.................... } 
00EAC:  MOVLB  0
00EAE:  GOTO   0ECC (RETURN)
.................... void print_inputs(int1 disable_updates) 
.................... { 
....................    int x; 
....................     
....................    { 
....................       delay_ms (200) ; 
....................       for(x=0;x<mydevices.numberOfInputs;++x) 
....................       { 
....................          switch (((struct inputs)mydevices.myinputs[x]).type) { 
....................             case dimmer_switch: 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update) 
....................                { 
....................                   printf("dim_level %u\n\r"((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).dim_level.needs_update=false; 
....................                } 
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct dimmer_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct dimmer_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................                break; 
....................             case on_off_switch: 
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   printf("on %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).on.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   printf("off %u\n\r",((struct on_off_switch)mydevices.myinputs[0].device).off.value); 
....................                   if(disable_updates)((struct on_off_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................             case button_switch: 
....................                if(((struct button_switch)mydevices.myinputs[0].device).on.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).on.needs_update=false; 
....................                }            
....................                if(((struct button_switch)mydevices.myinputs[0].device).off.needs_update) 
....................                { 
....................                   if(disable_updates)((struct button_switch)mydevices.myinputs[0].device).off.needs_update=false; 
....................                } 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... #include "interrupt_functions.c" 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    ++clock; 
00EB2:  MOVLW  01
00EB4:  MOVLB  6
00EB6:  ADDWF  x3B,F
00EB8:  BTFSC  FD8.0
00EBA:  INCF   x3C,F
00EBC:  BTFSC  FD8.2
00EBE:  INCF   x3D,F
00EC0:  BTFSC  FD8.2
00EC2:  INCF   x3E,F
....................    if (bit_test (clock, 1)) read_inputs(); 
00EC4:  BTFSS  x3B.1
00EC6:  BRA    0ECE
00EC8:  MOVLB  0
00ECA:  BRA    0A6E
00ECC:  MOVLB  6
.................... } 
....................  
00ECE:  BCF    FF2.2
00ED0:  MOVLB  0
00ED2:  GOTO   011C
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    syncError = 1; 
*
00F52:  BSF    xB5.5
....................       portc=MAKE8(onoffsvalue,1); 
00F54:  MOVLB  5
00F56:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00F5A:  MOVFF  57F,F83
....................          printf("MISS"); 
00F5E:  MOVLW  74
00F60:  MOVWF  FF6
00F62:  MOVLW  0F
00F64:  MOVWF  FF7
00F66:  MOVLW  00
00F68:  MOVWF  FF8
00F6A:  MOVLB  0
00F6C:  RCALL  0F2A
.................... } 
00F6E:  BCF    F9E.0
00F70:  GOTO   011C
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) 
.................... { 
....................    static unsigned int clockT2temp; 
....................    //static int lixo=0; 
....................    ++clockT2temp; 
*
00F7A:  MOVLB  6
00F7C:  INCF   x48,F
....................    if(clockT2temp==200)//1 second call 
00F7E:  MOVF   x48,W
00F80:  SUBLW  C8
00F82:  BNZ   0F9C
....................    { 
....................       //output_toggle(LED); 
....................       clockT2temp=0; 
00F84:  CLRF   x48
....................       ++secClock; 
00F86:  MOVLW  01
00F88:  ADDWF  24,F
00F8A:  BTFSC  FD8.0
00F8C:  INCF   25,F
00F8E:  BTFSC  FD8.2
00F90:  INCF   26,F
00F92:  BTFSC  FD8.2
00F94:  INCF   27,F
....................       secondFlag=true; 
00F96:  MOVLB  0
00F98:  BSF    xB5.4
00F9A:  MOVLB  6
....................       /* 
....................       if(!lixo) 
....................       { 
....................          ++((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       else 
....................       { 
....................          --((struct light)mydevices.myoutputs[0].device).dim_value.value; 
....................          ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................       } 
....................       if(((struct light)mydevices.myoutputs[0].device).dim_value.value==127) 
....................          lixo=1; 
....................       else if(((struct light)mydevices.myoutputs[0].device).dim_value.value==0) 
....................          lixo=0; 
....................       */ 
....................    } 
.................... } 
....................  
00F9C:  BCF    F9E.1
00F9E:  MOVLB  0
00FA0:  GOTO   011C
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
.................... /* 
.................... portc=MAKE8(onoffsvalue,1); 
.................... portd=MAKE8(onoffsvalue,0); 
.................... CCP_1=36819; 
.................... mnumluzes=0; 
.................... set_timer1(0); 
.................... return; 
.................... */ 
....................          portc=MAKE8(onoffsvalue,1); 
00FA4:  MOVLB  5
00FA6:  MOVFF  580,F82
....................          portd=MAKE8(onoffsvalue,0); 
00FAA:  MOVFF  57F,F83
....................    { 
....................          if (organizado) 
00FAE:  MOVLB  0
00FB0:  BTFSS  xB5.2
00FB2:  BRA    0FD6
....................          { 
....................             organizado=0; 
00FB4:  BCF    xB5.2
....................             if (actmat)  
00FB6:  BTFSS  xB5.3
00FB8:  BRA    0FCA
....................             { 
....................                actmat=0; 
00FBA:  BCF    xB5.3
....................                pointer=delays1; 
00FBC:  MOVLW  05
00FBE:  MOVLB  5
00FC0:  MOVWF  x7C
00FC2:  MOVLW  91
00FC4:  MOVWF  x7B
....................             } 
....................             else 
00FC6:  BRA    0FD6
00FC8:  MOVLB  0
....................             { 
....................                actmat=1; 
00FCA:  BSF    xB5.3
....................                pointer=delays2; 
00FCC:  MOVLW  05
00FCE:  MOVLB  5
00FD0:  MOVWF  x7C
00FD2:  MOVLW  D5
00FD4:  MOVWF  x7B
....................             } 
....................          } 
....................          vez=0; 
00FD6:  MOVLB  5
00FD8:  CLRF   x7D
....................          CCP_1=matrizluz[fpointer(0,0)]; 
00FDA:  MOVLB  6
00FDC:  CLRF   xDB
00FDE:  CLRF   xDC
*
0104A:  MOVFF  02,6DA
0104E:  MOVFF  01,6D9
01052:  BCF    FD8.0
01054:  RLCF   01,W
01056:  MOVWF  02
01058:  RLCF   xDA,W
0105A:  MOVWF  03
0105C:  MOVF   02,W
0105E:  MOVLB  0
01060:  CALL   01A6
01064:  TBLRD*+
01066:  MOVFF  FF5,03
0106A:  MOVWF  FBE
0106C:  MOVFF  03,FBF
....................          mnumluzes=fpointer(N_LUZES,0); 
01070:  MOVLW  10
01072:  MOVLB  6
01074:  MOVWF  xDB
01076:  CLRF   xDC
*
010E2:  MOVFF  01,57E
....................           
....................    } 
....................          set_timer1(0); 
010E6:  CLRF   FCF
010E8:  CLRF   FCE
....................          syncError=false; 
010EA:  MOVLB  0
010EC:  BCF    xB5.5
.................... } 
....................  
010EE:  BCF    FF2.1
010F0:  GOTO   011C
.................... #int_CCP1 
.................... void CCP1_isr(void)  
.................... {  /* 
.................... portc=(portc & MAKE8(0b1111111111111110,1)); 
.................... portd=(portd & MAKE8(0b1111111111111110,0)); 
.................... return;*/ 
....................     // while(true){}; 
....................    if(mnumluzes!=0) 
010F4:  MOVLB  5
010F6:  MOVF   x7E,F
010F8:  BTFSC  FD8.2
010FA:  BRA    1224
....................    { 
....................       int16 auxccp=fpointer(vez,1); 
010FC:  MOVFF  57D,6DB
01100:  MOVLW  01
01102:  MOVLB  6
01104:  MOVWF  xDC
*
01170:  MOVFF  02,6DA
01174:  MOVFF  01,6D9
....................       portc=(portc & MAKE8(auxccp,1)); 
01178:  MOVF   xDA,W
0117A:  ANDWF  F82,F
....................       portd=(portd & MAKE8(auxccp,0)); 
0117C:  MOVF   xD9,W
0117E:  ANDWF  F83,F
....................       ++vez; 
01180:  MOVLB  5
01182:  INCF   x7D,F
....................       --mnumluzes; 
01184:  DECF   x7E,F
....................       if(mnumluzes!=0) CCP_1=matrizluz[fpointer(vez,0)]; 
01186:  MOVF   x7E,F
01188:  BZ    1224
0118A:  MOVFF  57D,6DB
0118E:  MOVLB  6
01190:  CLRF   xDC
*
011FC:  MOVFF  02,6DC
01200:  MOVFF  01,6DB
01204:  BCF    FD8.0
01206:  RLCF   01,W
01208:  MOVWF  02
0120A:  RLCF   xDC,W
0120C:  MOVWF  03
0120E:  MOVF   02,W
01210:  MOVLB  0
01212:  CALL   01A6
01216:  TBLRD*+
01218:  MOVFF  FF5,03
0121C:  MOVWF  FBE
0121E:  MOVFF  03,FBF
01222:  MOVLB  5
....................    } 
.................... } 
....................  
01224:  BCF    F9E.2
01226:  MOVLB  0
01228:  GOTO   011C
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
.................... } 
....................  
0122C:  BCF    F9E.5
0122E:  GOTO   011C
.................... #int_TBE 
.................... void  TBE_isr(void)  
.................... { 
.................... } 
....................  
01232:  BCF    F9E.4
01234:  GOTO   011C
.................... #int_BUSCOL 
.................... void  BUSCOL_isr(void)  
.................... { 
.................... } 
....................  
01238:  BCF    FA1.3
0123A:  GOTO   011C
.................... #int_OSCF 
.................... void  OSCF_isr(void)  
.................... { 
....................    oscError=1; 
0123E:  BSF    xB5.6
.................... } 
....................  
01240:  BCF    FA1.7
01242:  GOTO   011C
.................... #int_canrx0 
.................... void canrx0_int ( )  
.................... { 
....................    canReceive (); 
*
01820:  RCALL  1470
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
01822:  BCF    FA4.0
01824:  GOTO   011C
.................... #int_canrx1 
.................... void canrx1_int ( )  
.................... { 
....................    canReceive (); 
01828:  RCALL  1470
....................    // TODO: add CAN recieve code here 
.................... } 
....................  
0182A:  BCF    FA4.1
0182C:  GOTO   011C
.................... #int_cantx0 
.................... void cantx0_int ( )  
.................... { 
....................    canTransmit (); 
*
01C6C:  RCALL  1A52
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C6E:  BCF    FA4.2
01C70:  GOTO   011C
.................... #int_cantx1 
.................... void cantx1_int ( )  
.................... { 
....................    canTransmit (); 
01C74:  RCALL  1A52
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C76:  BCF    FA4.3
01C78:  GOTO   011C
.................... #int_cantx2 
.................... void cantx2_int ( )  
.................... { 
....................    canTransmit (); 
01C7C:  RCALL  1A52
....................    // TODO: add CAN transmit code here 
.................... } 
....................  
01C7E:  BCF    FA4.4
01C80:  GOTO   011C
.................... #int_canirx 
.................... void canirx_int ( )  
.................... { 
....................    // TODO: add CAN IRX handling code here 
.................... } 
....................  
01C84:  BCF    FA4.7
01C86:  GOTO   011C
.................... #int_canerr 
.................... void canerr_int ( )  
.................... { 
....................    // TODO: add CAN error handling code here 
.................... } 
....................  
01C8A:  BCF    FA4.5
01C8C:  GOTO   011C
.................... void interrupts_enable() 
.................... { 
....................    //enable_interrupts (int_canrx0); 
....................    //enable_interrupts (int_canrx1); 
....................    //enable_interrupts (int_cantx0); 
....................    //enable_interrupts (int_cantx1); 
....................    //enable_interrupts (int_cantx2); 
....................    //enable_interrupts (int_canirx); 
....................    //enable_interrupts (int_canerr); 
....................    enable_interrupts(INT_CCP1); 
*
05212:  BSF    F9D.2
....................    enable_interrupts (int_TIMER0) ; 
05214:  BSF    FF2.5
....................    enable_interrupts (int_TIMER1) ; 
05216:  BSF    F9D.0
....................    enable_interrupts (int_TIMER2) ; 
05218:  BSF    F9D.1
....................    enable_interrupts (int_EXT) ; 
0521A:  BSF    FF2.4
....................    //enable_interrupts (int_TBE) ; 
....................    //enable_interrupts (int_BUSCOL) ; 
....................    //enable_interrupts (int_CANIRX) ; 
....................    //enable_interrupts (int_CANERR) ; 
....................    //enable_interrupts (int_CANTX2) ; 
....................    //enable_interrupts (int_CANTX1) ; 
....................    //enable_interrupts (int_CANTX0) ; 
....................    //enable_interrupts (int_CANRX1) ; 
....................    //enable_interrupts (int_CANRX0) ; 
....................    //enable_interrupts (int_OSCF) ; 
....................    enable_interrupts (GLOBAL) ; 
0521C:  MOVLW  C0
0521E:  IORWF  FF2,F
.................... } 
05220:  GOTO   87EC (RETURN)
....................  
.................... #include "hw_setup.c" 
.................... void hw_setup() 
.................... { 
....................    ////CAN_BUS SETUP 
....................    can_init () ; 
*
01E58:  BRA    1D04
....................    can_set_mode (CAN_OP_CONFIG) ;   
01E5A:  MOVLW  04
01E5C:  MOVLB  6
01E5E:  MOVWF  x61
01E60:  MOVLB  0
01E62:  RCALL  1CAE
....................    BRGCON1.brp = 4; 
01E64:  MOVLW  C0
01E66:  ANDWF  F70,W
01E68:  IORLW  04
01E6A:  MOVWF  F70
....................    BRGCON1.sjw = 0; 
01E6C:  MOVLW  3F
01E6E:  ANDWF  F70,W
01E70:  MOVWF  F70
....................    BRGCON2.prseg = 2; 
01E72:  MOVLW  F8
01E74:  ANDWF  F71,W
01E76:  IORLW  02
01E78:  MOVWF  F71
....................    BRGCON2.seg1ph = 5; 
01E7A:  MOVLW  C7
01E7C:  ANDWF  F71,W
01E7E:  IORLW  28
01E80:  MOVWF  F71
....................    BRGCON2.sam = FALSE; 
01E82:  BCF    F71.6
....................    BRGCON2.seg2phts = FALSE; 
01E84:  BCF    F71.7
....................    BRGCON3.seg2ph = 5; 
01E86:  MOVLW  F8
01E88:  ANDWF  F72,W
01E8A:  IORLW  05
01E8C:  MOVWF  F72
....................    BRGCON3.wakfil = TRUE; 
01E8E:  BSF    F72.6
....................    can_set_mode (CAN_OP_NORMAL) ; 
01E90:  MOVLB  6
01E92:  CLRF   x61
01E94:  MOVLB  0
01E96:  RCALL  1CAE
....................        
....................    ////TIMERS SETUP 
....................    setup_timer_0 (RTCC_INTERNAL | RTCC_DIV_4); //div16 1.6us thick 104ms overflow 
01E98:  MOVLW  81
01E9A:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
01E9C:  MOVLW  95
01E9E:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_16,241,13); 
01EA0:  MOVLW  60
01EA2:  IORLW  06
01EA4:  MOVWF  FCA
01EA6:  MOVLW  F1
01EA8:  MOVWF  FCB
....................    setup_ccp1(CCP_COMPARE_INT); 
01EAA:  MOVLW  0A
01EAC:  MOVWF  FBD
....................    ////OTHERS 
....................    ext_int_edge(l_to_h); 
01EAE:  BSF    FF1.6
....................     
....................     
....................    /////DISABLED HW//////// 
....................    setup_adc_ports (NO_ANALOGS | VSS_VDD) ; 
01EB0:  MOVF   FC1,W
01EB2:  ANDLW  C0
01EB4:  IORLW  0F
01EB6:  MOVWF  FC1
....................    setup_adc (ADC_CLOCK_DIV_2 | ADC_TAD_MUL_0) ; 
01EB8:  MOVF   FC0,W
01EBA:  ANDLW  C0
01EBC:  MOVWF  FC0
01EBE:  BCF    FC0.7
01EC0:  BSF    FC2.0
....................    setup_psp (PSP_DISABLED) ; 
01EC2:  BCF    F96.4
....................    setup_spi (SPI_SS_DISABLED) ; 
01EC4:  BCF    FC6.5
01EC6:  BCF    F94.5
01EC8:  BSF    F94.4
01ECA:  BCF    F94.3
01ECC:  MOVLW  01
01ECE:  MOVWF  FC6
01ED0:  MOVLW  00
01ED2:  MOVWF  FC7
....................    setup_comparator (NC_NC_NC_NC) ; 
01ED4:  MOVLW  07
01ED6:  MOVWF  FB4
01ED8:  MOVF   F95,W
01EDA:  MOVWF  F95
01EDC:  MOVF   F96,W
01EDE:  MOVWF  F96
01EE0:  CLRWDT
01EE2:  MOVLW  20
01EE4:  MOVWF  00
01EE6:  DECFSZ 00,F
01EE8:  BRA    1EE6
01EEA:  BRA    1EEC
01EEC:  MOVF   FB4,W
01EEE:  BCF    FA1.6
....................    setup_vref (FALSE) ; 
01EF0:  CLRF   FB5
....................    setup_timer_3 (T3_DISABLED | T3_DIV_BY_1) ; 
01EF2:  CLRF   FB1
....................     
....................   // setup_wdt(WDT_ON); 
....................    output_low(PIN_B1); 
01EF4:  BCF    F93.1
01EF6:  BCF    F8A.1
....................    output_low(PIN_B6); 
01EF8:  BCF    F93.6
01EFA:  BCF    F8A.6
....................    output_low(PIN_B7); 
01EFC:  BCF    F93.7
01EFE:  BCF    F8A.7
....................    output_low(PIN_E3); 
01F00:  BCF    F96.3
01F02:  BCF    F8D.3
....................    #use fast_io(C) 
....................    #use fast_io(D) 
....................    setup_wdt (WDT_ON) ; 
01F04:  BSF    FD1.0
....................    } 
01F06:  GOTO   8574 (RETURN)
....................  
.................... ////////////////////////////////////////////////////////////////////////// 
....................  
.................... void main() 
.................... { 
*
08368:  CLRF   FF8
0836A:  BCF    FD0.7
0836C:  BSF    07.7
0836E:  CLRF   FEA
08370:  CLRF   FE9
08372:  BCF    F93.5
08374:  BSF    F8A.5
08376:  CLRF   27
08378:  CLRF   26
0837A:  CLRF   25
0837C:  CLRF   24
0837E:  CLRF   28
08380:  BCF    xB5.0
08382:  CLRF   xB6
08384:  BSF    xB5.1
08386:  MOVLB  5
08388:  CLRF   x7A
0838A:  MOVLB  0
0838C:  BCF    xB5.3
0838E:  MOVLB  5
08390:  CLRF   x7E
08392:  MOVLW  FF
08394:  MOVWF  x80
08396:  MOVWF  x7F
08398:  MOVLB  6
0839A:  CLRF   x3A
0839C:  CLRF   x39
0839E:  MOVLB  0
083A0:  BCF    xB5.6
083A2:  MOVLB  6
083A4:  CLRF   x41
083A6:  CLRF   x45
083A8:  CLRF   x44
083AA:  CLRF   x43
083AC:  MOVLW  27
083AE:  MOVWF  x42
083B0:  MOVF   FC1,W
083B2:  ANDLW  C0
083B4:  IORLW  0F
083B6:  MOVWF  FC1
083B8:  MOVLW  07
083BA:  MOVWF  FB4
083BC:  CLRF   1C
083BE:  MOVLW  01
083C0:  MOVWF  1D
083C2:  MOVLW  02
083C4:  MOVWF  1E
083C6:  MOVLW  03
083C8:  MOVWF  1F
083CA:  MOVLW  04
083CC:  MOVWF  20
083CE:  MOVLW  05
083D0:  MOVWF  21
083D2:  MOVLW  20
083D4:  MOVWF  22
083D6:  MOVLW  21
083D8:  MOVWF  23
083DA:  MOVLW  0B
083DC:  MOVLB  1
083DE:  MOVWF  x39
083E0:  CLRF   x3A
083E2:  CLRF   x3B
083E4:  CLRF   x3C
083E6:  MOVLW  32
083E8:  MOVLB  5
083EA:  MOVWF  x81
083EC:  MOVWF  x82
083EE:  MOVWF  x83
083F0:  MOVWF  x84
083F2:  MOVWF  x85
083F4:  MOVWF  x86
083F6:  MOVWF  x87
083F8:  MOVWF  x88
083FA:  MOVWF  x89
083FC:  MOVWF  x8A
083FE:  MOVWF  x8B
08400:  MOVWF  x8C
08402:  MOVWF  x8D
08404:  MOVWF  x8E
08406:  MOVWF  x8F
08408:  MOVWF  x90
0840A:  CLRF   x91
0840C:  CLRF   x92
0840E:  CLRF   x93
08410:  CLRF   x94
08412:  CLRF   x95
08414:  CLRF   x96
08416:  MOVLW  01
08418:  MOVWF  x97
0841A:  CLRF   x98
0841C:  CLRF   x99
0841E:  CLRF   x9A
08420:  MOVLW  02
08422:  MOVWF  x9B
08424:  CLRF   x9C
08426:  CLRF   x9D
08428:  CLRF   x9E
0842A:  MOVLW  03
0842C:  MOVWF  x9F
0842E:  CLRF   xA0
08430:  CLRF   xA1
08432:  CLRF   xA2
08434:  MOVLW  04
08436:  MOVWF  xA3
08438:  CLRF   xA4
0843A:  CLRF   xA5
0843C:  CLRF   xA6
0843E:  MOVLW  05
08440:  MOVWF  xA7
08442:  CLRF   xA8
08444:  CLRF   xA9
08446:  CLRF   xAA
08448:  MOVLW  06
0844A:  MOVWF  xAB
0844C:  CLRF   xAC
0844E:  CLRF   xAD
08450:  CLRF   xAE
08452:  MOVLW  07
08454:  MOVWF  xAF
08456:  CLRF   xB0
08458:  CLRF   xB1
0845A:  CLRF   xB2
0845C:  MOVLW  08
0845E:  MOVWF  xB3
08460:  CLRF   xB4
08462:  CLRF   xB5
08464:  CLRF   xB6
08466:  MOVLW  09
08468:  MOVWF  xB7
0846A:  CLRF   xB8
0846C:  CLRF   xB9
0846E:  CLRF   xBA
08470:  MOVLW  0A
08472:  MOVWF  xBB
08474:  CLRF   xBC
08476:  CLRF   xBD
08478:  CLRF   xBE
0847A:  MOVLW  0B
0847C:  MOVWF  xBF
0847E:  CLRF   xC0
08480:  CLRF   xC1
08482:  CLRF   xC2
08484:  MOVLW  0C
08486:  MOVWF  xC3
08488:  CLRF   xC4
0848A:  CLRF   xC5
0848C:  CLRF   xC6
0848E:  MOVLW  0D
08490:  MOVWF  xC7
08492:  CLRF   xC8
08494:  CLRF   xC9
08496:  CLRF   xCA
08498:  MOVLW  0E
0849A:  MOVWF  xCB
0849C:  CLRF   xCC
0849E:  CLRF   xCD
084A0:  CLRF   xCE
084A2:  MOVLW  0F
084A4:  MOVWF  xCF
084A6:  CLRF   xD0
084A8:  CLRF   xD1
084AA:  CLRF   xD2
084AC:  CLRF   xD3
084AE:  CLRF   xD4
084B0:  CLRF   xD5
084B2:  CLRF   xD6
084B4:  CLRF   xD7
084B6:  CLRF   xD8
084B8:  CLRF   xD9
084BA:  CLRF   xDA
084BC:  MOVLW  01
084BE:  MOVWF  xDB
084C0:  CLRF   xDC
084C2:  CLRF   xDD
084C4:  CLRF   xDE
084C6:  MOVLW  02
084C8:  MOVWF  xDF
084CA:  CLRF   xE0
084CC:  CLRF   xE1
084CE:  CLRF   xE2
084D0:  MOVLW  03
084D2:  MOVWF  xE3
084D4:  CLRF   xE4
084D6:  CLRF   xE5
084D8:  CLRF   xE6
084DA:  MOVLW  04
084DC:  MOVWF  xE7
084DE:  CLRF   xE8
084E0:  CLRF   xE9
084E2:  CLRF   xEA
084E4:  MOVLW  05
084E6:  MOVWF  xEB
084E8:  CLRF   xEC
084EA:  CLRF   xED
084EC:  CLRF   xEE
084EE:  MOVLW  06
084F0:  MOVWF  xEF
084F2:  CLRF   xF0
084F4:  CLRF   xF1
084F6:  CLRF   xF2
084F8:  MOVLW  07
084FA:  MOVWF  xF3
084FC:  CLRF   xF4
084FE:  CLRF   xF5
08500:  CLRF   xF6
08502:  MOVLW  08
08504:  MOVWF  xF7
08506:  CLRF   xF8
08508:  CLRF   xF9
0850A:  CLRF   xFA
0850C:  MOVLW  09
0850E:  MOVWF  xFB
08510:  CLRF   xFC
08512:  CLRF   xFD
08514:  CLRF   xFE
08516:  MOVLW  0A
08518:  MOVWF  xFF
0851A:  MOVLB  6
0851C:  CLRF   x00
0851E:  CLRF   x01
08520:  CLRF   x02
08522:  MOVLW  0B
08524:  MOVWF  x03
08526:  CLRF   x04
08528:  CLRF   x05
0852A:  CLRF   x06
0852C:  MOVLW  0C
0852E:  MOVWF  x07
08530:  CLRF   x08
08532:  CLRF   x09
08534:  CLRF   x0A
08536:  MOVLW  0D
08538:  MOVWF  x0B
0853A:  CLRF   x0C
0853C:  CLRF   x0D
0853E:  CLRF   x0E
08540:  MOVLW  0E
08542:  MOVWF  x0F
08544:  CLRF   x10
08546:  CLRF   x11
08548:  CLRF   x12
0854A:  MOVLW  0F
0854C:  MOVWF  x13
0854E:  CLRF   x14
08550:  CLRF   x15
08552:  CLRF   x16
08554:  CLRF   x17
08556:  CLRF   x18
08558:  CLRF   x48
....................    mydevices.numberOfInputs=0; 
0855A:  MOVLB  1
0855C:  CLRF   x3E
....................    mydevices.numberOfOutputs=0; 
0855E:  CLRF   x3F
....................    clock = 0; 
08560:  MOVLB  6
08562:  CLRF   x3E
08564:  CLRF   x3D
08566:  CLRF   x3C
08568:  CLRF   x3B
....................    ledErrorCounter=0;    
0856A:  CLRF   x47
0856C:  CLRF   x46
....................    hw_setup(); 
0856E:  MOVLB  0
08570:  GOTO   1E58
....................    //TODO: User Code 
....................    //struct switches array[NUMBER_OF_SWITCHES]; 
....................   /* 
....................    button_test(); 
....................    dimmer_test(); 
....................    */ 
....................     
....................     
....................    ///////////////SALA////////////////////////////// 
....................  /*  eeprom_on_off_init(20,21,6);//2 int Grande a comecar da esquerda 
....................    eeprom_on_off_init(22,23,0);//2  
....................    //eeprom_dimmer_init(40,41,42,7);//2 
....................    eeprom_on_off_init(41,42,7);//2 
....................    eeprom_on_off_init(26,27,3);//2 
....................     
....................     
....................     
....................    ///Sanca parede grande 
....................    unsigned int on_adr[8]={20,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={21,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,3);//Sanca parede grande 
....................    eeprom_onOff_out_init(on_adr,off_adr,5);//Sanca parede grande 
....................     
....................    ///Sanca parede rosa 
....................    unsigned int on_adrr[8]={22,255,255,255,255,255,255,255}; 
....................    unsigned int off_adrr[8]={23,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,7);//Sanca parede grande 
....................    on_adrr[1]=26; 
....................    off_adrr[1]=27; 
....................    eeprom_onOff_out_init(on_adrr,off_adrr,4);//Sanca parede grande 
....................     
....................     ///VARANDA 
....................    unsigned int dimmer_dim_adr[8]={40,255,255,255,255,255,255,255};  
....................    unsigned int dimmer_on_adr[8]={41,255,255,255,255,255,255,255}; 
....................    unsigned int dimmer_off_adr[8]={42,255,255,255,255,255,255,255}; 
....................    //eeprom_dimmer_out_init(dimmer_dim_adr,dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................    eeprom_onOff_out_init(dimmer_on_adr,dimmer_off_adr,6);//varanda 
....................     
....................    eeprom_button_init(28,29,4,true);//estores down 
....................    eeprom_button_init(30,31,5,true);//estores up 
....................    unsigned int up_adr[8]={30,255,255,255,255,255,255,255}; 
....................    unsigned int down_adr[8]={28,255,255,255,255,255,255,255}; 
....................    unsigned int x_adr[8]={255,255,255,255,255,255,255,255}; 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,8,9,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,10,11,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,12,13,0,10); 
....................    eeprom_shutter_out_init(up_adr,down_adr,x_adr,x_adr,14,15,0,10); 
....................    */ 
....................    /////////////////////////////////////////////////7 
....................     
....................    /* 
....................    ///////////////QUARTO GRANDE////////////////////////////// 
....................    eeprom_on_off_init(1,2,2);//2 on_adr off_adr real_button inicia botao 
....................    unsigned int on_adr[8]={1,255,255,255,255,255,255,255}; 
....................    unsigned int off_adr[8]={2,10,255,255,255,255,255,255}; 
....................   
....................    unsigned int nill_adr[8]={255,255,255,255,255,255,255,255};   
....................    unsigned int ventax_off_adr[8]={16,255,255,255,255,255,255,255}; 
....................  
....................    unsigned int x_adr[8]={1,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(on_adr,off_adr,4);//SANCA? 
....................     
....................    //outputs 4=sanca 3=casabanho 2=casa de banho 9=ventax 1=corredor 
....................    ///casa de banho 
....................    eeprom_on_off_init(3,4,4);//interruptor casa de banho??   
....................    off_adr[0]=4; 
....................    on_adr[0]=3; 
....................    eeprom_timer_init(off_adr,on_adr,15,16,time_off,60); 
....................    eeprom_onOff_out_init(on_adr,off_adr,3); //luz casa de banho 
....................    eeprom_onOff_out_init(on_adr,off_adr,2); //luz2 casa de banho 
....................    eeprom_onOff_out_init(on_adr,ventax_off_adr,9);//VENTAX 
....................    ///fim casa de banho 
....................     
....................    //corredor 
....................    eeprom_on_off_init(17,18,5);//interruptor luz corredor 
....................    unsigned int corredor_on_adr[8]={17,255,255,255,255,255,255,255}; 
....................    unsigned int corredor_off_adr[8]={18,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(corredor_on_adr,corredor_off_adr,1); //luz corredor 
....................    //fim corredor 
....................     
....................    eeprom_button_init(5,6,0,true);//2 //estores 
....................    eeprom_button_init(7,8,1,true);//2 
....................     
....................    off_adr[0]=255; 
....................    off_adr[1]=255; 
....................    on_adr[0]=5; 
....................    x_adr[0]=7; 
....................    eeprom_shutter_out_init(on_adr,x_adr,off_adr,off_adr,11,10,0,10);//up down fullup full down 
....................     
....................    eeprom_on_off_init(9,10,6); 
....................    eeprom_on_off_init(20,21,7); 
....................    unsigned int cama_on_adr[8]={9,255,255,255,255,255,255,255}; 
....................    unsigned int cama_off_adr[8]={10,255,255,255,255,255,255,255}; 
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,7); 
....................    cama_on_adr[0]=20; 
....................    cama_off_adr[0]=21; 
....................    eeprom_onOff_out_init(cama_on_adr,cama_off_adr,6); 
....................    /////////////////////////////////////////////////7 
....................    */  
....................    /////////////////////QUARTO RENATA/////////////// 
....................    // 
....................    // INPUTS  
....................    // 0,1 cozinha 
....................    // 2,3 quarto 
....................    // 
....................    // OUTPUTS 
....................    // 5 quarto renata economica 
....................    // 6 janela hologeneo 
....................    // 7 entrada 
....................    // 2 cozinha fluorescente 
....................    // 3 cima balcao halogeneo 
....................    // 4 divisoria halogeneo 
....................    // 10 balcao baixo verde 
....................    // 11 balcao cima verde 
....................    // 12 balcao cima vermelho 
....................    // 13 balcao cima azul 
....................    // 14 balcao baixo azul 
....................    // 15 balcao baixo vermelho 
....................    //INPUT INIT 
....................    eeprom_on_off_init(60,61,0);//on_adr off_adr real_btn interruptor cozinha 1 
08574:  MOVLW  3C
08576:  MOVLB  6
08578:  MOVWF  x61
0857A:  MOVLW  3D
0857C:  MOVWF  x62
0857E:  CLRF   x63
08580:  MOVLB  0
08582:  CALL   2202
....................    eeprom_on_off_init(62,63,1);//on_adr off_adr real_btn interruptor cozinha 2   
08586:  MOVLW  3E
08588:  MOVLB  6
0858A:  MOVWF  x61
0858C:  MOVLW  3F
0858E:  MOVWF  x62
08590:  MOVLW  01
08592:  MOVWF  x63
08594:  MOVLB  0
08596:  CALL   2202
.................... // eeprom_dimmer_init(68,62,63,1);//dim_adr on_adr off_adr 
....................    eeprom_on_off_init(64,65,2);//on_adr off_adr real_btn interruptor quarto renata 1 
0859A:  MOVLW  40
0859C:  MOVLB  6
0859E:  MOVWF  x61
085A0:  MOVLW  41
085A2:  MOVWF  x62
085A4:  MOVLW  02
085A6:  MOVWF  x63
085A8:  MOVLB  0
085AA:  CALL   2202
.................... //   eeprom_on_off_init(66,67,3);//on_adr off_adr real_btn interruptor quarto renata 2   
....................    eeprom_dimmer_init(68,66,67,3);//dim_adr on_adr off_adr 
085AE:  MOVLW  44
085B0:  MOVLB  6
085B2:  MOVWF  x61
085B4:  MOVLW  42
085B6:  MOVWF  x62
085B8:  MOVLW  43
085BA:  MOVWF  x63
085BC:  MOVLW  03
085BE:  MOVWF  x64
085C0:  MOVLB  0
085C2:  GOTO   2268
....................    
....................    //OUTPUT INIT 
....................    unsigned int on_adr[8]={60,255,255,255,255,255,255,255}; 
085C6:  MOVLW  3C
085C8:  MOVLB  6
085CA:  MOVWF  x49
085CC:  MOVLW  FF
085CE:  MOVWF  x4A
085D0:  MOVWF  x4B
085D2:  MOVWF  x4C
085D4:  MOVWF  x4D
085D6:  MOVWF  x4E
085D8:  MOVWF  x4F
085DA:  MOVWF  x50
....................    unsigned int off_adr[8]={61,10,255,255,255,255,255,255}; 
085DC:  MOVLW  3D
085DE:  MOVWF  x51
085E0:  MOVLW  0A
085E2:  MOVWF  x52
085E4:  MOVLW  FF
085E6:  MOVWF  x53
085E8:  MOVWF  x54
085EA:  MOVWF  x55
085EC:  MOVWF  x56
085EE:  MOVWF  x57
085F0:  MOVWF  x58
....................    unsigned int dim_adr[8]={68,255,255,255,255,255,255,255}; 
085F2:  MOVLW  44
085F4:  MOVWF  x59
085F6:  MOVLW  FF
085F8:  MOVWF  x5A
085FA:  MOVWF  x5B
085FC:  MOVWF  x5C
085FE:  MOVWF  x5D
08600:  MOVWF  x5E
08602:  MOVWF  x5F
08604:  MOVWF  x60
....................    eeprom_onOff_out_init(on_adr,off_adr,2); //luz cozinha fluorescente 
08606:  MOVLW  06
08608:  MOVWF  x62
0860A:  MOVLW  49
0860C:  MOVWF  x61
0860E:  MOVLW  06
08610:  MOVWF  x64
08612:  MOVLW  51
08614:  MOVWF  x63
08616:  MOVLW  02
08618:  MOVWF  x65
0861A:  MOVLB  0
0861C:  CALL   232A
....................    on_adr[0]=62; 
08620:  MOVLW  3E
08622:  MOVLB  6
08624:  MOVWF  x49
....................    off_adr[0]=63; 
08626:  MOVLW  3F
08628:  MOVWF  x51
....................    eeprom_onOff_out_init(on_adr,off_adr,3); //luz cozinha cima balcao halogeneo 
0862A:  MOVLW  06
0862C:  MOVWF  x62
0862E:  MOVLW  49
08630:  MOVWF  x61
08632:  MOVLW  06
08634:  MOVWF  x64
08636:  MOVLW  51
08638:  MOVWF  x63
0863A:  MOVLW  03
0863C:  MOVWF  x65
0863E:  MOVLB  0
08640:  CALL   232A
....................    eeprom_onOff_out_init(on_adr,off_adr,4); //luz cozinha divisoria 
08644:  MOVLW  06
08646:  MOVLB  6
08648:  MOVWF  x62
0864A:  MOVLW  49
0864C:  MOVWF  x61
0864E:  MOVLW  06
08650:  MOVWF  x64
08652:  MOVLW  51
08654:  MOVWF  x63
08656:  MOVLW  04
08658:  MOVWF  x65
0865A:  MOVLB  0
0865C:  CALL   232A
....................    eeprom_onOff_out_init(on_adr,off_adr,15); //luz balcao baixo vermelho 
08660:  MOVLW  06
08662:  MOVLB  6
08664:  MOVWF  x62
08666:  MOVLW  49
08668:  MOVWF  x61
0866A:  MOVLW  06
0866C:  MOVWF  x64
0866E:  MOVLW  51
08670:  MOVWF  x63
08672:  MOVLW  0F
08674:  MOVWF  x65
08676:  MOVLB  0
08678:  CALL   232A
....................    eeprom_onOff_out_init(on_adr,off_adr,12); //luz balcao cima vermelho 
0867C:  MOVLW  06
0867E:  MOVLB  6
08680:  MOVWF  x62
08682:  MOVLW  49
08684:  MOVWF  x61
08686:  MOVLW  06
08688:  MOVWF  x64
0868A:  MOVLW  51
0868C:  MOVWF  x63
0868E:  MOVLW  0C
08690:  MOVWF  x65
08692:  MOVLB  0
08694:  CALL   232A
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,3); //luz cozinha cima balcao halogeneo 
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,4); //luz cozinha divisoria 
....................    //eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,15); //luz cozinha divisoria 
....................     
....................    on_adr[0]=64; 
08698:  MOVLW  40
0869A:  MOVLB  6
0869C:  MOVWF  x49
....................    off_adr[0]=65; 
0869E:  MOVLW  41
086A0:  MOVWF  x51
....................    eeprom_onOff_out_init(on_adr,off_adr,5); //luz quarto renata economica 
086A2:  MOVLW  06
086A4:  MOVWF  x62
086A6:  MOVLW  49
086A8:  MOVWF  x61
086AA:  MOVLW  06
086AC:  MOVWF  x64
086AE:  MOVLW  51
086B0:  MOVWF  x63
086B2:  MOVLW  05
086B4:  MOVWF  x65
086B6:  MOVLB  0
086B8:  CALL   232A
....................    on_adr[0]=66; 
086BC:  MOVLW  42
086BE:  MOVLB  6
086C0:  MOVWF  x49
....................    off_adr[0]=67; 
086C2:  MOVLW  43
086C4:  MOVWF  x51
....................   // eeprom_onOff_out_init(on_adr,off_adr,7); //luz quarto renata entrada 
....................   // eeprom_onOff_out_init(on_adr,off_adr,6); //luz quarto renata janela 
....................    eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,7); //luz quarto renata entrada 
086C6:  MOVLW  06
086C8:  MOVWF  x62
086CA:  MOVLW  59
086CC:  MOVWF  x61
086CE:  MOVLW  06
086D0:  MOVWF  x64
086D2:  MOVLW  49
086D4:  MOVWF  x63
086D6:  MOVLW  06
086D8:  MOVWF  x66
086DA:  MOVLW  51
086DC:  MOVWF  x65
086DE:  MOVLW  07
086E0:  MOVWF  x67
086E2:  MOVLB  0
086E4:  CALL   23A4
....................    eeprom_dimmer_out_init(dim_adr,on_adr,off_adr,6); //luz quarto renata janela 
086E8:  MOVLW  06
086EA:  MOVLB  6
086EC:  MOVWF  x62
086EE:  MOVLW  59
086F0:  MOVWF  x61
086F2:  MOVLW  06
086F4:  MOVWF  x64
086F6:  MOVLW  49
086F8:  MOVWF  x63
086FA:  MOVLW  06
086FC:  MOVWF  x66
086FE:  MOVLW  51
08700:  MOVWF  x65
08702:  MOVLW  06
08704:  MOVWF  x67
08706:  MOVLB  0
08708:  CALL   23A4
....................     
....................    
....................    readDevices(); 
0870C:  GOTO   2DFE
.................... #ifdef DEBUG   
....................     printf("inputs:%d outputs:%d %d %d\n\r",mydevices.numberOfInputs,mydevices.numberOfOutputs,((struct outputs)mydevices.myoutputs[0]).type,((struct outputs)mydevices.myoutputs[1]).type); 
08710:  MOVLW  90
08712:  MOVWF  FF6
08714:  MOVLW  1C
08716:  MOVWF  FF7
08718:  MOVLW  00
0871A:  MOVWF  FF8
0871C:  MOVLW  07
0871E:  MOVLB  6
08720:  MOVWF  x74
08722:  MOVLB  0
08724:  CALL   1F0A
08728:  MOVFF  13E,674
0872C:  MOVLW  1F
0872E:  MOVLB  6
08730:  MOVWF  x75
08732:  MOVLB  0
08734:  CALL   2040
08738:  MOVLW  99
0873A:  MOVWF  FF6
0873C:  MOVLW  1C
0873E:  MOVWF  FF7
08740:  MOVLW  00
08742:  MOVWF  FF8
08744:  MOVLW  09
08746:  MOVLB  6
08748:  MOVWF  x74
0874A:  MOVLB  0
0874C:  CALL   1F0A
08750:  MOVFF  13F,674
08754:  MOVLW  1F
08756:  MOVLB  6
08758:  MOVWF  x75
0875A:  MOVLB  0
0875C:  CALL   2040
08760:  CLRF   1B
08762:  BTFSC  FF2.7
08764:  BSF    1B.7
08766:  BCF    FF2.7
08768:  MOVLW  20
0876A:  MOVLB  6
0876C:  MOVWF  xDC
0876E:  MOVLB  0
08770:  CALL   0ED6
08774:  BTFSC  1B.7
08776:  BSF    FF2.7
08778:  MOVFF  28A,674
0877C:  MOVLW  1F
0877E:  MOVLB  6
08780:  MOVWF  x75
08782:  MOVLB  0
08784:  CALL   2040
08788:  CLRF   1B
0878A:  BTFSC  FF2.7
0878C:  BSF    1B.7
0878E:  BCF    FF2.7
08790:  MOVLW  20
08792:  MOVLB  6
08794:  MOVWF  xDC
08796:  MOVLB  0
08798:  CALL   0ED6
0879C:  BTFSC  1B.7
0879E:  BSF    FF2.7
087A0:  MOVFF  2B9,674
087A4:  MOVLW  1F
087A6:  MOVLB  6
087A8:  MOVWF  x75
087AA:  MOVLB  0
087AC:  CALL   2040
087B0:  CLRF   1B
087B2:  BTFSC  FF2.7
087B4:  BSF    1B.7
087B6:  BCF    FF2.7
087B8:  MOVLW  0A
087BA:  MOVLB  6
087BC:  MOVWF  xDC
087BE:  MOVLB  0
087C0:  CALL   0ED6
087C4:  BTFSC  1B.7
087C6:  BSF    FF2.7
087C8:  CLRF   1B
087CA:  BTFSC  FF2.7
087CC:  BSF    1B.7
087CE:  BCF    FF2.7
087D0:  MOVLW  0D
087D2:  MOVLB  6
087D4:  MOVWF  xDC
087D6:  MOVLB  0
087D8:  CALL   0ED6
087DC:  BTFSC  1B.7
087DE:  BSF    FF2.7
.................... #endif 
....................    dimmer_outputs_init(); 
087E0:  GOTO   3D00
....................    // printf("start %Lu %Lu %Lu\n\r",fpointer(N_LUZES,0),delays1[N_LUZES][0],delays2[N_LUZES][0]);  
....................    /*((struct light)mydevices.myoutputs[0].device).dim_value.value=50; 
....................    ((struct light)mydevices.myoutputs[0].device).dim_value.needs_update=true; 
....................    ((struct light)mydevices.myoutputs[0].device).off.value=1; 
....................    ((struct light)mydevices.myoutputs[0].device).off.needs_update=true; 
....................  */ 
....................   
....................    write_outputs(); 
087E4:  CALL   3EB0
.................... // printf("start %Lu\n\r",fpointer(N_LUZES,0));  
....................  interrupts_enable(); 
087E8:  GOTO   5212
....................  
....................    while(true){ 
....................    restart_wdt(); 
087EC:  CLRWDT
....................    if(syncError || oscError) 
087EE:  BTFSC  xB5.5
087F0:  BRA    87F6
087F2:  BTFSS  xB5.6
087F4:  BRA    8818
....................    {   
....................       ++ledErrorCounter; 
087F6:  MOVLB  6
087F8:  INCF   x46,F
087FA:  BTFSC  FD8.2
087FC:  INCF   x47,F
....................       if(ledErrorCounter>1000) 
087FE:  MOVF   x47,W
08800:  SUBLW  02
08802:  BC    8816
08804:  XORLW  FF
08806:  BNZ   880E
08808:  MOVF   x46,W
0880A:  SUBLW  E8
0880C:  BC    8816
....................       { 
....................          output_toggle(LED); 
0880E:  BCF    F96.2
08810:  BTG    F8D.2
....................          ledErrorCounter=0; 
08812:  CLRF   x47
08814:  CLRF   x46
08816:  MOVLB  0
....................       } 
....................    } 
.................... #ifdef DEBUG 
....................    if(kbhit()) 
08818:  BTFSC  F81.4
0881A:  BRA    882A
....................    { 
....................       setup_wdt(WDT_OFF); 
0881C:  BCF    FD1.0
....................       disable_interrupts (GLOBAL) ; 
0881E:  BCF    FF2.6
08820:  BCF    FF2.7
08822:  BTFSC  FF2.7
08824:  BRA    8820
....................       goDebug(); 
08826:  GOTO   57DC
....................    } 
.................... #endif 
....................    process_outpoints(); 
0882A:  GOTO   652A
....................    write_outputs(); 
0882E:  CALL   3EB0
....................    if(secondFlag) 
08832:  BTFSS  xB5.4
08834:  BRA    8848
....................    { 
....................       secondFlag=false; 
08836:  BCF    xB5.4
....................       processTimedEvents(); 
08838:  GOTO   7472
....................       if(!syncError && !oscError) output_toggle(LED); 
0883C:  BTFSC  xB5.5
0883E:  BRA    8848
08840:  BTFSC  xB5.6
08842:  BRA    8848
08844:  BCF    F96.2
08846:  BTG    F8D.2
....................    } 
....................   // print_inputs(false); 
....................    
.................... } 
08848:  BRA    87EC
.................... } 
....................  
0884A:  BRA    884A

Configuration Fuses:
   Word  1: C600   H4 IESO FCMEN
   Word  2: 1001   NOBROWNOUT NOWDT BORV45 NOPUT WDT256
   Word  3: 0000   NOPBADEN NOLPT1OSC NOMCLR
   Word  4: 0030   NOSTVREN DEBUG NOLVP NOXINST BBSIZ4K
   Word  5: C03F   NOPROTECT NOCPD NOCPB
   Word  6: E03F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 403F   NOEBTR NOEBTRB
